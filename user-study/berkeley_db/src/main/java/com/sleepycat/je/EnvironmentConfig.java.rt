<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.config.EnvironmentParams</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DbConfigManager</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.util.DbCacheSize</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.util.DbVerify</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.util.DbVerifyLog</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.File</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Properties</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.TimeUnit</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Handler</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Specifies the attributes of an environment.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>To change the default settings for a database environment, an application creates a</color>
<color=#75715e> * configuration object, customizes settings and uses it for environment construction. The set</color>
<color=#75715e> * methods of this class validate the configuration values when the method is invoked. An</color>
<color=#75715e> * IllegalArgumentException is thrown if the value is not valid for that attribute.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Most parameters are described by the parameter name String constants in this class. These</color>
<color=#75715e> * parameters can be specified or individually by calling {@link #setConfigParam}, through a</color>
<color=#75715e> * Properties object passed to {@link #EnvironmentConfig(Properties)}, or via properties in the</color>
<color=#75715e> * je.properties files located in the environment home directory.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>For example, an application can change the default btree node size with:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre></color>
<color=#75715e> *     envConfig.setConfigParam(EnvironmentConfig.LOCK_TIMEOUT, "250 ms");</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Some commonly used environment attributes have convenience setter/getter methods defined in</color>
<color=#75715e> * this class. For example, to change the default lock timeout setting for an environment, the</color>
<color=#75715e> * application can instead do the following:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre class=code></color>
<color=#75715e> *     // customize an environment configuration</color>
<color=#75715e> *     EnvironmentConfig envConfig = new EnvironmentConfig();</color>
<color=#75715e> *     // will throw if timeout value is invalid</color>
<color=#75715e> *     envConfig.setLockTimeout(250, TimeUnit.MILLISECONDS);</color>
<color=#75715e> *     // Open the environment using this configuration.</color>
<color=#75715e> *     Environment myEnvironment = new Environment(home, envConfig);</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Parameter values are applied using this order of precedence:</color>
<color=#75715e> *</color>
<color=#75715e> * <ol></color>
<color=#75715e> *   <li>Configuration parameters specified in je.properties take first precedence.</color>
<color=#75715e> *   <li>Configuration parameters set in the EnvironmentConfig object used at Environment</color>
<color=#75715e> *       construction are next.</color>
<color=#75715e> *   <li>Any configuration parameters not set by the application are set to system defaults,</color>
<color=#75715e> *       described along with the parameter name String constants in this class.</color>
<color=#75715e> * </ol></color>
<color=#75715e> *</color>
<color=#75715e> * <p>However, a small number of parameters do not have string constants in this class, and cannot</color>
<color=#75715e> * be set using {@link #setConfigParam}, a Properties object, or the je.properties file. These</color>
<color=#75715e> * parameters can only be changed via the following setter methods:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>{@link #setAllowCreate}</color>
<color=#75715e> *   <li>{@link #setCacheMode}</color>
<color=#75715e> *   <li>{@link #setClassLoader}</color>
<color=#75715e> *   <li>{@link #setCustomStats}</color>
<color=#75715e> *   <li>{@link #setExceptionListener}</color>
<color=#75715e> *   <li>{@link #setLoggingHandler}</color>
<color=#75715e> *   <li>{@link #setNodeName}</color>
<color=#75715e> *   <li>{@link #setRecoveryProgressListener}</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>An EnvironmentConfig can be used to specify both mutable and immutable environment properties.</color>
<color=#75715e> * Immutable properties may be specified when the first Environment handle (instance) is opened for</color>
<color=#75715e> * a given physical environment. When more handles are opened for the same environment, the</color>
<color=#75715e> * following rules apply:</color>
<color=#75715e> *</color>
<color=#75715e> * <ol></color>
<color=#75715e> *   <li>Immutable properties must equal the original values specified when constructing an</color>
<color=#75715e> *       Environment handle for an already open environment. When a mismatch occurs, an exception is</color>
<color=#75715e> *       thrown.</color>
<color=#75715e> *   <li>Mutable properties are ignored when constructing an Environment handle for an already open</color>
<color=#75715e> *       environment.</color>
<color=#75715e> * </ol></color>
<color=#75715e> *</color>
<color=#75715e> * <p>After an Environment has been constructed, its mutable properties may be changed using {@link</color>
<color=#75715e> * Environment#setMutableConfig}. See {@link EnvironmentMutableConfig} for a list of mutable</color>
<color=#75715e> * properties; all other properties are immutable. Whether a property is mutable or immutable is</color>
<color=#75715e> * also described along with the parameter name String constants in this class.</color>
<color=#75715e> *</color>
<color=#75715e> * <h4>Getting the Current Environment Properties</h4></color>
<color=#75715e> *</color>
<color=#75715e> * To get the current "live" properties of an environment after constructing it or changing its</color>
<color=#75715e> * properties, you must call {@link Environment#getConfig} or {@link Environment#getMutableConfig}.</color>
<color=#75715e> * The original EnvironmentConfig or EnvironmentMutableConfig object used to set the properties is</color>
<color=#75715e> * not kept up to date as properties are changed, and does not reflect property validation or</color>
<color=#75715e> * properties that are computed.</color>
<color=#75715e> *</color>
<color=#75715e> * <h4><a name="timeDuration">Time Duration Properties</a></h4></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Several environment and transaction configuration properties are time durations. For these</color>
<color=#75715e> * properties, a time unit is specified along with an integer duration value.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When specific setter and getter methods exist for a time duration property, these methods have</color>
<color=#75715e> * a {@link TimeUnit} argument. Examples are {@link #setLockTimeout(long,TimeUnit)} and {@link</color>
<color=#75715e> * #getLockTimeout(TimeUnit)}. Note that the {@link TimeUnit} argument may be null only when the</color>
<color=#75715e> * duration value is zero; there is no default unit that is used when null is specified.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When a time duration is specified as a string value, the following format is used.</color>
<color=#75715e> *</color>
<color=#75715e> * <pre>   {@code <value> [ <whitespace> <unit> ]}</pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The {@code <value>} is an integer. The {@code <unit>} name, if present, must be preceded by</color>
<color=#75715e> * one or more spaces or tabs.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The following {@code <unit>} names are allowed. Both {@link TimeUnit} names and IEEE standard</color>
<color=#75715e> * abbreviations are allowed. Unit names are case insensitive.</color>
<color=#75715e> *</color>
<color=#75715e> * <table border="true"></color>
<color=#75715e> * <tr><th>IEEE abbreviation</th></color>
<color=#75715e> *     <th>TimeUnit name</td></color>
<color=#75715e> *     <th>Definition</th></color>
<color=#75715e> * </tr></color>
<color=#75715e> * <tr><td>{@code ns}</td></color>
<color=#75715e> *     <td>{@code NANOSECONDS}</td></color>
<color=#75715e> *     <td>one billionth (10<sup>-9</sup>) of a second</td></color>
<color=#75715e> * </tr></color>
<color=#75715e> * <tr><td>{@code us}</td></color>
<color=#75715e> *     <td>{@code MICROSECONDS}</td></color>
<color=#75715e> *     <td>one millionth (10<sup>-6</sup>) of a second</td></color>
<color=#75715e> * </tr></color>
<color=#75715e> * <tr><td>{@code ms}</td></color>
<color=#75715e> *     <td>{@code MILLISECONDS}</td></color>
<color=#75715e> *     <td>one thousandth (10<sup>-3</sup>) of a second</td></color>
<color=#75715e> * </tr></color>
<color=#75715e> * <tr><td>{@code s}</td></color>
<color=#75715e> *     <td>{@code SECONDS}</td></color>
<color=#75715e> *     <td>1 second</td></color>
<color=#75715e> * </tr></color>
<color=#75715e> * <tr><td>{@code min}</td></color>
<color=#75715e> *     <td>&nbsp;</td></color>
<color=#75715e> *     <td>60 seconds</td></color>
<color=#75715e> * </tr></color>
<color=#75715e> * <tr><td>{@code h}</td></color>
<color=#75715e> *     <td>&nbsp;</td></color>
<color=#75715e> *     <td>3600 seconds</td></color>
<color=#75715e> * </tr></color>
<color=#75715e> * </table></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Examples are:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre></color>
<color=#75715e> * 3 seconds</color>
<color=#75715e> * 3 s</color>
<color=#75715e> * 500 ms</color>
<color=#75715e> * 1000000 (microseconds is implied)</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The maximum duration value is currently Integer.MAX_VALUE milliseconds. This translates to</color>
<color=#75715e> * almost 25 days (2147483647999999 ns, 2147483647999 us, 2147483647 ms, 2147483 s, 35791 min, 596</color>
<color=#75715e> * h).</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that when the {@code <unit>} is omitted, microseconds is implied. This default is</color>
<color=#75715e> * supported for compatibility with JE 3.3 and earlier. In JE 3.3 and earlier, explicit time units</color>
<color=#75715e> * were not used and durations were always implicitly specified in microseconds. The older methods</color>
<color=#75715e> * that do not have a {@link TimeUnit} argument, such as {@link #setLockTimeout(long)} and {@link</color>
<color=#75715e> * #getLockTimeout()}, use microsecond durations and have been deprecated.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>EnvironmentConfig</color> <color=#66d9ef>extends</color> <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#f8f8f2>{</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#ae81ff>1L</color><color=#f8f8f2>;</color>

  <color=#75715e>/** @hidden For internal use, to allow null as a valid value for the config parameter. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#f8f8f2>DEFAULT</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>EnvironmentConfig</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures the JE main cache size in bytes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Either MAX_MEMORY or MAX_MEMORY_PERCENT may be used to configure the cache size. When</color>
<color=#75715e>   * MAX_MEMORY is zero (its default value), MAX_MEMORY_PERCENT determines the cache size. See</color>
<color=#75715e>   * {@link #MAX_MEMORY_PERCENT} for more information.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When using MAX_MEMORY, take care to ensure that the overhead of the JVM does not leave less</color>
<color=#75715e>   * free space in the heap than intended. Some JVMs have more overhead than others, and some JVMs</color>
<color=#75715e>   * allocate their overhead within the specified heap size (the -Xmx value). To be sure that enough</color>
<color=#75715e>   * free space is available, use MAX_MEMORY_PERCENT rather than MAX_MEMORY.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When using the Oracle NoSQL DB product</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Long</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #setCacheSize</color>
<color=#75715e>   * @see #MAX_MEMORY_PERCENT</color>
<color=#75715e>   * @see <a href="EnvironmentStats.html#cacheSizing">Cache Statistics: Sizing</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>MAX_MEMORY</color> <color=#f92672>=</color> <color=#e6db74>"je.maxMemory"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures the JE main cache size as a percentage of the JVM maximum memory.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The system will evict database objects when it comes within a prescribed margin of the</color>
<color=#75715e>   * limit.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>By default, JE sets the cache size to:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <pre><blockquote></color>
<color=#75715e>   *         (MAX_MEMORY_PERCENT *  JVM maximum memory) / 100</color>
<color=#75715e>   * </pre></color>
<color=#75715e>   *</color>
<color=#75715e>   * </blockquote></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>where JVM maximum memory is specified by the JVM -Xmx flag. Note that the actual heap size</color>
<color=#75715e>   * may be somewhat less, depending on JVM overheads. The value used in the calculation above is</color>
<color=#75715e>   * the actual heap size as returned by {@link Runtime#maxMemory()}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The above calculation applies when {@link #MAX_MEMORY} is zero, which is its default value.</color>
<color=#75715e>   * Setting MAX_MEMORY to a non-zero value overrides the percentage based calculation and sets the</color>
<color=#75715e>   * cache size explicitly.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The following details apply to setting the cache size to a percentage of the JVM heap size</color>
<color=#75715e>   * byte size (this parameter) as well as to a byte size ({@link #MAX_MEMORY}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If {@link #SHARED_CACHE} is set to true, MAX_MEMORY and MAX_MEMORY_PERCENT specify the total</color>
<color=#75715e>   * size of the shared cache, and changing these parameters will change the size of the shared</color>
<color=#75715e>   * cache. New environments that join the cache may alter the cache size if their configuration</color>
<color=#75715e>   * uses a different cache size parameter.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The size of the cache is often directly proportional to operation performance. See {@link <a</color>
<color=#75715e>   * href="EnvironmentStats.java#cache">Cache Statistics</a>} for information on understanding and</color>
<color=#75715e>   * monitoring the cache. It is strongly recommended that the cache is large enough to hold all</color>
<color=#75715e>   * INs. See {@link DbCacheSize} for information on sizing the cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>To take full advantage of JE cache memory, it is strongly recommended that <a</color>
<color=#75715e>   * href="http://download.oracle.com/javase/7/docs/technotes/guides/vm/performance-enhancements-7.html#compressedOop">compressed</color>
<color=#75715e>   * oops</a> (<code>-XX:+UseCompressedOops</code>) is specified when a 64-bit JVM is used and the</color>
<color=#75715e>   * maximum heap size is less than 32 GB. As described in the referenced documentation, compressed</color>
<color=#75715e>   * oops is sometimes the default JVM mode even when it is not explicitly specified in the Java</color>
<color=#75715e>   * command. However, if compressed oops is desired then it <em>must</em> be explicitly specified</color>
<color=#75715e>   * in the Java command when running DbCacheSize or a JE application. If it is not explicitly</color>
<color=#75715e>   * specified then JE will not aware of it, even if it is the JVM default setting, and will not</color>
<color=#75715e>   * take it into account when calculating cache memory sizes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that log write buffers may be flushed to disk if the cache size is changed after the</color>
<color=#75715e>   * environment has been opened.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>60</td></color>
<color=#75715e>   * <td>1</td></color>
<color=#75715e>   * <td>90</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #setCachePercent</color>
<color=#75715e>   * @see #MAX_MEMORY</color>
<color=#75715e>   * @see <a href="EnvironmentStats.html#cacheSizing">Cache Statistics: Sizing</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>MAX_MEMORY_PERCENT</color> <color=#f92672>=</color> <color=#e6db74>"je.maxMemoryPercent"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures the number of bytes to be used as a secondary, off-heap cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The off-heap cache is used to hold record data and Btree nodes when these are evicted from</color>
<color=#75715e>   * the "main cache" because it overflows. Eviction occurs according to an LRU algorithm and takes</color>
<color=#75715e>   * into account the user- specified {@link CacheMode}. When the off-heap cache overflows, eviction</color>
<color=#75715e>   * occurs there also according to the same algorithm.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The main cache is in the Java heap and consists primarily of the Java objects making up the</color>
<color=#75715e>   * in-memory Btree data structure. Btree objects are not serialized the main cache, so no object</color>
<color=#75715e>   * materialization is needed to access the Btree there. Access to records in the main cache is</color>
<color=#75715e>   * therefore very fast, but the main cache has drawbacks as well: 1) The larger the main cache,</color>
<color=#75715e>   * the more likely it is to have Java GC performance problems. 2) When the Java heap exceeds 32GB,</color>
<color=#75715e>   * the "compressed OOPs" setting no longer applies and less data will fit in the same amount of</color>
<color=#75715e>   * memory. For these reasons, JE applications often configure a heap of 32GB or less, and a main</color>
<color=#75715e>   * cache that is significantly less than 32GB, leaving any additional machine memory for use by</color>
<color=#75715e>   * the file system cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The use of the file system cache has performance benefits, but also has its own drawbacks:</color>
<color=#75715e>   * 1) There is a significant redundancy between the main cache and the file system cache because</color>
<color=#75715e>   * all data and Btree information that is logged (written) by JE appears in the file system and</color>
<color=#75715e>   * may also appear in the main cache. 2) It is not possible for <em>dirty</em> Btree information</color>
<color=#75715e>   * to be placed in the file system cache without logging it, this logging may be otherwise</color>
<color=#75715e>   * unnecessary, and the logging creates additional work for the JE cleaner; in other words, the</color>
<color=#75715e>   * size of the main cache alone determines the maximum size of the in-memory "dirty set".</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The off-heap cache is stored outside the Java heap using a native platform memory allocator.</color>
<color=#75715e>   * The current implementation relies on internals that are specific to the Oracle and IBM JDKs;</color>
<color=#75715e>   * however, a memory allocator interface that can be implemented for other situations is being</color>
<color=#75715e>   * considered for a future release. Records and Btree objects are serialized when they are placed</color>
<color=#75715e>   * in the off-heap cache, and they must be materialized when they are moved back to the main cache</color>
<color=#75715e>   * in order to access them. This serialization and materialization adds some CPU overhead and</color>
<color=#75715e>   * thread contention, as compared to accessing data directly in the main cache. The off-heap cache</color>
<color=#75715e>   * can contain dirty Btree information, so it can be used to increase the maximum size of the</color>
<color=#75715e>   * in-memory "dirty set".</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>NOTE: If an off-heap cache is configured but cannot be used because that native allocator is</color>
<color=#75715e>   * not available in the JDK that is used, an {@code IllegalStateException} will be thrown by the</color>
<color=#75715e>   * {@link Environment} or {@link com.sleepycat.je.rep.ReplicatedEnvironment} constructor. In the</color>
<color=#75715e>   * current release, this means that the {@code sun.misc.Unsafe} class must contain the {@code</color>
<color=#75715e>   * allocateMemory} method and related methods, as defined in the Oracle JDK.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When configuring an off-heap cache you can think of the performance trade-offs in two ways.</color>
<color=#75715e>   * First, if the off-heap cache is considered to be a replacement for the file system cache, the</color>
<color=#75715e>   * serialization and materialization overhead is not increased. In this case, the use of the</color>
<color=#75715e>   * off-heap cache is clearly beneficial, and using the off-heap cache "instead of" the file system</color>
<color=#75715e>   * cache is normally recommended. Second, the off-heap cache can be used along with a main cache</color>
<color=#75715e>   * that is reduced in size in order to compensate for Java GC problems. In this case, the</color>
<color=#75715e>   * trade-off is between the additional serialization, materialization and contention overheads of</color>
<color=#75715e>   * the off-heap cache, as compared to the Java GC overhead.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When dividing up available memory for the JVM heap, the off-heap cache, and for other uses,</color>
<color=#75715e>   * please be aware that the file system cache and the off-heap cache are different in one</color>
<color=#75715e>   * important respect. The file system cache automatically shrinks when memory is needed by the OS</color>
<color=#75715e>   * or other processes, while the off-heap cache does not. Therefore, it is best to be conservative</color>
<color=#75715e>   * about leaving memory free for other uses, and it is not a good idea to size the off-heap cache</color>
<color=#75715e>   * such that all machine memory will be allocated. If off-heap allocations or other allocations</color>
<color=#75715e>   * fail because there is no available memory, the process is likely to die without any exception</color>
<color=#75715e>   * being thrown. In one test on Linux, for example, the process was killed abruptly by the OS and</color>
<color=#75715e>   * the only indication of the problem was the following shown by {@code dmesg}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <pre></color>
<color=#75715e>   * Out of memory: Kill process 28768 (java) score 974 or sacrifice child</color>
<color=#75715e>   * Killed process 28768 (java)</color>
<color=#75715e>   *    total-vm:278255336kB, anon-rss:257274420kB, file-rss:0kB</color>
<color=#75715e>   * </pre></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>WARNING: Although this configuration property is mutable, it cannot be changed from zero to</color>
<color=#75715e>   * non-zero, or non-zero to zero. In other words, the size of the off-heap cache can be changed</color>
<color=#75715e>   * after initially configuring a non-zero size, but the off-heap cache cannot be turned on and off</color>
<color=#75715e>   * dynamically. An attempt to do so will cause an {@code IllegalArgumentException} to be thrown by</color>
<color=#75715e>   * the {@link Environment} or {@link com.sleepycat.je.rep.ReplicatedEnvironment} constructor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Long</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #setOffHeapCacheSize(long)</color>
<color=#75715e>   * @see <a href="EnvironmentStats.html#cacheSizing">Cache Statistics: Sizing</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>MAX_OFF_HEAP_MEMORY</color> <color=#f92672>=</color> <color=#e6db74>"je.maxOffHeapMemory"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If true, the shared cache is used by this environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>By default this parameter is false and this environment uses a private cache. If this</color>
<color=#75715e>   * parameter is set to true, this environment will use a cache that is shared with all other open</color>
<color=#75715e>   * environments in this process that also set this parameter to true. There is a single shared</color>
<color=#75715e>   * cache per process.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>By using the shared cache, multiple open environments will make better use of memory because</color>
<color=#75715e>   * the cache LRU algorithm is applied across all information in all environments sharing the</color>
<color=#75715e>   * cache. For example, if one environment is open but not recently used, then it will only use a</color>
<color=#75715e>   * small portion of the cache, leaving the rest of the cache for environments that have been</color>
<color=#75715e>   * recently used.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>false</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #setSharedCache</color>
<color=#75715e>   * @see <a href="EnvironmentStats.html#cacheSizing">Cache Statistics: Sizing</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>SHARED_CACHE</color> <color=#f92672>=</color> <color=#e6db74>"je.sharedCache"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * An upper limit on the number of bytes used for data storage. Works with {@link #FREE_DISK} to</color>
<color=#75715e>   * define the storage limit. If the limit is exceeded, write operations will be prohibited.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If set to zero (the default), no usage limit is enforced, meaning that all space on the</color>
<color=#75715e>   * storage volume, minus {@link #FREE_DISK}, may be used. If MAX_DISK is non-zero, FREE_DISK is</color>
<color=#75715e>   * subtracted from MAX_DISK to determine the usage threshold for prohibiting write operations. If</color>
<color=#75715e>   * multiple JE environments share the same storage volume, setting MAX_DISK to a non-zero value is</color>
<color=#75715e>   * strongly recommended.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p style="margin-left: 2em">Note: An exception to the rule above is when MAX_DISK is less than</color>
<color=#75715e>   * or equal to 10GB and FREE_DISK is not explicitly specified. See {@link #FREE_DISK} more</color>
<color=#75715e>   * information. Both the FREE_DISK and MAX_DISK thresholds (if configured) are checked during a</color>
<color=#75715e>   * write operation. If either threshold is crossed, the behavior of the JE environment is as</color>
<color=#75715e>   * follows:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>Application write operations will throw {@link DiskLimitException}. DiskLimitException</color>
<color=#75715e>   *       extends {@link OperationFailureException} and will invalidate the transaction, but will</color>
<color=#75715e>   *       not invalidate the environment. Read operations may continue even when write operations</color>
<color=#75715e>   *       are prohibited.</color>
<color=#75715e>   *   <li>When using NoSQL DB, the above item applies to client CRUD operations as well as</color>
<color=#75715e>   *       operations performed on internal metadata. When a disk limit is violated, NoSQL DB will</color>
<color=#75715e>   *       throw exceptions for client write operations and for operations that update internal</color>
<color=#75715e>   *       metadata. Related exceptions may be logged for other internal write operations. Such</color>
<color=#75715e>   *       exceptions will be derived from the JE DiskLimitException.</color>
<color=#75715e>   *   <li>{@link Environment#checkpoint}, {@link Environment#sync} and {@link Database#sync} will</color>
<color=#75715e>   *       throw DiskLimitException.</color>
<color=#75715e>   *   <li>{@link Environment#close} may throw DiskLimitException when a final checkpoint is</color>
<color=#75715e>   *       performed. However, the environment will be properly closed in other respects.</color>
<color=#75715e>   *   <li>The JE evictor will not log dirty nodes when the cache overflows and therefore dirty</color>
<color=#75715e>   *       nodes cannot be evicted from cache. So although read operations are allowed, cache</color>
<color=#75715e>   *       thrashing may occur if all INs do not fit in cache as {@link DbCacheSize recommended}.</color>
<color=#75715e>   *   <li>In an HA environment a disk limit may be violated on a replica node but not the master</color>
<color=#75715e>   *       node. In this case, a DiskLimitException will not be thrown by a write operation on the</color>
<color=#75715e>   *       master node. Instead, {@link com.sleepycat.je.rep.InsufficientAcksException} or {@link</color>
<color=#75715e>   *       com.sleepycat.je.rep.InsufficientReplicasException} will be thrown if the {@link</color>
<color=#75715e>   *       Durability#getReplicaAck() ack requirements} are not met.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>JE uses a log structured storage system where data files often become gradually obsolete</color>
<color=#75715e>   * over time (see {@link #CLEANER_MIN_UTILIZATION}). The JE cleaner is responsible for reclaiming</color>
<color=#75715e>   * obsolete space by cleaning and deleting data files. In a standalone (non-HA) environment, data</color>
<color=#75715e>   * files are normally deleted quickly after being cleaned, but may be reserved and protected</color>
<color=#75715e>   * temporarily by a {@link com.sleepycat.je.util.DbBackup} or {@link DiskOrderedCursor}. These</color>
<color=#75715e>   * reserved files will be deleted as soon as they are no longer protected.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In an HA environment, JE will retain as many reserved files as possible to support</color>
<color=#75715e>   * replication to nodes that are out of contact. All cleaned files are reserved (not deleted)</color>
<color=#75715e>   * until approaching a disk limit, at which time they are deleted, as long as they are not</color>
<color=#75715e>   * protected. Reserved files are protected when they are needed for replication to active nodes or</color>
<color=#75715e>   * for feeding an active network restore.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For more information on reserved and protected data files, see {@link</color>
<color=#75715e>   * EnvironmentStats#getActiveLogSize()}, {@link EnvironmentStats#getReservedLogSize()}, {@link</color>
<color=#75715e>   * EnvironmentStats#getProtectedLogSize()}, {@link EnvironmentStats#getProtectedLogSizeMap()},</color>
<color=#75715e>   * {@link EnvironmentStats#getAvailableLogSize()} and {@link EnvironmentStats#getTotalLogSize}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When multiple JE environments share the same storage volume, the FREE_DISK amount will be</color>
<color=#75715e>   * maintained for each environment. The following scenario illustrates use of a single shared</color>
<color=#75715e>   * volume with capacity 300GB:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>JE-1 and JE-2 each have MAX_DISK=100GB and FREE_DISK=5GB,</color>
<color=#75715e>   *   <li>100GB is used for fixed miscellaneous storage.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Each JE environment will use no more than 95GB each, so at least 10GB will remain free</color>
<color=#75715e>   * overall. In other words, if both JE environments reach their threshold and write operations are</color>
<color=#75715e>   * prohibited, each JE environment will have 5GB of free space for recovery (10GB total).</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>On the other hand, when an external service is also consuming disk space and its usage of</color>
<color=#75715e>   * disk space is variable over time, the situation is more complex and JE cannot always guarantee</color>
<color=#75715e>   * that FREE_DISK is honored. The following scenario includes multiple JE environments as well an</color>
<color=#75715e>   * external service, all sharing a 300GB volume.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>JE-1 and JE-2 each have MAX_DISK=100GB and FREE_DISK=5GB,</color>
<color=#75715e>   *   <li>an external service is expected to use up to 50GB, and</color>
<color=#75715e>   *   <li>50GB is used for fixed miscellaneous storage.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Assuming that the external service stays within its 50GB limit then, as the previous</color>
<color=#75715e>   * example, each JE environment will normally use no more than 95GB each, and at least 10GB will</color>
<color=#75715e>   * remain free overall. However, if the external service exceeds its threshold, JE will make a</color>
<color=#75715e>   * best effort to prohibit write operations in order to honor the FREE_DISK limit, but this is not</color>
<color=#75715e>   * always possible, as illustrated by the following sequence of events:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>If the external service uses all its allocated space, 50GB, and JE environments are each</color>
<color=#75715e>   *       using 75GB, then there will be 50GB free overall (25GB for each JE environment). Write</color>
<color=#75715e>   *       operations are allowed in both JE environments.</color>
<color=#75715e>   *   <li>If the external service then exceeds its limit by 25GB and uses 75GB, there will only</color>
<color=#75715e>   *       25GB free overall. But each JE environment is still under its 90GB limit and there is</color>
<color=#75715e>   *       still more than 5GB free overall, so write operations are still allowed.</color>
<color=#75715e>   *   <li>If each JE environment uses an additional 10GB of space, there will only be 5GB free</color>
<color=#75715e>   *       overall. Each JE environment is using only 85GB, which is under its 95GB limit. But the</color>
<color=#75715e>   *       5GB FREE_DISK limit for the volume overall has been reached and therefore JE write</color>
<color=#75715e>   *       operations will be prohibited.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * Leaving only 5GB of free space in the prior scenario is not ideal, but it is at least enough</color>
<color=#75715e>   * for one JE environment at a time to be recovered. The reality is that when an external entity</color>
<color=#75715e>   * exceeds its expected disk usage, JE cannot always compensate. For example, if the external</color>
<color=#75715e>   * service continues to use more space in the scenario above, the volume will eventually be filled</color>
<color=#75715e>   * completely.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Long</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #FREE_DISK</color>
<color=#75715e>   * @see #setMaxDisk(long)</color>
<color=#75715e>   * @see #getMaxDisk()</color>
<color=#75715e>   * @since 7.5</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>MAX_DISK</color> <color=#f92672>=</color> <color=#e6db74>"je.maxDisk"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A lower limit on the number of bytes of free space to maintain on a volume and per JE</color>
<color=#75715e>   * Environment. Works with {@link #MAX_DISK} to define the storage limit. If the limit is</color>
<color=#75715e>   * exceeded, write operations will be prohibited.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The default FREE_DISK value is 5GB. This value is designed to be large enough to allow</color>
<color=#75715e>   * manual recovery after exceeding a disk threshold.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If FREE_DISK is set to zero, no free space limit is enforced. This is not recommended, since</color>
<color=#75715e>   * manual recovery may be very difficult or impossible when the volume is completely full.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If non-zero, this parameter is used in two ways.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>FREE_DISK determines the minimum of free space left on the storage volume. If less than</color>
<color=#75715e>   *       this amount is free, write operations are prohibited.</color>
<color=#75715e>   *   <li>If MAX_DISK is configured, FREE_DISK is subtracted from MAX_DISK to determine the usage</color>
<color=#75715e>   *       threshold for prohibiting write operations. See {@link #MAX_DISK} for more information.</color>
<color=#75715e>   *       <p style="margin-left: 2em">Note that this subtraction could make testing inconvenient</color>
<color=#75715e>   *       when a small value is specified for MAX_DISK and FREE_DISK is not also specified. For</color>
<color=#75715e>   *       example, if MAX_DISK is 1GB and FREE_DISK is 5G (its default value), then no writing</color>
<color=#75715e>   *       would be allowed (MAX_DISK minus FREE_DISK is negative 4G). To address this, the</color>
<color=#75715e>   *       subtraction is performed only if one of two conditions is met:</color>
<color=#75715e>   *       <ol></color>
<color=#75715e>   *         <li>FREE_DISK is explicitly specified, or</color>
<color=#75715e>   *         <li>MAX_DISK is greater than 10GB.</color>
<color=#75715e>   *       </ol></color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Long</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>5,368,709,120 (5GB)</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #MAX_DISK</color>
<color=#75715e>   * @since 7.5</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>FREE_DISK</color> <color=#f92672>=</color> <color=#e6db74>"je.freeDisk"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If true, a checkpoint is forced following recovery, even if the log ends with a checkpoint.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>false</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ENV_RECOVERY_FORCE_CHECKPOINT</color> <color=#f92672>=</color> <color=#e6db74>"je.env.recoveryForceCheckpoint"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Used after performing a restore from backup to force creation of a new log file prior to</color>
<color=#75715e>   * recovery.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>As of JE 6.3, the use of this parameter is unnecessary except in special cases. See the</color>
<color=#75715e>   * "Restoring from a backup" section in the DbBackup javadoc for more information.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>false</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="util/DbBackup.html#restore">Restoring from a backup</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ENV_RECOVERY_FORCE_NEW_FILE</color> <color=#f92672>=</color> <color=#e6db74>"je.env.recoveryForceNewFile"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * By default, if a checksum exception is found at the end of the log during Environment startup,</color>
<color=#75715e>   * JE will assume the checksum is due to previously interrupted I/O and will quietly truncate the</color>
<color=#75715e>   * log and restart. If this property is set to true, when a ChecksumException occurs in the last</color>
<color=#75715e>   * log file during recovery, instead of truncating the log file, and automatically restarting,</color>
<color=#75715e>   * attempt to continue reading past the corrupted record with the checksum error to see if there</color>
<color=#75715e>   * are commit records following the corruption. If there are, throw an EnvironmentFailureException</color>
<color=#75715e>   * to indicate the presence of committed transactions. The user may then need to run DbTruncateLog</color>
<color=#75715e>   * to truncate the log for further recovery after doing manual analysis of the log. Setting this</color>
<color=#75715e>   * property is suitable when the application wants to guard against unusual cases.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>false</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>HALT_ON_COMMIT_AFTER_CHECKSUMEXCEPTION</color> <color=#f92672>=</color>
      <color=#e6db74>"je.haltOnCommitAfterChecksumException"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If true, starts up the INCompressor thread.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>true</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ENV_RUN_IN_COMPRESSOR</color> <color=#f92672>=</color> <color=#e6db74>"je.env.runINCompressor"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If true, starts up the checkpointer thread.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>true</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ENV_RUN_CHECKPOINTER</color> <color=#f92672>=</color> <color=#e6db74>"je.env.runCheckpointer"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If true, starts up the cleaner thread.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>true</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ENV_RUN_CLEANER</color> <color=#f92672>=</color> <color=#e6db74>"je.env.runCleaner"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If true, eviction is done by a pool of evictor threads, as well as being done inline by</color>
<color=#75715e>   * application threads. If false, the evictor pool is not used, regardless of the values of {@link</color>
<color=#75715e>   * #EVICTOR_CORE_THREADS} and {@link #EVICTOR_MAX_THREADS}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>true</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ENV_RUN_EVICTOR</color> <color=#f92672>=</color> <color=#e6db74>"je.env.runEvictor"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If true, off-heap eviction is done by a pool of evictor threads, as well as being done inline</color>
<color=#75715e>   * by application threads. If false, the evictor pool is not used, regardless of the values of</color>
<color=#75715e>   * {@link #OFFHEAP_CORE_THREADS} and {@link #OFFHEAP_MAX_THREADS}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>true</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ENV_RUN_OFFHEAP_EVICTOR</color> <color=#f92672>=</color> <color=#e6db74>"je.env.runOffHeapEvictor"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The maximum number of read operations performed by JE background activities (e.g., cleaning)</color>
<color=#75715e>   * before sleeping to ensure that application threads can perform I/O. If zero (the default) then</color>
<color=#75715e>   * no limitation on I/O is enforced.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #ENV_BACKGROUND_SLEEP_INTERVAL</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ENV_BACKGROUND_READ_LIMIT</color> <color=#f92672>=</color> <color=#e6db74>"je.env.backgroundReadLimit"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The maximum number of write operations performed by JE background activities (e.g.,</color>
<color=#75715e>   * checkpointing and eviction) before sleeping to ensure that application threads can perform I/O.</color>
<color=#75715e>   * If zero (the default) then no limitation on I/O is enforced.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #ENV_BACKGROUND_SLEEP_INTERVAL</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ENV_BACKGROUND_WRITE_LIMIT</color> <color=#f92672>=</color> <color=#e6db74>"je.env.backgroundWriteLimit"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The duration that JE background activities will sleep when the {@link</color>
<color=#75715e>   * #ENV_BACKGROUND_WRITE_LIMIT} or {@link #ENV_BACKGROUND_READ_LIMIT} is reached. If {@link</color>
<color=#75715e>   * #ENV_BACKGROUND_WRITE_LIMIT} and {@link #ENV_BACKGROUND_READ_LIMIT} are zero, this setting is</color>
<color=#75715e>   * not used.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>{@link <a href="#timeDuration">Duration</a>}</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>1 ms</td></color>
<color=#75715e>   * <td>1 ms</td></color>
<color=#75715e>   * <td>24 d</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentConfig.html#timeDuration">Time Duration Properties</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ENV_BACKGROUND_SLEEP_INTERVAL</color> <color=#f92672>=</color> <color=#e6db74>"je.env.backgroundSleepInterval"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Debugging support: check leaked locks and txns at env close.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>true</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ENV_CHECK_LEAKS</color> <color=#f92672>=</color> <color=#e6db74>"je.env.checkLeaks"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Debugging support: call Thread.yield() at strategic points.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>false</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ENV_FORCED_YIELD</color> <color=#f92672>=</color> <color=#e6db74>"je.env.forcedYield"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures the use of transactions.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This should be set to true when transactional guarantees such as atomicity of multiple</color>
<color=#75715e>   * operations and durability are important.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If true, create an environment that is capable of performing transactions. If true is not</color>
<color=#75715e>   * passed, transactions may not be used. For licensing purposes, the use of this method</color>
<color=#75715e>   * distinguishes the use of the Transactional product. Note that if transactions are not used,</color>
<color=#75715e>   * specifying true does not create additional overhead in the environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>false</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #setTransactional</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ENV_IS_TRANSACTIONAL</color> <color=#f92672>=</color> <color=#e6db74>"je.env.isTransactional"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures the database environment for no locking.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If true, create the environment with record locking. This property should be set to false</color>
<color=#75715e>   * only in special circumstances when it is safe to run without record locking.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This configuration option should be used when locking guarantees such as consistency and</color>
<color=#75715e>   * isolation are not important. If locking mode is disabled (it is enabled by default), the</color>
<color=#75715e>   * cleaner is automatically disabled. The user is responsible for invoking the cleaner and</color>
<color=#75715e>   * ensuring that there are no concurrent operations while the cleaner is running.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>true</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #setLocking</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ENV_IS_LOCKING</color> <color=#f92672>=</color> <color=#e6db74>"je.env.isLocking"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures the database environment to be read-only, and any attempt to modify a database will</color>
<color=#75715e>   * fail.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>A read-only environment has several limitations and is recommended only in special</color>
<color=#75715e>   * circumstances. Note that there is no performance advantage to opening an environment read-only.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The primary reason for opening an environment read-only is to open a single environment in</color>
<color=#75715e>   * multiple JVM processes. Only one JVM process at a time may open the environment read-write. See</color>
<color=#75715e>   * {@link EnvironmentLockedException}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When the environment is open read-only, the following limitations apply.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>In the read-only environment no writes may be performed, as expected, and databases must</color>
<color=#75715e>   *       be opened read-only using {@link DatabaseConfig#setReadOnly}.</color>
<color=#75715e>   *   <li>The read-only environment receives a snapshot of the data that is effectively frozen at</color>
<color=#75715e>   *       the time the environment is opened. If the application has the environment open</color>
<color=#75715e>   *       read-write in another JVM process and modifies the environment's databases in any way,</color>
<color=#75715e>   *       the read-only version of the data will not be updated until the read-only JVM process</color>
<color=#75715e>   *       closes and reopens the environment (and by extension all databases in that environment).</color>
<color=#75715e>   *   <li>If the read-only environment is opened while the environment is in use by another JVM</color>
<color=#75715e>   *       process in read-write mode, opening the environment read-only (recovery) is likely to</color>
<color=#75715e>   *       take longer than it does after a clean shutdown. This is due to the fact that the</color>
<color=#75715e>   *       read-write JVM process is writing and checkpoints are occurring that are not coordinated</color>
<color=#75715e>   *       with the read-only JVM process. The effect is similar to opening an environment after a</color>
<color=#75715e>   *       crash.</color>
<color=#75715e>   *   <li>In a read-only environment, the JE cache will contain information that cannot be evicted</color>
<color=#75715e>   *       because it was reconstructed by recovery and cannot be flushed to disk. This means that</color>
<color=#75715e>   *       the read-only environment may not be suitable for operations that use large amounts of</color>
<color=#75715e>   *       memory, and poor performance may result if this is attempted.</color>
<color=#75715e>   *   <li>In a read-write environment, the log cleaner will be prohibited from deleting log files</color>
<color=#75715e>   *       for as long as the environment is open read-only in another JVM process. This may cause</color>
<color=#75715e>   *       disk usage to rise, and for this reason it is not recommended that an environment is kept</color>
<color=#75715e>   *       open read-only in this manner for long periods.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For these reasons, it is recommended that a read-only environment be used only for short</color>
<color=#75715e>   * periods and for operations that are not performance critical or memory intensive. With few</color>
<color=#75715e>   * exceptions, all application functions that require access to a JE environment should be built</color>
<color=#75715e>   * into a single application so that they can be performed in the JVM process where the</color>
<color=#75715e>   * environment is open read-write.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In most applications, opening an environment read-only can and should be avoided.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>false</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #setReadOnly</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ENV_READ_ONLY</color> <color=#f92672>=</color> <color=#e6db74>"je.env.isReadOnly"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If true, use latches instead of synchronized blocks to implement the lock table and log write</color>
<color=#75715e>   * mutexes. Latches require that threads queue to obtain the mutex in question and therefore</color>
<color=#75715e>   * guarantee that there will be no mutex starvation, but do incur a performance penalty. Latches</color>
<color=#75715e>   * should not be necessary in most cases, so synchronized blocks are the default. An application</color>
<color=#75715e>   * that puts heavy load on JE with threads with different thread priorities might find it useful</color>
<color=#75715e>   * to use latches. In a Java 5 JVM, where java.util.concurrent.locks.ReentrantLock is used for the</color>
<color=#75715e>   * latch implementation, this parameter will determine whether they are 'fair' or not. This</color>
<color=#75715e>   * parameter is 'static' across all environments.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>false</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ENV_FAIR_LATCHES</color> <color=#f92672>=</color> <color=#e6db74>"je.env.fairLatches"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The timeout for detecting internal latch timeouts, so that deadlocks can be detected. Latches</color>
<color=#75715e>   * are held internally for very short durations. If due to unforeseen problems a deadlock occurs,</color>
<color=#75715e>   * a timeout will occur after the duration specified by this parameter. When a latch timeout</color>
<color=#75715e>   * occurs:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>The Environment is invalidated and must be closed.</color>
<color=#75715e>   *   <li>An {@link EnvironmentFailureException} is thrown.</color>
<color=#75715e>   *   <li>A full thread dump is logged at level SEVERE.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * If this happens, thread dump in je.info file should be preserved so it can be used to analyze</color>
<color=#75715e>   * the problem.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Most applications should not change this parameter. The default value, 5 minutes, should be</color>
<color=#75715e>   * much longer than a latch is ever held.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>{@link <a href="#timeDuration">Duration</a>}</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>5 min</td></color>
<color=#75715e>   * <td>1 ms</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentConfig.html#timeDuration">Time Duration Properties</a></color>
<color=#75715e>   * @since 6.2</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ENV_LATCH_TIMEOUT</color> <color=#f92672>=</color> <color=#e6db74>"je.env.latchTimeout"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The interval added to the system clock time for determining that a record may have expired.</color>
<color=#75715e>   * Used when an internal integrity error may be present, but may also be due to a record that</color>
<color=#75715e>   * expired and the system clock was moved back.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For example, say a record expires and then the clock is moved back by one hour to correct a</color>
<color=#75715e>   * daylight savings time error. Because the LN and BIN slot for an expired record are purged</color>
<color=#75715e>   * separately (see <a href="WriteOptions#ttl">Time-To_live</a>), in this case the LN was purged</color>
<color=#75715e>   * but the BIN slot was not purged. When accessing the record's key via the BIN slot, it will</color>
<color=#75715e>   * appear that it is not expired. But then when accessing the the data, the LN will not be</color>
<color=#75715e>   * accessible. Normally this would be considered a fatal integrity error, but since the record</color>
<color=#75715e>   * will expire within the 2 hour limit, it is simply treated as an expired record.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Most applications should not change this parameter. The default value, two hours, is enough</color>
<color=#75715e>   * to account for minor clock adjustments or accidentally setting the clock one hour off.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>{@link <a href="#timeDuration">Duration</a>}</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>2 h</td></color>
<color=#75715e>   * <td>1 ms</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentConfig.html#timeDuration">Time Duration Properties</a></color>
<color=#75715e>   * @since 7.0</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ENV_TTL_CLOCK_TOLERANCE</color> <color=#f92672>=</color> <color=#e6db74>"je.env.ttlClockTolerance"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If true (the default), expired data is filtered from queries and purged by the cleaner. This</color>
<color=#75715e>   * might be set to false to recover data after an extended down time.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>WARNING: Disabling expiration is intended for special-purpose access for data recovery only.</color>
<color=#75715e>   * When this parameter is set to false, records that have expired may or may not have been purged,</color>
<color=#75715e>   * so they may or may not be accessible. In addition, it is possible for the key and data of a</color>
<color=#75715e>   * record to expire independently, so the key may be accessible (if the data is not requested by</color>
<color=#75715e>   * the read operation), while the record will appear to be deleted when the data is requested. The</color>
<color=#75715e>   * same thing is true of primary and secondary records, which are also purged independently. A</color>
<color=#75715e>   * record may be accessible by primary key but not secondary key, and vice-versa.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>yes</td></color>
<color=#75715e>   * <td>true</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ENV_EXPIRATION_ENABLED</color> <color=#f92672>=</color> <color=#e6db74>"je.env.expirationEnabled"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If true, enable eviction of metadata for closed databases. There is no known benefit to setting</color>
<color=#75715e>   * this parameter to false.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This param is unlikely to be needed for tuning, but is sometimes useful for debugging and</color>
<color=#75715e>   * testing.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>true</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentStats.html#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ENV_DB_EVICTION</color> <color=#f92672>=</color> <color=#e6db74>"je.env.dbEviction"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If true (the default) preload all duplicates databases at once when upgrading from JE 4.1 and</color>
<color=#75715e>   * earlier. If false, preload each duplicates database individually instead. Preloading all</color>
<color=#75715e>   * databases at once gives a performance advantage if the JE cache is roughly large enough to</color>
<color=#75715e>   * contain the internal nodes for all duplicates databases. Preloading each database individually</color>
<color=#75715e>   * gives a performance advantage if the JE cache is roughly large enough to contain the internal</color>
<color=#75715e>   * nodes for a single duplicates database.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>true</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ENV_DUP_CONVERT_PRELOAD_ALL</color> <color=#f92672>=</color> <color=#e6db74>"je.env.dupConvertPreloadAll"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * By default, JE passes an entire log record to the Adler32 class for checksumming. This can</color>
<color=#75715e>   * cause problems with the GC in some cases if the records are large and there is concurrency.</color>
<color=#75715e>   * Setting this parameter will cause JE to pass chunks of the log record to the checksumming class</color>
<color=#75715e>   * so that the GC does not block. 0 means do not chunk.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>1048576 (1M)</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ADLER32_CHUNK_SIZE</color> <color=#f92672>=</color> <color=#e6db74>"je.adler32.chunkSize"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The total memory taken by log buffers, in bytes. If 0, use 7% of je.maxMemory. If 0 and</color>
<color=#75715e>   * je.sharedCache=true, use 7% divided by N where N is the number of environments sharing the</color>
<color=#75715e>   * global cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Long</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>{@value</color>
<color=#75715e>   * EnvironmentParams#LOG_MEM_SIZE_MIN}</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_TOTAL_BUFFER_BYTES</color> <color=#f92672>=</color> <color=#e6db74>"je.log.totalBufferBytes"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of JE log buffers.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>{@value</color>
<color=#75715e>   * EnvironmentParams#NUM_LOG_BUFFERS_DEFAULT}</td></color>
<color=#75715e>   * <td>2</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_NUM_BUFFERS</color> <color=#f92672>=</color> <color=#e6db74>"je.log.numBuffers"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The maximum starting size of a JE log buffer. JE silently restricts this value to be no more</color>
<color=#75715e>   * than the configured maximum log file size (je.log.fileMax).</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>1048576 (1M)</td></color>
<color=#75715e>   * <td>1024 (1K)</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_BUFFER_SIZE</color> <color=#f92672>=</color> <color=#e6db74>"je.log.bufferSize"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The buffer size for faulting in objects from disk, in bytes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>2048 (2K)</td></color>
<color=#75715e>   * <td>32</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_FAULT_READ_SIZE</color> <color=#f92672>=</color> <color=#e6db74>"je.log.faultReadSize"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The read buffer size for log iterators, which are used when scanning the log during activities</color>
<color=#75715e>   * like log cleaning and environment open, in bytes. This may grow as the system encounters larger</color>
<color=#75715e>   * log entries.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>8192 (8K)</td></color>
<color=#75715e>   * <td>128</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_ITERATOR_READ_SIZE</color> <color=#f92672>=</color> <color=#e6db74>"je.log.iteratorReadSize"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The maximum read buffer size for log iterators, which are used when scanning the log during</color>
<color=#75715e>   * activities like log cleaning and environment open, in bytes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>16777216 (16M)</td></color>
<color=#75715e>   * <td>128</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_ITERATOR_MAX_SIZE</color> <color=#f92672>=</color> <color=#e6db74>"je.log.iteratorMaxSize"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The maximum size of each individual JE log file, in bytes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Long</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>10000000 (10M)</td></color>
<color=#75715e>   * <td>1000000 (1M)</td></color>
<color=#75715e>   * <td>1073741824 (1G)</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_FILE_MAX</color> <color=#f92672>=</color> <color=#e6db74>"je.log.fileMax"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The JE environment can be spread across multiple subdirectories. Environment subdirectories may</color>
<color=#75715e>   * be used to spread an environment's .jdb files over multiple directories, and therefore over</color>
<color=#75715e>   * multiple disks or file systems. Environment subdirectories reside in the environment home</color>
<color=#75715e>   * directory and are named data001/ through dataNNN/, consecutively, where NNN is the value of</color>
<color=#75715e>   * je.log.nDataDirectories. A typical configuration would be to have each of the dataNNN/ names be</color>
<color=#75715e>   * symbolic links to actual directories which each reside on separate file systems or disks.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If 0, all log files (*.jdb) will reside in the environment home directory passed to the</color>
<color=#75715e>   * Environment constructor. A non-zero value indicates the number of environment subdirectories to</color>
<color=#75715e>   * use for holding the environment log files.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If data subdirectories are used (i.e. je.log.nDataDirectories > 0), this parameter must be</color>
<color=#75715e>   * set when the environment is initially created. Like the environment home directory, each and</color>
<color=#75715e>   * every one of the dataNNN/ subdirectories must also be present and writable. This parameter must</color>
<color=#75715e>   * be set to the same value for all subsequent openings of the environment or an exception will be</color>
<color=#75715e>   * thrown.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the set of existing dataNNN/ subdirectories is not equivalent to the set { 1 ...</color>
<color=#75715e>   * je.log.nDataDirectories } when the environment is opened, an EnvironmentFailureException will</color>
<color=#75715e>   * be thrown, and the Environment will fail to be opened.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This parameter should be set using the je.properties file rather than the EnvironmentConfig.</color>
<color=#75715e>   * If not, JE command line utilities that open the Environment will throw an exception because</color>
<color=#75715e>   * they will not know of the non-zero value of this parameter.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td><td>JVM</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>256</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @deprecated as of 7.3. This feature is not known to provide benefits beyond that of a simple</color>
<color=#75715e>   *     RAID configuration, and will be removed in the next release, which is slated for mid-April,</color>
<color=#75715e>   *     2017.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_N_DATA_DIRECTORIES</color> <color=#f92672>=</color> <color=#e6db74>"je.log.nDataDirectories"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If true, perform a checksum check when reading entries from log.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>true</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_CHECKSUM_READ</color> <color=#f92672>=</color> <color=#e6db74>"je.log.checksumRead"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If true, perform a checksum verification just before and after writing to the log. This is</color>
<color=#75715e>   * primarily used for debugging.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>false</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_VERIFY_CHECKSUMS</color> <color=#f92672>=</color> <color=#e6db74>"je.log.verifyChecksums"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If true, operates in an in-memory test mode without flushing the log to disk. An environment</color>
<color=#75715e>   * directory must be specified, but it need not exist and no files are written. The system</color>
<color=#75715e>   * operates until it runs out of memory, at which time an OutOfMemoryError is thrown. Because the</color>
<color=#75715e>   * entire log is kept in memory, this mode is normally useful only for testing.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>false</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_MEM_ONLY</color> <color=#f92672>=</color> <color=#e6db74>"je.log.memOnly"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The size of the file handle cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>100</td></color>
<color=#75715e>   * <td>3</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_FILE_CACHE_SIZE</color> <color=#f92672>=</color> <color=#e6db74>"je.log.fileCacheSize"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If true, periodically detect unexpected file deletions. Normally all file deletions should be</color>
<color=#75715e>   * performed as a result of JE log cleaning. If an external file deletion is detected, JE assumes</color>
<color=#75715e>   * this was accidental. This will cause the environment to be invalidated and all methods will</color>
<color=#75715e>   * throw {@link EnvironmentFailureException}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>true</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 7.2</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_DETECT_FILE_DELETE</color> <color=#f92672>=</color> <color=#e6db74>"je.log.detectFileDelete"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The interval used to check for unexpected file deletions.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>{@link <a href="#timeDuration">Duration</a>}</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>1000 ms</td></color>
<color=#75715e>   * <td>1 ms</td></color>
<color=#75715e>   * <td>none</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentConfig.html#timeDuration">Time Duration Properties</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_DETECT_FILE_DELETE_INTERVAL</color> <color=#f92672>=</color> <color=#e6db74>"je.log.detectFileDeleteInterval"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The timeout limit for group file sync, in microseconds.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>{@link <a href="#timeDuration">Duration</a>}</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>500 ms</td></color>
<color=#75715e>   * <td>10 ms</td></color>
<color=#75715e>   * <td>24 d</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentConfig.html#timeDuration">Time Duration Properties</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_FSYNC_TIMEOUT</color> <color=#f92672>=</color> <color=#e6db74>"je.log.fsyncTimeout"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If the time taken by an fsync exceeds this limit, a WARNING level message is logged. If this</color>
<color=#75715e>   * parameter set to zero, a message will not be logged. By default, this parameter is 5 seconds.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>{@link <a href="#timeDuration">Duration</a>}</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>5 s</td></color>
<color=#75715e>   * <td>zero</td></color>
<color=#75715e>   * <td>30 s</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 7.0</color>
<color=#75715e>   * @see EnvironmentStats#getFSyncMaxTime()</color>
<color=#75715e>   * @see <a href="EnvironmentConfig.html#timeDuration">Time Duration Properties</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_FSYNC_TIME_LIMIT</color> <color=#f92672>=</color> <color=#e6db74>"je.log.fsyncTimeLimit"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The time interval in nanoseconds during which transactions may be grouped to amortize the cost</color>
<color=#75715e>   * of write and/or fsync when a transaction commits with SyncPolicy#SYNC or</color>
<color=#75715e>   * SyncPolicy#WRITE_NO_SYNC on the local machine.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>{@link <a href="#timeDuration">Duration</a>}</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>none</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentConfig.html#timeDuration">Time Duration Properties</a></color>
<color=#75715e>   * @since 5.0.76</color>
<color=#75715e>   * @see #LOG_GROUP_COMMIT_THRESHOLD</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_GROUP_COMMIT_INTERVAL</color> <color=#f92672>=</color> <color=#e6db74>"je.log.groupCommitInterval"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The threshold value impacts the number of transactions that may be grouped to amortize the cost</color>
<color=#75715e>   * of write and/or fsync when a transaction commits with SyncPolicy#SYNC or</color>
<color=#75715e>   * SyncPolicy#WRITE_NO_SYNC on the local machine.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Specifying larger values can result in more transactions being grouped together decreasing</color>
<color=#75715e>   * average commit times.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>Name</td></color>
<color=#75715e>   * <td>Type</td></color>
<color=#75715e>   * <td>Mutable</td></color>
<color=#75715e>   * <td>Default</td></color>
<color=#75715e>   * <td>Minimum</td></color>
<color=#75715e>   * <td>Maximum</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 5.0.76</color>
<color=#75715e>   * @see #LOG_GROUP_COMMIT_INTERVAL</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_GROUP_COMMIT_THRESHOLD</color> <color=#f92672>=</color> <color=#e6db74>"je.log.groupCommitThreshold"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The maximum time interval between committing a transaction with {@link</color>
<color=#75715e>   * Durability.SyncPolicy#COMMIT_NO_SYNC NO_SYNC} or {@link</color>
<color=#75715e>   * Durability.SyncPolicy#COMMIT_WRITE_NO_SYNC WRITE_NO_SYNC} durability, and making the</color>
<color=#75715e>   * transaction durable with respect to the storage device. To provide this guarantee, a JE</color>
<color=#75715e>   * background thread is used to flush any data buffered by JE to the file system, and also perform</color>
<color=#75715e>   * an fsync to force any data buffered by the file system to the storage device. If this parameter</color>
<color=#75715e>   * is set to zero, this JE background task is disabled and no such guarantee is provided.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Separately, the {@link #LOG_FLUSH_NO_SYNC_INTERVAL} flushing provides a guarantee that data</color>
<color=#75715e>   * is periodically flushed to the file system. To guard against data loss due to an OS crash (and</color>
<color=#75715e>   * to improve performance) we recommend that the file system is configured to periodically flush</color>
<color=#75715e>   * dirty pages to the storage device. This parameter, {@code LOG_FLUSH_SYNC_INTERVAL}, provides a</color>
<color=#75715e>   * fallback for flushing to the storage device, in case the file system is not adequately</color>
<color=#75715e>   * configured.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>Name</td></color>
<color=#75715e>   * <td>Type</td></color>
<color=#75715e>   * <td>Mutable</td></color>
<color=#75715e>   * <td>Default</td></color>
<color=#75715e>   * <td>Minimum</td></color>
<color=#75715e>   * <td>Maximum</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td></color>
<color=#75715e>   * {@link <a href="../EnvironmentConfig.html#timeDuration">Duration</a>}</color>
<color=#75715e>   * </td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>20 s</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="../EnvironmentConfig.html#timeDuration">Time Duration Properties</a></color>
<color=#75715e>   * @since 7.2</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_FLUSH_SYNC_INTERVAL</color> <color=#f92672>=</color> <color=#e6db74>"je.log.flushSyncInterval"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The maximum time interval between committing a transaction with {@link</color>
<color=#75715e>   * Durability.SyncPolicy#COMMIT_NO_SYNC NO_SYNC} durability, and making the transaction durable</color>
<color=#75715e>   * with respect to the file system. To provide this guarantee, a JE background thread is used to</color>
<color=#75715e>   * flush any data buffered by JE to the file system. If this parameter is set to zero, this JE</color>
<color=#75715e>   * background task is disabled and no such guarantee is provided.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Frequent periodic flushing to the file system provides improved durability for NO_SYNC</color>
<color=#75715e>   * transactions. Without this flushing, if application write operations stop, then some number of</color>
<color=#75715e>   * NO_SYNC transactions would be left in JE memory buffers and would be lost in the event of a</color>
<color=#75715e>   * crash. For HA applications, this flushing reduces the possibility of {@link</color>
<color=#75715e>   * com.sleepycat.je.rep.RollbackProhibitedException}. Note that periodic flushing reduces the time</color>
<color=#75715e>   * window where a crash can cause transaction loss and {@code RollbackProhibitedException}, but</color>
<color=#75715e>   * the window cannot be closed completely when using NO_SYNC durability.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>Name</td></color>
<color=#75715e>   * <td>Type</td></color>
<color=#75715e>   * <td>Mutable</td></color>
<color=#75715e>   * <td>Default</td></color>
<color=#75715e>   * <td>Minimum</td></color>
<color=#75715e>   * <td>Maximum</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td></color>
<color=#75715e>   * {@link <a href="../EnvironmentConfig.html#timeDuration">Duration</a>}</color>
<color=#75715e>   * </td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>5 s</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="../EnvironmentConfig.html#timeDuration">Time Duration Properties</a></color>
<color=#75715e>   * @since 7.2</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_FLUSH_NO_SYNC_INTERVAL</color> <color=#f92672>=</color> <color=#e6db74>"je.log.flushNoSyncInterval"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If true (default is false) O_DSYNC is used to open JE log files.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>false</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_USE_ODSYNC</color> <color=#f92672>=</color> <color=#e6db74>"je.log.useODSYNC"</color><color=#f8f8f2>;</color>

  <color=#75715e>/** @deprecated NIO is no longer used by JE and this parameter has no effect. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_USE_NIO</color> <color=#f92672>=</color> <color=#e6db74>"je.log.useNIO"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If true (default is true) the Write Queue is used for file I/O operations which are blocked by</color>
<color=#75715e>   * concurrent I/O operations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>true</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_USE_WRITE_QUEUE</color> <color=#f92672>=</color> <color=#e6db74>"je.log.useWriteQueue"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The size of the Write Queue.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>1MB</td></color>
<color=#75715e>   * <td>4KB</td></color>
<color=#75715e>   * <td>32MB-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_WRITE_QUEUE_SIZE</color> <color=#f92672>=</color> <color=#e6db74>"je.log.writeQueueSize"</color><color=#f8f8f2>;</color>

  <color=#75715e>/** @deprecated NIO is no longer used by JE and this parameter has no effect. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_DIRECT_NIO</color> <color=#f92672>=</color> <color=#e6db74>"je.log.directNIO"</color><color=#f8f8f2>;</color>

  <color=#75715e>/** @deprecated NIO is no longer used by JE and this parameter has no effect. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOG_CHUNKED_NIO</color> <color=#f92672>=</color> <color=#e6db74>"je.log.chunkedNIO"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Whether to run the background verifier.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If true (the default), the verifier runs according to the schedule given by {@link</color>
<color=#75715e>   * #VERIFY_SCHEDULE}. Each time the verifier runs, it performs checksum verification if the {@link</color>
<color=#75715e>   * #VERIFY_LOG} setting is true and performs Btree verification if the {@link #VERIFY_BTREE}</color>
<color=#75715e>   * setting is true.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When corruption is detected, the Environment will be invalidated and an</color>
<color=#75715e>   * EnvironmentFailureException will be thrown. Applications catching this exception can call the</color>
<color=#75715e>   * new {@link EnvironmentFailureException#isCorrupted()} method to determine whether corruption</color>
<color=#75715e>   * was detected.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If isCorrupted returns true, a full restore (an HA {@link</color>
<color=#75715e>   * com.sleepycat.je.rep.NetworkRestore} or restore from backup) should be performed to avoid</color>
<color=#75715e>   * further problems. The advantage of performing verification frequently is that a problem may be</color>
<color=#75715e>   * detected sooner than it would be otherwise. For HA applications, this means that the network</color>
<color=#75715e>   * restore can be done while the other nodes in the group are up, minimizing exposure to</color>
<color=#75715e>   * additional failures.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When index corruption is detected, the environment is not invalidated. Instead, the corrupt</color>
<color=#75715e>   * index (secondary database) is marked as corrupt in memory and a warning message is logged. All</color>
<color=#75715e>   * subsequent access to the index will throw {@link SecondaryIntegrityException}. To correct the</color>
<color=#75715e>   * problem, the application may perform a full restore or rebuild the corrupt index.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>true</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 7.3</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ENV_RUN_VERIFIER</color> <color=#f92672>=</color> <color=#e6db74>"je.env.runVerifier"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A crontab-format string indicating when to start the background verifier.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>See https://en.wikipedia.org/wiki/Cron#Configuration_file Note that times and dates are</color>
<color=#75715e>   * specified in local time, not UTC time.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The data verifier will run at most once per scheduled interval. If the complete verification</color>
<color=#75715e>   * (log verification followed by Btree verification) takes longer than the scheduled interval,</color>
<color=#75715e>   * then the next verification will start at the next increment of the interval. For example, if</color>
<color=#75715e>   * the default schedule is used (one per day at midnight), and verification takes 25 hours, then</color>
<color=#75715e>   * verification will occur once every two days (48 hours), starting at midnight.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>String</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>"0 0 * * * (run once a day at midnight, local time)"</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 7.3</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>VERIFY_SCHEDULE</color> <color=#f92672>=</color> <color=#e6db74>"je.env.verifySchedule"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Whether the background verifier should verify checksums in the log, as if the {@link</color>
<color=#75715e>   * DbVerifyLog} utility were run.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If true, the entire log is read sequentially and verified. The size of the read buffer is</color>
<color=#75715e>   * determined by LOG_ITERATOR_READ_SIZE.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>true</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 7.3</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>VERIFY_LOG</color> <color=#f92672>=</color> <color=#e6db74>"je.env.verifyLog"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The delay between reads during {@link #VERIFY_LOG log verification}. A delay between reads is</color>
<color=#75715e>   * needed to allow other JE components, such as HA, to make timely progress.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>A 100ms delay, the default value, with the read buffer size 131072, i.e. 128K, for a 1GB</color>
<color=#75715e>   * file, the total delay time is about 13 minutes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This parameter applies only to the {@link #ENV_RUN_VERIFIER background verifier}. It does</color>
<color=#75715e>   * not apply to use of {@link DbVerifyLog}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>{@link <a href="#timeDuration">Duration</a>}</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>100 ms</td></color>
<color=#75715e>   * <td>0 ms</td></color>
<color=#75715e>   * <td>10 s</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 7.5</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>VERIFY_LOG_READ_DELAY</color> <color=#f92672>=</color> <color=#e6db74>"je.env.verifyLogReadDelay"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Whether the background verifier should perform Btree verification, as if the {@link DbVerify}</color>
<color=#75715e>   * utility were run.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If true, the Btree of all databases, external and internal, is verified. The in-memory cache</color>
<color=#75715e>   * is used for verification and internal data structures are checked. References to data records</color>
<color=#75715e>   * (log sequence numbers, or LSNs) are checked to ensure they do not refer to deleted files --</color>
<color=#75715e>   * this is the most common type of corruption. Additional checks are performed, depending on the</color>
<color=#75715e>   * settings for {@link #VERIFY_SECONDARIES} and {@link #VERIFY_DATA_RECORDS}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>true</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 7.5</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>VERIFY_BTREE</color> <color=#f92672>=</color> <color=#e6db74>"je.env.verifyBtree"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Whether to verify secondary index references during Btree verification.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>An index record contains a reference to a primary key, and the verification involves</color>
<color=#75715e>   * checking that a record for the primary key exists.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that secondary index references are verified only for each {@link SecondaryDatabase}</color>
<color=#75715e>   * (and {@link com.sleepycat.persist.SecondaryIndex SecondaryIndex}) that is currently open. The</color>
<color=#75715e>   * relationship between a secondary and primary database is not stored persistently, so JE is not</color>
<color=#75715e>   * aware of the relationship unless the secondary database has been opened by the application.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>true</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 7.5</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>VERIFY_SECONDARIES</color> <color=#f92672>=</color> <color=#e6db74>"je.env.verifySecondaries"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Whether to verify data records (leaf nodes, or LNs) during Btree verification.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Regardless of this parameter's value, the Btree reference to the data record (the log</color>
<color=#75715e>   * sequence number, or LSN) is checked to ensure that it doesn't refer to a file that has been</color>
<color=#75715e>   * deleted by the JE cleaner -- this sort of "dangling reference" is the most common type of</color>
<color=#75715e>   * corruption. If this parameter value is true, the LN is additionally fetched from disk (if not</color>
<color=#75715e>   * in cache) to verify that the LSN refers to a valid log entry. Because LNs are often not cached,</color>
<color=#75715e>   * this can cause expensive random IO, and the default value for this parameter is false for this</color>
<color=#75715e>   * reason. Some applications may choose to set this parameter to true, for example, when using a</color>
<color=#75715e>   * storage device with fast random IO (an SSD).</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note that Btree internal nodes (INs) are always fetched from disk during verification, if</color>
<color=#75715e>   * they are not in cache, and this can result in random IO. Verification was implemented with the</color>
<color=#75715e>   * assumption that most INs will be in cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>false</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 7.5</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>VERIFY_DATA_RECORDS</color> <color=#f92672>=</color> <color=#e6db74>"je.env.verifyDataRecords"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden Whether to verify references to obsolete records during Btree verification.</color>
<color=#75715e>   *     <p>For performance reasons, the JE cleaner maintains a set of references(log sequence</color>
<color=#75715e>   *     numbers, or LSNs) to obsolete records. If such a reference is incorrect and the record at</color>
<color=#75715e>   *     the LSN is actually active, the cleaner may delete a data file without migrating the active</color>
<color=#75715e>   *     record, and this will result in a dangling reference from the Btree.</color>
<color=#75715e>   *     <p>If this parameter's value is true, all active LSNs in the Btree are checked to ensure</color>
<color=#75715e>   *     they are not in the cleaner's set of obsolete LSNs. To perform this check efficiently, the</color>
<color=#75715e>   *     set of all obsolete LSNs must be fetched from disk and kept in memory during the</color>
<color=#75715e>   *     verification run, and the default value for this parameter is false for this reason. Some</color>
<color=#75715e>   *     applications may choose to set this parameter to true, when the use of more Java heap</color>
<color=#75715e>   *     memory is worth the additional safety measure.</color>
<color=#75715e>   *     <p></color>
<color=#75715e>   *     <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>false</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 7.5</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>VERIFY_OBSOLETE_RECORDS</color> <color=#f92672>=</color> <color=#e6db74>"je.env.verifyObsoleteRecords"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of records verified per batch during {@link #VERIFY_BTREE Btree verification}. In</color>
<color=#75715e>   * order to give database remove/truncate the opportunity to execute, records are verified in</color>
<color=#75715e>   * batches and there is a {@link #VERIFY_BTREE_BATCH_DELAY delay} between batches.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This parameter applies only to the {@link #ENV_RUN_VERIFIER background verifier}. It does</color>
<color=#75715e>   * not apply to use of {@link DbVerify}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>1000</td></color>
<color=#75715e>   * <td>1</td></color>
<color=#75715e>   * <td>10000</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>VERIFY_BTREE_BATCH_SIZE</color> <color=#f92672>=</color> <color=#e6db74>"je.env.verifyBtreeBatchSize"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The delay between batches during {@link #VERIFY_BTREE Btree verification}. In order to give</color>
<color=#75715e>   * database remove/truncate the opportunity to execute, records are verified in {@link</color>
<color=#75715e>   * #VERIFY_BTREE_BATCH_SIZE batches} and there is a delay between batches.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>A 10ms delay, the default value, should be enough to allow other threads to run. A large</color>
<color=#75715e>   * value, for example 1s, would result in a total delay of 28 hours when verifying 100m records or</color>
<color=#75715e>   * 100k batches.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This parameter applies only to the {@link #ENV_RUN_VERIFIER background verifier}. It does</color>
<color=#75715e>   * not apply to use of {@link DbVerify}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>{@link <a href="#timeDuration">Duration</a>}</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>10 ms</td></color>
<color=#75715e>   * <td>0 ms</td></color>
<color=#75715e>   * <td>10 s</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>VERIFY_BTREE_BATCH_DELAY</color> <color=#f92672>=</color> <color=#e6db74>"je.env.verifyBtreeBatchDelay"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The maximum number of entries in an internal btree node. This can be set per-database using the</color>
<color=#75715e>   * DatabaseConfig object.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>128</td></color>
<color=#75715e>   * <td>4</td></color>
<color=#75715e>   * <td>32767 (32K)</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>NODE_MAX_ENTRIES</color> <color=#f92672>=</color> <color=#e6db74>"je.nodeMaxEntries"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated this property no longer has any effect; {@link DatabaseConfig#setNodeMaxEntries}</color>
<color=#75715e>   *     should be used instead.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>NODE_DUP_TREE_MAX_ENTRIES</color> <color=#f92672>=</color> <color=#e6db74>"je.nodeDupTreeMaxEntries"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The maximum size (in bytes) of a record's data portion that will cause the record to be</color>
<color=#75715e>   * embedded in its parent LN.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Normally, records (key-value pairs) are stored on disk as individual byte sequences called</color>
<color=#75715e>   * LNs (leaf nodes) and they are accessed via a Btree. The nodes of the Btree are called INs</color>
<color=#75715e>   * (Internal Nodes) and the INs at the bottom layer of the Btree are called BINs (Bottom Internal</color>
<color=#75715e>   * Nodes). Conceptually, each BIN contains an array of slots. A slot represents an associated data</color>
<color=#75715e>   * record. Among other things, it stores the key of the record and the most recent disk address of</color>
<color=#75715e>   * that record. Records and INs share the disk space (are stored in the same kind of files), but</color>
<color=#75715e>   * LNs are stored separately from BINs, i.e., there is no clustering or co-location of a BIN and</color>
<color=#75715e>   * its child LNs.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>With embedded LNs, a whole record may be stored inside a BIN (i.e., a BIN slot may contain</color>
<color=#75715e>   * both the key and the data portion of a record). Specifically, a record will be "embedded" if</color>
<color=#75715e>   * the size (in bytes) of its data portion is less than or equal to the value of the</color>
<color=#75715e>   * TREE_MAX_EMBEDDED_LN configuration parameter. The decision to embed a record or not is taken on</color>
<color=#75715e>   * a record-by-record basis. As a result, a BIN may contain both embedded and non-embedded</color>
<color=#75715e>   * records. The "embeddedness" of a record is a dynamic property: a size-changing update may turn</color>
<color=#75715e>   * a non-embedded record to an embedded one or vice-versa.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Notice that even though a record may be embedded, when the record is inserted, updated, or</color>
<color=#75715e>   * deleted an LN for that record is still generated and written to disk. This is because LNs also</color>
<color=#75715e>   * act as log records, which are needed during recovery and/or transaction abort to undo/redo</color>
<color=#75715e>   * operations that are/are-not currently reflected in the BINs. However, during normal processing,</color>
<color=#75715e>   * these LNs will never be fetched from disk.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Obviously, embedding records has the performance advantage that no extra disk read is needed</color>
<color=#75715e>   * to fetch the record data (i.e., the LN) during read operations. This is especially true for</color>
<color=#75715e>   * operations like cursor scans and for random searches within key ranges whose containing BINs</color>
<color=#75715e>   * can fit in the JE cache (in other words when there is locality of reference). Furthermore,</color>
<color=#75715e>   * embedded records do not need to be migrated during cleaning; they are considered obsolete by</color>
<color=#75715e>   * default, because they will never be needed again after their containing log file is deleted.</color>
<color=#75715e>   * This makes cleaning faster, and more importantly, avoids the dirtying of the parent BINs, which</color>
<color=#75715e>   * would otherwise cause even more cleaning later.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>On the other hand, embedded LNs make the BINs larger, which can lead to more cache eviction</color>
<color=#75715e>   * of BINs and the associated performance problems. When eviction does occur, performance can</color>
<color=#75715e>   * deteriorate as the size of the data portion of the records grows. This is especially true for</color>
<color=#75715e>   * insertion-only workloads. Therefore, increasing the value of TREE_MAX_EMBEDDED_LN beyond the</color>
<color=#75715e>   * default value of 16 bytes should be done "carefully": by considering the kind of workloads that</color>
<color=#75715e>   * will be run against BDB-JE and their relative importance and expected response times, and by</color>
<color=#75715e>   * running performance tests with both embedded and non-embedded LNs.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>16</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>Integer.MAX_VALUE</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentStats.html#cacheSizeOptimizations">Cache Statistics: Size</color>
<color=#75715e>   *     Optimizations</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>TREE_MAX_EMBEDDED_LN</color> <color=#f92672>=</color> <color=#e6db74>"je.tree.maxEmbeddedLN"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated as of JE 6.0. The {@link #TREE_BIN_DELTA} param alone now determines whether a</color>
<color=#75715e>   *     delta is logged.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>TREE_MAX_DELTA</color> <color=#f92672>=</color> <color=#e6db74>"je.tree.maxDelta"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If more than this percentage of entries are changed on a BIN, log a a full version instead of a</color>
<color=#75715e>   * delta.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>25</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>75</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>TREE_BIN_DELTA</color> <color=#f92672>=</color> <color=#e6db74>"je.tree.binDelta"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The minimum bytes allocated out of the memory cache to hold Btree data including internal nodes</color>
<color=#75715e>   * and record keys and data. If the specified value is larger than the size initially available in</color>
<color=#75715e>   * the cache, it will be truncated to the amount available.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>{@code TREE_MIN_MEMORY} is the minimum for a single environment. By default, 500 KB or the</color>
<color=#75715e>   * size initially available in the cache is used, whichever is smaller.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This param is only likely to be needed for tuning of Environments with extremely small cache</color>
<color=#75715e>   * sizes. It is sometimes also useful for debugging and testing.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Long</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>512000 (500K)</td></color>
<color=#75715e>   * <td>51200 (50K)</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentStats.html#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>TREE_MIN_MEMORY</color> <color=#f92672>=</color> <color=#e6db74>"je.tree.minMemory"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Specifies the maximum unprefixed key length for use in the compact in-memory key</color>
<color=#75715e>   * representation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In the Btree, the JE in-memory cache, the default representation for keys uses a byte array</color>
<color=#75715e>   * object per key. The per-key object overhead of this approach ranges from 20 to 32 bytes,</color>
<color=#75715e>   * depending on the JVM platform.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>To reduce memory overhead, a compact representation can instead be used where keys will be</color>
<color=#75715e>   * represented inside a single byte array instead of having one byte array per key. Within the</color>
<color=#75715e>   * single array, all keys are assigned a storage size equal to that taken up by the largest key,</color>
<color=#75715e>   * plus one byte to hold the actual key length. The use of the fixed size array reduces Java GC</color>
<color=#75715e>   * activity as well as memory overhead.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In order for the compact representation to reduce memory usage, all keys in a database, or</color>
<color=#75715e>   * in a Btree internal node, must be roughly the same size. The more fully populated the internal</color>
<color=#75715e>   * node, the more the savings with this representation since the single byte array is sized to</color>
<color=#75715e>   * hold the maximum number of keys in the internal node, regardless of the actual number of keys</color>
<color=#75715e>   * that are present.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>It's worth noting that the storage savings of the compact representation are realized in</color>
<color=#75715e>   * addition to the storage benefits of key prefixing (if it is configured), since the keys stored</color>
<color=#75715e>   * in the key array are the smaller key values after the prefix has been stripped, reducing the</color>
<color=#75715e>   * length of the key and making it more likely that it's small enough for this specialized</color>
<color=#75715e>   * representation. This configuration parameter ({@code TREE_COMPACT_MAX_KEY_LENGTH}) is the</color>
<color=#75715e>   * maximum key length, not including the common prefix, for the keys in a Btree internal node</color>
<color=#75715e>   * stored using the compact representation. See {@link DatabaseConfig#setKeyPrefixing}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The compact representation is used automatically when both of the following conditions hold.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>All keys in a Btree internal node must have an unprefixed length that is less than or</color>
<color=#75715e>   *       equal to the length specified by this parameter ({@code TREE_COMPACT_MAX_KEY_LENGTH}).</color>
<color=#75715e>   *   <li>If key lengths vary by large amounts within an internal node, the wasted space of the</color>
<color=#75715e>   *       fixed length storage may negate the benefits of the compact representation and cause more</color>
<color=#75715e>   *       memory to be used than with the default representation. In that case, the default</color>
<color=#75715e>   *       representation will be used.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this configuration parameter is set to zero, the compact representation will not be used.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The default value of this configuration parameter is 16 bytes. The potential drawbacks of</color>
<color=#75715e>   * specifying a larger length are:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>Insertion and deletion for larger keys move bytes proportional to the storage length of</color>
<color=#75715e>   *       the keys.</color>
<color=#75715e>   *   <li>With the compact representation, all operations create temporary byte arrays for each key</color>
<color=#75715e>   *       involved in the operation. Larger byte arrays mean more work for the Java GC, even though</color>
<color=#75715e>   *       these objects are short lived.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Mutation of the key representation between the default and compact approaches is automatic</color>
<color=#75715e>   * on a per-Btree internal node basis. For example, if a key that exceeds the configured length is</color>
<color=#75715e>   * added to a node that uses the compact representation, the node is automatically mutated to the</color>
<color=#75715e>   * default representation. A best effort is made to prevent frequent mutations that could increase</color>
<color=#75715e>   * Java GC activity.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>To determine how often the compact representation is used in a running application, see</color>
<color=#75715e>   * {@link EnvironmentStats#getNINCompactKeyIN}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>16</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>256</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see DatabaseConfig#setKeyPrefixing</color>
<color=#75715e>   * @see EnvironmentStats#getNINCompactKeyIN</color>
<color=#75715e>   * @see <a href="EnvironmentStats.html#cacheSizeOptimizations">Cache Statistics: Size</color>
<color=#75715e>   *     Optimizations</a></color>
<color=#75715e>   * @since 5.0</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>TREE_COMPACT_MAX_KEY_LENGTH</color> <color=#f92672>=</color> <color=#e6db74>"je.tree.compactMaxKeyLength"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The compressor thread wakeup interval in microseconds.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>{@link <a href="#timeDuration">Duration</a>}</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>5 s</td></color>
<color=#75715e>   * <td>1 s</td></color>
<color=#75715e>   * <td>75 min</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentConfig.html#timeDuration">Time Duration Properties</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>COMPRESSOR_WAKEUP_INTERVAL</color> <color=#f92672>=</color> <color=#e6db74>"je.compressor.wakeupInterval"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of times to retry a compression run if a deadlock occurs.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>3</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>COMPRESSOR_DEADLOCK_RETRY</color> <color=#f92672>=</color> <color=#e6db74>"je.compressor.deadlockRetry"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The lock timeout for compressor transactions in microseconds.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>{@link <a href="#timeDuration">Duration</a>}</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>500 ms</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>75 min</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentConfig.html#timeDuration">Time Duration Properties</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>COMPRESSOR_LOCK_TIMEOUT</color> <color=#f92672>=</color> <color=#e6db74>"je.compressor.lockTimeout"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated as of 3.3.87. Compression of the root node no longer has any benefit and this</color>
<color=#75715e>   *     feature has been removed. This parameter has no effect.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>COMPRESSOR_PURGE_ROOT</color> <color=#f92672>=</color> <color=#e6db74>"je.compressor.purgeRoot"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * When eviction occurs, the evictor will push memory usage to this number of bytes below {@link</color>
<color=#75715e>   * #MAX_MEMORY}. No more than 50% of je.maxMemory will be evicted per eviction cycle, regardless</color>
<color=#75715e>   * of this setting.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When using the shared cache feature, the value of this property is applied the first time</color>
<color=#75715e>   * the cache is set up. New environments that join the cache do not alter the cache setting.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This parameter impacts <a href="EnvironmentStats.html#cacheEviction">how often background</color>
<color=#75715e>   * evictor threads are awoken</a> as well as the size of latency spikes caused by <a</color>
<color=#75715e>   * href="EnvironmentStats.html#cacheCriticalEviction">critical eviction</a>.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Long</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>524288 (512K)</td></color>
<color=#75715e>   * <td>1024 (1K)</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentStats.html#cacheEviction">Cache Statistics: Eviction</a></color>
<color=#75715e>   * @see <a href="EnvironmentStats.html#cacheCriticalEviction">Cache Statistics: Critical</color>
<color=#75715e>   *     Eviction</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>EVICTOR_EVICT_BYTES</color> <color=#f92672>=</color> <color=#e6db74>"je.evictor.evictBytes"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated as of JE 6.0. This parameter is ignored by the new, more efficient and more</color>
<color=#75715e>   *     accurate evictor.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>EVICTOR_NODES_PER_SCAN</color> <color=#f92672>=</color> <color=#e6db74>"je.evictor.nodesPerScan"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * At this percentage over the allotted cache, critical eviction will start. For example, if this</color>
<color=#75715e>   * parameter is 5, then when the cache size is 5% over its maximum or 105% full, critical eviction</color>
<color=#75715e>   * will start.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Critical eviction is eviction performed in application threads as part of normal database</color>
<color=#75715e>   * access operations. Background eviction, on the other hand, is performed in JE evictor threads</color>
<color=#75715e>   * as well as during log cleaning and checkpointing. Background eviction is unconditionally</color>
<color=#75715e>   * started when the cache size exceeds its maximum. When critical eviction is also performed</color>
<color=#75715e>   * (concurrently with background eviction), it helps to ensure that the cache size does not</color>
<color=#75715e>   * continue to grow, but can have a negative impact on operation latency.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>By default this parameter is zero, which means that critical eviction will start as soon as</color>
<color=#75715e>   * the cache size exceeds its maximum. Some applications may wish to set this parameter to a</color>
<color=#75715e>   * non-zero value to improve operation latency, when eviction is a significant performance factor</color>
<color=#75715e>   * and latency requirements are not being satisfied.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When setting this parameter to a non-zero value, for example 5, be sure to reserve enough</color>
<color=#75715e>   * heap memory for the cache size to be over its configured maximum, for example 105% full.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>1000</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentStats.html#cacheCriticalEviction">Cache Statistics: Critical</color>
<color=#75715e>   *     Eviction</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>EVICTOR_CRITICAL_PERCENTAGE</color> <color=#f92672>=</color> <color=#e6db74>"je.evictor.criticalPercentage"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated as of JE 4.1, since the single evictor thread has been replaced be a more robust</color>
<color=#75715e>   *     thread pool.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>EVICTOR_DEADLOCK_RETRY</color> <color=#f92672>=</color> <color=#e6db74>"je.evictor.deadlockRetry"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated as of JE 6.0. This parameter is ignored by the new, more efficient and more</color>
<color=#75715e>   *     accurate evictor.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>EVICTOR_LRU_ONLY</color> <color=#f92672>=</color> <color=#e6db74>"je.evictor.lruOnly"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of LRU lists in the main JE cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Ideally, all nodes managed by an LRU eviction policy should appear in a single LRU list,</color>
<color=#75715e>   * ordered by the "hotness" of each node. However, such a list is accessed very frequently by</color>
<color=#75715e>   * multiple threads, and can become a synchronization bottleneck. To avoid this problem, the</color>
<color=#75715e>   * evictor can employ multiple LRU lists. The nLRULists parameter specifies the number of LRU</color>
<color=#75715e>   * lists to be used. Increasing the number of LRU lists alleviates any potential synchronization</color>
<color=#75715e>   * bottleneck, but it also decreases the quality of the LRU approximation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>4</td></color>
<color=#75715e>   * <td>1</td></color>
<color=#75715e>   * <td>32</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheLRUListContention">Cache Statistics: LRU List Contention</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>EVICTOR_N_LRU_LISTS</color> <color=#f92672>=</color> <color=#e6db74>"je.evictor.nLRULists"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Call Thread.yield() at each check for cache overflow. This potentially improves GC performance,</color>
<color=#75715e>   * but little testing has been done and the actual benefit is unknown.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When using the shared cache feature, the value of this property is applied the first time</color>
<color=#75715e>   * the cache is set up. New environments that join the cache do not alter the cache setting.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This param is unlikely to be needed for tuning, but is sometimes useful for debugging and</color>
<color=#75715e>   * testing.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>false</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentStats.html#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>EVICTOR_FORCED_YIELD</color> <color=#f92672>=</color> <color=#e6db74>"je.evictor.forcedYield"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The minimum number of threads in the eviction thread pool.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>These threads help keep memory usage within cache bounds, offloading work from application</color>
<color=#75715e>   * threads.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>{@link #EVICTOR_CORE_THREADS}, {@link #EVICTOR_MAX_THREADS} and {@link #EVICTOR_KEEP_ALIVE}</color>
<color=#75715e>   * are used to configure the core, max and keepalive attributes for the {@link</color>
<color=#75715e>   * java.util.concurrent.ThreadPoolExecutor} which implements the eviction thread pool.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>yes</td></color>
<color=#75715e>   * <td>1</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>Integer.MAX_VALUE</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>EVICTOR_CORE_THREADS</color> <color=#f92672>=</color> <color=#e6db74>"je.evictor.coreThreads"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The maximum number of threads in the eviction thread pool.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>These threads help keep memory usage within cache bound, offloading work from application</color>
<color=#75715e>   * threads. If the eviction thread pool receives more work, it will allocate up to this number of</color>
<color=#75715e>   * threads. These threads will terminate if they are idle for more than the time indicated by</color>
<color=#75715e>   * {@link #EVICTOR_KEEP_ALIVE}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>{@link #EVICTOR_CORE_THREADS}, {@link #EVICTOR_MAX_THREADS} and {@link #EVICTOR_KEEP_ALIVE}</color>
<color=#75715e>   * are used to configure the core, max and keepalive attributes for the {@link</color>
<color=#75715e>   * java.util.concurrent.ThreadPoolExecutor} which implements the eviction thread pool.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>yes</td></color>
<color=#75715e>   * <td>10</td></color>
<color=#75715e>   * <td>1</td></color>
<color=#75715e>   * <td>Integer.MAX_VALUE</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>EVICTOR_MAX_THREADS</color> <color=#f92672>=</color> <color=#e6db74>"je.evictor.maxThreads"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The duration that excess threads in the eviction thread pool will stay idle; after this period,</color>
<color=#75715e>   * idle threads will terminate.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>{@link #EVICTOR_CORE_THREADS}, {@link #EVICTOR_MAX_THREADS} and {@link #EVICTOR_KEEP_ALIVE}</color>
<color=#75715e>   * are used to configure the core, max and keepalive attributes for the {@link</color>
<color=#75715e>   * java.util.concurrent.ThreadPoolExecutor} which implements the eviction thread pool.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>{@link <a href="#timeDuration">Duration</a>}</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>10 min</td></color>
<color=#75715e>   * <td>1 s</td></color>
<color=#75715e>   * <td>1 d</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentConfig.html#timeDuration">Time Duration Properties</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>EVICTOR_KEEP_ALIVE</color> <color=#f92672>=</color> <color=#e6db74>"je.evictor.keepAlive"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Allow Bottom Internal Nodes (BINs) to be written in a delta format during eviction. Using a</color>
<color=#75715e>   * delta format will improve write and log cleaning performance. There is no known performance</color>
<color=#75715e>   * benefit to setting this parameter to false.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This param is unlikely to be needed for tuning, but is sometimes useful for debugging and</color>
<color=#75715e>   * testing.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>true</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentStats.html#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>EVICTOR_ALLOW_BIN_DELTAS</color> <color=#f92672>=</color> <color=#e6db74>"je.evictor.allowBinDeltas"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The off-heap evictor will attempt to keep memory usage this number of bytes below {@link</color>
<color=#75715e>   * #MAX_OFF_HEAP_MEMORY}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this value is too small, memory usage may exceed the maximum and then "critical eviction"</color>
<color=#75715e>   * is needed, which will increase operation latency in the application threads.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Long</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>52428800 (50MB)</td></color>
<color=#75715e>   * <td>1024 (1K)</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentStats.html#cacheCriticalEviction">Cache Statistics: Critical</color>
<color=#75715e>   *     Eviction</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>OFFHEAP_EVICT_BYTES</color> <color=#f92672>=</color> <color=#e6db74>"je.offHeap.evictBytes"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of LRU lists in the off-heap JE cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Ideally, all nodes managed by an LRU eviction policy should appear in a single LRU list,</color>
<color=#75715e>   * ordered by the "hotness" of each node. However, such a list is accessed very frequently by</color>
<color=#75715e>   * multiple threads, and can become a synchronization bottleneck. To avoid this problem, the</color>
<color=#75715e>   * evictor can employ multiple LRU lists. The nLRULists parameter specifies the number of LRU</color>
<color=#75715e>   * lists to be used. Increasing the number of LRU lists alleviates any potential synchronization</color>
<color=#75715e>   * bottleneck, but it also decreases the quality of the LRU approximation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>4</td></color>
<color=#75715e>   * <td>1</td></color>
<color=#75715e>   * <td>32</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="#cacheLRUListContention">Cache Statistics: LRU List Contention</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>OFFHEAP_N_LRU_LISTS</color> <color=#f92672>=</color> <color=#e6db74>"je.evictor.nLRULists"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Can be used to add a checksum to each off-heap block when the block is written, and validate</color>
<color=#75715e>   * the checksum when the block is read, for debugging purposes. Setting this param to true adds</color>
<color=#75715e>   * memory and CPU overhead, and it should normally be set to false in a production environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>false</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentStats.html#cacheDebugging">Cache Statistics: Debugging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>OFFHEAP_CHECKSUM</color> <color=#f92672>=</color> <color=#e6db74>"je.offHeap.checksum"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The minimum number of threads in the off-heap eviction thread pool.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>These threads help keep memory usage within cache bounds, offloading work from application</color>
<color=#75715e>   * threads.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>{@link #OFFHEAP_CORE_THREADS}, {@link #OFFHEAP_MAX_THREADS} and {@link #OFFHEAP_KEEP_ALIVE}</color>
<color=#75715e>   * are used to configure the core, max and keepalive attributes for the {@link</color>
<color=#75715e>   * java.util.concurrent.ThreadPoolExecutor} which implements the eviction thread pool.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>yes</td></color>
<color=#75715e>   * <td>1</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>Integer.MAX_VALUE</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>OFFHEAP_CORE_THREADS</color> <color=#f92672>=</color> <color=#e6db74>"je.offHeap.coreThreads"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The maximum number of threads in the off-heap eviction thread pool.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>These threads help keep memory usage within cache bound, offloading work from application</color>
<color=#75715e>   * threads. If the eviction thread pool receives more work, it will allocate up to this number of</color>
<color=#75715e>   * threads. These threads will terminate if they are idle for more than the time indicated by</color>
<color=#75715e>   * {@link #OFFHEAP_KEEP_ALIVE}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the number of threads is too small, memory usage may exceed the maximum and then</color>
<color=#75715e>   * "critical eviction" is needed, which will increase operation latency in the application</color>
<color=#75715e>   * threads.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>{@link #OFFHEAP_CORE_THREADS}, {@link #OFFHEAP_MAX_THREADS} and {@link #OFFHEAP_KEEP_ALIVE}</color>
<color=#75715e>   * are used to configure the core, max and keepalive attributes for the {@link</color>
<color=#75715e>   * java.util.concurrent.ThreadPoolExecutor} which implements the eviction thread pool.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>yes</td></color>
<color=#75715e>   * <td>3</td></color>
<color=#75715e>   * <td>1</td></color>
<color=#75715e>   * <td>Integer.MAX_VALUE</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>OFFHEAP_MAX_THREADS</color> <color=#f92672>=</color> <color=#e6db74>"je.offHeap.maxThreads"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The duration that excess threads in the off-heap eviction thread pool will stay idle; after</color>
<color=#75715e>   * this period, idle threads will terminate.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>{@link #OFFHEAP_CORE_THREADS}, {@link #OFFHEAP_MAX_THREADS} and {@link #OFFHEAP_KEEP_ALIVE}</color>
<color=#75715e>   * are used to configure the core, max and keepalive attributes for the {@link</color>
<color=#75715e>   * java.util.concurrent.ThreadPoolExecutor} which implements the eviction thread pool.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>{@link <a href="#timeDuration">Duration</a>}</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>10 min</td></color>
<color=#75715e>   * <td>1 s</td></color>
<color=#75715e>   * <td>1 d</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentConfig.html#timeDuration">Time Duration Properties</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>OFFHEAP_KEEP_ALIVE</color> <color=#f92672>=</color> <color=#e6db74>"je.offHeap.keepAlive"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Ask the checkpointer to run every time we write this many bytes to the log. If set, supersedes</color>
<color=#75715e>   * {@link #CHECKPOINTER_WAKEUP_INTERVAL}. To use time based checkpointing, set this to 0.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Long</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>20000000 (20M)</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CHECKPOINTER_BYTES_INTERVAL</color> <color=#f92672>=</color> <color=#e6db74>"je.checkpointer.bytesInterval"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The checkpointer wakeup interval in microseconds. By default, this is inactive and we wakeup</color>
<color=#75715e>   * the checkpointer as a function of the number of bytes written to the log ({@link</color>
<color=#75715e>   * #CHECKPOINTER_BYTES_INTERVAL}).</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>{@link <a href="#timeDuration">Duration</a>}</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>1 s</td></color>
<color=#75715e>   * <td>75 min</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentConfig.html#timeDuration">Time Duration Properties</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CHECKPOINTER_WAKEUP_INTERVAL</color> <color=#f92672>=</color> <color=#e6db74>"je.checkpointer.wakeupInterval"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of times to retry a checkpoint if it runs into a deadlock.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>3</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CHECKPOINTER_DEADLOCK_RETRY</color> <color=#f92672>=</color> <color=#e6db74>"je.checkpointer.deadlockRetry"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If true, the checkpointer uses more resources in order to complete the checkpoint in a shorter</color>
<color=#75715e>   * time interval. Btree latches are held and other threads are blocked for a longer period. When</color>
<color=#75715e>   * set to true, application response time may be longer during a checkpoint.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border"1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>false</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CHECKPOINTER_HIGH_PRIORITY</color> <color=#f92672>=</color> <color=#e6db74>"je.checkpointer.highPriority"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The cleaner will keep the total disk space utilization percentage above this value.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>50</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>90</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CLEANER_MIN_UTILIZATION</color> <color=#f92672>=</color> <color=#e6db74>"je.cleaner.minUtilization"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A log file will be cleaned if its utilization percentage is below this value, irrespective of</color>
<color=#75715e>   * total utilization.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>5</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>50</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CLEANER_MIN_FILE_UTILIZATION</color> <color=#f92672>=</color> <color=#e6db74>"je.cleaner.minFileUtilization"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The cleaner checks disk utilization every time we write this many bytes to the log. If zero</color>
<color=#75715e>   * (and by default) it is set to either the {@link #LOG_FILE_MAX} value divided by four, or to 100</color>
<color=#75715e>   * MB, whichever is smaller.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When overriding the default value, use caution to ensure that the cleaner is woken</color>
<color=#75715e>   * frequently enough, so that reserved files are deleted quickly enough to avoid violating a disk</color>
<color=#75715e>   * limit.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Long</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #CLEANER_WAKEUP_INTERVAL</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CLEANER_BYTES_INTERVAL</color> <color=#f92672>=</color> <color=#e6db74>"je.cleaner.bytesInterval"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The cleaner checks whether cleaning is needed if this interval elapses without any writing, to</color>
<color=#75715e>   * handle the case where cleaning or checkpointing is necessary to reclaim disk space, but writing</color>
<color=#75715e>   * has stopped. This addresses the problem that {@link #CLEANER_BYTES_INTERVAL} may not cause</color>
<color=#75715e>   * cleaning, and {@link #CHECKPOINTER_BYTES_INTERVAL} may not cause checkpointing, when enough</color>
<color=#75715e>   * writing has not occurred to exceed these intervals.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If this parameter is set to zero, the cleaner wakeup interval is disabled, and cleaning and</color>
<color=#75715e>   * checkpointing will occur only via {@link #CLEANER_BYTES_INTERVAL}, {@link</color>
<color=#75715e>   * #CHECKPOINTER_BYTES_INTERVAL}, and {@link #CHECKPOINTER_WAKEUP_INTERVAL}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For example, if a database were removed or truncated, or large records were deleted, the</color>
<color=#75715e>   * amount written to the log may not exceed CLEANER_BYTES_INTERVAL. If writing were to stop at</color>
<color=#75715e>   * that point, no cleaning would occur, if it were not for the wakeup interval.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In addition, even when cleaning is performed, a checkpoint is additionally needed to reclaim</color>
<color=#75715e>   * disk space. This may not occur if {@link #CHECKPOINTER_BYTES_INTERVAL} or {@link</color>
<color=#75715e>   * #CHECKPOINTER_WAKEUP_INTERVAL} does not happen to cause a checkpoint after write operations</color>
<color=#75715e>   * have stopped. If files have been cleaned and a checkpoint is needed to reclaim space, and write</color>
<color=#75715e>   * operations have stopped, a checkpoint will be scheduled when the CLEANER_WAKEUP_INTERVAL</color>
<color=#75715e>   * elapses. The checkpoint will be performed in the JE checkpointer thread if it is not disabled,</color>
<color=#75715e>   * or when {@link Environment#checkpoint} is called.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In test environments it is fairly common for application writing to stop, and then to expect</color>
<color=#75715e>   * cleaning to occur as a result of the last set of operations. This situation may also arise in</color>
<color=#75715e>   * production environments, for example, during repair of an out-of-disk situation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>{@link <a href="#timeDuration">Duration</a>}</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>10 s</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>10 h</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentConfig.html#timeDuration">Time Duration Properties</a></color>
<color=#75715e>   * @see #CLEANER_BYTES_INTERVAL</color>
<color=#75715e>   * @since 7.1</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CLEANER_WAKEUP_INTERVAL</color> <color=#f92672>=</color> <color=#e6db74>"je.cleaner.wakeupInterval"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If true, the cleaner will fetch records to determine their size and more accurately calculate</color>
<color=#75715e>   * log utilization. Normally when a record is updated or deleted without first being read</color>
<color=#75715e>   * (sometimes called a blind delete/update), the size of the previous version of the record is</color>
<color=#75715e>   * unknown and therefore the cleaner's utilization calculations may be incorrect. Setting this</color>
<color=#75715e>   * parameter to true will cause a record to be read during a blind delete/update, in order to</color>
<color=#75715e>   * determine its size. This will ensure that the cleaner's utilization calculations are correct,</color>
<color=#75715e>   * but will cause more (potentially random) IO.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>false</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #CLEANER_ADJUST_UTILIZATION</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CLEANER_FETCH_OBSOLETE_SIZE</color> <color=#f92672>=</color> <color=#e6db74>"je.cleaner.fetchObsoleteSize"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated in JE 6.3. Adjustments are no longer needed because LN log sizes have been stored</color>
<color=#75715e>   *     in the Btree since JE 6.0.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CLEANER_ADJUST_UTILIZATION</color> <color=#f92672>=</color> <color=#e6db74>"je.cleaner.adjustUtilization"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of times to retry cleaning if a deadlock occurs.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>3</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CLEANER_DEADLOCK_RETRY</color> <color=#f92672>=</color> <color=#e6db74>"je.cleaner.deadlockRetry"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The lock timeout for cleaner transactions in microseconds.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>{@link <a href="#timeDuration">Duration</a>}</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>500 ms</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>75 min</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentConfig.html#timeDuration">Time Duration Properties</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CLEANER_LOCK_TIMEOUT</color> <color=#f92672>=</color> <color=#e6db74>"je.cleaner.lockTimeout"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If true (the default setting), the cleaner deletes log files after successful cleaning.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This parameter may be set to false for diagnosing log cleaning problems. For example, if a</color>
<color=#75715e>   * bug causes a LOG_FILE_NOT_FOUND exception, when reproducing the problem it is often necessary</color>
<color=#75715e>   * to avoid deleting files so they can be used for diagnosis. When this parameter is false:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>Rather than delete files that are successfully cleaned, the cleaner renames them.</color>
<color=#75715e>   *   <li>When renaming a file, its extension is changed from ".jdb" to ".del" and its last</color>
<color=#75715e>   *       modification date is set to the current time.</color>
<color=#75715e>   *   <li>Depending on the setting of the {@link #CLEANER_USE_DELETED_DIR} parameter, the file is</color>
<color=#75715e>   *       either renamed in its current data directory (the default), or moved into the "deleted"</color>
<color=#75715e>   *       sub-directory.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When this parameter is set to false, disk usage may grow without bounds and the application</color>
<color=#75715e>   * is responsible for removing the cleaned files. It may be necessary to write a script for</color>
<color=#75715e>   * deleting the least recently cleaned files when disk usage is low. The .del extension and the</color>
<color=#75715e>   * last modification time can be leveraged to write such a script. The "deleted" sub-directory can</color>
<color=#75715e>   * be used to avoid granting write or delete permissions for the main data directory to the</color>
<color=#75715e>   * script.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>true</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CLEANER_EXPUNGE</color> <color=#f92672>=</color> <color=#e6db74>"je.cleaner.expunge"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * When {@link #CLEANER_EXPUNGE} is false, the {@code CLEANER_USE_DELETED_DIR} parameter</color>
<color=#75715e>   * determines whether successfully cleaned files are moved to the "deleted" sub-directory.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>{@code CLEANER_USE_DELETED_DIR} applies only when {@link #CLEANER_EXPUNGE} is false. When</color>
<color=#75715e>   * {@link #CLEANER_EXPUNGE} is true, successfully cleaned files are deleted and the {@code</color>
<color=#75715e>   * CLEANER_USE_DELETED_DIR} parameter setting is ignored.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When {@code CLEANER_USE_DELETED_DIR} is true (and {@code CLEANER_EXPUNGE} is false), the</color>
<color=#75715e>   * cleaner will move successfully cleaned data files (".jdb" files) to the "deleted" sub-directory</color>
<color=#75715e>   * of the Environment directory, in addition to changing the file extension to "*.del". In this</color>
<color=#75715e>   * case, the "deleted" sub-directory must have been created by the application before opening the</color>
<color=#75715e>   * Environment. This allows the application to control permissions on this sub-directory. When</color>
<color=#75715e>   * multiple data directories are used ({@link #LOG_N_DATA_DIRECTORIES}), a "deleted" sub-directory</color>
<color=#75715e>   * must be created under each data directory. Note that {@link File#renameTo(File)} is used to</color>
<color=#75715e>   * move the file, and this method may or may not support moving the file to a different volume</color>
<color=#75715e>   * (when the "deleted" directory is a file system link) on a particular platform.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When {@code CLEANER_USE_DELETED_DIR} is false (and {@code CLEANER_EXPUNGE} is false), the</color>
<color=#75715e>   * cleaner will change the file extension of successfully cleaned data files from ".jdb" to</color>
<color=#75715e>   * ".del", but will not move the files to a different directory.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>false</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CLEANER_USE_DELETED_DIR</color> <color=#f92672>=</color> <color=#e6db74>"je.cleaner.useDeletedDir"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The minimum age of a file (number of files between it and the active file) to qualify it for</color>
<color=#75715e>   * cleaning under any conditions.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>2</td></color>
<color=#75715e>   * <td>1</td></color>
<color=#75715e>   * <td>1000</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CLEANER_MIN_AGE</color> <color=#f92672>=</color> <color=#e6db74>"je.cleaner.minAge"</color><color=#f8f8f2>;</color>

  <color=#75715e>/** @deprecated in 7.0. No longer used because the cleaner no longer has a backlog. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CLEANER_MAX_BATCH_FILES</color> <color=#f92672>=</color> <color=#e6db74>"je.cleaner.maxBatchFiles"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The read buffer size for cleaning. If zero (the default), then {@link #LOG_ITERATOR_READ_SIZE}</color>
<color=#75715e>   * value is used.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>128</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CLEANER_READ_SIZE</color> <color=#f92672>=</color> <color=#e6db74>"je.cleaner.readSize"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Tracking of detailed cleaning information will use no more than this percentage of the cache.</color>
<color=#75715e>   * The default value is 2% of {@link #MAX_MEMORY}. If 0 and {@link #SHARED_CACHE} is true, use 2%</color>
<color=#75715e>   * divided by N where N is the number of environments sharing the global cache.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>2</td></color>
<color=#75715e>   * <td>1</td></color>
<color=#75715e>   * <td>90</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CLEANER_DETAIL_MAX_MEMORY_PERCENTAGE</color> <color=#f92672>=</color>
      <color=#e6db74>"je.cleaner.detailMaxMemoryPercentage"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Specifies a list of files or file ranges to be cleaned at a time when no other log cleaning is</color>
<color=#75715e>   * necessary. This parameter is intended for use in forcing the cleaning of a large number of log</color>
<color=#75715e>   * files. File numbers are in hex and are comma separated or hyphen separated to specify ranges,</color>
<color=#75715e>   * e.g.: '9,a,b-d' will clean 5 files.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>String</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>""</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CLEANER_FORCE_CLEAN_FILES</color> <color=#f92672>=</color> <color=#e6db74>"je.cleaner.forceCleanFiles"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * All log files having a log version prior to the specified version will be cleaned at a time</color>
<color=#75715e>   * when no other log cleaning is necessary. Intended for use in upgrading old format log files</color>
<color=#75715e>   * forward to the current log format version, e.g., to take advantage of format improvements; note</color>
<color=#75715e>   * that log upgrading is optional. The default value zero (0) specifies that no upgrading will</color>
<color=#75715e>   * occur. The value negative one (-1) specifies upgrading to the current log version.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>-1</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CLEANER_UPGRADE_TO_LOG_VERSION</color> <color=#f92672>=</color> <color=#e6db74>"je.cleaner.upgradeToLogVersion"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number of threads allocated by the cleaner for log file processing. If the cleaner backlog</color>
<color=#75715e>   * becomes large, try increasing this value.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>1</td></color>
<color=#75715e>   * <td>1</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CLEANER_THREADS</color> <color=#f92672>=</color> <color=#e6db74>"je.cleaner.threads"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The look ahead cache size for cleaning in bytes. Increasing this value can reduce the number of</color>
<color=#75715e>   * Btree lookups.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>8192 (8K)</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CLEANER_LOOK_AHEAD_CACHE_SIZE</color> <color=#f92672>=</color> <color=#e6db74>"je.cleaner.lookAheadCacheSize"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated This parameter is ignored and proactive migration is no longer supported due to its</color>
<color=#75715e>   *     negative impact on eviction and Btree splits. To reduce a cleaner backlog, configure more</color>
<color=#75715e>   *     cleaner threads.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CLEANER_FOREGROUND_PROACTIVE_MIGRATION</color> <color=#f92672>=</color>
      <color=#e6db74>"je.cleaner.foregroundProactiveMigration"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated This parameter is ignored and proactive migration is no longer supported due to its</color>
<color=#75715e>   *     negative impact on eviction and checkpointing. To reduce a cleaner backlog, configure more</color>
<color=#75715e>   *     cleaner threads.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CLEANER_BACKGROUND_PROACTIVE_MIGRATION</color> <color=#f92672>=</color>
      <color=#e6db74>"je.cleaner.backgroundProactiveMigration"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated This parameter is ignored and lazy migration is no longer supported due to its</color>
<color=#75715e>   *     negative impact on eviction and checkpointing. To reduce a cleaner backlog, configure more</color>
<color=#75715e>   *     cleaner threads.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CLEANER_LAZY_MIGRATION</color> <color=#f92672>=</color> <color=#e6db74>"je.cleaner.lazyMigration"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The timeout for Disk Ordered Scan producer thread queue offers in milliseconds.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>{@link <a href="#timeDuration">Duration</a>}</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>10 secs</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>75 min</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentConfig.html#timeDuration">Time Duration Properties</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>DOS_PRODUCER_QUEUE_TIMEOUT</color> <color=#f92672>=</color> <color=#e6db74>"je.env.diskOrderedScanLockTimeout"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Number of Lock Tables. Set this to a value other than 1 when an application has multiple</color>
<color=#75715e>   * threads performing concurrent JE operations. It should be set to a prime number, and in general</color>
<color=#75715e>   * not higher than the number of application threads performing JE operations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>1</td></color>
<color=#75715e>   * <td>1</td></color>
<color=#75715e>   * <td>32767 (32K)</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOCK_N_LOCK_TABLES</color> <color=#f92672>=</color> <color=#e6db74>"je.lock.nLockTables"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures the default lock timeout. It may be overridden on a per-transaction basis by calling</color>
<color=#75715e>   * {@link Transaction#setLockTimeout(long, TimeUnit)}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>A value of zero disables lock timeouts. This is not recommended, even when the application</color>
<color=#75715e>   * expects that deadlocks will not occur or will be easily resolved. A lock timeout is a fall-back</color>
<color=#75715e>   * that guards against unexpected "live lock", unresponsive threads, or application failure to</color>
<color=#75715e>   * close a cursor or to commit or abort a transaction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>{@link <a href="#timeDuration">Duration</a>}</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>500 ms</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>75 min</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #setLockTimeout(long,TimeUnit)</color>
<color=#75715e>   * @see <a href="EnvironmentConfig.html#timeDuration">Time Duration Properties</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOCK_TIMEOUT</color> <color=#f92672>=</color> <color=#e6db74>"je.lock.timeout"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Whether to perform deadlock detection when a lock conflict occurs. By default, deadlock</color>
<color=#75715e>   * detection is enabled (this parameter is true) in order to reduce thread wait times when there</color>
<color=#75715e>   * are deadlocks.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Deadlock detection is performed as follows.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ol></color>
<color=#75715e>   *   <li>When a lock is requested by a record read or write operation, JE checks for lock</color>
<color=#75715e>   *       conflicts with another transaction or another thread performing a non-transactional</color>
<color=#75715e>   *       operation. If there is no conflict, the lock is acquired and the operation returns</color>
<color=#75715e>   *       normally.</color>
<color=#75715e>   *   <li>When there is a conflict, JE performs deadlock detection. However, before performing</color>
<color=#75715e>   *       deadlock detection, JE waits for the {@link #LOCK_DEADLOCK_DETECT_DELAY} interval, if it</color>
<color=#75715e>   *       is non-zero. This delay is useful for avoiding the overhead of deadlock detection when</color>
<color=#75715e>   *       normal, short-lived contention (not a deadlock) is the reason for the conflict. If the</color>
<color=#75715e>   *       lock is acquired during the delay, the thread wakes up and the operation returns</color>
<color=#75715e>   *       normally.</color>
<color=#75715e>   *   <li>If a deadlock is detected, {@link DeadlockException} is thrown in one of the threads</color>
<color=#75715e>   *       participating in the deadlock, called the "victim". The victim is chosen at random to</color>
<color=#75715e>   *       prevent a repeated pattern of deadlocks, called "live lock". A non-victim thread that</color>
<color=#75715e>   *       detects a deadlock will notify the victim and perform short delays, waiting for the</color>
<color=#75715e>   *       deadlock to be broken; if the lock is acquired, the operation returns normally.</color>
<color=#75715e>   *   <li>It is possible for live lock to occur in spite of using random victim selection. It is</color>
<color=#75715e>   *       also possible that a deadlock is not broken because the victim thread is unresponsive or</color>
<color=#75715e>   *       the application fails to close a cursor or to commit or abort a transaction. In these</color>
<color=#75715e>   *       cases, if the lock or transaction timeout expires without acquiring the lock, a {@code</color>
<color=#75715e>   *       DeadlockException} is thrown for the last deadlock detected, in the thread that detected</color>
<color=#75715e>   *       the deadlock. In this case, {@code DeadlockException} may be thrown by more than one</color>
<color=#75715e>   *       thread participating in the deadlock.</color>
<color=#75715e>   *   <li>When no deadlock is detected, JE waits for the lock or transaction timeout to expire. If</color>
<color=#75715e>   *       the lock is acquired during this delay, the thread wakes up and the operation returns</color>
<color=#75715e>   *       normally.</color>
<color=#75715e>   *   <li>When the lock or transaction timeout expires without acquiring the lock, JE checks for</color>
<color=#75715e>   *       deadlocks one final time. If a deadlock is detected, {@code DeadlockException} is thrown;</color>
<color=#75715e>   *       otherwise, {@link LockTimeoutException} or {@link TransactionTimeoutException}is thrown.</color>
<color=#75715e>   * </ol></color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Deadlock detection may be disabled (by setting this parameter to false) in applications that</color>
<color=#75715e>   * are known to be free of deadlocks, and this may provide a slight performance improvement in</color>
<color=#75715e>   * certain scenarios. However, this is not recommended because deadlock-free operation is</color>
<color=#75715e>   * difficult to guarantee. If deadlock detection is disabled, JE skips steps 2, 3 and 4 above.</color>
<color=#75715e>   * However, deadlock detection is always performed in the last step, and {@code DeadlockException}</color>
<color=#75715e>   * may be thrown.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>true</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @since 7.1</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOCK_DEADLOCK_DETECT</color> <color=#f92672>=</color> <color=#e6db74>"je.lock.deadlockDetect"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The delay after a lock conflict, before performing deadlock detection.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This delay is used to avoid the overhead of deadlock detection when normal contention (not a</color>
<color=#75715e>   * deadlock) is the reason for the conflict. See {@link #LOCK_DEADLOCK_DETECT} for more</color>
<color=#75715e>   * information.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>{@link <a href="#timeDuration">Duration</a>}</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>75 min</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentConfig.html#timeDuration">Time Duration Properties</a></color>
<color=#75715e>   * @since 7.1</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOCK_DEADLOCK_DETECT_DELAY</color> <color=#f92672>=</color> <color=#e6db74>"je.lock.deadlockDetectDelay"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Used in JE releases 3.4 through 6.4 to throw old-style lock exceptions for compatibility with</color>
<color=#75715e>   * JE release 3.3 and earlier.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @deprecated since JE 6.5; has no effect, as if it were set to false.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>LOCK_OLD_LOCK_EXCEPTIONS</color> <color=#f92672>=</color> <color=#e6db74>"je.lock.oldLockExceptions"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures the transaction timeout.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>{@link <a href="#timeDuration">Duration</a>}</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>75 min</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #setTxnTimeout</color>
<color=#75715e>   * @see <a href="EnvironmentConfig.html#timeDuration">Time Duration Properties</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>TXN_TIMEOUT</color> <color=#f92672>=</color> <color=#e6db74>"je.txn.timeout"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures all transactions for this environment to have Serializable (Degree 3) isolation. By</color>
<color=#75715e>   * setting Serializable isolation, phantoms will be prevented. By default transactions provide</color>
<color=#75715e>   * Repeatable Read isolation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The default is false for the database environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>false</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #setTxnSerializableIsolation</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>TXN_SERIALIZABLE_ISOLATION</color> <color=#f92672>=</color> <color=#e6db74>"je.txn.serializableIsolation"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures the default durability associated with transactions.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>String</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>null</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * The format of the durability string is described at {@link Durability#parse(String)}</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see Durability</color>
<color=#75715e>   * @see #setDurability</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>TXN_DURABILITY</color> <color=#f92672>=</color> <color=#e6db74>"je.txn.durability"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Set this parameter to true to add stacktrace information to deadlock (lock timeout) exception</color>
<color=#75715e>   * messages. The stack trace will show where each lock was taken. The default is false, and true</color>
<color=#75715e>   * should only be used during debugging because of the added memory/processing cost. This</color>
<color=#75715e>   * parameter is 'static' across all environments.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>false</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>TXN_DEADLOCK_STACK_TRACE</color> <color=#f92672>=</color> <color=#e6db74>"je.txn.deadlockStackTrace"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Dump the lock table when a lock timeout is encountered, for debugging assistance.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>false</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>TXN_DUMP_LOCKS</color> <color=#f92672>=</color> <color=#e6db74>"je.txn.dumpLocks"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated in favor of <code>FILE_LOGGING_LEVEL</code> As of JE 4.0, use the standard</color>
<color=#75715e>   *     java.util.logging configuration methodologies. To enable logging output to the je.info</color>
<color=#75715e>   *     files, set com.sleepycat.je.util.FileHandler.level = {@literal <LEVEL>} through the</color>
<color=#75715e>   *     java.util.logging configuration file, or through the java.util.logging.LogManager. To set</color>
<color=#75715e>   *     the handler level programmatically, set "com.sleepycat.je.util.FileHandler.level" in the</color>
<color=#75715e>   *     EnvironmentConfig object.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>TRACE_FILE</color> <color=#f92672>=</color> <color=#e6db74>"java.util.logging.FileHandler.on"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated in favor of <code>CONSOLE_LOGGING_LEVEL</code> As of JE 4.0, use the standard</color>
<color=#75715e>   *     java.util.logging configuration methodologies. To enable console output, set</color>
<color=#75715e>   *     com.sleepycat.je.util.ConsoleHandler.level = {@literal <LEVEL>} through the</color>
<color=#75715e>   *     java.util.logging configuration file, or through the java.util.logging.LogManager. To set</color>
<color=#75715e>   *     the handler level programmatically, set "com.sleepycat.je.util.ConsoleHandler.level" in the</color>
<color=#75715e>   *     EnvironmentConfig object.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>TRACE_CONSOLE</color> <color=#f92672>=</color> <color=#e6db74>"java.util.logging.ConsoleHandler.on"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated As of JE 4.0, event tracing to the .jdb files has been separated from the</color>
<color=#75715e>   *     java.util.logging mechanism. This parameter has no effect.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>TRACE_DB</color> <color=#f92672>=</color> <color=#e6db74>"java.util.logging.DbLogHandler.on"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated As of JE 4.0, use the standard java.util.logging configuration methodologies. To</color>
<color=#75715e>   *     set the FileHandler output file size, set com.sleepycat.je.util.FileHandler.limit =</color>
<color=#75715e>   *     {@literal <NUMBER>} through the java.util.logging configuration file, or through the</color>
<color=#75715e>   *     java.util.logging.LogManager.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>TRACE_FILE_LIMIT</color> <color=#f92672>=</color> <color=#e6db74>"java.util.logging.FileHandler.limit"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated As of JE 4.0, use the standard java.util.logging configuration methodologies. To</color>
<color=#75715e>   *     set the FileHandler output file count, set com.sleepycat.je.util.FileHandler.count =</color>
<color=#75715e>   *     {@literal <NUMBER>} through the java.util.logging configuration file, or through the</color>
<color=#75715e>   *     java.util.logging.LogManager.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>TRACE_FILE_COUNT</color> <color=#f92672>=</color> <color=#e6db74>"java.util.logging.FileHandler.count"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated As of JE 4.0, use the standard java.util.logging configuration methodologies. Set</color>
<color=#75715e>   *     logging levels using class names through the java.util.logging configuration file, or</color>
<color=#75715e>   *     through the java.util.logging.LogManager.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>TRACE_LEVEL</color> <color=#f92672>=</color> <color=#e6db74>"java.util.logging.level"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Trace messages equal and above this level will be logged to the console. Value should be one of</color>
<color=#75715e>   * the predefined java.util.logging.Level values.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Setting this parameter in the je.properties file or through {@link</color>
<color=#75715e>   * EnvironmentConfig#setConfigParam} is analogous to setting the property in the java.util.logging</color>
<color=#75715e>   * properties file or MBean. It is preferred to use the standard java.util.logging mechanisms for</color>
<color=#75715e>   * configuring java.util.logging.Handler, but this JE parameter is provided because the</color>
<color=#75715e>   * java.util.logging API doesn't provide a method to set handler levels programmatically.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>String</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>"OFF"</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="{@docRoot}/../GettingStartedGuide/managelogging.html" target="_top">Chapter 12.</color>
<color=#75715e>   *     Logging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CONSOLE_LOGGING_LEVEL</color> <color=#f92672>=</color> <color=#e6db74>"com.sleepycat.je.util.ConsoleHandler.level"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Trace messages equal and above this level will be logged to the je.info file, which is in the</color>
<color=#75715e>   * Environment home directory. Value should be one of the predefined java.util.logging.Level</color>
<color=#75715e>   * values.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Setting this parameter in the je.properties file or through {@link</color>
<color=#75715e>   * EnvironmentConfig#setConfigParam} is analogous to setting the property in the java.util.logging</color>
<color=#75715e>   * properties file or MBean. It is preferred to use the standard java.util.logging mechanisms for</color>
<color=#75715e>   * configuring java.util.logging.Handler, but this JE parameter is provided because the</color>
<color=#75715e>   * java.util.logging APIs doesn't provide a method to set handler levels programmatically.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>String</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>"INFO"</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="{@docRoot}/../GettingStartedGuide/managelogging.html" target="_top">Chapter 12.</color>
<color=#75715e>   *     Logging</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>FILE_LOGGING_LEVEL</color> <color=#f92672>=</color> <color=#e6db74>"com.sleepycat.je.util.FileHandler.level"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated As of JE 4.0, use the standard java.util.logging configuration methodologies. To</color>
<color=#75715e>   *     see locking logging, set com.sleepycat.je.txn.level = {@literal <LEVEL>} through the</color>
<color=#75715e>   *     java.util.logging configuration file, or through the java.util.logging.LogManager.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>TRACE_LEVEL_LOCK_MANAGER</color> <color=#f92672>=</color> <color=#e6db74>"java.util.logging.level.lockMgr"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated As of JE 4.0, use the standard java.util.logging configuration methodologies. To</color>
<color=#75715e>   *     see recovery logging, set com.sleepycat.je.recovery.level = {@literal <LEVEL>} through the</color>
<color=#75715e>   *     java.util.logging configuration file, or through the java.util.logging.LogManager.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>TRACE_LEVEL_RECOVERY</color> <color=#f92672>=</color> <color=#e6db74>"java.util.logging.level.recovery"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated As of JE 4.0, use the standard java.util.logging configuration methodologies. To</color>
<color=#75715e>   *     see evictor logging, set com.sleepycat.je.evictor.level = {@literal <LEVEL>} through the</color>
<color=#75715e>   *     java.util.logging configuration file, or through the java.util.logging.LogManager.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>TRACE_LEVEL_EVICTOR</color> <color=#f92672>=</color> <color=#e6db74>"java.util.logging.level.evictor"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @deprecated As of JE 4.0, use the standard java.util.logging configuration methodologies. To</color>
<color=#75715e>   *     see cleaner logging, set com.sleepycat.je.cleaner.level = {@literal <LEVEL>} through the</color>
<color=#75715e>   *     java.util.logging configuration file, or through the java.util.logging.LogManager.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>TRACE_LEVEL_CLEANER</color> <color=#f92672>=</color> <color=#e6db74>"java.util.logging.level.cleaner"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If environment startup exceeds this duration, startup statistics are logged and can be found in</color>
<color=#75715e>   * the je.info file.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>{@link <a href="#timeDuration">Duration</a>}</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>5 min</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>none</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentConfig.html#timeDuration">Time Duration Properties</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>STARTUP_DUMP_THRESHOLD</color> <color=#f92672>=</color> <color=#e6db74>"je.env.startupThreshold"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If true collect and log statistics. The statistics are logged in CSV format and written to the</color>
<color=#75715e>   * log file at a user specified interval. The logging occurs per-Environment when the Environment</color>
<color=#75715e>   * is opened in read/write mode. Statistics are written to a filed named je.stat.csv. Successively</color>
<color=#75715e>   * older files are named by adding "0", "1", "2", etc into the file name. The file name format is</color>
<color=#75715e>   * je.stat.[version number].csv.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Boolean</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>True</td></color>
<color=#75715e>   * <td>0</td></color>
<color=#75715e>   * <td>none</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>STATS_COLLECT</color> <color=#f92672>=</color> <color=#e6db74>"je.stats.collect"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Maximum number of statistics log files to retain. The rotating set of files, as each file</color>
<color=#75715e>   * reaches a given size limit, is closed, rotated out, and a new file opened. The name of the log</color>
<color=#75715e>   * file is je.stat.csv. Successively older files are named by adding "0", "1", "2", etc into the</color>
<color=#75715e>   * file name. The file name format is je.stat.[version number].csv.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>10</td></color>
<color=#75715e>   * <td>1</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>STATS_MAX_FILES</color> <color=#f92672>=</color> <color=#e6db74>"je.stats.max.files"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Log file maximum row count for Stat collection. When the number of rows in the statistics file</color>
<color=#75715e>   * reaches the maximum row count, the file is closed, rotated out, and a new file opened. The name</color>
<color=#75715e>   * of the log file is je.stat.csv. Successively older files are named by adding "0", "1", "2", etc</color>
<color=#75715e>   * into the file name. The file name format is je.stat.[version number].csv.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>Integer</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>1440</td></color>
<color=#75715e>   * <td>1</td></color>
<color=#75715e>   * <td>-none-</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>STATS_FILE_ROW_COUNT</color> <color=#f92672>=</color> <color=#e6db74>"je.stats.file.row.count"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The duration of the statistics capture interval. Statistics are captured and written to the log</color>
<color=#75715e>   * file at this interval.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td></color>
<color=#75715e>   * <td>Default</td><td>Minimum</td><td>Maximum</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>{@link <a href="#timeDuration">Duration</a>}</td></color>
<color=#75715e>   * <td>Yes</td></color>
<color=#75715e>   * <td>1 min</td></color>
<color=#75715e>   * <td>1 s</td></color>
<color=#75715e>   * <td>24 d</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   *</color>
<color=#75715e>   * @see <a href="EnvironmentConfig.html#timeDuration">Time Duration Properties</a></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>STATS_COLLECT_INTERVAL</color> <color=#f92672>=</color> <color=#e6db74>"je.stats.collect.interval"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The directory to save the statistics log file.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>String</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>"NULL-> Environment home directory"</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>STATS_FILE_DIRECTORY</color> <color=#f92672>=</color> <color=#e6db74>"je.stats.file.directory"</color><color=#f8f8f2>;</color>

  <color=#75715e>/** For unit testing, to prevent using the utilization profile and expiration profile DB. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>createUP</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>createEP</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

  <color=#75715e>/** For unit testing, to prevent writing utilization data during checkpoint. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>checkpointUP</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>allowCreate</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/** For unit testing, to set readCommitted as the default. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>txnReadCommitted</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#f8f8f2>nodeName</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The loggingHandler is an instance and cannot be serialized. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#f8f8f2>Handler</color> <color=#f8f8f2>loggingHandler</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#f8f8f2>ProgressListener</color><color=#f92672><</color><color=#f8f8f2>RecoveryProgress</color><color=#f92672>></color> <color=#f8f8f2>recoveryProgressListener</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>classLoader</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#f8f8f2>PreloadConfig</color> <color=#f8f8f2>dupConvertPreloadConfig</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>CustomStats</color> <color=#f8f8f2>customStats</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Creates an EnvironmentConfig initialized with the system default settings. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>EnvironmentConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates an EnvironmentConfig which includes the properties specified in the properties</color>
<color=#75715e>   * parameter.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param properties Supported properties are described in this class</color>
<color=#75715e>   * @throws IllegalArgumentException If any properties read from the properties param are invalid.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>EnvironmentConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color> <color=#f8f8f2>properties</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>properties</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If true, creates the database environment if it doesn't already exist.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param allowCreate If true, the database environment is created if it doesn't already exist.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#a6e22e>setAllowCreate</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>allowCreate</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setAllowCreateVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>allowCreate</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setAllowCreateVoid</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>allowCreate</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>allowCreate</color> <color=#f92672>=</color> <color=#f8f8f2>allowCreate</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a flag that specifies if we may create this environment.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if we may create this environment.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getAllowCreate</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>allowCreate</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Convenience method for setting {@link EnvironmentConfig#LOCK_TIMEOUT}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param timeout The lock timeout for all transactional and non-transactional operations, or zero</color>
<color=#75715e>   *     to disable lock timeouts.</color>
<color=#75715e>   * @param unit the {@code TimeUnit} of the timeout value. May be null only if timeout is zero.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   * @throws IllegalArgumentException if the value of timeout is invalid</color>
<color=#75715e>   * @see EnvironmentConfig#LOCK_TIMEOUT</color>
<color=#75715e>   * @see Transaction#setLockTimeout(long,TimeUnit)</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#a6e22e>setLockTimeout</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>unit</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setLockTimeoutVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>unit</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setLockTimeoutVoid</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>unit</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>setDurationVal</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>LOCK_TIMEOUT</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>unit</color><color=#f8f8f2>,</color> <color=#f8f8f2>validateParams</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures the lock timeout, in microseconds. This method is equivalent to:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <pre>setLockTimeout(long, TimeUnit.MICROSECONDS);</pre></color>
<color=#75715e>   *</color>
<color=#75715e>   * @deprecated as of 4.0, replaced by {@link #setLockTimeout(long, TimeUnit)}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#a6e22e>setLockTimeout</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setLockTimeoutVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>timeout</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setLockTimeoutVoid</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setLockTimeout</color><color=#f8f8f2>(</color><color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MICROSECONDS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the lock timeout setting.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param unit the {@code TimeUnit} of the returned value. May not be null.</color>
<color=#75715e>   *     <p>A value of 0 means no timeout is set.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getLockTimeout</color><color=#f8f8f2>(</color><color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>unit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDurationVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>LOCK_TIMEOUT</color><color=#f8f8f2>,</color> <color=#f8f8f2>unit</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the lock timeout setting, in microseconds. This method is equivalent to:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <pre>getLockTimeout(TimeUnit.MICROSECONDS);</pre></color>
<color=#75715e>   *</color>
<color=#75715e>   * @deprecated as of 4.0, replaced by {@link #getLockTimeout(TimeUnit)}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getLockTimeout</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getLockTimeout</color><color=#f8f8f2>(</color><color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MICROSECONDS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Convenience method for setting {@link EnvironmentConfig#ENV_READ_ONLY}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param readOnly If true, configure the database environment to be read only, and any attempt to</color>
<color=#75715e>   *     modify a database will fail.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#a6e22e>setReadOnly</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>readOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setReadOnlyVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>readOnly</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setReadOnlyVoid</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>readOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>setBooleanVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_RDONLY</color><color=#f8f8f2>,</color> <color=#f8f8f2>readOnly</color><color=#f8f8f2>,</color> <color=#f8f8f2>validateParams</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if the database environment is configured to be read only.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method may be called at any time during the life of the application.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the database environment is configured to be read only.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getReadOnly</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBooleanVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_RDONLY</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Convenience method for setting {@link EnvironmentConfig#ENV_IS_TRANSACTIONAL}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param transactional If true, configure the database environment for transactions.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#a6e22e>setTransactional</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>transactional</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setTransactionalVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>transactional</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setTransactionalVoid</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>transactional</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>setBooleanVal</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_INIT_TXN</color><color=#f8f8f2>,</color> <color=#f8f8f2>transactional</color><color=#f8f8f2>,</color> <color=#f8f8f2>validateParams</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if the database environment is configured for transactions.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method may be called at any time during the life of the application.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the database environment is configured for transactions.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getTransactional</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBooleanVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_INIT_TXN</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Convenience method for setting {@link EnvironmentConfig#ENV_IS_LOCKING}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param locking If false, configure the database environment for no locking. The default is</color>
<color=#75715e>   *     true.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#a6e22e>setLocking</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>locking</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setLockingVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>locking</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setLockingVoid</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>locking</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>setBooleanVal</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_INIT_LOCKING</color><color=#f8f8f2>,</color> <color=#f8f8f2>locking</color><color=#f8f8f2>,</color> <color=#f8f8f2>validateParams</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns true if the database environment is configured for locking.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method may be called at any time during the life of the application.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the database environment is configured for locking.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getLocking</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBooleanVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_INIT_LOCKING</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A convenience method for setting {@link EnvironmentConfig#TXN_TIMEOUT}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param timeout The transaction timeout. A value of 0 turns off transaction timeouts.</color>
<color=#75715e>   * @param unit the {@code TimeUnit} of the timeout value. May be null only if timeout is zero.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   * @throws IllegalArgumentException If the value of timeout is negative</color>
<color=#75715e>   * @see EnvironmentConfig#TXN_TIMEOUT</color>
<color=#75715e>   * @see Transaction#setTxnTimeout</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#a6e22e>setTxnTimeout</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>unit</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setTxnTimeoutVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>unit</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setTxnTimeoutVoid</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>unit</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>setDurationVal</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>TXN_TIMEOUT</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>unit</color><color=#f8f8f2>,</color> <color=#f8f8f2>validateParams</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures the transaction timeout, in microseconds. This method is equivalent to:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <pre>setTxnTimeout(long, TimeUnit.MICROSECONDS);</pre></color>
<color=#75715e>   *</color>
<color=#75715e>   * @deprecated as of 4.0, replaced by {@link #setTxnTimeout(long, TimeUnit)}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#a6e22e>setTxnTimeout</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setTxnTimeoutVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>timeout</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setTxnTimeoutVoid</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setTxnTimeout</color><color=#f8f8f2>(</color><color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MICROSECONDS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A convenience method for getting {@link EnvironmentConfig#TXN_TIMEOUT}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>A value of 0 means transaction timeouts are not configured.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param unit the {@code TimeUnit} of the returned value. May not be null.</color>
<color=#75715e>   * @return The transaction timeout.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTxnTimeout</color><color=#f8f8f2>(</color><color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>unit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getDurationVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>TXN_TIMEOUT</color><color=#f8f8f2>,</color> <color=#f8f8f2>unit</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the transaction timeout, in microseconds. This method is equivalent to:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <pre>getTxnTimeout(TimeUnit.MICROSECONDS);</pre></color>
<color=#75715e>   *</color>
<color=#75715e>   * @deprecated as of 4.0, replaced by {@link #getTxnTimeout(TimeUnit)}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTxnTimeout</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getTxnTimeout</color><color=#f8f8f2>(</color><color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>MICROSECONDS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A convenience method for setting {@link EnvironmentConfig#TXN_SERIALIZABLE_ISOLATION}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see LockMode</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#a6e22e>setTxnSerializableIsolation</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>txnSerializableIsolation</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setTxnSerializableIsolationVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>txnSerializableIsolation</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setTxnSerializableIsolationVoid</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>txnSerializableIsolation</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>setBooleanVal</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>props</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>TXN_SERIALIZABLE_ISOLATION</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>txnSerializableIsolation</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>validateParams</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A convenience method for getting {@link EnvironmentConfig#TXN_SERIALIZABLE_ISOLATION}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the environment has been configured to have repeatable read isolation.</color>
<color=#75715e>   * @see LockMode</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getTxnSerializableIsolation</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBooleanVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>TXN_SERIALIZABLE_ISOLATION</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For unit testing, sets readCommitted as the default. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>setTxnReadCommitted</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>txnReadCommitted</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>txnReadCommitted</color> <color=#f92672>=</color> <color=#f8f8f2>txnReadCommitted</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For unit testing, to set readCommitted as the default. */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>getTxnReadCommitted</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>txnReadCommitted</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A convenience method for setting the {@link EnvironmentConfig#SHARED_CACHE} parameter.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param sharedCache If true, the shared cache is used by this environment.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#a6e22e>setSharedCache</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>sharedCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setSharedCacheVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>sharedCache</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setSharedCacheVoid</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>sharedCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>setBooleanVal</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_SHARED_CACHE</color><color=#f8f8f2>,</color> <color=#f8f8f2>sharedCache</color><color=#f8f8f2>,</color> <color=#f8f8f2>validateParams</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A convenience method for getting the {@link EnvironmentConfig#SHARED_CACHE} parameter.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the shared cache is used by this environment. @see #setSharedCache</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getSharedCache</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getBooleanVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>ENV_SHARED_CACHE</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the user defined nodeName for the Environment. If set, exception messages, logging</color>
<color=#75715e>   * messages, and thread names will have this nodeName included in them. If a user has multiple</color>
<color=#75715e>   * Environments in a single JVM, setting this to a string unique to each Environment may make it</color>
<color=#75715e>   * easier to diagnose certain exception conditions as well as thread dumps.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#a6e22e>setNodeName</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setNodeNameVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>nodeName</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setNodeNameVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>nodeName</color> <color=#f92672>=</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the user defined nodeName for the Environment. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getNodeName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>nodeName</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the custom statistics object.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#a6e22e>setCustomStats</color><color=#f8f8f2>(</color><color=#f8f8f2>CustomStats</color> <color=#f8f8f2>customStats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>customStats</color> <color=#f92672>=</color> <color=#f8f8f2>customStats</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setCustomStatsVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>CustomStats</color> <color=#f8f8f2>customStats</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>customStats</color> <color=#f92672>=</color> <color=#f8f8f2>customStats</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Gets the custom statstics object.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return customStats</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>CustomStats</color> <color=#a6e22e>getCustomStats</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>customStats</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Set a java.util.logging.Handler which will be used by all java.util.logging.Loggers</color>
<color=#75715e>   * instantiated by this Environment. This lets the application specify a handler which</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>requires a constructor with arguments</color>
<color=#75715e>   *   <li>is specific to this environment, which is important if the application is using multiple</color>
<color=#75715e>   *       environments within the same process.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * Note that {@link Handler} is not serializable, and the logging handler should be set within the</color>
<color=#75715e>   * same process.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#a6e22e>setLoggingHandler</color><color=#f8f8f2>(</color><color=#f8f8f2>Handler</color> <color=#f8f8f2>handler</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setLoggingHandlerVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>handler</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setLoggingHandlerVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>Handler</color> <color=#f8f8f2>handler</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>loggingHandler</color> <color=#f92672>=</color> <color=#f8f8f2>handler</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the custom java.util.logging.Handler specified by the application. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Handler</color> <color=#a6e22e>getLoggingHandler</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>loggingHandler</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Documentation inherited from EnvironmentMutableConfig.setConfigParam. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>paramName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>props</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>paramName</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>value</color><color=#f8f8f2>,</color>
        <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#75715e>/* requireMutablity */</color>
        <color=#f8f8f2>validateParams</color><color=#f8f8f2>,</color>
        <color=#66d9ef>false</color> <color=#75715e>/* forReplication */</color><color=#f8f8f2>,</color>
        <color=#66d9ef>true</color> <color=#75715e>/* verifyForReplication */</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configure the environment to make periodic calls to a ProgressListener to provide feedback on</color>
<color=#75715e>   * environment startup (recovery). The ProgressListener.progress() method is called at different</color>
<color=#75715e>   * stages of the recovery process. See {@link RecoveryProgress} for information about those</color>
<color=#75715e>   * stages.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>When using progress listeners, review the information at {@link ProgressListener#progress}</color>
<color=#75715e>   * to avoid any unintended disruption to environment startup.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param progressListener The ProgressListener to callback during environment startup (recovery).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#a6e22e>setRecoveryProgressListener</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ProgressListener</color><color=#f92672><</color><color=#f8f8f2>RecoveryProgress</color><color=#f92672>></color> <color=#f8f8f2>progressListener</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setRecoveryProgressListenerVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>progressListener</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setRecoveryProgressListenerVoid</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ProgressListener</color><color=#f92672><</color><color=#f8f8f2>RecoveryProgress</color><color=#f92672>></color> <color=#f8f8f2>progressListener</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>recoveryProgressListener</color> <color=#f92672>=</color> <color=#f8f8f2>progressListener</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Return the ProgressListener to be used at this environment startup. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ProgressListener</color><color=#f92672><</color><color=#f8f8f2>RecoveryProgress</color><color=#f92672>></color> <color=#a6e22e>getRecoveryProgressListener</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>recoveryProgressListener</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configure the environment to use a specified ClassLoader for loading user-supplied classes by</color>
<color=#75715e>   * name.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#a6e22e>setClassLoader</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>classLoader</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setClassLoaderVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>classLoader</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setClassLoaderVoid</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>classLoader</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>classLoader</color> <color=#f92672>=</color> <color=#f8f8f2>classLoader</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the ClassLoader for loading user-supplied classes by name, or null if no specified</color>
<color=#75715e>   * ClassLoader is configured.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ClassLoader</color> <color=#a6e22e>getClassLoader</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>classLoader</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden Configure the environment to use a specified PreloadConfig for duplicates database</color>
<color=#75715e>   *     conversion.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#a6e22e>setDupConvertPreloadConfig</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>PreloadConfig</color> <color=#f8f8f2>preloadConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>setDupConvertPreloadConfigVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>preloadConfig</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setDupConvertPreloadConfigVoid</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>PreloadConfig</color> <color=#f8f8f2>preloadConfig</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dupConvertPreloadConfig</color> <color=#f92672>=</color> <color=#f8f8f2>preloadConfig</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden Returns the PreloadConfig for duplicates database conversion, or null if no</color>
<color=#75715e>   *     PreloadConfig is configured.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>PreloadConfig</color> <color=#a6e22e>getDupConvertPreloadConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>dupConvertPreloadConfig</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For unit testing, to prevent use of the utilization profile DB. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>setCreateUP</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>createUP</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>createUP</color> <color=#f92672>=</color> <color=#f8f8f2>createUP</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For unit testing, to prevent use of the utilization profile DB. */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>getCreateUP</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>createUP</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For unit testing, to prevent use of the expiration profile DB. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>setCreateEP</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>createUP</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>createEP</color> <color=#f92672>=</color> <color=#f8f8f2>createUP</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For unit testing, to prevent use of the expiration profile DB. */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>getCreateEP</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>createEP</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For unit testing, to prevent writing utilization data during checkpoint. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>setCheckpointUP</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>checkpointUP</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>checkpointUP</color> <color=#f92672>=</color> <color=#f8f8f2>checkpointUP</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For unit testing, to prevent writing utilization data during checkpoint. */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>getCheckpointUP</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>checkpointUP</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns a copy of this configuration object. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>EnvironmentConfig</color> <color=#a6e22e>clone</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentConfig</color><color=#f8f8f2>)</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Display configuration values. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#e6db74>" nodeName="</color>
        <color=#f92672>+</color> <color=#f8f8f2>nodeName</color>
        <color=#f92672>+</color> <color=#e6db74>" allowCreate="</color>
        <color=#f92672>+</color> <color=#f8f8f2>allowCreate</color>
        <color=#f92672>+</color> <color=#e6db74>" recoveryProgressListener="</color>
        <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>recoveryProgressListener</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
        <color=#f92672>+</color> <color=#e6db74>" classLoader="</color>
        <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>classLoader</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
        <color=#f92672>+</color> <color=#e6db74>" customStats="</color>
        <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>customStats</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
        <color=#f92672>+</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>