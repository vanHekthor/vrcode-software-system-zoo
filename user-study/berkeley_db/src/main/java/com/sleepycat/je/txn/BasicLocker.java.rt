<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.txn</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DatabaseException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.CursorImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DatabaseImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.IntStat</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.StatGroup</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.HashSet</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Set</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.txn.LockStatDefinition.LOCK_READ_LOCKS</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.txn.LockStatDefinition.LOCK_WRITE_LOCKS</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A non-transactional Locker that simply tracks locks and releases them when releaseNonTxnLocks or</color>
<color=#75715e> * operationEnd is called.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>BasicLocker</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>{</color>

  <color=#75715e>/*</color>
<color=#75715e>   * A BasicLocker can release all locks, so there is no need to distinguish</color>
<color=#75715e>   * between read and write locks.</color>
<color=#75715e>   *</color>
<color=#75715e>   * ownedLock is used for the first lock obtained, and ownedLockSet is</color>
<color=#75715e>   * instantiated and used only if more than one lock is obtained.  This is</color>
<color=#75715e>   * an optimization for the common case where only one lock is held by a</color>
<color=#75715e>   * non-transactional locker.</color>
<color=#75715e>   *</color>
<color=#75715e>   * There's no need to track memory utilization for these non-txnal lockers,</color>
<color=#75715e>   * because the lockers are short lived.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>ownedLock</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>ownedLockSet</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>lockingRequired</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Creates a BasicLocker. */</color>
  <color=#66d9ef>protected</color> <color=#a6e22e>BasicLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#75715e>// readUncommittedDefault</color>
        <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#75715e>// noWait</color>
        <color=#ae81ff>0</color><color=#f8f8f2>);</color> <color=#75715e>// mandatedId</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>BasicLocker</color> <color=#a6e22e>createBasicLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BasicLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Creates a BasicLocker with a noWait argument. */</color>
  <color=#66d9ef>protected</color> <color=#a6e22e>BasicLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>noWait</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#75715e>// readUncommittedDefault</color>
        <color=#f8f8f2>noWait</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color> <color=#75715e>// mandatedId</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>BasicLocker</color> <color=#a6e22e>createBasicLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>noWait</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BasicLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#f8f8f2>noWait</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** BasicLockers always have a fixed id, because they are never used for recovery. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>long</color> <color=#a6e22e>generateId</color><color=#f8f8f2>(</color><color=#f8f8f2>TxnManager</color> <color=#f8f8f2>txnManager</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>ignore</color> <color=#75715e>/* mandatedId */</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>TxnManager</color><color=#f8f8f2>.</color><color=#a6e22e>NULL_TXN_ID</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>checkState</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>ignoreCalledByAbort</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Do nothing. */</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>LockResult</color> <color=#a6e22e>lockInternal</color><color=#f8f8f2>(</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>LockType</color> <color=#f8f8f2>lockType</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>noWait</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>jumpAheadOfWaiters</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>database</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Does nothing in BasicLocker. synchronized is for posterity. */</color>
    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>checkState</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>timeout</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>useNoWait</color> <color=#f92672>=</color> <color=#f8f8f2>noWait</color> <color=#f92672>||</color> <color=#f8f8f2>defaultNoWait</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>useNoWait</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>timeout</color> <color=#f92672>=</color> <color=#f8f8f2>getLockTimeout</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Ask for the lock. */</color>
    <color=#f8f8f2>LockGrantType</color> <color=#f8f8f2>grant</color> <color=#f92672>=</color>
        <color=#f8f8f2>lockManager</color><color=#f8f8f2>.</color><color=#a6e22e>lock</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockType</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>useNoWait</color><color=#f8f8f2>,</color> <color=#f8f8f2>jumpAheadOfWaiters</color><color=#f8f8f2>,</color> <color=#f8f8f2>database</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>LockResult</color><color=#f8f8f2>(</color><color=#f8f8f2>grant</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>preLogWithoutLock</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>database</color><color=#f8f8f2>)</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/** Get the txn that owns the lock on this node. Return null if there's no owning txn found. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Locker</color> <color=#a6e22e>getWriteOwnerLocker</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>lockManager</color><color=#f8f8f2>.</color><color=#a6e22e>getWriteOwnerLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Is never transactional. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isTransactional</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Is never serializable isolation. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isSerializableIsolation</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Is never read-committed isolation. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isReadCommittedIsolation</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** No transactional locker is available. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Txn</color> <color=#a6e22e>getTxnLocker</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Throws EnvironmentFailureException unconditionally.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If we were to create a new BasicLocker here, it would not share locks with this locker,</color>
<color=#75715e>   * which violates the definition of this method. This method is not currently called in direct</color>
<color=#75715e>   * uses of BasicLocker and is overridden by subclasses where it is allowed (e.g., ThreadLocker and</color>
<color=#75715e>   * ReadCommittedLocker).</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws DatabaseException from subclasses.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Locker</color> <color=#a6e22e>newNonTxnLocker</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>throw</color> <color=#f8f8f2>EnvironmentFailureException</color><color=#f8f8f2>.</color><color=#a6e22e>unexpectedState</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Releases all locks, since all locks held by this locker are non-transactional. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>releaseNonTxnLocks</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Don't remove locks from txn's lock collection until iteration is</color>
<color=#75715e>     * done, lest we get a ConcurrentModificationException during deadlock</color>
<color=#75715e>     * graph "display".  [#9544]</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ownedLock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>lockManager</color><color=#f8f8f2>.</color><color=#a6e22e>release</color><color=#f8f8f2>(</color><color=#f8f8f2>ownedLock</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>ownedLock</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ownedLockSet</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>nid</color> <color=#f8f8f2>:</color> <color=#f8f8f2>ownedLockSet</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>lockManager</color><color=#f8f8f2>.</color><color=#a6e22e>release</color><color=#f8f8f2>(</color><color=#f8f8f2>nid</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Now clear lock collection. */</color>
      <color=#f8f8f2>ownedLockSet</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Unload delete info, but don't wake up the compressor. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>deleteInfo</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>deleteInfo</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>addToCompressorQueue</color><color=#f8f8f2>(</color><color=#f8f8f2>deleteInfo</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>deleteInfo</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Release locks and close the cursor at the end of the operation. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>nonTxnOperationEnd</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>operationEnd</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Release locks and close the cursor at the end of the operation. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>operationEnd</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>operationOK</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>releaseNonTxnLocks</color><color=#f8f8f2>();</color>

    <color=#75715e>/* Close this Locker. */</color>
    <color=#f8f8f2>close</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This txn doesn't store cursors.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws DatabaseException in subclasses.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>registerCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>lockingRequired</color> <color=#f92672>=</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>.</color><color=#a6e22e>isInternalDbCursor</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** This txn doesn't store cursors. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>unRegisterCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>cursor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>lockingRequired</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lockingRequired</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Transactional methods are all no-oped.</color>
<color=#75715e>   */</color>

  <color=#75715e>/** @return a dummy WriteLockInfo for this node. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>WriteLockInfo</color> <color=#a6e22e>getWriteLockInfo</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>WriteLockInfo</color><color=#f8f8f2>.</color><color=#a6e22e>basicWriteLockInfo</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>markDeleteAtTxnEnd</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>db</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>deleteAtCommit</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>deleteAtCommit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* releaseDb will be called by startAndFinishDelete. */</color>
      <color=#f8f8f2>db</color><color=#f8f8f2>.</color><color=#a6e22e>startAndFinishDelete</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDbTree</color><color=#f8f8f2>().</color><color=#a6e22e>releaseDb</color><color=#f8f8f2>(</color><color=#f8f8f2>db</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Add a lock to set owned by this transaction. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>addLock</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockGrantType</color> <color=#f8f8f2>grantStatus</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>ownedLock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>ownedLock</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>))</color>
        <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>ownedLockSet</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>ownedLockSet</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color> <color=#75715e>// Already owned</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ownedLock</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ownedLock</color> <color=#f92672>=</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ownedLockSet</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ownedLockSet</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><></color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>ownedLockSet</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Remove a lock from the set owned by this txn. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>void</color> <color=#a6e22e>removeLock</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ownedLock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>ownedLock</color> <color=#f92672>==</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ownedLock</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ownedLockSet</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ownedLockSet</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** A lock is being demoted. Move it from the write collection into the read collection. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>void</color> <color=#a6e22e>moveWriteToReadLock</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>lock</color><color=#f8f8f2>)</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Stats. Note lack of synchronization while accessing Lock object. Appropriate for unit testing</color>
<color=#75715e>   * only.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>StatGroup</color> <color=#a6e22e>collectStats</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>stats</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#e6db74>"Locker lock counts"</color><color=#f8f8f2>,</color> <color=#e6db74>"Read and write locks held by this locker"</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>IntStat</color> <color=#f8f8f2>nReadLocks</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>IntStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>LOCK_READ_LOCKS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>IntStat</color> <color=#f8f8f2>nWriteLocks</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>IntStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>LOCK_WRITE_LOCKS</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ownedLock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Lock</color> <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#f8f8f2>lockManager</color><color=#f8f8f2>.</color><color=#a6e22e>lookupLock</color><color=#f8f8f2>(</color><color=#f8f8f2>ownedLock</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>l</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>isOwnedWriteLock</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>nWriteLocks</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>nReadLocks</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ownedLockSet</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>nid</color> <color=#f8f8f2>:</color> <color=#f8f8f2>ownedLockSet</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Lock</color> <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#f8f8f2>lockManager</color><color=#f8f8f2>.</color><color=#a6e22e>lookupLock</color><color=#f8f8f2>(</color><color=#f8f8f2>nid</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>l</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>isOwnedWriteLock</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>nWriteLocks</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>nReadLocks</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>