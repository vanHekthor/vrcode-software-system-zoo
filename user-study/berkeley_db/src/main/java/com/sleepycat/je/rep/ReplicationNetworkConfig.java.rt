<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentConfig</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.config.ConfigParam</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.config.EnvironmentParams</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.DbConfigManager</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepParams</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.DataChannelFactory</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.InstanceParams</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.RepUtils</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.File</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.FileNotFoundException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.Serializable</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * @hidden SSL deferred This is the root class for specifying the parameters that control</color>
<color=#75715e> *     replication network communication within a a replicated environment. The parameters contained</color>
<color=#75715e> *     here are immutable.</color>
<color=#75715e> *     <p>To change the default settings for a replicated environment, an application creates a</color>
<color=#75715e> *     configuration object, customizes settings and uses it for {@link ReplicatedEnvironment}</color>
<color=#75715e> *     construction. Except as noted, the set methods of this class perform only minimal validation</color>
<color=#75715e> *     of configuration values when the method is called, and value checking is deferred until the</color>
<color=#75715e> *     time a DataChannel factory is constructed. An IllegalArgumentException is thrown if the value</color>
<color=#75715e> *     is not valid for that attribute.</color>
<color=#75715e> *     <p>ReplicationNetworkConfig follows precedence rules similar to those of {@link</color>
<color=#75715e> *     EnvironmentConfig}.</color>
<color=#75715e> *     <ol></color>
<color=#75715e> *       <li>Configuration parameters specified in {@literal <environmentHome>/je.properties} take</color>
<color=#75715e> *           first precedence.</color>
<color=#75715e> *       <li>Configuration parameters set in the ReplicationNetworkConfig object used at {@code</color>
<color=#75715e> *           ReplicatedEnvironment} construction are next.</color>
<color=#75715e> *       <li>Any configuration parameters not set by the application are set to system defaults,</color>
<color=#75715e> *           described along with the parameter name String constants in this class.</color>
<color=#75715e> *     </ol></color>
<color=#75715e> *     <p></color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>ReplicationNetworkConfig</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Cloneable</color><color=#f8f8f2>,</color> <color=#f8f8f2>Serializable</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>serialVersionUID</color> <color=#f92672>=</color> <color=#ae81ff>1L</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Note: all replicated parameters should start with</color>
<color=#75715e>   * EnvironmentParams.REP_PARAMS_PREFIX, which is "je.rep.",</color>
<color=#75715e>   * see SR [#19080].</color>
<color=#75715e>   */</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The following is currently undocumented:</color>
<color=#75715e>   * The channelType property may also take the value:</color>
<color=#75715e>   *    <code>custom</code></color>
<color=#75715e>   * <code>custom</code> indicates that the channel implementation is to be</color>
<color=#75715e>   * provided by the application.  This can be done through the use of the</color>
<color=#75715e>   * combination of two configuration parameters</color>
<color=#75715e>   * <pre></color>
<color=#75715e>   *   {@link #CHANNEL_FACTORY_CLASS je.rep.channelFactoryClass}</color>
<color=#75715e>   *   {@link #CHANNEL_FACTORY_PARAMS je.rep.channelFactoryParams}</color>
<color=#75715e>   * </pre></color>
<color=#75715e>   */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Configures the type of communication channel to use. This property is not directly setable. It</color>
<color=#75715e>   * can be specified in a property file or property set passed to a create() method, or a direct</color>
<color=#75715e>   * instantiation of a class derived from this class may be used. When set through one of the</color>
<color=#75715e>   * create() methods or when read through the getChannelType() method, the valid values for this</color>
<color=#75715e>   * parameter are:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li><code>basic</code></color>
<color=#75715e>   *   <li><code>ssl</code></color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * <code>basic</code> is the standard implementation, which uses ordinary, unencrypted</color>
<color=#75715e>   * communication, and is represented by this the {@link ReplicationBasicConfig} class.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p><code>ssl</code> indicates that SSL is to be used for service communication. When using SSL,</color>
<color=#75715e>   * an instance of {@link ReplicationSSLConfig} must be used.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>String</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>"basic"</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CHANNEL_TYPE</color> <color=#f92672>=</color> <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>REP_PARAM_PREFIX</color> <color=#f92672>+</color> <color=#e6db74>"channelType"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden A string identifying a class to instantiate as the data channel factory. Typical</color>
<color=#75715e>   *     product use does not require this configuration parameter, but this allows a custom data</color>
<color=#75715e>   *     channel factory to be supplied. If supplied, it must be a fully qualified Java class name</color>
<color=#75715e>   *     for a class that implements the {@link DataChannelFactory} interface and provides a public</color>
<color=#75715e>   *     constructor with an argument list of the form ( {@link InstanceParams} )</color>
<color=#75715e>   *     <p>Note: Setting this class instantiated from this parameter must be of the same</color>
<color=#75715e>   *     configuration type as indicated by channelType().</color>
<color=#75715e>   *     <p></color>
<color=#75715e>   *     <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>String</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>""</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CHANNEL_FACTORY_CLASS</color> <color=#f92672>=</color>
      <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>REP_PARAM_PREFIX</color> <color=#f92672>+</color> <color=#e6db74>"channelFactoryClass"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden A string providing factory-specific data channel configuration parameters. The encoding</color>
<color=#75715e>   *     of parameters within the string is determined by the specific factory class implementation.</color>
<color=#75715e>   *     As examples, it may choose to join multiple strings with a delimiter character or may allow</color>
<color=#75715e>   *     binary data to be hex-encoded.</color>
<color=#75715e>   *     <p>Note: Setting this parameter is ignored unless {@link #CHANNEL_TYPE</color>
<color=#75715e>   *     je.rep.channelFactoryClass} is set.</color>
<color=#75715e>   *     <p></color>
<color=#75715e>   *     <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>String</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>""</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CHANNEL_FACTORY_PARAMS</color> <color=#f92672>=</color>
      <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>REP_PARAM_PREFIX</color> <color=#f92672>+</color> <color=#e6db74>"channelFactoryParams"</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A string providing a logging context identification string. This string is incorporated into</color>
<color=#75715e>   * log messages in order to help associate messages with the configuration context.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p></color>
<color=#75715e>   *</color>
<color=#75715e>   * <table border="1"></color>
<color=#75715e>   * <tr><td>Name</td><td>Type</td><td>Mutable</td><td>Default</td></tr></color>
<color=#75715e>   * <tr></color>
<color=#75715e>   * <td>{@value}</td></color>
<color=#75715e>   * <td>String</td></color>
<color=#75715e>   * <td>No</td></color>
<color=#75715e>   * <td>""</td></color>
<color=#75715e>   * </tr></color>
<color=#75715e>   * </table></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>CHANNEL_LOG_NAME</color> <color=#f92672>=</color>
      <color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>REP_PARAM_PREFIX</color> <color=#f92672>+</color> <color=#e6db74>"channelLogName"</color><color=#f8f8f2>;</color>

  <color=#75715e>/* The set of Replication properties specific to this class */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>repNetLocalProperties</color><color=#f8f8f2>;</color>

  <color=#66d9ef>static</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>repNetLocalProperties</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>repNetLocalProperties</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>CHANNEL_TYPE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>repNetLocalProperties</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>CHANNEL_LOG_NAME</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>repNetLocalProperties</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>CHANNEL_FACTORY_CLASS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>repNetLocalProperties</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>CHANNEL_FACTORY_PARAMS</color><color=#f8f8f2>);</color>
    <color=#75715e>/* Nail the set down */</color>
    <color=#f8f8f2>repNetLocalProperties</color> <color=#f92672>=</color> <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>unmodifiableSet</color><color=#f8f8f2>(</color><color=#f8f8f2>repNetLocalProperties</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The set of Replication properties for this class and derived classes.</color>
<color=#75715e>   * It is created later, no demand, to deal with class loading ordering</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>repNetAllProperties</color><color=#f8f8f2>;</color>

  <color=#66d9ef>static</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Force loading when a ReplicationNetworkConfig is used and an</color>
<color=#75715e>     * environment has not been created.</color>
<color=#75715e>     */</color>
    <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unused"</color><color=#f8f8f2>)</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>ConfigParam</color> <color=#f8f8f2>forceLoad</color> <color=#f92672>=</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>CHANNEL_TYPE</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* The properties for this configuration */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#f8f8f2>Properties</color> <color=#f8f8f2>props</color><color=#f8f8f2>;</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>validateParams</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates an ReplicationNetworkConfig which includes the properties specified in the named</color>
<color=#75715e>   * properties file.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param propFile a File from which the configuration properties will be read.</color>
<color=#75715e>   * @return an instance of a class derived from ReplicationNetworkConfig as indicated by the</color>
<color=#75715e>   *     channelType property.</color>
<color=#75715e>   * @throws FileNotFoundException If the property file cannot be found</color>
<color=#75715e>   * @throws IllegalArgumentException If any properties read from the properties parameter are</color>
<color=#75715e>   *     invalid.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>ReplicationNetworkConfig</color> <color=#a6e22e>create</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>propFile</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>,</color> <color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>create</color><color=#f8f8f2>(</color><color=#f8f8f2>readProperties</color><color=#f8f8f2>(</color><color=#f8f8f2>propFile</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates an ReplicationNetworkConfig which includes the properties specified in the properties</color>
<color=#75715e>   * parameter.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param properties Supported properties are described as the string constants in this class.</color>
<color=#75715e>   * @return an instance of a class derived from ReplicationNetworkConfig as indicated by the</color>
<color=#75715e>   *     channelType property.</color>
<color=#75715e>   * @throws IllegalArgumentException If any properties read from the properties parameter are</color>
<color=#75715e>   *     invalid.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>ReplicationNetworkConfig</color> <color=#a6e22e>create</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color> <color=#f8f8f2>properties</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>channelType</color> <color=#f92672>=</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getVal</color><color=#f8f8f2>(</color><color=#f8f8f2>properties</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>CHANNEL_TYPE</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"basic"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>channelType</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReplicationBasicConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>properties</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"ssl"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>channelType</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReplicationSSLConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>properties</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Unknown channel type: "</color> <color=#f92672>+</color> <color=#f8f8f2>channelType</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a default ReplicationNetworkConfig instance.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return an instance of a class derived from ReplicationNetworkConfig as indicated by the</color>
<color=#75715e>   *     channelType property default.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>ReplicationNetworkConfig</color> <color=#a6e22e>createDefault</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReplicationBasicConfig</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs a basic ReplicationNetworkConfig initialized with the system default settings.</color>
<color=#75715e>   * Defaults are documented with the string constants in this class.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>ReplicationNetworkConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>props</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Properties</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs a basic ReplicationNetworkConfig initialized with the provided propeties.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param properties a set of properties which which to initialize the instance properties</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>ReplicationNetworkConfig</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color> <color=#f8f8f2>properties</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>props</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Properties</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>applyRepNetProperties</color><color=#f8f8f2>(</color><color=#f8f8f2>properties</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get the channel type setting for the replication service.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the channel type</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>String</color> <color=#a6e22e>getChannelType</color><color=#f8f8f2>();</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Get the channel logging name setting for the replication service.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the channel logging name</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getLogName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>CHANNEL_LOG_NAME</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the channel logging name to be used for replication service access.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param logName the channel logging name to be used.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   * @throws IllegalArgumentException If the value of logName is invalid.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ReplicationNetworkConfig</color> <color=#a6e22e>setLogName</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>logName</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setLogNameVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>logName</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setLogNameVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>logName</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>setVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>CHANNEL_LOG_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>logName</color><color=#f8f8f2>,</color> <color=#f8f8f2>validateParams</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden Returns name of the DataChannel factory class to be used for creating new DataChannel</color>
<color=#75715e>   *     instances</color>
<color=#75715e>   * @return the DataChannelFactory class name, if configured</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getChannelFactoryClass</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>CHANNEL_FACTORY_CLASS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden Sets the name of the DataChannelFactory class to be instantiated for creation of new</color>
<color=#75715e>   *     DataChannel instances.</color>
<color=#75715e>   * @param factoryClass the class name to use</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ReplicationNetworkConfig</color> <color=#a6e22e>setChannelFactoryClass</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>factoryClass</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setChannelFactoryClassVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>factoryClass</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setChannelFactoryClassVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>factoryClass</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>setVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>CHANNEL_FACTORY_CLASS</color><color=#f8f8f2>,</color> <color=#f8f8f2>factoryClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>validateParams</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden Returns the DataChannelFactory class parameters to be used for when instantiating the</color>
<color=#75715e>   *     DataChannelFactoryClass</color>
<color=#75715e>   * @return the parameters argument, if configured</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getChannelFactoryParams</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>getVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>CHANNEL_FACTORY_PARAMS</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden Sets the DataChannelFactory parameters to be passed when instantiating the</color>
<color=#75715e>   *     DataChannelFactoryClass.</color>
<color=#75715e>   * @param factoryParams a string encoding any parameters to be passed to the class constructor.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ReplicationNetworkConfig</color> <color=#a6e22e>setChannelFactoryParams</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>factoryParams</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>setChannelFactoryParamsVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>factoryParams</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden The void return setter for use by Bean editors. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setChannelFactoryParamsVoid</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>factoryParams</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>setVal</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>RepParams</color><color=#f8f8f2>.</color><color=#a6e22e>CHANNEL_FACTORY_PARAMS</color><color=#f8f8f2>,</color> <color=#f8f8f2>factoryParams</color><color=#f8f8f2>,</color> <color=#f8f8f2>validateParams</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Set this configuration parameter with this value. Values are validated before setting the</color>
<color=#75715e>   * parameter.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param paramName the configuration parameter name, one of the String constants in this class</color>
<color=#75715e>   * @param value the configuration value.</color>
<color=#75715e>   * @return this</color>
<color=#75715e>   * @throws IllegalArgumentException if the paramName or value is invalid, or if paramName is not a</color>
<color=#75715e>   *     parameter that applies to ReplicationNetworkConfig.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ReplicationNetworkConfig</color> <color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>paramName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isValidConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>paramName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>paramName</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>,</color> <color=#f8f8f2>validateParams</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns a copy of this configuration object. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ReplicationNetworkConfig</color> <color=#a6e22e>clone</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ReplicationNetworkConfig</color> <color=#f8f8f2>copy</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ReplicationNetworkConfig</color><color=#f8f8f2>)</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>copy</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>CloneNotSupportedException</color> <color=#f8f8f2>willNeverOccur</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden Enumerate the subset of configuration properties that are intended to control network</color>
<color=#75715e>   *     access that are specific to this class.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#a6e22e>getRepNetLocalPropertySet</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>repNetLocalProperties</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden Enumerate the subset of configuration properties that are intended to control network</color>
<color=#75715e>   *     access.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#a6e22e>getRepNetPropertySet</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>repNetLocalProperties</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repNetAllProperties</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>props</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>();</color>
        <color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>repNetLocalProperties</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicationBasicConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getRepBasicPropertySet</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>props</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>ReplicationSSLConfig</color><color=#f8f8f2>.</color><color=#a6e22e>getRepSSLPropertySet</color><color=#f8f8f2>());</color>
        <color=#75715e>/* Nail the set down */</color>
        <color=#f8f8f2>repNetAllProperties</color> <color=#f92672>=</color> <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>unmodifiableSet</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>repNetAllProperties</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden Ensure that the parameters for this and all known derived classes are registered. This</color>
<color=#75715e>   *     is called by testing code to ensure that parameter registration happens when non-standard</color>
<color=#75715e>   *     API access is used.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>registerParams</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Call for side effect */</color>
    <color=#f8f8f2>getRepNetPropertySet</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden Apply the configurations specified in sourceProps to our properties.</color>
<color=#75715e>   * @throws IllegalArgumentException if any of the contained property entries have invalid names or</color>
<color=#75715e>   *     invalid values</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>applyRepNetProperties</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color> <color=#f8f8f2>sourceProps</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f92672><</color><color=#f8f8f2>Object</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>></color> <color=#f8f8f2>propPair</color> <color=#f8f8f2>:</color> <color=#f8f8f2>sourceProps</color><color=#f8f8f2>.</color><color=#a6e22e>entrySet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>propPair</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isValidConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>propPair</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>setConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/* validateParams */</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * @hidden Apply the configurations specified in sourceProps to updateProps, effectively copying</color>
<color=#75715e>   *     the replication service access properties from the sourceProps hash. Only the source</color>
<color=#75715e>   *     properties that are applicable to a ReplicationNetworkConfig are used.</color>
<color=#75715e>   * @throws IllegalArgumentException if any of the contained property entries have invalid values</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>applyRepNetProperties</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color> <color=#f8f8f2>sourceProps</color><color=#f8f8f2>,</color> <color=#f8f8f2>Properties</color> <color=#f8f8f2>updateProps</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>repNetProps</color> <color=#f92672>=</color> <color=#f8f8f2>getRepNetPropertySet</color><color=#f8f8f2>();</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f92672><</color><color=#f8f8f2>Object</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>></color> <color=#f8f8f2>propPair</color> <color=#f8f8f2>:</color> <color=#f8f8f2>sourceProps</color><color=#f8f8f2>.</color><color=#a6e22e>entrySet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>propPair</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>repNetProps</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>propPair</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>setConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>updateProps</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/* validateParams */</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @hidden For access by ReplicationConfig and testing only */</color>
  <color=#f8f8f2>Properties</color> <color=#a6e22e>getProps</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Properties</color> <color=#f8f8f2>returnProps</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Properties</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>returnProps</color><color=#f8f8f2>.</color><color=#a6e22e>setProperty</color><color=#f8f8f2>(</color><color=#f8f8f2>CHANNEL_TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>getChannelType</color><color=#f8f8f2>());</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>returnProps</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Set this configuration parameter with this value in the specified Properties object, which is</color>
<color=#75715e>   * assumed to represent the properties that are applicable to this class. Values are validated</color>
<color=#75715e>   * before setting the parameter.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param props the Properties object to update</color>
<color=#75715e>   * @param paramName the configuration parameter name, one of the String constants in this class</color>
<color=#75715e>   * @param value the configuration value.</color>
<color=#75715e>   * @throws IllegalArgumentException if the paramName or value is invalid</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Properties</color> <color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>paramName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>value</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>validateParams</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>DbConfigManager</color><color=#f8f8f2>.</color><color=#a6e22e>setConfigParam</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>props</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>paramName</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>value</color><color=#f8f8f2>,</color>
        <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#75715e>/* require mutability. */</color>
        <color=#f8f8f2>validateParams</color><color=#f8f8f2>,</color>
        <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#75715e>/* forReplication */</color>
        <color=#66d9ef>false</color><color=#f8f8f2>);</color> <color=#75715e>/* verifyForReplication */</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Checks whether the named parameter is valid for this configuration type.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param paramName the configuration parameter name, one of the String constants in this class</color>
<color=#75715e>   * @return true if the named parameter is a valid parameter name</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isValidConfigParam</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>paramName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>repNetLocalProperties</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>paramName</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Read a properties file into a Properties object.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param propFile a file containing property settings</color>
<color=#75715e>   * @return a Properties object containing the property settings</color>
<color=#75715e>   * @throws FileNotFoundException if the file does not exist</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Properties</color> <color=#a6e22e>readProperties</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>propFile</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>propFile</color><color=#f8f8f2>.</color><color=#a6e22e>exists</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileNotFoundException</color><color=#f8f8f2>(</color><color=#e6db74>"The properties file "</color> <color=#f92672>+</color> <color=#f8f8f2>propFile</color> <color=#f92672>+</color> <color=#e6db74>" does not exist."</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>Properties</color> <color=#f8f8f2>props</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Properties</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>RepUtils</color><color=#f8f8f2>.</color><color=#a6e22e>populateNetProps</color><color=#f8f8f2>(</color><color=#f8f8f2>props</color><color=#f8f8f2>,</color> <color=#f8f8f2>propFile</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>props</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>