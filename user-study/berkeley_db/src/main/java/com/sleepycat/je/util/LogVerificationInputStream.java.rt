<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.util</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.DbInternal</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.Environment</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.EnvironmentFailureException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.EnvironmentImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LogVerifier</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.InputStream</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Verifies the checksums in an {@code InputStream} for a log file in a JE {@code Environment}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This {@code InputStream} reads input from some other given {@code InputStream}, and verifies</color>
<color=#75715e> * checksums while reading. Its primary intended use is to verify log files that are being copied as</color>
<color=#75715e> * part of a programmatic backup. It is critical that invalid files are not added to a backup set,</color>
<color=#75715e> * since then both the live environment and the backup will be invalid.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The following example verifies log files as they are being copied. The {@link DbBackup} class</color>
<color=#75715e> * should normally be used to obtain the array of files to be copied.</color>
<color=#75715e> * <!-- NOTE: Whenever the method below is changed, update the copy in</color>
<color=#75715e> * VerifyLogTest to match, so that it will be tested. --></color>
<color=#75715e> *</color>
<color=#75715e> * <pre></color>
<color=#75715e> *  void copyFiles(final Environment env,</color>
<color=#75715e> *                 final String[] fileNames,</color>
<color=#75715e> *                 final File destDir,</color>
<color=#75715e> *                 final int bufSize)</color>
<color=#75715e> *      throws IOException, DatabaseException {</color>
<color=#75715e> *</color>
<color=#75715e> *      final File srcDir = env.getHome();</color>
<color=#75715e> *</color>
<color=#75715e> *      for (final String fileName : fileNames) {</color>
<color=#75715e> *</color>
<color=#75715e> *          final File destFile = new File(destDir, fileName);</color>
<color=#75715e> *          final FileOutputStream fos = new FileOutputStream(destFile);</color>
<color=#75715e> *</color>
<color=#75715e> *          final File srcFile = new File(srcDir, fileName);</color>
<color=#75715e> *          final FileInputStream fis = new FileInputStream(srcFile);</color>
<color=#75715e> *          final LogVerificationInputStream vis =</color>
<color=#75715e> *              new LogVerificationInputStream(env, fis, fileName);</color>
<color=#75715e> *</color>
<color=#75715e> *          final byte[] buf = new byte[bufSize];</color>
<color=#75715e> *</color>
<color=#75715e> *          try {</color>
<color=#75715e> *              while (true) {</color>
<color=#75715e> *                  final int len = vis.read(buf);</color>
<color=#75715e> *                  if (len &lt; 0) {</color>
<color=#75715e> *                      break;</color>
<color=#75715e> *                  }</color>
<color=#75715e> *                  fos.write(buf, 0, len);</color>
<color=#75715e> *              }</color>
<color=#75715e> *          } finally {</color>
<color=#75715e> *              fos.close();</color>
<color=#75715e> *              vis.close();</color>
<color=#75715e> *          }</color>
<color=#75715e> *      }</color>
<color=#75715e> *  }</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>It is important to read the entire underlying input stream until the end-of-file is reached to</color>
<color=#75715e> * detect incomplete entries at the end of the log file.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that {@code mark} and {@code reset} are not supported and {@code markSupported} returns</color>
<color=#75715e> * false. The default {@link InputStream} implementation of these methods is used.</color>
<color=#75715e> *</color>
<color=#75715e> * @see DbBackup</color>
<color=#75715e> * @see DbVerifyLog</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>LogVerificationInputStream</color> <color=#66d9ef>extends</color> <color=#f8f8f2>InputStream</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SKIP_BUF_SIZE</color> <color=#f92672>=</color> <color=#ae81ff>2048</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>InputStream</color> <color=#f8f8f2>in</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LogVerifier</color> <color=#f8f8f2>verifier</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>skipBuf</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Creates a verification input stream.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param env the {@code Environment} associated with the log.</color>
<color=#75715e>   * @param in the underlying {@code InputStream} for the log to be read.</color>
<color=#75715e>   * @param fileName the file name of the input stream, for reporting in the {@code</color>
<color=#75715e>   *     LogVerificationException}. This should be a simple file name of the form {@code</color>
<color=#75715e>   *     NNNNNNNN.jdb}, where NNNNNNNN is the file number in hexadecimal format.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>LogVerificationInputStream</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Environment</color> <color=#f8f8f2>env</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>InputStream</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getNonNullEnvImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>env</color><color=#f8f8f2>),</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1L</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Internal constructor. If fileNum is less than zero, it is derived from fileName. */</color>
  <color=#f8f8f2>LogVerificationInputStream</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>InputStream</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>verifier</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LogVerifier</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileNum</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>in</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@inheritDoc}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method reads the underlying {@code InputStream} and verifies the contents of the</color>
<color=#75715e>   * stream.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws LogVerificationException if a checksum cannot be verified or a log entry is determined</color>
<color=#75715e>   *     to be invalid by examining its contents.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * This method will rarely, if ever, be called when reading a file, so</color>
<color=#75715e>     * allocating a new byte array is not a performance issue and is the</color>
<color=#75715e>     * simplest approach.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lenRead</color> <color=#f92672>=</color> <color=#f8f8f2>read</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>lenRead</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>lenRead</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@inheritDoc}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method reads the underlying {@code InputStream} and verifies the contents of the</color>
<color=#75715e>   * stream.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws LogVerificationException if a checksum cannot be verified or a log entry is determined</color>
<color=#75715e>   *     to be invalid by examining its contents.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>read</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@inheritDoc}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method reads the underlying {@code InputStream} and verifies the contents of the</color>
<color=#75715e>   * stream.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws LogVerificationException if a checksum cannot be verified or a log entry is determined</color>
<color=#75715e>   *     to be invalid by examining its contents.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lenRead</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lenRead</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lenRead</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>verifier</color><color=#f8f8f2>.</color><color=#a6e22e>verifyAtEof</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>lenRead</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>verifier</color><color=#f8f8f2>.</color><color=#a6e22e>verify</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>lenRead</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>lenRead</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@inheritDoc}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method reads the underlying {@code InputStream} in order to skip the required number of</color>
<color=#75715e>   * bytes and verifies the contents of the stream. A temporary buffer is allocated lazily for</color>
<color=#75715e>   * reading.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws LogVerificationException if a checksum cannot be verified or a log entry is determined</color>
<color=#75715e>   *     to be invalid by examining its contents.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>skip</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>bytesToSkip</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bytesToSkip</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Like InputStream.skip, we lazily allocate a skip buffer.  We must</color>
<color=#75715e>     * read the data in order to validate the checksum.  Unlike the</color>
<color=#75715e>     * InputStream.skip implementation, we cannot use a static buffer</color>
<color=#75715e>     * because we do process the data and cannot allow multiple threads to</color>
<color=#75715e>     * share the same buffer.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>skipBuf</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>skipBuf</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>SKIP_BUF_SIZE</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>remaining</color> <color=#f92672>=</color> <color=#f8f8f2>bytesToSkip</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>remaining</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lenRead</color> <color=#f92672>=</color> <color=#f8f8f2>read</color><color=#f8f8f2>(</color><color=#f8f8f2>skipBuf</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>SKIP_BUF_SIZE</color><color=#f8f8f2>,</color> <color=#f8f8f2>remaining</color><color=#f8f8f2>));</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lenRead</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>remaining</color> <color=#f92672>-=</color> <color=#f8f8f2>lenRead</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>bytesToSkip</color> <color=#f92672>-</color> <color=#f8f8f2>remaining</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@inheritDoc}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method simply performs <code>in.available()</code>.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>available</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>available</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * {@inheritDoc}</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method simply performs {@code in.close()}.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>