<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.txn</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.MemoryBudget</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>

<color=#75715e>/** A Lock embodies the lock state of a LSN. It includes a set of owners and a list of waiters. */</color>
<color=#66d9ef>public</color> <color=#75715e>// for Sizeof</color>
<color=#66d9ef>class</color> <color=#a6e22e>LockImpl</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>{</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>REMOVE_LOCKINFO_OVERHEAD</color> <color=#f92672>=</color> <color=#ae81ff>0</color> <color=#f92672>-</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>LOCKINFO_OVERHEAD</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A single locker always appears only once in the logical set of owners. The owners set is always</color>
<color=#75715e>   * in one of the following states.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>1- Empty 2- A single writer 3- One or more readers 4- Multiple writers or a mix of readers</color>
<color=#75715e>   * and writers, all for txns which share locks (all ThreadLocker instances for the same thread)</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Both ownerSet and waiterList are a collection of LockInfo. Since the common case is that</color>
<color=#75715e>   * there is only one owner or waiter, we have added an optimization to avoid the cost of</color>
<color=#75715e>   * collections. FirstOwner and firstWaiter are used for the first owner or waiter of the lock, and</color>
<color=#75715e>   * the corresponding collection is instantiated and used only if more owners arrive.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>In terms of memory accounting, we count up the cost of each added or removed LockInfo, but</color>
<color=#75715e>   * not the cost of the HashSet/List entry overhead. We could do the latter for more precise</color>
<color=#75715e>   * accounting.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>firstOwner</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>ownerSet</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>firstWaiter</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>waiterList</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Create a Lock. */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>LockImpl</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/* Used when releasing lock. */</color>
  <color=#f8f8f2>LockImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>LockImpl</color> <color=#f8f8f2>lock</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>firstOwner</color> <color=#f92672>=</color> <color=#f8f8f2>lock</color><color=#f8f8f2>.</color><color=#a6e22e>firstOwner</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>ownerSet</color> <color=#f92672>=</color> <color=#f8f8f2>lock</color><color=#f8f8f2>.</color><color=#a6e22e>ownerSet</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>firstWaiter</color> <color=#f92672>=</color> <color=#f8f8f2>lock</color><color=#f8f8f2>.</color><color=#a6e22e>firstWaiter</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>waiterList</color> <color=#f92672>=</color> <color=#f8f8f2>lock</color><color=#f8f8f2>.</color><color=#a6e22e>waiterList</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/* Used when mutating from a ThinLockImpl to a LockImpl. */</color>
  <color=#f8f8f2>LockImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>LockInfo</color> <color=#f8f8f2>firstOwner</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>firstOwner</color> <color=#f92672>=</color> <color=#f8f8f2>firstOwner</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The first waiter goes into the firstWaiter member variable. Once the waiterList is made, all</color>
<color=#75715e>   * appended waiters go into waiterList, even after the firstWaiter goes away and leaves that field</color>
<color=#75715e>   * null, so as to leave the list ordered.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>addWaiterToEndOfList</color><color=#f8f8f2>(</color><color=#f8f8f2>LockInfo</color> <color=#f8f8f2>waiter</color><color=#f8f8f2>,</color> <color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>mb</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Careful: order important! */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>waiterList</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstWaiter</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>firstWaiter</color> <color=#f92672>=</color> <color=#f8f8f2>waiter</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>waiterList</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color><color=#f8f8f2>();</color>
        <color=#f8f8f2>waiterList</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>waiter</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>waiterList</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>waiter</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>mb</color><color=#f8f8f2>.</color><color=#a6e22e>updateLockMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>LOCKINFO_OVERHEAD</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Add this waiter to the front of the list. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>addWaiterToHeadOfList</color><color=#f8f8f2>(</color><color=#f8f8f2>LockInfo</color> <color=#f8f8f2>waiter</color><color=#f8f8f2>,</color> <color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>mb</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Shuffle the current first waiter down a slot. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstWaiter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>waiterList</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>waiterList</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>waiterList</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>firstWaiter</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>firstWaiter</color> <color=#f92672>=</color> <color=#f8f8f2>waiter</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>mb</color><color=#f8f8f2>.</color><color=#a6e22e>updateLockMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>LOCKINFO_OVERHEAD</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Get a list of waiters for debugging and error messages. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#a6e22e>getWaitersListClone</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>dumpWaiters</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstWaiter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dumpWaiters</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>firstWaiter</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>waiterList</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dumpWaiters</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>waiterList</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>dumpWaiters</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Remove this locker from the waiter list. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>flushWaiter</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>mb</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>firstWaiter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstWaiter</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>locker</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>firstWaiter</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>mb</color><color=#f8f8f2>.</color><color=#a6e22e>updateLockMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>REMOVE_LOCKINFO_OVERHEAD</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>waiterList</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>waiterList</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>mb</color><color=#f8f8f2>.</color><color=#a6e22e>updateLockMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>REMOVE_LOCKINFO_OVERHEAD</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>
          <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>addOwner</color><color=#f8f8f2>(</color><color=#f8f8f2>LockInfo</color> <color=#f8f8f2>newLock</color><color=#f8f8f2>,</color> <color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>mb</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstOwner</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>firstOwner</color> <color=#f92672>=</color> <color=#f8f8f2>newLock</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ownerSet</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ownerSet</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>ownerSet</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>newLock</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>mb</color><color=#f8f8f2>.</color><color=#a6e22e>updateLockMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>LOCKINFO_OVERHEAD</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Get a new Set of the owners. */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#a6e22e>getOwnersClone</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* No need to update memory usage, the returned Set is transient. */</color>
    <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>owners</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ownerSet</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>owners</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>ownerSet</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>owners</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstOwner</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>owners</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>firstOwner</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>owners</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Remove this LockInfo from the owner set and clear its memory budget. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>flushOwner</color><color=#f8f8f2>(</color><color=#f8f8f2>LockInfo</color> <color=#f8f8f2>oldOwner</color><color=#f8f8f2>,</color> <color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>mb</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>removed</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldOwner</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstOwner</color> <color=#f92672>==</color> <color=#f8f8f2>oldOwner</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>firstOwner</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>removed</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ownerSet</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>removed</color> <color=#f92672>=</color> <color=#f8f8f2>ownerSet</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>oldOwner</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>removed</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mb</color><color=#f8f8f2>.</color><color=#a6e22e>updateLockMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>REMOVE_LOCKINFO_OVERHEAD</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>removed</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Remove this locker from the owner set. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>LockInfo</color> <color=#a6e22e>flushOwner</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>mb</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>flushedInfo</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>firstOwner</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstOwner</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>locker</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>flushedInfo</color> <color=#f92672>=</color> <color=#f8f8f2>firstOwner</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>firstOwner</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ownerSet</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>ownerSet</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>o</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>flushedInfo</color> <color=#f92672>=</color> <color=#f8f8f2>o</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>flushedInfo</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mb</color><color=#f8f8f2>.</color><color=#a6e22e>updateLockMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>REMOVE_LOCKINFO_OVERHEAD</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>flushedInfo</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the owner LockInfo for a locker, or null if locker is not an owner. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>LockInfo</color> <color=#a6e22e>getOwnerLockInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>firstOwner</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstOwner</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>locker</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>firstOwner</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ownerSet</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>ownerSet</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>o</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>o</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Return true if locker is an owner of this Lock for lockType, false otherwise. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isOwner</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>lockType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>o</color> <color=#f92672>=</color> <color=#f8f8f2>getOwnerLockInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>o</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>o</color><color=#f8f8f2>.</color><color=#a6e22e>getLockType</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>lockType</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Return true if locker is an owner of this Lock and this is a write lock. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isOwnedWriteLock</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>o</color> <color=#f92672>=</color> <color=#f8f8f2>getOwnerLockInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>o</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>o</color><color=#f8f8f2>.</color><color=#a6e22e>getLockType</color><color=#f8f8f2>().</color><color=#a6e22e>isWriteLock</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>LockType</color> <color=#a6e22e>getOwnedLockType</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>o</color> <color=#f92672>=</color> <color=#f8f8f2>getOwnerLockInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>o</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>o</color><color=#f8f8f2>.</color><color=#a6e22e>getLockType</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return true if locker is a waiter on this Lock.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method is only used by unit tests.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isWaiter</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstWaiter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstWaiter</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>waiterList</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>waiterList</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>nWaiters</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstWaiter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>count</color><color=#f92672>++</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>waiterList</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>count</color> <color=#f92672>+=</color> <color=#f8f8f2>waiterList</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>nOwners</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstOwner</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>count</color><color=#f92672>++</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ownerSet</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>count</color> <color=#f92672>+=</color> <color=#f8f8f2>ownerSet</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Attempts to acquire the lock and returns the LockGrantType.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Assumes we hold the lockTableLatch when entering this method.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>LockAttemptResult</color> <color=#a6e22e>lock</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>LockType</color> <color=#f8f8f2>requestType</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>nonBlockingRequest</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>jumpAheadOfWaiters</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>mb</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>validateRequest</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>);</color> <color=#75715e>// intentional side effect</color>

    <color=#75715e>/* Request an ordinary lock by checking the owners list. */</color>
    <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>newLock</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LockInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>requestType</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>LockGrantType</color> <color=#f8f8f2>grant</color> <color=#f92672>=</color>
        <color=#f8f8f2>tryLock</color><color=#f8f8f2>(</color><color=#f8f8f2>newLock</color><color=#f8f8f2>,</color> <color=#f8f8f2>jumpAheadOfWaiters</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>nWaiters</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>),</color> <color=#f8f8f2>mb</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Do we have to wait for this lock? */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>grant</color> <color=#f92672>==</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>WAIT_NEW</color>
        <color=#f92672>||</color> <color=#f8f8f2>grant</color> <color=#f92672>==</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>WAIT_PROMOTION</color>
        <color=#f92672>||</color> <color=#f8f8f2>grant</color> <color=#f92672>==</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>WAIT_RESTART</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If the request type can cause a restart and a restart conflict</color>
<color=#75715e>       * does not already exist, then we have to check the waiters list</color>
<color=#75715e>       * for restart conflicts.  A restart conflict must take precedence</color>
<color=#75715e>       * or it may be missed.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>requestType</color><color=#f8f8f2>.</color><color=#a6e22e>getCausesRestart</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>grant</color> <color=#f92672>!=</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>WAIT_RESTART</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>waiter</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>waiterList</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>waiterList</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstWaiter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>waiter</color> <color=#f92672>=</color> <color=#f8f8f2>firstWaiter</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>iter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>waiter</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>waiter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

          <color=#75715e>/*</color>
<color=#75715e>           * Check for a restart conflict.  Ignore LockType.RESTART</color>
<color=#75715e>           * in the waiter list when checking for conflicts.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>Locker</color> <color=#f8f8f2>waiterLocker</color> <color=#f92672>=</color> <color=#f8f8f2>waiter</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>LockType</color> <color=#f8f8f2>waiterType</color> <color=#f92672>=</color> <color=#f8f8f2>waiter</color><color=#f8f8f2>.</color><color=#a6e22e>getLockType</color><color=#f8f8f2>();</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>waiterType</color> <color=#f92672>!=</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>RESTART</color>
              <color=#f92672>&&</color> <color=#f8f8f2>locker</color> <color=#f92672>!=</color> <color=#f8f8f2>waiterLocker</color>
              <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>sharesLocksWith</color><color=#f8f8f2>(</color><color=#f8f8f2>waiterLocker</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>LockConflict</color> <color=#f8f8f2>conflict</color> <color=#f92672>=</color> <color=#f8f8f2>waiterType</color><color=#f8f8f2>.</color><color=#a6e22e>getConflict</color><color=#f8f8f2>(</color><color=#f8f8f2>requestType</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>conflict</color><color=#f8f8f2>.</color><color=#a6e22e>getRestart</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>grant</color> <color=#f92672>=</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>WAIT_RESTART</color><color=#f8f8f2>;</color>
              <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>

          <color=#75715e>/* Move to the next waiter, if it's in the list. */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>iter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>waiter</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>waiter</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Add the waiter or deny the lock as appropriate. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nonBlockingRequest</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>grant</color> <color=#f92672>=</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>DENIED</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>grant</color> <color=#f92672>==</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>WAIT_PROMOTION</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/*</color>
<color=#75715e>           * By moving our waiter to the top of the list we reduce</color>
<color=#75715e>           * the time window where deadlocks can occur due to the</color>
<color=#75715e>           * promotion.</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>addWaiterToHeadOfList</color><color=#f8f8f2>(</color><color=#f8f8f2>newLock</color><color=#f8f8f2>,</color> <color=#f8f8f2>mb</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>assert</color> <color=#f8f8f2>grant</color> <color=#f92672>==</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>WAIT_NEW</color> <color=#f92672>||</color> <color=#f8f8f2>grant</color> <color=#f92672>==</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>WAIT_RESTART</color><color=#f8f8f2>;</color>

          <color=#75715e>/*</color>
<color=#75715e>           * If waiting to restart, change the lock type to RESTART</color>
<color=#75715e>           * to avoid granting the lock later.  We wait until the</color>
<color=#75715e>           * RESTART waiter moves to the head of waiter list to</color>
<color=#75715e>           * prevent the requester from spinning performing repeated</color>
<color=#75715e>           * restarts, but we don't grant the lock.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>grant</color> <color=#f92672>==</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>WAIT_RESTART</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>newLock</color><color=#f8f8f2>.</color><color=#a6e22e>setLockType</color><color=#f8f8f2>(</color><color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>RESTART</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>

          <color=#f8f8f2>addWaiterToEndOfList</color><color=#f8f8f2>(</color><color=#f8f8f2>newLock</color><color=#f8f8f2>,</color> <color=#f8f8f2>mb</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Set 'success' later. */</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>LockAttemptResult</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>grant</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Releases a lock and moves the next waiter(s) to the owners.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return null if we were not the owner, a non-empty set if owners should be notified after</color>
<color=#75715e>   *     releasing, an empty set if no notification is required.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Locker</color><color=#f92672>></color> <color=#a6e22e>release</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>mb</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>removedLock</color> <color=#f92672>=</color> <color=#f8f8f2>flushOwner</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>mb</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>removedLock</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Not owner. */</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Locker</color><color=#f92672>></color> <color=#f8f8f2>lockersToNotify</color> <color=#f92672>=</color> <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>emptySet</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nWaiters</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* No more waiters, so no one to notify. */</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>lockersToNotify</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Move the next set of waiters to the owners set. Iterate through the</color>
<color=#75715e>     * firstWaiter field, then the waiterList.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>waiter</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>isFirstWaiter</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>waiterList</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>waiterList</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstWaiter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>waiter</color> <color=#f92672>=</color> <color=#f8f8f2>firstWaiter</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>isFirstWaiter</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>iter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>waiter</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>waiter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Make the waiter an owner if the lock can be acquired. */</color>
      <color=#f8f8f2>LockType</color> <color=#f8f8f2>waiterType</color> <color=#f92672>=</color> <color=#f8f8f2>waiter</color><color=#f8f8f2>.</color><color=#a6e22e>getLockType</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>waiterLocker</color> <color=#f92672>=</color> <color=#f8f8f2>waiter</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>LockGrantType</color> <color=#f8f8f2>grant</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>waiterType</color> <color=#f92672>==</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>RESTART</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Special case for restarts: see rangeInsertConflict. */</color>
        <color=#f8f8f2>grant</color> <color=#f92672>=</color> <color=#f8f8f2>rangeInsertConflict</color><color=#f8f8f2>(</color><color=#f8f8f2>waiterLocker</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>WAIT_NEW</color> <color=#f8f8f2>:</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>NEW</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Try locking. */</color>
        <color=#f8f8f2>grant</color> <color=#f92672>=</color> <color=#f8f8f2>tryLock</color><color=#f8f8f2>(</color><color=#f8f8f2>waiter</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>mb</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#75715e>/* Check if granted. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>grant</color> <color=#f92672>==</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>NEW</color>
          <color=#f92672>||</color> <color=#f8f8f2>grant</color> <color=#f92672>==</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>EXISTING</color>
          <color=#f92672>||</color> <color=#f8f8f2>grant</color> <color=#f92672>==</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>PROMOTION</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Remove it from the waiters list. */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isFirstWaiter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>firstWaiter</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockersToNotify</color> <color=#f92672>==</color> <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>EMPTY_SET</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>lockersToNotify</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>Locker</color><color=#f92672>></color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>lockersToNotify</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>waiterLocker</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>mb</color><color=#f8f8f2>.</color><color=#a6e22e>updateLockMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>REMOVE_LOCKINFO_OVERHEAD</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>grant</color> <color=#f92672>==</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>WAIT_NEW</color>
            <color=#f92672>||</color> <color=#f8f8f2>grant</color> <color=#f92672>==</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>WAIT_PROMOTION</color>
            <color=#f92672>||</color> <color=#f8f8f2>grant</color> <color=#f92672>==</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>WAIT_RESTART</color><color=#f8f8f2>;</color>
        <color=#75715e>/* Stop on first waiter that cannot be an owner. */</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Move to the next waiter, if it's in the list. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>iter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>waiter</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>isFirstWaiter</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>waiter</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lockersToNotify</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>stealLock</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>mb</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstOwner</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>thisLocker</color> <color=#f92672>=</color> <color=#f8f8f2>firstOwner</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>thisLocker</color> <color=#f92672>!=</color> <color=#f8f8f2>locker</color> <color=#f92672>&&</color> <color=#f8f8f2>thisLocker</color><color=#f8f8f2>.</color><color=#a6e22e>getPreemptable</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>thisLocker</color><color=#f8f8f2>.</color><color=#a6e22e>setPreempted</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>firstOwner</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>mb</color><color=#f8f8f2>.</color><color=#a6e22e>updateLockMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>REMOVE_LOCKINFO_OVERHEAD</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ownerSet</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>ownerSet</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>lockInfo</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>Locker</color> <color=#f8f8f2>thisLocker</color> <color=#f92672>=</color> <color=#f8f8f2>lockInfo</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>thisLocker</color> <color=#f92672>!=</color> <color=#f8f8f2>locker</color> <color=#f92672>&&</color> <color=#f8f8f2>thisLocker</color><color=#f8f8f2>.</color><color=#a6e22e>getPreemptable</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>thisLocker</color><color=#f8f8f2>.</color><color=#a6e22e>setPreempted</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>mb</color><color=#f8f8f2>.</color><color=#a6e22e>updateLockMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>REMOVE_LOCKINFO_OVERHEAD</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called from lock() to try locking a new request, and from release() to try locking a waiting</color>
<color=#75715e>   * request.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param newLock is the lock that is requested.</color>
<color=#75715e>   * @param firstWaiterInLine determines whether to grant the lock when a NEW lock can be granted,</color>
<color=#75715e>   *     but other non-conflicting owners exist; for example, when a new READ lock is requested but</color>
<color=#75715e>   *     READ locks are held by other owners. This parameter should be true if the requestor is the</color>
<color=#75715e>   *     first waiter in line (or if there are no waiters), and false otherwise.</color>
<color=#75715e>   * @param mb is the current memory budget.</color>
<color=#75715e>   * @return LockGrantType.EXISTING, NEW, PROMOTION, WAIT_RESTART, WAIT_NEW or WAIT_PROMOTION.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>LockGrantType</color> <color=#a6e22e>tryLock</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>newLock</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>firstWaiterInLine</color><color=#f8f8f2>,</color> <color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>mb</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* If no one owns this right now, just grab it. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nOwners</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>addOwner</color><color=#f8f8f2>(</color><color=#f8f8f2>newLock</color><color=#f8f8f2>,</color> <color=#f8f8f2>mb</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>NEW</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color> <color=#f92672>=</color> <color=#f8f8f2>newLock</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>LockType</color> <color=#f8f8f2>requestType</color> <color=#f92672>=</color> <color=#f8f8f2>newLock</color><color=#f8f8f2>.</color><color=#a6e22e>getLockType</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>LockUpgrade</color> <color=#f8f8f2>upgrade</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>lockToUpgrade</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>ownerExists</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>ownerConflicts</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Iterate through the current owners. See if there is a current owner</color>
<color=#75715e>     * who has to be upgraded from read to write. Also track whether there</color>
<color=#75715e>     * is a conflict with another owner.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>owner</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ownerSet</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>ownerSet</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstOwner</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>owner</color> <color=#f92672>=</color> <color=#f8f8f2>firstOwner</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>iter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>owner</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>owner</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>ownerLocker</color> <color=#f92672>=</color> <color=#f8f8f2>owner</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>LockType</color> <color=#f8f8f2>ownerType</color> <color=#f92672>=</color> <color=#f8f8f2>owner</color><color=#f8f8f2>.</color><color=#a6e22e>getLockType</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>locker</color> <color=#f92672>==</color> <color=#f8f8f2>ownerLocker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Requestor currently holds this lock: check for upgrades.</color>
<color=#75715e>         * If no type change is needed, return EXISTING now to avoid</color>
<color=#75715e>         * iterating further; otherwise, we need to check for conflicts</color>
<color=#75715e>         * before granting the upgrade.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>upgrade</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color> <color=#75715e>// An owner should appear only once</color>
        <color=#f8f8f2>upgrade</color> <color=#f92672>=</color> <color=#f8f8f2>ownerType</color><color=#f8f8f2>.</color><color=#a6e22e>getUpgrade</color><color=#f8f8f2>(</color><color=#f8f8f2>requestType</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>upgrade</color><color=#f8f8f2>.</color><color=#a6e22e>getUpgrade</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>EXISTING</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>lockToUpgrade</color> <color=#f92672>=</color> <color=#f8f8f2>owner</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Requestor does not hold this lock: check for conflicts.</color>
<color=#75715e>         * If the owner shares locks with the requestor, ignore it;</color>
<color=#75715e>         * otherwise, if a restart conflict exists, return it now;</color>
<color=#75715e>         * otherwise, save the conflict information.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>sharesLocksWith</color><color=#f8f8f2>(</color><color=#f8f8f2>ownerLocker</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>ownerLocker</color><color=#f8f8f2>.</color><color=#a6e22e>sharesLocksWith</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>LockConflict</color> <color=#f8f8f2>conflict</color> <color=#f92672>=</color> <color=#f8f8f2>ownerType</color><color=#f8f8f2>.</color><color=#a6e22e>getConflict</color><color=#f8f8f2>(</color><color=#f8f8f2>requestType</color><color=#f8f8f2>);</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>conflict</color><color=#f8f8f2>.</color><color=#a6e22e>getRestart</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>WAIT_RESTART</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>conflict</color><color=#f8f8f2>.</color><color=#a6e22e>getAllowed</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>ownerConflicts</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>ownerExists</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Move on to the next owner. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>iter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>owner</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>owner</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Now handle the upgrade or conflict as appropriate. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>upgrade</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* The requestor holds this lock. */</color>
      <color=#f8f8f2>LockType</color> <color=#f8f8f2>upgradeType</color> <color=#f92672>=</color> <color=#f8f8f2>upgrade</color><color=#f8f8f2>.</color><color=#a6e22e>getUpgrade</color><color=#f8f8f2>();</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>upgradeType</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>ownerConflicts</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* No conflict: grant the upgrade.  */</color>
        <color=#f8f8f2>lockToUpgrade</color><color=#f8f8f2>.</color><color=#a6e22e>setLockType</color><color=#f8f8f2>(</color><color=#f8f8f2>upgradeType</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>upgrade</color><color=#f8f8f2>.</color><color=#a6e22e>getPromotion</color><color=#f8f8f2>()</color> <color=#f92672>?</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>PROMOTION</color> <color=#f8f8f2>:</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>EXISTING</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Upgrade cannot be granted at this time. */</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>WAIT_PROMOTION</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* The requestor doesn't hold this lock. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>ownerConflicts</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>ownerExists</color> <color=#f92672>||</color> <color=#f8f8f2>firstWaiterInLine</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* No conflict: grant the lock. */</color>
        <color=#f8f8f2>addOwner</color><color=#f8f8f2>(</color><color=#f8f8f2>newLock</color><color=#f8f8f2>,</color> <color=#f8f8f2>mb</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>NEW</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Lock cannot be granted at this time. */</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>WAIT_NEW</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Called from release() when a RESTART request is waiting to determine if any RANGE_INSERT owners</color>
<color=#75715e>   * exist. We can't call tryLock for a RESTART lock because it must never be granted.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>rangeInsertConflict</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>waiterLocker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>owner</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ownerSet</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>ownerSet</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstOwner</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>owner</color> <color=#f92672>=</color> <color=#f8f8f2>firstOwner</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>iter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>owner</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>owner</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>ownerLocker</color> <color=#f92672>=</color> <color=#f8f8f2>owner</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ownerLocker</color> <color=#f92672>!=</color> <color=#f8f8f2>waiterLocker</color>
          <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>ownerLocker</color><color=#f8f8f2>.</color><color=#a6e22e>sharesLocksWith</color><color=#f8f8f2>(</color><color=#f8f8f2>waiterLocker</color><color=#f8f8f2>)</color>
          <color=#f92672>&&</color> <color=#f8f8f2>owner</color><color=#f8f8f2>.</color><color=#a6e22e>getLockType</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>RANGE_INSERT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Move on to the next owner. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>iter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>owner</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>owner</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Downgrade a write lock to a read lock. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>demote</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>owner</color> <color=#f92672>=</color> <color=#f8f8f2>getOwnerLockInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>owner</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>LockType</color> <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>owner</color><color=#f8f8f2>.</color><color=#a6e22e>getLockType</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>isWriteLock</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>owner</color><color=#f8f8f2>.</color><color=#a6e22e>setLockType</color><color=#f8f8f2>((</color><color=#f8f8f2>type</color> <color=#f92672>==</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>RANGE_WRITE</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>RANGE_READ</color> <color=#f8f8f2>:</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>READ</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return the locker that has a write ownership on this lock. If no write owner exists, return</color>
<color=#75715e>   * null.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Locker</color> <color=#a6e22e>getWriteOwnerLocker</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>owner</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ownerSet</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>ownerSet</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstOwner</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>owner</color> <color=#f92672>=</color> <color=#f8f8f2>firstOwner</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>iter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>owner</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>owner</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Return locker if it owns a write lock. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>owner</color><color=#f8f8f2>.</color><color=#a6e22e>getLockType</color><color=#f8f8f2>().</color><color=#a6e22e>isWriteLock</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>owner</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Move on to the next owner. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>iter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>owner</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>owner</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Debugging aid, validation before a lock request. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>validateRequest</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstWaiter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>firstWaiter</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>locker</color> <color=#f8f8f2>:</color> <color=#e6db74>"locker "</color> <color=#f92672>+</color> <color=#f8f8f2>locker</color> <color=#f92672>+</color> <color=#e6db74>" is already on waiters list."</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>waiterList</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>waiterList</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>o</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
          <color=#66d9ef>assert</color> <color=#f8f8f2>o</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>locker</color> <color=#f8f8f2>:</color> <color=#e6db74>"locker "</color> <color=#f92672>+</color> <color=#f8f8f2>locker</color> <color=#f92672>+</color> <color=#e6db74>" is already on waiters list."</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isThin</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Debug dumper. */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" LockAddr:"</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>identityHashCode</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" Owners:"</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nOwners</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" (none)"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstOwner</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>firstOwner</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ownerSet</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>ownerSet</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" Waiters:"</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nWaiters</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" (none)"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getWaitersListClone</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>