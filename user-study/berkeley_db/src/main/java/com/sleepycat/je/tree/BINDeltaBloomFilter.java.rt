<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.tree</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.MemoryBudget</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.LogUtils</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteBuffer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Random</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A Bloom filter implementation, highly specialized for use in BIN deltas. Both space and</color>
<color=#75715e> * computation times are minimized, with a potential small loss in accuracy.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>A nice introduction to bloom filters can be found here:</color>
<color=#75715e> * http://en.wikipedia.org/wiki/Bloom_filter</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>BINDeltaBloomFilter</color> <color=#f8f8f2>{</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Used to optimize creation of the bloom filter: Lets us avoid repeated</color>
<color=#75715e>   * (per key) hashing of the key prefix and repeated allocations of the</color>
<color=#75715e>   * RNG and the hashes array.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>HashContext</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>hashes</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Random</color> <color=#f8f8f2>rng</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#f8f8f2>initFNVvalue</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>HashContext</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>hashes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>BINDeltaBloomFilter</color><color=#f8f8f2>.</color><color=#a6e22e>K</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>rng</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Random</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>initFNVvalue</color> <color=#f92672>=</color> <color=#f8f8f2>BINDeltaBloomFilter</color><color=#f8f8f2>.</color><color=#a6e22e>FNVOffsetBasis</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>void</color> <color=#a6e22e>hashKeyPrefix</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>prefix</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>initFNVvalue</color> <color=#f92672>=</color> <color=#f8f8f2>BINDeltaBloomFilter</color><color=#f8f8f2>.</color><color=#a6e22e>hashFNV</color><color=#f8f8f2>(</color><color=#f8f8f2>prefix</color><color=#f8f8f2>,</color> <color=#f8f8f2>initFNVvalue</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Params for the Fowler-Noll-Vo (FNV) hash function</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>FNVOffsetBasis</color> <color=#f92672>=</color> <color=#ae81ff>2166136261L</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>FNVPrime</color> <color=#f92672>=</color> <color=#ae81ff>16777619L</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The m/n ratio, where m is the number of bits used by the bloom filter</color>
<color=#75715e>   * and n is the number of keys in the set represented by the bloom filter.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>M_N_RATIO</color> <color=#f92672>=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The number of hash values to generate per key, when a key is added to</color>
<color=#75715e>   * the filter or when the key's membership is tested.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>K</color> <color=#f92672>=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Add the given key to the given bloom filter</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bf</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>HashContext</color> <color=#f8f8f2>hc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>hash</color><color=#f8f8f2>(</color><color=#f8f8f2>bf</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>hc</color><color=#f8f8f2>);</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color> <color=#f8f8f2>:</color> <color=#f8f8f2>hc</color><color=#f8f8f2>.</color><color=#a6e22e>hashes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>setBit</color><color=#f8f8f2>(</color><color=#f8f8f2>bf</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Test set membership for the given key</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bf</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>HashContext</color> <color=#f8f8f2>hc</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashContext</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>hash</color><color=#f8f8f2>(</color><color=#f8f8f2>bf</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>hc</color><color=#f8f8f2>);</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>idx</color> <color=#f8f8f2>:</color> <color=#f8f8f2>hc</color><color=#f8f8f2>.</color><color=#a6e22e>hashes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>getBit</color><color=#f8f8f2>(</color><color=#f8f8f2>bf</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Generate K hash values for the given key</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>hash</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bf</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>HashContext</color> <color=#f8f8f2>hc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>K</color> <color=#f92672>==</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>hc</color><color=#f8f8f2>.</color><color=#a6e22e>hashes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#f8f8f2>K</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>hc</color><color=#f8f8f2>.</color><color=#a6e22e>rng</color><color=#f8f8f2>.</color><color=#a6e22e>setSeed</color><color=#f8f8f2>(</color><color=#f8f8f2>hashFNV</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>hc</color><color=#f8f8f2>.</color><color=#a6e22e>initFNVvalue</color><color=#f8f8f2>));</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>numBits</color> <color=#f92672>=</color> <color=#f8f8f2>bf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>*</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>numBits</color> <color=#f92672><=</color> <color=#ae81ff>1024</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>hash</color> <color=#f92672>=</color> <color=#f8f8f2>hc</color><color=#f8f8f2>.</color><color=#a6e22e>rng</color><color=#f8f8f2>.</color><color=#a6e22e>nextInt</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>hc</color><color=#f8f8f2>.</color><color=#a6e22e>hashes</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>hash</color> <color=#f92672>&</color> <color=#ae81ff>0x000003FF</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#f8f8f2>numBits</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>hash</color> <color=#f92672>=</color> <color=#f8f8f2>hash</color> <color=#f92672>>></color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>hc</color><color=#f8f8f2>.</color><color=#a6e22e>hashes</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>hash</color> <color=#f92672>&</color> <color=#ae81ff>0x000003FF</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#f8f8f2>numBits</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>hash</color> <color=#f92672>=</color> <color=#f8f8f2>hash</color> <color=#f92672>>></color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>hc</color><color=#f8f8f2>.</color><color=#a6e22e>hashes</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>hash</color> <color=#f92672>&</color> <color=#ae81ff>0x000003FF</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#f8f8f2>numBits</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>hc</color><color=#f8f8f2>.</color><color=#a6e22e>hashes</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>hc</color><color=#f8f8f2>.</color><color=#a6e22e>rng</color><color=#f8f8f2>.</color><color=#a6e22e>nextInt</color><color=#f8f8f2>()</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFFFFL</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#f8f8f2>numBits</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>hc</color><color=#f8f8f2>.</color><color=#a6e22e>hashes</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>hc</color><color=#f8f8f2>.</color><color=#a6e22e>rng</color><color=#f8f8f2>.</color><color=#a6e22e>nextInt</color><color=#f8f8f2>()</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFFFFL</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#f8f8f2>numBits</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>hc</color><color=#f8f8f2>.</color><color=#a6e22e>hashes</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>hc</color><color=#f8f8f2>.</color><color=#a6e22e>rng</color><color=#f8f8f2>.</color><color=#a6e22e>nextInt</color><color=#f8f8f2>()</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFFFFL</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#f8f8f2>numBits</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Fowler-Noll-Vo hash function</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>hashFNV</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>initValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>hash</color> <color=#f92672>=</color> <color=#f8f8f2>initValue</color><color=#f8f8f2>;</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color> <color=#f8f8f2>b</color> <color=#f8f8f2>:</color> <color=#f8f8f2>key</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>hash</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>hash</color> <color=#f92672>*</color> <color=#f8f8f2>FNVPrime</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFFFF</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>hash</color> <color=#f92672>^=</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>hash</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Get the total memory consumed by the given bloom filter.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getMemorySize</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bf</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>byteArraySize</color><color=#f8f8f2>(</color><color=#f8f8f2>bf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Get the number of bytes needed to store the bitset of a bloom filter</color>
<color=#75715e>   * for the given number of keys.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getByteSize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>numKeys</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>numKeys</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>nbits</color> <color=#f92672>=</color> <color=#f8f8f2>numKeys</color> <color=#f92672>*</color> <color=#f8f8f2>M_N_RATIO</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>nbits</color> <color=#f92672>+</color> <color=#ae81ff>7</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Get the log size of a bloom filter for the given number of keys.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getLogSize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>numKeys</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>nbytes</color> <color=#f92672>=</color> <color=#f8f8f2>getByteSize</color><color=#f8f8f2>(</color><color=#f8f8f2>numKeys</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getPackedIntLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>nbytes</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>nbytes</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Get the log size of the given bloom filter</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getLogSize</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bf</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getByteArrayLogSize</color><color=#f8f8f2>(</color><color=#f8f8f2>bf</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Write the given bloom filter to the given log buffer</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>writeToLog</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bf</color><color=#f8f8f2>,</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writeByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>bf</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Create and return a bloom filter by reading its byytes from the</color>
<color=#75715e>   * given log buffer.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>readFromLog</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>entryVersion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>readByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*unpacked*/</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   *</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>dumpLog</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bf</color><color=#f8f8f2>,</color> <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>verbose</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>nbits</color> <color=#f92672>=</color> <color=#f8f8f2>bf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>*</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"<BloomFilter>"</color><color=#f8f8f2>);</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nbits</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getBit</color><color=#f8f8f2>(</color><color=#f8f8f2>bf</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"</BloomFilter>"</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   *</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bf</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>nbits</color> <color=#f92672>=</color> <color=#f8f8f2>bf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>*</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nbits</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getBit</color><color=#f8f8f2>(</color><color=#f8f8f2>bf</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   *</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>setBit</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>bf</color><color=#f92672>[</color><color=#f8f8f2>idx</color> <color=#f92672>/</color> <color=#ae81ff>8</color><color=#f92672>]</color> <color=#f92672>|=</color> <color=#f8f8f2>(</color><color=#ae81ff>1</color> <color=#f92672><<</color> <color=#f8f8f2>(</color><color=#f8f8f2>idx</color> <color=#f92672>%</color> <color=#ae81ff>8</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   *</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getBit</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bf</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>bf</color><color=#f92672>[</color><color=#f8f8f2>idx</color> <color=#f92672>/</color> <color=#ae81ff>8</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#f8f8f2>(</color><color=#ae81ff>1</color> <color=#f92672><<</color> <color=#f8f8f2>(</color><color=#f8f8f2>idx</color> <color=#f92672>%</color> <color=#ae81ff>8</color><color=#f8f8f2>)))</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>