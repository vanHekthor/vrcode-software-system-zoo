<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.dbi</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.JEVersion</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.WriteOptions</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.config.EnvironmentParams</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.tree.IN</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.TestHook</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.text.SimpleDateFormat</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Date</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.TimeZone</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.TimeUnit</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Internal documentation and utility functions for the TTL feature.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Repeatable-read ----------------- As described in {@link WriteOptions#setTTL}, repeatable-read</color>
<color=#75715e> * is supported in simple cases by treating a record that expires after being locked as if it were</color>
<color=#75715e> * not expired. This is implemented and documented in {@link CursorImpl#lockLN}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Unfortunately, we must check for whether a lock is already owned or shared by the locker</color>
<color=#75715e> * before we attempt to lock the record. To optimize and avoid this extra overhead when it is</color>
<color=#75715e> * unnecessary, we only do this when a record might expire during the transaction, according to the</color>
<color=#75715e> * {@link EnvironmentParams#ENV_TTL_MAX_TXN_TIME} threshold.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When a slot contains an expired record, {@link CursorImpl#lockLN} returns true in the</color>
<color=#75715e> * LockStanding.defunct field, just as it does for deleted records. That way deleted records and</color>
<color=#75715e> * expired records are filtered out of queries in the same way.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Locking (read or write locks) also protects a record from being purged. The cleaner only</color>
<color=#75715e> * considers an LN expired if its lock is uncontended, meaning that it could write-lock it. It</color>
<color=#75715e> * places locked LNs on the pending LN queue. The compressor also only removes an expired slot if</color>
<color=#75715e> * its lock is uncontended.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>However, if the clock was changed, purging may have occurred. Therefore, when an LN being</color>
<color=#75715e> * fetched is in a cleaned file (LOG_FILE_NOT_FOUND), we treat it as a deleted record if it expires</color>
<color=#75715e> * within {@link EnvironmentParams#ENV_TTL_CLOCK_TOLERANCE}. Records for which {@link IN#fetchLN}</color>
<color=#75715e> * returns null must also be filtered out of queries. This can happen even after locking the record</color>
<color=#75715e> * and determining that the slot is not expired.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>To prevent an LN from being purged while an operation is attempting to lock it, due to thread</color>
<color=#75715e> * scheduling, we purge LNs only if they are already expired by at least {@link</color>
<color=#75715e> * EnvironmentParams#ENV_TTL_MAX_TXN_TIME}. This is done to compensate for the fact that the BIN is</color>
<color=#75715e> * latched by the cleaner when locking an expired LN, while all other LN locking does latch the BIN.</color>
<color=#75715e> * This also means that, when calculating utilization of a .jdb file, we don't consider LNs expired</color>
<color=#75715e> * until the ENV_TTL_MAX_TXN_TIME after their expiration time.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>There are several special cases involving LNs discovered to be purged after locking the</color>
<color=#75715e> * record. In the cases where the operation fails, the situation is documented in {@link</color>
<color=#75715e> * WriteOptions#setTTL}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>+ For a read operation with a non-null 'data' param, if the LN was previously locked but the</color>
<color=#75715e> * data was not requested, and the LN is found to be purged during the read, the operation fails</color>
<color=#75715e> * (returns null).</color>
<color=#75715e> *</color>
<color=#75715e> * <p>+ For an update operation with a partial 'data' param, if the LN was previously locked (but</color>
<color=#75715e> * the data was not requested), and the LN is found to be purged during the update, the operation</color>
<color=#75715e> * fails (returns null).</color>
<color=#75715e> *</color>
<color=#75715e> * <p>+ For an update of a primary record with secondary keys, if the record is locked and then we</color>
<color=#75715e> * find the LN has been purged, we simply don't delete any pre-existing secondary keys. This is OK</color>
<color=#75715e> * because those secondary records are also expired and will be purged naturally.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that when the expiration time is reduced, including setting it to zero, no special</color>
<color=#75715e> * handling is needed. The update operation itself will ensure that the expiration time in the BIN</color>
<color=#75715e> * and LN are in sync, in the case of a single record, and that a primary record and its associated</color>
<color=#75715e> * and secondary records have expiration times that are in sync. Since expiration checking always</color>
<color=#75715e> * occurs after locking, the updated expiration time will always be used.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Secondaries ----------- Locking also supports repeatable-read for secondaries, as long as the</color>
<color=#75715e> * records being accessed were locked. To make this work when reading via a secondary, we must lock</color>
<color=#75715e> * the secondary if it expires within {@link EnvironmentParams#ENV_TTL_MAX_TXN_TIME}. Normally we</color>
<color=#75715e> * don't lock the secondary at all in this case, and rely only on the primary record lock. This</color>
<color=#75715e> * extra lock is taken after the primary lock, so locking order it not violated, i.e., this does not</color>
<color=#75715e> * increase the potential for deadlocks.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When reading via a secondary, if the secondary exists but the primary record expired (within</color>
<color=#75715e> * {@link EnvironmentParams#ENV_TTL_CLOCK_TOLERANCE}), then we we treat the record as deleted.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>When updating or deleting a primary record and its associated secondary records, we ignore</color>
<color=#75715e> * integrity problems if the secondary record has expired (within {@link</color>
<color=#75715e> * EnvironmentParams#ENV_TTL_CLOCK_TOLERANCE}). Specifically we ignore the integrity error when: 1.</color>
<color=#75715e> * we are deleting the secondary record and it does not exist; 2. we are updating secondary record</color>
<color=#75715e> * and it does not exist -- in this case we insert it.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>TTL</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>MILLIS_PER_HOUR</color> <color=#f92672>=</color> <color=#ae81ff>1000L</color> <color=#f92672>*</color> <color=#ae81ff>60</color> <color=#f92672>*</color> <color=#ae81ff>60</color><color=#f8f8f2>;</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>MILLIS_PER_DAY</color> <color=#f92672>=</color> <color=#f8f8f2>MILLIS_PER_HOUR</color> <color=#f92672>*</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Minimum JE version required for using TTL. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>JEVersion</color> <color=#f8f8f2>MIN_JE_VERSION</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>JEVersion</color><color=#f8f8f2>(</color><color=#e6db74>"6.5.0"</color><color=#f8f8f2>);</color>

  <color=#75715e>/* Set by tests to override MIN_JE_VERSION. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>JEVersion</color> <color=#f8f8f2>TEST_MIN_JE_VERSION</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>timeTestHook</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>TimeZone</color> <color=#f8f8f2>UTC</color> <color=#f92672>=</color> <color=#f8f8f2>TimeZone</color><color=#f8f8f2>.</color><color=#a6e22e>getTimeZone</color><color=#f8f8f2>(</color><color=#e6db74>"UTC"</color><color=#f8f8f2>);</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>SimpleDateFormat</color> <color=#f8f8f2>TIME_FORMAT</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleDateFormat</color><color=#f8f8f2>(</color><color=#e6db74>"yyyy-MM-dd.HH"</color><color=#f8f8f2>);</color>

  <color=#66d9ef>static</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>TIME_FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>setTimeZone</color><color=#f8f8f2>(</color><color=#f8f8f2>UTC</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>JEVersion</color> <color=#a6e22e>getMinJEVersion</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>TEST_MIN_JE_VERSION</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>TEST_MIN_JE_VERSION</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>MIN_JE_VERSION</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets a hook for simulating changes in the clock time that is used in TTL processing.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>If the hook is non-null, {@link TestHook#getHookValue()} returns the value used as the</color>
<color=#75715e>   * system clock time for all TTL processing. Other methods in the hook interface are not used.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For unit testing, this might return a fixed time. For stress testing, this might return a</color>
<color=#75715e>   * time that advances more quickly than the real clock.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>setTimeTestHook</color><color=#f8f8f2>(</color><color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>hook</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>timeTestHook</color> <color=#f92672>=</color> <color=#f8f8f2>hook</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>currentSystemTime</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>timeTestHook</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>timeTestHook</color><color=#f8f8f2>.</color><color=#a6e22e>getHookValue</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Translates from expiration days or hours to a Java time in ms. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>expirationToSystemTime</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>expiration</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>hours</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>expiration</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>expiration</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>expiration</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>hours</color> <color=#f92672>?</color> <color=#f8f8f2>MILLIS_PER_HOUR</color> <color=#f8f8f2>:</color> <color=#f8f8f2>MILLIS_PER_DAY</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Translates from the user-supplied ttl parameters to the expiration value that we store</color>
<color=#75715e>   * internally. Validates the ttl parameters as a side effect.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>ttlToExpiration</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ttl</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>TimeUnit</color> <color=#f8f8f2>ttlUnits</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ttl</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Illegal ttl value: "</color> <color=#f92672>+</color> <color=#f8f8f2>ttl</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ttl</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>currentTime</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ttlUnits</color> <color=#f92672>==</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>DAYS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>currentTime</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>currentSystemTime</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>MILLIS_PER_DAY</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>MILLIS_PER_DAY</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ttlUnits</color> <color=#f92672>==</color> <color=#f8f8f2>TimeUnit</color><color=#f8f8f2>.</color><color=#a6e22e>HOURS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>currentTime</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>currentSystemTime</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>MILLIS_PER_HOUR</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>MILLIS_PER_HOUR</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"ttlUnits not allowed: "</color> <color=#f92672>+</color> <color=#f8f8f2>ttlUnits</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>currentTime</color> <color=#f92672>+</color> <color=#f8f8f2>ttl</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether the given time in millis, when converted to hours, rounding up, is not an even</color>
<color=#75715e>   * multiple of 24.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isSystemTimeInHours</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>systemMs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>hours</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>systemMs</color> <color=#f92672>+</color> <color=#f8f8f2>MILLIS_PER_HOUR</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>MILLIS_PER_HOUR</color><color=#f8f8f2>;</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>hours</color> <color=#f92672>%</color> <color=#ae81ff>24</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Converts the user-supplied expirationTime parameter to an internal expiration time in days or</color>
<color=#75715e>   * hours. Assumes that the user parameter is evenly divisible by days or hours (call</color>
<color=#75715e>   * isSystemTimeInHours first).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>systemTimeToExpiration</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>systemMs</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>hours</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color>
        <color=#f8f8f2>(</color><color=#f8f8f2>hours</color>
            <color=#f92672>?</color> <color=#f8f8f2>((</color><color=#f8f8f2>systemMs</color> <color=#f92672>+</color> <color=#f8f8f2>MILLIS_PER_HOUR</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>MILLIS_PER_HOUR</color><color=#f8f8f2>)</color>
            <color=#f8f8f2>:</color> <color=#f8f8f2>((</color><color=#f8f8f2>systemMs</color> <color=#f92672>+</color> <color=#f8f8f2>MILLIS_PER_DAY</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>MILLIS_PER_DAY</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For logging and debugging output. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>formatExpiration</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>expiration</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>hours</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>formatExpirationTime</color><color=#f8f8f2>(</color><color=#f8f8f2>expirationToSystemTime</color><color=#f8f8f2>(</color><color=#f8f8f2>expiration</color><color=#f8f8f2>,</color> <color=#f8f8f2>hours</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For logging and debugging output. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>formatExpirationTime</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>time</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Date</color> <color=#f8f8f2>date</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Date</color><color=#f8f8f2>(</color><color=#f8f8f2>time</color><color=#f8f8f2>);</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>TIME_FORMAT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>TIME_FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>date</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether a given expiration time precedes the current system time, i.e., the expiration</color>
<color=#75715e>   * time has passed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isExpired</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>expiration</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>hours</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>expiration</color> <color=#f92672>!=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>currentSystemTime</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#f8f8f2>expirationToSystemTime</color><color=#f8f8f2>(</color><color=#f8f8f2>expiration</color><color=#f8f8f2>,</color> <color=#f8f8f2>hours</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether a given expiration time precedes the current system time, i.e., the expiration</color>
<color=#75715e>   * time has passed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isExpired</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>expirationTime</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>expirationTime</color> <color=#f92672>!=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>currentSystemTime</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#f8f8f2>expirationTime</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns whether the given expiration time is LT the current system time plus withinMs. withinMs</color>
<color=#75715e>   * may be negative to check whether the expiration time is LT the current system time minus</color>
<color=#75715e>   * abs(withinMs).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>expiresWithin</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>expiration</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>hours</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>withinMs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>expiration</color> <color=#f92672>!=</color> <color=#ae81ff>0</color>
        <color=#f92672>&&</color> <color=#f8f8f2>currentSystemTime</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>withinMs</color> <color=#f92672>></color> <color=#f8f8f2>expirationToSystemTime</color><color=#f8f8f2>(</color><color=#f8f8f2>expiration</color><color=#f8f8f2>,</color> <color=#f8f8f2>hours</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Same as {@link #expiresWithin(int, boolean, long)} but with a single expirationTime param. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>expiresWithin</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>expirationTime</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>withinMs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>expirationTime</color> <color=#f92672>!=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>currentSystemTime</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>withinMs</color> <color=#f92672>></color> <color=#f8f8f2>expirationTime</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>