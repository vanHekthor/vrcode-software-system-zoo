<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.stream</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.impl.RepImpl</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * The FeederFilter is used by the Feeder to determine whether a record should be sent to the</color>
<color=#75715e> * Replica. The filter object is created at the replica and is transmitted to the Feeder as part of</color>
<color=#75715e> * the syncup process. The filter thus represents replica code that is running inside the Feeder,</color>
<color=#75715e> * that is, the computation has been moved closer to the data and can be used to eliminate</color>
<color=#75715e> * unnecessary network communication overheads.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>FeederFilter</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The execute method that invoked before a record is sent to the replica. If the filter returns</color>
<color=#75715e>   * null, the feeder will not send the record to the replica as part of the replication stream,</color>
<color=#75715e>   * since it's not of interest to the replica. It can for example be used to filter out tables that</color>
<color=#75715e>   * are not of interest to the replica.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param record the record to be filtered</color>
<color=#75715e>   * @param repImpl repImpl of the RN where the filter is executed</color>
<color=#75715e>   * @return the original input record if it is to be sent to the replica. null if it's to be</color>
<color=#75715e>   *     skipped.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>OutputWireRecord</color> <color=#a6e22e>execute</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>OutputWireRecord</color> <color=#f8f8f2>record</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>RepImpl</color> <color=#f8f8f2>repImpl</color><color=#f8f8f2>);</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Gets arrays of subscribed table ids. If null or array length is 0, that means the subscriber</color>
<color=#75715e>   * would subscribe all tables in the store.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return arrays of subscribed table ids</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#a6e22e>getTableIds</color><color=#f8f8f2>();</color>
<color=#f8f8f2>}</color>