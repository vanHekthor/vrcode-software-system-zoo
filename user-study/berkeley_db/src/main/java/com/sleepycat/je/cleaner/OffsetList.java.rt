<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.cleaner</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.LoggerUtils</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * List of LSN offsets as a linked list of segments. The reasons for using a list of this type and</color>
<color=#75715e> * not a java.util.List are:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> *   <li>Segements reduce memory overhead by storing long primitives rather than Long objects. Many</color>
<color=#75715e> *       longs per segment reduce link overhead.</color>
<color=#75715e> *   <li>Memory is only allocated for new segments, reducing the number of calls to update the</color>
<color=#75715e> *       memory budget.</color>
<color=#75715e> *   <li>This is an append-only list that supports a single appender thread and multiple</color>
<color=#75715e> *       unsynchronized reader threads. The caller is responsible for synchronizing such that only</color>
<color=#75715e> *       one thread calls add() at one time. The reader threads see data as it is changing but do</color>
<color=#75715e> *       not see inconsistent data (corrupt longs) and do not require synchronization for thread</color>
<color=#75715e> *       safety.</color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The algorithms here use traversal of the list segments rather than recursion to avoid using a</color>
<color=#75715e> * lot of stack space.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>OffsetList</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SEGMENT_CAPACITY</color> <color=#f92672>=</color> <color=#ae81ff>100</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Once the size of the list goes over this limit, we should not assert</color>
<color=#75715e>   * (self-check) by doing sequential searches though the list.  Assertions</color>
<color=#75715e>   * can't be too expensive or they interfere with normal operation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TOO_BIG_FOR_SELF_CHECK</color> <color=#f92672>=</color> <color=#ae81ff>100</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>Segment</color> <color=#f8f8f2>head</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Segment</color> <color=#f8f8f2>tail</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#a6e22e>OffsetList</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>head</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Segment</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>tail</color> <color=#f92672>=</color> <color=#f8f8f2>head</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Adds the given value and returns whether a new segment was allocated. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>value</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>checkDupOffsets</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/* Each value added should be unique. */</color>
    <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>checkDupOffsets</color> <color=#f92672>||</color> <color=#f8f8f2>size</color> <color=#f92672>></color> <color=#f8f8f2>TOO_BIG_FOR_SELF_CHECK</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>)</color>
        <color=#f8f8f2>:</color> <color=#f8f8f2>LoggerUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getStackTrace</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Exception</color><color=#f8f8f2>(</color><color=#e6db74>"Dup Offset "</color> <color=#f92672>+</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>toHexString</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>)));</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Do not increment the size until the value is added so that reader</color>
<color=#75715e>     * threads do not try to read a value before it has been added.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>Segment</color> <color=#f8f8f2>oldTail</color> <color=#f92672>=</color> <color=#f8f8f2>tail</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>tail</color> <color=#f92672>=</color> <color=#f8f8f2>tail</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>tail</color> <color=#f92672>!=</color> <color=#f8f8f2>oldTail</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Merges the given list and returns whether a segment was freed. */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>merge</color><color=#f8f8f2>(</color><color=#f8f8f2>OffsetList</color> <color=#f8f8f2>other</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>oneSegFreed</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Segment</color> <color=#f8f8f2>seg</color> <color=#f92672>=</color> <color=#f8f8f2>other</color><color=#f8f8f2>.</color><color=#a6e22e>head</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Segment</color> <color=#f8f8f2>next</color> <color=#f92672>=</color> <color=#f8f8f2>seg</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>next</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Insert a full segment at the beginning of the list. */</color>
        <color=#f8f8f2>seg</color><color=#f8f8f2>.</color><color=#a6e22e>setNext</color><color=#f8f8f2>(</color><color=#f8f8f2>head</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>head</color> <color=#f92672>=</color> <color=#f8f8f2>seg</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>seg</color> <color=#f92672>=</color> <color=#f8f8f2>next</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Copy the last segment and discard it. */</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>seg</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>add</color><color=#f8f8f2>(</color><color=#f8f8f2>seg</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>),</color> <color=#66d9ef>false</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#75715e>/* The two partial segments did not fit into one. */</color>
            <color=#f8f8f2>oneSegFreed</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>oneSegFreed</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns an array of all values as longs. If a writer thread is appending to the list while this</color>
<color=#75715e>   * method is executing, some values may be missing from the returned array, but the operation is</color>
<color=#75715e>   * safe.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#a6e22e>toArray</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[</color><color=#f8f8f2>size</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>next</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>segments</color><color=#f8f8f2>:</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Segment</color> <color=#f8f8f2>seg</color> <color=#f92672>=</color> <color=#f8f8f2>head</color><color=#f8f8f2>;</color> <color=#f8f8f2>seg</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color> <color=#f8f8f2>seg</color> <color=#f92672>=</color> <color=#f8f8f2>seg</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>seg</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>next</color> <color=#f92672>>=</color> <color=#f8f8f2>a</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>break</color> <color=#f8f8f2>segments</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>a</color><color=#f92672>[</color><color=#f8f8f2>next</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>seg</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>next</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>a</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns whether this list contains the given offset. */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Segment</color> <color=#f8f8f2>seg</color> <color=#f92672>=</color> <color=#f8f8f2>head</color><color=#f8f8f2>;</color> <color=#f8f8f2>seg</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color> <color=#f8f8f2>seg</color> <color=#f92672>=</color> <color=#f8f8f2>seg</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>seg</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>seg</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** One segment of a OffsetList containing at most SEGMENT_CAPACITY values. public for Sizeof. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>Segment</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>Segment</color> <color=#f8f8f2>next</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>values</color><color=#f8f8f2>;</color>

    <color=#75715e>/* public for Sizeof. */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>Segment</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>values</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>SEGMENT_CAPACITY</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Call this method on the tail. The new tail is returned, if allocating a new tail is</color>
<color=#75715e>     * necessary.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>Segment</color> <color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672><</color> <color=#f8f8f2>values</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Increment index after adding the offset so that reader</color>
<color=#75715e>         * threads won't see a partial long value.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>values</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>index</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Add the value to the new segment before assigning the next</color>
<color=#75715e>         * field so that reader threads can rely on more values being</color>
<color=#75715e>         * available whenever the next field is non-null.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>Segment</color> <color=#f8f8f2>seg</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Segment</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>seg</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>seg</color><color=#f8f8f2>.</color><color=#a6e22e>index</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>next</color> <color=#f92672>=</color> <color=#f8f8f2>seg</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>seg</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/** Returns the value at the given index from this segment only. */</color>
    <color=#66d9ef>long</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>values</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFFFF</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/** Returns the next segment or null if this is the tail segment. */</color>
    <color=#f8f8f2>Segment</color> <color=#a6e22e>next</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>next</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/** Sets the next pointer during a merge. */</color>
    <color=#66d9ef>void</color> <color=#a6e22e>setNext</color><color=#f8f8f2>(</color><color=#f8f8f2>Segment</color> <color=#f8f8f2>next</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>next</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/** Returns the number of values in this segment. */</color>
    <color=#66d9ef>int</color> <color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>index</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>