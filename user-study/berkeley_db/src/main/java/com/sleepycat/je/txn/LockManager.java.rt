<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.txn</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.config.EnvironmentParams</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.latch.Latch</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.latch.LatchFactory</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.latch.LatchSupport</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.utilint.*</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.ConcurrentHashMap</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.sleepycat.je.txn.LockStatDefinition.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * LockManager manages locks.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that locks are counted as taking up part of the JE cache.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>LockManager</color> <color=#66d9ef>implements</color> <color=#f8f8f2>EnvConfigObserver</color> <color=#f8f8f2>{</color>

  <color=#75715e>/*</color>
<color=#75715e>   * The total memory cost for a lock is the Lock object, plus its entry and</color>
<color=#75715e>   * key in the lock hash table.</color>
<color=#75715e>   *</color>
<color=#75715e>   * The addition and removal of Lock objects, and the corresponding cost of</color>
<color=#75715e>   * their hashmap entry and key are tracked through the LockManager.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>TOTAL_LOCKIMPL_OVERHEAD</color> <color=#f92672>=</color>
      <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>LOCKIMPL_OVERHEAD</color>
          <color=#f92672>+</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>HASHMAP_ENTRY_OVERHEAD</color>
          <color=#f92672>+</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>LONG_OVERHEAD</color><color=#f8f8f2>;</color>

  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>TOTAL_THINLOCKIMPL_OVERHEAD</color> <color=#f92672>=</color>
      <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>THINLOCKIMPL_OVERHEAD</color>
          <color=#f92672>+</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>HASHMAP_ENTRY_OVERHEAD</color>
          <color=#f92672>+</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>LONG_OVERHEAD</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>REMOVE_TOTAL_LOCKIMPL_OVERHEAD</color> <color=#f92672>=</color> <color=#ae81ff>0</color> <color=#f92672>-</color> <color=#f8f8f2>TOTAL_LOCKIMPL_OVERHEAD</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>REMOVE_TOTAL_THINLOCKIMPL_OVERHEAD</color> <color=#f92672>=</color> <color=#ae81ff>0</color> <color=#f92672>-</color> <color=#f8f8f2>TOTAL_THINLOCKIMPL_OVERHEAD</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>THINLOCK_MUTATE_OVERHEAD</color> <color=#f92672>=</color>
      <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>LOCKIMPL_OVERHEAD</color>
          <color=#f92672>-</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>THINLOCKIMPL_OVERHEAD</color>
          <color=#f92672>+</color> <color=#f8f8f2>MemoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>LOCKINFO_OVERHEAD</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>ThreadLocker</color><color=#f92672>></color> <color=#f8f8f2>EMPTY_THREAD_LOCKERS</color> <color=#f92672>=</color> <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>emptyList</color><color=#f8f8f2>();</color>

  <color=#75715e>/* Hook called after a lock is requested. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>Void</color><color=#f92672>></color> <color=#f8f8f2>afterLockHook</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Hook called after waitingFor is set and before doing deadlock</color>
<color=#75715e>   * detection. This aims to inject some wait-action for the current</color>
<color=#75715e>   * thread.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#f8f8f2>TestHook</color><color=#f92672><</color><color=#f8f8f2>Void</color><color=#f92672>></color> <color=#f8f8f2>simulatePartialDeadlockHook</color><color=#f8f8f2>;</color>

  <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>nLockTables</color><color=#f8f8f2>;</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>Latch</color><color=#f92672>[]</color> <color=#f8f8f2>lockTableLatches</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Lock</color><color=#f92672>>[]</color> <color=#f8f8f2>lockTables</color><color=#f8f8f2>;</color> <color=#75715e>// keyed by LSN</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>MemoryBudget</color> <color=#f8f8f2>memoryBudget</color><color=#f8f8f2>;</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>stats</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nRequests</color><color=#f8f8f2>;</color> <color=#75715e>/* number of time a request was made. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LongStat</color> <color=#f8f8f2>nWaits</color><color=#f8f8f2>;</color> <color=#75715e>/* number of time a request blocked. */</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>RangeRestartException</color> <color=#f8f8f2>rangeRestartException</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RangeRestartException</color><color=#f8f8f2>();</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>lockTableDump</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Maps a thread to a set of ThreadLockers. Currently this map is only maintained (non-null) in a</color>
<color=#75715e>   * replicated environment because it is only needed for determining when to throw</color>
<color=#75715e>   * LockPreemptedException.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Access to the map need not be synchronized because it is a ConcurrentHashMap. Access to the</color>
<color=#75715e>   * TinyHashSet stored for each thread need not be synchronized, since it is only accessed by a</color>
<color=#75715e>   * single thread.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>A TinyHashSet is used because typically only a single ThreadLocker per thread will be open</color>
<color=#75715e>   * at one time.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see ThreadLocker#checkPreempted [#16513]</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Thread</color><color=#f8f8f2>,</color> <color=#f8f8f2>TinyHashSet</color><color=#f92672><</color><color=#f8f8f2>ThreadLocker</color><color=#f92672>>></color> <color=#f8f8f2>threadLockers</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * @SuppressWarnings is used to stifle a type safety complaint about the</color>
<color=#75715e>   * assignment of lockTables = new Map[nLockTables]. There's no way to</color>
<color=#75715e>   * specify the type of the array.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unchecked"</color><color=#f8f8f2>)</color>
  <color=#66d9ef>public</color> <color=#a6e22e>LockManager</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentImpl</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>DbConfigManager</color> <color=#f8f8f2>configMgr</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getConfigManager</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>nLockTables</color> <color=#f92672>=</color> <color=#f8f8f2>configMgr</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>N_LOCK_TABLES</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>lockTables</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Map</color><color=#f92672>[</color><color=#f8f8f2>nLockTables</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>lockTableLatches</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Latch</color><color=#f92672>[</color><color=#f8f8f2>nLockTables</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nLockTables</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>lockTables</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Lock</color><color=#f92672>></color><color=#f8f8f2>();</color>
      <color=#f8f8f2>lockTableLatches</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color>
          <color=#f8f8f2>LatchFactory</color><color=#f8f8f2>.</color><color=#a6e22e>createExclusiveLatch</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#e6db74>"Lock Table "</color> <color=#f92672>+</color> <color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*collectStats*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>envImpl</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>memoryBudget</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getMemoryBudget</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>stats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>GROUP_NAME</color><color=#f8f8f2>,</color> <color=#f8f8f2>GROUP_DESC</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nRequests</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>LOCK_REQUESTS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>nWaits</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LongStat</color><color=#f8f8f2>(</color><color=#f8f8f2>stats</color><color=#f8f8f2>,</color> <color=#f8f8f2>LOCK_WAITS</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Initialize mutable properties and register for notifications. */</color>
    <color=#f8f8f2>envConfigUpdate</color><color=#f8f8f2>(</color><color=#f8f8f2>configMgr</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>addConfigObserver</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>isReplicated</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>threadLockers</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ConcurrentHashMap</color><color=#f92672><</color><color=#f8f8f2>Thread</color><color=#f8f8f2>,</color> <color=#f8f8f2>TinyHashSet</color><color=#f92672><</color><color=#f8f8f2>ThreadLocker</color><color=#f92672>>></color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>threadLockers</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Process notifications of mutable property changes. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>envConfigUpdate</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DbConfigManager</color> <color=#f8f8f2>configMgr</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>EnvironmentMutableConfig</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>LockInfo</color><color=#f8f8f2>.</color><color=#a6e22e>setDeadlockStackTrace</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>configMgr</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>TXN_DEADLOCK_STACK_TRACE</color><color=#f8f8f2>));</color>

    <color=#f8f8f2>setLockTableDump</color><color=#f8f8f2>(</color><color=#f8f8f2>configMgr</color><color=#f8f8f2>.</color><color=#a6e22e>getBoolean</color><color=#f8f8f2>(</color><color=#f8f8f2>EnvironmentParams</color><color=#f8f8f2>.</color><color=#a6e22e>TXN_DUMPLOCKS</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Called when the je.txn.dumpLocks property is changed. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>setLockTableDump</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>enable</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>lockTableDump</color> <color=#f92672>=</color> <color=#f8f8f2>enable</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>int</color> <color=#a6e22e>getLockTableIndex</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>.</color><color=#a6e22e>longValue</color><color=#f8f8f2>())</color> <color=#f92672>&</color> <color=#ae81ff>0x7fffffff</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#f8f8f2>nLockTables</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>int</color> <color=#a6e22e>getLockTableIndex</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0x7fffffff</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#f8f8f2>nLockTables</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>timeRemain</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>startTime</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>timeout</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>startTime</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Attempt to acquire a lock of 'type' on 'lsn'.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param lsn The LSN to lock.</color>
<color=#75715e>   * @param locker The Locker to lock this on behalf of.</color>
<color=#75715e>   * @param type The lock type requested.</color>
<color=#75715e>   * @param timeout milliseconds to time out after if lock couldn't be obtained. 0 means block</color>
<color=#75715e>   *     indefinitely. Not used if nonBlockingRequest is true.</color>
<color=#75715e>   * @param nonBlockingRequest if true, means don't block if lock can't be acquired, and ignore the</color>
<color=#75715e>   *     timeout parameter.</color>
<color=#75715e>   * @param jumpAheadOfWaiters grant the lock before other waiters, if any.</color>
<color=#75715e>   * @return a LockGrantType indicating whether the request was fulfilled or not. LockGrantType.NEW</color>
<color=#75715e>   *     means the lock grant was fulfilled and the caller did not previously hold the lock.</color>
<color=#75715e>   *     PROMOTION means the lock was granted and it was a promotion from READ to WRITE. EXISTING</color>
<color=#75715e>   *     means the lock was already granted (not a promotion). DENIED means the lock was not granted</color>
<color=#75715e>   *     when nonBlockingRequest is true.</color>
<color=#75715e>   * @throws LockConflictException if lock could not be acquired. If nonBlockingRequest is true, a</color>
<color=#75715e>   *     LockConflictException is never thrown. Otherwise, if the lock acquisition would result in a</color>
<color=#75715e>   *     deadlock, DeadlockException is thrown. Otherwise, if the lock timeout interval elapses and</color>
<color=#75715e>   *     no deadlock is detected, LockTimeoutException is thrown.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>LockGrantType</color> <color=#a6e22e>lock</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>nonBlockingRequest</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>jumpAheadOfWaiters</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>database</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>timeout</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#75715e>/* No lock needed for dirty-read, return as soon as possible. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>==</color> <color=#f8f8f2>LockType</color><color=#f8f8f2>.</color><color=#a6e22e>NONE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>NONE_NEEDED</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>startTime</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>LockAttemptResult</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>LockGrantType</color> <color=#f8f8f2>grant</color><color=#f8f8f2>;</color>

    <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* Attempt to lock without any initial wait. */</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>attemptLock</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>nonBlockingRequest</color><color=#f8f8f2>,</color> <color=#f8f8f2>jumpAheadOfWaiters</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>grant</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>lockGrant</color><color=#f8f8f2>;</color>

      <color=#75715e>/* If we got the lock or a non-blocking lock was denied, return. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>success</color> <color=#f92672>||</color> <color=#f8f8f2>grant</color> <color=#f92672>==</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>DENIED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>nonBlockingRequest</color> <color=#f92672>||</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>success</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>afterLockHook</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>afterLockHook</color><color=#f8f8f2>.</color><color=#a6e22e>doHook</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>grant</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>LatchSupport</color><color=#f8f8f2>.</color><color=#a6e22e>TRACK_LATCHES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>nonBlockingRequest</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>LatchSupport</color><color=#f8f8f2>.</color><color=#a6e22e>expectBtreeLatchesHeld</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * We must have gotten WAIT_* from the lock request. We know that</color>
<color=#75715e>       * this is a blocking request, because if it wasn't, Lock.lock</color>
<color=#75715e>       * would have returned DENIED. Go wait!</color>
<color=#75715e>       */</color>
      <color=#66d9ef>assert</color> <color=#f92672>!</color><color=#f8f8f2>nonBlockingRequest</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>setWaitingFor</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>);</color>

      <color=#75715e>/* currentTimeMillis is expensive. Only call it if we will wait. */</color>
      <color=#f8f8f2>startTime</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>();</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If there is a txn timeout, and the txn time remaining is less</color>
<color=#75715e>       * than the lock timeout, then use the txn time remaining instead.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>txnTimeout</color> <color=#f92672>=</color> <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>getTxnTimeout</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>txnTimeout</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>txnTimeRemaining</color> <color=#f92672>=</color> <color=#f8f8f2>timeRemain</color><color=#f8f8f2>(</color><color=#f8f8f2>txnTimeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>getTxnStartMillis</color><color=#f8f8f2>());</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>timeout</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>txnTimeRemaining</color> <color=#f92672><</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>timeout</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>txnTimeRemaining</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * After the deadlock detection delay, if this locker is the owner,</color>
<color=#75715e>       * we're done.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>performDeadlockDetectionDelay</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>grant</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>startTime</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>grant</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>DeadlockChecker</color> <color=#f8f8f2>lastDC</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Repeatedly try waiting for the lock. If a deadlock is detected,</color>
<color=#75715e>     * notify the victim. When this locker becomes the owner, we're done.</color>
<color=#75715e>     *</color>
<color=#75715e>     * If there is a deadlock and this locker is the victim, waitForLock</color>
<color=#75715e>     * will throw DeadlockException. If there is a deadlock and this locker</color>
<color=#75715e>     * is not the victim, we call notifyVictim. If the deadlock cannot be</color>
<color=#75715e>     * broken by notifying the victim, notifyVictim will throw</color>
<color=#75715e>     * DeadlockException.</color>
<color=#75715e>     *</color>
<color=#75715e>     * If a timeout occurs and a deadlock was detected, DeadlockException</color>
<color=#75715e>     * will be thrown by waitForLock or notifyVictim. If a timeout occurs</color>
<color=#75715e>     * and no deadlock was detected, a timeout exception will be thrown by</color>
<color=#75715e>     * waitForLock.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>WaitForLockResult</color> <color=#f8f8f2>waitResult</color><color=#f8f8f2>;</color>

      <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>waitResult</color> <color=#f92672>=</color> <color=#f8f8f2>waitForLock</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastDC</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>startTime</color><color=#f8f8f2>,</color> <color=#f8f8f2>database</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>waitResult</color><color=#f8f8f2>.</color><color=#a6e22e>getResult</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>grant</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>lockGrant</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>lastDC</color> <color=#f92672>=</color> <color=#f8f8f2>waitResult</color><color=#f8f8f2>.</color><color=#a6e22e>getDeadLockChecker</color><color=#f8f8f2>();</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>victim</color> <color=#f92672>=</color> <color=#f8f8f2>waitResult</color><color=#f8f8f2>.</color><color=#a6e22e>getVictim</color><color=#f8f8f2>();</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>victim</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* The locker owns the lock and no deadlock was detected. */</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>grant</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * A deadlock is detected and this locker is not the victim.</color>
<color=#75715e>       * Notify the victim.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Pair</color><color=#f92672><</color><color=#f8f8f2>Boolean</color><color=#f8f8f2>,</color> <color=#f8f8f2>DeadlockChecker</color><color=#f92672>></color> <color=#f8f8f2>nvResult</color> <color=#f92672>=</color>
          <color=#f8f8f2>notifyVictim</color><color=#f8f8f2>(</color><color=#f8f8f2>victim</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastDC</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>startTime</color><color=#f8f8f2>,</color> <color=#f8f8f2>database</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nvResult</color><color=#f8f8f2>.</color><color=#a6e22e>first</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * The deadlock was broken and this locker is now the owner.</color>
<color=#75715e>         * finishLock will clear locker.waitingFor, which must be</color>
<color=#75715e>         * protected by the locker mutex.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>finishLock</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>grant</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>grant</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * A deadlock is no longer present, or a deadlock with a different</color>
<color=#75715e>       * victim was detected. And the timeout has not expired. Retry.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>lastDC</color> <color=#f92672>=</color> <color=#f8f8f2>nvResult</color><color=#f8f8f2>.</color><color=#a6e22e>second</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Waits for a lock that was previously requested. Handles deadlocks and timeouts. However, does</color>
<color=#75715e>   * not notify the victim when a deadlock is detected and the current locker is not the victim; in</color>
<color=#75715e>   * that case the caller must notify the victim. This method cannot notify the victim because it is</color>
<color=#75715e>   * synchronized on the current locker, and we can synchronize on only one locker at a time.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method must be called while synchronized on the locker, for several reasons: 1. The</color>
<color=#75715e>   * locker will be modified if the lock is acquired by stealLock and when finishLock is called. 2.</color>
<color=#75715e>   * It must be synchronized when performing the lock delay.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the lock result and a null victim if locking was successful, or a non-null victim if a</color>
<color=#75715e>   *     deadlock is detected and the current locker is not the victim.</color>
<color=#75715e>   * @throws DeadlockException when a deadlock is detected and the current locker is the victim.</color>
<color=#75715e>   * @throws LockTimeoutException when the timeout elapses and no deadlock is detected.</color>
<color=#75715e>   * @throws TransactionTimeoutException when the transaction time limit was exceeded.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>WaitForLockResult</color> <color=#a6e22e>waitForLock</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>LockAttemptResult</color> <color=#f8f8f2>result</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DeadlockChecker</color> <color=#f8f8f2>lastDC</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>startTime</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>database</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isImportunate</color> <color=#f92672>=</color> <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>getImportunate</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>waitForever</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>timeout</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Locker</color> <color=#f8f8f2>victim</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>simulatePartialDeadlockHook</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>simulatePartialDeadlockHook</color><color=#f8f8f2>.</color><color=#a6e22e>doHook</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * There are two reasons for the loop below.</color>
<color=#75715e>     *</color>
<color=#75715e>     * 1. When another thread detects a deadlock and notifies this thread,</color>
<color=#75715e>     * it will wakeup before the timeout interval has expired. We must loop</color>
<color=#75715e>     * again to perform deadlock detection. Normally, if the deadlock</color>
<color=#75715e>     * detected by the other thread is still present, this locker will be</color>
<color=#75715e>     * selected as the victim and we will throw DeadlockException below.</color>
<color=#75715e>     *</color>
<color=#75715e>     * 2. Even when another JE locking thread does not notify this thread,</color>
<color=#75715e>     * this thread may wake up before the timeout has elapsed due to</color>
<color=#75715e>     * "spurious wakeups" -- see Object.wait().</color>
<color=#75715e>     */</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Perform deadlock detection before waiting.</color>
<color=#75715e>       *</color>
<color=#75715e>       * When the locker is a ReplayTxn (isImportunate is true), we</color>
<color=#75715e>       * must steal the lock even if when we encounter a deadlock.</color>
<color=#75715e>       *</color>
<color=#75715e>       * There are two reasons that we do not check for deadlocks</color>
<color=#75715e>       * here for a ReplayTxn:</color>
<color=#75715e>       *</color>
<color=#75715e>       * 1. If we were to detect a deadlock here, we could not</color>
<color=#75715e>       * control which locker will be chosen as the victim. The</color>
<color=#75715e>       * ReplayTxn might be chosen as the victim and then it would be</color>
<color=#75715e>       * aborted by throwing DeadlockException. ReplayTxns may not be</color>
<color=#75715e>       * aborted and a LockConflictException should not be thrown.</color>
<color=#75715e>       *</color>
<color=#75715e>       * 2. If the ReplayTxn deadlocks with other txns, the other</color>
<color=#75715e>       * txns will detect deadlock.</color>
<color=#75715e>       *  + If another txn is chosen as the victim, then ReplayTxn</color>
<color=#75715e>       *    will acquire the lock.</color>
<color=#75715e>       *  + If ReplayTxn is chosen as the victim, ReplayTxn will be</color>
<color=#75715e>       *    notified and will wake up and steal the lock. This is</color>
<color=#75715e>       *    efficient, since a long wait will not be needed.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDeadlockDetection</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isImportunate</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/* Do deadlock detect */</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>DeadlockResult</color> <color=#f8f8f2>dlr</color> <color=#f92672>=</color> <color=#f8f8f2>checkAndHandleDeadlock</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>database</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dlr</color><color=#f8f8f2>.</color><color=#a6e22e>isOwner</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dlr</color><color=#f8f8f2>.</color><color=#a6e22e>trueDeadlock</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>victim</color> <color=#f92672>=</color> <color=#f8f8f2>dlr</color><color=#f8f8f2>.</color><color=#a6e22e>victim</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>lastDC</color> <color=#f92672>=</color> <color=#f8f8f2>dlr</color><color=#f8f8f2>.</color><color=#a6e22e>dc</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Else do nothing. We did not detect a true deadlock and</color>
<color=#75715e>         * this locker does not own the lock, so wait again with the</color>
<color=#75715e>         * time remaining.</color>
<color=#75715e>         */</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * Check ownership before waiting, since we release the locker</color>
<color=#75715e>         * mutex between calling attemptLock and waitForLock. This</color>
<color=#75715e>         * check prevents a missed notification:</color>
<color=#75715e>         *    locker1                        locker2</color>
<color=#75715e>         *    wait for a lock</color>
<color=#75715e>         *                        release the lock and notify locker1</color>
<color=#75715e>         *    locker1.wait()</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isOwner</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>waitForever</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>wait</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>wait</color><color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeRemain</color><color=#f8f8f2>(</color><color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>startTime</color><color=#f8f8f2>)));</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>IE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ThreadInterruptedException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>IE</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>lockerTimedOut</color> <color=#f92672>=</color> <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>isTimedOut</color><color=#f8f8f2>();</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>now</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>();</color>

      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>thisLockTimedOut</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>waitForever</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>now</color> <color=#f92672>-</color> <color=#f8f8f2>startTime</color><color=#f8f8f2>)</color> <color=#f92672>>=</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>);</color>

      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isRestart</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>lockGrant</color> <color=#f92672>==</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>WAIT_RESTART</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Try to get accurate owners and waiters of requested</color>
<color=#75715e>       * lock when deciding to possibly throw LockTimeoutException</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>owners</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><></color><color=#f8f8f2>();</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>waiters</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><></color><color=#f8f8f2>();</color>

      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>getOwnersAndWaiters</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockerTimedOut</color> <color=#f92672>||</color> <color=#f8f8f2>thisLockTimedOut</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isImportunate</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Only flush the waiters if isRestart && !isImportunate. If</color>
<color=#75715e>       * lockerTimedOut or thisLockTimedOut, we will flush the waiters</color>
<color=#75715e>       * before throwing an exception further below.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>flushFromWaiters</color> <color=#f92672>=</color> <color=#f8f8f2>isRestart</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isImportunate</color><color=#f8f8f2>;</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>validateOwnership</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>getOwnersAndWaiters</color><color=#f8f8f2>,</color> <color=#f8f8f2>flushFromWaiters</color><color=#f8f8f2>,</color> <color=#f8f8f2>owners</color><color=#f8f8f2>,</color> <color=#f8f8f2>waiters</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isImportunate</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>stealLock</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>success</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>/* Lock holder is non-preemptable, wait again. */</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* After a restart conflict the lock will not be held. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isRestart</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>rangeRestartException</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>thisLockTimedOut</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>lockerTimedOut</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>DeadlockResult</color> <color=#f8f8f2>dlr</color> <color=#f92672>=</color> <color=#f8f8f2>checkAndHandleDeadlock</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>database</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dlr</color><color=#f8f8f2>.</color><color=#a6e22e>isOwner</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dlr</color><color=#f8f8f2>.</color><color=#a6e22e>trueDeadlock</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>lastDC</color> <color=#f92672>=</color> <color=#f8f8f2>dlr</color><color=#f8f8f2>.</color><color=#a6e22e>dc</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Flush lock from waiters before throwing exception. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>validateOwnership</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
          <color=#f8f8f2>type</color><color=#f8f8f2>,</color>
          <color=#66d9ef>false</color> <color=#75715e>/*getOwnersAndWaiters*/</color><color=#f8f8f2>,</color>
          <color=#66d9ef>true</color> <color=#75715e>/*flushFromWaiters*/</color><color=#f8f8f2>,</color>
          <color=#66d9ef>null</color><color=#f8f8f2>,</color>
          <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lastDC</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>makeDeadlockException</color><color=#f8f8f2>(</color><color=#f8f8f2>lastDC</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*isVictim*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>database</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * When both types of timeouts occur, throw TransactionTimeout.</color>
<color=#75715e>       * Otherwise TransactionTimeout may never be thrown, because when</color>
<color=#75715e>       * the txn times out, the lock probably also times out.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockerTimedOut</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>makeTimeoutException</color><color=#f8f8f2>(</color>
            <color=#66d9ef>false</color> <color=#75715e>/*isLockNotTxnTimeout*/</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>type</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>lockGrant</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>useLock</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>getTxnTimeout</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>getTxnStartMillis</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>now</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>database</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>owners</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>waiters</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#f8f8f2>makeTimeoutException</color><color=#f8f8f2>(</color>
            <color=#66d9ef>true</color> <color=#75715e>/*isLockNotTxnTimeout*/</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>type</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>lockGrant</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>useLock</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>startTime</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>now</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>database</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>owners</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>waiters</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>victim</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>isOwner</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>finishLock</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>lockGrant</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>WaitForLockResult</color><color=#f8f8f2>(</color><color=#f8f8f2>victim</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastDC</color><color=#f8f8f2>,</color> <color=#f8f8f2>result</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>finishLock</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>nid</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockGrantType</color> <color=#f8f8f2>grant</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>clearWaitingFor</color><color=#f8f8f2>();</color>

    <color=#66d9ef>assert</color> <color=#f8f8f2>EnvironmentImpl</color><color=#f8f8f2>.</color><color=#a6e22e>maybeForceYield</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>addLock</color><color=#f8f8f2>(</color><color=#f8f8f2>nid</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>grant</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>afterLockHook</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>afterLockHook</color><color=#f8f8f2>.</color><color=#a6e22e>doHook</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the Lockers that own a lock on the given LSN. Note that when this method returns, there</color>
<color=#75715e>   * is nothing to prevent these lockers from releasing the lock or being closed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#a6e22e>getOwners</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>

  <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#a6e22e>getOwnersInternal</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Get the target lock. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Lock</color><color=#f92672>></color> <color=#f8f8f2>lockTable</color> <color=#f92672>=</color> <color=#f8f8f2>lockTables</color><color=#f92672>[</color><color=#f8f8f2>lockTableIndex</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>useLock</color> <color=#f92672>=</color> <color=#f8f8f2>lockTable</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useLock</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>useLock</color><color=#f8f8f2>.</color><color=#a6e22e>getOwnersClone</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returns the Lockers that wait on a lock on the given LSN. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#a6e22e>getWaiters</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>

  <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#a6e22e>getWaitersInternal</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Get the target lock. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Lock</color><color=#f92672>></color> <color=#f8f8f2>lockTable</color> <color=#f92672>=</color> <color=#f8f8f2>lockTables</color><color=#f92672>[</color><color=#f8f8f2>lockTableIndex</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>useLock</color> <color=#f92672>=</color> <color=#f8f8f2>lockTable</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useLock</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>useLock</color><color=#f8f8f2>.</color><color=#a6e22e>getWaitersListClone</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the LockType if the given locker owns a lock on the given node, or null if the lock is</color>
<color=#75715e>   * not owned.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>LockType</color> <color=#a6e22e>getOwnedLockType</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>);</color>

  <color=#f8f8f2>LockType</color> <color=#a6e22e>getOwnedLockTypeInternal</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Get the target lock. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Lock</color><color=#f92672>></color> <color=#f8f8f2>lockTable</color> <color=#f92672>=</color> <color=#f8f8f2>lockTables</color><color=#f92672>[</color><color=#f8f8f2>lockTableIndex</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>useLock</color> <color=#f92672>=</color> <color=#f8f8f2>lockTable</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useLock</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>useLock</color><color=#f8f8f2>.</color><color=#a6e22e>getOwnedLockType</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isLockUncontended</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>

  <color=#66d9ef>boolean</color> <color=#a6e22e>isLockUncontendedInternal</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Get the target lock. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Lock</color><color=#f92672>></color> <color=#f8f8f2>lockTable</color> <color=#f92672>=</color> <color=#f8f8f2>lockTables</color><color=#f92672>[</color><color=#f8f8f2>lockTableIndex</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>useLock</color> <color=#f92672>=</color> <color=#f8f8f2>lockTable</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useLock</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>useLock</color><color=#f8f8f2>.</color><color=#a6e22e>nWaiters</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>useLock</color><color=#f8f8f2>.</color><color=#a6e22e>nOwners</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>boolean</color> <color=#a6e22e>ownsOrSharesLock</color><color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>

  <color=#66d9ef>boolean</color> <color=#a6e22e>ownsOrSharesLockInternal</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Lock</color><color=#f92672>></color> <color=#f8f8f2>lockTable</color> <color=#f92672>=</color> <color=#f8f8f2>lockTables</color><color=#f92672>[</color><color=#f8f8f2>lockTableIndex</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>useLock</color> <color=#f92672>=</color> <color=#f8f8f2>lockTable</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useLock</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>info</color> <color=#f8f8f2>:</color> <color=#f8f8f2>getOwnersInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>owner</color> <color=#f92672>=</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>owner</color> <color=#f92672>==</color> <color=#f8f8f2>locker</color> <color=#f92672>||</color> <color=#f8f8f2>owner</color><color=#f8f8f2>.</color><color=#a6e22e>sharesLocksWith</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>sharesLocksWith</color><color=#f8f8f2>(</color><color=#f8f8f2>owner</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>abstract</color> <color=#f8f8f2>Lock</color> <color=#a6e22e>lookupLock</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#f8f8f2>Lock</color> <color=#a6e22e>lookupLockInternal</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/* Get the target lock. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Lock</color><color=#f92672>></color> <color=#f8f8f2>lockTable</color> <color=#f92672>=</color> <color=#f8f8f2>lockTables</color><color=#f92672>[</color><color=#f8f8f2>lockTableIndex</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lockTable</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>abstract</color> <color=#f8f8f2>LockAttemptResult</color> <color=#a6e22e>attemptLock</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>LockType</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>nonBlockingRequest</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>jumpAheadOfWaiters</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#f8f8f2>LockAttemptResult</color> <color=#a6e22e>attemptLockInternal</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>nonBlockingRequest</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>jumpAheadOfWaiters</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>nRequests</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>

    <color=#75715e>/* Get the target lock. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Lock</color><color=#f92672>></color> <color=#f8f8f2>lockTable</color> <color=#f92672>=</color> <color=#f8f8f2>lockTables</color><color=#f92672>[</color><color=#f8f8f2>lockTableIndex</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Lock</color> <color=#f8f8f2>useLock</color> <color=#f92672>=</color> <color=#f8f8f2>lockTable</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useLock</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>useLock</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ThinLockImpl</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>lockTable</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>useLock</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>memoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>updateLockMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>TOTAL_THINLOCKIMPL_OVERHEAD</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Attempt to lock.  Possible return values are NEW, PROMOTION, DENIED,</color>
<color=#75715e>     * EXISTING, WAIT_NEW, WAIT_PROMOTION, WAIT_RESTART.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>LockAttemptResult</color> <color=#f8f8f2>lar</color> <color=#f92672>=</color>
        <color=#f8f8f2>useLock</color><color=#f8f8f2>.</color><color=#a6e22e>lock</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>nonBlockingRequest</color><color=#f8f8f2>,</color> <color=#f8f8f2>jumpAheadOfWaiters</color><color=#f8f8f2>,</color> <color=#f8f8f2>memoryBudget</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lar</color><color=#f8f8f2>.</color><color=#a6e22e>useLock</color> <color=#f92672>!=</color> <color=#f8f8f2>useLock</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* The lock mutated from ThinLockImpl to LockImpl. */</color>
      <color=#f8f8f2>useLock</color> <color=#f92672>=</color> <color=#f8f8f2>lar</color><color=#f8f8f2>.</color><color=#a6e22e>useLock</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>lockTable</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>useLock</color><color=#f8f8f2>);</color>
      <color=#75715e>/* We still have the overhead of the hashtable (locktable). */</color>
      <color=#f8f8f2>memoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>updateLockMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>THINLOCK_MUTATE_OVERHEAD</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>LockGrantType</color> <color=#f8f8f2>lockGrant</color> <color=#f92672>=</color> <color=#f8f8f2>lar</color><color=#f8f8f2>.</color><color=#a6e22e>lockGrant</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#75715e>/* Was the attempt successful? */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>lockGrant</color> <color=#f92672>==</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>NEW</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockGrant</color> <color=#f92672>==</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>PROMOTION</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>addLock</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockGrant</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockGrant</color> <color=#f92672>==</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>EXISTING</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockGrant</color> <color=#f92672>==</color> <color=#f8f8f2>LockGrantType</color><color=#f8f8f2>.</color><color=#a6e22e>DENIED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Locker.lock will throw LockNotAvailableException. */</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>nWaits</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>LockAttemptResult</color><color=#f8f8f2>(</color><color=#f8f8f2>useLock</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockGrant</color><color=#f8f8f2>,</color> <color=#f8f8f2>success</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Performs the deadlock detection delay, if needed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method must be called while synchronized on the locker because it calls locker.wait and</color>
<color=#75715e>   * finishLock.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if the locker is the owner after the delay.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>performDeadlockDetectionDelay</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockGrantType</color> <color=#f8f8f2>grant</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>startTime</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * If dd is enabled, and there is a dd delay, and the locker is not</color>
<color=#75715e>     * importunate, perform the delay here. See waitForLock for a</color>
<color=#75715e>     * discussion of importunate lockers and dd.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>ddDelay</color> <color=#f92672>=</color> <color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDeadlockDetectionDelay</color><color=#f8f8f2>();</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>.</color><color=#a6e22e>getDeadlockDetection</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>getImportunate</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>ddDelay</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>waitForever</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>timeout</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>waitForever</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ddDelay</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>ddDelay</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeRemain</color><color=#f8f8f2>(</color><color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>startTime</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>wait</color><color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>ddDelay</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>IE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ThreadInterruptedException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>IE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* If the locker now owns the lock, we're done. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isOwner</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>finishLock</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>grant</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Otherwise, we'll do deadlock detection in waitForLock. */</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * @return DeadlockHandleResult dlhr, where</color>
<color=#75715e>   *        dlhr.isOwner is true if the current locker owns the lock;</color>
<color=#75715e>   *        dlhr.trueDeadlock is true if a true deadlock is detected and</color>
<color=#75715e>   *        the current locker does not own the lock;</color>
<color=#75715e>   *        dlhr.victim is not null if a victim is chosen and the victim</color>
<color=#75715e>   *        is not the current locker;</color>
<color=#75715e>   *        dlhr.dc will never be null, for simplicity, but it is useful only</color>
<color=#75715e>   *        when a true deadlock is detected.</color>
<color=#75715e>   * @throws DeadlockException if the victim is the current locker</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>DeadlockResult</color> <color=#a6e22e>checkAndHandleDeadlock</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>database</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>boolean</color> <color=#f8f8f2>isOwner</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>hasTrueDeadlock</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Locker</color> <color=#f8f8f2>targetedVictim</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>DeadlockChecker</color> <color=#f8f8f2>dc</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>round</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>;</color> <color=#f8f8f2>round</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dc</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DeadlockChecker</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dc</color><color=#f8f8f2>.</color><color=#a6e22e>hasCycle</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dc</color><color=#f8f8f2>.</color><color=#a6e22e>hasTrueDeadlock</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

          <color=#f8f8f2>targetedVictim</color> <color=#f92672>=</color> <color=#f8f8f2>dc</color><color=#f8f8f2>.</color><color=#a6e22e>chooseTargetedLocker</color><color=#f8f8f2>();</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>targetedVictim</color> <color=#f92672>!=</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>/*</color>
<color=#75715e>             * There is a window where after we chose a victim,</color>
<color=#75715e>             * another thread notifies the same victim and the</color>
<color=#75715e>             * deadlock is handled.</color>
<color=#75715e>             *</color>
<color=#75715e>             * So if now the current locker owns the lock, we do</color>
<color=#75715e>             * no longer need to notify the victim.</color>
<color=#75715e>             *</color>
<color=#75715e>             * If the current locker does not own the lock, we will</color>
<color=#75715e>             * return the victim. The outer caller will notify the</color>
<color=#75715e>             * victim. Even if, when the outer caller notifies the</color>
<color=#75715e>             * victim, and the current locker owns the lock, this</color>
<color=#75715e>             * does not impact correctness. We just do one more</color>
<color=#75715e>             * redundant step to notify the victim, which has been</color>
<color=#75715e>             * already notified.</color>
<color=#75715e>             */</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isOwner</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>isOwner</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>targetedVictim</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
              <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>hasTrueDeadlock</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#75715e>/*</color>
<color=#75715e>           * The targeted victim is this locker, so we will throw</color>
<color=#75715e>           * DeadlockException. But first we must call</color>
<color=#75715e>           * validateOwnership() to flush the locker from waiter</color>
<color=#75715e>           * list.</color>
<color=#75715e>           *</color>
<color=#75715e>           * Normally, validateOwnership() will first check whether</color>
<color=#75715e>           * the current locker owns the lock. But here there is no</color>
<color=#75715e>           * possibility that the current locker can own the lock.</color>
<color=#75715e>           */</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>validateOwnership</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>type</color><color=#f8f8f2>,</color>
              <color=#66d9ef>false</color> <color=#75715e>/*getOwnersAndWaiters*/</color><color=#f8f8f2>,</color>
              <color=#66d9ef>true</color> <color=#75715e>/*flushFromWaiters*/</color><color=#f8f8f2>,</color>
              <color=#66d9ef>null</color><color=#f8f8f2>,</color>
              <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

            <color=#f8f8f2>isOwner</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>targetedVictim</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>throw</color> <color=#f8f8f2>makeDeadlockException</color><color=#f8f8f2>(</color><color=#f8f8f2>dc</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color> <color=#75715e>/*isVictim*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>database</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isOwner</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>isOwner</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>round</color> <color=#f92672>>=</color> <color=#ae81ff>10</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isOwner</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>isOwner</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>DeadlockResult</color><color=#f8f8f2>(</color><color=#f8f8f2>isOwner</color><color=#f8f8f2>,</color> <color=#f8f8f2>hasTrueDeadlock</color><color=#f8f8f2>,</color> <color=#f8f8f2>targetedVictim</color><color=#f8f8f2>,</color> <color=#f8f8f2>dc</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Notify the targetedVictim to cause it to abort, and wait for the</color>
<color=#75715e>   * deadlock to be broken.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return {done, lastDC}. done is true if the deadlock has been broken and</color>
<color=#75715e>   * currentLocker is now the owner. done is false in 2 cases:</color>
<color=#75715e>   * 1. a deadlock is no longer present;</color>
<color=#75715e>   * 2. a deadlock with a different victim is detected;</color>
<color=#75715e>   * When done is false, the caller should retry.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws DeadlockException if the original deadlock (or a deadlock with</color>
<color=#75715e>   * the same victim) is not broken, and the timeout is exceeded.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Pair</color><color=#f92672><</color><color=#f8f8f2>Boolean</color><color=#f8f8f2>,</color> <color=#f8f8f2>DeadlockChecker</color><color=#f92672>></color> <color=#a6e22e>notifyVictim</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>targetedVictim</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>currentLocker</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DeadlockChecker</color> <color=#f8f8f2>lastDC</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>startTime</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>database</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>waitForever</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>timeout</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>

    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Check for a timeout first, to guarantee that we do not "live</color>
<color=#75715e>       * lock" when deadlocks are repeatedly created and resolved in</color>
<color=#75715e>       * other threads.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>waitForever</color> <color=#f92672>&&</color> <color=#f8f8f2>timeRemain</color><color=#f8f8f2>(</color><color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#f8f8f2>startTime</color><color=#f8f8f2>)</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>/*</color>
<color=#75715e>         * The original timeout was exceeded. Flush the current locker</color>
<color=#75715e>         * from the waiters list, and throw DeadlockException using the</color>
<color=#75715e>         * last known deadlock info.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>validateOwnership</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>currentLocker</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>type</color><color=#f8f8f2>,</color>
            <color=#66d9ef>false</color> <color=#75715e>/*getOwnersAndWaiters*/</color><color=#f8f8f2>,</color>
            <color=#66d9ef>true</color> <color=#75715e>/*flushFromWaiters*/</color><color=#f8f8f2>,</color>
            <color=#66d9ef>null</color><color=#f8f8f2>,</color>
            <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

          <color=#75715e>/* The currentLocker unexpectedly became the owner. */</color>
          <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Pair</color><color=#f92672><></color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastDC</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>throw</color> <color=#f8f8f2>makeDeadlockException</color><color=#f8f8f2>(</color><color=#f8f8f2>lastDC</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentLocker</color><color=#f8f8f2>,</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*isVictim*/</color><color=#f8f8f2>,</color> <color=#f8f8f2>database</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Notify the victim and sleep for 1ms to allow the victim to</color>
<color=#75715e>       * wakeup and abort.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>targetedVictim</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>targetedVictim</color><color=#f8f8f2>.</color><color=#a6e22e>notify</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>sleep</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ThreadInterruptedException</color><color=#f8f8f2>(</color><color=#f8f8f2>envImpl</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* If currentLocker is the owner, the deadlock was broken. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isOwner</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentLocker</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Pair</color><color=#f92672><></color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastDC</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>DeadlockChecker</color> <color=#f8f8f2>dc</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DeadlockChecker</color><color=#f8f8f2>(</color><color=#f8f8f2>currentLocker</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If the deadlock was broken, but currentLocker is not the owner,</color>
<color=#75715e>       * then let the caller retry.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>dc</color><color=#f8f8f2>.</color><color=#a6e22e>hasCycle</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>dc</color><color=#f8f8f2>.</color><color=#a6e22e>hasTrueDeadlock</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Pair</color><color=#f92672><></color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastDC</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* We found a true deadlock. */</color>
      <color=#f8f8f2>lastDC</color> <color=#f92672>=</color> <color=#f8f8f2>dc</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If the victim is different, then the original deadlock was</color>
<color=#75715e>       * broken but there is now a new deadlock. Let the caller handle</color>
<color=#75715e>       * the new deadlock.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dc</color><color=#f8f8f2>.</color><color=#a6e22e>chooseTargetedLocker</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>targetedVictim</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Pair</color><color=#f92672><></color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastDC</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * The victim is the same, so for simplicity we assume it is the</color>
<color=#75715e>       * same deadlock. Retry.</color>
<color=#75715e>       */</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>LockConflictException</color> <color=#a6e22e>makeDeadlockException</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DeadlockChecker</color> <color=#f8f8f2>dc</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isVictim</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>database</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>msg</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>msg</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"Deadlock was detected. "</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isVictim</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>msg</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"Locker: \""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>msg</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\" was chosen randomly as the victim.\n"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>msg</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"Unable to break deadlock using random victim "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>msg</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"selection within the timeout interval. "</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>msg</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"Current locker: \""</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>msg</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\" must be aborted.\n"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>database</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>msg</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"DB: "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>database</color><color=#f8f8f2>.</color><color=#a6e22e>getDebugName</color><color=#f8f8f2>()).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>". "</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>msg</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"Timeout: "</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>timeout</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>msg</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"none.\n"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>msg</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>timeout</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"ms.\n"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>msg</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>dc</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>LockConflictException</color> <color=#f8f8f2>ex</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DeadlockException</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>msg</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>

    <color=#f8f8f2>ex</color><color=#f8f8f2>.</color><color=#a6e22e>setOwnerTxnIds</color><color=#f8f8f2>(</color><color=#f8f8f2>getTxnIds</color><color=#f8f8f2>(</color><color=#f8f8f2>dc</color><color=#f8f8f2>.</color><color=#a6e22e>getOwnersForRootLock</color><color=#f8f8f2>()));</color>
    <color=#f8f8f2>ex</color><color=#f8f8f2>.</color><color=#a6e22e>setWaiterTxnIds</color><color=#f8f8f2>(</color><color=#f8f8f2>getTxnIds</color><color=#f8f8f2>(</color><color=#f8f8f2>dc</color><color=#f8f8f2>.</color><color=#a6e22e>getWaitersForRootLock</color><color=#f8f8f2>()));</color>
    <color=#f8f8f2>ex</color><color=#f8f8f2>.</color><color=#a6e22e>setTimeoutMillis</color><color=#f8f8f2>(</color><color=#f8f8f2>timeout</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>ex</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>LockConflictException</color> <color=#a6e22e>makeTimeoutException</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isLockNotTxnTimeout</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockGrantType</color> <color=#f8f8f2>grantType</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>useLock</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>start</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>now</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>database</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>owners</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>waiters</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * getTimeoutInfo synchronizes on the lock table. The timeout exception</color>
<color=#75715e>     * must be created outside that synchronization block because its ctor</color>
<color=#75715e>     * invalidates the txn, sometimes synchronizing on the buddy locker.</color>
<color=#75715e>     * The order of mutex acquisition must always be 1) locker, 2) lock</color>
<color=#75715e>     * table.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>TimeoutInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color>
        <color=#f8f8f2>getTimeoutInfo</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>isLockNotTxnTimeout</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>type</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>grantType</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>useLock</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>start</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>now</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>database</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>owners</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>waiters</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>LockConflictException</color> <color=#f8f8f2>ex</color> <color=#f92672>=</color>
        <color=#f8f8f2>isLockNotTxnTimeout</color>
            <color=#f92672>?</color> <color=#66d9ef>new</color> <color=#f8f8f2>LockTimeoutException</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>message</color><color=#f8f8f2>)</color>
            <color=#f8f8f2>:</color> <color=#66d9ef>new</color> <color=#f8f8f2>TransactionTimeoutException</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>message</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>ex</color><color=#f8f8f2>.</color><color=#a6e22e>setOwnerTxnIds</color><color=#f8f8f2>(</color><color=#f8f8f2>getTxnIds</color><color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>owners</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>ex</color><color=#f8f8f2>.</color><color=#a6e22e>setWaiterTxnIds</color><color=#f8f8f2>(</color><color=#f8f8f2>getTxnIds</color><color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>waiters</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>ex</color><color=#f8f8f2>.</color><color=#a6e22e>setTimeoutMillis</color><color=#f8f8f2>(</color><color=#f8f8f2>timeout</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>ex</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>TimeoutInfo</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>message</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>owners</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>waiters</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>TimeoutInfo</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>message</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>owners</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>waiters</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>message</color> <color=#f92672>=</color> <color=#f8f8f2>message</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>owners</color> <color=#f92672>=</color> <color=#f8f8f2>owners</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>waiters</color> <color=#f92672>=</color> <color=#f8f8f2>waiters</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Create a informative lock or txn timeout message. */</color>
  <color=#66d9ef>abstract</color> <color=#f8f8f2>TimeoutInfo</color> <color=#a6e22e>getTimeoutInfo</color><color=#f8f8f2>(</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>isLockNotTxnTimeout</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>LockType</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>LockGrantType</color> <color=#f8f8f2>grantType</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Lock</color> <color=#f8f8f2>useLock</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>start</color><color=#f8f8f2>,</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>now</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>database</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>owners</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>waiters</color><color=#f8f8f2>);</color>

  <color=#75715e>/** Do the real work of creating an lock or txn timeout message. */</color>
  <color=#f8f8f2>TimeoutInfo</color> <color=#a6e22e>getTimeoutInfoInternal</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isLockNotTxnTimeout</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockGrantType</color> <color=#f8f8f2>grantType</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>useLock</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>timeout</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>start</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>now</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseImpl</color> <color=#f8f8f2>database</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>owners</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>waiters</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Because we're accessing parts of the lock, need to have protected</color>
<color=#75715e>     * access to the lock table because things can be changing out from</color>
<color=#75715e>     * underneath us.  This is a big hammer to grab for so long while we</color>
<color=#75715e>     * traverse the graph, but it's only when we have a deadlock and we're</color>
<color=#75715e>     * creating a debugging message.</color>
<color=#75715e>     *</color>
<color=#75715e>     * The alternative would be to handle ConcurrentModificationExceptions</color>
<color=#75715e>     * and retry until none of them happen.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockTableDump</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"++++++++++ begin lock table dump ++++++++++"</color><color=#f8f8f2>);</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nLockTables</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>dumpToStringNoLatch</color><color=#f8f8f2>(</color><color=#f8f8f2>sb</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>sb</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color> <color=#75715e>// for j...</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ConcurrentModificationException</color> <color=#f8f8f2>CME</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// continue</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>success</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Couldn't dump locktable "</color> <color=#f92672>+</color> <color=#f8f8f2>i</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"++++++++++ end lock table dump ++++++++++"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>isLockNotTxnTimeout</color> <color=#f92672>?</color> <color=#e6db74>"Lock"</color> <color=#f8f8f2>:</color> <color=#e6db74>"Transaction"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" expired. Locker "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>": waited for lock"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>database</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" on database="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>database</color><color=#f8f8f2>.</color><color=#a6e22e>getDebugName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" LockAddr:"</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>identityHashCode</color><color=#f8f8f2>(</color><color=#f8f8f2>useLock</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" LSN="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" type="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" grant="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>grantType</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" timeoutMillis="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>timeout</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" startTime="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>start</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" endTime="</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>now</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\nOwners: "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>owners</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\nWaiters: "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>waiters</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>TimeoutInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(),</color> <color=#f8f8f2>owners</color><color=#f8f8f2>,</color> <color=#f8f8f2>waiters</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#a6e22e>getTxnIds</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>c</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[</color><color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>ret</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>().</color><color=#a6e22e>getId</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Release a lock and possibly notify any waiters that they have been granted the lock.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param lsn The LSN of the lock to release.</color>
<color=#75715e>   * @return true if the lock is released successfully, false if the lock is not currently being</color>
<color=#75715e>   *     held.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>release</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Locker</color><color=#f92672>></color> <color=#f8f8f2>newOwners</color> <color=#f92672>=</color> <color=#f8f8f2>releaseAndFindNotifyTargets</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newOwners</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newOwners</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * There is a new set of owners and/or there are restart</color>
<color=#75715e>       * waiters that should be notified.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Locker</color> <color=#f8f8f2>newOwner</color> <color=#f8f8f2>:</color> <color=#f8f8f2>newOwners</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Use notifyAll to support multiple threads per txn. */</color>
        <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>newOwner</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>newOwner</color><color=#f8f8f2>.</color><color=#a6e22e>notifyAll</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>assert</color> <color=#f8f8f2>EnvironmentImpl</color><color=#f8f8f2>.</color><color=#a6e22e>maybeForceYield</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Release the lock, and return the set of new owners to notify, if any.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return null if the lock does not exist or the given locker was not the owner, a non-empty set</color>
<color=#75715e>   *     if owners should be notified after releasing, an empty set if no notification is required.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>abstract</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Locker</color><color=#f92672>></color> <color=#a6e22e>releaseAndFindNotifyTargets</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Do the real work of releaseAndFindNotifyTargets */</color>
  <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Locker</color><color=#f92672>></color> <color=#a6e22e>releaseAndFindNotifyTargetsInternal</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Lock</color><color=#f92672>></color> <color=#f8f8f2>lockTable</color> <color=#f92672>=</color> <color=#f8f8f2>lockTables</color><color=#f92672>[</color><color=#f8f8f2>lockTableIndex</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Lock</color> <color=#f8f8f2>lock</color> <color=#f92672>=</color> <color=#f8f8f2>lockTable</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lock</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>lock</color> <color=#f92672>=</color> <color=#f8f8f2>lockTable</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lock</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Lock doesn't exist. */</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Locker</color><color=#f92672>></color> <color=#f8f8f2>newOwners</color> <color=#f92672>=</color> <color=#f8f8f2>lock</color><color=#f8f8f2>.</color><color=#a6e22e>release</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>memoryBudget</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newOwners</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Not owner. */</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* If it's not in use at all, remove it from the lock table. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>lock</color><color=#f8f8f2>.</color><color=#a6e22e>nWaiters</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>lock</color><color=#f8f8f2>.</color><color=#a6e22e>nOwners</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

      <color=#f8f8f2>lockTable</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lock</color><color=#f8f8f2>.</color><color=#a6e22e>isThin</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>memoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>updateLockMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>REMOVE_TOTAL_THINLOCKIMPL_OVERHEAD</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>memoryBudget</color><color=#f8f8f2>.</color><color=#a6e22e>updateLockMemoryUsage</color><color=#f8f8f2>(</color><color=#f8f8f2>REMOVE_TOTAL_LOCKIMPL_OVERHEAD</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

      <color=#75715e>/**</color>
<color=#75715e>       * In the deadlock detection process, in order to check that a cycle still exists, we need to</color>
<color=#75715e>       * detect lock release.</color>
<color=#75715e>       *</color>
<color=#75715e>       * <p>During release, we will create a new lock object. During deadlock detection, we compare</color>
<color=#75715e>       * the lock reference in the cycle with the current lock reference; if they are unequal, the</color>
<color=#75715e>       * lock was released.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lock</color><color=#f8f8f2>.</color><color=#a6e22e>isThin</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>lock</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ThinLockImpl</color><color=#f8f8f2>((</color><color=#f8f8f2>ThinLockImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>lock</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>lock</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LockImpl</color><color=#f8f8f2>((</color><color=#f8f8f2>LockImpl</color><color=#f8f8f2>)</color> <color=#f8f8f2>lock</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>lockTable</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>lock</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>newOwners</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Demote a lock from write to read. Call back to the owning locker to move this to its read</color>
<color=#75715e>   * collection.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param lsn The lock to release.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>abstract</color> <color=#66d9ef>void</color> <color=#a6e22e>demote</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Do the real work of demote. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>demoteInternal</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Lock</color><color=#f92672>></color> <color=#f8f8f2>lockTable</color> <color=#f92672>=</color> <color=#f8f8f2>lockTables</color><color=#f92672>[</color><color=#f8f8f2>lockTableIndex</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>useLock</color> <color=#f92672>=</color> <color=#f8f8f2>lockTable</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
    <color=#75715e>/* Lock may or may not be currently held. */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useLock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>useLock</color><color=#f8f8f2>.</color><color=#a6e22e>demote</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>moveWriteToReadLock</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>useLock</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Test the status of the lock on LSN. If any transaction holds any lock on it, true is returned.</color>
<color=#75715e>   * If no transaction holds a lock on it, false is returned.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method is only used by unit tests.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param lsn The LSN to check.</color>
<color=#75715e>   * @return true if any transaction holds any lock on the LSN. false if no lock is held by any</color>
<color=#75715e>   *     transaction.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>abstract</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isLocked</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Do the real work of isLocked. */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isLockedInternal</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Lock</color><color=#f92672>></color> <color=#f8f8f2>lockTable</color> <color=#f92672>=</color> <color=#f8f8f2>lockTables</color><color=#f92672>[</color><color=#f8f8f2>lockTableIndex</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>lockTable</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>entry</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>nOwners</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Return true if this locker owns this a lock of this type on given node. */</color>
  <color=#66d9ef>abstract</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isOwner</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Do the real work of isOwner. */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isOwnerInternal</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Lock</color><color=#f92672>></color> <color=#f8f8f2>lockTable</color> <color=#f92672>=</color> <color=#f8f8f2>lockTables</color><color=#f92672>[</color><color=#f8f8f2>lockTableIndex</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>lockTable</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>entry</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>isOwner</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Return true if this locker is waiting on this lock.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This method is only used by unit tests.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>abstract</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isWaiter</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Do the real work of isWaiter. */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isWaiterInternal</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Lock</color><color=#f92672>></color> <color=#f8f8f2>lockTable</color> <color=#f92672>=</color> <color=#f8f8f2>lockTables</color><color=#f92672>[</color><color=#f8f8f2>lockTableIndex</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>lockTable</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>entry</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>isWaiter</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Return the number of waiters for this lock. */</color>
  <color=#66d9ef>abstract</color> <color=#66d9ef>int</color> <color=#a6e22e>nWaiters</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Do the real work of nWaiters. */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>nWaitersInternal</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Lock</color><color=#f92672>></color> <color=#f8f8f2>lockTable</color> <color=#f92672>=</color> <color=#f8f8f2>lockTables</color><color=#f92672>[</color><color=#f8f8f2>lockTableIndex</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>lockTable</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>entry</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f92672>-</color><color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>nWaiters</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Return the number of owners of this lock. */</color>
  <color=#66d9ef>abstract</color> <color=#66d9ef>int</color> <color=#a6e22e>nOwners</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Do the real work of nWaiters. */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>nOwnersInternal</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Lock</color><color=#f92672>></color> <color=#f8f8f2>lockTable</color> <color=#f92672>=</color> <color=#f8f8f2>lockTables</color><color=#f92672>[</color><color=#f8f8f2>lockTableIndex</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>lockTable</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>entry</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f92672>-</color><color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>nOwners</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** @return the transaction that owns the write lock for this */</color>
  <color=#66d9ef>abstract</color> <color=#f8f8f2>Locker</color> <color=#a6e22e>getWriteOwnerLocker</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Do the real work of getWriteOwnerLocker. */</color>
  <color=#f8f8f2>Locker</color> <color=#a6e22e>getWriteOwnerLockerInternal</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Lock</color><color=#f92672>></color> <color=#f8f8f2>lockTable</color> <color=#f92672>=</color> <color=#f8f8f2>lockTables</color><color=#f92672>[</color><color=#f8f8f2>lockTableIndex</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>lock</color> <color=#f92672>=</color> <color=#f8f8f2>lockTable</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lock</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lock</color><color=#f8f8f2>.</color><color=#a6e22e>nOwners</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* not a write lock */</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>lock</color><color=#f8f8f2>.</color><color=#a6e22e>getWriteOwnerLocker</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Check if the locker owns the lock. If the locker owns the lock, this</color>
<color=#75715e>   * function immediately returns true. If the locker cannot get ownership,</color>
<color=#75715e>   * according to the arguments, this function will choose to do the</color>
<color=#75715e>   * following:</color>
<color=#75715e>   *   get the current owners and waiters of the lock</color>
<color=#75715e>   *   flush this locker from the set of waiters</color>
<color=#75715e>   *</color>
<color=#75715e>   * Note that the ownership checking and the flushing action should be done</color>
<color=#75715e>   * in a critical section to prevent any orphaning of the</color>
<color=#75715e>   * lock -- we must be in a critical section between the time that we check</color>
<color=#75715e>   * ownership and when we flush any waiters (SR #10103)</color>
<color=#75715e>   *</color>
<color=#75715e>   * Concretely, this function is called in the following places:</color>
<color=#75715e>   *</color>
<color=#75715e>   * In waitForLock():</color>
<color=#75715e>   *     After the wait for timeout. Here, only if txn or lock times out, we</color>
<color=#75715e>   *     get the owners and waiters which will be used in timeout exception.</color>
<color=#75715e>   *     If Restart is true, we flush the locker from the waiter list.</color>
<color=#75715e>   *</color>
<color=#75715e>   *     Before throwing DeadlockEx or TimeoutEx when txn or lock times out.</color>
<color=#75715e>   *     Here we only need to flush the locker from waiter list. We do NOT</color>
<color=#75715e>   *     need to get owners and waiters. This is because DeadlockEx does</color>
<color=#75715e>   *     not need owners/waiters information at all and TimeoutEx uses the</color>
<color=#75715e>   *     owners/waiters information which is gotten when locker.wait()</color>
<color=#75715e>   *     wakes up.</color>
<color=#75715e>   *</color>
<color=#75715e>   *  In notifyVictim():</color>
<color=#75715e>   *      After the victim notification fails due to timeout. Here we only</color>
<color=#75715e>   *      need to flush the locker from waiter list to prepare for throwing</color>
<color=#75715e>   *      DeadlockEx.</color>
<color=#75715e>   *</color>
<color=#75715e>   *  In checkAndHandleDeadlock():</color>
<color=#75715e>   *      After we choose the current locker itself as the victim, we want</color>
<color=#75715e>   *      to throw DeadlockEx to abort this locker.  Here we also only</color>
<color=#75715e>   *      need to flush the locker from waiter list to prepare for throwing</color>
<color=#75715e>   *      DeadlockEx.</color>
<color=#75715e>   *</color>
<color=#75715e>   * The real work is done in the following validateOwnershipInternal().</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return true if locker is the owner.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>abstract</color> <color=#66d9ef>boolean</color> <color=#a6e22e>validateOwnership</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>LockType</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>getOwnersAndWaiters</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>flushFromWaiters</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>owners</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>waiters</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#66d9ef>boolean</color> <color=#a6e22e>validateOwnershipInternal</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>getOwnersAndWaiters</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>flushFromWaiters</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>owners</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>waiters</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isOwnerInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getOwnersAndWaiters</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * getOwnersInternal/getWaitersInternal may return null when the</color>
<color=#75715e>       * lock corresponding to the lsn has already not existed.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>owners</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>localOwners</color> <color=#f92672>=</color> <color=#f8f8f2>getOwnersInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>localOwners</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>owners</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>localOwners</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>waiters</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>localWaiters</color> <color=#f92672>=</color> <color=#f8f8f2>getWaitersInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>localWaiters</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>waiters</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>localWaiters</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>flushFromWaiters</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>lockTables</color><color=#f92672>[</color><color=#f8f8f2>lockTableIndex</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entry</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>flushWaiter</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>memoryBudget</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>LockAttemptResult</color> <color=#a6e22e>stealLock</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>lockType</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#f8f8f2>LockAttemptResult</color> <color=#a6e22e>stealLockInternal</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>lockType</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>lockTables</color><color=#f92672>[</color><color=#f8f8f2>lockTableIndex</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>entry</color> <color=#f92672>!=</color> <color=#66d9ef>null</color>
        <color=#f8f8f2>:</color> <color=#e6db74>"Lock "</color> <color=#f92672>+</color> <color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#e6db74>" for txn "</color> <color=#f92672>+</color> <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>getId</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" does not exist"</color><color=#f8f8f2>;</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Note that flushWaiter may do nothing, because the lock may have been</color>
<color=#75715e>     * granted to our locker after the prior call to attemptLock and before</color>
<color=#75715e>     * the call to this method.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>flushWaiter</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>memoryBudget</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>

    <color=#75715e>/* Remove all owners except for our owner. */</color>
    <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>stealLock</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>memoryBudget</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * The lock attempt normally succeeds, but can fail if the lock holder</color>
<color=#75715e>     * is non-preemptable.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>attemptLockInternal</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>lockType</color><color=#f8f8f2>,</color>
        <color=#66d9ef>false</color> <color=#75715e>/*nonBlockingRequest*/</color><color=#f8f8f2>,</color>
        <color=#66d9ef>false</color> <color=#75715e>/*jumpAheadOfWaiters*/</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Called when a ThreadLocker is created. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>registerThreadLocker</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ThreadLocker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>threadLockers</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Thread</color> <color=#f8f8f2>thread</color> <color=#f92672>=</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>TinyHashSet</color><color=#f92672><</color><color=#f8f8f2>ThreadLocker</color><color=#f92672>></color> <color=#f8f8f2>set</color> <color=#f92672>=</color> <color=#f8f8f2>threadLockers</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>thread</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>set</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>added</color> <color=#f92672>=</color> <color=#f8f8f2>set</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>);</color>
      <color=#66d9ef>assert</color> <color=#f8f8f2>added</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>threadLockers</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>thread</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>TinyHashSet</color><color=#f92672><></color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Called when a ThreadLocker is closed. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>unregisterThreadLocker</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ThreadLocker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>threadLockers</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>Thread</color> <color=#f8f8f2>thread</color> <color=#f92672>=</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>();</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>TinyHashSet</color><color=#f92672><</color><color=#f8f8f2>ThreadLocker</color><color=#f92672>></color> <color=#f8f8f2>set</color> <color=#f92672>=</color> <color=#f8f8f2>threadLockers</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>thread</color><color=#f8f8f2>);</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>set</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>removed</color> <color=#f92672>=</color> <color=#f8f8f2>set</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>);</color>
    <color=#66d9ef>assert</color> <color=#f8f8f2>removed</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>threadLockers</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>threadLockers</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>thread</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns an iterator over all thread lockers for the given thread, or an empty iterator if none.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>ThreadLocker</color><color=#f92672>></color> <color=#a6e22e>getThreadLockers</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Thread</color> <color=#f8f8f2>thread</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>threadLockers</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>EMPTY_THREAD_LOCKERS</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>TinyHashSet</color><color=#f92672><</color><color=#f8f8f2>ThreadLocker</color><color=#f92672>></color> <color=#f8f8f2>set</color> <color=#f92672>=</color> <color=#f8f8f2>threadLockers</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>thread</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>set</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>EMPTY_THREAD_LOCKERS</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>set</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Statistics */</color>
  <color=#f8f8f2>LockStats</color> <color=#a6e22e>lockStat</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>latchStats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#e6db74>"Locktable latches"</color><color=#f8f8f2>,</color> <color=#e6db74>"Shows lock table contention"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nLockTables</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>latchStats</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>lockTableLatches</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getStats</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Dump info about the lock table. */</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>tableStats</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#e6db74>"Locktable"</color><color=#f8f8f2>,</color> <color=#e6db74>"The types of locks held in the lock table"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getFast</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dumpLockTable</color><color=#f8f8f2>(</color><color=#f8f8f2>tableStats</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color> <color=#75715e>/*clear*/</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>LockStats</color><color=#f8f8f2>(</color>
        <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>cloneGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getClear</color><color=#f8f8f2>()),</color>
        <color=#f8f8f2>latchStats</color><color=#f8f8f2>.</color><color=#a6e22e>cloneGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getClear</color><color=#f8f8f2>()),</color>
        <color=#f8f8f2>tableStats</color><color=#f8f8f2>.</color><color=#a6e22e>cloneGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getClear</color><color=#f8f8f2>()));</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>StatGroup</color> <color=#a6e22e>loadStats</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>StatsConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>copyStats</color> <color=#f92672>=</color> <color=#f8f8f2>stats</color><color=#f8f8f2>.</color><color=#a6e22e>cloneGroup</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getClear</color><color=#f8f8f2>());</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>latchStats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#e6db74>"Locktable latches"</color><color=#f8f8f2>,</color> <color=#e6db74>"Shows lock table contention"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nLockTables</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>latchStats</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>lockTableLatches</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getStats</color><color=#f8f8f2>());</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getClear</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>lockTableLatches</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>clearStats</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Add all the latch stats to the whole stats group. */</color>
    <color=#f8f8f2>copyStats</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>latchStats</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>tableStats</color> <color=#f92672>=</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#e6db74>"Locktable"</color><color=#f8f8f2>,</color> <color=#e6db74>"The types of locks held in the lock table"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getFast</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>dumpLockTable</color><color=#f8f8f2>(</color><color=#f8f8f2>tableStats</color><color=#f8f8f2>,</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getClear</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* Add all the lock table stats to the whole stats group. */</color>
    <color=#f8f8f2>copyStats</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>tableStats</color><color=#f8f8f2>);</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>copyStats</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Dump the lock table to the lock stats. */</color>
  <color=#66d9ef>abstract</color> <color=#66d9ef>void</color> <color=#a6e22e>dumpLockTable</color><color=#f8f8f2>(</color><color=#f8f8f2>StatGroup</color> <color=#f8f8f2>tableStats</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>clear</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Do the real work of dumpLockTableInternal. */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>dumpLockTableInternal</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>tableStats</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>clear</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>StatGroup</color> <color=#f8f8f2>oneTable</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StatGroup</color><color=#f8f8f2>(</color><color=#e6db74>"Single lock table"</color><color=#f8f8f2>,</color> <color=#e6db74>"Temporary stat group"</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>IntStat</color> <color=#f8f8f2>totalLocks</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>IntStat</color><color=#f8f8f2>(</color><color=#f8f8f2>oneTable</color><color=#f8f8f2>,</color> <color=#f8f8f2>LOCK_TOTAL</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>IntStat</color> <color=#f8f8f2>waiters</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>IntStat</color><color=#f8f8f2>(</color><color=#f8f8f2>oneTable</color><color=#f8f8f2>,</color> <color=#f8f8f2>LOCK_WAITERS</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>IntStat</color> <color=#f8f8f2>owners</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>IntStat</color><color=#f8f8f2>(</color><color=#f8f8f2>oneTable</color><color=#f8f8f2>,</color> <color=#f8f8f2>LOCK_OWNERS</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>IntStat</color> <color=#f8f8f2>readLocks</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>IntStat</color><color=#f8f8f2>(</color><color=#f8f8f2>oneTable</color><color=#f8f8f2>,</color> <color=#f8f8f2>LOCK_READ_LOCKS</color><color=#f8f8f2>);</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>IntStat</color> <color=#f8f8f2>writeLocks</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>IntStat</color><color=#f8f8f2>(</color><color=#f8f8f2>oneTable</color><color=#f8f8f2>,</color> <color=#f8f8f2>LOCK_WRITE_LOCKS</color><color=#f8f8f2>);</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Lock</color><color=#f92672>></color> <color=#f8f8f2>lockTable</color> <color=#f92672>=</color> <color=#f8f8f2>lockTables</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>totalLocks</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>lockTable</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>());</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>lock</color> <color=#f8f8f2>:</color> <color=#f8f8f2>lockTable</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>waiters</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>lock</color><color=#f8f8f2>.</color><color=#a6e22e>nWaiters</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>owners</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>lock</color><color=#f8f8f2>.</color><color=#a6e22e>nOwners</color><color=#f8f8f2>());</color>

      <color=#75715e>/* Go through all the owners for a lock. */</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>info</color> <color=#f8f8f2>:</color> <color=#f8f8f2>lock</color><color=#f8f8f2>.</color><color=#a6e22e>getOwnersClone</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>getLockType</color><color=#f8f8f2>().</color><color=#a6e22e>isWriteLock</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>writeLocks</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>readLocks</color><color=#f8f8f2>.</color><color=#a6e22e>increment</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>tableStats</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>oneTable</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Debugging */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>dump</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>dumpToString</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#a6e22e>dumpToString</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nLockTables</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>lockTableLatches</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>acquireExclusive</color><color=#f8f8f2>();</color>
      <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dumpToStringNoLatch</color><color=#f8f8f2>(</color><color=#f8f8f2>sb</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>lockTableLatches</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>release</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>dumpToStringNoLatch</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>whichTable</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Lock</color><color=#f92672>></color> <color=#f8f8f2>lockTable</color> <color=#f92672>=</color> <color=#f8f8f2>lockTables</color><color=#f92672>[</color><color=#f8f8f2>whichTable</color><color=#f92672>]</color><color=#f8f8f2>;</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Lock</color><color=#f92672>></color> <color=#f8f8f2>entry</color> <color=#f8f8f2>:</color> <color=#f8f8f2>lockTable</color><color=#f8f8f2>.</color><color=#a6e22e>entrySet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>();</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>lock</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"---- LSN: "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>)).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"----\n"</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>lock</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'\n'</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Internal class for deadlock detection.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>DeadlockChecker</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>rootLocker</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>rootLocktype</color><color=#f8f8f2>;</color>

    <color=#75715e>/** The owners and waiters for the root Lock which will be contained in DeadlockException. */</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>ownersForRootLock</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>waitersForRootLock</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>CycleNode</color><color=#f92672>></color> <color=#f8f8f2>cycle</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><></color><color=#f8f8f2>();</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates an instance of this class.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param locker the locker which is waiting for the lock</color>
<color=#75715e>     * @param lsn the lock ID which the locker is waiting for</color>
<color=#75715e>     * @param locktype the request type for the lock</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>DeadlockChecker</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>locktype</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>rootLocker</color> <color=#f92672>=</color> <color=#f8f8f2>locker</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>lsn</color> <color=#f92672>=</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>rootLocktype</color> <color=#f92672>=</color> <color=#f8f8f2>locktype</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>Locker</color> <color=#a6e22e>chooseTargetedLocker</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Java 8 can directly use method ArrayList.sort</color>
<color=#75715e>       * (Comparator<? super E> c), but Java 7 does not have this method.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CycleNode</color><color=#f92672>[]</color> <color=#f8f8f2>cycleNodeArray</color> <color=#f92672>=</color> <color=#f8f8f2>cycle</color><color=#f8f8f2>.</color><color=#a6e22e>toArray</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>CycleNode</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CycleNodeComparator</color> <color=#f8f8f2>cnc</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CycleNodeComparator</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>sort</color><color=#f8f8f2>(</color><color=#f8f8f2>cycleNodeArray</color><color=#f8f8f2>,</color> <color=#f8f8f2>cnc</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>cycleNodeArray</color><color=#f92672>[</color><color=#f8f8f2>getTargetedLockerIndex</color><color=#f8f8f2>()</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * This method should guarantee that the same deadlock will return the</color>
<color=#75715e>     * same Locker index that will be targeted for abort.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>int</color> <color=#a6e22e>getTargetedLockerIndex</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>sum</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>nLockers</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>CycleNode</color> <color=#f8f8f2>cn</color> <color=#f8f8f2>:</color> <color=#f8f8f2>cycle</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         *  Sum the Lock pointers (System.identityHashCode(lock))</color>
<color=#75715e>         *  rather than the locker IDs and LSNs. Since the</color>
<color=#75715e>         *  identityHashCode will change when a Lock is released</color>
<color=#75715e>         *  and new Lock is allocated, this will ensure that we don't</color>
<color=#75715e>         *  always pick the same victim for the same deadlock, if the</color>
<color=#75715e>         *  same deadlock (same locks and lockers) happens repeatedly.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>sum</color> <color=#f92672>+=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>identityHashCode</color><color=#f8f8f2>(</color><color=#f8f8f2>cn</color><color=#f8f8f2>.</color><color=#a6e22e>getLock</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>nLockers</color><color=#f92672>++</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       *  Note that System.identityHashCode may return a negative value</color>
<color=#75715e>       *  on AIX, so we use Math.abs() below.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>abs</color><color=#f8f8f2>(</color><color=#f8f8f2>sum</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#f8f8f2>nLockers</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>boolean</color> <color=#a6e22e>hasCycle</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>getOwnerAndWaitersForRootLocker</color><color=#f8f8f2>();</color>
      <color=#75715e>/*</color>
<color=#75715e>       * The rootLocker may own several locks, so we do not know</color>
<color=#75715e>       * which one involves in the deadlock cycle. So we just set</color>
<color=#75715e>       * the type of lock owned by rootLocker to null.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>hasCycleInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>rootLocker</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>rootLocktype</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>boolean</color> <color=#a6e22e>hasCycleInternal</color><color=#f8f8f2>(</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>checkedLocker</color><color=#f8f8f2>,</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>requestLocktype</color><color=#f8f8f2>,</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>ownLockType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>final</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>checkedLock</color><color=#f8f8f2>;</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>ownersForCheckedLock</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * When entering this function, we think that the checkedLocker is</color>
<color=#75715e>       * waiting for the lsn(checkedLock), so we want to continue to get</color>
<color=#75715e>       * the owners(ownersForCheckedLock) of the lsn.</color>
<color=#75715e>       *</color>
<color=#75715e>       * But we need to first check whether now the checkedLocker owns</color>
<color=#75715e>       * the lsn(checkedLock).</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color> <color=#f92672>=</color> <color=#f8f8f2>getLockTableIndex</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
      <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockTableLatches</color><color=#f92672>[</color><color=#f8f8f2>lockTableIndex</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isOwnerInternal</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>checkedLocker</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>requestLocktype</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Lock</color><color=#f92672>></color> <color=#f8f8f2>lockTable</color> <color=#f92672>=</color> <color=#f8f8f2>lockTables</color><color=#f92672>[</color><color=#f8f8f2>lockTableIndex</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>checkedLock</color> <color=#f92672>=</color> <color=#f8f8f2>lockTable</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>ownersForCheckedLock</color> <color=#f92672>=</color> <color=#f8f8f2>getOwnersInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ownersForCheckedLock</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * checkedLock may be null. If so, then ownersForCheckedLock must</color>
<color=#75715e>       * be null. So if ownersForCheckedLock is non-null, then</color>
<color=#75715e>       * checkedLock must be non-null.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CycleNode</color> <color=#f8f8f2>cn</color> <color=#f92672>=</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>CycleNode</color><color=#f8f8f2>(</color><color=#f8f8f2>checkedLocker</color><color=#f8f8f2>,</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>checkedLock</color><color=#f8f8f2>,</color> <color=#f8f8f2>requestLocktype</color><color=#f8f8f2>,</color> <color=#f8f8f2>ownLockType</color><color=#f8f8f2>);</color>

      <color=#f8f8f2>cycle</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>cn</color><color=#f8f8f2>);</color>

      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>LockInfo</color> <color=#f8f8f2>info</color> <color=#f8f8f2>:</color> <color=#f8f8f2>ownersForCheckedLock</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color> <color=#f92672>=</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>ownType</color> <color=#f92672>=</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>getLockType</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>waitsFor</color> <color=#f92672>=</color> <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>getWaitingFor</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>requestType</color> <color=#f92672>=</color> <color=#f8f8f2>locker</color><color=#f8f8f2>.</color><color=#a6e22e>getWaitingForType</color><color=#f8f8f2>();</color>
        <color=#75715e>/*</color>
<color=#75715e>         * The constraint "locker != checkedLocker" handles the</color>
<color=#75715e>         * following scenario:</color>
<color=#75715e>         *     locker owns a read lock and now it wants to acquire a</color>
<color=#75715e>         *     write lock, but it needs to wait. Then this locker will</color>
<color=#75715e>         *     check for a deadlock and it will check the owner(s) of</color>
<color=#75715e>         *     the lock. Because this locker itself is also the owner</color>
<color=#75715e>         *     of this lock, it will choose itself as the "new owner"</color>
<color=#75715e>         *     and then check the owners of the waitingFor of the</color>
<color=#75715e>         *     "new owner". Then it will continue to check itself. This</color>
<color=#75715e>         *     will cause java.lang.StackOverflowError</color>
<color=#75715e>         *</color>
<color=#75715e>         *  Without this constraint,</color>
<color=#75715e>         *  com.sleepycat.je.DatabaseConfigTest.testConfigConflict will</color>
<color=#75715e>         *  get java.lang.StackOverflowError.</color>
<color=#75715e>         *</color>
<color=#75715e>         *  With this constraint, we STILL can detect the following</color>
<color=#75715e>         *  deadlock:</color>
<color=#75715e>         *       locker1                           locker2</color>
<color=#75715e>         *</color>
<color=#75715e>         *       hold read lock on lsn</color>
<color=#75715e>         *</color>
<color=#75715e>         *                                    hold read lock on lsn</color>
<color=#75715e>         *</color>
<color=#75715e>         * acquire write lock(wait_promotion)</color>
<color=#75715e>         *</color>
<color=#75715e>         *                           acquire write lock(wait_promotion)</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>locker</color> <color=#f92672>!=</color> <color=#f8f8f2>checkedLocker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>locker</color> <color=#f92672>==</color> <color=#f8f8f2>rootLocker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>/* Found a cycle */</color>
            <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>

          <color=#75715e>/*</color>
<color=#75715e>           * This handles the situation when a partial cycle exists.</color>
<color=#75715e>           * If we do not handle a "partial cycle", a locker may</color>
<color=#75715e>           * detect a deadlock, but the true deadlock exists in two</color>
<color=#75715e>           * other different lockers. Then, this locker will would</color>
<color=#75715e>           * infinitely invoke hasCycleInternal().</color>
<color=#75715e>           */</color>
          <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>index</color> <color=#f92672><</color> <color=#f8f8f2>cycle</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color> <color=#f8f8f2>index</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cycle</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>).</color><color=#a6e22e>getLocker</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>locker</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#75715e>/* Get partial cycle. It is the true deadlock. */</color>
              <color=#f8f8f2>cycle</color><color=#f8f8f2>.</color><color=#a6e22e>subList</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>index</color><color=#f8f8f2>).</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
              <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>

          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>waitsFor</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>requestType</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>ownType</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasCycleInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>,</color> <color=#f8f8f2>waitsFor</color><color=#f8f8f2>,</color> <color=#f8f8f2>requestType</color><color=#f8f8f2>,</color> <color=#f8f8f2>ownType</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>cycle</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>cn</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>boolean</color> <color=#a6e22e>hasTrueDeadlock</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>CycleNode</color> <color=#f8f8f2>cn</color> <color=#f8f8f2>:</color> <color=#f8f8f2>cycle</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>lock</color> <color=#f92672>=</color> <color=#f8f8f2>cn</color><color=#f8f8f2>.</color><color=#a6e22e>getLock</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color> <color=#f92672>=</color> <color=#f8f8f2>cn</color><color=#f8f8f2>.</color><color=#a6e22e>getLsn</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>realtimeLock</color><color=#f8f8f2>;</color>

        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color> <color=#f92672>=</color> <color=#f8f8f2>getLockTableIndex</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
        <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockTableLatches</color><color=#f92672>[</color><color=#f8f8f2>lockTableIndex</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f8f8f2>,</color> <color=#f8f8f2>Lock</color><color=#f92672>></color> <color=#f8f8f2>lockTable</color> <color=#f92672>=</color> <color=#f8f8f2>lockTables</color><color=#f92672>[</color><color=#f8f8f2>lockTableIndex</color><color=#f92672>]</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>realtimeLock</color> <color=#f92672>=</color> <color=#f8f8f2>lockTable</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>realtimeLock</color> <color=#f92672>!=</color> <color=#f8f8f2>lock</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * In order to get consistent owners and waiters, we cannot call</color>
<color=#75715e>     * getOwners(lsn) and getWaiters(lsn) separately. We get them</color>
<color=#75715e>     * atomically while synchronized on the lock table.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>void</color> <color=#a6e22e>getOwnerAndWaitersForRootLocker</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lockTableIndex</color> <color=#f92672>=</color> <color=#f8f8f2>getLockTableIndex</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>);</color>
      <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>lockTableLatches</color><color=#f92672>[</color><color=#f8f8f2>lockTableIndex</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>localOwners</color> <color=#f92672>=</color> <color=#f8f8f2>getOwnersInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>localOwners</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>ownersForRootLock</color> <color=#f92672>=</color> <color=#f8f8f2>localOwners</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#f8f8f2>localWaiters</color> <color=#f92672>=</color> <color=#f8f8f2>getWaitersInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockTableIndex</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>localWaiters</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>waitersForRootLock</color> <color=#f92672>=</color> <color=#f8f8f2>localWaiters</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#a6e22e>getOwnersForRootLock</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>ownersForRootLock</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>LockInfo</color><color=#f92672>></color> <color=#a6e22e>getWaitersForRootLock</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>waitersForRootLock</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>

      <color=#f8f8f2>Lock</color> <color=#f8f8f2>preLock</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>Long</color> <color=#f8f8f2>preLsn</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>CycleNode</color> <color=#f8f8f2>cn</color> <color=#f8f8f2>:</color> <color=#f8f8f2>cycle</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color> <color=#f92672>=</color> <color=#f8f8f2>cn</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>lock</color> <color=#f92672>=</color> <color=#f8f8f2>cn</color><color=#f8f8f2>.</color><color=#a6e22e>getLock</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color> <color=#f92672>=</color> <color=#f8f8f2>cn</color><color=#f8f8f2>.</color><color=#a6e22e>getLsn</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>requestType</color> <color=#f92672>=</color> <color=#f8f8f2>cn</color><color=#f8f8f2>.</color><color=#a6e22e>getRequestLockType</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>ownType</color> <color=#f92672>=</color> <color=#f8f8f2>cn</color><color=#f8f8f2>.</color><color=#a6e22e>getOwnLockType</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>preLock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"Locker: \""</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\" owns lock: "</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>identityHashCode</color><color=#f8f8f2>(</color><color=#f8f8f2>preLock</color><color=#f8f8f2>));</color>
          <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"(LSN: "</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>preLsn</color><color=#f8f8f2>));</color>
          <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>", ownedType: "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>ownType</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"). "</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"Locker: \""</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>locker</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\" waits for lock: "</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>identityHashCode</color><color=#f8f8f2>(</color><color=#f8f8f2>lock</color><color=#f8f8f2>)).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"(LSN: "</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>DbLsn</color><color=#f8f8f2>.</color><color=#a6e22e>getNoFormatString</color><color=#f8f8f2>(</color><color=#f8f8f2>lsn</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>", requestType: "</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>requestType</color><color=#f8f8f2>).</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>")."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>preLock</color> <color=#f92672>=</color> <color=#f8f8f2>lock</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>preLsn</color> <color=#f92672>=</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>class</color> <color=#a6e22e>CycleNodeComparator</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Comparator</color> <color=#f8f8f2>{</color>
      <color=#a6e22e>@Override</color>
      <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>compare</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>obj1</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>obj2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>CycleNode</color> <color=#f8f8f2>nc1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>CycleNode</color><color=#f8f8f2>)</color> <color=#f8f8f2>obj1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>CycleNode</color> <color=#f8f8f2>nc2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>CycleNode</color><color=#f8f8f2>)</color> <color=#f8f8f2>obj2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>nc1</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>().</color><color=#a6e22e>getWaiterThreadId</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>nc2</color><color=#f8f8f2>.</color><color=#a6e22e>getLocker</color><color=#f8f8f2>().</color><color=#a6e22e>getWaiterThreadId</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/** Represents each node in the cycle. */</color>
    <color=#66d9ef>class</color> <color=#a6e22e>CycleNode</color> <color=#f8f8f2>{</color>

      <color=#75715e>/** The locker which waits on the lock. */</color>
      <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>;</color>

      <color=#75715e>/** The lsn which represents the lock. It will not change if the lock is released. */</color>
      <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>;</color>

      <color=#75715e>/**</color>
<color=#75715e>       * The Lock instance. Releasing a lock will re-create a new Lock object. By comparing it with</color>
<color=#75715e>       * the lock gotten by lsn, we can determine whether the lock was released during the deadlock</color>
<color=#75715e>       * detection process.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>lock</color><color=#f8f8f2>;</color>

      <color=#75715e>/* The lock request type. */</color>
      <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>requestLockType</color><color=#f8f8f2>;</color>

      <color=#75715e>/*</color>
<color=#75715e>       * If this locker is involved in a cycle, is must own some lock.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>ownLockType</color><color=#f8f8f2>;</color>

      <color=#f8f8f2>CycleNode</color><color=#f8f8f2>(</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>locker</color><color=#f8f8f2>,</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>Long</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>,</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>Lock</color> <color=#f8f8f2>lock</color><color=#f8f8f2>,</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>requestLockType</color><color=#f8f8f2>,</color>
          <color=#66d9ef>final</color> <color=#f8f8f2>LockType</color> <color=#f8f8f2>ownLockType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>locker</color> <color=#f92672>=</color> <color=#f8f8f2>locker</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>lsn</color> <color=#f92672>=</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>lock</color> <color=#f92672>=</color> <color=#f8f8f2>lock</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>requestLockType</color> <color=#f92672>=</color> <color=#f8f8f2>requestLockType</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>ownLockType</color> <color=#f92672>=</color> <color=#f8f8f2>ownLockType</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>private</color> <color=#f8f8f2>Locker</color> <color=#a6e22e>getLocker</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>locker</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>private</color> <color=#f8f8f2>Long</color> <color=#a6e22e>getLsn</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>lsn</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>private</color> <color=#f8f8f2>Lock</color> <color=#a6e22e>getLock</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>lock</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>private</color> <color=#f8f8f2>LockType</color> <color=#a6e22e>getRequestLockType</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>requestLockType</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>private</color> <color=#f8f8f2>LockType</color> <color=#a6e22e>getOwnLockType</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>ownLockType</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Returned by waitForLock(). */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>WaitForLockResult</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>targetVictim</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DeadlockChecker</color> <color=#f8f8f2>dc</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockAttemptResult</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>WaitForLockResult</color><color=#f8f8f2>(</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>targetVictim</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DeadlockChecker</color> <color=#f8f8f2>dc</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockAttemptResult</color> <color=#f8f8f2>result</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>targetVictim</color> <color=#f92672>=</color> <color=#f8f8f2>targetVictim</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dc</color> <color=#f92672>=</color> <color=#f8f8f2>dc</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>result</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>Locker</color> <color=#a6e22e>getVictim</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>targetVictim</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>DeadlockChecker</color> <color=#a6e22e>getDeadLockChecker</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>dc</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>LockAttemptResult</color> <color=#a6e22e>getResult</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** The result of checking for deadlocks, and handling a deadlock if one is found. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>DeadlockResult</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isOwner</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>trueDeadlock</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>victim</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DeadlockChecker</color> <color=#f8f8f2>dc</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>DeadlockResult</color><color=#f8f8f2>(</color>
        <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isOwner</color><color=#f8f8f2>,</color>
        <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>trueDeadlock</color><color=#f8f8f2>,</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>Locker</color> <color=#f8f8f2>victim</color><color=#f8f8f2>,</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>DeadlockChecker</color> <color=#f8f8f2>dc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>isOwner</color> <color=#f92672>=</color> <color=#f8f8f2>isOwner</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>trueDeadlock</color> <color=#f92672>=</color> <color=#f8f8f2>trueDeadlock</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>victim</color> <color=#f92672>=</color> <color=#f8f8f2>victim</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dc</color> <color=#f92672>=</color> <color=#f8f8f2>dc</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>