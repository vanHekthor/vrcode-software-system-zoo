<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.util</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.ArrayList</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.List</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Splitter is used to split a string based on a delimiter. Support includes double quoted strings,</color>
<color=#75715e> * and the escape character. Raw tokens are returned that include the double quotes, white space,</color>
<color=#75715e> * and escape characters.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Splitter</color> <color=#f8f8f2>{</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>char</color> <color=#f8f8f2>QUOTECHAR</color> <color=#f92672>=</color> <color=#e6db74>'"'</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>char</color> <color=#f8f8f2>ESCAPECHAR</color> <color=#f92672>=</color> <color=#e6db74>'\\'</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>char</color> <color=#f8f8f2>delimiter</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>tokens</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>();</color>

  <color=#66d9ef>private</color> <color=#66d9ef>enum</color> <color=#f8f8f2>StateType</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>COLLECT</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>COLLECTANY</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>QUOTE</color>
  <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>StateType</color> <color=#f8f8f2>prevState</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>StateType</color> <color=#f8f8f2>state</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>startIndex</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>curIndex</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#f8f8f2>row</color><color=#f8f8f2>;</color>

  <color=#66d9ef>public</color> <color=#a6e22e>Splitter</color><color=#f8f8f2>(</color><color=#66d9ef>char</color> <color=#f8f8f2>delimiter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>delimiter</color> <color=#f92672>=</color> <color=#f8f8f2>delimiter</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>public</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#a6e22e>tokenize</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>inrow</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>row</color> <color=#f92672>=</color> <color=#f8f8f2>inrow</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#f8f8f2>StateType</color><color=#f8f8f2>.</color><color=#a6e22e>COLLECT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>tokens</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>startIndex</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>curIndex</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>cur</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>cur</color> <color=#f92672><</color> <color=#f8f8f2>row</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color> <color=#f8f8f2>cur</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>char</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>row</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>cur</color><color=#f8f8f2>);</color>
      <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>state</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>COLLECT</color><color=#f8f8f2>:</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isDelimiter</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>outputToken</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>startIndex</color> <color=#f92672>=</color> <color=#f8f8f2>cur</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>curIndex</color> <color=#f92672>=</color> <color=#f8f8f2>startIndex</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isQuote</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>isQuoteState</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#f8f8f2>StateType</color><color=#f8f8f2>.</color><color=#a6e22e>QUOTE</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isEscape</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>prevState</color> <color=#f92672>=</color> <color=#f8f8f2>state</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#f8f8f2>StateType</color><color=#f8f8f2>.</color><color=#a6e22e>COLLECTANY</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>curIndex</color><color=#f92672>++</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>COLLECTANY</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>curIndex</color><color=#f92672>++</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#f8f8f2>prevState</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>QUOTE</color><color=#f8f8f2>:</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isEscape</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>prevState</color> <color=#f92672>=</color> <color=#f8f8f2>state</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#f8f8f2>StateType</color><color=#f8f8f2>.</color><color=#a6e22e>COLLECTANY</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isQuote</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#f8f8f2>StateType</color><color=#f8f8f2>.</color><color=#a6e22e>COLLECT</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>curIndex</color><color=#f92672>++</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>outputToken</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>retvals</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[</color><color=#f8f8f2>tokens</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>tokens</color><color=#f8f8f2>.</color><color=#a6e22e>toArray</color><color=#f8f8f2>(</color><color=#f8f8f2>retvals</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>retvals</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isQuote</color><color=#f8f8f2>(</color><color=#66d9ef>char</color> <color=#f8f8f2>c</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#f8f8f2>QUOTECHAR</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isEscape</color><color=#f8f8f2>(</color><color=#66d9ef>char</color> <color=#f8f8f2>c</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#f8f8f2>ESCAPECHAR</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isDelimiter</color><color=#f8f8f2>(</color><color=#66d9ef>char</color> <color=#f8f8f2>c</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#f8f8f2>delimiter</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>outputToken</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>startIndex</color> <color=#f92672><</color> <color=#f8f8f2>curIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>tokens</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>row</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>startIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>curIndex</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>tokens</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#e6db74>""</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isQuoteState</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>startIndex</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>curIndex</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>isWhitespace</color><color=#f8f8f2>(</color><color=#f8f8f2>row</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>