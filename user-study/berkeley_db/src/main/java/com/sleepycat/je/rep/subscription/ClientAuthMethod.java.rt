<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.rep.subscription</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.log.LogUtils</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.net.DataChannel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.ServiceDispatcher</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.rep.utilint.ServiceHandshake</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteBuffer</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Object represents a subscription authentication method used in service handshake at client side</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ClientAuthMethod</color> <color=#66d9ef>implements</color> <color=#f8f8f2>ServiceHandshake</color><color=#f8f8f2>.</color><color=#a6e22e>AuthenticationMethod</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>SubscriptionAuthHandler</color> <color=#f8f8f2>clientAuthHandler</color><color=#f8f8f2>;</color>

  <color=#f8f8f2>ClientAuthMethod</color><color=#f8f8f2>(</color><color=#f8f8f2>SubscriptionAuthHandler</color> <color=#f8f8f2>clientAuthHandler</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>clientAuthHandler</color> <color=#f92672>=</color> <color=#f8f8f2>clientAuthHandler</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getMechanismName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>SubscriptionConfig</color><color=#f8f8f2>.</color><color=#a6e22e>SERVICE_HANDSHAKE_AUTH_METHOD</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ServiceHandshake</color><color=#f8f8f2>.</color><color=#a6e22e>ClientInitOp</color> <color=#a6e22e>getClientOp</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>ServiceHandshake</color><color=#f8f8f2>.</color><color=#a6e22e>ClientHandshake</color> <color=#f8f8f2>initState</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ignoredParams</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ClientTokenOp</color><color=#f8f8f2>(</color><color=#f8f8f2>initState</color><color=#f8f8f2>,</color> <color=#f8f8f2>clientAuthHandler</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>ServiceHandshake</color><color=#f8f8f2>.</color><color=#a6e22e>ServerInitOp</color> <color=#a6e22e>getServerOp</color><color=#f8f8f2>(</color><color=#f8f8f2>ServiceHandshake</color><color=#f8f8f2>.</color><color=#a6e22e>ServerHandshake</color> <color=#f8f8f2>initState</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ServerTokenOp</color><color=#f8f8f2>(</color><color=#f8f8f2>initState</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getServerParams</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#e6db74>""</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Client side authentication */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ClientTokenOp</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ServiceHandshake</color><color=#f8f8f2>.</color><color=#a6e22e>ClientInitOp</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>SubscriptionAuthHandler</color> <color=#f8f8f2>auth</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>ClientTokenOp</color><color=#f8f8f2>(</color><color=#f8f8f2>ServiceHandshake</color><color=#f8f8f2>.</color><color=#a6e22e>ClientHandshake</color> <color=#f8f8f2>initState</color><color=#f8f8f2>,</color> <color=#f8f8f2>SubscriptionAuthHandler</color> <color=#f8f8f2>auth</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>initState</color><color=#f8f8f2>);</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>auth</color> <color=#f92672>=</color> <color=#f8f8f2>auth</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>ServiceHandshake</color><color=#f8f8f2>.</color><color=#a6e22e>InitResult</color> <color=#a6e22e>processOp</color><color=#f8f8f2>(</color><color=#f8f8f2>ServiceHandshake</color><color=#f8f8f2>.</color><color=#a6e22e>IOAdapter</color> <color=#f8f8f2>ioAdapter</color><color=#f8f8f2>)</color>
        <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

      <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>token</color> <color=#f92672>=</color> <color=#f8f8f2>auth</color><color=#f8f8f2>.</color><color=#a6e22e>getToken</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>token</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>token</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"Token cannot be null or empty"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* write size of token */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>szBuf</color> <color=#f92672>=</color> <color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>allocate</color><color=#f8f8f2>(</color><color=#ae81ff>4</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writeInt</color><color=#f8f8f2>(</color><color=#f8f8f2>szBuf</color><color=#f8f8f2>,</color> <color=#f8f8f2>token</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>ioAdapter</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>szBuf</color><color=#f8f8f2>.</color><color=#a6e22e>array</color><color=#f8f8f2>());</color>
      <color=#75715e>/* write token */</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>tokenBuf</color> <color=#f92672>=</color> <color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>allocate</color><color=#f8f8f2>(</color><color=#f8f8f2>token</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>LogUtils</color><color=#f8f8f2>.</color><color=#a6e22e>writeBytesNoLength</color><color=#f8f8f2>(</color><color=#f8f8f2>tokenBuf</color><color=#f8f8f2>,</color> <color=#f8f8f2>token</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>ioAdapter</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>tokenBuf</color><color=#f8f8f2>.</color><color=#a6e22e>array</color><color=#f8f8f2>());</color>

      <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>responseByte</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>ioAdapter</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>responseByte</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"No service authenticate response byte: "</color> <color=#f92672>+</color> <color=#f8f8f2>result</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ServiceDispatcher</color><color=#f8f8f2>.</color><color=#a6e22e>Response</color> <color=#f8f8f2>response</color> <color=#f92672>=</color> <color=#f8f8f2>ServiceDispatcher</color><color=#f8f8f2>.</color><color=#a6e22e>Response</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>responseByte</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>response</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"Unexpected read response byte: "</color> <color=#f92672>+</color> <color=#f8f8f2>responseByte</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>setResponse</color><color=#f8f8f2>(</color><color=#f8f8f2>response</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>ServiceHandshake</color><color=#f8f8f2>.</color><color=#a6e22e>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>DONE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Server side authentication, effectively no-op except rejecting handshake and it is not supposed</color>
<color=#75715e>   * to be called at server-side.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>class</color> <color=#a6e22e>ServerTokenOp</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ServiceHandshake</color><color=#f8f8f2>.</color><color=#a6e22e>ServerInitOp</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>ServerTokenOp</color><color=#f8f8f2>(</color><color=#f8f8f2>ServiceHandshake</color><color=#f8f8f2>.</color><color=#a6e22e>ServerHandshake</color> <color=#f8f8f2>initState</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>initState</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>ServiceHandshake</color><color=#f8f8f2>.</color><color=#a6e22e>InitResult</color> <color=#a6e22e>processOp</color><color=#f8f8f2>(</color><color=#f8f8f2>DataChannel</color> <color=#f8f8f2>channel</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>ServiceHandshake</color><color=#f8f8f2>.</color><color=#a6e22e>InitResult</color><color=#f8f8f2>.</color><color=#a6e22e>FAIL</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>