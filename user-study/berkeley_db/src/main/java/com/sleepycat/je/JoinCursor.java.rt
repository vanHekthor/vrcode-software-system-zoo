<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.CursorImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.GetMode</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.sleepycat.je.dbi.SearchMode</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.Closeable</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Arrays</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Comparator</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.logging.Level</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A specialized join cursor for use in performing equality or natural joins on secondary indices.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>A join cursor is returned when calling {@link Database#join Database.join}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>To open a join cursor using two secondary cursors:</color>
<color=#75715e> *</color>
<color=#75715e> * <pre></color>
<color=#75715e> *     Transaction txn = ...</color>
<color=#75715e> *     Database primaryDb = ...</color>
<color=#75715e> *     SecondaryDatabase secondaryDb1 = ...</color>
<color=#75715e> *     SecondaryDatabase secondaryDb2 = ...</color>
<color=#75715e> *     <p></color>
<color=#75715e> *     SecondaryCursor cursor1 = null;</color>
<color=#75715e> *     SecondaryCursor cursor2 = null;</color>
<color=#75715e> *     JoinCursor joinCursor = null;</color>
<color=#75715e> *     try {</color>
<color=#75715e> *         DatabaseEntry key = new DatabaseEntry();</color>
<color=#75715e> *         DatabaseEntry data = new DatabaseEntry();</color>
<color=#75715e> *         <p></color>
<color=#75715e> *         cursor1 = secondaryDb1.openSecondaryCursor(txn, null);</color>
<color=#75715e> *         cursor2 = secondaryDb2.openSecondaryCursor(txn, null);</color>
<color=#75715e> *         <p></color>
<color=#75715e> *         key.setData(...); // initialize key for secondary index 1</color>
<color=#75715e> *         OperationStatus status1 =</color>
<color=#75715e> *         cursor1.getSearchKey(key, data, LockMode.DEFAULT);</color>
<color=#75715e> *         key.setData(...); // initialize key for secondary index 2</color>
<color=#75715e> *         OperationStatus status2 =</color>
<color=#75715e> *         cursor2.getSearchKey(key, data, LockMode.DEFAULT);</color>
<color=#75715e> *         <p></color>
<color=#75715e> *         if (status1 == OperationStatus.SUCCESS &amp;&amp;</color>
<color=#75715e> *                 status2 == OperationStatus.SUCCESS) {</color>
<color=#75715e> *             <p></color>
<color=#75715e> *             SecondaryCursor[] cursors = {cursor1, cursor2};</color>
<color=#75715e> *             joinCursor = primaryDb.join(cursors, null);</color>
<color=#75715e> *             <p></color>
<color=#75715e> *             while (true) {</color>
<color=#75715e> *                 OperationStatus joinStatus = joinCursor.getNext(key, data,</color>
<color=#75715e> *                     LockMode.DEFAULT);</color>
<color=#75715e> *                 if (joinStatus == OperationStatus.SUCCESS) {</color>
<color=#75715e> *                      // Do something with the key and data.</color>
<color=#75715e> *                 } else {</color>
<color=#75715e> *                     break;</color>
<color=#75715e> *                 }</color>
<color=#75715e> *             }</color>
<color=#75715e> *         }</color>
<color=#75715e> *     } finally {</color>
<color=#75715e> *         if (cursor1 != null) {</color>
<color=#75715e> *             cursor1.close();</color>
<color=#75715e> *         }</color>
<color=#75715e> *         if (cursor2 != null) {</color>
<color=#75715e> *             cursor2.close();</color>
<color=#75715e> *         }</color>
<color=#75715e> *         if (joinCursor != null) {</color>
<color=#75715e> *             joinCursor.close();</color>
<color=#75715e> *         }</color>
<color=#75715e> *     }</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The join algorithm is described here so that its cost can be estimated and compared to other</color>
<color=#75715e> * approaches for performing a query. Say that N cursors are provided for the join operation.</color>
<color=#75715e> * According to the order they appear in the array the cursors are labeled C(1) through C(n), and</color>
<color=#75715e> * the keys at each cursor position are labeled K(1) through K(n).</color>
<color=#75715e> *</color>
<color=#75715e> * <ol></color>
<color=#75715e> *   <li>Using C(1), the join algorithm iterates sequentially through all records having K(1). This</color>
<color=#75715e> *       iteration is equivalent to a {@link Cursor#getNextDup Cursor.getNextDup} operation on the</color>
<color=#75715e> *       secondary index. The primary key of a candidate record is determined in this manner. The</color>
<color=#75715e> *       primary record itself is not retrieved and the primary database is not accessed.</color>
<color=#75715e> *   <li>For each candidate primary key found in step 1, a Btree lookup is performed using C(2)</color>
<color=#75715e> *       through C(n), in that order. The Btree lookups are exact searches to determine whether the</color>
<color=#75715e> *       candidate record also contains secondary keys K(2) through K(n). The lookups are equivalent</color>
<color=#75715e> *       to a {@link Cursor#getSearchBoth Cursor.getSearchBoth} operation on the secondary index.</color>
<color=#75715e> *       The primary record itself is not retrieved and the primary database is not accessed.</color>
<color=#75715e> *   <li>If any lookup in step 2 fails, the algorithm advances to the next candidate record using</color>
<color=#75715e> *       C(1). Lookups are performed in the order of the cursor array, and the algorithm proceeds to</color>
<color=#75715e> *       the next C(1) candidate key as soon as a single lookup fails.</color>
<color=#75715e> *   <li>If all lookups in step 2 succeed, then the matching key and/or data is returned by the</color>
<color=#75715e> *       {@code getNext} method. If the {@link #getNext(DatabaseEntry,DatabaseEntry,LockMode)}</color>
<color=#75715e> *       method signature is used, then the primary database is read to obtain the record data, as</color>
<color=#75715e> *       if {@link Cursor#getSearchKey Cursor.getSearchKey} were called for the primary database. If</color>
<color=#75715e> *       the {@link #getNext(DatabaseEntry,LockMode)} method signature is used, then only the</color>
<color=#75715e> *       primary key is returned and the primary database is not accessed.</color>
<color=#75715e> *   <li>The algorithm ends when C(1) has no more candidate records with K(1), and the {@code</color>
<color=#75715e> *       getNext} method will then return {@link com.sleepycat.je.OperationStatus#NOTFOUND</color>
<color=#75715e> *       OperationStatus.NOTFOUND}.</color>
<color=#75715e> * </ol></color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>JoinCursor</color> <color=#66d9ef>implements</color> <color=#f8f8f2>ForwardCursor</color><color=#f8f8f2>,</color> <color=#f8f8f2>Closeable</color> <color=#f8f8f2>{</color>

  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>JoinConfig</color> <color=#f8f8f2>config</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>priDb</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Cursor</color><color=#f92672>[]</color> <color=#f8f8f2>secCursors</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color><color=#f92672>[]</color> <color=#f8f8f2>cursorScratchEntries</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>scratchEntry</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>firstSecKey</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color><color=#f92672>[]</color> <color=#f8f8f2>cursorFetchedFirst</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Creates a join cursor without parameter checking. */</color>
  <color=#f8f8f2>JoinCursor</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Database</color> <color=#f8f8f2>primaryDb</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Cursor</color><color=#f92672>[]</color> <color=#f8f8f2>cursors</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>JoinConfig</color> <color=#f8f8f2>configParam</color><color=#f8f8f2>)</color>
      <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>priDb</color> <color=#f92672>=</color> <color=#f8f8f2>primaryDb</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>config</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>configParam</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>configParam</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>JoinConfig</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>scratchEntry</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>firstSecKey</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>cursorScratchEntries</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f92672>[</color><color=#f8f8f2>cursors</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>cursors</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cursorScratchEntries</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DatabaseEntry</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>cursorFetchedFirst</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>boolean</color><color=#f92672>[</color><color=#f8f8f2>cursors</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Cursor</color><color=#f92672>[]</color> <color=#f8f8f2>sortedCursors</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Cursor</color><color=#f92672>[</color><color=#f8f8f2>cursors</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>cursors</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>sortedCursors</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>cursors</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>getNoSort</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*</color>
<color=#75715e>       * Sort ascending by duplicate count.  Collect counts before</color>
<color=#75715e>       * sorting so that countEstimate is called only once per cursor.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>final</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>counts</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[</color><color=#f8f8f2>cursors</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>cursors</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>counts</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>cursors</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>countEstimateInternal</color><color=#f8f8f2>();</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>counts</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>sort</color><color=#f8f8f2>(</color>
          <color=#f8f8f2>sortedCursors</color><color=#f8f8f2>,</color>
          <color=#66d9ef>new</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#f8f8f2>Cursor</color><color=#f92672>></color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>compare</color><color=#f8f8f2>(</color><color=#f8f8f2>Cursor</color> <color=#f8f8f2>o1</color><color=#f8f8f2>,</color> <color=#f8f8f2>Cursor</color> <color=#f8f8f2>o2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>long</color> <color=#f8f8f2>count1</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
              <color=#66d9ef>long</color> <color=#f8f8f2>count2</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>

              <color=#75715e>/*</color>
<color=#75715e>               * Scan for objects in cursors not sortedCursors since</color>
<color=#75715e>               * sortedCursors is being sorted in place.</color>
<color=#75715e>               */</color>
              <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>cursors</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>count1</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>count2</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cursors</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>o1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                  <color=#f8f8f2>count1</color> <color=#f92672>=</color> <color=#f8f8f2>counts</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cursors</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>o2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                  <color=#f8f8f2>count2</color> <color=#f92672>=</color> <color=#f8f8f2>counts</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
              <color=#f8f8f2>}</color>
              <color=#66d9ef>assert</color> <color=#f8f8f2>count1</color> <color=#f92672>>=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>count2</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
              <color=#66d9ef>long</color> <color=#f8f8f2>cmp</color> <color=#f92672>=</color> <color=#f8f8f2>count1</color> <color=#f92672>-</color> <color=#f8f8f2>count2</color><color=#f8f8f2>;</color>
              <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>cmp</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#f8f8f2>((</color><color=#f8f8f2>cmp</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>});</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Dup cursors last.  If an error occurs before the constructor is</color>
<color=#75715e>     * complete, close them and ignore exceptions during close.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>secCursors</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Cursor</color><color=#f92672>[</color><color=#f8f8f2>cursors</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>cursors</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>secCursors</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>sortedCursors</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>dup</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>close</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color> <color=#75715e>/* will throw e */</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Closes the cursors that have been opened by this join cursor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The cursors passed to {@link Database#join Database.join} are not closed by this method, and</color>
<color=#75715e>   * should be closed by the caller.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>WARNING: To guard against memory leaks, the application should discard all references to the</color>
<color=#75715e>   * closed handle. While BDB makes an effort to discard references from closed objects to the</color>
<color=#75715e>   * allocated memory for an environment, this behavior is not guaranteed. The safe course of action</color>
<color=#75715e>   * for an application is to discard all references to closed BDB objects.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>priDb</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>close</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Close all cursors we own, throwing only the first exception that occurs.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param firstException an exception that has already occured, or null.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>firstException</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>{</color>

    <color=#f8f8f2>priDb</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>secCursors</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>secCursors</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>secCursors</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>DatabaseException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstException</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>firstException</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>secCursors</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>firstException</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>firstException</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** For unit testing. */</color>
  <color=#f8f8f2>Cursor</color><color=#f92672>[]</color> <color=#a6e22e>getSortedCursors</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>secCursors</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the primary database handle associated with this cursor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the primary database handle associated with this cursor.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Database</color> <color=#a6e22e>getDatabase</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>priDb</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns this object's configuration.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return this object's configuration.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>JoinConfig</color> <color=#a6e22e>getConfig</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>config</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the next primary key and data resulting from the join operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param getType is {@link Get#NEXT}.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Get</color> <color=#f8f8f2>getType</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ReadOptions</color> <color=#f8f8f2>options</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getType</color> <color=#f92672>!=</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Get type not allowed: "</color> <color=#f92672>+</color> <color=#f8f8f2>getType</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>options</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>options</color><color=#f8f8f2>.</color><color=#a6e22e>getLockMode</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>options</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>options</color><color=#f8f8f2>.</color><color=#a6e22e>getCacheMode</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>secCursors</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>checkEnv</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>secCursors</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>trace</color><color=#f8f8f2>(</color><color=#f8f8f2>Level</color><color=#f8f8f2>.</color><color=#a6e22e>FINEST</color><color=#f8f8f2>,</color> <color=#f8f8f2>getType</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(),</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>

      <color=#66d9ef>return</color> <color=#f8f8f2>retrieveNext</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color> <color=#f8f8f2>E</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>priDb</color><color=#f8f8f2>.</color><color=#a6e22e>getEnv</color><color=#f8f8f2>().</color><color=#a6e22e>invalidate</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color><color=#f8f8f2>);</color>
      <color=#66d9ef>throw</color> <color=#f8f8f2>E</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * This operation is not allowed on a join cursor. {@link UnsupportedOperationException} will</color>
<color=#75715e>   * always be thrown by this method.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getCurrent</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the next primary key resulting from the join operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>An entry is returned by the join cursor for each primary key/data pair having all secondary</color>
<color=#75715e>   * key values that were specified using the array of secondary cursors passed to {@link</color>
<color=#75715e>   * Database#join Database.join}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key the key returned as <a href="DatabaseEntry.html#outParam">output</a>.</color>
<color=#75715e>   * @param lockMode the locking attributes; if null, default attributes are used. {@link</color>
<color=#75715e>   *     LockMode#READ_COMMITTED} is not allowed.</color>
<color=#75715e>   * @return {@link com.sleepycat.je.OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no</color>
<color=#75715e>   *     matching key/data pair is found; otherwise, {@link com.sleepycat.je.OperationStatus#SUCCESS</color>
<color=#75715e>   *     OperationStatus.SUCCESS}.</color>
<color=#75715e>   * @throws OperationFailureException if one of the <a</color>
<color=#75715e>   *     href="OperationFailureException.html#readFailures">Read Operation Failures</a> occurs.</color>
<color=#75715e>   * @throws EnvironmentFailureException if an unexpected, internal or environment-wide failure</color>
<color=#75715e>   *     occurs.</color>
<color=#75715e>   * @throws IllegalStateException if the cursor or database has been closed, or the</color>
<color=#75715e>   *     non-transactional cursor was created in a different thread.</color>
<color=#75715e>   * @throws IllegalArgumentException if an invalid parameter is specified.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getNext</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getNext</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the next primary key and data resulting from the join operation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>An entry is returned by the join cursor for each primary key/data pair having all secondary</color>
<color=#75715e>   * key values that were specified using the array of secondary cursors passed to {@link</color>
<color=#75715e>   * Database#join Database.join}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>OperationStatus</color> <color=#a6e22e>getNext</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>Get</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT</color><color=#f8f8f2>,</color> <color=#f8f8f2>DbInternal</color><color=#f8f8f2>.</color><color=#a6e22e>getReadOptions</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>));</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>NOTFOUND</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OperationStatus</color><color=#f8f8f2>.</color><color=#a6e22e>SUCCESS</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Internal version of getNext(), with an optional data param.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Since duplicates are always sorted and duplicate-duplicates are not allowed, a natural join</color>
<color=#75715e>   * can be implemented by simply traversing through the duplicates of the first cursor to find</color>
<color=#75715e>   * candidate keys, and then looking for each candidate key in the duplicate set of the other</color>
<color=#75715e>   * cursors, without ever reseting a cursor to the beginning of the duplicate set.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>This only works when the same duplicate comparison method is used for all cursors. We don't</color>
<color=#75715e>   * check for that, we just assume the user won't violate that rule.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>A future optimization would be to add a SearchMode.BOTH_DUPS operation and use it instead of</color>
<color=#75715e>   * using SearchMode.BOTH. This would be the equivalent of the undocumented DB_GET_BOTHC operation</color>
<color=#75715e>   * used by DB core's join() implementation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>OperationResult</color> <color=#a6e22e>retrieveNext</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>keyParam</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>dataParam</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>LockMode</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>CacheMode</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>readUncommitted</color> <color=#f92672>=</color> <color=#f8f8f2>secCursors</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>isReadUncommittedMode</color><color=#f8f8f2>(</color><color=#f8f8f2>lockMode</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>outerLoop</color><color=#f8f8f2>:</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/* Process the first cursor to get a candidate key. */</color>
      <color=#f8f8f2>Cursor</color> <color=#f8f8f2>secCursor</color> <color=#f92672>=</color> <color=#f8f8f2>secCursors</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>candidateKey</color> <color=#f92672>=</color> <color=#f8f8f2>cursorScratchEntries</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>OperationResult</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>cursorFetchedFirst</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Get first duplicate at initial cursor position. */</color>
        <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>secCursor</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>firstSecKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>candidateKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>readUncommitted</color> <color=#f92672>&&</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Deleted underneath read-uncommitted cursor; skip it. */</color>
          <color=#f8f8f2>cursorFetchedFirst</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>cursorFetchedFirst</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* Already initialized, move to the next candidate key. */</color>
        <color=#f8f8f2>result</color> <color=#f92672>=</color>
            <color=#f8f8f2>secCursor</color><color=#f8f8f2>.</color><color=#a6e22e>retrieveNext</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>firstSecKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>candidateKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>GetMode</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT_DUP</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* No more candidate keys. */</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* Process the second and following cursors. */</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>secCursors</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>secCursor</color> <color=#f92672>=</color> <color=#f8f8f2>secCursors</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>DatabaseEntry</color> <color=#f8f8f2>secKey</color> <color=#f92672>=</color> <color=#f8f8f2>cursorScratchEntries</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>cursorFetchedFirst</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>secCursor</color><color=#f8f8f2>.</color><color=#a6e22e>getCurrentInternal</color><color=#f8f8f2>(</color><color=#f8f8f2>secKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>scratchEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>);</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>readUncommitted</color> <color=#f92672>&&</color> <color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>/* Deleted underneath read-uncommitted; skip it. */</color>
            <color=#f8f8f2>result</color> <color=#f92672>=</color>
                <color=#f8f8f2>secCursor</color><color=#f8f8f2>.</color><color=#a6e22e>retrieveNext</color><color=#f8f8f2>(</color><color=#f8f8f2>secKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>scratchEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>GetMode</color><color=#f8f8f2>.</color><color=#a6e22e>NEXT_DUP</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#75715e>/* All keys were deleted; no possible match. */</color>
              <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>cursorFetchedFirst</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>scratchEntry</color><color=#f8f8f2>.</color><color=#a6e22e>setData</color><color=#f8f8f2>(</color><color=#f8f8f2>secKey</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color> <color=#f8f8f2>secKey</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>secKey</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>result</color> <color=#f92672>=</color>
            <color=#f8f8f2>secCursor</color><color=#f8f8f2>.</color><color=#a6e22e>search</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>scratchEntry</color><color=#f8f8f2>,</color> <color=#f8f8f2>candidateKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>cacheMode</color><color=#f8f8f2>,</color> <color=#f8f8f2>SearchMode</color><color=#f8f8f2>.</color><color=#a6e22e>BOTH</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* No match, get another candidate key. */</color>
          <color=#66d9ef>continue</color> <color=#f8f8f2>outerLoop</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/* The candidate key was found for all cursors. */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dataParam</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>secCursors</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>readPrimaryAfterGet</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>priDb</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>firstSecKey</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>candidateKey</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>dataParam</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>lockMode</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>readUncommitted</color><color=#f8f8f2>,</color>
            <color=#66d9ef>false</color> <color=#75715e>/*lockPrimaryOnly*/</color><color=#f8f8f2>,</color>
            <color=#66d9ef>false</color> <color=#75715e>/*verifyPrimary*/</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>secCursors</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getCursorImpl</color><color=#f8f8f2>().</color><color=#a6e22e>getLocker</color><color=#f8f8f2>(),</color>
            <color=#f8f8f2>secCursors</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabase</color><color=#f8f8f2>(),</color>
            <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#75715e>/* Deleted underneath read-uncommitted cursor; skip it. */</color>
          <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Copy primary info to all secondary cursors. The 0th cursor</color>
<color=#75715e>         * was updated above with the primary info.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>CursorImpl</color> <color=#f8f8f2>firstSecCursor</color> <color=#f92672>=</color> <color=#f8f8f2>secCursors</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>cursorImpl</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>secCursors</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>secCursors</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>cursorImpl</color><color=#f8f8f2>.</color><color=#a6e22e>setPriInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>firstSecCursor</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>keyParam</color><color=#f8f8f2>.</color><color=#a6e22e>setData</color><color=#f8f8f2>(</color><color=#f8f8f2>candidateKey</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>(),</color> <color=#f8f8f2>candidateKey</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(),</color> <color=#f8f8f2>candidateKey</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>());</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>