<color=#75715e>/*-</color>
<color=#75715e> * Copyright (C) 2002, 2017, Oracle and/or its affiliates. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * This file was distributed by Oracle as part of a version of Oracle Berkeley</color>
<color=#75715e> * DB Java Edition made available at:</color>
<color=#75715e> *</color>
<color=#75715e> * http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html</color>
<color=#75715e> *</color>
<color=#75715e> * Please see the LICENSE file included in the top-level directory of the</color>
<color=#75715e> * appropriate version of Oracle Berkeley DB Java Edition for a copy of the</color>
<color=#75715e> * license and additional information.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.je.tree</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Contains static methods for estimating record storage size.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Currently this only applies to KVS because we assume that VLSNs are preserved.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>StorageSize</color> <color=#f8f8f2>{</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Maximum size of the per-LN overhead.</color>
<color=#75715e>   *</color>
<color=#75715e>   * The overhead is variable and depends on several factors, see</color>
<color=#75715e>   * LNLogEntry.getSize(). The following cases are considered:</color>
<color=#75715e>   *</color>
<color=#75715e>   *  25: cleaned and migrated LN (no txn info), no TTL:</color>
<color=#75715e>   *      22: header (type, checksum, flags, prevOffset, size, vlsn)</color>
<color=#75715e>   *      2: data length</color>
<color=#75715e>   *      1: flags</color>
<color=#75715e>   *</color>
<color=#75715e>   *  43: insertion, with TTL:</color>
<color=#75715e>   *      25: same as above</color>
<color=#75715e>   *      2: expiration</color>
<color=#75715e>   *      8: txnId</color>
<color=#75715e>   *      8: lastLoggedLsn</color>
<color=#75715e>   *</color>
<color=#75715e>   *  53: update, with TTL:</color>
<color=#75715e>   *      43: same as above</color>
<color=#75715e>   *      8: abortLsn</color>
<color=#75715e>   *      2: abortExpiration</color>
<color=#75715e>   *</color>
<color=#75715e>   * 50 is used as a conservative estimate for LN_OVERHEAD. Updates will be</color>
<color=#75715e>   * relatively infrequent.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LN_OVERHEAD</color> <color=#f92672>=</color> <color=#ae81ff>50</color><color=#f8f8f2>;</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Maximum size of the per-slot overhead.</color>
<color=#75715e>   *</color>
<color=#75715e>   * The overhead is variable and depends on several factors, see</color>
<color=#75715e>   * IN.getLogSize. The following cases are considered:</color>
<color=#75715e>   *</color>
<color=#75715e>   *  11: Minimum for all cases</color>
<color=#75715e>   *      8: lsn</color>
<color=#75715e>   *      1: keySize</color>
<color=#75715e>   *      1: state</color>
<color=#75715e>   *      1: expiration</color>
<color=#75715e>   *</color>
<color=#75715e>   *  12: Secondary DB, with TTL</color>
<color=#75715e>   *      11: minimum above</color>
<color=#75715e>   *      1: data size</color>
<color=#75715e>   *</color>
<color=#75715e>   *  13: Separate LN in primary DB, with TTL</color>
<color=#75715e>   *      11: minimum above</color>
<color=#75715e>   *      2: lastLoggedSize</color>
<color=#75715e>   *</color>
<color=#75715e>   *  20: Embedded LN in primary DB, with TTL</color>
<color=#75715e>   *      11: minimum above</color>
<color=#75715e>   *      1: data size</color>
<color=#75715e>   *      8: vlsn</color>
<color=#75715e>   *</color>
<color=#75715e>   * 12 is used for SEC_SLOT_OVERHEAD as a conservative estimate.</color>
<color=#75715e>   *</color>
<color=#75715e>   * 14 is used for PRI_SLOT_OVERHEAD and in the customer formula for both</color>
<color=#75715e>   * the separate LN and embedded LN cases. The slot overhead for the</color>
<color=#75715e>   * embedded case will be larger, but in that case there are significant</color>
<color=#75715e>   * savings because the primary key is not duplicated.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SEC_SLOT_OVERHEAD</color> <color=#f92672>=</color> <color=#ae81ff>12</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>PRI_SLOT_OVERHEAD</color> <color=#f92672>=</color> <color=#ae81ff>14</color><color=#f8f8f2>;</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>PRI_EMBEDDED_LN_SLOT_OVERHEAD</color> <color=#f92672>=</color> <color=#ae81ff>20</color><color=#f8f8f2>;</color>

  <color=#75715e>/* Static methods only. */</color>
  <color=#66d9ef>private</color> <color=#a6e22e>StorageSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the estimated disk storage size for the record in the given BIN slot. This method does</color>
<color=#75715e>   * not fetch the LN.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>For KVS, a formula that customers will use to predict the storage for a given set of</color>
<color=#75715e>   * records, not including obsolete size (size available for reclamation by the cleaner), is as</color>
<color=#75715e>   * follows.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>The storage overhead for a single Row (JE primary record) is:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <pre></color>
<color=#75715e>   *  Serialized size of the Row, all fields (JE key + data size)</color>
<color=#75715e>   *    +</color>
<color=#75715e>   *  Serialized size of the PrimaryKey fields (JE key size)</color>
<color=#75715e>   *    +</color>
<color=#75715e>   *  Fixed per-Row internal overhead (64: LN_OVERHEAD + PRI_SLOT_OVERHEAD)</color>
<color=#75715e>   * </pre></color>
<color=#75715e>   *</color>
<color=#75715e>   * The storage overhead for an Index record is:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <pre></color>
<color=#75715e>   *  Serialized size of the IndexKey fields (JE key size)</color>
<color=#75715e>   *    +</color>
<color=#75715e>   *  Serialized size of the PrimaryKey fields (JE data size)</color>
<color=#75715e>   *    +</color>
<color=#75715e>   *  Fixed per-IndexKey internal overhead (12: SEC_SLOT_OVERHEAD)</color>
<color=#75715e>   * </pre></color>
<color=#75715e>   *</color>
<color=#75715e>   * This method returns the size estimate for an actual record based on the use of that formula,</color>
<color=#75715e>   * getting the key and data size (or lastLoggedSize) from the BIN. The amount calculated using the</color>
<color=#75715e>   * formula above will normally be larger than the size returned by this method, for several</color>
<color=#75715e>   * reasons:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>This method uses the key size after it is reduced by prefix compression.</color>
<color=#75715e>   *   <li>For a separate (non-embedded) LN, this method uses the lastLoggedSize rather than adding</color>
<color=#75715e>   *       LN_OVERHEAD to the data size (this is why LN_OVERHEAD is not referenced in code here).</color>
<color=#75715e>   *       This is more accurate since the actual LN overhead is reduced due to integer packing,</color>
<color=#75715e>   *       etc. Also, this method cannot fetch the LN, so the data size is unknown.</color>
<color=#75715e>   *   <li>For an embedded LN in a primary DB, the returned size does not include the LN size, since</color>
<color=#75715e>   *       the LN is always obsolete. This means the primary key size is not counted redundantly and</color>
<color=#75715e>   *       the LN_OVERHEAD is not included in the return value, as they are in the formula. These</color>
<color=#75715e>   *       are significant differences, but since embedded LNs require a data size LTE 16, this is</color>
<color=#75715e>   *       not expected to be a common use case. If it becomes common, we should add a new case for</color>
<color=#75715e>   *       this to the customer formula.</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * In addition, the size returned by this method will normally be larger than the actual storage</color>
<color=#75715e>   * size on disk. This is because this method uses PRI_SLOT_OVERHEAD and SEC_SLOT_OVERHEAD to</color>
<color=#75715e>   * calculate the Btree slot space, rather than using the serialized size of the slot. These</color>
<color=#75715e>   * constant values are somewhat larger than the actual overheads, since they do not take into</color>
<color=#75715e>   * account integer packing, etc. See the comments above these constants. The serialized slot size</color>
<color=#75715e>   * was not used here for simplicity and speed, plus this additional size compensates for uncounted</color>
<color=#75715e>   * sizes such as per-BIN and UIN overhead.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the estimated storage size, or zero when the size is unknown because a non-embedded LN</color>
<color=#75715e>   *     is not resident and the LN was logged with a JE version prior to 6.0.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getStorageSize</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>BIN</color> <color=#f8f8f2>bin</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>idx</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>storedKeySize</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getStoredKeySize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>     * For a JE secondary DB record (KVS Index record), return:</color>
<color=#75715e>     *</color>
<color=#75715e>     *   data-size + key-size + SEC_SLOT_OVERHEAD</color>
<color=#75715e>     *</color>
<color=#75715e>     *    where data-size is serialized IndexKey size</color>
<color=#75715e>     *    and key-size is serialized PrimaryKey size.</color>
<color=#75715e>     *</color>
<color=#75715e>     * The storedKeySize includes key-size, data-size, and one extra byte</color>
<color=#75715e>     * for data (primary key) size. We subtract it here because it is</color>
<color=#75715e>     * included in SEC_SLOT_OVERHEAD.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getDatabase</color><color=#f8f8f2>().</color><color=#a6e22e>getSortedDuplicates</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>storedKeySize</color> <color=#f92672>-</color> <color=#ae81ff>1</color> <color=#f92672>+</color> <color=#f8f8f2>SEC_SLOT_OVERHEAD</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * For an embedded-LN JE primary DB record (KVS Row):</color>
<color=#75715e>     *</color>
<color=#75715e>     *   Return data-size + key-size + PRI_SLOT_OVERHEAD</color>
<color=#75715e>     *</color>
<color=#75715e>     *    where (data-size + key-size) is serialized Row size</color>
<color=#75715e>     *    and key-size is serialized PrimaryKey size</color>
<color=#75715e>     *</color>
<color=#75715e>     * The storedKeySize includes key-size, data-size, and one extra byte</color>
<color=#75715e>     * for data (primary key) size. We subtract it here because it is</color>
<color=#75715e>     * included in PRI_EMBEDDED_LN_SLOT_OVERHEAD.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>isEmbeddedLN</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>storedKeySize</color> <color=#f92672>-</color> <color=#ae81ff>1</color> <color=#f92672>+</color> <color=#f8f8f2>PRI_EMBEDDED_LN_SLOT_OVERHEAD</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * For a separate (non-embedded) JE primary DB record (KVS Row):</color>
<color=#75715e>     *</color>
<color=#75715e>     *   Return LN-log-size + key-size + PRI_SLOT_OVERHEAD</color>
<color=#75715e>     *</color>
<color=#75715e>     *    where LN-log-size is LN_OVERHEAD (or less) + data-size + key-size</color>
<color=#75715e>     *    and (data-size + key-size) is serialized Row size</color>
<color=#75715e>     *    and key-size is serialized PrimaryKey size</color>
<color=#75715e>     *</color>
<color=#75715e>     * The storedKeySize is the key-size alone.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>lastLoggedSize</color> <color=#f92672>=</color> <color=#f8f8f2>bin</color><color=#f8f8f2>.</color><color=#a6e22e>getLastLoggedSize</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lastLoggedSize</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/* Size is unknown. */</color>
      <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>lastLoggedSize</color> <color=#f92672>+</color> <color=#f8f8f2>storedKeySize</color> <color=#f92672>+</color> <color=#f8f8f2>PRI_SLOT_OVERHEAD</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>