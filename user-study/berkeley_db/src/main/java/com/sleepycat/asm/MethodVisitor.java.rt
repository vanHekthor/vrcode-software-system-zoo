<color=#75715e>/***</color>
<color=#75715e> * ASM: a very small and fast Java bytecode manipulation framework</color>
<color=#75715e> * Copyright (c) 2000-2011 INRIA, France Telecom</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions</color>
<color=#75715e> * are met:</color>
<color=#75715e> * 1. Redistributions of source code must retain the above copyright</color>
<color=#75715e> *    notice, this list of conditions and the following disclaimer.</color>
<color=#75715e> * 2. Redistributions in binary form must reproduce the above copyright</color>
<color=#75715e> *    notice, this list of conditions and the following disclaimer in the</color>
<color=#75715e> *    documentation and/or other materials provided with the distribution.</color>
<color=#75715e> * 3. Neither the name of the copyright holders nor the names of its</color>
<color=#75715e> *    contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *    this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</color>
<color=#75715e> * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE</color>
<color=#75715e> * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR</color>
<color=#75715e> * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF</color>
<color=#75715e> * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS</color>
<color=#75715e> * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN</color>
<color=#75715e> * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)</color>
<color=#75715e> * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF</color>
<color=#75715e> * THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.asm</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A visitor to visit a Java method. The methods of this class must be called in the following</color>
<color=#75715e> * order: ( <tt>visitParameter</tt> )* [ <tt>visitAnnotationDefault</tt> ] (</color>
<color=#75715e> * <tt>visitAnnotation</tt> | <tt>visitTypeAnnotation</tt> | <tt>visitAttribute</tt> )* [</color>
<color=#75715e> * <tt>visitCode</tt> ( <tt>visitFrame</tt> | <tt>visit<i>X</i>Insn</tt> | <tt>visitLabel</tt> |</color>
<color=#75715e> * <tt>visitInsnAnnotation</tt> | <tt>visitTryCatchBlock</tt> |</color>
<color=#75715e> * <tt>visitTryCatchBlockAnnotation</tt> | <tt>visitLocalVariable</tt> |</color>
<color=#75715e> * <tt>visitLocalVariableAnnotation</tt> | <tt>visitLineNumber</tt> )* <tt>visitMaxs</tt> ]</color>
<color=#75715e> * <tt>visitEnd</tt>. In addition, the <tt>visit<i>X</i>Insn</tt> and <tt>visitLabel</tt> methods</color>
<color=#75715e> * must be called in the sequential order of the bytecode instructions of the visited code,</color>
<color=#75715e> * <tt>visitInsnAnnotation</tt> must be called <i>after</i> the annotated instruction,</color>
<color=#75715e> * <tt>visitTryCatchBlock</tt> must be called <i>before</i> the labels passed as arguments have been</color>
<color=#75715e> * visited, <tt>visitTryCatchBlockAnnotation</tt> must be called <i>after</i> the corresponding try</color>
<color=#75715e> * catch block has been visited, and the <tt>visitLocalVariable</tt>,</color>
<color=#75715e> * <tt>visitLocalVariableAnnotation</tt> and <tt>visitLineNumber</tt> methods must be called</color>
<color=#75715e> * <i>after</i> the labels passed as arguments have been visited.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Eric Bruneton</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>MethodVisitor</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The ASM API version implemented by this visitor. The value of this field must be one of {@link</color>
<color=#75715e>   * Opcodes#ASM4} or {@link Opcodes#ASM5}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>api</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The method visitor to which this visitor must delegate method calls. May be null. */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs a new {@link MethodVisitor}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param api the ASM API version implemented by this visitor. Must be one of {@link Opcodes#ASM4}</color>
<color=#75715e>   *     or {@link Opcodes#ASM5}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>MethodVisitor</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>api</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>api</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs a new {@link MethodVisitor}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param api the ASM API version implemented by this visitor. Must be one of {@link Opcodes#ASM4}</color>
<color=#75715e>   *     or {@link Opcodes#ASM5}.</color>
<color=#75715e>   * @param mv the method visitor to which this visitor must delegate method calls. May be null.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>MethodVisitor</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>api</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>api</color> <color=#f92672>!=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ASM4</color> <color=#f92672>&&</color> <color=#f8f8f2>api</color> <color=#f92672>!=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ASM5</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>api</color> <color=#f92672>=</color> <color=#f8f8f2>api</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>mv</color> <color=#f92672>=</color> <color=#f8f8f2>mv</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// -------------------------------------------------------------------------</color>
  <color=#75715e>// Parameters, annotations and non standard attributes</color>
  <color=#75715e>// -------------------------------------------------------------------------</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits a parameter of this method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param name parameter name or null if none is provided.</color>
<color=#75715e>   * @param access the parameter's access flags, only <tt>ACC_FINAL</tt>, <tt>ACC_SYNTHETIC</tt></color>
<color=#75715e>   *     or/and <tt>ACC_MANDATED</tt> are allowed (see {@link Opcodes}).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitParameter</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>access</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>api</color> <color=#f92672><</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ASM5</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>RuntimeException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitParameter</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>access</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits the default value of this annotation interface method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return a visitor to the visit the actual default value of this annotation interface method, or</color>
<color=#75715e>   *     <tt>null</tt> if this visitor is not interested in visiting this default value. The 'name'</color>
<color=#75715e>   *     parameters passed to the methods of this annotation visitor are ignored. Moreover, exacly</color>
<color=#75715e>   *     one visit method must be called on this annotation visitor, followed by visitEnd.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitAnnotationDefault</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitAnnotationDefault</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits an annotation of this method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param desc the class descriptor of the annotation class.</color>
<color=#75715e>   * @param visible <tt>true</tt> if the annotation is visible at runtime.</color>
<color=#75715e>   * @return a visitor to visit the annotation values, or <tt>null</tt> if this visitor is not</color>
<color=#75715e>   *     interested in visiting this annotation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>visible</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits an annotation on a type in the method signature.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param typeRef a reference to the annotated type. The sort of this type reference must be</color>
<color=#75715e>   *     {@link TypeReference#METHOD_TYPE_PARAMETER METHOD_TYPE_PARAMETER}, {@link</color>
<color=#75715e>   *     TypeReference#METHOD_TYPE_PARAMETER_BOUND METHOD_TYPE_PARAMETER_BOUND}, {@link</color>
<color=#75715e>   *     TypeReference#METHOD_RETURN METHOD_RETURN}, {@link TypeReference#METHOD_RECEIVER</color>
<color=#75715e>   *     METHOD_RECEIVER}, {@link TypeReference#METHOD_FORMAL_PARAMETER METHOD_FORMAL_PARAMETER} or</color>
<color=#75715e>   *     {@link TypeReference#THROWS THROWS}. See {@link TypeReference}.</color>
<color=#75715e>   * @param typePath the path to the annotated type argument, wildcard bound, array element type, or</color>
<color=#75715e>   *     static inner type within 'typeRef'. May be <tt>null</tt> if the annotation targets</color>
<color=#75715e>   *     'typeRef' as a whole.</color>
<color=#75715e>   * @param desc the class descriptor of the annotation class.</color>
<color=#75715e>   * @param visible <tt>true</tt> if the annotation is visible at runtime.</color>
<color=#75715e>   * @return a visitor to visit the annotation values, or <tt>null</tt> if this visitor is not</color>
<color=#75715e>   *     interested in visiting this annotation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitTypeAnnotation</color><color=#f8f8f2>(</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>TypePath</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>api</color> <color=#f92672><</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ASM5</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>RuntimeException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTypeAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>visible</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits an annotation of a parameter this method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param parameter the parameter index.</color>
<color=#75715e>   * @param desc the class descriptor of the annotation class.</color>
<color=#75715e>   * @param visible <tt>true</tt> if the annotation is visible at runtime.</color>
<color=#75715e>   * @return a visitor to visit the annotation values, or <tt>null</tt> if this visitor is not</color>
<color=#75715e>   *     interested in visiting this annotation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitParameterAnnotation</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>parameter</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitParameterAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>parameter</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>visible</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits a non standard attribute of this method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param attr an attribute.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitAttribute</color><color=#f8f8f2>(</color><color=#f8f8f2>Attribute</color> <color=#f8f8f2>attr</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitAttribute</color><color=#f8f8f2>(</color><color=#f8f8f2>attr</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Starts the visit of the method's code, if any (i.e. non abstract method). */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitCode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitCode</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits the current state of the local variables and operand stack elements. This method must(*)</color>
<color=#75715e>   * be called <i>just before</i> any instruction <b>i</b> that follows an unconditional branch</color>
<color=#75715e>   * instruction such as GOTO or THROW, that is the target of a jump instruction, or that starts an</color>
<color=#75715e>   * exception handler block. The visited types must describe the values of the local variables and</color>
<color=#75715e>   * of the operand stack elements <i>just before</i> <b>i</b> is executed.<br></color>
<color=#75715e>   * <br></color>
<color=#75715e>   * (*) this is mandatory only for classes whose version is greater than or equal to {@link</color>
<color=#75715e>   * Opcodes#V1_6 V1_6}. <br></color>
<color=#75715e>   * <br></color>
<color=#75715e>   * The frames of a method must be given either in expanded form, or in compressed form (all frames</color>
<color=#75715e>   * must use the same format, i.e. you must not mix expanded and compressed frames within a single</color>
<color=#75715e>   * method):</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>In expanded form, all frames must have the F_NEW type.</color>
<color=#75715e>   *   <li>In compressed form, frames are basically "deltas" from the state of the previous frame:</color>
<color=#75715e>   *       <ul></color>
<color=#75715e>   *         <li>{@link Opcodes#F_SAME} representing frame with exactly the same locals as the</color>
<color=#75715e>   *             previous frame and with the empty stack.</color>
<color=#75715e>   *         <li>{@link Opcodes#F_SAME1} representing frame with exactly the same locals as the</color>
<color=#75715e>   *             previous frame and with single value on the stack ( <code>nStack</code> is 1 and</color>
<color=#75715e>   *             <code>stack[0]</code> contains value for the type of the stack item).</color>
<color=#75715e>   *         <li>{@link Opcodes#F_APPEND} representing frame with current locals are the same as the</color>
<color=#75715e>   *             locals in the previous frame, except that additional locals are defined (<code></color>
<color=#75715e>   *             nLocal</code> is 1, 2 or 3 and <code>local</code> elements contains values</color>
<color=#75715e>   *             representing added types).</color>
<color=#75715e>   *         <li>{@link Opcodes#F_CHOP} representing frame with current locals are the same as the</color>
<color=#75715e>   *             locals in the previous frame, except that the last 1-3 locals are absent and with</color>
<color=#75715e>   *             the empty stack (<code>nLocals</code> is 1, 2 or 3).</color>
<color=#75715e>   *         <li>{@link Opcodes#F_FULL} representing complete frame data.</color>
<color=#75715e>   *       </ul></color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * <br></color>
<color=#75715e>   * In both cases the first frame, corresponding to the method's parameters and access flags, is</color>
<color=#75715e>   * implicit and must not be visited. Also, it is illegal to visit two or more frames for the same</color>
<color=#75715e>   * code location (i.e., at least one instruction must be visited between two calls to visitFrame).</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param type the type of this stack map frame. Must be {@link Opcodes#F_NEW} for expanded</color>
<color=#75715e>   *     frames, or {@link Opcodes#F_FULL}, {@link Opcodes#F_APPEND}, {@link Opcodes#F_CHOP}, {@link</color>
<color=#75715e>   *     Opcodes#F_SAME} or {@link Opcodes#F_APPEND}, {@link Opcodes#F_SAME1} for compressed frames.</color>
<color=#75715e>   * @param nLocal the number of local variables in the visited frame.</color>
<color=#75715e>   * @param local the local variable types in this frame. This array must not be modified. Primitive</color>
<color=#75715e>   *     types are represented by {@link Opcodes#TOP}, {@link Opcodes#INTEGER}, {@link</color>
<color=#75715e>   *     Opcodes#FLOAT}, {@link Opcodes#LONG}, {@link Opcodes#DOUBLE},{@link Opcodes#NULL} or {@link</color>
<color=#75715e>   *     Opcodes#UNINITIALIZED_THIS} (long and double are represented by a single element).</color>
<color=#75715e>   *     Reference types are represented by String objects (representing internal names), and</color>
<color=#75715e>   *     uninitialized types by Label objects (this label designates the NEW instruction that</color>
<color=#75715e>   *     created this uninitialized value).</color>
<color=#75715e>   * @param nStack the number of operand stack elements in the visited frame.</color>
<color=#75715e>   * @param stack the operand stack types in this frame. This array must not be modified. Its</color>
<color=#75715e>   *     content has the same format as the "local" array.</color>
<color=#75715e>   * @throws IllegalStateException if a frame is visited just after another one, without any</color>
<color=#75715e>   *     instruction between the two (unless this frame is a Opcodes#F_SAME frame, in which case it</color>
<color=#75715e>   *     is silently ignored).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitFrame</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>nLocal</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>[]</color> <color=#f8f8f2>local</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>nStack</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>[]</color> <color=#f8f8f2>stack</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitFrame</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>nLocal</color><color=#f8f8f2>,</color> <color=#f8f8f2>local</color><color=#f8f8f2>,</color> <color=#f8f8f2>nStack</color><color=#f8f8f2>,</color> <color=#f8f8f2>stack</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// -------------------------------------------------------------------------</color>
  <color=#75715e>// Normal instructions</color>
  <color=#75715e>// -------------------------------------------------------------------------</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits a zero operand instruction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param opcode the opcode of the instruction to be visited. This opcode is either NOP,</color>
<color=#75715e>   *     ACONST_NULL, ICONST_M1, ICONST_0, ICONST_1, ICONST_2, ICONST_3, ICONST_4, ICONST_5,</color>
<color=#75715e>   *     LCONST_0, LCONST_1, FCONST_0, FCONST_1, FCONST_2, DCONST_0, DCONST_1, IALOAD, LALOAD,</color>
<color=#75715e>   *     FALOAD, DALOAD, AALOAD, BALOAD, CALOAD, SALOAD, IASTORE, LASTORE, FASTORE, DASTORE,</color>
<color=#75715e>   *     AASTORE, BASTORE, CASTORE, SASTORE, POP, POP2, DUP, DUP_X1, DUP_X2, DUP2, DUP2_X1, DUP2_X2,</color>
<color=#75715e>   *     SWAP, IADD, LADD, FADD, DADD, ISUB, LSUB, FSUB, DSUB, IMUL, LMUL, FMUL, DMUL, IDIV, LDIV,</color>
<color=#75715e>   *     FDIV, DDIV, IREM, LREM, FREM, DREM, INEG, LNEG, FNEG, DNEG, ISHL, LSHL, ISHR, LSHR, IUSHR,</color>
<color=#75715e>   *     LUSHR, IAND, LAND, IOR, LOR, IXOR, LXOR, I2L, I2F, I2D, L2I, L2F, L2D, F2I, F2L, F2D, D2I,</color>
<color=#75715e>   *     D2L, D2F, I2B, I2C, I2S, LCMP, FCMPL, FCMPG, DCMPL, DCMPG, IRETURN, LRETURN, FRETURN,</color>
<color=#75715e>   *     DRETURN, ARETURN, RETURN, ARRAYLENGTH, ATHROW, MONITORENTER, or MONITOREXIT.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>opcode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits an instruction with a single int operand.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param opcode the opcode of the instruction to be visited. This opcode is either BIPUSH, SIPUSH</color>
<color=#75715e>   *     or NEWARRAY.</color>
<color=#75715e>   * @param operand the operand of the instruction to be visited.<br></color>
<color=#75715e>   *     When opcode is BIPUSH, operand value should be between Byte.MIN_VALUE and Byte.MAX_VALUE.</color>
<color=#75715e>   *     <br></color>
<color=#75715e>   *     When opcode is SIPUSH, operand value should be between Short.MIN_VALUE and Short.MAX_VALUE.</color>
<color=#75715e>   *     <br></color>
<color=#75715e>   *     When opcode is NEWARRAY, operand value should be one of {@link Opcodes#T_BOOLEAN}, {@link</color>
<color=#75715e>   *     Opcodes#T_CHAR}, {@link Opcodes#T_FLOAT}, {@link Opcodes#T_DOUBLE}, {@link Opcodes#T_BYTE},</color>
<color=#75715e>   *     {@link Opcodes#T_SHORT}, {@link Opcodes#T_INT} or {@link Opcodes#T_LONG}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitIntInsn</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>operand</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitIntInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>operand</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits a local variable instruction. A local variable instruction is an instruction that loads</color>
<color=#75715e>   * or stores the value of a local variable.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param opcode the opcode of the local variable instruction to be visited. This opcode is either</color>
<color=#75715e>   *     ILOAD, LLOAD, FLOAD, DLOAD, ALOAD, ISTORE, LSTORE, FSTORE, DSTORE, ASTORE or RET.</color>
<color=#75715e>   * @param var the operand of the instruction to be visited. This operand is the index of a local</color>
<color=#75715e>   *     variable.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>var</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>var</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits a type instruction. A type instruction is an instruction that takes the internal name of</color>
<color=#75715e>   * a class as parameter.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param opcode the opcode of the type instruction to be visited. This opcode is either NEW,</color>
<color=#75715e>   *     ANEWARRAY, CHECKCAST or INSTANCEOF.</color>
<color=#75715e>   * @param type the operand of the instruction to be visited. This operand must be the internal</color>
<color=#75715e>   *     name of an object or array class (see {@link Type#getInternalName() getInternalName}).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitTypeInsn</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTypeInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits a field instruction. A field instruction is an instruction that loads or stores the</color>
<color=#75715e>   * value of a field of an object.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param opcode the opcode of the type instruction to be visited. This opcode is either</color>
<color=#75715e>   *     GETSTATIC, PUTSTATIC, GETFIELD or PUTFIELD.</color>
<color=#75715e>   * @param owner the internal name of the field's owner class (see {@link Type#getInternalName()</color>
<color=#75715e>   *     getInternalName}).</color>
<color=#75715e>   * @param name the field's name.</color>
<color=#75715e>   * @param desc the field's descriptor (see {@link Type Type}).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitFieldInsn</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitFieldInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits a method instruction. A method instruction is an instruction that invokes a method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param opcode the opcode of the type instruction to be visited. This opcode is either</color>
<color=#75715e>   *     INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or INVOKEINTERFACE.</color>
<color=#75715e>   * @param owner the internal name of the method's owner class (see {@link Type#getInternalName()</color>
<color=#75715e>   *     getInternalName}).</color>
<color=#75715e>   * @param name the method's name.</color>
<color=#75715e>   * @param desc the method's descriptor (see {@link Type Type}).</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Deprecated</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>api</color> <color=#f92672>>=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ASM5</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>itf</color> <color=#f92672>=</color> <color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>INVOKEINTERFACE</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>itf</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits a method instruction. A method instruction is an instruction that invokes a method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param opcode the opcode of the type instruction to be visited. This opcode is either</color>
<color=#75715e>   *     INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or INVOKEINTERFACE.</color>
<color=#75715e>   * @param owner the internal name of the method's owner class (see {@link Type#getInternalName()</color>
<color=#75715e>   *     getInternalName}).</color>
<color=#75715e>   * @param name the method's name.</color>
<color=#75715e>   * @param desc the method's descriptor (see {@link Type Type}).</color>
<color=#75715e>   * @param itf if the method's owner class is an interface.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>itf</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>api</color> <color=#f92672><</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ASM5</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>itf</color> <color=#f92672>!=</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>INVOKEINTERFACE</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"INVOKESPECIAL/STATIC on interfaces require ASM 5"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>itf</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits an invokedynamic instruction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param name the method's name.</color>
<color=#75715e>   * @param desc the method's descriptor (see {@link Type Type}).</color>
<color=#75715e>   * @param bsm the bootstrap method.</color>
<color=#75715e>   * @param bsmArgs the bootstrap method constant arguments. Each argument must be an {@link</color>
<color=#75715e>   *     Integer}, {@link Float}, {@link Long}, {@link Double}, {@link String}, {@link Type} or</color>
<color=#75715e>   *     {@link Handle} value. This method is allowed to modify the content of the array so a caller</color>
<color=#75715e>   *     should expect that this array may change.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitInvokeDynamicInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>Handle</color> <color=#f8f8f2>bsm</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f8f8f2>...</color> <color=#f8f8f2>bsmArgs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInvokeDynamicInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>bsm</color><color=#f8f8f2>,</color> <color=#f8f8f2>bsmArgs</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits a jump instruction. A jump instruction is an instruction that may jump to another</color>
<color=#75715e>   * instruction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param opcode the opcode of the type instruction to be visited. This opcode is either IFEQ,</color>
<color=#75715e>   *     IFNE, IFLT, IFGE, IFGT, IFLE, IF_ICMPEQ, IF_ICMPNE, IF_ICMPLT, IF_ICMPGE, IF_ICMPGT,</color>
<color=#75715e>   *     IF_ICMPLE, IF_ACMPEQ, IF_ACMPNE, GOTO, JSR, IFNULL or IFNONNULL.</color>
<color=#75715e>   * @param label the operand of the instruction to be visited. This operand is a label that</color>
<color=#75715e>   *     designates the instruction to which the jump instruction may jump.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitJumpInsn</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>Label</color> <color=#f8f8f2>label</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitJumpInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>label</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits a label. A label designates the instruction that will be visited just after it.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param label a {@link Label Label} object.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>Label</color> <color=#f8f8f2>label</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>label</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// -------------------------------------------------------------------------</color>
  <color=#75715e>// Special instructions</color>
  <color=#75715e>// -------------------------------------------------------------------------</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits a LDC instruction. Note that new constant types may be added in future versions of the</color>
<color=#75715e>   * Java Virtual Machine. To easily detect new constant types, implementations of this method</color>
<color=#75715e>   * should check for unexpected constant types, like this:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <pre></color>
<color=#75715e>   * if (cst instanceof Integer) {</color>
<color=#75715e>   *     // ...</color>
<color=#75715e>   * } else if (cst instanceof Float) {</color>
<color=#75715e>   *     // ...</color>
<color=#75715e>   * } else if (cst instanceof Long) {</color>
<color=#75715e>   *     // ...</color>
<color=#75715e>   * } else if (cst instanceof Double) {</color>
<color=#75715e>   *     // ...</color>
<color=#75715e>   * } else if (cst instanceof String) {</color>
<color=#75715e>   *     // ...</color>
<color=#75715e>   * } else if (cst instanceof Type) {</color>
<color=#75715e>   *     int sort = ((Type) cst).getSort();</color>
<color=#75715e>   *     if (sort == Type.OBJECT) {</color>
<color=#75715e>   *         // ...</color>
<color=#75715e>   *     } else if (sort == Type.ARRAY) {</color>
<color=#75715e>   *         // ...</color>
<color=#75715e>   *     } else if (sort == Type.METHOD) {</color>
<color=#75715e>   *         // ...</color>
<color=#75715e>   *     } else {</color>
<color=#75715e>   *         // throw an exception</color>
<color=#75715e>   *     }</color>
<color=#75715e>   * } else if (cst instanceof Handle) {</color>
<color=#75715e>   *     // ...</color>
<color=#75715e>   * } else {</color>
<color=#75715e>   *     // throw an exception</color>
<color=#75715e>   * }</color>
<color=#75715e>   * </pre></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param cst the constant to be loaded on the stack. This parameter must be a non null {@link</color>
<color=#75715e>   *     Integer}, a {@link Float}, a {@link Long}, a {@link Double}, a {@link String}, a {@link</color>
<color=#75715e>   *     Type} of OBJECT or ARRAY sort for <tt>.class</tt> constants, for classes whose version is</color>
<color=#75715e>   *     49.0, a {@link Type} of METHOD sort or a {@link Handle} for MethodType and MethodHandle</color>
<color=#75715e>   *     constants, for classes whose version is 51.0.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitLdcInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>cst</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLdcInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>cst</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits an IINC instruction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param var index of the local variable to be incremented.</color>
<color=#75715e>   * @param increment amount to increment the local variable by.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitIincInsn</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>var</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>increment</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitIincInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>var</color><color=#f8f8f2>,</color> <color=#f8f8f2>increment</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits a TABLESWITCH instruction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param min the minimum key value.</color>
<color=#75715e>   * @param max the maximum key value.</color>
<color=#75715e>   * @param dflt beginning of the default handler block.</color>
<color=#75715e>   * @param labels beginnings of the handler blocks. <tt>labels[i]</tt> is the beginning of the</color>
<color=#75715e>   *     handler block for the <tt>min + i</tt> key.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitTableSwitchInsn</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>min</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>max</color><color=#f8f8f2>,</color> <color=#f8f8f2>Label</color> <color=#f8f8f2>dflt</color><color=#f8f8f2>,</color> <color=#f8f8f2>Label</color><color=#f8f8f2>...</color> <color=#f8f8f2>labels</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTableSwitchInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>min</color><color=#f8f8f2>,</color> <color=#f8f8f2>max</color><color=#f8f8f2>,</color> <color=#f8f8f2>dflt</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits a LOOKUPSWITCH instruction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param dflt beginning of the default handler block.</color>
<color=#75715e>   * @param keys the values of the keys.</color>
<color=#75715e>   * @param labels beginnings of the handler blocks. <tt>labels[i]</tt> is the beginning of the</color>
<color=#75715e>   *     handler block for the <tt>keys[i]</tt> key.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitLookupSwitchInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>Label</color> <color=#f8f8f2>dflt</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>keys</color><color=#f8f8f2>,</color> <color=#f8f8f2>Label</color><color=#f92672>[]</color> <color=#f8f8f2>labels</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLookupSwitchInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>dflt</color><color=#f8f8f2>,</color> <color=#f8f8f2>keys</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits a MULTIANEWARRAY instruction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param desc an array type descriptor (see {@link Type Type}).</color>
<color=#75715e>   * @param dims number of dimensions of the array to allocate.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitMultiANewArrayInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>dims</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMultiANewArrayInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>dims</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits an annotation on an instruction. This method must be called just <i>after</i> the</color>
<color=#75715e>   * annotated instruction. It can be called several times for the same instruction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param typeRef a reference to the annotated type. The sort of this type reference must be</color>
<color=#75715e>   *     {@link TypeReference#INSTANCEOF INSTANCEOF}, {@link TypeReference#NEW NEW}, {@link</color>
<color=#75715e>   *     TypeReference#CONSTRUCTOR_REFERENCE CONSTRUCTOR_REFERENCE}, {@link</color>
<color=#75715e>   *     TypeReference#METHOD_REFERENCE METHOD_REFERENCE}, {@link TypeReference#CAST CAST}, {@link</color>
<color=#75715e>   *     TypeReference#CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT},</color>
<color=#75715e>   *     {@link TypeReference#METHOD_INVOCATION_TYPE_ARGUMENT METHOD_INVOCATION_TYPE_ARGUMENT},</color>
<color=#75715e>   *     {@link TypeReference#CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT</color>
<color=#75715e>   *     CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or {@link</color>
<color=#75715e>   *     TypeReference#METHOD_REFERENCE_TYPE_ARGUMENT METHOD_REFERENCE_TYPE_ARGUMENT}. See {@link</color>
<color=#75715e>   *     TypeReference}.</color>
<color=#75715e>   * @param typePath the path to the annotated type argument, wildcard bound, array element type, or</color>
<color=#75715e>   *     static inner type within 'typeRef'. May be <tt>null</tt> if the annotation targets</color>
<color=#75715e>   *     'typeRef' as a whole.</color>
<color=#75715e>   * @param desc the class descriptor of the annotation class.</color>
<color=#75715e>   * @param visible <tt>true</tt> if the annotation is visible at runtime.</color>
<color=#75715e>   * @return a visitor to visit the annotation values, or <tt>null</tt> if this visitor is not</color>
<color=#75715e>   *     interested in visiting this annotation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitInsnAnnotation</color><color=#f8f8f2>(</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>TypePath</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>api</color> <color=#f92672><</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ASM5</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>RuntimeException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsnAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>visible</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// -------------------------------------------------------------------------</color>
  <color=#75715e>// Exceptions table entries, debug information, max stack and max locals</color>
  <color=#75715e>// -------------------------------------------------------------------------</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits a try catch block.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param start beginning of the exception handler's scope (inclusive).</color>
<color=#75715e>   * @param end end of the exception handler's scope (exclusive).</color>
<color=#75715e>   * @param handler beginning of the exception handler's code.</color>
<color=#75715e>   * @param type internal name of the type of exceptions handled by the handler, or <tt>null</tt> to</color>
<color=#75715e>   *     catch any exceptions (for "finally" blocks).</color>
<color=#75715e>   * @throws IllegalArgumentException if one of the labels has already been visited by this visitor</color>
<color=#75715e>   *     (by the {@link #visitLabel visitLabel} method).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitTryCatchBlock</color><color=#f8f8f2>(</color><color=#f8f8f2>Label</color> <color=#f8f8f2>start</color><color=#f8f8f2>,</color> <color=#f8f8f2>Label</color> <color=#f8f8f2>end</color><color=#f8f8f2>,</color> <color=#f8f8f2>Label</color> <color=#f8f8f2>handler</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTryCatchBlock</color><color=#f8f8f2>(</color><color=#f8f8f2>start</color><color=#f8f8f2>,</color> <color=#f8f8f2>end</color><color=#f8f8f2>,</color> <color=#f8f8f2>handler</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits an annotation on an exception handler type. This method must be called <i>after</i> the</color>
<color=#75715e>   * {@link #visitTryCatchBlock} for the annotated exception handler. It can be called several times</color>
<color=#75715e>   * for the same exception handler.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param typeRef a reference to the annotated type. The sort of this type reference must be</color>
<color=#75715e>   *     {@link TypeReference#EXCEPTION_PARAMETER EXCEPTION_PARAMETER}. See {@link TypeReference}.</color>
<color=#75715e>   * @param typePath the path to the annotated type argument, wildcard bound, array element type, or</color>
<color=#75715e>   *     static inner type within 'typeRef'. May be <tt>null</tt> if the annotation targets</color>
<color=#75715e>   *     'typeRef' as a whole.</color>
<color=#75715e>   * @param desc the class descriptor of the annotation class.</color>
<color=#75715e>   * @param visible <tt>true</tt> if the annotation is visible at runtime.</color>
<color=#75715e>   * @return a visitor to visit the annotation values, or <tt>null</tt> if this visitor is not</color>
<color=#75715e>   *     interested in visiting this annotation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitTryCatchAnnotation</color><color=#f8f8f2>(</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>TypePath</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>api</color> <color=#f92672><</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ASM5</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>RuntimeException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTryCatchAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>visible</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits a local variable declaration.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param name the name of a local variable.</color>
<color=#75715e>   * @param desc the type descriptor of this local variable.</color>
<color=#75715e>   * @param signature the type signature of this local variable. May be <tt>null</tt> if the local</color>
<color=#75715e>   *     variable type does not use generic types.</color>
<color=#75715e>   * @param start the first instruction corresponding to the scope of this local variable</color>
<color=#75715e>   *     (inclusive).</color>
<color=#75715e>   * @param end the last instruction corresponding to the scope of this local variable (exclusive).</color>
<color=#75715e>   * @param index the local variable's index.</color>
<color=#75715e>   * @throws IllegalArgumentException if one of the labels has not already been visited by this</color>
<color=#75715e>   *     visitor (by the {@link #visitLabel visitLabel} method).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitLocalVariable</color><color=#f8f8f2>(</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>signature</color><color=#f8f8f2>,</color> <color=#f8f8f2>Label</color> <color=#f8f8f2>start</color><color=#f8f8f2>,</color> <color=#f8f8f2>Label</color> <color=#f8f8f2>end</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLocalVariable</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>signature</color><color=#f8f8f2>,</color> <color=#f8f8f2>start</color><color=#f8f8f2>,</color> <color=#f8f8f2>end</color><color=#f8f8f2>,</color> <color=#f8f8f2>index</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits an annotation on a local variable type.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param typeRef a reference to the annotated type. The sort of this type reference must be</color>
<color=#75715e>   *     {@link TypeReference#LOCAL_VARIABLE LOCAL_VARIABLE} or {@link</color>
<color=#75715e>   *     TypeReference#RESOURCE_VARIABLE RESOURCE_VARIABLE}. See {@link TypeReference}.</color>
<color=#75715e>   * @param typePath the path to the annotated type argument, wildcard bound, array element type, or</color>
<color=#75715e>   *     static inner type within 'typeRef'. May be <tt>null</tt> if the annotation targets</color>
<color=#75715e>   *     'typeRef' as a whole.</color>
<color=#75715e>   * @param start the fist instructions corresponding to the continuous ranges that make the scope</color>
<color=#75715e>   *     of this local variable (inclusive).</color>
<color=#75715e>   * @param end the last instructions corresponding to the continuous ranges that make the scope of</color>
<color=#75715e>   *     this local variable (exclusive). This array must have the same size as the 'start' array.</color>
<color=#75715e>   * @param index the local variable's index in each range. This array must have the same size as</color>
<color=#75715e>   *     the 'start' array.</color>
<color=#75715e>   * @param desc the class descriptor of the annotation class.</color>
<color=#75715e>   * @param visible <tt>true</tt> if the annotation is visible at runtime.</color>
<color=#75715e>   * @return a visitor to visit the annotation values, or <tt>null</tt> if this visitor is not</color>
<color=#75715e>   *     interested in visiting this annotation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitLocalVariableAnnotation</color><color=#f8f8f2>(</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>typeRef</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>TypePath</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Label</color><color=#f92672>[]</color> <color=#f8f8f2>start</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Label</color><color=#f92672>[]</color> <color=#f8f8f2>end</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>index</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>api</color> <color=#f92672><</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ASM5</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>RuntimeException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLocalVariableAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>start</color><color=#f8f8f2>,</color> <color=#f8f8f2>end</color><color=#f8f8f2>,</color> <color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>visible</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits a line number declaration.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param line a line number. This number refers to the source file from which the class was</color>
<color=#75715e>   *     compiled.</color>
<color=#75715e>   * @param start the first instruction corresponding to this line number.</color>
<color=#75715e>   * @throws IllegalArgumentException if <tt>start</tt> has not already been visited by this visitor</color>
<color=#75715e>   *     (by the {@link #visitLabel visitLabel} method).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitLineNumber</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>line</color><color=#f8f8f2>,</color> <color=#f8f8f2>Label</color> <color=#f8f8f2>start</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLineNumber</color><color=#f8f8f2>(</color><color=#f8f8f2>line</color><color=#f8f8f2>,</color> <color=#f8f8f2>start</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits the maximum stack size and the maximum number of local variables of the method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param maxStack maximum stack size of the method.</color>
<color=#75715e>   * @param maxLocals maximum number of local variables for the method.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitMaxs</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>maxStack</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxLocals</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMaxs</color><color=#f8f8f2>(</color><color=#f8f8f2>maxStack</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxLocals</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits the end of the method. This method, which is the last one to be called, is used to</color>
<color=#75715e>   * inform the visitor that all the annotations and attributes of the method have been visited.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitEnd</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>