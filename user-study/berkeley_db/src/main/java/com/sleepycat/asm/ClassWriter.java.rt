<color=#75715e>/***</color>
<color=#75715e> * ASM: a very small and fast Java bytecode manipulation framework</color>
<color=#75715e> * Copyright (c) 2000-2011 INRIA, France Telecom</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions</color>
<color=#75715e> * are met:</color>
<color=#75715e> * 1. Redistributions of source code must retain the above copyright</color>
<color=#75715e> *    notice, this list of conditions and the following disclaimer.</color>
<color=#75715e> * 2. Redistributions in binary form must reproduce the above copyright</color>
<color=#75715e> *    notice, this list of conditions and the following disclaimer in the</color>
<color=#75715e> *    documentation and/or other materials provided with the distribution.</color>
<color=#75715e> * 3. Neither the name of the copyright holders nor the names of its</color>
<color=#75715e> *    contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *    this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</color>
<color=#75715e> * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE</color>
<color=#75715e> * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR</color>
<color=#75715e> * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF</color>
<color=#75715e> * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS</color>
<color=#75715e> * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN</color>
<color=#75715e> * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)</color>
<color=#75715e> * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF</color>
<color=#75715e> * THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.asm</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A {@link ClassVisitor} that generates classes in bytecode form. More precisely this visitor</color>
<color=#75715e> * generates a byte array conforming to the Java class file format. It can be used alone, to</color>
<color=#75715e> * generate a Java class "from scratch", or with one or more {@link ClassReader ClassReader} and</color>
<color=#75715e> * adapter class visitor to generate a modified class from one or more existing Java classes.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Eric Bruneton</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ClassWriter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ClassVisitor</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Flag to automatically compute the maximum stack size and the maximum number of local variables</color>
<color=#75715e>   * of methods. If this flag is set, then the arguments of the {@link MethodVisitor#visitMaxs</color>
<color=#75715e>   * visitMaxs} method of the {@link MethodVisitor} returned by the {@link #visitMethod visitMethod}</color>
<color=#75715e>   * method will be ignored, and computed automatically from the signature and the bytecode of each</color>
<color=#75715e>   * method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #ClassWriter(int)</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>COMPUTE_MAXS</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Flag to automatically compute the stack map frames of methods from scratch. If this flag is</color>
<color=#75715e>   * set, then the calls to the {@link MethodVisitor#visitFrame} method are ignored, and the stack</color>
<color=#75715e>   * map frames are recomputed from the methods bytecode. The arguments of the {@link</color>
<color=#75715e>   * MethodVisitor#visitMaxs visitMaxs} method are also ignored and recomputed from the bytecode. In</color>
<color=#75715e>   * other words, computeFrames implies computeMaxs.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #ClassWriter(int)</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>COMPUTE_FRAMES</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Pseudo access flag to distinguish between the synthetic attribute and the synthetic access</color>
<color=#75715e>   * flag.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ACC_SYNTHETIC_ATTRIBUTE</color> <color=#f92672>=</color> <color=#ae81ff>0x40000</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Factor to convert from ACC_SYNTHETIC_ATTRIBUTE to Opcode.ACC_SYNTHETIC. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TO_ACC_SYNTHETIC</color> <color=#f92672>=</color> <color=#f8f8f2>ACC_SYNTHETIC_ATTRIBUTE</color> <color=#f92672>/</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_SYNTHETIC</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of instructions without any argument. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>NOARG_INSN</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of instructions with an signed byte argument. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SBYTE_INSN</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of instructions with an signed short argument. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SHORT_INSN</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of instructions with a local variable index argument. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>VAR_INSN</color> <color=#f92672>=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of instructions with an implicit local variable index argument. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>IMPLVAR_INSN</color> <color=#f92672>=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of instructions with a type descriptor argument. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TYPE_INSN</color> <color=#f92672>=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of field and method invocations instructions. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FIELDORMETH_INSN</color> <color=#f92672>=</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of the INVOKEINTERFACE/INVOKEDYNAMIC instruction. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ITFMETH_INSN</color> <color=#f92672>=</color> <color=#ae81ff>7</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of the INVOKEDYNAMIC instruction. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>INDYMETH_INSN</color> <color=#f92672>=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of instructions with a 2 bytes bytecode offset label. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LABEL_INSN</color> <color=#f92672>=</color> <color=#ae81ff>9</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of instructions with a 4 bytes bytecode offset label. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LABELW_INSN</color> <color=#f92672>=</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of the LDC instruction. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LDC_INSN</color> <color=#f92672>=</color> <color=#ae81ff>11</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of the LDC_W and LDC2_W instructions. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LDCW_INSN</color> <color=#f92672>=</color> <color=#ae81ff>12</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of the IINC instruction. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>IINC_INSN</color> <color=#f92672>=</color> <color=#ae81ff>13</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of the TABLESWITCH instruction. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TABL_INSN</color> <color=#f92672>=</color> <color=#ae81ff>14</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of the LOOKUPSWITCH instruction. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LOOK_INSN</color> <color=#f92672>=</color> <color=#ae81ff>15</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of the MULTIANEWARRAY instruction. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MANA_INSN</color> <color=#f92672>=</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of the WIDE instruction. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>WIDE_INSN</color> <color=#f92672>=</color> <color=#ae81ff>17</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The instruction types of all JVM opcodes. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>TYPE</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of CONSTANT_Class constant pool items. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>CLASS</color> <color=#f92672>=</color> <color=#ae81ff>7</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of CONSTANT_Fieldref constant pool items. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FIELD</color> <color=#f92672>=</color> <color=#ae81ff>9</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of CONSTANT_Methodref constant pool items. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>METH</color> <color=#f92672>=</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of CONSTANT_InterfaceMethodref constant pool items. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>IMETH</color> <color=#f92672>=</color> <color=#ae81ff>11</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of CONSTANT_String constant pool items. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>STR</color> <color=#f92672>=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of CONSTANT_Integer constant pool items. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>INT</color> <color=#f92672>=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of CONSTANT_Float constant pool items. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FLOAT</color> <color=#f92672>=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of CONSTANT_Long constant pool items. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LONG</color> <color=#f92672>=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of CONSTANT_Double constant pool items. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DOUBLE</color> <color=#f92672>=</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of CONSTANT_NameAndType constant pool items. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>NAME_TYPE</color> <color=#f92672>=</color> <color=#ae81ff>12</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of CONSTANT_Utf8 constant pool items. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>UTF8</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of CONSTANT_MethodType constant pool items. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MTYPE</color> <color=#f92672>=</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of CONSTANT_MethodHandle constant pool items. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>HANDLE</color> <color=#f92672>=</color> <color=#ae81ff>15</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The type of CONSTANT_InvokeDynamic constant pool items. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>INDY</color> <color=#f92672>=</color> <color=#ae81ff>18</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The base value for all CONSTANT_MethodHandle constant pool items. Internally, ASM store the 9</color>
<color=#75715e>   * variations of CONSTANT_MethodHandle into 9 different items.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>HANDLE_BASE</color> <color=#f92672>=</color> <color=#ae81ff>20</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Normal type Item stored in the ClassWriter {@link ClassWriter#typeTable}, instead of the</color>
<color=#75715e>   * constant pool, in order to avoid clashes with normal constant pool items in the ClassWriter</color>
<color=#75715e>   * constant pool's hash table.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TYPE_NORMAL</color> <color=#f92672>=</color> <color=#ae81ff>30</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Uninitialized type Item stored in the ClassWriter {@link ClassWriter#typeTable}, instead of the</color>
<color=#75715e>   * constant pool, in order to avoid clashes with normal constant pool items in the ClassWriter</color>
<color=#75715e>   * constant pool's hash table.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TYPE_UNINIT</color> <color=#f92672>=</color> <color=#ae81ff>31</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Merged type Item stored in the ClassWriter {@link ClassWriter#typeTable}, instead of the</color>
<color=#75715e>   * constant pool, in order to avoid clashes with normal constant pool items in the ClassWriter</color>
<color=#75715e>   * constant pool's hash table.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TYPE_MERGED</color> <color=#f92672>=</color> <color=#ae81ff>32</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The type of BootstrapMethods items. These items are stored in a special class attribute named</color>
<color=#75715e>   * BootstrapMethods and not in the constant pool.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BSM</color> <color=#f92672>=</color> <color=#ae81ff>33</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The class reader from which this class writer was constructed, if any. */</color>
  <color=#f8f8f2>ClassReader</color> <color=#f8f8f2>cr</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Minor and major version numbers of the class to be generated. */</color>
  <color=#66d9ef>int</color> <color=#f8f8f2>version</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Index of the next item to be added in the constant pool. */</color>
  <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The constant pool of this class. */</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>pool</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The constant pool's hash table data. */</color>
  <color=#f8f8f2>Item</color><color=#f92672>[]</color> <color=#f8f8f2>items</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The threshold of the constant pool's hash table. */</color>
  <color=#66d9ef>int</color> <color=#f8f8f2>threshold</color><color=#f8f8f2>;</color>

  <color=#75715e>/** A reusable key used to look for items in the {@link #items} hash table. */</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>Item</color> <color=#f8f8f2>key</color><color=#f8f8f2>;</color>

  <color=#75715e>/** A reusable key used to look for items in the {@link #items} hash table. */</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>Item</color> <color=#f8f8f2>key2</color><color=#f8f8f2>;</color>

  <color=#75715e>/** A reusable key used to look for items in the {@link #items} hash table. */</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>Item</color> <color=#f8f8f2>key3</color><color=#f8f8f2>;</color>

  <color=#75715e>/** A reusable key used to look for items in the {@link #items} hash table. */</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>Item</color> <color=#f8f8f2>key4</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A type table used to temporarily store internal names that will not necessarily be stored in</color>
<color=#75715e>   * the constant pool. This type table is used by the control flow and data flow analysis algorithm</color>
<color=#75715e>   * used to compute stack map frames from scratch. This array associates to each index <tt>i</tt></color>
<color=#75715e>   * the Item whose index is <tt>i</tt>. All Item objects stored in this array are also stored in</color>
<color=#75715e>   * the {@link #items} hash table. These two arrays allow to retrieve an Item from its index or,</color>
<color=#75715e>   * conversely, to get the index of an Item from its value. Each Item stores an internal name in</color>
<color=#75715e>   * its {@link Item#strVal1} field.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Item</color><color=#f92672>[]</color> <color=#f8f8f2>typeTable</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Number of elements in the {@link #typeTable} array. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>short</color> <color=#f8f8f2>typeCount</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The access flags of this class. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>access</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The constant pool item that contains the internal name of this class. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The internal name of this class. */</color>
  <color=#f8f8f2>String</color> <color=#f8f8f2>thisName</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The constant pool item that contains the signature of this class. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>signature</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The constant pool item that contains the internal name of the super class of this class. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>superName</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Number of interfaces implemented or extended by this class or interface. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>interfaceCount</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The interfaces implemented or extended by this class or interface. More precisely, this array</color>
<color=#75715e>   * contains the indexes of the constant pool items that contain the internal names of these</color>
<color=#75715e>   * interfaces.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>interfaces</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The index of the constant pool item that contains the name of the source file from which this</color>
<color=#75715e>   * class was compiled.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>sourceFile</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The SourceDebug attribute of this class. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>sourceDebug</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The constant pool item that contains the name of the enclosing class of this class. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>enclosingMethodOwner</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The constant pool item that contains the name and descriptor of the enclosing method of this</color>
<color=#75715e>   * class.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>enclosingMethod</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The runtime visible annotations of this class. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>AnnotationWriter</color> <color=#f8f8f2>anns</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The runtime invisible annotations of this class. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>AnnotationWriter</color> <color=#f8f8f2>ianns</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The runtime visible type annotations of this class. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>AnnotationWriter</color> <color=#f8f8f2>tanns</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The runtime invisible type annotations of this class. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>AnnotationWriter</color> <color=#f8f8f2>itanns</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The non standard attributes of this class. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Attribute</color> <color=#f8f8f2>attrs</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The number of entries in the InnerClasses attribute. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>innerClassesCount</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The InnerClasses attribute. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>innerClasses</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The number of entries in the BootstrapMethods attribute. */</color>
  <color=#66d9ef>int</color> <color=#f8f8f2>bootstrapMethodsCount</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The BootstrapMethods attribute. */</color>
  <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>bootstrapMethods</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The fields of this class. These fields are stored in a linked list of {@link FieldWriter}</color>
<color=#75715e>   * objects, linked to each other by their {@link FieldWriter#fv} field. This field stores the</color>
<color=#75715e>   * first element of this list.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>FieldWriter</color> <color=#f8f8f2>firstField</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The fields of this class. These fields are stored in a linked list of {@link FieldWriter}</color>
<color=#75715e>   * objects, linked to each other by their {@link FieldWriter#fv} field. This field stores the last</color>
<color=#75715e>   * element of this list.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>FieldWriter</color> <color=#f8f8f2>lastField</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The methods of this class. These methods are stored in a linked list of {@link MethodWriter}</color>
<color=#75715e>   * objects, linked to each other by their {@link MethodWriter#mv} field. This field stores the</color>
<color=#75715e>   * first element of this list.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>MethodWriter</color> <color=#f8f8f2>firstMethod</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The methods of this class. These methods are stored in a linked list of {@link MethodWriter}</color>
<color=#75715e>   * objects, linked to each other by their {@link MethodWriter#mv} field. This field stores the</color>
<color=#75715e>   * last element of this list.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>MethodWriter</color> <color=#f8f8f2>lastMethod</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * <tt>true</tt> if the maximum stack size and number of local variables must be automatically</color>
<color=#75715e>   * computed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>computeMaxs</color><color=#f8f8f2>;</color>

  <color=#75715e>/** <tt>true</tt> if the stack map frames must be recomputed from scratch. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>computeFrames</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * <tt>true</tt> if the stack map tables of this class are invalid. The {@link</color>
<color=#75715e>   * MethodWriter#resizeInstructions} method cannot transform existing stack map tables, and so</color>
<color=#75715e>   * produces potentially invalid classes when it is executed. In this case the class is reread and</color>
<color=#75715e>   * rewritten with the {@link #COMPUTE_FRAMES} option (the resizeInstructions method can resize</color>
<color=#75715e>   * stack map tables when this option is used).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#f8f8f2>invalidFrames</color><color=#f8f8f2>;</color>

  <color=#75715e>// ------------------------------------------------------------------------</color>
  <color=#75715e>// Static initializer</color>
  <color=#75715e>// ------------------------------------------------------------------------</color>

  <color=#75715e>/** Computes the instruction types of JVM opcodes. */</color>
  <color=#66d9ef>static</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>220</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>s</color> <color=#f92672>=</color>
        <color=#e6db74>"AAAAAAAAAAAAAAAABCLMMDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADD"</color>
            <color=#f92672>+</color> <color=#e6db74>"DDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</color>
            <color=#f92672>+</color> <color=#e6db74>"AAAAAAAAAAAAAAAAANAAAAAAAAAAAAAAAAAAAAJJJJJJJJJJJJJJJJDOPAA"</color>
            <color=#f92672>+</color> <color=#e6db74>"AAAAGGGGGGGHIFBFAAFFAARQJJKKJJJJJJJJJJJJJJJJJJ"</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>s</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#e6db74>'A'</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>TYPE</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>

    <color=#75715e>// code to generate the above string</color>
    <color=#75715e>//</color>
    <color=#75715e>// // SBYTE_INSN instructions</color>
    <color=#75715e>// b[Constants.NEWARRAY] = SBYTE_INSN;</color>
    <color=#75715e>// b[Constants.BIPUSH] = SBYTE_INSN;</color>
    <color=#75715e>//</color>
    <color=#75715e>// // SHORT_INSN instructions</color>
    <color=#75715e>// b[Constants.SIPUSH] = SHORT_INSN;</color>
    <color=#75715e>//</color>
    <color=#75715e>// // (IMPL)VAR_INSN instructions</color>
    <color=#75715e>// b[Constants.RET] = VAR_INSN;</color>
    <color=#75715e>// for (i = Constants.ILOAD; i <= Constants.ALOAD; ++i) {</color>
    <color=#75715e>// b[i] = VAR_INSN;</color>
    <color=#75715e>// }</color>
    <color=#75715e>// for (i = Constants.ISTORE; i <= Constants.ASTORE; ++i) {</color>
    <color=#75715e>// b[i] = VAR_INSN;</color>
    <color=#75715e>// }</color>
    <color=#75715e>// for (i = 26; i <= 45; ++i) { // ILOAD_0 to ALOAD_3</color>
    <color=#75715e>// b[i] = IMPLVAR_INSN;</color>
    <color=#75715e>// }</color>
    <color=#75715e>// for (i = 59; i <= 78; ++i) { // ISTORE_0 to ASTORE_3</color>
    <color=#75715e>// b[i] = IMPLVAR_INSN;</color>
    <color=#75715e>// }</color>
    <color=#75715e>//</color>
    <color=#75715e>// // TYPE_INSN instructions</color>
    <color=#75715e>// b[Constants.NEW] = TYPE_INSN;</color>
    <color=#75715e>// b[Constants.ANEWARRAY] = TYPE_INSN;</color>
    <color=#75715e>// b[Constants.CHECKCAST] = TYPE_INSN;</color>
    <color=#75715e>// b[Constants.INSTANCEOF] = TYPE_INSN;</color>
    <color=#75715e>//</color>
    <color=#75715e>// // (Set)FIELDORMETH_INSN instructions</color>
    <color=#75715e>// for (i = Constants.GETSTATIC; i <= Constants.INVOKESTATIC; ++i) {</color>
    <color=#75715e>// b[i] = FIELDORMETH_INSN;</color>
    <color=#75715e>// }</color>
    <color=#75715e>// b[Constants.INVOKEINTERFACE] = ITFMETH_INSN;</color>
    <color=#75715e>// b[Constants.INVOKEDYNAMIC] = INDYMETH_INSN;</color>
    <color=#75715e>//</color>
    <color=#75715e>// // LABEL(W)_INSN instructions</color>
    <color=#75715e>// for (i = Constants.IFEQ; i <= Constants.JSR; ++i) {</color>
    <color=#75715e>// b[i] = LABEL_INSN;</color>
    <color=#75715e>// }</color>
    <color=#75715e>// b[Constants.IFNULL] = LABEL_INSN;</color>
    <color=#75715e>// b[Constants.IFNONNULL] = LABEL_INSN;</color>
    <color=#75715e>// b[200] = LABELW_INSN; // GOTO_W</color>
    <color=#75715e>// b[201] = LABELW_INSN; // JSR_W</color>
    <color=#75715e>// // temporary opcodes used internally by ASM - see Label and</color>
    <color=#75715e>// MethodWriter</color>
    <color=#75715e>// for (i = 202; i < 220; ++i) {</color>
    <color=#75715e>// b[i] = LABEL_INSN;</color>
    <color=#75715e>// }</color>
    <color=#75715e>//</color>
    <color=#75715e>// // LDC(_W) instructions</color>
    <color=#75715e>// b[Constants.LDC] = LDC_INSN;</color>
    <color=#75715e>// b[19] = LDCW_INSN; // LDC_W</color>
    <color=#75715e>// b[20] = LDCW_INSN; // LDC2_W</color>
    <color=#75715e>//</color>
    <color=#75715e>// // special instructions</color>
    <color=#75715e>// b[Constants.IINC] = IINC_INSN;</color>
    <color=#75715e>// b[Constants.TABLESWITCH] = TABL_INSN;</color>
    <color=#75715e>// b[Constants.LOOKUPSWITCH] = LOOK_INSN;</color>
    <color=#75715e>// b[Constants.MULTIANEWARRAY] = MANA_INSN;</color>
    <color=#75715e>// b[196] = WIDE_INSN; // WIDE</color>
    <color=#75715e>//</color>
    <color=#75715e>// for (i = 0; i < b.length; ++i) {</color>
    <color=#75715e>// System.err.print((char)('A' + b[i]));</color>
    <color=#75715e>// }</color>
    <color=#75715e>// System.err.println();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// ------------------------------------------------------------------------</color>
  <color=#75715e>// Constructor</color>
  <color=#75715e>// ------------------------------------------------------------------------</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs a new {@link ClassWriter} object.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param flags option flags that can be used to modify the default behavior of this class. See</color>
<color=#75715e>   *     {@link #COMPUTE_MAXS}, {@link #COMPUTE_FRAMES}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>ClassWriter</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>flags</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ASM5</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>pool</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteVector</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>items</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f92672>[</color><color=#ae81ff>256</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>threshold</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>0.75d</color> <color=#f92672>*</color> <color=#f8f8f2>items</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>key2</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>key3</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>key4</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f8f8f2>();</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>computeMaxs</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>COMPUTE_MAXS</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>computeFrames</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>COMPUTE_FRAMES</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs a new {@link ClassWriter} object and enables optimizations for "mostly add" bytecode</color>
<color=#75715e>   * transformations. These optimizations are the following:</color>
<color=#75715e>   *</color>
<color=#75715e>   * <ul></color>
<color=#75715e>   *   <li>The constant pool from the original class is copied as is in the new class, which saves</color>
<color=#75715e>   *       time. New constant pool entries will be added at the end if necessary, but unused</color>
<color=#75715e>   *       constant pool entries <i>won't be removed</i>.</color>
<color=#75715e>   *   <li>Methods that are not transformed are copied as is in the new class, directly from the</color>
<color=#75715e>   *       original class bytecode (i.e. without emitting visit events for all the method</color>
<color=#75715e>   *       instructions), which saves a <i>lot</i> of time. Untransformed methods are detected by</color>
<color=#75715e>   *       the fact that the {@link ClassReader} receives {@link MethodVisitor} objects that come</color>
<color=#75715e>   *       from a {@link ClassWriter} (and not from any other {@link ClassVisitor} instance).</color>
<color=#75715e>   * </ul></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param classReader the {@link ClassReader} used to read the original class. It will be used to</color>
<color=#75715e>   *     copy the entire constant pool from the original class and also to copy other fragments of</color>
<color=#75715e>   *     original bytecode where applicable.</color>
<color=#75715e>   * @param flags option flags that can be used to modify the default behavior of this class.</color>
<color=#75715e>   *     <i>These option flags do not affect methods that are copied as is in the new class. This</color>
<color=#75715e>   *     means that the maximum stack size nor the stack frames will be computed for these</color>
<color=#75715e>   *     methods</i>. See {@link #COMPUTE_MAXS}, {@link #COMPUTE_FRAMES}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>ClassWriter</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ClassReader</color> <color=#f8f8f2>classReader</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>flags</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>flags</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>classReader</color><color=#f8f8f2>.</color><color=#a6e22e>copyPool</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>cr</color> <color=#f92672>=</color> <color=#f8f8f2>classReader</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// ------------------------------------------------------------------------</color>
  <color=#75715e>// Implementation of the ClassVisitor abstract class</color>
  <color=#75715e>// ------------------------------------------------------------------------</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>visit</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>version</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>access</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>signature</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>superName</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>interfaces</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>version</color> <color=#f92672>=</color> <color=#f8f8f2>version</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>access</color> <color=#f92672>=</color> <color=#f8f8f2>access</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>name</color> <color=#f92672>=</color> <color=#f8f8f2>newClass</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>thisName</color> <color=#f92672>=</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>SIGNATURES</color> <color=#f92672>&&</color> <color=#f8f8f2>signature</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>signature</color> <color=#f92672>=</color> <color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>signature</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>superName</color> <color=#f92672>=</color> <color=#f8f8f2>superName</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>newClass</color><color=#f8f8f2>(</color><color=#f8f8f2>superName</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>interfaces</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>interfaces</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>interfaceCount</color> <color=#f92672>=</color> <color=#f8f8f2>interfaces</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>interfaces</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>interfaceCount</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>interfaceCount</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>interfaces</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>newClass</color><color=#f8f8f2>(</color><color=#f8f8f2>interfaces</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>visitSource</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>file</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>debug</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>file</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sourceFile</color> <color=#f92672>=</color> <color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debug</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>sourceDebug</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteVector</color><color=#f8f8f2>().</color><color=#a6e22e>encodeUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>debug</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>visitOuterClass</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>enclosingMethodOwner</color> <color=#f92672>=</color> <color=#f8f8f2>newClass</color><color=#f8f8f2>(</color><color=#f8f8f2>owner</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>name</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>desc</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>enclosingMethod</color> <color=#f92672>=</color> <color=#f8f8f2>newNameType</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitAnnotation</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>bv</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteVector</color><color=#f8f8f2>();</color>
    <color=#75715e>// write type, and reserve space for values count</color>
    <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>)).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>AnnotationWriter</color> <color=#f8f8f2>aw</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AnnotationWriter</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>anns</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>anns</color> <color=#f92672>=</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>ianns</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>ianns</color> <color=#f92672>=</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitTypeAnnotation</color><color=#f8f8f2>(</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>TypePath</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>bv</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteVector</color><color=#f8f8f2>();</color>
    <color=#75715e>// write target_type and target_info</color>
    <color=#f8f8f2>AnnotationWriter</color><color=#f8f8f2>.</color><color=#a6e22e>putTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>);</color>
    <color=#75715e>// write type, and reserve space for values count</color>
    <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>)).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>AnnotationWriter</color> <color=#f8f8f2>aw</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AnnotationWriter</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>tanns</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>tanns</color> <color=#f92672>=</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>itanns</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>itanns</color> <color=#f92672>=</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>visitAttribute</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Attribute</color> <color=#f8f8f2>attr</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>attr</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>attrs</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>attrs</color> <color=#f92672>=</color> <color=#f8f8f2>attr</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>visitInnerClass</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>outerName</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>innerName</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>access</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>innerClasses</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>innerClasses</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteVector</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// Sec. 4.7.6 of the JVMS states "Every CONSTANT_Class_info entry in the</color>
    <color=#75715e>// constant_pool table which represents a class or interface C that is</color>
    <color=#75715e>// not a package member must have exactly one corresponding entry in the</color>
    <color=#75715e>// classes array". To avoid duplicates we keep track in the intVal field</color>
    <color=#75715e>// of the Item of each CONSTANT_Class_info entry C whether an inner</color>
    <color=#75715e>// class entry has already been added for C (this field is unused for</color>
    <color=#75715e>// class entries, and changing its value does not change the hashcode</color>
    <color=#75715e>// and equality tests). If so we store the index of this inner class</color>
    <color=#75715e>// entry (plus one) in intVal. This hack allows duplicate detection in</color>
    <color=#75715e>// O(1) time.</color>
    <color=#f8f8f2>Item</color> <color=#f8f8f2>nameItem</color> <color=#f92672>=</color> <color=#f8f8f2>newClassItem</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nameItem</color><color=#f8f8f2>.</color><color=#a6e22e>intVal</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>innerClassesCount</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>innerClasses</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>nameItem</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>innerClasses</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>outerName</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>newClass</color><color=#f8f8f2>(</color><color=#f8f8f2>outerName</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>innerClasses</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>innerName</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>innerName</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>innerClasses</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>access</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>nameItem</color><color=#f8f8f2>.</color><color=#a6e22e>intVal</color> <color=#f92672>=</color> <color=#f8f8f2>innerClassesCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#75715e>// Compare the inner classes entry nameItem.intVal - 1 with the</color>
      <color=#75715e>// arguments of this method and throw an exception if there is a</color>
      <color=#75715e>// difference?</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>FieldVisitor</color> <color=#a6e22e>visitField</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>access</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>signature</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>FieldWriter</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>access</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>signature</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>MethodVisitor</color> <color=#a6e22e>visitMethod</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>access</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>signature</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>exceptions</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>MethodWriter</color><color=#f8f8f2>(</color>
        <color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>access</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>signature</color><color=#f8f8f2>,</color> <color=#f8f8f2>exceptions</color><color=#f8f8f2>,</color> <color=#f8f8f2>computeMaxs</color><color=#f8f8f2>,</color> <color=#f8f8f2>computeFrames</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>visitEnd</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

  <color=#75715e>// ------------------------------------------------------------------------</color>
  <color=#75715e>// Other public methods</color>
  <color=#75715e>// ------------------------------------------------------------------------</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the bytecode of the class that was build with this class writer.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the bytecode of the class that was build with this class writer.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>toByteArray</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>></color> <color=#ae81ff>0xFFFF</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>RuntimeException</color><color=#f8f8f2>(</color><color=#e6db74>"Class file too large!"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// computes the real size of the bytecode of this class</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#ae81ff>24</color> <color=#f92672>+</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>interfaceCount</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>nbFields</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>FieldWriter</color> <color=#f8f8f2>fb</color> <color=#f92672>=</color> <color=#f8f8f2>firstField</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>fb</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>nbFields</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>fb</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>fb</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>FieldWriter</color><color=#f8f8f2>)</color> <color=#f8f8f2>fb</color><color=#f8f8f2>.</color><color=#a6e22e>fv</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>nbMethods</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>MethodWriter</color> <color=#f8f8f2>mb</color> <color=#f92672>=</color> <color=#f8f8f2>firstMethod</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>mb</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>nbMethods</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>mb</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>mb</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>MethodWriter</color><color=#f8f8f2>)</color> <color=#f8f8f2>mb</color><color=#f8f8f2>.</color><color=#a6e22e>mv</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>attributeCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bootstrapMethods</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>// we put it as first attribute in order to improve a bit</color>
      <color=#75715e>// ClassReader.copyBootstrapMethods</color>
      <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color> <color=#f92672>+</color> <color=#f8f8f2>bootstrapMethods</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"BootstrapMethods"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>SIGNATURES</color> <color=#f92672>&&</color> <color=#f8f8f2>signature</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"Signature"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sourceFile</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"SourceFile"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sourceDebug</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>sourceDebug</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"SourceDebugExtension"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>enclosingMethodOwner</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"EnclosingMethod"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>access</color> <color=#f92672>&</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_DEPRECATED</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"Deprecated"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>access</color> <color=#f92672>&</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_SYNTHETIC</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>version</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFF</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>V1_5</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>access</color> <color=#f92672>&</color> <color=#f8f8f2>ACC_SYNTHETIC_ATTRIBUTE</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"Synthetic"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>innerClasses</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color> <color=#f92672>+</color> <color=#f8f8f2>innerClasses</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"InnerClasses"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>anns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color> <color=#f92672>+</color> <color=#f8f8f2>anns</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"RuntimeVisibleAnnotations"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>ianns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color> <color=#f92672>+</color> <color=#f8f8f2>ianns</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"RuntimeInvisibleAnnotations"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>tanns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color> <color=#f92672>+</color> <color=#f8f8f2>tanns</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"RuntimeVisibleTypeAnnotations"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>itanns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color> <color=#f92672>+</color> <color=#f8f8f2>itanns</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"RuntimeInvisibleTypeAnnotations"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>attrs</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>attributeCount</color> <color=#f92672>+=</color> <color=#f8f8f2>attrs</color><color=#f8f8f2>.</color><color=#a6e22e>getCount</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>attrs</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>pool</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#75715e>// allocates a byte vector of this size, in order to avoid unnecessary</color>
    <color=#75715e>// arraycopy operations in the ByteVector.enlarge() method</color>
    <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteVector</color><color=#f8f8f2>(</color><color=#f8f8f2>size</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#ae81ff>0xCAFEBABE</color><color=#f8f8f2>).</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>version</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>).</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>pool</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>pool</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>mask</color> <color=#f92672>=</color>
        <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_DEPRECATED</color>
            <color=#f92672>|</color> <color=#f8f8f2>ACC_SYNTHETIC_ATTRIBUTE</color>
            <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>access</color> <color=#f92672>&</color> <color=#f8f8f2>ACC_SYNTHETIC_ATTRIBUTE</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>TO_ACC_SYNTHETIC</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>access</color> <color=#f92672>&</color> <color=#f92672>~</color><color=#f8f8f2>mask</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>superName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>interfaceCount</color><color=#f8f8f2>);</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>interfaceCount</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>interfaces</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>nbFields</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>fb</color> <color=#f92672>=</color> <color=#f8f8f2>firstField</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>fb</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>fb</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>fb</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>FieldWriter</color><color=#f8f8f2>)</color> <color=#f8f8f2>fb</color><color=#f8f8f2>.</color><color=#a6e22e>fv</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>nbMethods</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>mb</color> <color=#f92672>=</color> <color=#f8f8f2>firstMethod</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>mb</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mb</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mb</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>MethodWriter</color><color=#f8f8f2>)</color> <color=#f8f8f2>mb</color><color=#f8f8f2>.</color><color=#a6e22e>mv</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bootstrapMethods</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"BootstrapMethods"</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>bootstrapMethods</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>bootstrapMethodsCount</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>bootstrapMethods</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>bootstrapMethods</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>SIGNATURES</color> <color=#f92672>&&</color> <color=#f8f8f2>signature</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"Signature"</color><color=#f8f8f2>)).</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#ae81ff>2</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>signature</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sourceFile</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"SourceFile"</color><color=#f8f8f2>)).</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#ae81ff>2</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>sourceFile</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sourceDebug</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>sourceDebug</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"SourceDebugExtension"</color><color=#f8f8f2>)).</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>len</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>sourceDebug</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>enclosingMethodOwner</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"EnclosingMethod"</color><color=#f8f8f2>)).</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#ae81ff>4</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>enclosingMethodOwner</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>enclosingMethod</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>access</color> <color=#f92672>&</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_DEPRECATED</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"Deprecated"</color><color=#f8f8f2>)).</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>access</color> <color=#f92672>&</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_SYNTHETIC</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>version</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFF</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>V1_5</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>access</color> <color=#f92672>&</color> <color=#f8f8f2>ACC_SYNTHETIC_ATTRIBUTE</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"Synthetic"</color><color=#f8f8f2>)).</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>innerClasses</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"InnerClasses"</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>innerClasses</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>innerClassesCount</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>innerClasses</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>innerClasses</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>anns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"RuntimeVisibleAnnotations"</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>anns</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>ianns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"RuntimeInvisibleAnnotations"</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>ianns</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>tanns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"RuntimeVisibleTypeAnnotations"</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>tanns</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>itanns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"RuntimeInvisibleTypeAnnotations"</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>itanns</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>attrs</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>attrs</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>out</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>invalidFrames</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>anns</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>ianns</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>attrs</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>innerClassesCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>innerClasses</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>bootstrapMethodsCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>bootstrapMethods</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>firstField</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>lastField</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>firstMethod</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>lastMethod</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>computeMaxs</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>computeFrames</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>invalidFrames</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>ClassReader</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>).</color><color=#a6e22e>accept</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>SKIP_FRAMES</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>toByteArray</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// ------------------------------------------------------------------------</color>
  <color=#75715e>// Utility methods: constant pool management</color>
  <color=#75715e>// ------------------------------------------------------------------------</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds a number or string constant to the constant pool of the class being build. Does nothing if</color>
<color=#75715e>   * the constant pool already contains a similar item.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param cst the value of the constant to be added to the constant pool. This parameter must be</color>
<color=#75715e>   *     an {@link Integer}, a {@link Float}, a {@link Long}, a {@link Double}, a {@link String} or</color>
<color=#75715e>   *     a {@link Type}.</color>
<color=#75715e>   * @return a new or already existing constant item with the given value.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Item</color> <color=#a6e22e>newConstItem</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>cst</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cst</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>Integer</color><color=#f8f8f2>)</color> <color=#f8f8f2>cst</color><color=#f8f8f2>).</color><color=#a6e22e>intValue</color><color=#f8f8f2>();</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>newInteger</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cst</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>Byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>cst</color><color=#f8f8f2>).</color><color=#a6e22e>intValue</color><color=#f8f8f2>();</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>newInteger</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cst</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Character</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>Character</color><color=#f8f8f2>)</color> <color=#f8f8f2>cst</color><color=#f8f8f2>).</color><color=#a6e22e>charValue</color><color=#f8f8f2>();</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>newInteger</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cst</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Short</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>Short</color><color=#f8f8f2>)</color> <color=#f8f8f2>cst</color><color=#f8f8f2>).</color><color=#a6e22e>intValue</color><color=#f8f8f2>();</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>newInteger</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cst</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Boolean</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>Boolean</color><color=#f8f8f2>)</color> <color=#f8f8f2>cst</color><color=#f8f8f2>).</color><color=#a6e22e>booleanValue</color><color=#f8f8f2>()</color> <color=#f92672>?</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>newInteger</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cst</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Float</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>float</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>Float</color><color=#f8f8f2>)</color> <color=#f8f8f2>cst</color><color=#f8f8f2>).</color><color=#a6e22e>floatValue</color><color=#f8f8f2>();</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>newFloat</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cst</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Long</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>long</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>Long</color><color=#f8f8f2>)</color> <color=#f8f8f2>cst</color><color=#f8f8f2>).</color><color=#a6e22e>longValue</color><color=#f8f8f2>();</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>newLong</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cst</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Double</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>double</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>Double</color><color=#f8f8f2>)</color> <color=#f8f8f2>cst</color><color=#f8f8f2>).</color><color=#a6e22e>doubleValue</color><color=#f8f8f2>();</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>newDouble</color><color=#f8f8f2>(</color><color=#f8f8f2>val</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cst</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>newString</color><color=#f8f8f2>((</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>cst</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cst</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Type</color> <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Type</color><color=#f8f8f2>)</color> <color=#f8f8f2>cst</color><color=#f8f8f2>;</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>s</color> <color=#f92672>=</color> <color=#f8f8f2>t</color><color=#f8f8f2>.</color><color=#a6e22e>getSort</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>s</color> <color=#f92672>==</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>OBJECT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>newClassItem</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>.</color><color=#a6e22e>getInternalName</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>s</color> <color=#f92672>==</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>METHOD</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>newMethodTypeItem</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>.</color><color=#a6e22e>getDescriptor</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color> <color=#75715e>// s == primitive type or array</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>newClassItem</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>.</color><color=#a6e22e>getDescriptor</color><color=#f8f8f2>());</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cst</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Handle</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Handle</color> <color=#f8f8f2>h</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Handle</color><color=#f8f8f2>)</color> <color=#f8f8f2>cst</color><color=#f8f8f2>;</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>newHandleItem</color><color=#f8f8f2>(</color><color=#f8f8f2>h</color><color=#f8f8f2>.</color><color=#a6e22e>tag</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>.</color><color=#a6e22e>owner</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>.</color><color=#a6e22e>desc</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"value "</color> <color=#f92672>+</color> <color=#f8f8f2>cst</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds a number or string constant to the constant pool of the class being build. Does nothing if</color>
<color=#75715e>   * the constant pool already contains a similar item. <i>This method is intended for {@link</color>
<color=#75715e>   * Attribute} sub classes, and is normally not needed by class generators or adapters.</i></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param cst the value of the constant to be added to the constant pool. This parameter must be</color>
<color=#75715e>   *     an {@link Integer}, a {@link Float}, a {@link Long}, a {@link Double} or a {@link String}.</color>
<color=#75715e>   * @return the index of a new or already existing constant item with the given value.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>newConst</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>cst</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>newConstItem</color><color=#f8f8f2>(</color><color=#f8f8f2>cst</color><color=#f8f8f2>).</color><color=#a6e22e>index</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds an UTF8 string to the constant pool of the class being build. Does nothing if the constant</color>
<color=#75715e>   * pool already contains a similar item. <i>This method is intended for {@link Attribute} sub</color>
<color=#75715e>   * classes, and is normally not needed by class generators or adapters.</i></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param value the String value.</color>
<color=#75715e>   * @return the index of a new or already existing UTF8 item.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>UTF8</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Item</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>pool</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>UTF8</color><color=#f8f8f2>).</color><color=#a6e22e>putUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>put</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds a class reference to the constant pool of the class being build. Does nothing if the</color>
<color=#75715e>   * constant pool already contains a similar item. <i>This method is intended for {@link Attribute}</color>
<color=#75715e>   * sub classes, and is normally not needed by class generators or adapters.</i></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param value the internal name of the class.</color>
<color=#75715e>   * @return a new or already existing class reference item.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Item</color> <color=#a6e22e>newClassItem</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>key2</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>CLASS</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Item</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key2</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>pool</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#f8f8f2>CLASS</color><color=#f8f8f2>,</color> <color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>key2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>put</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds a class reference to the constant pool of the class being build. Does nothing if the</color>
<color=#75715e>   * constant pool already contains a similar item. <i>This method is intended for {@link Attribute}</color>
<color=#75715e>   * sub classes, and is normally not needed by class generators or adapters.</i></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param value the internal name of the class.</color>
<color=#75715e>   * @return the index of a new or already existing class reference item.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>newClass</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>newClassItem</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>).</color><color=#a6e22e>index</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds a method type reference to the constant pool of the class being build. Does nothing if the</color>
<color=#75715e>   * constant pool already contains a similar item. <i>This method is intended for {@link Attribute}</color>
<color=#75715e>   * sub classes, and is normally not needed by class generators or adapters.</i></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param methodDesc method descriptor of the method type.</color>
<color=#75715e>   * @return a new or already existing method type reference item.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Item</color> <color=#a6e22e>newMethodTypeItem</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>methodDesc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>key2</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>MTYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>methodDesc</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Item</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key2</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>pool</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#f8f8f2>MTYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>methodDesc</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>key2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>put</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds a method type reference to the constant pool of the class being build. Does nothing if the</color>
<color=#75715e>   * constant pool already contains a similar item. <i>This method is intended for {@link Attribute}</color>
<color=#75715e>   * sub classes, and is normally not needed by class generators or adapters.</i></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param methodDesc method descriptor of the method type.</color>
<color=#75715e>   * @return the index of a new or already existing method type reference item.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>newMethodType</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>methodDesc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>newMethodTypeItem</color><color=#f8f8f2>(</color><color=#f8f8f2>methodDesc</color><color=#f8f8f2>).</color><color=#a6e22e>index</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds a handle to the constant pool of the class being build. Does nothing if the constant pool</color>
<color=#75715e>   * already contains a similar item. <i>This method is intended for {@link Attribute} sub classes,</color>
<color=#75715e>   * and is normally not needed by class generators or adapters.</i></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param tag the kind of this handle. Must be {@link Opcodes#H_GETFIELD}, {@link</color>
<color=#75715e>   *     Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link</color>
<color=#75715e>   *     Opcodes#H_INVOKEVIRTUAL}, {@link Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL},</color>
<color=#75715e>   *     {@link Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}.</color>
<color=#75715e>   * @param owner the internal name of the field or method owner class.</color>
<color=#75715e>   * @param name the name of the field or method.</color>
<color=#75715e>   * @param desc the descriptor of the field or method.</color>
<color=#75715e>   * @return a new or an already existing method type reference item.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Item</color> <color=#a6e22e>newHandleItem</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>tag</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>key4</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>HANDLE_BASE</color> <color=#f92672>+</color> <color=#f8f8f2>tag</color><color=#f8f8f2>,</color> <color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Item</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key4</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tag</color> <color=#f92672><=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>H_PUTSTATIC</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>put112</color><color=#f8f8f2>(</color><color=#f8f8f2>HANDLE</color><color=#f8f8f2>,</color> <color=#f8f8f2>tag</color><color=#f8f8f2>,</color> <color=#f8f8f2>newField</color><color=#f8f8f2>(</color><color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>put112</color><color=#f8f8f2>(</color><color=#f8f8f2>HANDLE</color><color=#f8f8f2>,</color> <color=#f8f8f2>tag</color><color=#f8f8f2>,</color> <color=#f8f8f2>newMethod</color><color=#f8f8f2>(</color><color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>tag</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>H_INVOKEINTERFACE</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>key4</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>put</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds a handle to the constant pool of the class being build. Does nothing if the constant pool</color>
<color=#75715e>   * already contains a similar item. <i>This method is intended for {@link Attribute} sub classes,</color>
<color=#75715e>   * and is normally not needed by class generators or adapters.</i></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param tag the kind of this handle. Must be {@link Opcodes#H_GETFIELD}, {@link</color>
<color=#75715e>   *     Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link</color>
<color=#75715e>   *     Opcodes#H_INVOKEVIRTUAL}, {@link Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL},</color>
<color=#75715e>   *     {@link Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}.</color>
<color=#75715e>   * @param owner the internal name of the field or method owner class.</color>
<color=#75715e>   * @param name the name of the field or method.</color>
<color=#75715e>   * @param desc the descriptor of the field or method.</color>
<color=#75715e>   * @return the index of a new or already existing method type reference item.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>newHandle</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>tag</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>newHandleItem</color><color=#f8f8f2>(</color><color=#f8f8f2>tag</color><color=#f8f8f2>,</color> <color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>).</color><color=#a6e22e>index</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds an invokedynamic reference to the constant pool of the class being build. Does nothing if</color>
<color=#75715e>   * the constant pool already contains a similar item. <i>This method is intended for {@link</color>
<color=#75715e>   * Attribute} sub classes, and is normally not needed by class generators or adapters.</i></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param name name of the invoked method.</color>
<color=#75715e>   * @param desc descriptor of the invoke method.</color>
<color=#75715e>   * @param bsm the bootstrap method.</color>
<color=#75715e>   * @param bsmArgs the bootstrap method constant arguments.</color>
<color=#75715e>   * @return a new or an already existing invokedynamic type reference item.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Item</color> <color=#a6e22e>newInvokeDynamicItem</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Handle</color> <color=#f8f8f2>bsm</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Object</color><color=#f8f8f2>...</color> <color=#f8f8f2>bsmArgs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>// cache for performance</color>
    <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>bootstrapMethods</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>bootstrapMethods</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bootstrapMethods</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>bootstrapMethods</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>bootstrapMethods</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteVector</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>position</color> <color=#f92672>=</color> <color=#f8f8f2>bootstrapMethods</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#75715e>// record current position</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>hashCode</color> <color=#f92672>=</color> <color=#f8f8f2>bsm</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>bootstrapMethods</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>newHandle</color><color=#f8f8f2>(</color><color=#f8f8f2>bsm</color><color=#f8f8f2>.</color><color=#a6e22e>tag</color><color=#f8f8f2>,</color> <color=#f8f8f2>bsm</color><color=#f8f8f2>.</color><color=#a6e22e>owner</color><color=#f8f8f2>,</color> <color=#f8f8f2>bsm</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>bsm</color><color=#f8f8f2>.</color><color=#a6e22e>desc</color><color=#f8f8f2>));</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>argsLength</color> <color=#f92672>=</color> <color=#f8f8f2>bsmArgs</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>bootstrapMethods</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>argsLength</color><color=#f8f8f2>);</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>argsLength</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Object</color> <color=#f8f8f2>bsmArg</color> <color=#f92672>=</color> <color=#f8f8f2>bsmArgs</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>hashCode</color> <color=#f92672>^=</color> <color=#f8f8f2>bsmArg</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>bootstrapMethods</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>newConst</color><color=#f8f8f2>(</color><color=#f8f8f2>bsmArg</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#f8f8f2>bootstrapMethods</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#ae81ff>1</color> <color=#f92672>+</color> <color=#ae81ff>1</color> <color=#f92672>+</color> <color=#f8f8f2>argsLength</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#75715e>// (bsm + argCount + arguments)</color>
    <color=#f8f8f2>hashCode</color> <color=#f92672>&=</color> <color=#ae81ff>0x7FFFFFFF</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Item</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>hashCode</color> <color=#f92672>%</color> <color=#f8f8f2>items</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>loop</color><color=#f8f8f2>:</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>type</color> <color=#f92672>!=</color> <color=#f8f8f2>BSM</color> <color=#f92672>||</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color> <color=#f92672>!=</color> <color=#f8f8f2>hashCode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>// because the data encode the size of the argument</color>
      <color=#75715e>// we don't need to test if these size are equals</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>resultPosition</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>intVal</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>p</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>p</color> <color=#f92672><</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>p</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f92672>[</color><color=#f8f8f2>position</color> <color=#f92672>+</color> <color=#f8f8f2>p</color><color=#f92672>]</color> <color=#f92672>!=</color> <color=#f8f8f2>data</color><color=#f92672>[</color><color=#f8f8f2>resultPosition</color> <color=#f92672>+</color> <color=#f8f8f2>p</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
          <color=#66d9ef>continue</color> <color=#f8f8f2>loop</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>break</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>bootstrapMethodIndex</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>bootstrapMethodIndex</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>bootstrapMethods</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>=</color> <color=#f8f8f2>position</color><color=#f8f8f2>;</color> <color=#75715e>// revert to old position</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>bootstrapMethodIndex</color> <color=#f92672>=</color> <color=#f8f8f2>bootstrapMethodsCount</color><color=#f92672>++</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f8f8f2>(</color><color=#f8f8f2>bootstrapMethodIndex</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>position</color><color=#f8f8f2>,</color> <color=#f8f8f2>hashCode</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>put</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// now, create the InvokeDynamic constant</color>
    <color=#f8f8f2>key3</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>bootstrapMethodIndex</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key3</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>put122</color><color=#f8f8f2>(</color><color=#f8f8f2>INDY</color><color=#f8f8f2>,</color> <color=#f8f8f2>bootstrapMethodIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>newNameType</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>key3</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>put</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds an invokedynamic reference to the constant pool of the class being build. Does nothing if</color>
<color=#75715e>   * the constant pool already contains a similar item. <i>This method is intended for {@link</color>
<color=#75715e>   * Attribute} sub classes, and is normally not needed by class generators or adapters.</i></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param name name of the invoked method.</color>
<color=#75715e>   * @param desc descriptor of the invoke method.</color>
<color=#75715e>   * @param bsm the bootstrap method.</color>
<color=#75715e>   * @param bsmArgs the bootstrap method constant arguments.</color>
<color=#75715e>   * @return the index of a new or already existing invokedynamic reference item.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>newInvokeDynamic</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Handle</color> <color=#f8f8f2>bsm</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Object</color><color=#f8f8f2>...</color> <color=#f8f8f2>bsmArgs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>newInvokeDynamicItem</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>bsm</color><color=#f8f8f2>,</color> <color=#f8f8f2>bsmArgs</color><color=#f8f8f2>).</color><color=#a6e22e>index</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds a field reference to the constant pool of the class being build. Does nothing if the</color>
<color=#75715e>   * constant pool already contains a similar item.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param owner the internal name of the field's owner class.</color>
<color=#75715e>   * @param name the field's name.</color>
<color=#75715e>   * @param desc the field's descriptor.</color>
<color=#75715e>   * @return a new or already existing field reference item.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Item</color> <color=#a6e22e>newFieldItem</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>key3</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>FIELD</color><color=#f8f8f2>,</color> <color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Item</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key3</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>put122</color><color=#f8f8f2>(</color><color=#f8f8f2>FIELD</color><color=#f8f8f2>,</color> <color=#f8f8f2>newClass</color><color=#f8f8f2>(</color><color=#f8f8f2>owner</color><color=#f8f8f2>),</color> <color=#f8f8f2>newNameType</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>key3</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>put</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds a field reference to the constant pool of the class being build. Does nothing if the</color>
<color=#75715e>   * constant pool already contains a similar item. <i>This method is intended for {@link Attribute}</color>
<color=#75715e>   * sub classes, and is normally not needed by class generators or adapters.</i></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param owner the internal name of the field's owner class.</color>
<color=#75715e>   * @param name the field's name.</color>
<color=#75715e>   * @param desc the field's descriptor.</color>
<color=#75715e>   * @return the index of a new or already existing field reference item.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>newField</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>newFieldItem</color><color=#f8f8f2>(</color><color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>).</color><color=#a6e22e>index</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds a method reference to the constant pool of the class being build. Does nothing if the</color>
<color=#75715e>   * constant pool already contains a similar item.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param owner the internal name of the method's owner class.</color>
<color=#75715e>   * @param name the method's name.</color>
<color=#75715e>   * @param desc the method's descriptor.</color>
<color=#75715e>   * @param itf <tt>true</tt> if <tt>owner</tt> is an interface.</color>
<color=#75715e>   * @return a new or already existing method reference item.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Item</color> <color=#a6e22e>newMethodItem</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>itf</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>itf</color> <color=#f92672>?</color> <color=#f8f8f2>IMETH</color> <color=#f8f8f2>:</color> <color=#f8f8f2>METH</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>key3</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Item</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key3</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>put122</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>newClass</color><color=#f8f8f2>(</color><color=#f8f8f2>owner</color><color=#f8f8f2>),</color> <color=#f8f8f2>newNameType</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>key3</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>put</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds a method reference to the constant pool of the class being build. Does nothing if the</color>
<color=#75715e>   * constant pool already contains a similar item. <i>This method is intended for {@link Attribute}</color>
<color=#75715e>   * sub classes, and is normally not needed by class generators or adapters.</i></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param owner the internal name of the method's owner class.</color>
<color=#75715e>   * @param name the method's name.</color>
<color=#75715e>   * @param desc the method's descriptor.</color>
<color=#75715e>   * @param itf <tt>true</tt> if <tt>owner</tt> is an interface.</color>
<color=#75715e>   * @return the index of a new or already existing method reference item.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>newMethod</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>itf</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>newMethodItem</color><color=#f8f8f2>(</color><color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>itf</color><color=#f8f8f2>).</color><color=#a6e22e>index</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds an integer to the constant pool of the class being build. Does nothing if the constant</color>
<color=#75715e>   * pool already contains a similar item.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param value the int value.</color>
<color=#75715e>   * @return a new or already existing int item.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Item</color> <color=#a6e22e>newInteger</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Item</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>pool</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>INT</color><color=#f8f8f2>).</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>put</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds a float to the constant pool of the class being build. Does nothing if the constant pool</color>
<color=#75715e>   * already contains a similar item.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param value the float value.</color>
<color=#75715e>   * @return a new or already existing float item.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Item</color> <color=#a6e22e>newFloat</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Item</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>pool</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>FLOAT</color><color=#f8f8f2>).</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>intVal</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>put</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds a long to the constant pool of the class being build. Does nothing if the constant pool</color>
<color=#75715e>   * already contains a similar item.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param value the long value.</color>
<color=#75715e>   * @return a new or already existing long item.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Item</color> <color=#a6e22e>newLong</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Item</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>pool</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>LONG</color><color=#f8f8f2>).</color><color=#a6e22e>putLong</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>index</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>put</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds a double to the constant pool of the class being build. Does nothing if the constant pool</color>
<color=#75715e>   * already contains a similar item.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param value the double value.</color>
<color=#75715e>   * @return a new or already existing double item.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Item</color> <color=#a6e22e>newDouble</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Item</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>pool</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>DOUBLE</color><color=#f8f8f2>).</color><color=#a6e22e>putLong</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>longVal</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>index</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>put</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds a string to the constant pool of the class being build. Does nothing if the constant pool</color>
<color=#75715e>   * already contains a similar item.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param value the String value.</color>
<color=#75715e>   * @return a new or already existing string item.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Item</color> <color=#a6e22e>newString</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>key2</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>STR</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Item</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key2</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>pool</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#f8f8f2>STR</color><color=#f8f8f2>,</color> <color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>key2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>put</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds a name and type to the constant pool of the class being build. Does nothing if the</color>
<color=#75715e>   * constant pool already contains a similar item. <i>This method is intended for {@link Attribute}</color>
<color=#75715e>   * sub classes, and is normally not needed by class generators or adapters.</i></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param name a name.</color>
<color=#75715e>   * @param desc a type descriptor.</color>
<color=#75715e>   * @return the index of a new or already existing name and type item.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>newNameType</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>newNameTypeItem</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>).</color><color=#a6e22e>index</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds a name and type to the constant pool of the class being build. Does nothing if the</color>
<color=#75715e>   * constant pool already contains a similar item.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param name a name.</color>
<color=#75715e>   * @param desc a type descriptor.</color>
<color=#75715e>   * @return a new or already existing name and type item.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Item</color> <color=#a6e22e>newNameTypeItem</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>key2</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>NAME_TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Item</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key2</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>put122</color><color=#f8f8f2>(</color><color=#f8f8f2>NAME_TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>),</color> <color=#f8f8f2>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>key2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>put</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds the given internal name to {@link #typeTable} and returns its index. Does nothing if the</color>
<color=#75715e>   * type table already contains this internal name.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param type the internal name to be added to the type table.</color>
<color=#75715e>   * @return the index of this internal name in the type table.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>addType</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>TYPE_NORMAL</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Item</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>addType</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds the given "uninitialized" type to {@link #typeTable} and returns its index. This method is</color>
<color=#75715e>   * used for UNINITIALIZED types, made of an internal name and a bytecode offset.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param type the internal name to be added to the type table.</color>
<color=#75715e>   * @param offset the bytecode offset of the NEW instruction that created this UNINITIALIZED type</color>
<color=#75715e>   *     value.</color>
<color=#75715e>   * @return the index of this internal name in the type table.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>addUninitializedType</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>type</color> <color=#f92672>=</color> <color=#f8f8f2>TYPE_UNINIT</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>intVal</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>strVal1</color> <color=#f92672>=</color> <color=#f8f8f2>type</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color> <color=#f92672>=</color> <color=#ae81ff>0x7FFFFFFF</color> <color=#f92672>&</color> <color=#f8f8f2>(</color><color=#f8f8f2>TYPE_UNINIT</color> <color=#f92672>+</color> <color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>offset</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Item</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>addType</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds the given Item to {@link #typeTable}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param item the value to be added to the type table.</color>
<color=#75715e>   * @return the added Item, which a new Item instance with the same value as the given Item.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Item</color> <color=#a6e22e>addType</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Item</color> <color=#f8f8f2>item</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f92672>++</color><color=#f8f8f2>typeCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Item</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f8f8f2>(</color><color=#f8f8f2>typeCount</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>put</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>typeTable</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>typeTable</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f92672>[</color><color=#ae81ff>16</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>typeCount</color> <color=#f92672>==</color> <color=#f8f8f2>typeTable</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Item</color><color=#f92672>[]</color> <color=#f8f8f2>newTable</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f92672>[</color><color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>typeTable</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>typeTable</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>newTable</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>typeTable</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>typeTable</color> <color=#f92672>=</color> <color=#f8f8f2>newTable</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>typeTable</color><color=#f92672>[</color><color=#f8f8f2>typeCount</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the index of the common super type of the two given types. This method calls {@link</color>
<color=#75715e>   * #getCommonSuperClass} and caches the result in the {@link #items} hash table to speedup future</color>
<color=#75715e>   * calls with the same parameters.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param type1 index of an internal name in {@link #typeTable}.</color>
<color=#75715e>   * @param type2 index of an internal name in {@link #typeTable}.</color>
<color=#75715e>   * @return the index of the common super type of the two given types.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>getMergedType</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>type1</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>type2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>key2</color><color=#f8f8f2>.</color><color=#a6e22e>type</color> <color=#f92672>=</color> <color=#f8f8f2>TYPE_MERGED</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>key2</color><color=#f8f8f2>.</color><color=#a6e22e>longVal</color> <color=#f92672>=</color> <color=#f8f8f2>type1</color> <color=#f92672>|</color> <color=#f8f8f2>(((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>type2</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>32</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>key2</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color> <color=#f92672>=</color> <color=#ae81ff>0x7FFFFFFF</color> <color=#f92672>&</color> <color=#f8f8f2>(</color><color=#f8f8f2>TYPE_MERGED</color> <color=#f92672>+</color> <color=#f8f8f2>type1</color> <color=#f92672>+</color> <color=#f8f8f2>type2</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>Item</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>get</color><color=#f8f8f2>(</color><color=#f8f8f2>key2</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>typeTable</color><color=#f92672>[</color><color=#f8f8f2>type1</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>strVal1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#f8f8f2>typeTable</color><color=#f92672>[</color><color=#f8f8f2>type2</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>strVal1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>key2</color><color=#f8f8f2>.</color><color=#a6e22e>intVal</color> <color=#f92672>=</color> <color=#f8f8f2>addType</color><color=#f8f8f2>(</color><color=#f8f8f2>getCommonSuperClass</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f8f8f2>((</color><color=#66d9ef>short</color><color=#f8f8f2>)</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>key2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>put</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>intVal</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the common super type of the two given types. The default implementation of this method</color>
<color=#75715e>   * <i>loads</i> the two given classes and uses the java.lang.Class methods to find the common</color>
<color=#75715e>   * super class. It can be overridden to compute this common super type in other ways, in</color>
<color=#75715e>   * particular without actually loading any class, or to take into account the class that is</color>
<color=#75715e>   * currently being generated by this ClassWriter, which can of course not be loaded since it is</color>
<color=#75715e>   * under construction.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param type1 the internal name of a class.</color>
<color=#75715e>   * @param type2 the internal name of another class.</color>
<color=#75715e>   * @return the internal name of the common super class of the two given classes.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>String</color> <color=#a6e22e>getCommonSuperClass</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>type1</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>type2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Class</color><color=#f92672><?></color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#f8f8f2>d</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>classLoader</color> <color=#f92672>=</color> <color=#f8f8f2>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getClassLoader</color><color=#f8f8f2>();</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>Class</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#f8f8f2>type1</color><color=#f8f8f2>.</color><color=#a6e22e>replace</color><color=#f8f8f2>(</color><color=#e6db74>'/'</color><color=#f8f8f2>,</color> <color=#e6db74>'.'</color><color=#f8f8f2>),</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#f8f8f2>classLoader</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>d</color> <color=#f92672>=</color> <color=#f8f8f2>Class</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#f8f8f2>type2</color><color=#f8f8f2>.</color><color=#a6e22e>replace</color><color=#f8f8f2>(</color><color=#e6db74>'/'</color><color=#f8f8f2>,</color> <color=#e6db74>'.'</color><color=#f8f8f2>),</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#f8f8f2>classLoader</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>RuntimeException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>isAssignableFrom</color><color=#f8f8f2>(</color><color=#f8f8f2>d</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>type1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>d</color><color=#f8f8f2>.</color><color=#a6e22e>isAssignableFrom</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>type2</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>isInterface</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>d</color><color=#f8f8f2>.</color><color=#a6e22e>isInterface</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#e6db74>"java/lang/Object"</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>do</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>getSuperclass</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>isAssignableFrom</color><color=#f8f8f2>(</color><color=#f8f8f2>d</color><color=#f8f8f2>));</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>replace</color><color=#f8f8f2>(</color><color=#e6db74>'.'</color><color=#f8f8f2>,</color> <color=#e6db74>'/'</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the constant pool's hash table item which is equal to the given item.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param key a constant pool item.</color>
<color=#75715e>   * @return the constant pool's hash table item which is equal to the given item, or <tt>null</tt></color>
<color=#75715e>   *     if there is no such item.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Item</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Item</color> <color=#f8f8f2>key</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Item</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color> <color=#f92672>%</color> <color=#f8f8f2>items</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>type</color> <color=#f92672>!=</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>type</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>isEqualTo</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Puts the given item in the constant pool's hash table. The hash table <i>must</i> not already</color>
<color=#75715e>   * contains this item.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param i the item to be added to the constant pool's hash table.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Item</color> <color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#f8f8f2>typeCount</color> <color=#f92672>></color> <color=#f8f8f2>threshold</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>ll</color> <color=#f92672>=</color> <color=#f8f8f2>items</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>nl</color> <color=#f92672>=</color> <color=#f8f8f2>ll</color> <color=#f92672>*</color> <color=#ae81ff>2</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>Item</color><color=#f92672>[]</color> <color=#f8f8f2>newItems</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f92672>[</color><color=#f8f8f2>nl</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#f8f8f2>ll</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>l</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>l</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Item</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>l</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>j</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color> <color=#f92672>%</color> <color=#f8f8f2>newItems</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>Item</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#f8f8f2>j</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>j</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>newItems</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>newItems</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>j</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>k</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>items</color> <color=#f92672>=</color> <color=#f8f8f2>newItems</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>threshold</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>nl</color> <color=#f92672>*</color> <color=#ae81ff>0.75</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color> <color=#f92672>%</color> <color=#f8f8f2>items</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Puts one byte and two shorts into the constant pool.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param b a byte.</color>
<color=#75715e>   * @param s1 a short.</color>
<color=#75715e>   * @param s2 another short.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>put122</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>s1</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>s2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>pool</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>s1</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>s2</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Puts two bytes and one short into the constant pool.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param b1 a byte.</color>
<color=#75715e>   * @param b2 another byte.</color>
<color=#75715e>   * @param s a short.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>put112</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>b1</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>b2</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>s</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>pool</color><color=#f8f8f2>.</color><color=#a6e22e>put11</color><color=#f8f8f2>(</color><color=#f8f8f2>b1</color><color=#f8f8f2>,</color> <color=#f8f8f2>b2</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>s</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>