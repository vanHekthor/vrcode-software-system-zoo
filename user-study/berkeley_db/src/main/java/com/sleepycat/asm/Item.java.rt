<color=#75715e>/***</color>
<color=#75715e> * ASM: a very small and fast Java bytecode manipulation framework</color>
<color=#75715e> * Copyright (c) 2000-2011 INRIA, France Telecom</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions</color>
<color=#75715e> * are met:</color>
<color=#75715e> * 1. Redistributions of source code must retain the above copyright</color>
<color=#75715e> *    notice, this list of conditions and the following disclaimer.</color>
<color=#75715e> * 2. Redistributions in binary form must reproduce the above copyright</color>
<color=#75715e> *    notice, this list of conditions and the following disclaimer in the</color>
<color=#75715e> *    documentation and/or other materials provided with the distribution.</color>
<color=#75715e> * 3. Neither the name of the copyright holders nor the names of its</color>
<color=#75715e> *    contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *    this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</color>
<color=#75715e> * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE</color>
<color=#75715e> * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR</color>
<color=#75715e> * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF</color>
<color=#75715e> * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS</color>
<color=#75715e> * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN</color>
<color=#75715e> * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)</color>
<color=#75715e> * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF</color>
<color=#75715e> * THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.asm</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A constant pool item. Constant pool items can be created with the 'newXXX' methods in the {@link</color>
<color=#75715e> * ClassWriter} class.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Eric Bruneton</color>
<color=#75715e> */</color>
<color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>Item</color> <color=#f8f8f2>{</color>

  <color=#75715e>/** Index of this item in the constant pool. */</color>
  <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Type of this constant pool item. A single class is used to represent all constant pool item</color>
<color=#75715e>   * types, in order to minimize the bytecode size of this package. The value of this field is one</color>
<color=#75715e>   * of {@link ClassWriter#INT}, {@link ClassWriter#LONG}, {@link ClassWriter#FLOAT}, {@link</color>
<color=#75715e>   * ClassWriter#DOUBLE}, {@link ClassWriter#UTF8}, {@link ClassWriter#STR}, {@link</color>
<color=#75715e>   * ClassWriter#CLASS}, {@link ClassWriter#NAME_TYPE}, {@link ClassWriter#FIELD}, {@link</color>
<color=#75715e>   * ClassWriter#METH}, {@link ClassWriter#IMETH}, {@link ClassWriter#MTYPE}, {@link</color>
<color=#75715e>   * ClassWriter#INDY}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>MethodHandle constant 9 variations are stored using a range of 9 values from {@link</color>
<color=#75715e>   * ClassWriter#HANDLE_BASE} + 1 to {@link ClassWriter#HANDLE_BASE} + 9.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Special Item types are used for Items that are stored in the ClassWriter {@link</color>
<color=#75715e>   * ClassWriter#typeTable}, instead of the constant pool, in order to avoid clashes with normal</color>
<color=#75715e>   * constant pool items in the ClassWriter constant pool's hash table. These special item types are</color>
<color=#75715e>   * {@link ClassWriter#TYPE_NORMAL}, {@link ClassWriter#TYPE_UNINIT} and {@link</color>
<color=#75715e>   * ClassWriter#TYPE_MERGED}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>int</color> <color=#f8f8f2>type</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Value of this item, for an integer item. */</color>
  <color=#66d9ef>int</color> <color=#f8f8f2>intVal</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Value of this item, for a long item. */</color>
  <color=#66d9ef>long</color> <color=#f8f8f2>longVal</color><color=#f8f8f2>;</color>

  <color=#75715e>/** First part of the value of this item, for items that do not hold a primitive value. */</color>
  <color=#f8f8f2>String</color> <color=#f8f8f2>strVal1</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Second part of the value of this item, for items that do not hold a primitive value. */</color>
  <color=#f8f8f2>String</color> <color=#f8f8f2>strVal2</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Third part of the value of this item, for items that do not hold a primitive value. */</color>
  <color=#f8f8f2>String</color> <color=#f8f8f2>strVal3</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The hash code value of this constant pool item. */</color>
  <color=#66d9ef>int</color> <color=#f8f8f2>hashCode</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Link to another constant pool item, used for collision lists in the constant pool's hash table.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Item</color> <color=#f8f8f2>next</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Constructs an uninitialized {@link Item}. */</color>
  <color=#f8f8f2>Item</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs an uninitialized {@link Item} for constant pool element at given position.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param index index of the item to be constructed.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Item</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>index</color> <color=#f92672>=</color> <color=#f8f8f2>index</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs a copy of the given item.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param index index of the item to be constructed.</color>
<color=#75715e>   * @param i the item that must be copied into the item to be constructed.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Item</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Item</color> <color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>index</color> <color=#f92672>=</color> <color=#f8f8f2>index</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>intVal</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>intVal</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>longVal</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>longVal</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>strVal1</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>strVal1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>strVal2</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>strVal2</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>strVal3</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>strVal3</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>hashCode</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets this item to an integer item.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param intVal the value of this item.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>intVal</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>type</color> <color=#f92672>=</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>INT</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>intVal</color> <color=#f92672>=</color> <color=#f8f8f2>intVal</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color> <color=#f92672>=</color> <color=#ae81ff>0x7FFFFFFF</color> <color=#f92672>&</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>+</color> <color=#f8f8f2>intVal</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets this item to a long item.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param longVal the value of this item.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>longVal</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>type</color> <color=#f92672>=</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LONG</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>longVal</color> <color=#f92672>=</color> <color=#f8f8f2>longVal</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color> <color=#f92672>=</color> <color=#ae81ff>0x7FFFFFFF</color> <color=#f92672>&</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>longVal</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets this item to a float item.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param floatVal the value of this item.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>floatVal</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>type</color> <color=#f92672>=</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>FLOAT</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>intVal</color> <color=#f92672>=</color> <color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>floatToRawIntBits</color><color=#f8f8f2>(</color><color=#f8f8f2>floatVal</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color> <color=#f92672>=</color> <color=#ae81ff>0x7FFFFFFF</color> <color=#f92672>&</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>floatVal</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets this item to a double item.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param doubleVal the value of this item.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>doubleVal</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>type</color> <color=#f92672>=</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>DOUBLE</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>longVal</color> <color=#f92672>=</color> <color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>doubleToRawLongBits</color><color=#f8f8f2>(</color><color=#f8f8f2>doubleVal</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color> <color=#f92672>=</color> <color=#ae81ff>0x7FFFFFFF</color> <color=#f92672>&</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>doubleVal</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets this item to an item that do not hold a primitive value.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param type the type of this item.</color>
<color=#75715e>   * @param strVal1 first part of the value of this item.</color>
<color=#75715e>   * @param strVal2 second part of the value of this item.</color>
<color=#75715e>   * @param strVal3 third part of the value of this item.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>strVal1</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>strVal2</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>strVal3</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>type</color> <color=#f92672>=</color> <color=#f8f8f2>type</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>strVal1</color> <color=#f92672>=</color> <color=#f8f8f2>strVal1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>strVal2</color> <color=#f92672>=</color> <color=#f8f8f2>strVal2</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>strVal3</color> <color=#f92672>=</color> <color=#f8f8f2>strVal3</color><color=#f8f8f2>;</color>
    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>CLASS</color><color=#f8f8f2>:</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>intVal</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#75715e>// intVal of a class must be zero, see visitInnerClass</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>UTF8</color><color=#f8f8f2>:</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>STR</color><color=#f8f8f2>:</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>MTYPE</color><color=#f8f8f2>:</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_NORMAL</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>hashCode</color> <color=#f92672>=</color> <color=#ae81ff>0x7FFFFFFF</color> <color=#f92672>&</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>+</color> <color=#f8f8f2>strVal1</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color><color=#f8f8f2>());</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>NAME_TYPE</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>{</color>
          <color=#f8f8f2>hashCode</color> <color=#f92672>=</color> <color=#ae81ff>0x7FFFFFFF</color> <color=#f92672>&</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>+</color> <color=#f8f8f2>strVal1</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color><color=#f8f8f2>()</color> <color=#f92672>*</color> <color=#f8f8f2>strVal2</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color><color=#f8f8f2>());</color>
          <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>// ClassWriter.FIELD:</color>
        <color=#75715e>// ClassWriter.METH:</color>
        <color=#75715e>// ClassWriter.IMETH:</color>
        <color=#75715e>// ClassWriter.HANDLE_BASE + 1..9</color>
      <color=#66d9ef>default</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>hashCode</color> <color=#f92672>=</color>
            <color=#ae81ff>0x7FFFFFFF</color> <color=#f92672>&</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>+</color> <color=#f8f8f2>strVal1</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color><color=#f8f8f2>()</color> <color=#f92672>*</color> <color=#f8f8f2>strVal2</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color><color=#f8f8f2>()</color> <color=#f92672>*</color> <color=#f8f8f2>strVal3</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the item to an InvokeDynamic item.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param name invokedynamic's name.</color>
<color=#75715e>   * @param desc invokedynamic's desc.</color>
<color=#75715e>   * @param bsmIndex zero based index into the class attribute BootrapMethods.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>bsmIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>type</color> <color=#f92672>=</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>INDY</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>longVal</color> <color=#f92672>=</color> <color=#f8f8f2>bsmIndex</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>strVal1</color> <color=#f92672>=</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>strVal2</color> <color=#f92672>=</color> <color=#f8f8f2>desc</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color> <color=#f92672>=</color>
        <color=#ae81ff>0x7FFFFFFF</color> <color=#f92672>&</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>INDY</color> <color=#f92672>+</color> <color=#f8f8f2>bsmIndex</color> <color=#f92672>*</color> <color=#f8f8f2>strVal1</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color><color=#f8f8f2>()</color> <color=#f92672>*</color> <color=#f8f8f2>strVal2</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Sets the item to a BootstrapMethod item.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param position position in byte in the class attribute BootrapMethods.</color>
<color=#75715e>   * @param hashCode hashcode of the item. This hashcode is processed from the hashcode of the</color>
<color=#75715e>   *     bootstrap method and the hashcode of all bootstrap arguments.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>position</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>hashCode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>type</color> <color=#f92672>=</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>BSM</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>intVal</color> <color=#f92672>=</color> <color=#f8f8f2>position</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color> <color=#f92672>=</color> <color=#f8f8f2>hashCode</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Indicates if the given item is equal to this one. <i>This method assumes that the two items</color>
<color=#75715e>   * have the same {@link #type}</i>.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param i the item to be compared to this one. Both items must have the same {@link #type}.</color>
<color=#75715e>   * @return <tt>true</tt> if the given item if equal to this one, <tt>false</tt> otherwise.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>boolean</color> <color=#a6e22e>isEqualTo</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Item</color> <color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>UTF8</color><color=#f8f8f2>:</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>STR</color><color=#f8f8f2>:</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>CLASS</color><color=#f8f8f2>:</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>MTYPE</color><color=#f8f8f2>:</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_NORMAL</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>strVal1</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>strVal1</color><color=#f8f8f2>);</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_MERGED</color><color=#f8f8f2>:</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LONG</color><color=#f8f8f2>:</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>DOUBLE</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>longVal</color> <color=#f92672>==</color> <color=#f8f8f2>longVal</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>INT</color><color=#f8f8f2>:</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>FLOAT</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>intVal</color> <color=#f92672>==</color> <color=#f8f8f2>intVal</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_UNINIT</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>intVal</color> <color=#f92672>==</color> <color=#f8f8f2>intVal</color> <color=#f92672>&&</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>strVal1</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>strVal1</color><color=#f8f8f2>);</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>NAME_TYPE</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>strVal1</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>strVal1</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>strVal2</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>strVal2</color><color=#f8f8f2>);</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>INDY</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>longVal</color> <color=#f92672>==</color> <color=#f8f8f2>longVal</color> <color=#f92672>&&</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>strVal1</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>strVal1</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>strVal2</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>strVal2</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>// case ClassWriter.FIELD:</color>
        <color=#75715e>// case ClassWriter.METH:</color>
        <color=#75715e>// case ClassWriter.IMETH:</color>
        <color=#75715e>// case ClassWriter.HANDLE_BASE + 1..9</color>
      <color=#66d9ef>default</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>strVal1</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>strVal1</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>strVal2</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>strVal2</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>strVal3</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>strVal3</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>