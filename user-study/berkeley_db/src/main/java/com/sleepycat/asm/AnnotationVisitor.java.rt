<color=#75715e>/***</color>
<color=#75715e> * ASM: a very small and fast Java bytecode manipulation framework</color>
<color=#75715e> * Copyright (c) 2000-2011 INRIA, France Telecom</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions</color>
<color=#75715e> * are met:</color>
<color=#75715e> * 1. Redistributions of source code must retain the above copyright</color>
<color=#75715e> *    notice, this list of conditions and the following disclaimer.</color>
<color=#75715e> * 2. Redistributions in binary form must reproduce the above copyright</color>
<color=#75715e> *    notice, this list of conditions and the following disclaimer in the</color>
<color=#75715e> *    documentation and/or other materials provided with the distribution.</color>
<color=#75715e> * 3. Neither the name of the copyright holders nor the names of its</color>
<color=#75715e> *    contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *    this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</color>
<color=#75715e> * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE</color>
<color=#75715e> * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR</color>
<color=#75715e> * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF</color>
<color=#75715e> * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS</color>
<color=#75715e> * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN</color>
<color=#75715e> * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)</color>
<color=#75715e> * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF</color>
<color=#75715e> * THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.asm</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A visitor to visit a Java annotation. The methods of this class must be called in the following</color>
<color=#75715e> * order: ( <tt>visit</tt> | <tt>visitEnum</tt> | <tt>visitAnnotation</tt> | <tt>visitArray</tt> )*</color>
<color=#75715e> * <tt>visitEnd</tt>.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Eric Bruneton</color>
<color=#75715e> * @author Eugene Kuleshov</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>AnnotationVisitor</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The ASM API version implemented by this visitor. The value of this field must be one of {@link</color>
<color=#75715e>   * Opcodes#ASM4} or {@link Opcodes#ASM5}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>api</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The annotation visitor to which this visitor must delegate method calls. May be null. */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#f8f8f2>av</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs a new {@link AnnotationVisitor}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param api the ASM API version implemented by this visitor. Must be one of {@link Opcodes#ASM4}</color>
<color=#75715e>   *     or {@link Opcodes#ASM5}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>AnnotationVisitor</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>api</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>api</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs a new {@link AnnotationVisitor}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param api the ASM API version implemented by this visitor. Must be one of {@link Opcodes#ASM4}</color>
<color=#75715e>   *     or {@link Opcodes#ASM5}.</color>
<color=#75715e>   * @param av the annotation visitor to which this visitor must delegate method calls. May be null.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>AnnotationVisitor</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>api</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#f8f8f2>av</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>api</color> <color=#f92672>!=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ASM4</color> <color=#f92672>&&</color> <color=#f8f8f2>api</color> <color=#f92672>!=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ASM5</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>api</color> <color=#f92672>=</color> <color=#f8f8f2>api</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>av</color> <color=#f92672>=</color> <color=#f8f8f2>av</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits a primitive value of the annotation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param name the value name.</color>
<color=#75715e>   * @param value the actual value, whose type must be {@link Byte}, {@link Boolean}, {@link</color>
<color=#75715e>   *     Character}, {@link Short}, {@link Integer} , {@link Long}, {@link Float}, {@link Double},</color>
<color=#75715e>   *     {@link String} or {@link Type} or OBJECT or ARRAY sort. This value can also be an array of</color>
<color=#75715e>   *     byte, boolean, short, char, int, long, float or double values (this is equivalent to using</color>
<color=#75715e>   *     {@link #visitArray visitArray} and visiting each array element in turn, but is more</color>
<color=#75715e>   *     convenient).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>av</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits an enumeration value of the annotation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param name the value name.</color>
<color=#75715e>   * @param desc the class descriptor of the enumeration class.</color>
<color=#75715e>   * @param value the actual enumeration value.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitEnum</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>av</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnum</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits a nested annotation value of the annotation.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param name the value name.</color>
<color=#75715e>   * @param desc the class descriptor of the nested annotation class.</color>
<color=#75715e>   * @return a visitor to visit the actual nested annotation value, or <tt>null</tt> if this visitor</color>
<color=#75715e>   *     is not interested in visiting this nested annotation. <i>The nested annotation value must</color>
<color=#75715e>   *     be fully visited before calling other methods on this annotation visitor</i>.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>av</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visitAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits an array value of the annotation. Note that arrays of primitive types (such as byte,</color>
<color=#75715e>   * boolean, short, char, int, long, float or double) can be passed as value to {@link #visit</color>
<color=#75715e>   * visit}. This is what {@link ClassReader} does.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param name the value name.</color>
<color=#75715e>   * @return a visitor to visit the actual array value elements, or <tt>null</tt> if this visitor is</color>
<color=#75715e>   *     not interested in visiting these values. The 'name' parameters passed to the methods of</color>
<color=#75715e>   *     this visitor are ignored. <i>All the array values must be visited before calling other</color>
<color=#75715e>   *     methods on this annotation visitor</i>.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitArray</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>av</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visitArray</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Visits the end of the annotation. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitEnd</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>av</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>