<color=#75715e>/***</color>
<color=#75715e> * ASM: a very small and fast Java bytecode manipulation framework</color>
<color=#75715e> * Copyright (c) 2000-2011 INRIA, France Telecom</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions</color>
<color=#75715e> * are met:</color>
<color=#75715e> * 1. Redistributions of source code must retain the above copyright</color>
<color=#75715e> *    notice, this list of conditions and the following disclaimer.</color>
<color=#75715e> * 2. Redistributions in binary form must reproduce the above copyright</color>
<color=#75715e> *    notice, this list of conditions and the following disclaimer in the</color>
<color=#75715e> *    documentation and/or other materials provided with the distribution.</color>
<color=#75715e> * 3. Neither the name of the copyright holders nor the names of its</color>
<color=#75715e> *    contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *    this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</color>
<color=#75715e> * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE</color>
<color=#75715e> * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR</color>
<color=#75715e> * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF</color>
<color=#75715e> * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS</color>
<color=#75715e> * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN</color>
<color=#75715e> * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)</color>
<color=#75715e> * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF</color>
<color=#75715e> * THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.asm</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Constructor</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Method</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A Java field or method type. This class can be used to make it easier to manipulate type and</color>
<color=#75715e> * method descriptors.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Eric Bruneton</color>
<color=#75715e> * @author Chris Nokleberg</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Type</color> <color=#f8f8f2>{</color>

  <color=#75715e>/** The sort of the <tt>void</tt> type. See {@link #getSort getSort}. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>VOID</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The sort of the <tt>boolean</tt> type. See {@link #getSort getSort}. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BOOLEAN</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The sort of the <tt>char</tt> type. See {@link #getSort getSort}. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>CHAR</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The sort of the <tt>byte</tt> type. See {@link #getSort getSort}. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BYTE</color> <color=#f92672>=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The sort of the <tt>short</tt> type. See {@link #getSort getSort}. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SHORT</color> <color=#f92672>=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The sort of the <tt>int</tt> type. See {@link #getSort getSort}. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>INT</color> <color=#f92672>=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The sort of the <tt>float</tt> type. See {@link #getSort getSort}. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FLOAT</color> <color=#f92672>=</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The sort of the <tt>long</tt> type. See {@link #getSort getSort}. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LONG</color> <color=#f92672>=</color> <color=#ae81ff>7</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The sort of the <tt>double</tt> type. See {@link #getSort getSort}. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DOUBLE</color> <color=#f92672>=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The sort of array reference types. See {@link #getSort getSort}. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ARRAY</color> <color=#f92672>=</color> <color=#ae81ff>9</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The sort of object reference types. See {@link #getSort getSort}. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>OBJECT</color> <color=#f92672>=</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The sort of method types. See {@link #getSort getSort}. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>METHOD</color> <color=#f92672>=</color> <color=#ae81ff>11</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The <tt>void</tt> type. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Type</color> <color=#f8f8f2>VOID_TYPE</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>Type</color><color=#f8f8f2>(</color><color=#f8f8f2>VOID</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#e6db74>'V'</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#ae81ff>5</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#ae81ff>0</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>

  <color=#75715e>/** The <tt>boolean</tt> type. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Type</color> <color=#f8f8f2>BOOLEAN_TYPE</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>Type</color><color=#f8f8f2>(</color><color=#f8f8f2>BOOLEAN</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#e6db74>'Z'</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#ae81ff>0</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#ae81ff>5</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>

  <color=#75715e>/** The <tt>char</tt> type. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Type</color> <color=#f8f8f2>CHAR_TYPE</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>Type</color><color=#f8f8f2>(</color><color=#f8f8f2>CHAR</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#e6db74>'C'</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#ae81ff>0</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#ae81ff>6</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>

  <color=#75715e>/** The <tt>byte</tt> type. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Type</color> <color=#f8f8f2>BYTE_TYPE</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>Type</color><color=#f8f8f2>(</color><color=#f8f8f2>BYTE</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#e6db74>'B'</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#ae81ff>0</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#ae81ff>5</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>

  <color=#75715e>/** The <tt>short</tt> type. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Type</color> <color=#f8f8f2>SHORT_TYPE</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>Type</color><color=#f8f8f2>(</color><color=#f8f8f2>SHORT</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#e6db74>'S'</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#ae81ff>0</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#ae81ff>7</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>

  <color=#75715e>/** The <tt>int</tt> type. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Type</color> <color=#f8f8f2>INT_TYPE</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>Type</color><color=#f8f8f2>(</color><color=#f8f8f2>INT</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#e6db74>'I'</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#ae81ff>0</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#ae81ff>0</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>

  <color=#75715e>/** The <tt>float</tt> type. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Type</color> <color=#f8f8f2>FLOAT_TYPE</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>Type</color><color=#f8f8f2>(</color><color=#f8f8f2>FLOAT</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#e6db74>'F'</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#ae81ff>2</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#ae81ff>2</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>

  <color=#75715e>/** The <tt>long</tt> type. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Type</color> <color=#f8f8f2>LONG_TYPE</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>Type</color><color=#f8f8f2>(</color><color=#f8f8f2>LONG</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#e6db74>'J'</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#ae81ff>1</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#ae81ff>1</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>

  <color=#75715e>/** The <tt>double</tt> type. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Type</color> <color=#f8f8f2>DOUBLE_TYPE</color> <color=#f92672>=</color>
      <color=#66d9ef>new</color> <color=#f8f8f2>Type</color><color=#f8f8f2>(</color><color=#f8f8f2>DOUBLE</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#e6db74>'D'</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#ae81ff>3</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#ae81ff>3</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>

  <color=#75715e>// ------------------------------------------------------------------------</color>
  <color=#75715e>// Fields</color>
  <color=#75715e>// ------------------------------------------------------------------------</color>

  <color=#75715e>/** The sort of this Java type. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>sort</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A buffer containing the internal name of this Java type. This field is only used for reference</color>
<color=#75715e>   * types.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The offset of the internal name of this Java type in {@link #buf buf} or, for primitive types,</color>
<color=#75715e>   * the size, descriptor and getOpcode offsets for this type (byte 0 contains the size, byte 1 the</color>
<color=#75715e>   * descriptor, byte 2 the offset for IALOAD or IASTORE, byte 3 the offset for all other</color>
<color=#75715e>   * instructions).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The length of the internal name of this Java type. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color>

  <color=#75715e>// ------------------------------------------------------------------------</color>
  <color=#75715e>// Constructors</color>
  <color=#75715e>// ------------------------------------------------------------------------</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs a reference type.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param sort the sort of the reference type to be constructed.</color>
<color=#75715e>   * @param buf a buffer containing the descriptor of the previous type.</color>
<color=#75715e>   * @param off the offset of this descriptor in the previous buffer.</color>
<color=#75715e>   * @param len the length of this descriptor.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#a6e22e>Type</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>sort</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>sort</color> <color=#f92672>=</color> <color=#f8f8f2>sort</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>buf</color> <color=#f92672>=</color> <color=#f8f8f2>buf</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>off</color> <color=#f92672>=</color> <color=#f8f8f2>off</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>len</color> <color=#f92672>=</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the Java type corresponding to the given type descriptor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param typeDescriptor a field or method type descriptor.</color>
<color=#75715e>   * @return the Java type corresponding to the given type descriptor.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Type</color> <color=#a6e22e>getType</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>typeDescriptor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getType</color><color=#f8f8f2>(</color><color=#f8f8f2>typeDescriptor</color><color=#f8f8f2>.</color><color=#a6e22e>toCharArray</color><color=#f8f8f2>(),</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the Java type corresponding to the given internal name.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param internalName an internal name.</color>
<color=#75715e>   * @return the Java type corresponding to the given internal name.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Type</color> <color=#a6e22e>getObjectType</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>internalName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#f8f8f2>internalName</color><color=#f8f8f2>.</color><color=#a6e22e>toCharArray</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Type</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#e6db74>'['</color> <color=#f92672>?</color> <color=#f8f8f2>ARRAY</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OBJECT</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the Java type corresponding to the given method descriptor. Equivalent to <code></color>
<color=#75715e>   * Type.getType(methodDescriptor)</code>.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param methodDescriptor a method descriptor.</color>
<color=#75715e>   * @return the Java type corresponding to the given method descriptor.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Type</color> <color=#a6e22e>getMethodType</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>methodDescriptor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getType</color><color=#f8f8f2>(</color><color=#f8f8f2>methodDescriptor</color><color=#f8f8f2>.</color><color=#a6e22e>toCharArray</color><color=#f8f8f2>(),</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the Java method type corresponding to the given argument and return types.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param returnType the return type of the method.</color>
<color=#75715e>   * @param argumentTypes the argument types of the method.</color>
<color=#75715e>   * @return the Java type corresponding to the given argument and return types.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Type</color> <color=#a6e22e>getMethodType</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Type</color> <color=#f8f8f2>returnType</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Type</color><color=#f8f8f2>...</color> <color=#f8f8f2>argumentTypes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getType</color><color=#f8f8f2>(</color><color=#f8f8f2>getMethodDescriptor</color><color=#f8f8f2>(</color><color=#f8f8f2>returnType</color><color=#f8f8f2>,</color> <color=#f8f8f2>argumentTypes</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the Java type corresponding to the given class.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param c a class.</color>
<color=#75715e>   * @return the Java type corresponding to the given class.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Type</color> <color=#a6e22e>getType</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Class</color><color=#f92672><?></color> <color=#f8f8f2>c</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>isPrimitive</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>INT_TYPE</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#f8f8f2>Void</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>VOID_TYPE</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#f8f8f2>Boolean</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>BOOLEAN_TYPE</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#f8f8f2>Byte</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>BYTE_TYPE</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>CHAR_TYPE</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#f8f8f2>Short</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>SHORT_TYPE</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>DOUBLE_TYPE</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>FLOAT_TYPE</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#75715e>/* if (c == Long.TYPE) */</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>LONG_TYPE</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>getType</color><color=#f8f8f2>(</color><color=#f8f8f2>getDescriptor</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the Java method type corresponding to the given constructor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param c a {@link Constructor Constructor} object.</color>
<color=#75715e>   * @return the Java method type corresponding to the given constructor.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Type</color> <color=#a6e22e>getType</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Constructor</color><color=#f92672><?></color> <color=#f8f8f2>c</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getType</color><color=#f8f8f2>(</color><color=#f8f8f2>getConstructorDescriptor</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the Java method type corresponding to the given method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param m a {@link Method Method} object.</color>
<color=#75715e>   * @return the Java method type corresponding to the given method.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Type</color> <color=#a6e22e>getType</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Method</color> <color=#f8f8f2>m</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getType</color><color=#f8f8f2>(</color><color=#f8f8f2>getMethodDescriptor</color><color=#f8f8f2>(</color><color=#f8f8f2>m</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the Java types corresponding to the argument types of the given method descriptor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param methodDescriptor a method descriptor.</color>
<color=#75715e>   * @return the Java types corresponding to the argument types of the given method descriptor.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Type</color><color=#f92672>[]</color> <color=#a6e22e>getArgumentTypes</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>methodDescriptor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#f8f8f2>methodDescriptor</color><color=#f8f8f2>.</color><color=#a6e22e>toCharArray</color><color=#f8f8f2>();</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>off</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>char</color> <color=#f8f8f2>car</color> <color=#f92672>=</color> <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>car</color> <color=#f92672>==</color> <color=#e6db74>')'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>car</color> <color=#f92672>==</color> <color=#e6db74>'L'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>++]</color> <color=#f92672>!=</color> <color=#e6db74>';'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{}</color>
        <color=#f92672>++</color><color=#f8f8f2>size</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>car</color> <color=#f92672>!=</color> <color=#e6db74>'['</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f92672>++</color><color=#f8f8f2>size</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>Type</color><color=#f92672>[]</color> <color=#f8f8f2>args</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Type</color><color=#f92672>[</color><color=#f8f8f2>size</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>off</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>]</color> <color=#f92672>!=</color> <color=#e6db74>')'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>args</color><color=#f92672>[</color><color=#f8f8f2>size</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>getType</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>off</color> <color=#f92672>+=</color> <color=#f8f8f2>args</color><color=#f92672>[</color><color=#f8f8f2>size</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>len</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>args</color><color=#f92672>[</color><color=#f8f8f2>size</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>sort</color> <color=#f92672>==</color> <color=#f8f8f2>OBJECT</color> <color=#f92672>?</color> <color=#ae81ff>2</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>args</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the Java types corresponding to the argument types of the given method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param method a method.</color>
<color=#75715e>   * @return the Java types corresponding to the argument types of the given method.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Type</color><color=#f92672>[]</color> <color=#a6e22e>getArgumentTypes</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Method</color> <color=#f8f8f2>method</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Class</color><color=#f92672><?>[]</color> <color=#f8f8f2>classes</color> <color=#f92672>=</color> <color=#f8f8f2>method</color><color=#f8f8f2>.</color><color=#a6e22e>getParameterTypes</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>Type</color><color=#f92672>[]</color> <color=#f8f8f2>types</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Type</color><color=#f92672>[</color><color=#f8f8f2>classes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>classes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>types</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>getType</color><color=#f8f8f2>(</color><color=#f8f8f2>classes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>types</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the Java type corresponding to the return type of the given method descriptor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param methodDescriptor a method descriptor.</color>
<color=#75715e>   * @return the Java type corresponding to the return type of the given method descriptor.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Type</color> <color=#a6e22e>getReturnType</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>methodDescriptor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#f8f8f2>methodDescriptor</color><color=#f8f8f2>.</color><color=#a6e22e>toCharArray</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getType</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>methodDescriptor</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#e6db74>')'</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the Java type corresponding to the return type of the given method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param method a method.</color>
<color=#75715e>   * @return the Java type corresponding to the return type of the given method.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Type</color> <color=#a6e22e>getReturnType</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Method</color> <color=#f8f8f2>method</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getType</color><color=#f8f8f2>(</color><color=#f8f8f2>method</color><color=#f8f8f2>.</color><color=#a6e22e>getReturnType</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Computes the size of the arguments and of the return value of a method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param desc the descriptor of a method.</color>
<color=#75715e>   * @return the size of the arguments of the method (plus one for the implicit this argument),</color>
<color=#75715e>   *     argSize, and the size of its return value, retSize, packed into a single int i =</color>
<color=#75715e>   *     <tt>(argSize &lt;&lt; 2) | retSize</tt> (argSize is therefore equal to <tt>i &gt;&gt;</color>
<color=#75715e>   *     2</tt>, and retSize to <tt>i &amp; 0x03</tt>).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getArgumentsAndReturnSizes</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>char</color> <color=#f8f8f2>car</color> <color=#f92672>=</color> <color=#f8f8f2>desc</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f92672>++</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>car</color> <color=#f92672>==</color> <color=#e6db74>')'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>car</color> <color=#f92672>=</color> <color=#f8f8f2>desc</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>n</color> <color=#f92672><<</color> <color=#ae81ff>2</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>car</color> <color=#f92672>==</color> <color=#e6db74>'V'</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#f8f8f2>car</color> <color=#f92672>==</color> <color=#e6db74>'D'</color> <color=#f92672>||</color> <color=#f8f8f2>car</color> <color=#f92672>==</color> <color=#e6db74>'J'</color> <color=#f92672>?</color> <color=#ae81ff>2</color> <color=#f8f8f2>:</color> <color=#ae81ff>1</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>car</color> <color=#f92672>==</color> <color=#e6db74>'L'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#e6db74>';'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{}</color>
        <color=#f8f8f2>n</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>car</color> <color=#f92672>==</color> <color=#e6db74>'['</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>((</color><color=#f8f8f2>car</color> <color=#f92672>=</color> <color=#f8f8f2>desc</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>))</color> <color=#f92672>==</color> <color=#e6db74>'['</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f92672>++</color><color=#f8f8f2>c</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>car</color> <color=#f92672>==</color> <color=#e6db74>'D'</color> <color=#f92672>||</color> <color=#f8f8f2>car</color> <color=#f92672>==</color> <color=#e6db74>'J'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>n</color> <color=#f92672>-=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>car</color> <color=#f92672>==</color> <color=#e6db74>'D'</color> <color=#f92672>||</color> <color=#f8f8f2>car</color> <color=#f92672>==</color> <color=#e6db74>'J'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>n</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>n</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the Java type corresponding to the given type descriptor. For method descriptors, buf</color>
<color=#75715e>   * is supposed to contain nothing more than the descriptor itself.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param buf a buffer containing a type descriptor.</color>
<color=#75715e>   * @param off the offset of this descriptor in the previous buffer.</color>
<color=#75715e>   * @return the Java type corresponding to the given type descriptor.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Type</color> <color=#a6e22e>getType</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color>
    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#e6db74>'V'</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>VOID_TYPE</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#e6db74>'Z'</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>BOOLEAN_TYPE</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#e6db74>'C'</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>CHAR_TYPE</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#e6db74>'B'</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>BYTE_TYPE</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#e6db74>'S'</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>SHORT_TYPE</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#e6db74>'I'</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>INT_TYPE</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#e6db74>'F'</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>FLOAT_TYPE</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#e6db74>'J'</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>LONG_TYPE</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#e6db74>'D'</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>DOUBLE_TYPE</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#e6db74>'['</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color> <color=#f92672>+</color> <color=#f8f8f2>len</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#e6db74>'['</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f92672>++</color><color=#f8f8f2>len</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color> <color=#f92672>+</color> <color=#f8f8f2>len</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#e6db74>'L'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f92672>++</color><color=#f8f8f2>len</color><color=#f8f8f2>;</color>
          <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color> <color=#f92672>+</color> <color=#f8f8f2>len</color><color=#f92672>]</color> <color=#f92672>!=</color> <color=#e6db74>';'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f92672>++</color><color=#f8f8f2>len</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Type</color><color=#f8f8f2>(</color><color=#f8f8f2>ARRAY</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#66d9ef>case</color> <color=#e6db74>'L'</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color> <color=#f92672>+</color> <color=#f8f8f2>len</color><color=#f92672>]</color> <color=#f92672>!=</color> <color=#e6db74>';'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f92672>++</color><color=#f8f8f2>len</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Type</color><color=#f8f8f2>(</color><color=#f8f8f2>OBJECT</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#75715e>// case '(':</color>
      <color=#66d9ef>default</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Type</color><color=#f8f8f2>(</color><color=#f8f8f2>METHOD</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#f8f8f2>off</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// ------------------------------------------------------------------------</color>
  <color=#75715e>// Accessors</color>
  <color=#75715e>// ------------------------------------------------------------------------</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the sort of this Java type.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return {@link #VOID VOID}, {@link #BOOLEAN BOOLEAN}, {@link #CHAR CHAR}, {@link #BYTE BYTE},</color>
<color=#75715e>   *     {@link #SHORT SHORT}, {@link #INT INT}, {@link #FLOAT FLOAT}, {@link #LONG LONG}, {@link</color>
<color=#75715e>   *     #DOUBLE DOUBLE}, {@link #ARRAY ARRAY}, {@link #OBJECT OBJECT} or {@link #METHOD METHOD}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getSort</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>sort</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the number of dimensions of this array type. This method should only be used for an</color>
<color=#75715e>   * array type.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the number of dimensions of this array type.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getDimensions</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>off</color> <color=#f92672>+</color> <color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#e6db74>'['</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the type of the elements of this array type. This method should only be used for an</color>
<color=#75715e>   * array type.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return Returns the type of the elements of this array type.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Type</color> <color=#a6e22e>getElementType</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getType</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color> <color=#f92672>+</color> <color=#f8f8f2>getDimensions</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the binary name of the class corresponding to this type. This method must not be used</color>
<color=#75715e>   * on method types.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the binary name of the class corresponding to this type.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getClassName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>sort</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>VOID</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#e6db74>"void"</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>BOOLEAN</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#e6db74>"boolean"</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>CHAR</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#e6db74>"char"</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>BYTE</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#e6db74>"byte"</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>SHORT</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#e6db74>"short"</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>INT</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#e6db74>"int"</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>FLOAT</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#e6db74>"float"</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>LONG</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#e6db74>"long"</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>DOUBLE</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#e6db74>"double"</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ARRAY</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>(</color><color=#f8f8f2>getElementType</color><color=#f8f8f2>().</color><color=#a6e22e>getClassName</color><color=#f8f8f2>());</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>getDimensions</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"[]"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>OBJECT</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>).</color><color=#a6e22e>replace</color><color=#f8f8f2>(</color><color=#e6db74>'/'</color><color=#f8f8f2>,</color> <color=#e6db74>'.'</color><color=#f8f8f2>);</color>
      <color=#66d9ef>default</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the internal name of the class corresponding to this object or array type. The internal</color>
<color=#75715e>   * name of a class is its fully qualified name (as returned by Class.getName(), where '.' are</color>
<color=#75715e>   * replaced by '/'. This method should only be used for an object or array type.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the internal name of the class corresponding to this object type.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getInternalName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the argument types of methods of this type. This method should only be used for method</color>
<color=#75715e>   * types.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the argument types of methods of this type.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Type</color><color=#f92672>[]</color> <color=#a6e22e>getArgumentTypes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getArgumentTypes</color><color=#f8f8f2>(</color><color=#f8f8f2>getDescriptor</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the return type of methods of this type. This method should only be used for method</color>
<color=#75715e>   * types.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the return type of methods of this type.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Type</color> <color=#a6e22e>getReturnType</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getReturnType</color><color=#f8f8f2>(</color><color=#f8f8f2>getDescriptor</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the size of the arguments and of the return value of methods of this type. This method</color>
<color=#75715e>   * should only be used for method types.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the size of the arguments (plus one for the implicit this argument), argSize, and the</color>
<color=#75715e>   *     size of the return value, retSize, packed into a single int i = <tt>(argSize &lt;&lt; 2) |</color>
<color=#75715e>   *     retSize</tt> (argSize is therefore equal to <tt>i &gt;&gt; 2</tt>, and retSize to <tt>i</color>
<color=#75715e>   *     &amp; 0x03</tt>).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getArgumentsAndReturnSizes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getArgumentsAndReturnSizes</color><color=#f8f8f2>(</color><color=#f8f8f2>getDescriptor</color><color=#f8f8f2>());</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// ------------------------------------------------------------------------</color>
  <color=#75715e>// Conversion to type descriptors</color>
  <color=#75715e>// ------------------------------------------------------------------------</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the descriptor corresponding to this Java type.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the descriptor corresponding to this Java type.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getDescriptor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StringBuffer</color> <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuffer</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>getDescriptor</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the descriptor corresponding to the given argument and return types.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param returnType the return type of the method.</color>
<color=#75715e>   * @param argumentTypes the argument types of the method.</color>
<color=#75715e>   * @return the descriptor corresponding to the given argument and return types.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getMethodDescriptor</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Type</color> <color=#f8f8f2>returnType</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Type</color><color=#f8f8f2>...</color> <color=#f8f8f2>argumentTypes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StringBuffer</color> <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuffer</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'('</color><color=#f8f8f2>);</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>argumentTypes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>argumentTypes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getDescriptor</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>')'</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>returnType</color><color=#f8f8f2>.</color><color=#a6e22e>getDescriptor</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Appends the descriptor corresponding to this Java type to the given string buffer.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param buf the string buffer to which the descriptor must be appended.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>getDescriptor</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>StringBuffer</color> <color=#f8f8f2>buf</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>buf</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>// descriptor is in byte 3 of 'off' for primitive types (buf ==</color>
      <color=#75715e>// null)</color>
      <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>((</color><color=#66d9ef>char</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>off</color> <color=#f92672>&</color> <color=#ae81ff>0xFF000000</color><color=#f8f8f2>)</color> <color=#f92672>>>></color> <color=#ae81ff>24</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sort</color> <color=#f92672>==</color> <color=#f8f8f2>OBJECT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'L'</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>';'</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color> <color=#75715e>// sort == ARRAY || sort == METHOD</color>
      <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// ------------------------------------------------------------------------</color>
  <color=#75715e>// Direct conversion from classes to type descriptors,</color>
  <color=#75715e>// without intermediate Type objects</color>
  <color=#75715e>// ------------------------------------------------------------------------</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the internal name of the given class. The internal name of a class is its fully</color>
<color=#75715e>   * qualified name, as returned by Class.getName(), where '.' are replaced by '/'.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param c an object or array class.</color>
<color=#75715e>   * @return the internal name of the given class.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getInternalName</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Class</color><color=#f92672><?></color> <color=#f8f8f2>c</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>replace</color><color=#f8f8f2>(</color><color=#e6db74>'.'</color><color=#f8f8f2>,</color> <color=#e6db74>'/'</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the descriptor corresponding to the given Java type.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param c an object class, a primitive class or an array class.</color>
<color=#75715e>   * @return the descriptor corresponding to the given class.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getDescriptor</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Class</color><color=#f92672><?></color> <color=#f8f8f2>c</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>StringBuffer</color> <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuffer</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>getDescriptor</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the descriptor corresponding to the given constructor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param c a {@link Constructor Constructor} object.</color>
<color=#75715e>   * @return the descriptor of the given constructor.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getConstructorDescriptor</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Constructor</color><color=#f92672><?></color> <color=#f8f8f2>c</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Class</color><color=#f92672><?>[]</color> <color=#f8f8f2>parameters</color> <color=#f92672>=</color> <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>getParameterTypes</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>StringBuffer</color> <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuffer</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'('</color><color=#f8f8f2>);</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>parameters</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>getDescriptor</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>parameters</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>")V"</color><color=#f8f8f2>).</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the descriptor corresponding to the given method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param m a {@link Method Method} object.</color>
<color=#75715e>   * @return the descriptor of the given method.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getMethodDescriptor</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Method</color> <color=#f8f8f2>m</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Class</color><color=#f92672><?>[]</color> <color=#f8f8f2>parameters</color> <color=#f92672>=</color> <color=#f8f8f2>m</color><color=#f8f8f2>.</color><color=#a6e22e>getParameterTypes</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>StringBuffer</color> <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuffer</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'('</color><color=#f8f8f2>);</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>parameters</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>getDescriptor</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>parameters</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>')'</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>getDescriptor</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>m</color><color=#f8f8f2>.</color><color=#a6e22e>getReturnType</color><color=#f8f8f2>());</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Appends the descriptor of the given class to the given string buffer.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param buf the string buffer to which the descriptor must be appended.</color>
<color=#75715e>   * @param c the class whose descriptor must be computed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>getDescriptor</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>StringBuffer</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Class</color><color=#f92672><?></color> <color=#f8f8f2>c</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Class</color><color=#f92672><?></color> <color=#f8f8f2>d</color> <color=#f92672>=</color> <color=#f8f8f2>c</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>d</color><color=#f8f8f2>.</color><color=#a6e22e>isPrimitive</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>char</color> <color=#f8f8f2>car</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>d</color> <color=#f92672>==</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>car</color> <color=#f92672>=</color> <color=#e6db74>'I'</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>d</color> <color=#f92672>==</color> <color=#f8f8f2>Void</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>car</color> <color=#f92672>=</color> <color=#e6db74>'V'</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>d</color> <color=#f92672>==</color> <color=#f8f8f2>Boolean</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>car</color> <color=#f92672>=</color> <color=#e6db74>'Z'</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>d</color> <color=#f92672>==</color> <color=#f8f8f2>Byte</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>car</color> <color=#f92672>=</color> <color=#e6db74>'B'</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>d</color> <color=#f92672>==</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>car</color> <color=#f92672>=</color> <color=#e6db74>'C'</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>d</color> <color=#f92672>==</color> <color=#f8f8f2>Short</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>car</color> <color=#f92672>=</color> <color=#e6db74>'S'</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>d</color> <color=#f92672>==</color> <color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>car</color> <color=#f92672>=</color> <color=#e6db74>'D'</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>d</color> <color=#f92672>==</color> <color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>car</color> <color=#f92672>=</color> <color=#e6db74>'F'</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#75715e>/* if (d == Long.TYPE) */</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>car</color> <color=#f92672>=</color> <color=#e6db74>'J'</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>car</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>d</color><color=#f8f8f2>.</color><color=#a6e22e>isArray</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'['</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>d</color> <color=#f92672>=</color> <color=#f8f8f2>d</color><color=#f8f8f2>.</color><color=#a6e22e>getComponentType</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'L'</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>d</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>char</color> <color=#f8f8f2>car</color> <color=#f92672>=</color> <color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>car</color> <color=#f92672>==</color> <color=#e6db74>'.'</color> <color=#f92672>?</color> <color=#e6db74>'/'</color> <color=#f8f8f2>:</color> <color=#f8f8f2>car</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>';'</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// ------------------------------------------------------------------------</color>
  <color=#75715e>// Corresponding size and opcodes</color>
  <color=#75715e>// ------------------------------------------------------------------------</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the size of values of this type. This method must not be used for method types.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the size of values of this type, i.e., 2 for <tt>long</tt> and <tt>double</tt>, 0 for</color>
<color=#75715e>   *     <tt>void</tt> and 1 otherwise.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>// the size is in byte 0 of 'off' for primitive types (buf == null)</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>buf</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#f8f8f2>off</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a JVM instruction opcode adapted to this Java type. This method must not be used for</color>
<color=#75715e>   * method types.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param opcode a JVM instruction opcode. This opcode must be one of ILOAD, ISTORE, IALOAD,</color>
<color=#75715e>   *     IASTORE, IADD, ISUB, IMUL, IDIV, IREM, INEG, ISHL, ISHR, IUSHR, IAND, IOR, IXOR and</color>
<color=#75715e>   *     IRETURN.</color>
<color=#75715e>   * @return an opcode that is similar to the given opcode, but adapted to this Java type. For</color>
<color=#75715e>   *     example, if this type is <tt>float</tt> and <tt>opcode</tt> is IRETURN, this method returns</color>
<color=#75715e>   *     FRETURN.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getOpcode</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>opcode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>IALOAD</color> <color=#f92672>||</color> <color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>IASTORE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>// the offset for IALOAD or IASTORE is in byte 1 of 'off' for</color>
      <color=#75715e>// primitive types (buf == null)</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>opcode</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#f8f8f2>off</color> <color=#f92672>&</color> <color=#ae81ff>0xFF00</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#ae81ff>8</color> <color=#f8f8f2>:</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#75715e>// the offset for other instructions is in byte 2 of 'off' for</color>
      <color=#75715e>// primitive types (buf == null)</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>opcode</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#f8f8f2>off</color> <color=#f92672>&</color> <color=#ae81ff>0xFF0000</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#ae81ff>16</color> <color=#f8f8f2>:</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// ------------------------------------------------------------------------</color>
  <color=#75715e>// Equals, hashCode and toString</color>
  <color=#75715e>// ------------------------------------------------------------------------</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Tests if the given object is equal to this type.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param o the object to be compared to this type.</color>
<color=#75715e>   * @return <tt>true</tt> if the given object is equal to this type.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color> <color=#f92672>==</color> <color=#f8f8f2>o</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Type</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>Type</color> <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Type</color><color=#f8f8f2>)</color> <color=#f8f8f2>o</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sort</color> <color=#f92672>!=</color> <color=#f8f8f2>t</color><color=#f8f8f2>.</color><color=#a6e22e>sort</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sort</color> <color=#f92672>>=</color> <color=#f8f8f2>ARRAY</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>len</color> <color=#f92672>!=</color> <color=#f8f8f2>t</color><color=#f8f8f2>.</color><color=#a6e22e>len</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>t</color><color=#f8f8f2>.</color><color=#a6e22e>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>end</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>end</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>!=</color> <color=#f8f8f2>t</color><color=#f8f8f2>.</color><color=#a6e22e>buf</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a hash code value for this type.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return a hash code value for this type.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>hashCode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>hc</color> <color=#f92672>=</color> <color=#ae81ff>13</color> <color=#f92672>*</color> <color=#f8f8f2>sort</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sort</color> <color=#f92672>>=</color> <color=#f8f8f2>ARRAY</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>end</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>end</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>hc</color> <color=#f92672>=</color> <color=#ae81ff>17</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>hc</color> <color=#f92672>+</color> <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>hc</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns a string representation of this type.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the descriptor of this type.</color>
<color=#75715e>   */</color>
  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>getDescriptor</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>