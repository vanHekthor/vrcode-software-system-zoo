<color=#75715e>/***</color>
<color=#75715e> * ASM: a very small and fast Java bytecode manipulation framework</color>
<color=#75715e> * Copyright (c) 2000-2011 INRIA, France Telecom</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions</color>
<color=#75715e> * are met:</color>
<color=#75715e> * 1. Redistributions of source code must retain the above copyright</color>
<color=#75715e> *    notice, this list of conditions and the following disclaimer.</color>
<color=#75715e> * 2. Redistributions in binary form must reproduce the above copyright</color>
<color=#75715e> *    notice, this list of conditions and the following disclaimer in the</color>
<color=#75715e> *    documentation and/or other materials provided with the distribution.</color>
<color=#75715e> * 3. Neither the name of the copyright holders nor the names of its</color>
<color=#75715e> *    contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *    this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</color>
<color=#75715e> * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE</color>
<color=#75715e> * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR</color>
<color=#75715e> * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF</color>
<color=#75715e> * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS</color>
<color=#75715e> * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN</color>
<color=#75715e> * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)</color>
<color=#75715e> * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF</color>
<color=#75715e> * THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.asm</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * An {@link AnnotationVisitor} that generates annotations in bytecode form.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Eric Bruneton</color>
<color=#75715e> * @author Eugene Kuleshov</color>
<color=#75715e> */</color>
<color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>AnnotationWriter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#f8f8f2>{</color>

  <color=#75715e>/** The class writer to which this annotation must be added. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ClassWriter</color> <color=#f8f8f2>cw</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The number of values in this annotation. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * <tt>true<tt> if values are named, <tt>false</tt> otherwise. Annotation writers used for</color>
<color=#75715e>   * annotation default and annotation arrays use unnamed values.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>named</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The annotation values in bytecode form. This byte vector only contains the values themselves,</color>
<color=#75715e>   * i.e. the number of values must be stored as a unsigned short just before these bytes.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>bv</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The byte vector to be used to store the number of values of this annotation. See {@link #bv}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>parent</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Where the number of values of this annotation must be stored in {@link #parent}. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Next annotation writer. This field is used to store annotation lists. */</color>
  <color=#f8f8f2>AnnotationWriter</color> <color=#f8f8f2>next</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Previous annotation writer. This field is used to store annotation lists. */</color>
  <color=#f8f8f2>AnnotationWriter</color> <color=#f8f8f2>prev</color><color=#f8f8f2>;</color>

  <color=#75715e>// ------------------------------------------------------------------------</color>
  <color=#75715e>// Constructor</color>
  <color=#75715e>// ------------------------------------------------------------------------</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs a new {@link AnnotationWriter}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param cw the class writer to which this annotation must be added.</color>
<color=#75715e>   * @param named <tt>true<tt> if values are named, <tt>false</tt> otherwise.</color>
<color=#75715e>   * @param bv where the annotation values must be stored.</color>
<color=#75715e>   * @param parent where the number of annotation values must be stored.</color>
<color=#75715e>   * @param offset where in <tt>parent</tt> the number of annotation values must be stored.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>AnnotationWriter</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ClassWriter</color> <color=#f8f8f2>cw</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>named</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>bv</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>parent</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ASM5</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>cw</color> <color=#f92672>=</color> <color=#f8f8f2>cw</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>named</color> <color=#f92672>=</color> <color=#f8f8f2>named</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>bv</color> <color=#f92672>=</color> <color=#f8f8f2>bv</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color> <color=#f92672>=</color> <color=#f8f8f2>parent</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>offset</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// ------------------------------------------------------------------------</color>
  <color=#75715e>// Implementation of the AnnotationVisitor abstract class</color>
  <color=#75715e>// ------------------------------------------------------------------------</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f92672>++</color><color=#f8f8f2>size</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>named</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>'s'</color><color=#f8f8f2>,</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>((</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>'B'</color><color=#f8f8f2>,</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newInteger</color><color=#f8f8f2>(((</color><color=#f8f8f2>Byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>).</color><color=#a6e22e>byteValue</color><color=#f8f8f2>()).</color><color=#a6e22e>index</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Boolean</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>Boolean</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>).</color><color=#a6e22e>booleanValue</color><color=#f8f8f2>()</color> <color=#f92672>?</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>'Z'</color><color=#f8f8f2>,</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newInteger</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>).</color><color=#a6e22e>index</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Character</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>'C'</color><color=#f8f8f2>,</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newInteger</color><color=#f8f8f2>(((</color><color=#f8f8f2>Character</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>).</color><color=#a6e22e>charValue</color><color=#f8f8f2>()).</color><color=#a6e22e>index</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Short</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>'S'</color><color=#f8f8f2>,</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newInteger</color><color=#f8f8f2>(((</color><color=#f8f8f2>Short</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>).</color><color=#a6e22e>shortValue</color><color=#f8f8f2>()).</color><color=#a6e22e>index</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>'c'</color><color=#f8f8f2>,</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(((</color><color=#f8f8f2>Type</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>).</color><color=#a6e22e>getDescriptor</color><color=#f8f8f2>()));</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#66d9ef>byte</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>'['</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>'B'</color><color=#f8f8f2>,</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newInteger</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>).</color><color=#a6e22e>index</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#66d9ef>boolean</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>boolean</color><color=#f92672>[]</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>boolean</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>'['</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>'Z'</color><color=#f8f8f2>,</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newInteger</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>?</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>).</color><color=#a6e22e>index</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#66d9ef>short</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>short</color><color=#f92672>[]</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>short</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>'['</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>'S'</color><color=#f8f8f2>,</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newInteger</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>).</color><color=#a6e22e>index</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#66d9ef>char</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>char</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>'['</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>'C'</color><color=#f8f8f2>,</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newInteger</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>).</color><color=#a6e22e>index</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>'['</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>'I'</color><color=#f8f8f2>,</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newInteger</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>).</color><color=#a6e22e>index</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#66d9ef>long</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>long</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>'['</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>'J'</color><color=#f8f8f2>,</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newLong</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>).</color><color=#a6e22e>index</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#66d9ef>float</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>'['</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>'F'</color><color=#f8f8f2>,</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newFloat</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>).</color><color=#a6e22e>index</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#66d9ef>double</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>double</color><color=#f92672>[]</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>'['</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>'D'</color><color=#f8f8f2>,</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newDouble</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>).</color><color=#a6e22e>index</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Item</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newConstItem</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>".s.IFJDCS"</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>),</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitEnum</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f92672>++</color><color=#f8f8f2>size</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>named</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>'e'</color><color=#f8f8f2>,</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>)).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitAnnotation</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f92672>++</color><color=#f8f8f2>size</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>named</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// write tag and type, and reserve space for values count</color>
    <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>'@'</color><color=#f8f8f2>,</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>)).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>AnnotationWriter</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitArray</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f92672>++</color><color=#f8f8f2>size</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>named</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// write tag, and reserve space for array size</color>
    <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#e6db74>'['</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>AnnotationWriter</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitEnd</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>parent</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#f8f8f2>parent</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>data</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>data</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// ------------------------------------------------------------------------</color>
  <color=#75715e>// Utility methods</color>
  <color=#75715e>// ------------------------------------------------------------------------</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the size of this annotation writer list.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the size of this annotation writer list.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>int</color> <color=#a6e22e>getSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>AnnotationWriter</color> <color=#f8f8f2>aw</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>aw</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>bv</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>aw</color> <color=#f92672>=</color> <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Puts the annotations of this annotation writer list into the given byte vector.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param out where the annotations must be put.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>out</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>AnnotationWriter</color> <color=#f8f8f2>aw</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>AnnotationWriter</color> <color=#f8f8f2>last</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>aw</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>n</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>bv</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color> <color=#75715e>// in case user forgot to call visitEnd</color>
      <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>prev</color> <color=#f92672>=</color> <color=#f8f8f2>last</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>last</color> <color=#f92672>=</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>aw</color> <color=#f92672>=</color> <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>size</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>n</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>aw</color> <color=#f92672>=</color> <color=#f8f8f2>last</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>aw</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>bv</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>bv</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>aw</color> <color=#f92672>=</color> <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>prev</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Puts the given annotation lists into the given byte vector.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param panns an array of annotation writer lists.</color>
<color=#75715e>   * @param off index of the first annotation to be written.</color>
<color=#75715e>   * @param out where the annotations must be put.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>AnnotationWriter</color><color=#f92672>[]</color> <color=#f8f8f2>panns</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>out</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#ae81ff>1</color> <color=#f92672>+</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>panns</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#f8f8f2>off</color><color=#f8f8f2>);</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>off</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>panns</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>panns</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>panns</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>size</color><color=#f8f8f2>).</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>panns</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#f8f8f2>off</color><color=#f8f8f2>);</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>off</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>panns</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>AnnotationWriter</color> <color=#f8f8f2>aw</color> <color=#f92672>=</color> <color=#f8f8f2>panns</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>AnnotationWriter</color> <color=#f8f8f2>last</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>aw</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f92672>++</color><color=#f8f8f2>n</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color> <color=#75715e>// in case user forgot to call visitEnd</color>
        <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>prev</color> <color=#f92672>=</color> <color=#f8f8f2>last</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>last</color> <color=#f92672>=</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>aw</color> <color=#f92672>=</color> <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>n</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>aw</color> <color=#f92672>=</color> <color=#f8f8f2>last</color><color=#f8f8f2>;</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>aw</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>bv</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>bv</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>aw</color> <color=#f92672>=</color> <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>prev</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Puts the given type reference and type path into the given bytevector. LOCAL_VARIABLE and</color>
<color=#75715e>   * RESOURCE_VARIABLE target types are not supported.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param typeRef a reference to the annotated type. See {@link TypeReference}.</color>
<color=#75715e>   * @param typePath the path to the annotated type argument, wildcard bound, array element type, or</color>
<color=#75715e>   *     static inner type within 'typeRef'. May be <tt>null</tt> if the annotation targets</color>
<color=#75715e>   *     'typeRef' as a whole.</color>
<color=#75715e>   * @param out where the type reference and type path must be put.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>putTarget</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>TypePath</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>out</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>typeRef</color> <color=#f92672>>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#ae81ff>0x00</color><color=#f8f8f2>:</color> <color=#75715e>// CLASS_TYPE_PARAMETER</color>
      <color=#66d9ef>case</color> <color=#ae81ff>0x01</color><color=#f8f8f2>:</color> <color=#75715e>// METHOD_TYPE_PARAMETER</color>
      <color=#66d9ef>case</color> <color=#ae81ff>0x16</color><color=#f8f8f2>:</color> <color=#75715e>// METHOD_FORMAL_PARAMETER</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>typeRef</color> <color=#f92672>>>></color> <color=#ae81ff>16</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#ae81ff>0x13</color><color=#f8f8f2>:</color> <color=#75715e>// FIELD</color>
      <color=#66d9ef>case</color> <color=#ae81ff>0x14</color><color=#f8f8f2>:</color> <color=#75715e>// METHOD_RETURN</color>
      <color=#66d9ef>case</color> <color=#ae81ff>0x15</color><color=#f8f8f2>:</color> <color=#75715e>// METHOD_RECEIVER</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>typeRef</color> <color=#f92672>>>></color> <color=#ae81ff>24</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#ae81ff>0x47</color><color=#f8f8f2>:</color> <color=#75715e>// CAST</color>
      <color=#66d9ef>case</color> <color=#ae81ff>0x48</color><color=#f8f8f2>:</color> <color=#75715e>// CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT</color>
      <color=#66d9ef>case</color> <color=#ae81ff>0x49</color><color=#f8f8f2>:</color> <color=#75715e>// METHOD_INVOCATION_TYPE_ARGUMENT</color>
      <color=#66d9ef>case</color> <color=#ae81ff>0x4A</color><color=#f8f8f2>:</color> <color=#75715e>// CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT</color>
      <color=#66d9ef>case</color> <color=#ae81ff>0x4B</color><color=#f8f8f2>:</color> <color=#75715e>// METHOD_REFERENCE_TYPE_ARGUMENT</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>typeRef</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#75715e>// case 0x10: // CLASS_EXTENDS</color>
        <color=#75715e>// case 0x11: // CLASS_TYPE_PARAMETER_BOUND</color>
        <color=#75715e>// case 0x12: // METHOD_TYPE_PARAMETER_BOUND</color>
        <color=#75715e>// case 0x17: // THROWS</color>
        <color=#75715e>// case 0x42: // EXCEPTION_PARAMETER</color>
        <color=#75715e>// case 0x43: // INSTANCEOF</color>
        <color=#75715e>// case 0x44: // NEW</color>
        <color=#75715e>// case 0x45: // CONSTRUCTOR_REFERENCE</color>
        <color=#75715e>// case 0x46: // METHOD_REFERENCE</color>
      <color=#66d9ef>default</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#f8f8f2>typeRef</color> <color=#f92672>>>></color> <color=#ae81ff>24</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>typeRef</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFF00</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>typePath</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>.</color><color=#a6e22e>b</color><color=#f92672>[</color><color=#f8f8f2>typePath</color><color=#f8f8f2>.</color><color=#a6e22e>offset</color><color=#f92672>]</color> <color=#f92672>*</color> <color=#ae81ff>2</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>typePath</color><color=#f8f8f2>.</color><color=#a6e22e>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>.</color><color=#a6e22e>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>