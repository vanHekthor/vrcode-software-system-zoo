<color=#75715e>/***</color>
<color=#75715e> * ASM: a very small and fast Java bytecode manipulation framework</color>
<color=#75715e> * Copyright (c) 2000-2011 INRIA, France Telecom</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions</color>
<color=#75715e> * are met:</color>
<color=#75715e> * 1. Redistributions of source code must retain the above copyright</color>
<color=#75715e> *    notice, this list of conditions and the following disclaimer.</color>
<color=#75715e> * 2. Redistributions in binary form must reproduce the above copyright</color>
<color=#75715e> *    notice, this list of conditions and the following disclaimer in the</color>
<color=#75715e> *    documentation and/or other materials provided with the distribution.</color>
<color=#75715e> * 3. Neither the name of the copyright holders nor the names of its</color>
<color=#75715e> *    contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *    this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</color>
<color=#75715e> * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE</color>
<color=#75715e> * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR</color>
<color=#75715e> * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF</color>
<color=#75715e> * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS</color>
<color=#75715e> * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN</color>
<color=#75715e> * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)</color>
<color=#75715e> * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF</color>
<color=#75715e> * THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.asm</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A non standard class, field, method or code attribute.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Eric Bruneton</color>
<color=#75715e> * @author Eugene Kuleshov</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Attribute</color> <color=#f8f8f2>{</color>

  <color=#75715e>/** The type of this attribute. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>type</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The raw value of this attribute, used only for unknown attributes. */</color>
  <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The next attribute in this attribute list. May be <tt>null</tt>. */</color>
  <color=#f8f8f2>Attribute</color> <color=#f8f8f2>next</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs a new empty attribute.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param type the type of the attribute.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#a6e22e>Attribute</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>type</color> <color=#f92672>=</color> <color=#f8f8f2>type</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns <tt>true</tt> if this type of attribute is unknown. The default implementation of this</color>
<color=#75715e>   * method always returns <tt>true</tt>.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return <tt>true</tt> if this type of attribute is unknown.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isUnknown</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns <tt>true</tt> if this type of attribute is a code attribute.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return <tt>true</tt> if this type of attribute is a code attribute.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isCodeAttribute</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the labels corresponding to this attribute.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the labels corresponding to this attribute, or <tt>null</tt> if this attribute is not a</color>
<color=#75715e>   *     code attribute that contains labels.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>Label</color><color=#f92672>[]</color> <color=#a6e22e>getLabels</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a {@link #type type} attribute. This method must return a <i>new</i> {@link Attribute}</color>
<color=#75715e>   * object, of type {@link #type type}, corresponding to the <tt>len</tt> bytes starting at the</color>
<color=#75715e>   * given offset, in the given class reader.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param cr the class that contains the attribute to be read.</color>
<color=#75715e>   * @param off index of the first byte of the attribute's content in {@link ClassReader#b cr.b}.</color>
<color=#75715e>   *     The 6 attribute header bytes, containing the type and the length of the attribute, are not</color>
<color=#75715e>   *     taken into account here.</color>
<color=#75715e>   * @param len the length of the attribute's content.</color>
<color=#75715e>   * @param buf buffer to be used to call {@link ClassReader#readUTF8 readUTF8}, {@link</color>
<color=#75715e>   *     ClassReader#readClass(int,char[]) readClass} or {@link ClassReader#readConst readConst}.</color>
<color=#75715e>   * @param codeOff index of the first byte of code's attribute content in {@link ClassReader#b</color>
<color=#75715e>   *     cr.b}, or -1 if the attribute to be read is not a code attribute. The 6 attribute header</color>
<color=#75715e>   *     bytes, containing the type and the length of the attribute, are not taken into account</color>
<color=#75715e>   *     here.</color>
<color=#75715e>   * @param labels the labels of the method's code, or <tt>null</tt> if the attribute to be read is</color>
<color=#75715e>   *     not a code attribute.</color>
<color=#75715e>   * @return a <i>new</i> {@link Attribute} object corresponding to the given bytes.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>Attribute</color> <color=#a6e22e>read</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ClassReader</color> <color=#f8f8f2>cr</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>codeOff</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Label</color><color=#f92672>[]</color> <color=#f8f8f2>labels</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Attribute</color> <color=#f8f8f2>attr</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Attribute</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>attr</color><color=#f8f8f2>.</color><color=#a6e22e>value</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>len</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>cr</color><color=#f8f8f2>.</color><color=#a6e22e>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>attr</color><color=#f8f8f2>.</color><color=#a6e22e>value</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>attr</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the byte array form of this attribute.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param cw the class to which this attribute must be added. This parameter can be used to add to</color>
<color=#75715e>   *     the constant pool of this class the items that corresponds to this attribute.</color>
<color=#75715e>   * @param code the bytecode of the method corresponding to this code attribute, or <tt>null</tt></color>
<color=#75715e>   *     if this attribute is not a code attributes.</color>
<color=#75715e>   * @param len the length of the bytecode of the method corresponding to this code attribute, or</color>
<color=#75715e>   *     <tt>null</tt> if this attribute is not a code attribute.</color>
<color=#75715e>   * @param maxStack the maximum stack size of the method corresponding to this code attribute, or</color>
<color=#75715e>   *     -1 if this attribute is not a code attribute.</color>
<color=#75715e>   * @param maxLocals the maximum number of local variables of the method corresponding to this code</color>
<color=#75715e>   *     attribute, or -1 if this attribute is not a code attribute.</color>
<color=#75715e>   * @return the byte array form of this attribute.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>ByteVector</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ClassWriter</color> <color=#f8f8f2>cw</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>code</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxStack</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxLocals</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteVector</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>data</color> <color=#f92672>=</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>=</color> <color=#f8f8f2>value</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>v</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the length of the attribute list that begins with this attribute.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the length of the attribute list that begins with this attribute.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Attribute</color> <color=#f8f8f2>attr</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>attr</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>count</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>attr</color> <color=#f92672>=</color> <color=#f8f8f2>attr</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the size of all the attributes in this attribute list.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param cw the class writer to be used to convert the attributes into byte arrays, with the</color>
<color=#75715e>   *     {@link #write write} method.</color>
<color=#75715e>   * @param code the bytecode of the method corresponding to these code attributes, or <tt>null</tt></color>
<color=#75715e>   *     if these attributes are not code attributes.</color>
<color=#75715e>   * @param len the length of the bytecode of the method corresponding to these code attributes, or</color>
<color=#75715e>   *     <tt>null</tt> if these attributes are not code attributes.</color>
<color=#75715e>   * @param maxStack the maximum stack size of the method corresponding to these code attributes, or</color>
<color=#75715e>   *     -1 if these attributes are not code attributes.</color>
<color=#75715e>   * @param maxLocals the maximum number of local variables of the method corresponding to these</color>
<color=#75715e>   *     code attributes, or -1 if these attributes are not code attributes.</color>
<color=#75715e>   * @return the size of all the attributes in this attribute list. This size includes the size of</color>
<color=#75715e>   *     the attribute headers.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getSize</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ClassWriter</color> <color=#f8f8f2>cw</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>code</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxStack</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxLocals</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Attribute</color> <color=#f8f8f2>attr</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>attr</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>attr</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>attr</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#f8f8f2>code</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxStack</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxLocals</color><color=#f8f8f2>).</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>attr</color> <color=#f92672>=</color> <color=#f8f8f2>attr</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes all the attributes of this attribute list in the given byte vector.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param cw the class writer to be used to convert the attributes into byte arrays, with the</color>
<color=#75715e>   *     {@link #write write} method.</color>
<color=#75715e>   * @param code the bytecode of the method corresponding to these code attributes, or <tt>null</tt></color>
<color=#75715e>   *     if these attributes are not code attributes.</color>
<color=#75715e>   * @param len the length of the bytecode of the method corresponding to these code attributes, or</color>
<color=#75715e>   *     <tt>null</tt> if these attributes are not code attributes.</color>
<color=#75715e>   * @param maxStack the maximum stack size of the method corresponding to these code attributes, or</color>
<color=#75715e>   *     -1 if these attributes are not code attributes.</color>
<color=#75715e>   * @param maxLocals the maximum number of local variables of the method corresponding to these</color>
<color=#75715e>   *     code attributes, or -1 if these attributes are not code attributes.</color>
<color=#75715e>   * @param out where the attributes must be written.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>put</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ClassWriter</color> <color=#f8f8f2>cw</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>code</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxStack</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxLocals</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>out</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>Attribute</color> <color=#f8f8f2>attr</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>attr</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>attr</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#f8f8f2>code</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxStack</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxLocals</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>attr</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>)).</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>attr</color> <color=#f92672>=</color> <color=#f8f8f2>attr</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>