<color=#75715e>/***</color>
<color=#75715e> * ASM: a very small and fast Java bytecode manipulation framework</color>
<color=#75715e> * Copyright (c) 2000-2011 INRIA, France Telecom</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions</color>
<color=#75715e> * are met:</color>
<color=#75715e> * 1. Redistributions of source code must retain the above copyright</color>
<color=#75715e> *    notice, this list of conditions and the following disclaimer.</color>
<color=#75715e> * 2. Redistributions in binary form must reproduce the above copyright</color>
<color=#75715e> *    notice, this list of conditions and the following disclaimer in the</color>
<color=#75715e> *    documentation and/or other materials provided with the distribution.</color>
<color=#75715e> * 3. Neither the name of the copyright holders nor the names of its</color>
<color=#75715e> *    contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *    this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</color>
<color=#75715e> * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE</color>
<color=#75715e> * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR</color>
<color=#75715e> * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF</color>
<color=#75715e> * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS</color>
<color=#75715e> * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN</color>
<color=#75715e> * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)</color>
<color=#75715e> * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF</color>
<color=#75715e> * THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.asm</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A visitor to visit a Java class. The methods of this class must be called in the following order:</color>
<color=#75715e> * <tt>visit</tt> [ <tt>visitSource</tt> ] [ <tt>visitOuterClass</tt> ] ( <tt>visitAnnotation</tt> |</color>
<color=#75715e> * <tt>visitTypeAnnotation</tt> | <tt>visitAttribute</tt> )* ( <tt>visitInnerClass</tt> |</color>
<color=#75715e> * <tt>visitField</tt> | <tt>visitMethod</tt> )* <tt>visitEnd</tt>.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Eric Bruneton</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>ClassVisitor</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The ASM API version implemented by this visitor. The value of this field must be one of {@link</color>
<color=#75715e>   * Opcodes#ASM4} or {@link Opcodes#ASM5}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>api</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The class visitor to which this visitor must delegate method calls. May be null. */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>ClassVisitor</color> <color=#f8f8f2>cv</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs a new {@link ClassVisitor}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param api the ASM API version implemented by this visitor. Must be one of {@link Opcodes#ASM4}</color>
<color=#75715e>   *     or {@link Opcodes#ASM5}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>ClassVisitor</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>api</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>api</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs a new {@link ClassVisitor}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param api the ASM API version implemented by this visitor. Must be one of {@link Opcodes#ASM4}</color>
<color=#75715e>   *     or {@link Opcodes#ASM5}.</color>
<color=#75715e>   * @param cv the class visitor to which this visitor must delegate method calls. May be null.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>ClassVisitor</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>api</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ClassVisitor</color> <color=#f8f8f2>cv</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>api</color> <color=#f92672>!=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ASM4</color> <color=#f92672>&&</color> <color=#f8f8f2>api</color> <color=#f92672>!=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ASM5</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>api</color> <color=#f92672>=</color> <color=#f8f8f2>api</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>cv</color> <color=#f92672>=</color> <color=#f8f8f2>cv</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits the header of the class.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param version the class version.</color>
<color=#75715e>   * @param access the class's access flags (see {@link Opcodes}). This parameter also indicates if</color>
<color=#75715e>   *     the class is deprecated.</color>
<color=#75715e>   * @param name the internal name of the class (see {@link Type#getInternalName()</color>
<color=#75715e>   *     getInternalName}).</color>
<color=#75715e>   * @param signature the signature of this class. May be <tt>null</tt> if the class is not a</color>
<color=#75715e>   *     generic one, and does not extend or implement generic classes or interfaces.</color>
<color=#75715e>   * @param superName the internal of name of the super class (see {@link Type#getInternalName()</color>
<color=#75715e>   *     getInternalName}). For interfaces, the super class is {@link Object}. May be <tt>null</tt>,</color>
<color=#75715e>   *     but only for the {@link Object} class.</color>
<color=#75715e>   * @param interfaces the internal names of the class's interfaces (see {@link</color>
<color=#75715e>   *     Type#getInternalName() getInternalName}). May be <tt>null</tt>.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visit</color><color=#f8f8f2>(</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>version</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>access</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>signature</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>superName</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>interfaces</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#f8f8f2>version</color><color=#f8f8f2>,</color> <color=#f8f8f2>access</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>signature</color><color=#f8f8f2>,</color> <color=#f8f8f2>superName</color><color=#f8f8f2>,</color> <color=#f8f8f2>interfaces</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits the source of the class.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param source the name of the source file from which the class was compiled. May be</color>
<color=#75715e>   *     <tt>null</tt>.</color>
<color=#75715e>   * @param debug additional debug information to compute the correspondance between source and</color>
<color=#75715e>   *     compiled elements of the class. May be <tt>null</tt>.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitSource</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>debug</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visitSource</color><color=#f8f8f2>(</color><color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#f8f8f2>debug</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits the enclosing class of the class. This method must be called only if the class has an</color>
<color=#75715e>   * enclosing class.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param owner internal name of the enclosing class of the class.</color>
<color=#75715e>   * @param name the name of the method that contains the class, or <tt>null</tt> if the class is</color>
<color=#75715e>   *     not enclosed in a method of its enclosing class.</color>
<color=#75715e>   * @param desc the descriptor of the method that contains the class, or <tt>null</tt> if the class</color>
<color=#75715e>   *     is not enclosed in a method of its enclosing class.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitOuterClass</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visitOuterClass</color><color=#f8f8f2>(</color><color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits an annotation of the class.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param desc the class descriptor of the annotation class.</color>
<color=#75715e>   * @param visible <tt>true</tt> if the annotation is visible at runtime.</color>
<color=#75715e>   * @return a visitor to visit the annotation values, or <tt>null</tt> if this visitor is not</color>
<color=#75715e>   *     interested in visiting this annotation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visitAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>visible</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits an annotation on a type in the class signature.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param typeRef a reference to the annotated type. The sort of this type reference must be</color>
<color=#75715e>   *     {@link TypeReference#CLASS_TYPE_PARAMETER CLASS_TYPE_PARAMETER}, {@link</color>
<color=#75715e>   *     TypeReference#CLASS_TYPE_PARAMETER_BOUND CLASS_TYPE_PARAMETER_BOUND} or {@link</color>
<color=#75715e>   *     TypeReference#CLASS_EXTENDS CLASS_EXTENDS}. See {@link TypeReference}.</color>
<color=#75715e>   * @param typePath the path to the annotated type argument, wildcard bound, array element type, or</color>
<color=#75715e>   *     static inner type within 'typeRef'. May be <tt>null</tt> if the annotation targets</color>
<color=#75715e>   *     'typeRef' as a whole.</color>
<color=#75715e>   * @param desc the class descriptor of the annotation class.</color>
<color=#75715e>   * @param visible <tt>true</tt> if the annotation is visible at runtime.</color>
<color=#75715e>   * @return a visitor to visit the annotation values, or <tt>null</tt> if this visitor is not</color>
<color=#75715e>   *     interested in visiting this annotation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitTypeAnnotation</color><color=#f8f8f2>(</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>TypePath</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>api</color> <color=#f92672><</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ASM5</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>RuntimeException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTypeAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>visible</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits a non standard attribute of the class.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param attr an attribute.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitAttribute</color><color=#f8f8f2>(</color><color=#f8f8f2>Attribute</color> <color=#f8f8f2>attr</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visitAttribute</color><color=#f8f8f2>(</color><color=#f8f8f2>attr</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits information about an inner class. This inner class is not necessarily a member of the</color>
<color=#75715e>   * class being visited.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param name the internal name of an inner class (see {@link Type#getInternalName()</color>
<color=#75715e>   *     getInternalName}).</color>
<color=#75715e>   * @param outerName the internal name of the class to which the inner class belongs (see {@link</color>
<color=#75715e>   *     Type#getInternalName() getInternalName}). May be <tt>null</tt> for not member classes.</color>
<color=#75715e>   * @param innerName the (simple) name of the inner class inside its enclosing class. May be</color>
<color=#75715e>   *     <tt>null</tt> for anonymous inner classes.</color>
<color=#75715e>   * @param access the access flags of the inner class as originally declared in the enclosing</color>
<color=#75715e>   *     class.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitInnerClass</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>outerName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>innerName</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>access</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInnerClass</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>outerName</color><color=#f8f8f2>,</color> <color=#f8f8f2>innerName</color><color=#f8f8f2>,</color> <color=#f8f8f2>access</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits a field of the class.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param access the field's access flags (see {@link Opcodes}). This parameter also indicates if</color>
<color=#75715e>   *     the field is synthetic and/or deprecated.</color>
<color=#75715e>   * @param name the field's name.</color>
<color=#75715e>   * @param desc the field's descriptor (see {@link Type Type}).</color>
<color=#75715e>   * @param signature the field's signature. May be <tt>null</tt> if the field's type does not use</color>
<color=#75715e>   *     generic types.</color>
<color=#75715e>   * @param value the field's initial value. This parameter, which may be <tt>null</tt> if the field</color>
<color=#75715e>   *     does not have an initial value, must be an {@link Integer}, a {@link Float}, a {@link</color>
<color=#75715e>   *     Long}, a {@link Double} or a {@link String} (for <tt>int</tt>, <tt>float</tt>,</color>
<color=#75715e>   *     <tt>long</tt> or <tt>String</tt> fields respectively). <i>This parameter is only used for</color>
<color=#75715e>   *     static fields</i>. Its value is ignored for non static fields, which must be initialized</color>
<color=#75715e>   *     through bytecode instructions in constructors or methods.</color>
<color=#75715e>   * @return a visitor to visit field annotations and attributes, or <tt>null</tt> if this class</color>
<color=#75715e>   *     visitor is not interested in visiting these annotations and attributes.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>FieldVisitor</color> <color=#a6e22e>visitField</color><color=#f8f8f2>(</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>access</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>signature</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>value</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visitField</color><color=#f8f8f2>(</color><color=#f8f8f2>access</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>signature</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits a method of the class. This method <i>must</i> return a new {@link MethodVisitor}</color>
<color=#75715e>   * instance (or <tt>null</tt>) each time it is called, i.e., it should not return a previously</color>
<color=#75715e>   * returned visitor.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param access the method's access flags (see {@link Opcodes}). This parameter also indicates if</color>
<color=#75715e>   *     the method is synthetic and/or deprecated.</color>
<color=#75715e>   * @param name the method's name.</color>
<color=#75715e>   * @param desc the method's descriptor (see {@link Type Type}).</color>
<color=#75715e>   * @param signature the method's signature. May be <tt>null</tt> if the method parameters, return</color>
<color=#75715e>   *     type and exceptions do not use generic types.</color>
<color=#75715e>   * @param exceptions the internal names of the method's exception classes (see {@link</color>
<color=#75715e>   *     Type#getInternalName() getInternalName}). May be <tt>null</tt>.</color>
<color=#75715e>   * @return an object to visit the byte code of the method, or <tt>null</tt> if this class visitor</color>
<color=#75715e>   *     is not interested in visiting the code of this method.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>MethodVisitor</color> <color=#a6e22e>visitMethod</color><color=#f8f8f2>(</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>access</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>signature</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>exceptions</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethod</color><color=#f8f8f2>(</color><color=#f8f8f2>access</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>signature</color><color=#f8f8f2>,</color> <color=#f8f8f2>exceptions</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits the end of the class. This method, which is the last one to be called, is used to inform</color>
<color=#75715e>   * the visitor that all the fields and methods of the class have been visited.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitEnd</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cv</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>