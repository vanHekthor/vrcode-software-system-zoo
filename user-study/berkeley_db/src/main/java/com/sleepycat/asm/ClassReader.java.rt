<color=#75715e>/***</color>
<color=#75715e> * ASM: a very small and fast Java bytecode manipulation framework</color>
<color=#75715e> * Copyright (c) 2000-2011 INRIA, France Telecom</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions</color>
<color=#75715e> * are met:</color>
<color=#75715e> * 1. Redistributions of source code must retain the above copyright</color>
<color=#75715e> *    notice, this list of conditions and the following disclaimer.</color>
<color=#75715e> * 2. Redistributions in binary form must reproduce the above copyright</color>
<color=#75715e> *    notice, this list of conditions and the following disclaimer in the</color>
<color=#75715e> *    documentation and/or other materials provided with the distribution.</color>
<color=#75715e> * 3. Neither the name of the copyright holders nor the names of its</color>
<color=#75715e> *    contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *    this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</color>
<color=#75715e> * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE</color>
<color=#75715e> * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR</color>
<color=#75715e> * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF</color>
<color=#75715e> * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS</color>
<color=#75715e> * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN</color>
<color=#75715e> * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)</color>
<color=#75715e> * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF</color>
<color=#75715e> * THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.asm</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.InputStream</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A Java class parser to make a {@link ClassVisitor} visit an existing class. This class parses a</color>
<color=#75715e> * byte array conforming to the Java class file format and calls the appropriate visit methods of a</color>
<color=#75715e> * given class visitor for each field, method and bytecode instruction encountered.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Eric Bruneton</color>
<color=#75715e> * @author Eugene Kuleshov</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ClassReader</color> <color=#f8f8f2>{</color>

  <color=#75715e>/** True to enable signatures support. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>SIGNATURES</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

  <color=#75715e>/** True to enable annotations support. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

  <color=#75715e>/** True to enable stack map frames support. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>FRAMES</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

  <color=#75715e>/** True to enable bytecode writing support. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>WRITER</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

  <color=#75715e>/** True to enable JSR_W and GOTO_W support. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>RESIZE</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Flag to skip method code. If this class is set <code>CODE</code> attribute won't be visited.</color>
<color=#75715e>   * This can be used, for example, to retrieve annotations for methods and method parameters.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SKIP_CODE</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Flag to skip the debug information in the class. If this flag is set the debug information of</color>
<color=#75715e>   * the class is not visited, i.e. the {@link MethodVisitor#visitLocalVariable visitLocalVariable}</color>
<color=#75715e>   * and {@link MethodVisitor#visitLineNumber visitLineNumber} methods will not be called.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SKIP_DEBUG</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Flag to skip the stack map frames in the class. If this flag is set the stack map frames of the</color>
<color=#75715e>   * class is not visited, i.e. the {@link MethodVisitor#visitFrame visitFrame} method will not be</color>
<color=#75715e>   * called. This flag is useful when the {@link ClassWriter#COMPUTE_FRAMES} option is used: it</color>
<color=#75715e>   * avoids visiting frames that will be ignored and recomputed from scratch in the class writer.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SKIP_FRAMES</color> <color=#f92672>=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Flag to expand the stack map frames. By default stack map frames are visited in their original</color>
<color=#75715e>   * format (i.e. "expanded" for classes whose version is less than V1_6, and "compressed" for the</color>
<color=#75715e>   * other classes). If this flag is set, stack map frames are always visited in expanded format</color>
<color=#75715e>   * (this option adds a decompression/recompression step in ClassReader and ClassWriter which</color>
<color=#75715e>   * degrades performances quite a lot).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>EXPAND_FRAMES</color> <color=#f92672>=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The class to be parsed. <i>The content of this array must not be modified. This field is</color>
<color=#75715e>   * intended for {@link Attribute} sub classes, and is normally not needed by class generators or</color>
<color=#75715e>   * adapters.</i></color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The start index of each constant pool item in {@link #b b}, plus one. The one byte offset skips</color>
<color=#75715e>   * the constant pool item tag that indicates its type.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>items</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The String objects corresponding to the CONSTANT_Utf8 items. This cache avoids multiple parsing</color>
<color=#75715e>   * of a given CONSTANT_Utf8 constant pool item, which GREATLY improves performances (by a factor 2</color>
<color=#75715e>   * to 3). This caching strategy could be extended to all constant pool items, but its benefit</color>
<color=#75715e>   * would not be so great for these items (because they are much less expensive to parse than</color>
<color=#75715e>   * CONSTANT_Utf8 items).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>strings</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Maximum length of the strings contained in the constant pool of the class. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxStringLength</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Start index of the class header information (access, name...) in {@link #b b}. */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>header</color><color=#f8f8f2>;</color>

  <color=#75715e>// ------------------------------------------------------------------------</color>
  <color=#75715e>// Constructors</color>
  <color=#75715e>// ------------------------------------------------------------------------</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs a new {@link ClassReader} object.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param b the bytecode of the class to be read.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>ClassReader</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs a new {@link ClassReader} object.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param b the bytecode of the class to be read.</color>
<color=#75715e>   * @param off the start offset of the class data.</color>
<color=#75715e>   * @param len the length of the class data.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>ClassReader</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>b</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
    <color=#75715e>// checks the class version</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>readShort</color><color=#f8f8f2>(</color><color=#f8f8f2>off</color> <color=#f92672>+</color> <color=#ae81ff>6</color><color=#f8f8f2>)</color> <color=#f92672>></color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>V1_8</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// parses the constant pool</color>
    <color=#f8f8f2>items</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>off</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>items</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>strings</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[</color><color=#f8f8f2>n</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>max</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>off</color> <color=#f92672>+</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
      <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>FIELD</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>METH</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>IMETH</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>INT</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>FLOAT</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>NAME_TYPE</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>INDY</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LONG</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>DOUBLE</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#ae81ff>9</color><color=#f8f8f2>;</color>
          <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>UTF8</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#ae81ff>3</color> <color=#f92672>+</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>></color> <color=#f8f8f2>max</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>max</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>HANDLE</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#75715e>// case ClassWriter.CLASS:</color>
          <color=#75715e>// case ClassWriter.STR:</color>
          <color=#75715e>// case ClassWriter.MTYPE</color>
        <color=#66d9ef>default</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>index</color> <color=#f92672>+=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>maxStringLength</color> <color=#f92672>=</color> <color=#f8f8f2>max</color><color=#f8f8f2>;</color>
    <color=#75715e>// the class header information starts just after the constant pool</color>
    <color=#f8f8f2>header</color> <color=#f92672>=</color> <color=#f8f8f2>index</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the class's access flags (see {@link Opcodes}). This value may not reflect Deprecated</color>
<color=#75715e>   * and Synthetic flags when bytecode is before 1.5 and those flags are represented by attributes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the class access flags</color>
<color=#75715e>   * @see ClassVisitor#visit(int, int, String, String, String, String[])</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getAccess</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>header</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the internal name of the class (see {@link Type#getInternalName() getInternalName}).</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the internal class name</color>
<color=#75715e>   * @see ClassVisitor#visit(int, int, String, String, String, String[])</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getClassName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>readClass</color><color=#f8f8f2>(</color><color=#f8f8f2>header</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#66d9ef>char</color><color=#f92672>[</color><color=#f8f8f2>maxStringLength</color><color=#f92672>]</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the internal of name of the super class (see {@link Type#getInternalName()</color>
<color=#75715e>   * getInternalName}). For interfaces, the super class is {@link Object}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the internal name of super class, or <tt>null</tt> for {@link Object} class.</color>
<color=#75715e>   * @see ClassVisitor#visit(int, int, String, String, String, String[])</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getSuperName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>readClass</color><color=#f8f8f2>(</color><color=#f8f8f2>header</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#66d9ef>char</color><color=#f92672>[</color><color=#f8f8f2>maxStringLength</color><color=#f92672>]</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the internal names of the class's interfaces (see {@link Type#getInternalName()</color>
<color=#75715e>   * getInternalName}).</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the array of internal names for all implemented interfaces or <tt>null</tt>.</color>
<color=#75715e>   * @see ClassVisitor#visit(int, int, String, String, String, String[])</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#a6e22e>getInterfaces</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>header</color> <color=#f92672>+</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>interfaces</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[</color><color=#f8f8f2>n</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>char</color><color=#f92672>[</color><color=#f8f8f2>maxStringLength</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>index</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>interfaces</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>readClass</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>interfaces</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Copies the constant pool data into the given {@link ClassWriter}. Should be called before the</color>
<color=#75715e>   * {@link #accept(ClassVisitor,int)} method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param classWriter the {@link ClassWriter} to copy constant pool into.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>void</color> <color=#a6e22e>copyPool</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ClassWriter</color> <color=#f8f8f2>classWriter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>char</color><color=#f92672>[</color><color=#f8f8f2>maxStringLength</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>ll</color> <color=#f92672>=</color> <color=#f8f8f2>items</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Item</color><color=#f92672>[]</color> <color=#f8f8f2>items2</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f92672>[</color><color=#f8f8f2>ll</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>ll</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>tag</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>Item</color> <color=#f8f8f2>item</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>nameType</color><color=#f8f8f2>;</color>
      <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>tag</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>FIELD</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>METH</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>IMETH</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>nameType</color> <color=#f92672>=</color> <color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>item</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>tag</color><color=#f8f8f2>,</color> <color=#f8f8f2>readClass</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>),</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>nameType</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>),</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>nameType</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>));</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>INT</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>item</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>));</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>FLOAT</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>item</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>intBitsToFloat</color><color=#f8f8f2>(</color><color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>)));</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>NAME_TYPE</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>item</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>tag</color><color=#f8f8f2>,</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>),</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>),</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LONG</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>item</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>readLong</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>));</color>
          <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>DOUBLE</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>item</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>longBitsToDouble</color><color=#f8f8f2>(</color><color=#f8f8f2>readLong</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>)));</color>
          <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>UTF8</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>{</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>s</color> <color=#f92672>=</color> <color=#f8f8f2>strings</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>s</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>s</color> <color=#f92672>=</color> <color=#f8f8f2>strings</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>),</color> <color=#f8f8f2>buf</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>item</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>tag</color><color=#f8f8f2>,</color> <color=#f8f8f2>s</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>HANDLE</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>fieldOrMethodRef</color> <color=#f92672>=</color> <color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>nameType</color> <color=#f92672>=</color> <color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>fieldOrMethodRef</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>item</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>HANDLE_BASE</color> <color=#f92672>+</color> <color=#f8f8f2>readByte</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>),</color>
                <color=#f8f8f2>readClass</color><color=#f8f8f2>(</color><color=#f8f8f2>fieldOrMethodRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>),</color>
                <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>nameType</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>),</color>
                <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>nameType</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>));</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>INDY</color><color=#f8f8f2>:</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>classWriter</color><color=#f8f8f2>.</color><color=#a6e22e>bootstrapMethods</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>copyBootstrapMethods</color><color=#f8f8f2>(</color><color=#f8f8f2>classWriter</color><color=#f8f8f2>,</color> <color=#f8f8f2>items2</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>nameType</color> <color=#f92672>=</color> <color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>item</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>nameType</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>),</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>nameType</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>),</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>));</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#75715e>// case ClassWriter.STR:</color>
          <color=#75715e>// case ClassWriter.CLASS:</color>
          <color=#75715e>// case ClassWriter.MTYPE</color>
        <color=#66d9ef>default</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>item</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>tag</color><color=#f8f8f2>,</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>),</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>int</color> <color=#f8f8f2>index2</color> <color=#f92672>=</color> <color=#f8f8f2>item</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color> <color=#f92672>%</color> <color=#f8f8f2>items2</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>item</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>items2</color><color=#f92672>[</color><color=#f8f8f2>index2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>items2</color><color=#f92672>[</color><color=#f8f8f2>index2</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>item</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>off</color> <color=#f92672>=</color> <color=#f8f8f2>items</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>classWriter</color><color=#f8f8f2>.</color><color=#a6e22e>pool</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>header</color> <color=#f92672>-</color> <color=#f8f8f2>off</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>classWriter</color><color=#f8f8f2>.</color><color=#a6e22e>items</color> <color=#f92672>=</color> <color=#f8f8f2>items2</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>classWriter</color><color=#f8f8f2>.</color><color=#a6e22e>threshold</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>0.75d</color> <color=#f92672>*</color> <color=#f8f8f2>ll</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>classWriter</color><color=#f8f8f2>.</color><color=#a6e22e>index</color> <color=#f92672>=</color> <color=#f8f8f2>ll</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Copies the bootstrap method data into the given {@link ClassWriter}. Should be called before</color>
<color=#75715e>   * the {@link #accept(ClassVisitor,int)} method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param classWriter the {@link ClassWriter} to copy bootstrap methods into.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>copyBootstrapMethods</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ClassWriter</color> <color=#f8f8f2>classWriter</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Item</color><color=#f92672>[]</color> <color=#f8f8f2>items</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>c</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>// finds the "BootstrapMethods" attribute</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#f8f8f2>getAttributes</color><color=#f8f8f2>();</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>found</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>);</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>attrName</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"BootstrapMethods"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>found</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>6</color> <color=#f92672>+</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>found</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// copies the bootstrap methods in the class writer</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>boostrapMethodCount</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#f8f8f2>boostrapMethodCount</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>position</color> <color=#f92672>=</color> <color=#f8f8f2>v</color> <color=#f92672>-</color> <color=#f8f8f2>u</color> <color=#f92672>-</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>hashCode</color> <color=#f92672>=</color> <color=#f8f8f2>readConst</color><color=#f8f8f2>(</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>),</color> <color=#f8f8f2>c</color><color=#f8f8f2>).</color><color=#a6e22e>hashCode</color><color=#f8f8f2>();</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color> <color=#f8f8f2>k</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>k</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>hashCode</color> <color=#f92672>^=</color> <color=#f8f8f2>readConst</color><color=#f8f8f2>(</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>),</color> <color=#f8f8f2>c</color><color=#f8f8f2>).</color><color=#a6e22e>hashCode</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>Item</color> <color=#f8f8f2>item</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Item</color><color=#f8f8f2>(</color><color=#f8f8f2>j</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>item</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>position</color><color=#f8f8f2>,</color> <color=#f8f8f2>hashCode</color> <color=#f92672>&</color> <color=#ae81ff>0x7FFFFFFF</color><color=#f8f8f2>);</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>item</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color> <color=#f92672>%</color> <color=#f8f8f2>items</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>item</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>item</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>attrSize</color> <color=#f92672>=</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>bootstrapMethods</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteVector</color><color=#f8f8f2>(</color><color=#f8f8f2>attrSize</color> <color=#f92672>+</color> <color=#ae81ff>62</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>bootstrapMethods</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>10</color><color=#f8f8f2>,</color> <color=#f8f8f2>attrSize</color> <color=#f92672>-</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>classWriter</color><color=#f8f8f2>.</color><color=#a6e22e>bootstrapMethodsCount</color> <color=#f92672>=</color> <color=#f8f8f2>boostrapMethodCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>classWriter</color><color=#f8f8f2>.</color><color=#a6e22e>bootstrapMethods</color> <color=#f92672>=</color> <color=#f8f8f2>bootstrapMethods</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs a new {@link ClassReader} object.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param is an input stream from which to read the class.</color>
<color=#75715e>   * @throws IOException if a problem occurs during reading.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>ClassReader</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>InputStream</color> <color=#f8f8f2>is</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>readClass</color><color=#f8f8f2>(</color><color=#f8f8f2>is</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs a new {@link ClassReader} object.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param name the binary qualified name of the class to be read.</color>
<color=#75715e>   * @throws IOException if an exception occurs during reading.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>ClassReader</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>readClass</color><color=#f8f8f2>(</color><color=#f8f8f2>ClassLoader</color><color=#f8f8f2>.</color><color=#a6e22e>getSystemResourceAsStream</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>replace</color><color=#f8f8f2>(</color><color=#e6db74>'.'</color><color=#f8f8f2>,</color> <color=#e6db74>'/'</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#e6db74>".class"</color><color=#f8f8f2>),</color> <color=#66d9ef>true</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads the bytecode of a class.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param is an input stream from which to read the class.</color>
<color=#75715e>   * @param close true to close the input stream after reading.</color>
<color=#75715e>   * @return the bytecode read from the given input stream.</color>
<color=#75715e>   * @throws IOException if a problem occurs during reading.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>readClass</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>InputStream</color> <color=#f8f8f2>is</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>close</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>is</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"Class not found"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>is</color><color=#f8f8f2>.</color><color=#a6e22e>available</color><color=#f8f8f2>()</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>is</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>,</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672>==</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>len</color> <color=#f92672><</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>len</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>c</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>len</color> <color=#f92672>+=</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>len</color> <color=#f92672>==</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>int</color> <color=#f8f8f2>last</color> <color=#f92672>=</color> <color=#f8f8f2>is</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>last</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#ae81ff>1000</color><color=#f92672>]</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>c</color><color=#f92672>[</color><color=#f8f8f2>len</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>last</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>c</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>close</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>is</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// ------------------------------------------------------------------------</color>
  <color=#75715e>// Public methods</color>
  <color=#75715e>// ------------------------------------------------------------------------</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Makes the given visitor visit the Java class of this {@link ClassReader} . This class is the</color>
<color=#75715e>   * one specified in the constructor (see {@link #ClassReader(byte[]) ClassReader}).</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param classVisitor the visitor that must visit this class.</color>
<color=#75715e>   * @param flags option flags that can be used to modify the default behavior of this class. See</color>
<color=#75715e>   *     {@link #SKIP_DEBUG}, {@link #EXPAND_FRAMES} , {@link #SKIP_FRAMES}, {@link #SKIP_CODE}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>accept</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ClassVisitor</color> <color=#f8f8f2>classVisitor</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>flags</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>accept</color><color=#f8f8f2>(</color><color=#f8f8f2>classVisitor</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>Attribute</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>flags</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Makes the given visitor visit the Java class of this {@link ClassReader}. This class is the one</color>
<color=#75715e>   * specified in the constructor (see {@link #ClassReader(byte[]) ClassReader}).</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param classVisitor the visitor that must visit this class.</color>
<color=#75715e>   * @param attrs prototypes of the attributes that must be parsed during the visit of the class.</color>
<color=#75715e>   *     Any attribute whose type is not equal to the type of one the prototypes will not be parsed:</color>
<color=#75715e>   *     its byte array value will be passed unchanged to the ClassWriter. <i>This may corrupt it if</color>
<color=#75715e>   *     this value contains references to the constant pool, or has syntactic or semantic links</color>
<color=#75715e>   *     with a class element that has been transformed by a class adapter between the reader and</color>
<color=#75715e>   *     the writer</i>.</color>
<color=#75715e>   * @param flags option flags that can be used to modify the default behavior of this class. See</color>
<color=#75715e>   *     {@link #SKIP_DEBUG}, {@link #EXPAND_FRAMES} , {@link #SKIP_FRAMES}, {@link #SKIP_CODE}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>accept</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ClassVisitor</color> <color=#f8f8f2>classVisitor</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Attribute</color><color=#f92672>[]</color> <color=#f8f8f2>attrs</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>flags</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#f8f8f2>header</color><color=#f8f8f2>;</color> <color=#75715e>// current offset in the class file</color>
    <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>char</color><color=#f92672>[</color><color=#f8f8f2>maxStringLength</color><color=#f92672>]</color><color=#f8f8f2>;</color> <color=#75715e>// buffer used to read strings</color>

    <color=#f8f8f2>Context</color> <color=#f8f8f2>context</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Context</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>attrs</color> <color=#f92672>=</color> <color=#f8f8f2>attrs</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>flags</color> <color=#f92672>=</color> <color=#f8f8f2>flags</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>buffer</color> <color=#f92672>=</color> <color=#f8f8f2>c</color><color=#f8f8f2>;</color>

    <color=#75715e>// reads the class declaration</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>access</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>readClass</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>superClass</color> <color=#f92672>=</color> <color=#f8f8f2>readClass</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>interfaces</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>6</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>interfaces</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>interfaces</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>readClass</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// reads the class attributes</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>signature</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>sourceFile</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>sourceDebug</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>enclosingOwner</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>enclosingName</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>enclosingDesc</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>anns</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>ianns</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>tanns</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>itanns</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>innerClasses</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Attribute</color> <color=#f8f8f2>attributes</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#f8f8f2>getAttributes</color><color=#f8f8f2>();</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>);</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>attrName</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
      <color=#75715e>// tests are sorted in decreasing frequency order</color>
      <color=#75715e>// (based on frequencies observed on typical classes)</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"SourceFile"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sourceFile</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"InnerClasses"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>innerClasses</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"EnclosingMethod"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>enclosingOwner</color> <color=#f92672>=</color> <color=#f8f8f2>readClass</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>item</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>10</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>item</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>enclosingName</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>item</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>enclosingDesc</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>item</color><color=#f92672>]</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>SIGNATURES</color> <color=#f92672>&&</color> <color=#e6db74>"Signature"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>signature</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#e6db74>"RuntimeVisibleAnnotations"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>anns</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#e6db74>"RuntimeVisibleTypeAnnotations"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>tanns</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"Deprecated"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>access</color> <color=#f92672>|=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_DEPRECATED</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"Synthetic"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>access</color> <color=#f92672>|=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_SYNTHETIC</color> <color=#f92672>|</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_SYNTHETIC_ATTRIBUTE</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"SourceDebugExtension"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>sourceDebug</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#66d9ef>char</color><color=#f92672>[</color><color=#f8f8f2>len</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#e6db74>"RuntimeInvisibleAnnotations"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ianns</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#e6db74>"RuntimeInvisibleTypeAnnotations"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>itanns</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"BootstrapMethods"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>bootstrapMethods</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#f8f8f2>bootstrapMethods</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>bootstrapMethods</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>v</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>2</color> <color=#f92672>+</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>bootstrapMethods</color> <color=#f92672>=</color> <color=#f8f8f2>bootstrapMethods</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Attribute</color> <color=#f8f8f2>attr</color> <color=#f92672>=</color> <color=#f8f8f2>readAttribute</color><color=#f8f8f2>(</color><color=#f8f8f2>attrs</color><color=#f8f8f2>,</color> <color=#f8f8f2>attrName</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>,</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>),</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>attr</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>attr</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>attributes</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>attributes</color> <color=#f92672>=</color> <color=#f8f8f2>attr</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>6</color> <color=#f92672>+</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// visits the class declaration</color>
    <color=#f8f8f2>classVisitor</color><color=#f8f8f2>.</color><color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>items</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>-</color> <color=#ae81ff>7</color><color=#f8f8f2>),</color> <color=#f8f8f2>access</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>signature</color><color=#f8f8f2>,</color> <color=#f8f8f2>superClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>interfaces</color><color=#f8f8f2>);</color>

    <color=#75715e>// visits the source and debug info</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>SKIP_DEBUG</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>sourceFile</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>sourceDebug</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>classVisitor</color><color=#f8f8f2>.</color><color=#a6e22e>visitSource</color><color=#f8f8f2>(</color><color=#f8f8f2>sourceFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>sourceDebug</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// visits the outer class</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>enclosingOwner</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>classVisitor</color><color=#f8f8f2>.</color><color=#a6e22e>visitOuterClass</color><color=#f8f8f2>(</color><color=#f8f8f2>enclosingOwner</color><color=#f8f8f2>,</color> <color=#f8f8f2>enclosingName</color><color=#f8f8f2>,</color> <color=#f8f8f2>enclosingDesc</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// visits the class annotations and type annotations</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>anns</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>anns</color><color=#f8f8f2>),</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>anns</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>v</color> <color=#f92672>=</color>
            <color=#f8f8f2>readAnnotationValues</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>classVisitor</color><color=#f8f8f2>.</color><color=#a6e22e>visitAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>),</color> <color=#66d9ef>true</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>ianns</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>ianns</color><color=#f8f8f2>),</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>ianns</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>v</color> <color=#f92672>=</color>
            <color=#f8f8f2>readAnnotationValues</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>classVisitor</color><color=#f8f8f2>.</color><color=#a6e22e>visitAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>),</color> <color=#66d9ef>false</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>tanns</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>tanns</color><color=#f8f8f2>),</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>tanns</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>readAnnotationTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>v</color> <color=#f92672>=</color>
            <color=#f8f8f2>readAnnotationValues</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>c</color><color=#f8f8f2>,</color>
                <color=#66d9ef>true</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>classVisitor</color><color=#f8f8f2>.</color><color=#a6e22e>visitTypeAnnotation</color><color=#f8f8f2>(</color>
                    <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>),</color> <color=#66d9ef>true</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>itanns</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>itanns</color><color=#f8f8f2>),</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>itanns</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>readAnnotationTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>v</color> <color=#f92672>=</color>
            <color=#f8f8f2>readAnnotationValues</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>c</color><color=#f8f8f2>,</color>
                <color=#66d9ef>true</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>classVisitor</color><color=#f8f8f2>.</color><color=#a6e22e>visitTypeAnnotation</color><color=#f8f8f2>(</color>
                    <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>),</color> <color=#66d9ef>false</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// visits the attributes</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>attributes</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Attribute</color> <color=#f8f8f2>attr</color> <color=#f92672>=</color> <color=#f8f8f2>attributes</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>attributes</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>classVisitor</color><color=#f8f8f2>.</color><color=#a6e22e>visitAttribute</color><color=#f8f8f2>(</color><color=#f8f8f2>attributes</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>attributes</color> <color=#f92672>=</color> <color=#f8f8f2>attr</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// visits the inner classes</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>innerClasses</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>innerClasses</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>innerClasses</color><color=#f8f8f2>);</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>classVisitor</color><color=#f8f8f2>.</color><color=#a6e22e>visitInnerClass</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>readClass</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>),</color> <color=#f8f8f2>readClass</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>),</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>),</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>6</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// visits the fields and methods</color>
    <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#f8f8f2>header</color> <color=#f92672>+</color> <color=#ae81ff>10</color> <color=#f92672>+</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>interfaces</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>-</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#f8f8f2>readField</color><color=#f8f8f2>(</color><color=#f8f8f2>classVisitor</color><color=#f8f8f2>,</color> <color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>-</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#f8f8f2>readMethod</color><color=#f8f8f2>(</color><color=#f8f8f2>classVisitor</color><color=#f8f8f2>,</color> <color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// visits the end of the class</color>
    <color=#f8f8f2>classVisitor</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a field and makes the given visitor visit it.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param classVisitor the visitor that must visit the field.</color>
<color=#75715e>   * @param context information about the class being parsed.</color>
<color=#75715e>   * @param u the start offset of the field in the class file.</color>
<color=#75715e>   * @return the offset of the first byte following the field in the class.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>readField</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ClassVisitor</color> <color=#f8f8f2>classVisitor</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Context</color> <color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>u</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>// reads the field declaration</color>
    <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>buffer</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>access</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color>

    <color=#75715e>// reads the field attributes</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>signature</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>anns</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>ianns</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>tanns</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>itanns</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Object</color> <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Attribute</color> <color=#f8f8f2>attributes</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>);</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>attrName</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
      <color=#75715e>// tests are sorted in decreasing frequency order</color>
      <color=#75715e>// (based on frequencies observed on typical classes)</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"ConstantValue"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>item</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>item</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#66d9ef>null</color> <color=#f8f8f2>:</color> <color=#f8f8f2>readConst</color><color=#f8f8f2>(</color><color=#f8f8f2>item</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>SIGNATURES</color> <color=#f92672>&&</color> <color=#e6db74>"Signature"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>signature</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"Deprecated"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>access</color> <color=#f92672>|=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_DEPRECATED</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"Synthetic"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>access</color> <color=#f92672>|=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_SYNTHETIC</color> <color=#f92672>|</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_SYNTHETIC_ATTRIBUTE</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#e6db74>"RuntimeVisibleAnnotations"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>anns</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#e6db74>"RuntimeVisibleTypeAnnotations"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>tanns</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#e6db74>"RuntimeInvisibleAnnotations"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ianns</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#e6db74>"RuntimeInvisibleTypeAnnotations"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>itanns</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Attribute</color> <color=#f8f8f2>attr</color> <color=#f92672>=</color> <color=#f8f8f2>readAttribute</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>attrs</color><color=#f8f8f2>,</color> <color=#f8f8f2>attrName</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>,</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>),</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>attr</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>attr</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>attributes</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>attributes</color> <color=#f92672>=</color> <color=#f8f8f2>attr</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>6</color> <color=#f92672>+</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

    <color=#75715e>// visits the field declaration</color>
    <color=#f8f8f2>FieldVisitor</color> <color=#f8f8f2>fv</color> <color=#f92672>=</color> <color=#f8f8f2>classVisitor</color><color=#f8f8f2>.</color><color=#a6e22e>visitField</color><color=#f8f8f2>(</color><color=#f8f8f2>access</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>signature</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fv</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>u</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// visits the field annotations and type annotations</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>anns</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>anns</color><color=#f8f8f2>),</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>anns</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>readAnnotationValues</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>fv</color><color=#f8f8f2>.</color><color=#a6e22e>visitAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>),</color> <color=#66d9ef>true</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>ianns</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>ianns</color><color=#f8f8f2>),</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>ianns</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>readAnnotationValues</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>fv</color><color=#f8f8f2>.</color><color=#a6e22e>visitAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>),</color> <color=#66d9ef>false</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>tanns</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>tanns</color><color=#f8f8f2>),</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>tanns</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>readAnnotationTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>v</color> <color=#f92672>=</color>
            <color=#f8f8f2>readAnnotationValues</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>c</color><color=#f8f8f2>,</color>
                <color=#66d9ef>true</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>fv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTypeAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>),</color> <color=#66d9ef>true</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>itanns</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>itanns</color><color=#f8f8f2>),</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>itanns</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>readAnnotationTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>v</color> <color=#f92672>=</color>
            <color=#f8f8f2>readAnnotationValues</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>c</color><color=#f8f8f2>,</color>
                <color=#66d9ef>true</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>fv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTypeAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>),</color> <color=#66d9ef>false</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// visits the field attributes</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>attributes</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Attribute</color> <color=#f8f8f2>attr</color> <color=#f92672>=</color> <color=#f8f8f2>attributes</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>attributes</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>fv</color><color=#f8f8f2>.</color><color=#a6e22e>visitAttribute</color><color=#f8f8f2>(</color><color=#f8f8f2>attributes</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>attributes</color> <color=#f92672>=</color> <color=#f8f8f2>attr</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// visits the end of the field</color>
    <color=#f8f8f2>fv</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>u</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a method and makes the given visitor visit it.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param classVisitor the visitor that must visit the method.</color>
<color=#75715e>   * @param context information about the class being parsed.</color>
<color=#75715e>   * @param u the start offset of the method in the class file.</color>
<color=#75715e>   * @return the offset of the first byte following the method in the class.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>readMethod</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ClassVisitor</color> <color=#f8f8f2>classVisitor</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Context</color> <color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>u</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>// reads the method declaration</color>
    <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>buffer</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>access</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>name</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>desc</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color>

    <color=#75715e>// reads the method attributes</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>code</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>exception</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>exceptions</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>signature</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>methodParameters</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>anns</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>ianns</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>tanns</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>itanns</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>dann</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>mpanns</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>impanns</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>firstAttribute</color> <color=#f92672>=</color> <color=#f8f8f2>u</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Attribute</color> <color=#f8f8f2>attributes</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>);</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>attrName</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
      <color=#75715e>// tests are sorted in decreasing frequency order</color>
      <color=#75715e>// (based on frequencies observed on typical classes)</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"Code"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>flags</color> <color=#f92672>&</color> <color=#f8f8f2>SKIP_CODE</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>code</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"Exceptions"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>exceptions</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>exception</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#f8f8f2>exceptions</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>exceptions</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>readClass</color><color=#f8f8f2>(</color><color=#f8f8f2>exception</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>exception</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>SIGNATURES</color> <color=#f92672>&&</color> <color=#e6db74>"Signature"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>signature</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"Deprecated"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>access</color> <color=#f92672>|=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_DEPRECATED</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#e6db74>"RuntimeVisibleAnnotations"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>anns</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#e6db74>"RuntimeVisibleTypeAnnotations"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>tanns</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#e6db74>"AnnotationDefault"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dann</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"Synthetic"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>access</color> <color=#f92672>|=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_SYNTHETIC</color> <color=#f92672>|</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_SYNTHETIC_ATTRIBUTE</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#e6db74>"RuntimeInvisibleAnnotations"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ianns</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#e6db74>"RuntimeInvisibleTypeAnnotations"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>itanns</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#e6db74>"RuntimeVisibleParameterAnnotations"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>mpanns</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#e6db74>"RuntimeInvisibleParameterAnnotations"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>impanns</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"MethodParameters"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>methodParameters</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Attribute</color> <color=#f8f8f2>attr</color> <color=#f92672>=</color> <color=#f8f8f2>readAttribute</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>attrs</color><color=#f8f8f2>,</color> <color=#f8f8f2>attrName</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>,</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>),</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>attr</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>attr</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>attributes</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>attributes</color> <color=#f92672>=</color> <color=#f8f8f2>attr</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>6</color> <color=#f92672>+</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

    <color=#75715e>// visits the method declaration</color>
    <color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color> <color=#f92672>=</color>
        <color=#f8f8f2>classVisitor</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethod</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>access</color><color=#f8f8f2>,</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>signature</color><color=#f8f8f2>,</color> <color=#f8f8f2>exceptions</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mv</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>u</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * if the returned MethodVisitor is in fact a MethodWriter, it means</color>
<color=#75715e>     * there is no method adapter between the reader and the writer. If, in</color>
<color=#75715e>     * addition, the writer's constant pool was copied from this reader</color>
<color=#75715e>     * (mw.cw.cr == this), and the signature and exceptions of the method</color>
<color=#75715e>     * have not been changed, then it is possible to skip all visit events</color>
<color=#75715e>     * and just copy the original code of the method to the writer (the</color>
<color=#75715e>     * access, name and descriptor can have been changed, this is not</color>
<color=#75715e>     * important since they are not copied as is from the reader).</color>
<color=#75715e>     */</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>WRITER</color> <color=#f92672>&&</color> <color=#f8f8f2>mv</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>MethodWriter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>MethodWriter</color> <color=#f8f8f2>mw</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>MethodWriter</color><color=#f8f8f2>)</color> <color=#f8f8f2>mv</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mw</color><color=#f8f8f2>.</color><color=#a6e22e>cw</color><color=#f8f8f2>.</color><color=#a6e22e>cr</color> <color=#f92672>==</color> <color=#66d9ef>this</color> <color=#f92672>&&</color> <color=#f8f8f2>signature</color> <color=#f92672>==</color> <color=#f8f8f2>mw</color><color=#f8f8f2>.</color><color=#a6e22e>signature</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>sameExceptions</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exceptions</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>sameExceptions</color> <color=#f92672>=</color> <color=#f8f8f2>mw</color><color=#f8f8f2>.</color><color=#a6e22e>exceptionCount</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exceptions</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#f8f8f2>mw</color><color=#f8f8f2>.</color><color=#a6e22e>exceptionCount</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>sameExceptions</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
          <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>exceptions</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>exception</color> <color=#f92672>-=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mw</color><color=#f8f8f2>.</color><color=#a6e22e>exceptions</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color> <color=#f92672>!=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>exception</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>sameExceptions</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
              <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sameExceptions</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>/*</color>
<color=#75715e>           * we do not copy directly the code into MethodWriter to</color>
<color=#75715e>           * save a byte array copy operation. The real copy will be</color>
<color=#75715e>           * done in ClassWriter.toByteArray().</color>
<color=#75715e>           */</color>
          <color=#f8f8f2>mw</color><color=#f8f8f2>.</color><color=#a6e22e>classReaderOffset</color> <color=#f92672>=</color> <color=#f8f8f2>firstAttribute</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>mw</color><color=#f8f8f2>.</color><color=#a6e22e>classReaderLength</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>-</color> <color=#f8f8f2>firstAttribute</color><color=#f8f8f2>;</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>u</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// visit the method parameters</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>methodParameters</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>methodParameters</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>methodParameters</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitParameter</color><color=#f8f8f2>(</color><color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>),</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// visits the method annotations</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>dann</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>AnnotationVisitor</color> <color=#f8f8f2>dv</color> <color=#f92672>=</color> <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitAnnotationDefault</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>readAnnotationValue</color><color=#f8f8f2>(</color><color=#f8f8f2>dann</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>dv</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>dv</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>anns</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>anns</color><color=#f8f8f2>),</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>anns</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>readAnnotationValues</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>),</color> <color=#66d9ef>true</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>ianns</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>ianns</color><color=#f8f8f2>),</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>ianns</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>readAnnotationValues</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>),</color> <color=#66d9ef>false</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>tanns</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>tanns</color><color=#f8f8f2>),</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>tanns</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>readAnnotationTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>v</color> <color=#f92672>=</color>
            <color=#f8f8f2>readAnnotationValues</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>c</color><color=#f8f8f2>,</color>
                <color=#66d9ef>true</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTypeAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>),</color> <color=#66d9ef>true</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>itanns</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>itanns</color><color=#f8f8f2>),</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>itanns</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>readAnnotationTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>v</color> <color=#f92672>=</color>
            <color=#f8f8f2>readAnnotationValues</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>c</color><color=#f8f8f2>,</color>
                <color=#66d9ef>true</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTypeAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>),</color> <color=#66d9ef>false</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>mpanns</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>readParameterAnnotations</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#f8f8f2>mpanns</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>impanns</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>readParameterAnnotations</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#f8f8f2>impanns</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// visits the method attributes</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>attributes</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Attribute</color> <color=#f8f8f2>attr</color> <color=#f92672>=</color> <color=#f8f8f2>attributes</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>attributes</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitAttribute</color><color=#f8f8f2>(</color><color=#f8f8f2>attributes</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>attributes</color> <color=#f92672>=</color> <color=#f8f8f2>attr</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// visits the method code</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>code</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitCode</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>readCode</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#f8f8f2>code</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// visits the end of the method</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>

    <color=#66d9ef>return</color> <color=#f8f8f2>u</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads the bytecode of a method and makes the given visitor visit it.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param mv the visitor that must visit the method's code.</color>
<color=#75715e>   * @param context information about the class being parsed.</color>
<color=#75715e>   * @param u the start offset of the code attribute in the class file.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>readCode</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Context</color> <color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>u</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>// reads the header</color>
    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>b</color><color=#f8f8f2>;</color>
    <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>buffer</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>maxStack</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>maxLocals</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>codeLength</color> <color=#f92672>=</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>

    <color=#75715e>// reads the bytecode to find the labels</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>codeStart</color> <color=#f92672>=</color> <color=#f8f8f2>u</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>codeEnd</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#f8f8f2>codeLength</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Label</color><color=#f92672>[]</color> <color=#f8f8f2>labels</color> <color=#f92672>=</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>labels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f92672>[</color><color=#f8f8f2>codeLength</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>readLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>codeLength</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672><</color> <color=#f8f8f2>codeEnd</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>offset</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>-</color> <color=#f8f8f2>codeStart</color><color=#f8f8f2>;</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>opcode</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>u</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
      <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f92672>[</color><color=#f8f8f2>opcode</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>NOARG_INSN</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>IMPLVAR_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LABEL_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>readLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#f8f8f2>readShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>),</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LABELW_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>readLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>),</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>WIDE_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>opcode</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>IINC</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>TABL_INSN</color><color=#f8f8f2>:</color>
          <color=#75715e>// skips 0 to 3 padding bytes</color>
          <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>offset</color> <color=#f92672>&</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color>
          <color=#75715e>// reads instruction</color>
          <color=#f8f8f2>readLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>),</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
          <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>readLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>12</color><color=#f8f8f2>),</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>12</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LOOK_INSN</color><color=#f8f8f2>:</color>
          <color=#75715e>// skips 0 to 3 padding bytes</color>
          <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>offset</color> <color=#f92672>&</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color>
          <color=#75715e>// reads instruction</color>
          <color=#f8f8f2>readLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>),</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
          <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>readLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>12</color><color=#f8f8f2>),</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>VAR_INSN</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>SBYTE_INSN</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LDC_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>SHORT_INSN</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LDCW_INSN</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>FIELDORMETH_INSN</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INSN</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>IINC_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>ITFMETH_INSN</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>INDYMETH_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#75715e>// case MANA_INSN:</color>
        <color=#66d9ef>default</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// reads the try catch entries to find the labels, and also visits them</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>);</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Label</color> <color=#f8f8f2>start</color> <color=#f92672>=</color> <color=#f8f8f2>readLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>),</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>Label</color> <color=#f8f8f2>end</color> <color=#f92672>=</color> <color=#f8f8f2>readLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>),</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>Label</color> <color=#f8f8f2>handler</color> <color=#f92672>=</color> <color=#f8f8f2>readLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>6</color><color=#f8f8f2>),</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTryCatchBlock</color><color=#f8f8f2>(</color><color=#f8f8f2>start</color><color=#f8f8f2>,</color> <color=#f8f8f2>end</color><color=#f8f8f2>,</color> <color=#f8f8f2>handler</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

    <color=#75715e>// reads the code attributes</color>
    <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>tanns</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color> <color=#75715e>// start index of each visible type annotation</color>
    <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>itanns</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color> <color=#75715e>// start index of each invisible type annotation</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>tann</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#75715e>// current index in tanns array</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>itann</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#75715e>// current index in itanns array</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>ntoff</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#75715e>// next visible type annotation code offset</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>nitoff</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#75715e>// next invisible type annotation code offset</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>varTable</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>varTypeTable</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>zip</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>unzip</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>flags</color> <color=#f92672>&</color> <color=#f8f8f2>EXPAND_FRAMES</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>stackMap</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>stackMapSize</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>frameCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Context</color> <color=#f8f8f2>frame</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Attribute</color> <color=#f8f8f2>attributes</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>);</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>attrName</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"LocalVariableTable"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>flags</color> <color=#f92672>&</color> <color=#f8f8f2>SKIP_DEBUG</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>varTable</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
          <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>),</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>u</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>label</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>10</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>label</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>readLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>label</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f8f8f2>).</color><color=#a6e22e>status</color> <color=#f92672>|=</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>DEBUG</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>label</color> <color=#f92672>+=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>12</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>label</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>readLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>label</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f8f8f2>).</color><color=#a6e22e>status</color> <color=#f92672>|=</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>DEBUG</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"LocalVariableTypeTable"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>varTypeTable</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"LineNumberTable"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>flags</color> <color=#f92672>&</color> <color=#f8f8f2>SKIP_DEBUG</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>),</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>u</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>label</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>10</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>label</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>readLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>label</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f8f8f2>).</color><color=#a6e22e>status</color> <color=#f92672>|=</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>DEBUG</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>label</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>line</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>12</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#e6db74>"RuntimeVisibleTypeAnnotations"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>tanns</color> <color=#f92672>=</color> <color=#f8f8f2>readTypeAnnotations</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>ntoff</color> <color=#f92672>=</color>
            <color=#f8f8f2>tanns</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>readByte</color><color=#f8f8f2>(</color><color=#f8f8f2>tanns</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#ae81ff>0x43</color> <color=#f92672>?</color> <color=#f92672>-</color><color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>tanns</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#e6db74>"RuntimeInvisibleTypeAnnotations"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>itanns</color> <color=#f92672>=</color> <color=#f8f8f2>readTypeAnnotations</color><color=#f8f8f2>(</color><color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>nitoff</color> <color=#f92672>=</color>
            <color=#f8f8f2>itanns</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>readByte</color><color=#f8f8f2>(</color><color=#f8f8f2>itanns</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#ae81ff>0x43</color>
                <color=#f92672>?</color> <color=#f92672>-</color><color=#ae81ff>1</color>
                <color=#f8f8f2>:</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>itanns</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>FRAMES</color> <color=#f92672>&&</color> <color=#e6db74>"StackMapTable"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>flags</color> <color=#f92672>&</color> <color=#f8f8f2>SKIP_FRAMES</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>stackMap</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>stackMapSize</color> <color=#f92672>=</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>frameCount</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>/*</color>
<color=#75715e>         * here we do not extract the labels corresponding to the</color>
<color=#75715e>         * attribute content. This would require a full parsing of the</color>
<color=#75715e>         * attribute, which would need to be repeated in the second</color>
<color=#75715e>         * phase (see below). Instead the content of the attribute is</color>
<color=#75715e>         * read one frame at a time (i.e. after a frame has been</color>
<color=#75715e>         * visited, the next frame is read), and the labels it contains</color>
<color=#75715e>         * are also extracted one frame at a time. Thanks to the</color>
<color=#75715e>         * ordering of frames, having only a "one frame lookahead" is</color>
<color=#75715e>         * not a problem, i.e. it is not possible to see an offset</color>
<color=#75715e>         * smaller than the offset of the current insn and for which no</color>
<color=#75715e>         * Label exist.</color>
<color=#75715e>         */</color>
        <color=#75715e>/*</color>
<color=#75715e>         * This is not true for UNINITIALIZED type offsets. We solve</color>
<color=#75715e>         * this by parsing the stack map table without a full decoding</color>
<color=#75715e>         * (see below).</color>
<color=#75715e>         */</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>FRAMES</color> <color=#f92672>&&</color> <color=#e6db74>"StackMap"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>flags</color> <color=#f92672>&</color> <color=#f8f8f2>SKIP_FRAMES</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>zip</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>stackMap</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>stackMapSize</color> <color=#f92672>=</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>frameCount</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>/*</color>
<color=#75715e>         * IMPORTANT! here we assume that the frames are ordered, as in</color>
<color=#75715e>         * the StackMapTable attribute, although this is not guaranteed</color>
<color=#75715e>         * by the attribute format.</color>
<color=#75715e>         */</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>attrs</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>attrs</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>attrName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Attribute</color> <color=#f8f8f2>attr</color> <color=#f92672>=</color>
                <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>attrs</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>,</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>),</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#f8f8f2>codeStart</color> <color=#f92672>-</color> <color=#ae81ff>8</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>attr</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>attr</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>attributes</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>attributes</color> <color=#f92672>=</color> <color=#f8f8f2>attr</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>6</color> <color=#f92672>+</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

    <color=#75715e>// generates the first (implicit) stack map frame</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>FRAMES</color> <color=#f92672>&&</color> <color=#f8f8f2>stackMap</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * for the first explicit frame the offset is not offset_delta + 1</color>
<color=#75715e>       * but only offset_delta; setting the implicit frame offset to -1</color>
<color=#75715e>       * allow the use of the "offset_delta + 1" rule in all cases</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>frame</color> <color=#f92672>=</color> <color=#f8f8f2>context</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>offset</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>mode</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>localCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>localDiff</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>stackCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>local</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Object</color><color=#f92672>[</color><color=#f8f8f2>maxLocals</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>stack</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Object</color><color=#f92672>[</color><color=#f8f8f2>maxStack</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>unzip</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>getImplicitFrame</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Finds labels for UNINITIALIZED frame types. Instead of decoding</color>
<color=#75715e>       * each element of the stack map table, we look for 3 consecutive</color>
<color=#75715e>       * bytes that "look like" an UNINITIALIZED type (tag 8, offset</color>
<color=#75715e>       * within code bounds, NEW instruction at this offset). We may find</color>
<color=#75715e>       * false positives (i.e. not real UNINITIALIZED types), but this</color>
<color=#75715e>       * should be rare, and the only consequence will be the creation of</color>
<color=#75715e>       * an unneeded label. This is better than creating a label for each</color>
<color=#75715e>       * NEW instruction, and faster than fully decoding the whole stack</color>
<color=#75715e>       * map table.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>stackMap</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>stackMap</color> <color=#f92672>+</color> <color=#f8f8f2>stackMapSize</color> <color=#f92672>-</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color> <color=#75715e>// UNINITIALIZED FRAME TYPE</color>
          <color=#66d9ef>int</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>>=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>v</color> <color=#f92672><</color> <color=#f8f8f2>codeLength</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>codeStart</color> <color=#f92672>+</color> <color=#f8f8f2>v</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>NEW</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>readLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// visits the instructions</color>
    <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#f8f8f2>codeStart</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672><</color> <color=#f8f8f2>codeEnd</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>offset</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>-</color> <color=#f8f8f2>codeStart</color><color=#f8f8f2>;</color>

      <color=#75715e>// visits the label and line number for this offset, if any</color>
      <color=#f8f8f2>Label</color> <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>l</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>l</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>flags</color> <color=#f92672>&</color> <color=#f8f8f2>SKIP_DEBUG</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>line</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLineNumber</color><color=#f8f8f2>(</color><color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>line</color><color=#f8f8f2>,</color> <color=#f8f8f2>l</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>// visits the frame for this offset, if any</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>FRAMES</color> <color=#f92672>&&</color> <color=#f8f8f2>frame</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>offset</color> <color=#f92672>==</color> <color=#f8f8f2>offset</color> <color=#f92672>||</color> <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>offset</color> <color=#f92672>==</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#75715e>// if there is a frame for this offset, makes the visitor visit</color>
        <color=#75715e>// it, and reads the next frame if there is one.</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>offset</color> <color=#f92672>!=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>zip</color> <color=#f92672>||</color> <color=#f8f8f2>unzip</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitFrame</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>F_NEW</color><color=#f8f8f2>,</color> <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>localCount</color><color=#f8f8f2>,</color> <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>local</color><color=#f8f8f2>,</color> <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>stackCount</color><color=#f8f8f2>,</color> <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>stack</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitFrame</color><color=#f8f8f2>(</color><color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>mode</color><color=#f8f8f2>,</color> <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>localDiff</color><color=#f8f8f2>,</color> <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>local</color><color=#f8f8f2>,</color> <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>stackCount</color><color=#f8f8f2>,</color> <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>stack</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>frameCount</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>stackMap</color> <color=#f92672>=</color> <color=#f8f8f2>readFrame</color><color=#f8f8f2>(</color><color=#f8f8f2>stackMap</color><color=#f8f8f2>,</color> <color=#f8f8f2>zip</color><color=#f8f8f2>,</color> <color=#f8f8f2>unzip</color><color=#f8f8f2>,</color> <color=#f8f8f2>frame</color><color=#f8f8f2>);</color>
          <color=#f92672>--</color><color=#f8f8f2>frameCount</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>frame</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>// visits the instruction at this offset</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>opcode</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>u</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
      <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f92672>[</color><color=#f8f8f2>opcode</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>NOARG_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>IMPLVAR_INSN</color><color=#f8f8f2>:</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>></color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ISTORE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>opcode</color> <color=#f92672>-=</color> <color=#ae81ff>59</color><color=#f8f8f2>;</color> <color=#75715e>// ISTORE_0</color>
            <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ISTORE</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>>></color> <color=#ae81ff>2</color><color=#f8f8f2>),</color> <color=#f8f8f2>opcode</color> <color=#f92672>&</color> <color=#ae81ff>0x3</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>opcode</color> <color=#f92672>-=</color> <color=#ae81ff>26</color><color=#f8f8f2>;</color> <color=#75715e>// ILOAD_0</color>
            <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ILOAD</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>>></color> <color=#ae81ff>2</color><color=#f8f8f2>),</color> <color=#f8f8f2>opcode</color> <color=#f92672>&</color> <color=#ae81ff>0x3</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LABEL_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitJumpInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#f8f8f2>readShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LABELW_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitJumpInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>-</color> <color=#ae81ff>33</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>WIDE_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>opcode</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>IINC</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitIincInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>),</color> <color=#f8f8f2>readShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>TABL_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>{</color>
            <color=#75715e>// skips 0 to 3 padding bytes</color>
            <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>offset</color> <color=#f92672>&</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color>
            <color=#75715e>// reads instruction</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>label</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>);</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>min</color> <color=#f92672>=</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>max</color> <color=#f92672>=</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>Label</color><color=#f92672>[]</color> <color=#f8f8f2>table</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f92672>[</color><color=#f8f8f2>max</color> <color=#f92672>-</color> <color=#f8f8f2>min</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>12</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>table</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>table</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTableSwitchInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>min</color><color=#f8f8f2>,</color> <color=#f8f8f2>max</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>label</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>table</color><color=#f8f8f2>);</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LOOK_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>{</color>
            <color=#75715e>// skips 0 to 3 padding bytes</color>
            <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>offset</color> <color=#f92672>&</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color>
            <color=#75715e>// reads instruction</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>label</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>);</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>keys</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>len</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>Label</color><color=#f92672>[]</color> <color=#f8f8f2>values</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f92672>[</color><color=#f8f8f2>len</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>keys</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>values</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLookupSwitchInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>label</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>keys</color><color=#f8f8f2>,</color> <color=#f8f8f2>values</color><color=#f8f8f2>);</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>VAR_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>SBYTE_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitIntInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>SHORT_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitIntInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>readShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>));</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LDC_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLdcInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>readConst</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>));</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LDCW_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLdcInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>readConst</color><color=#f8f8f2>(</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>),</color> <color=#f8f8f2>c</color><color=#f8f8f2>));</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>FIELDORMETH_INSN</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>ITFMETH_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>cpIndex</color> <color=#f92672>=</color> <color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>boolean</color> <color=#f8f8f2>itf</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>cpIndex</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>IMETH</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>iowner</color> <color=#f92672>=</color> <color=#f8f8f2>readClass</color><color=#f8f8f2>(</color><color=#f8f8f2>cpIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>cpIndex</color> <color=#f92672>=</color> <color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cpIndex</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>iname</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>cpIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>idesc</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>cpIndex</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672><</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>INVOKEVIRTUAL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitFieldInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>iowner</color><color=#f8f8f2>,</color> <color=#f8f8f2>iname</color><color=#f8f8f2>,</color> <color=#f8f8f2>idesc</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>iowner</color><color=#f8f8f2>,</color> <color=#f8f8f2>iname</color><color=#f8f8f2>,</color> <color=#f8f8f2>idesc</color><color=#f8f8f2>,</color> <color=#f8f8f2>itf</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>INVOKEINTERFACE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>INDYMETH_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>cpIndex</color> <color=#f92672>=</color> <color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>bsmIndex</color> <color=#f92672>=</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>bootstrapMethods</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cpIndex</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>Handle</color> <color=#f8f8f2>bsm</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Handle</color><color=#f8f8f2>)</color> <color=#f8f8f2>readConst</color><color=#f8f8f2>(</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>bsmIndex</color><color=#f8f8f2>),</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>bsmArgCount</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>bsmIndex</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>Object</color><color=#f92672>[]</color> <color=#f8f8f2>bsmArgs</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Object</color><color=#f92672>[</color><color=#f8f8f2>bsmArgCount</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>bsmIndex</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>bsmArgCount</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>bsmArgs</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>readConst</color><color=#f8f8f2>(</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>bsmIndex</color><color=#f8f8f2>),</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>bsmIndex</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>cpIndex</color> <color=#f92672>=</color> <color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cpIndex</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>iname</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>cpIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>idesc</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>cpIndex</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInvokeDynamicInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>iname</color><color=#f8f8f2>,</color> <color=#f8f8f2>idesc</color><color=#f8f8f2>,</color> <color=#f8f8f2>bsm</color><color=#f8f8f2>,</color> <color=#f8f8f2>bsmArgs</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTypeInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>readClass</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>));</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>IINC_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitIincInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>,</color> <color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#75715e>// case MANA_INSN:</color>
        <color=#66d9ef>default</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMultiANewArrayInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>readClass</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>),</color> <color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>// visit the instruction annotations, if any</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>tanns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>tann</color> <color=#f92672><</color> <color=#f8f8f2>tanns</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>&&</color> <color=#f8f8f2>ntoff</color> <color=#f92672><=</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ntoff</color> <color=#f92672>==</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>int</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>readAnnotationTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#f8f8f2>tanns</color><color=#f92672>[</color><color=#f8f8f2>tann</color><color=#f92672>]</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>readAnnotationValues</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>c</color><color=#f8f8f2>,</color>
              <color=#66d9ef>true</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsnAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>),</color> <color=#66d9ef>true</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>ntoff</color> <color=#f92672>=</color>
            <color=#f92672>++</color><color=#f8f8f2>tann</color> <color=#f92672>>=</color> <color=#f8f8f2>tanns</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>||</color> <color=#f8f8f2>readByte</color><color=#f8f8f2>(</color><color=#f8f8f2>tanns</color><color=#f92672>[</color><color=#f8f8f2>tann</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#ae81ff>0x43</color>
                <color=#f92672>?</color> <color=#f92672>-</color><color=#ae81ff>1</color>
                <color=#f8f8f2>:</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>tanns</color><color=#f92672>[</color><color=#f8f8f2>tann</color><color=#f92672>]</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>itanns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>itann</color> <color=#f92672><</color> <color=#f8f8f2>itanns</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>&&</color> <color=#f8f8f2>nitoff</color> <color=#f92672><=</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nitoff</color> <color=#f92672>==</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>int</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>readAnnotationTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#f8f8f2>itanns</color><color=#f92672>[</color><color=#f8f8f2>itann</color><color=#f92672>]</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>readAnnotationValues</color><color=#f8f8f2>(</color>
              <color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>c</color><color=#f8f8f2>,</color>
              <color=#66d9ef>true</color><color=#f8f8f2>,</color>
              <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitInsnAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>),</color> <color=#66d9ef>false</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>nitoff</color> <color=#f92672>=</color>
            <color=#f92672>++</color><color=#f8f8f2>itann</color> <color=#f92672>>=</color> <color=#f8f8f2>itanns</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>||</color> <color=#f8f8f2>readByte</color><color=#f8f8f2>(</color><color=#f8f8f2>itanns</color><color=#f92672>[</color><color=#f8f8f2>itann</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#ae81ff>0x43</color>
                <color=#f92672>?</color> <color=#f92672>-</color><color=#ae81ff>1</color>
                <color=#f8f8f2>:</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>itanns</color><color=#f92672>[</color><color=#f8f8f2>itann</color><color=#f92672>]</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>codeLength</color><color=#f92672>]</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>codeLength</color><color=#f92672>]</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// visits the local variable tables</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>flags</color> <color=#f92672>&</color> <color=#f8f8f2>SKIP_DEBUG</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>varTable</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>typeTable</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>varTypeTable</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#f8f8f2>varTypeTable</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>typeTable</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>varTypeTable</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#ae81ff>3</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>typeTable</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>typeTable</color><color=#f92672>[--</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color> <color=#75715e>// signature</color>
          <color=#f8f8f2>typeTable</color><color=#f92672>[--</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>);</color> <color=#75715e>// index</color>
          <color=#f8f8f2>typeTable</color><color=#f92672>[--</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>);</color> <color=#75715e>// start</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#f8f8f2>varTable</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>varTable</color><color=#f8f8f2>);</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>start</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>vsignature</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>typeTable</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#f8f8f2>typeTable</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>typeTable</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>start</color> <color=#f92672>&&</color> <color=#f8f8f2>typeTable</color><color=#f92672>[</color><color=#f8f8f2>j</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>vsignature</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>typeTable</color><color=#f92672>[</color><color=#f8f8f2>j</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
              <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLocalVariable</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>6</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>vsignature</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>start</color><color=#f92672>]</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>start</color> <color=#f92672>+</color> <color=#f8f8f2>length</color><color=#f92672>]</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>index</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// visits the local variables type annotations</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tanns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>tanns</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>readByte</color><color=#f8f8f2>(</color><color=#f8f8f2>tanns</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f8f8f2>(</color><color=#ae81ff>0x40</color> <color=#f92672>>></color> <color=#ae81ff>1</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>int</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>readAnnotationTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#f8f8f2>tanns</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>v</color> <color=#f92672>=</color>
              <color=#f8f8f2>readAnnotationValues</color><color=#f8f8f2>(</color>
                  <color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>c</color><color=#f8f8f2>,</color>
                  <color=#66d9ef>true</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLocalVariableAnnotation</color><color=#f8f8f2>(</color>
                      <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>typeRef</color><color=#f8f8f2>,</color>
                      <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>typePath</color><color=#f8f8f2>,</color>
                      <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>start</color><color=#f8f8f2>,</color>
                      <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>end</color><color=#f8f8f2>,</color>
                      <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f8f8f2>,</color>
                      <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>),</color>
                      <color=#66d9ef>true</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>itanns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>itanns</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>readByte</color><color=#f8f8f2>(</color><color=#f8f8f2>itanns</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f8f8f2>(</color><color=#ae81ff>0x40</color> <color=#f92672>>></color> <color=#ae81ff>1</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>int</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>readAnnotationTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#f8f8f2>itanns</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>v</color> <color=#f92672>=</color>
              <color=#f8f8f2>readAnnotationValues</color><color=#f8f8f2>(</color>
                  <color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>c</color><color=#f8f8f2>,</color>
                  <color=#66d9ef>true</color><color=#f8f8f2>,</color>
                  <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitLocalVariableAnnotation</color><color=#f8f8f2>(</color>
                      <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>typeRef</color><color=#f8f8f2>,</color>
                      <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>typePath</color><color=#f8f8f2>,</color>
                      <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>start</color><color=#f8f8f2>,</color>
                      <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>end</color><color=#f8f8f2>,</color>
                      <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f8f8f2>,</color>
                      <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>),</color>
                      <color=#66d9ef>false</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// visits the code attributes</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>attributes</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Attribute</color> <color=#f8f8f2>attr</color> <color=#f92672>=</color> <color=#f8f8f2>attributes</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>attributes</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitAttribute</color><color=#f8f8f2>(</color><color=#f8f8f2>attributes</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>attributes</color> <color=#f92672>=</color> <color=#f8f8f2>attr</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// visits the max stack and max locals values</color>
    <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitMaxs</color><color=#f8f8f2>(</color><color=#f8f8f2>maxStack</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxLocals</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Parses a type annotation table to find the labels, and to visit the try catch block</color>
<color=#75715e>   * annotations.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param u the start offset of a type annotation table.</color>
<color=#75715e>   * @param mv the method visitor to be used to visit the try catch block annotations.</color>
<color=#75715e>   * @param context information about the class being parsed.</color>
<color=#75715e>   * @param visible if the type annotation table to parse contains runtime visible annotations.</color>
<color=#75715e>   * @return the start offset of each type annotation in the parsed table.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#a6e22e>readTypeAnnotations</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Context</color> <color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>u</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>buffer</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>offsets</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>offsets</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>offsets</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>u</color><color=#f8f8f2>;</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>target</color> <color=#f92672>=</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>);</color>
      <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color> <color=#f92672>>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>case</color> <color=#ae81ff>0x00</color><color=#f8f8f2>:</color> <color=#75715e>// CLASS_TYPE_PARAMETER</color>
        <color=#66d9ef>case</color> <color=#ae81ff>0x01</color><color=#f8f8f2>:</color> <color=#75715e>// METHOD_TYPE_PARAMETER</color>
        <color=#66d9ef>case</color> <color=#ae81ff>0x16</color><color=#f8f8f2>:</color> <color=#75715e>// METHOD_FORMAL_PARAMETER</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#ae81ff>0x13</color><color=#f8f8f2>:</color> <color=#75715e>// FIELD</color>
        <color=#66d9ef>case</color> <color=#ae81ff>0x14</color><color=#f8f8f2>:</color> <color=#75715e>// METHOD_RETURN</color>
        <color=#66d9ef>case</color> <color=#ae81ff>0x15</color><color=#f8f8f2>:</color> <color=#75715e>// METHOD_RECEIVER</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#ae81ff>0x40</color><color=#f8f8f2>:</color> <color=#75715e>// LOCAL_VARIABLE</color>
        <color=#66d9ef>case</color> <color=#ae81ff>0x41</color><color=#f8f8f2>:</color> <color=#75715e>// RESOURCE_VARIABLE</color>
          <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color> <color=#f8f8f2>j</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>start</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>5</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>readLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>start</color><color=#f8f8f2>,</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>labels</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>readLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>start</color> <color=#f92672>+</color> <color=#f8f8f2>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>labels</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#ae81ff>0x47</color><color=#f8f8f2>:</color> <color=#75715e>// CAST</color>
        <color=#66d9ef>case</color> <color=#ae81ff>0x48</color><color=#f8f8f2>:</color> <color=#75715e>// CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT</color>
        <color=#66d9ef>case</color> <color=#ae81ff>0x49</color><color=#f8f8f2>:</color> <color=#75715e>// METHOD_INVOCATION_TYPE_ARGUMENT</color>
        <color=#66d9ef>case</color> <color=#ae81ff>0x4A</color><color=#f8f8f2>:</color> <color=#75715e>// CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT</color>
        <color=#66d9ef>case</color> <color=#ae81ff>0x4B</color><color=#f8f8f2>:</color> <color=#75715e>// METHOD_REFERENCE_TYPE_ARGUMENT</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#75715e>// case 0x10: // CLASS_EXTENDS</color>
          <color=#75715e>// case 0x11: // CLASS_TYPE_PARAMETER_BOUND</color>
          <color=#75715e>// case 0x12: // METHOD_TYPE_PARAMETER_BOUND</color>
          <color=#75715e>// case 0x17: // THROWS</color>
          <color=#75715e>// case 0x42: // EXCEPTION_PARAMETER</color>
          <color=#75715e>// case 0x43: // INSTANCEOF</color>
          <color=#75715e>// case 0x44: // NEW</color>
          <color=#75715e>// case 0x45: // CONSTRUCTOR_REFERENCE</color>
          <color=#75715e>// case 0x46: // METHOD_REFERENCE</color>
        <color=#66d9ef>default</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>pathLength</color> <color=#f92672>=</color> <color=#f8f8f2>readByte</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>target</color> <color=#f92672>>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0x42</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>TypePath</color> <color=#f8f8f2>path</color> <color=#f92672>=</color> <color=#f8f8f2>pathLength</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#66d9ef>null</color> <color=#f8f8f2>:</color> <color=#66d9ef>new</color> <color=#f8f8f2>TypePath</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>1</color> <color=#f92672>+</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>pathLength</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>u</color> <color=#f92672>=</color>
            <color=#f8f8f2>readAnnotationValues</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTryCatchAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>,</color> <color=#f8f8f2>path</color><color=#f8f8f2>,</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>),</color> <color=#f8f8f2>visible</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#f8f8f2>readAnnotationValues</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>3</color> <color=#f92672>+</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>pathLength</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>offsets</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Parses the header of a type annotation to extract its target_type and target_path (the result</color>
<color=#75715e>   * is stored in the given context), and returns the start offset of the rest of the</color>
<color=#75715e>   * type_annotation structure (i.e. the offset to the type_index field, which is followed by</color>
<color=#75715e>   * num_element_value_pairs and then the name,value pairs).</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param context information about the class being parsed. This is where the extracted</color>
<color=#75715e>   *     target_type and target_path must be stored.</color>
<color=#75715e>   * @param u the start offset of a type_annotation structure.</color>
<color=#75715e>   * @return the start offset of the rest of the type_annotation structure.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>readAnnotationTarget</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Context</color> <color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>u</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>target</color> <color=#f92672>=</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>);</color>
    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color> <color=#f92672>>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#ae81ff>0x00</color><color=#f8f8f2>:</color> <color=#75715e>// CLASS_TYPE_PARAMETER</color>
      <color=#66d9ef>case</color> <color=#ae81ff>0x01</color><color=#f8f8f2>:</color> <color=#75715e>// METHOD_TYPE_PARAMETER</color>
      <color=#66d9ef>case</color> <color=#ae81ff>0x16</color><color=#f8f8f2>:</color> <color=#75715e>// METHOD_FORMAL_PARAMETER</color>
        <color=#f8f8f2>target</color> <color=#f92672>&=</color> <color=#ae81ff>0xFFFF0000</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#ae81ff>0x13</color><color=#f8f8f2>:</color> <color=#75715e>// FIELD</color>
      <color=#66d9ef>case</color> <color=#ae81ff>0x14</color><color=#f8f8f2>:</color> <color=#75715e>// METHOD_RETURN</color>
      <color=#66d9ef>case</color> <color=#ae81ff>0x15</color><color=#f8f8f2>:</color> <color=#75715e>// METHOD_RECEIVER</color>
        <color=#f8f8f2>target</color> <color=#f92672>&=</color> <color=#ae81ff>0xFF000000</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#ae81ff>0x40</color><color=#f8f8f2>:</color> <color=#75715e>// LOCAL_VARIABLE</color>
      <color=#66d9ef>case</color> <color=#ae81ff>0x41</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>{</color> <color=#75715e>// RESOURCE_VARIABLE</color>
          <color=#f8f8f2>target</color> <color=#f92672>&=</color> <color=#ae81ff>0xFF000000</color><color=#f8f8f2>;</color>
          <color=#66d9ef>int</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>start</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f92672>[</color><color=#f8f8f2>n</color><color=#f92672>]</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>end</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f92672>[</color><color=#f8f8f2>n</color><color=#f92672>]</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>index</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>n</color><color=#f92672>]</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
          <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>start</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>);</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>start</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>readLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>start</color><color=#f8f8f2>,</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>labels</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>end</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>readLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>start</color> <color=#f92672>+</color> <color=#f8f8f2>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>labels</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#66d9ef>case</color> <color=#ae81ff>0x47</color><color=#f8f8f2>:</color> <color=#75715e>// CAST</color>
      <color=#66d9ef>case</color> <color=#ae81ff>0x48</color><color=#f8f8f2>:</color> <color=#75715e>// CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT</color>
      <color=#66d9ef>case</color> <color=#ae81ff>0x49</color><color=#f8f8f2>:</color> <color=#75715e>// METHOD_INVOCATION_TYPE_ARGUMENT</color>
      <color=#66d9ef>case</color> <color=#ae81ff>0x4A</color><color=#f8f8f2>:</color> <color=#75715e>// CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT</color>
      <color=#66d9ef>case</color> <color=#ae81ff>0x4B</color><color=#f8f8f2>:</color> <color=#75715e>// METHOD_REFERENCE_TYPE_ARGUMENT</color>
        <color=#f8f8f2>target</color> <color=#f92672>&=</color> <color=#ae81ff>0xFF0000FF</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#75715e>// case 0x10: // CLASS_EXTENDS</color>
        <color=#75715e>// case 0x11: // CLASS_TYPE_PARAMETER_BOUND</color>
        <color=#75715e>// case 0x12: // METHOD_TYPE_PARAMETER_BOUND</color>
        <color=#75715e>// case 0x17: // THROWS</color>
        <color=#75715e>// case 0x42: // EXCEPTION_PARAMETER</color>
        <color=#75715e>// case 0x43: // INSTANCEOF</color>
        <color=#75715e>// case 0x44: // NEW</color>
        <color=#75715e>// case 0x45: // CONSTRUCTOR_REFERENCE</color>
        <color=#75715e>// case 0x46: // METHOD_REFERENCE</color>
      <color=#66d9ef>default</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>target</color> <color=#f92672>&=</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color> <color=#f92672>>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#ae81ff>0x43</color> <color=#f92672>?</color> <color=#ae81ff>0xFFFFFF00</color> <color=#f8f8f2>:</color> <color=#ae81ff>0xFF000000</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>pathLength</color> <color=#f92672>=</color> <color=#f8f8f2>readByte</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>typeRef</color> <color=#f92672>=</color> <color=#f8f8f2>target</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>typePath</color> <color=#f92672>=</color> <color=#f8f8f2>pathLength</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#66d9ef>null</color> <color=#f8f8f2>:</color> <color=#66d9ef>new</color> <color=#f8f8f2>TypePath</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color> <color=#f92672>+</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>pathLength</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads parameter annotations and makes the given visitor visit them.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param mv the visitor that must visit the annotations.</color>
<color=#75715e>   * @param context information about the class being parsed.</color>
<color=#75715e>   * @param v start offset in {@link #b b} of the annotations to be read.</color>
<color=#75715e>   * @param visible <tt>true</tt> if the annotations to be read are visible at runtime.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>readParameterAnnotations</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>mv</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Context</color> <color=#f8f8f2>context</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>v</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
    <color=#75715e>// workaround for a bug in javac (javac compiler generates a parameter</color>
    <color=#75715e>// annotation array whose size is equal to the number of parameters in</color>
    <color=#75715e>// the Java source file, while it should generate an array whose size is</color>
    <color=#75715e>// equal to the number of parameters in the method descriptor - which</color>
    <color=#75715e>// includes the synthetic parameters added by the compiler). This work-</color>
    <color=#75715e>// around supposes that the synthetic parameters are the first ones.</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>synthetics</color> <color=#f92672>=</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>getArgumentTypes</color><color=#f8f8f2>(</color><color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>desc</color><color=#f8f8f2>).</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>AnnotationVisitor</color> <color=#f8f8f2>av</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>synthetics</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>// virtual annotation to detect synthetic parameters in MethodWriter</color>
      <color=#f8f8f2>av</color> <color=#f92672>=</color> <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitParameterAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#e6db74>"Ljava/lang/Synthetic;"</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>av</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>buffer</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>n</color> <color=#f92672>+</color> <color=#f8f8f2>synthetics</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(;</color> <color=#f8f8f2>j</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>av</color> <color=#f92672>=</color> <color=#f8f8f2>mv</color><color=#f8f8f2>.</color><color=#a6e22e>visitParameterAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>),</color> <color=#f8f8f2>visible</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>readAnnotationValues</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>av</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads the values of an annotation and makes the given visitor visit them.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param v the start offset in {@link #b b} of the values to be read (including the unsigned</color>
<color=#75715e>   *     short that gives the number of values).</color>
<color=#75715e>   * @param buf buffer to be used to call {@link #readUTF8 readUTF8}, {@link #readClass(int,char[])</color>
<color=#75715e>   *     readClass} or {@link #readConst readConst}.</color>
<color=#75715e>   * @param named if the annotation values are named or not.</color>
<color=#75715e>   * @param av the visitor that must visit the values.</color>
<color=#75715e>   * @return the end offset of the annotation values.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>readAnnotationValues</color><color=#f8f8f2>(</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>named</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#f8f8f2>av</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>named</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(;</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>readAnnotationValue</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>),</color> <color=#f8f8f2>av</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(;</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>readAnnotationValue</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>av</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>av</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>v</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a value of an annotation and makes the given visitor visit it.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param v the start offset in {@link #b b} of the value to be read (<i>not including the value</color>
<color=#75715e>   *     name constant pool index</i>).</color>
<color=#75715e>   * @param buf buffer to be used to call {@link #readUTF8 readUTF8}, {@link #readClass(int,char[])</color>
<color=#75715e>   *     readClass} or {@link #readConst readConst}.</color>
<color=#75715e>   * @param name the name of the value to be read.</color>
<color=#75715e>   * @param av the visitor that must visit the value.</color>
<color=#75715e>   * @return the end offset of the annotation value.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>readAnnotationValue</color><color=#f8f8f2>(</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#f8f8f2>av</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>av</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>v</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>case</color> <color=#e6db74>'e'</color><color=#f8f8f2>:</color> <color=#75715e>// enum_const_value</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#e6db74>'@'</color><color=#f8f8f2>:</color> <color=#75715e>// annotation_value</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>readAnnotationValues</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>3</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#66d9ef>case</color> <color=#e6db74>'['</color><color=#f8f8f2>:</color> <color=#75715e>// array_value</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>readAnnotationValues</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#66d9ef>default</color><color=#f8f8f2>:</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>v</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#e6db74>'I'</color><color=#f8f8f2>:</color> <color=#75715e>// pointer to CONSTANT_Integer</color>
      <color=#66d9ef>case</color> <color=#e6db74>'J'</color><color=#f8f8f2>:</color> <color=#75715e>// pointer to CONSTANT_Long</color>
      <color=#66d9ef>case</color> <color=#e6db74>'F'</color><color=#f8f8f2>:</color> <color=#75715e>// pointer to CONSTANT_Float</color>
      <color=#66d9ef>case</color> <color=#e6db74>'D'</color><color=#f8f8f2>:</color> <color=#75715e>// pointer to CONSTANT_Double</color>
        <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>readConst</color><color=#f8f8f2>(</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>),</color> <color=#f8f8f2>buf</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#e6db74>'B'</color><color=#f8f8f2>:</color> <color=#75715e>// pointer to CONSTANT_Byte</color>
        <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>Byte</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>)));</color>
        <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#e6db74>'Z'</color><color=#f8f8f2>:</color> <color=#75715e>// pointer to CONSTANT_Boolean</color>
        <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f8f8f2>Boolean</color><color=#f8f8f2>.</color><color=#a6e22e>FALSE</color> <color=#f8f8f2>:</color> <color=#f8f8f2>Boolean</color><color=#f8f8f2>.</color><color=#a6e22e>TRUE</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#e6db74>'S'</color><color=#f8f8f2>:</color> <color=#75715e>// pointer to CONSTANT_Short</color>
        <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>Short</color><color=#f8f8f2>((</color><color=#66d9ef>short</color><color=#f8f8f2>)</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>)));</color>
        <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#e6db74>'C'</color><color=#f8f8f2>:</color> <color=#75715e>// pointer to CONSTANT_Char</color>
        <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>Character</color><color=#f8f8f2>((</color><color=#66d9ef>char</color><color=#f8f8f2>)</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>)));</color>
        <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#e6db74>'s'</color><color=#f8f8f2>:</color> <color=#75715e>// pointer to CONSTANT_Utf8</color>
        <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#e6db74>'e'</color><color=#f8f8f2>:</color> <color=#75715e>// enum_const_value</color>
        <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnum</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>),</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#e6db74>'c'</color><color=#f8f8f2>:</color> <color=#75715e>// class_info</color>
        <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>(</color><color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>)));</color>
        <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#e6db74>'@'</color><color=#f8f8f2>:</color> <color=#75715e>// annotation_value</color>
        <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>readAnnotationValues</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visitAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>)));</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#e6db74>'['</color><color=#f8f8f2>:</color> <color=#75715e>// array_value</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>return</color> <color=#f8f8f2>readAnnotationValues</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>-</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visitArray</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>b</color><color=#f92672>[</color><color=#f8f8f2>v</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>case</color> <color=#e6db74>'B'</color><color=#f8f8f2>:</color>
            <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bv</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>size</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>bv</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>);</color>
            <color=#f92672>--</color><color=#f8f8f2>v</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#66d9ef>case</color> <color=#e6db74>'Z'</color><color=#f8f8f2>:</color>
            <color=#66d9ef>boolean</color><color=#f92672>[]</color> <color=#f8f8f2>zv</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>boolean</color><color=#f92672>[</color><color=#f8f8f2>size</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>zv</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>zv</color><color=#f8f8f2>);</color>
            <color=#f92672>--</color><color=#f8f8f2>v</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#66d9ef>case</color> <color=#e6db74>'S'</color><color=#f8f8f2>:</color>
            <color=#66d9ef>short</color><color=#f92672>[]</color> <color=#f8f8f2>sv</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>short</color><color=#f92672>[</color><color=#f8f8f2>size</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>sv</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>short</color><color=#f8f8f2>)</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>sv</color><color=#f8f8f2>);</color>
            <color=#f92672>--</color><color=#f8f8f2>v</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#66d9ef>case</color> <color=#e6db74>'C'</color><color=#f8f8f2>:</color>
            <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>cv</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>char</color><color=#f92672>[</color><color=#f8f8f2>size</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>cv</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>char</color><color=#f8f8f2>)</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>cv</color><color=#f8f8f2>);</color>
            <color=#f92672>--</color><color=#f8f8f2>v</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#66d9ef>case</color> <color=#e6db74>'I'</color><color=#f8f8f2>:</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>iv</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>size</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>iv</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>iv</color><color=#f8f8f2>);</color>
            <color=#f92672>--</color><color=#f8f8f2>v</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#66d9ef>case</color> <color=#e6db74>'J'</color><color=#f8f8f2>:</color>
            <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>lv</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[</color><color=#f8f8f2>size</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>lv</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>readLong</color><color=#f8f8f2>(</color><color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>lv</color><color=#f8f8f2>);</color>
            <color=#f92672>--</color><color=#f8f8f2>v</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#66d9ef>case</color> <color=#e6db74>'F'</color><color=#f8f8f2>:</color>
            <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>fv</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>float</color><color=#f92672>[</color><color=#f8f8f2>size</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>fv</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>intBitsToFloat</color><color=#f8f8f2>(</color><color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>));</color>
              <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>fv</color><color=#f8f8f2>);</color>
            <color=#f92672>--</color><color=#f8f8f2>v</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#66d9ef>case</color> <color=#e6db74>'D'</color><color=#f8f8f2>:</color>
            <color=#66d9ef>double</color><color=#f92672>[]</color> <color=#f8f8f2>dv</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>double</color><color=#f92672>[</color><color=#f8f8f2>size</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>dv</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>longBitsToDouble</color><color=#f8f8f2>(</color><color=#f8f8f2>readLong</color><color=#f8f8f2>(</color><color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>));</color>
              <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>dv</color><color=#f8f8f2>);</color>
            <color=#f92672>--</color><color=#f8f8f2>v</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#66d9ef>default</color><color=#f8f8f2>:</color>
            <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>readAnnotationValues</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>-</color> <color=#ae81ff>3</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#f8f8f2>av</color><color=#f8f8f2>.</color><color=#a6e22e>visitArray</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>v</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Computes the implicit frame of the method currently being parsed (as defined in the given</color>
<color=#75715e>   * {@link Context}) and stores it in the given context.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param frame information about the class being parsed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>getImplicitFrame</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Context</color> <color=#f8f8f2>frame</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color> <color=#f92672>=</color> <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>desc</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Object</color><color=#f92672>[]</color> <color=#f8f8f2>locals</color> <color=#f92672>=</color> <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>local</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>local</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>access</color> <color=#f92672>&</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_STATIC</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"<init>"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>locals</color><color=#f92672>[</color><color=#f8f8f2>local</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>UNINITIALIZED_THIS</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>locals</color><color=#f92672>[</color><color=#f8f8f2>local</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>readClass</color><color=#f8f8f2>(</color><color=#f8f8f2>header</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>buffer</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>loop</color><color=#f8f8f2>:</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
      <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>case</color> <color=#e6db74>'Z'</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#e6db74>'C'</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#e6db74>'B'</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#e6db74>'S'</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#e6db74>'I'</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>locals</color><color=#f92672>[</color><color=#f8f8f2>local</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>INTEGER</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#e6db74>'F'</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>locals</color><color=#f92672>[</color><color=#f8f8f2>local</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>FLOAT</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#e6db74>'J'</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>locals</color><color=#f92672>[</color><color=#f8f8f2>local</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>LONG</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#e6db74>'D'</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>locals</color><color=#f92672>[</color><color=#f8f8f2>local</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>DOUBLE</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#e6db74>'['</color><color=#f8f8f2>:</color>
          <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#e6db74>'['</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#e6db74>'L'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>;</color>
            <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#e6db74>';'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>locals</color><color=#f92672>[</color><color=#f8f8f2>local</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>desc</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>j</color><color=#f8f8f2>,</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#e6db74>'L'</color><color=#f8f8f2>:</color>
          <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#e6db74>';'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>locals</color><color=#f92672>[</color><color=#f8f8f2>local</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>desc</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>);</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>default</color><color=#f8f8f2>:</color>
          <color=#66d9ef>break</color> <color=#f8f8f2>loop</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>localCount</color> <color=#f92672>=</color> <color=#f8f8f2>local</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a stack map frame and stores the result in the given {@link Context} object.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param stackMap the start offset of a stack map frame in the class file.</color>
<color=#75715e>   * @param zip if the stack map frame at stackMap is compressed or not.</color>
<color=#75715e>   * @param unzip if the stack map frame must be uncompressed.</color>
<color=#75715e>   * @param frame where the parsed stack map frame must be stored.</color>
<color=#75715e>   * @return the offset of the first byte following the parsed frame.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>readFrame</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>stackMap</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>zip</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>unzip</color><color=#f8f8f2>,</color> <color=#f8f8f2>Context</color> <color=#f8f8f2>frame</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>buffer</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Label</color><color=#f92672>[]</color> <color=#f8f8f2>labels</color> <color=#f92672>=</color> <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>labels</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>tag</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>delta</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>zip</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>tag</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>stackMap</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>tag</color> <color=#f92672>=</color> <color=#f8f8f2>MethodWriter</color><color=#f8f8f2>.</color><color=#a6e22e>FULL_FRAME</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>offset</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>localDiff</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tag</color> <color=#f92672><</color> <color=#f8f8f2>MethodWriter</color><color=#f8f8f2>.</color><color=#a6e22e>SAME_LOCALS_1_STACK_ITEM_FRAME</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>delta</color> <color=#f92672>=</color> <color=#f8f8f2>tag</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>mode</color> <color=#f92672>=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>F_SAME</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>stackCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tag</color> <color=#f92672><</color> <color=#f8f8f2>MethodWriter</color><color=#f8f8f2>.</color><color=#a6e22e>RESERVED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>delta</color> <color=#f92672>=</color> <color=#f8f8f2>tag</color> <color=#f92672>-</color> <color=#f8f8f2>MethodWriter</color><color=#f8f8f2>.</color><color=#a6e22e>SAME_LOCALS_1_STACK_ITEM_FRAME</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>stackMap</color> <color=#f92672>=</color> <color=#f8f8f2>readFrameType</color><color=#f8f8f2>(</color><color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>stack</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>stackMap</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>mode</color> <color=#f92672>=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>F_SAME1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>stackCount</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>delta</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>stackMap</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>stackMap</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tag</color> <color=#f92672>==</color> <color=#f8f8f2>MethodWriter</color><color=#f8f8f2>.</color><color=#a6e22e>SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>stackMap</color> <color=#f92672>=</color> <color=#f8f8f2>readFrameType</color><color=#f8f8f2>(</color><color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>stack</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>stackMap</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>mode</color> <color=#f92672>=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>F_SAME1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>stackCount</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tag</color> <color=#f92672>>=</color> <color=#f8f8f2>MethodWriter</color><color=#f8f8f2>.</color><color=#a6e22e>CHOP_FRAME</color> <color=#f92672>&&</color> <color=#f8f8f2>tag</color> <color=#f92672><</color> <color=#f8f8f2>MethodWriter</color><color=#f8f8f2>.</color><color=#a6e22e>SAME_FRAME_EXTENDED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>mode</color> <color=#f92672>=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>F_CHOP</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>localDiff</color> <color=#f92672>=</color> <color=#f8f8f2>MethodWriter</color><color=#f8f8f2>.</color><color=#a6e22e>SAME_FRAME_EXTENDED</color> <color=#f92672>-</color> <color=#f8f8f2>tag</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>localCount</color> <color=#f92672>-=</color> <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>localDiff</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>stackCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tag</color> <color=#f92672>==</color> <color=#f8f8f2>MethodWriter</color><color=#f8f8f2>.</color><color=#a6e22e>SAME_FRAME_EXTENDED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>mode</color> <color=#f92672>=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>F_SAME</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>stackCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tag</color> <color=#f92672><</color> <color=#f8f8f2>MethodWriter</color><color=#f8f8f2>.</color><color=#a6e22e>FULL_FRAME</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>local</color> <color=#f92672>=</color> <color=#f8f8f2>unzip</color> <color=#f92672>?</color> <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>localCount</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>tag</color> <color=#f92672>-</color> <color=#f8f8f2>MethodWriter</color><color=#f8f8f2>.</color><color=#a6e22e>SAME_FRAME_EXTENDED</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>stackMap</color> <color=#f92672>=</color> <color=#f8f8f2>readFrameType</color><color=#f8f8f2>(</color><color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>local</color><color=#f8f8f2>,</color> <color=#f8f8f2>local</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>stackMap</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>mode</color> <color=#f92672>=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>F_APPEND</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>localDiff</color> <color=#f92672>=</color> <color=#f8f8f2>tag</color> <color=#f92672>-</color> <color=#f8f8f2>MethodWriter</color><color=#f8f8f2>.</color><color=#a6e22e>SAME_FRAME_EXTENDED</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>localCount</color> <color=#f92672>+=</color> <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>localDiff</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>stackCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color> <color=#75715e>// if (tag == FULL_FRAME) {</color>
        <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>mode</color> <color=#f92672>=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>F_FULL</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>stackMap</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>stackMap</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>localDiff</color> <color=#f92672>=</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>localCount</color> <color=#f92672>=</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>local</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>n</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>n</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>stackMap</color> <color=#f92672>=</color> <color=#f8f8f2>readFrameType</color><color=#f8f8f2>(</color><color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>local</color><color=#f8f8f2>,</color> <color=#f8f8f2>local</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>stackMap</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>stackMap</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>stackMap</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>stackCount</color> <color=#f92672>=</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>stack</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>n</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>n</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>stackMap</color> <color=#f92672>=</color> <color=#f8f8f2>readFrameType</color><color=#f8f8f2>(</color><color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>stack</color><color=#f8f8f2>,</color> <color=#f8f8f2>stack</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>stackMap</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>offset</color> <color=#f92672>+=</color> <color=#f8f8f2>delta</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>readLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>stackMap</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a stack map frame type and stores it at the given index in the given array.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param frame the array where the parsed type must be stored.</color>
<color=#75715e>   * @param index the index in 'frame' where the parsed type must be stored.</color>
<color=#75715e>   * @param v the start offset of the stack map frame type to read.</color>
<color=#75715e>   * @param buf a buffer to read strings.</color>
<color=#75715e>   * @param labels the labels of the method currently being parsed, indexed by their offset. If the</color>
<color=#75715e>   *     parsed type is an Uninitialized type, a new label for the corresponding NEW instruction is</color>
<color=#75715e>   *     stored in this array if it does not already exist.</color>
<color=#75715e>   * @return the offset of the first byte after the parsed type.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>readFrameType</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Object</color><color=#f92672>[]</color> <color=#f8f8f2>frame</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Label</color><color=#f92672>[]</color> <color=#f8f8f2>labels</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>v</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#ae81ff>0</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>TOP</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#ae81ff>1</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>INTEGER</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#ae81ff>2</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>FLOAT</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#ae81ff>3</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>DOUBLE</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#ae81ff>4</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>LONG</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#ae81ff>5</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>NULL</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#ae81ff>6</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>UNINITIALIZED_THIS</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#ae81ff>7</color><color=#f8f8f2>:</color> <color=#75715e>// Object</color>
        <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>readClass</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>default</color><color=#f8f8f2>:</color> <color=#75715e>// Uninitialized</color>
        <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>readLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>),</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>v</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>v</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the label corresponding to the given offset. The default implementation of this method</color>
<color=#75715e>   * creates a label for the given offset if it has not been already created.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param offset a bytecode offset in a method.</color>
<color=#75715e>   * @param labels the already created labels, indexed by their offset. If a label already exists</color>
<color=#75715e>   *     for offset this method must not create a new one. Otherwise it must store the new label in</color>
<color=#75715e>   *     this array.</color>
<color=#75715e>   * @return a non null Label, which must be equal to labels[offset].</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>Label</color> <color=#a6e22e>readLabel</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>Label</color><color=#f92672>[]</color> <color=#f8f8f2>labels</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>]</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the start index of the attribute_info structure of this class.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the start index of the attribute_info structure of this class.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>getAttributes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>// skips the header</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#f8f8f2>header</color> <color=#f92672>+</color> <color=#ae81ff>8</color> <color=#f92672>+</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>header</color> <color=#f92672>+</color> <color=#ae81ff>6</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#75715e>// skips fields and methods</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>);</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>);</color> <color=#f8f8f2>j</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>6</color> <color=#f92672>+</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>12</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color><color=#f8f8f2>);</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>);</color> <color=#f8f8f2>j</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>6</color> <color=#f92672>+</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>12</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// the attribute_info structure starts just after the methods</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads an attribute in {@link #b b}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param attrs prototypes of the attributes that must be parsed during the visit of the class.</color>
<color=#75715e>   *     Any attribute whose type is not equal to the type of one the prototypes is ignored (i.e. an</color>
<color=#75715e>   *     empty {@link Attribute} instance is returned).</color>
<color=#75715e>   * @param type the type of the attribute.</color>
<color=#75715e>   * @param off index of the first byte of the attribute's content in {@link #b b}. The 6 attribute</color>
<color=#75715e>   *     header bytes, containing the type and the length of the attribute, are not taken into</color>
<color=#75715e>   *     account here (they have already been read).</color>
<color=#75715e>   * @param len the length of the attribute's content.</color>
<color=#75715e>   * @param buf buffer to be used to call {@link #readUTF8 readUTF8}, {@link #readClass(int,char[])</color>
<color=#75715e>   *     readClass} or {@link #readConst readConst}.</color>
<color=#75715e>   * @param codeOff index of the first byte of code's attribute content in {@link #b b}, or -1 if</color>
<color=#75715e>   *     the attribute to be read is not a code attribute. The 6 attribute header bytes, containing</color>
<color=#75715e>   *     the type and the length of the attribute, are not taken into account here.</color>
<color=#75715e>   * @param labels the labels of the method's code, or <tt>null</tt> if the attribute to be read is</color>
<color=#75715e>   *     not a code attribute.</color>
<color=#75715e>   * @return the attribute that has been read, or <tt>null</tt> to skip this attribute.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Attribute</color> <color=#a6e22e>readAttribute</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Attribute</color><color=#f92672>[]</color> <color=#f8f8f2>attrs</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>codeOff</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Label</color><color=#f92672>[]</color> <color=#f8f8f2>labels</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>attrs</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>attrs</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>attrs</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>codeOff</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Attribute</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>).</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// ------------------------------------------------------------------------</color>
  <color=#75715e>// Utility methods: low level parsing</color>
  <color=#75715e>// ------------------------------------------------------------------------</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the number of constant pool items in {@link #b b}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the number of constant pool items in {@link #b b}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getItemCount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>items</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the start index of the constant pool item in {@link #b b}, plus one. <i>This method is</color>
<color=#75715e>   * intended for {@link Attribute} sub classes, and is normally not needed by class generators or</color>
<color=#75715e>   * adapters.</i></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param item the index a constant pool item.</color>
<color=#75715e>   * @return the start index of the constant pool item in {@link #b b}, plus one.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getItem</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>item</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>item</color><color=#f92672>]</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the maximum length of the strings contained in the constant pool of the class.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the maximum length of the strings contained in the constant pool of the class.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getMaxStringLength</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>maxStringLength</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a byte value in {@link #b b}. <i>This method is intended for {@link Attribute} sub</color>
<color=#75715e>   * classes, and is normally not needed by class generators or adapters.</i></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param index the start index of the value to be read in {@link #b b}.</color>
<color=#75715e>   * @return the read value.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>readByte</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads an unsigned short value in {@link #b b}. <i>This method is intended for {@link Attribute}</color>
<color=#75715e>   * sub classes, and is normally not needed by class generators or adapters.</i></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param index the start index of the value to be read in {@link #b b}.</color>
<color=#75715e>   * @return the read value.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>readUnsignedShort</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>b</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a signed short value in {@link #b b}. <i>This method is intended for {@link Attribute}</color>
<color=#75715e>   * sub classes, and is normally not needed by class generators or adapters.</i></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param index the start index of the value to be read in {@link #b b}.</color>
<color=#75715e>   * @return the read value.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>short</color> <color=#a6e22e>readShort</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>b</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>short</color><color=#f8f8f2>)</color> <color=#f8f8f2>(((</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a signed int value in {@link #b b}. <i>This method is intended for {@link Attribute} sub</color>
<color=#75715e>   * classes, and is normally not needed by class generators or adapters.</i></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param index the start index of the value to be read in {@link #b b}.</color>
<color=#75715e>   * @return the read value.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>readInt</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>b</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color>
        <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color>
        <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color>
        <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a signed long value in {@link #b b}. <i>This method is intended for {@link Attribute} sub</color>
<color=#75715e>   * classes, and is normally not needed by class generators or adapters.</i></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param index the start index of the value to be read in {@link #b b}.</color>
<color=#75715e>   * @return the read value.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>readLong</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>l1</color> <color=#f92672>=</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>);</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>l0</color> <color=#f92672>=</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFFFFL</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>l1</color> <color=#f92672><<</color> <color=#ae81ff>32</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>l0</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads an UTF8 string constant pool item in {@link #b b}. <i>This method is intended for {@link</color>
<color=#75715e>   * Attribute} sub classes, and is normally not needed by class generators or adapters.</i></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param index the start index of an unsigned short value in {@link #b b}, whose value is the</color>
<color=#75715e>   *     index of an UTF8 constant pool item.</color>
<color=#75715e>   * @param buf buffer to be used to read the item. This buffer must be sufficiently large. It is</color>
<color=#75715e>   *     not automatically resized.</color>
<color=#75715e>   * @return the String corresponding to the specified UTF8 item.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>readUTF8</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>item</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>item</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>s</color> <color=#f92672>=</color> <color=#f8f8f2>strings</color><color=#f92672>[</color><color=#f8f8f2>item</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>s</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>s</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>item</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>strings</color><color=#f92672>[</color><color=#f8f8f2>item</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>),</color> <color=#f8f8f2>buf</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads UTF8 string in {@link #b b}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param index start offset of the UTF8 string to be read.</color>
<color=#75715e>   * @param utfLen length of the UTF8 string to be read.</color>
<color=#75715e>   * @param buf buffer to be used to read the string. This buffer must be sufficiently large. It is</color>
<color=#75715e>   *     not automatically resized.</color>
<color=#75715e>   * @return the String corresponding to the specified UTF8 string.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#a6e22e>readUTF</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>utfLen</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>endIndex</color> <color=#f92672>=</color> <color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#f8f8f2>utfLen</color><color=#f8f8f2>;</color>
    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>b</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>strLen</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>c</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>st</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>char</color> <color=#f8f8f2>cc</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672><</color> <color=#f8f8f2>endIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>++]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>st</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>case</color> <color=#ae81ff>0</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>c</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672><</color> <color=#ae81ff>0x80</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color> <color=#75715e>// 0xxxxxxx</color>
            <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>strLen</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>char</color><color=#f8f8f2>)</color> <color=#f8f8f2>c</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672><</color> <color=#ae81ff>0xE0</color> <color=#f92672>&&</color> <color=#f8f8f2>c</color> <color=#f92672>></color> <color=#ae81ff>0xBF</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color> <color=#75715e>// 110x xxxx 10xx xxxx</color>
            <color=#f8f8f2>cc</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>char</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>&</color> <color=#ae81ff>0x1F</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>st</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color> <color=#75715e>// 1110 xxxx 10xx xxxx 10xx xxxx</color>
            <color=#f8f8f2>cc</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>char</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>&</color> <color=#ae81ff>0x0F</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>st</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>

        <color=#66d9ef>case</color> <color=#ae81ff>1</color><color=#f8f8f2>:</color> <color=#75715e>// byte 2 of 2-byte char or byte 3 of 3-byte char</color>
          <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>strLen</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>char</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>cc</color> <color=#f92672><<</color> <color=#ae81ff>6</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>&</color> <color=#ae81ff>0x3F</color><color=#f8f8f2>));</color>
          <color=#f8f8f2>st</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>

        <color=#66d9ef>case</color> <color=#ae81ff>2</color><color=#f8f8f2>:</color> <color=#75715e>// byte 2 of 3-byte char</color>
          <color=#f8f8f2>cc</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>char</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>cc</color> <color=#f92672><<</color> <color=#ae81ff>6</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>&</color> <color=#ae81ff>0x3F</color><color=#f8f8f2>));</color>
          <color=#f8f8f2>st</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>strLen</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a class constant pool item in {@link #b b}. <i>This method is intended for {@link</color>
<color=#75715e>   * Attribute} sub classes, and is normally not needed by class generators or adapters.</i></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param index the start index of an unsigned short value in {@link #b b}, whose value is the</color>
<color=#75715e>   *     index of a class constant pool item.</color>
<color=#75715e>   * @param buf buffer to be used to read the item. This buffer must be sufficiently large. It is</color>
<color=#75715e>   *     not automatically resized.</color>
<color=#75715e>   * @return the String corresponding to the specified class item.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>readClass</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>// computes the start index of the CONSTANT_Class item in b</color>
    <color=#75715e>// and reads the CONSTANT_Utf8 item designated by</color>
    <color=#75715e>// the first two bytes of this CONSTANT_Class item</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a numeric or string constant pool item in {@link #b b}. <i>This method is intended for</color>
<color=#75715e>   * {@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i></color>
<color=#75715e>   *</color>
<color=#75715e>   * @param item the index of a constant pool item.</color>
<color=#75715e>   * @param buf buffer to be used to read the item. This buffer must be sufficiently large. It is</color>
<color=#75715e>   *     not automatically resized.</color>
<color=#75715e>   * @return the {@link Integer}, {@link Float}, {@link Long}, {@link Double}, {@link String},</color>
<color=#75715e>   *     {@link Type} or {@link Handle} corresponding to the given constant pool item.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>readConst</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>item</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>buf</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>item</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>INT</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>(</color><color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>));</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>FLOAT</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Float</color><color=#f8f8f2>(</color><color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>intBitsToFloat</color><color=#f8f8f2>(</color><color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>)));</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LONG</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Long</color><color=#f8f8f2>(</color><color=#f8f8f2>readLong</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>));</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>DOUBLE</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Double</color><color=#f8f8f2>(</color><color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>longBitsToDouble</color><color=#f8f8f2>(</color><color=#f8f8f2>readLong</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>)));</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>CLASS</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>getObjectType</color><color=#f8f8f2>(</color><color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>));</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>STR</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>);</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>MTYPE</color><color=#f8f8f2>:</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>getMethodType</color><color=#f8f8f2>(</color><color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>));</color>
      <color=#66d9ef>default</color><color=#f8f8f2>:</color> <color=#75715e>// case ClassWriter.HANDLE_BASE + [1..9]:</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>tag</color> <color=#f92672>=</color> <color=#f8f8f2>readByte</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>items</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>items</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>cpIndex</color> <color=#f92672>=</color> <color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>owner</color> <color=#f92672>=</color> <color=#f8f8f2>readClass</color><color=#f8f8f2>(</color><color=#f8f8f2>cpIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>cpIndex</color> <color=#f92672>=</color> <color=#f8f8f2>items</color><color=#f92672>[</color><color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cpIndex</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>cpIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color> <color=#f92672>=</color> <color=#f8f8f2>readUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>cpIndex</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Handle</color><color=#f8f8f2>(</color><color=#f8f8f2>tag</color><color=#f8f8f2>,</color> <color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>