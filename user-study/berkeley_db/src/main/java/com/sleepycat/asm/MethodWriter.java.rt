<color=#75715e>/***</color>
<color=#75715e> * ASM: a very small and fast Java bytecode manipulation framework</color>
<color=#75715e> * Copyright (c) 2000-2011 INRIA, France Telecom</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions</color>
<color=#75715e> * are met:</color>
<color=#75715e> * 1. Redistributions of source code must retain the above copyright</color>
<color=#75715e> *    notice, this list of conditions and the following disclaimer.</color>
<color=#75715e> * 2. Redistributions in binary form must reproduce the above copyright</color>
<color=#75715e> *    notice, this list of conditions and the following disclaimer in the</color>
<color=#75715e> *    documentation and/or other materials provided with the distribution.</color>
<color=#75715e> * 3. Neither the name of the copyright holders nor the names of its</color>
<color=#75715e> *    contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *    this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</color>
<color=#75715e> * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE</color>
<color=#75715e> * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR</color>
<color=#75715e> * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF</color>
<color=#75715e> * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS</color>
<color=#75715e> * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN</color>
<color=#75715e> * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)</color>
<color=#75715e> * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF</color>
<color=#75715e> * THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.asm</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A {@link MethodVisitor} that generates methods in bytecode form. Each visit method of this class</color>
<color=#75715e> * appends the bytecode corresponding to the visited instruction to a byte vector, in the order</color>
<color=#75715e> * these methods are called.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Eric Bruneton</color>
<color=#75715e> * @author Eugene Kuleshov</color>
<color=#75715e> */</color>
<color=#66d9ef>class</color> <color=#a6e22e>MethodWriter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>MethodVisitor</color> <color=#f8f8f2>{</color>

  <color=#75715e>/** Pseudo access flag used to denote constructors. */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ACC_CONSTRUCTOR</color> <color=#f92672>=</color> <color=#ae81ff>0x80000</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Frame has exactly the same locals as the previous stack map frame and number of stack items is</color>
<color=#75715e>   * zero.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SAME_FRAME</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#75715e>// to 63 (0-3f)</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Frame has exactly the same locals as the previous stack map frame and number of stack items is</color>
<color=#75715e>   * 1</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SAME_LOCALS_1_STACK_ITEM_FRAME</color> <color=#f92672>=</color> <color=#ae81ff>64</color><color=#f8f8f2>;</color> <color=#75715e>// to 127 (40-7f)</color>

  <color=#75715e>/** Reserved for future use */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>RESERVED</color> <color=#f92672>=</color> <color=#ae81ff>128</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Frame has exactly the same locals as the previous stack map frame and number of stack items is</color>
<color=#75715e>   * 1. Offset is bigger then 63;</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED</color> <color=#f92672>=</color> <color=#ae81ff>247</color><color=#f8f8f2>;</color> <color=#75715e>// f7</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Frame where current locals are the same as the locals in the previous frame, except that the k</color>
<color=#75715e>   * last locals are absent. The value of k is given by the formula 251-frame_type.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>CHOP_FRAME</color> <color=#f92672>=</color> <color=#ae81ff>248</color><color=#f8f8f2>;</color> <color=#75715e>// to 250 (f8-fA)</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Frame has exactly the same locals as the previous stack map frame and number of stack items is</color>
<color=#75715e>   * zero. Offset is bigger then 63;</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SAME_FRAME_EXTENDED</color> <color=#f92672>=</color> <color=#ae81ff>251</color><color=#f8f8f2>;</color> <color=#75715e>// fb</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Frame where current locals are the same as the locals in the previous frame, except that k</color>
<color=#75715e>   * additional locals are defined. The value of k is given by the formula frame_type-251.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>APPEND_FRAME</color> <color=#f92672>=</color> <color=#ae81ff>252</color><color=#f8f8f2>;</color> <color=#75715e>// to 254 // fc-fe</color>

  <color=#75715e>/** Full frame */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FULL_FRAME</color> <color=#f92672>=</color> <color=#ae81ff>255</color><color=#f8f8f2>;</color> <color=#75715e>// ff</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Indicates that the stack map frames must be recomputed from scratch. In this case the maximum</color>
<color=#75715e>   * stack size and number of local variables is also recomputed from scratch.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #compute</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FRAMES</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Indicates that the maximum stack size and number of local variables must be automatically</color>
<color=#75715e>   * computed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #compute</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAXS</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Indicates that nothing must be automatically computed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #compute</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>NOTHING</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The class writer to which this method must be added. */</color>
  <color=#66d9ef>final</color> <color=#f8f8f2>ClassWriter</color> <color=#f8f8f2>cw</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Access flags of this method. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>access</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The index of the constant pool item that contains the name of this method. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The index of the constant pool item that contains the descriptor of this method. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>desc</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The descriptor of this method. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>descriptor</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The signature of this method. */</color>
  <color=#f8f8f2>String</color> <color=#f8f8f2>signature</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If not zero, indicates that the code of this method must be copied from the ClassReader</color>
<color=#75715e>   * associated to this writer in <code>cw.cr</code>. More precisely, this field gives the index of</color>
<color=#75715e>   * the first byte to copied from <code>cw.cr.b</code>.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>int</color> <color=#f8f8f2>classReaderOffset</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * If not zero, indicates that the code of this method must be copied from the ClassReader</color>
<color=#75715e>   * associated to this writer in <code>cw.cr</code>. More precisely, this field gives the number of</color>
<color=#75715e>   * bytes to copied from <code>cw.cr.b</code>.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>int</color> <color=#f8f8f2>classReaderLength</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Number of exceptions that can be thrown by this method. */</color>
  <color=#66d9ef>int</color> <color=#f8f8f2>exceptionCount</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The exceptions that can be thrown by this method. More precisely, this array contains the</color>
<color=#75715e>   * indexes of the constant pool items that contain the internal names of these exception classes.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>exceptions</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The annotation default attribute of this method. May be <tt>null</tt>. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>annd</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The runtime visible annotations of this method. May be <tt>null</tt>. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>AnnotationWriter</color> <color=#f8f8f2>anns</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The runtime invisible annotations of this method. May be <tt>null</tt>. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>AnnotationWriter</color> <color=#f8f8f2>ianns</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The runtime visible type annotations of this method. May be <tt>null</tt> . */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>AnnotationWriter</color> <color=#f8f8f2>tanns</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The runtime invisible type annotations of this method. May be <tt>null</tt>. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>AnnotationWriter</color> <color=#f8f8f2>itanns</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The runtime visible parameter annotations of this method. May be <tt>null</tt>. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>AnnotationWriter</color><color=#f92672>[]</color> <color=#f8f8f2>panns</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The runtime invisible parameter annotations of this method. May be <tt>null</tt>. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>AnnotationWriter</color><color=#f92672>[]</color> <color=#f8f8f2>ipanns</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The number of synthetic parameters of this method. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>synthetics</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The non standard attributes of the method. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Attribute</color> <color=#f8f8f2>attrs</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The bytecode of this method. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>code</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteVector</color><color=#f8f8f2>();</color>

  <color=#75715e>/** Maximum stack size of this method. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxStack</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Maximum number of local variables for this method. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxLocals</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Number of local variables in the current stack map frame. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>currentLocals</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Number of stack map frames in the StackMapTable attribute. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>frameCount</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The StackMapTable attribute. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>stackMap</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The offset of the last frame that was written in the StackMapTable attribute. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>previousFrameOffset</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The last frame that was written in the StackMapTable attribute.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #frame</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>previousFrame</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The current stack map frame. The first element contains the offset of the instruction to which</color>
<color=#75715e>   * the frame corresponds, the second element is the number of locals and the third one is the</color>
<color=#75715e>   * number of stack elements. The local variables start at index 3 and are followed by the operand</color>
<color=#75715e>   * stack values. In summary frame[0] = offset, frame[1] = nLocal, frame[2] = nStack, frame[3] =</color>
<color=#75715e>   * nLocal. All types are encoded as integers, with the same format as the one used in {@link</color>
<color=#75715e>   * Label}, but limited to BASE types.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>frame</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Number of elements in the exception handler list. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>handlerCount</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The first element in the exception handler list. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Handler</color> <color=#f8f8f2>firstHandler</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The last element in the exception handler list. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Handler</color> <color=#f8f8f2>lastHandler</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Number of entries in the MethodParameters attribute. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>methodParametersCount</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The MethodParameters attribute. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>methodParameters</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Number of entries in the LocalVariableTable attribute. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>localVarCount</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The LocalVariableTable attribute. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>localVar</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Number of entries in the LocalVariableTypeTable attribute. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>localVarTypeCount</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The LocalVariableTypeTable attribute. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>localVarType</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Number of entries in the LineNumberTable attribute. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>lineNumberCount</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The LineNumberTable attribute. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>lineNumber</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The start offset of the last visited instruction. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>lastCodeOffset</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The runtime visible type annotations of the code. May be <tt>null</tt>. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>AnnotationWriter</color> <color=#f8f8f2>ctanns</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The runtime invisible type annotations of the code. May be <tt>null</tt>. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>AnnotationWriter</color> <color=#f8f8f2>ictanns</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The non standard attributes of the method's code. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Attribute</color> <color=#f8f8f2>cattrs</color><color=#f8f8f2>;</color>

  <color=#75715e>/** Indicates if some jump instructions are too small and need to be resized. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>resize</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The number of subroutines in this method. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>subroutines</color><color=#f8f8f2>;</color>

  <color=#75715e>// ------------------------------------------------------------------------</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Fields for the control flow graph analysis algorithm (used to compute the</color>
<color=#75715e>   * maximum stack size). A control flow graph contains one node per "basic</color>
<color=#75715e>   * block", and one edge per "jump" from one basic block to another. Each</color>
<color=#75715e>   * node (i.e., each basic block) is represented by the Label object that</color>
<color=#75715e>   * corresponds to the first instruction of this basic block. Each node also</color>
<color=#75715e>   * stores the list of its successors in the graph, as a linked list of Edge</color>
<color=#75715e>   * objects.</color>
<color=#75715e>   */</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Indicates what must be automatically computed.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @see #FRAMES</color>
<color=#75715e>   * @see #MAXS</color>
<color=#75715e>   * @see #NOTHING</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>compute</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * A list of labels. This list is the list of basic blocks in the method, i.e. a list of Label</color>
<color=#75715e>   * objects linked to each other by their {@link Label#successor} field, in the order they are</color>
<color=#75715e>   * visited by {@link MethodVisitor#visitLabel}, and starting with the first basic block.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Label</color> <color=#f8f8f2>labels</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The previous basic block. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Label</color> <color=#f8f8f2>previousBlock</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The current basic block. */</color>
  <color=#66d9ef>private</color> <color=#f8f8f2>Label</color> <color=#f8f8f2>currentBlock</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The (relative) stack size after the last visited instruction. This size is relative to the</color>
<color=#75715e>   * beginning of the current basic block, i.e., the true stack size after the last visited</color>
<color=#75715e>   * instruction is equal to the {@link Label#inputStackTop beginStackSize} of the current basic</color>
<color=#75715e>   * block plus <tt>stackSize</tt>.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>stackSize</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The (relative) maximum stack size after the last visited instruction. This size is relative to</color>
<color=#75715e>   * the beginning of the current basic block, i.e., the true maximum stack size after the last</color>
<color=#75715e>   * visited instruction is equal to the {@link Label#inputStackTop beginStackSize} of the current</color>
<color=#75715e>   * basic block plus <tt>stackSize</tt>.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxStackSize</color><color=#f8f8f2>;</color>

  <color=#75715e>// ------------------------------------------------------------------------</color>
  <color=#75715e>// Constructor</color>
  <color=#75715e>// ------------------------------------------------------------------------</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs a new {@link MethodWriter}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param cw the class writer in which the method must be added.</color>
<color=#75715e>   * @param access the method's access flags (see {@link Opcodes}).</color>
<color=#75715e>   * @param name the method's name.</color>
<color=#75715e>   * @param desc the method's descriptor (see {@link Type}).</color>
<color=#75715e>   * @param signature the method's signature. May be <tt>null</tt>.</color>
<color=#75715e>   * @param exceptions the internal names of the method's exceptions. May be <tt>null</tt>.</color>
<color=#75715e>   * @param computeMaxs <tt>true</tt> if the maximum stack size and number of local variables must</color>
<color=#75715e>   *     be automatically computed.</color>
<color=#75715e>   * @param computeFrames <tt>true</tt> if the stack map tables must be recomputed from scratch.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>MethodWriter</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>ClassWriter</color> <color=#f8f8f2>cw</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>access</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>signature</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>exceptions</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>computeMaxs</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>computeFrames</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ASM5</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>firstMethod</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>firstMethod</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>lastMethod</color><color=#f8f8f2>.</color><color=#a6e22e>mv</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>lastMethod</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>cw</color> <color=#f92672>=</color> <color=#f8f8f2>cw</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>access</color> <color=#f92672>=</color> <color=#f8f8f2>access</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"<init>"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>access</color> <color=#f92672>|=</color> <color=#f8f8f2>ACC_CONSTRUCTOR</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>name</color> <color=#f92672>=</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>desc</color> <color=#f92672>=</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>);</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>descriptor</color> <color=#f92672>=</color> <color=#f8f8f2>desc</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>SIGNATURES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>signature</color> <color=#f92672>=</color> <color=#f8f8f2>signature</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exceptions</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>exceptions</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>exceptionCount</color> <color=#f92672>=</color> <color=#f8f8f2>exceptions</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>exceptions</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>exceptionCount</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>exceptionCount</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>exceptions</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newClass</color><color=#f8f8f2>(</color><color=#f8f8f2>exceptions</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>compute</color> <color=#f92672>=</color> <color=#f8f8f2>computeFrames</color> <color=#f92672>?</color> <color=#f8f8f2>FRAMES</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#f8f8f2>computeMaxs</color> <color=#f92672>?</color> <color=#f8f8f2>MAXS</color> <color=#f8f8f2>:</color> <color=#f8f8f2>NOTHING</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>computeMaxs</color> <color=#f92672>||</color> <color=#f8f8f2>computeFrames</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>// updates maxLocals</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>getArgumentsAndReturnSizes</color><color=#f8f8f2>(</color><color=#f8f8f2>descriptor</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>access</color> <color=#f92672>&</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_STATIC</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f92672>--</color><color=#f8f8f2>size</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>maxLocals</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>currentLocals</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
      <color=#75715e>// creates and visits the label for the first basic block</color>
      <color=#f8f8f2>labels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>labels</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>|=</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>PUSHED</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>visitLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// ------------------------------------------------------------------------</color>
  <color=#75715e>// Implementation of the MethodVisitor abstract class</color>
  <color=#75715e>// ------------------------------------------------------------------------</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitParameter</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>access</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>methodParameters</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>methodParameters</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteVector</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f92672>++</color><color=#f8f8f2>methodParametersCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>methodParameters</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>((</color><color=#f8f8f2>name</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>)).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>access</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitAnnotationDefault</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>annd</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteVector</color><color=#f8f8f2>();</color>
    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>AnnotationWriter</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#f8f8f2>annd</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitAnnotation</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>bv</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteVector</color><color=#f8f8f2>();</color>
    <color=#75715e>// write type, and reserve space for values count</color>
    <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>)).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>AnnotationWriter</color> <color=#f8f8f2>aw</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AnnotationWriter</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>anns</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>anns</color> <color=#f92672>=</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>ianns</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>ianns</color> <color=#f92672>=</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitTypeAnnotation</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>typeRef</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>TypePath</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>bv</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteVector</color><color=#f8f8f2>();</color>
    <color=#75715e>// write target_type and target_info</color>
    <color=#f8f8f2>AnnotationWriter</color><color=#f8f8f2>.</color><color=#a6e22e>putTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>);</color>
    <color=#75715e>// write type, and reserve space for values count</color>
    <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>)).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>AnnotationWriter</color> <color=#f8f8f2>aw</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AnnotationWriter</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>tanns</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>tanns</color> <color=#f92672>=</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>itanns</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>itanns</color> <color=#f92672>=</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitParameterAnnotation</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>parameter</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>bv</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteVector</color><color=#f8f8f2>();</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"Ljava/lang/Synthetic;"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#75715e>// workaround for a bug in javac with synthetic parameters</color>
      <color=#75715e>// see ClassReader.readParameterAnnotations</color>
      <color=#f8f8f2>synthetics</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>synthetics</color><color=#f8f8f2>,</color> <color=#f8f8f2>parameter</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>AnnotationWriter</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// write type, and reserve space for values count</color>
    <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>)).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>AnnotationWriter</color> <color=#f8f8f2>aw</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AnnotationWriter</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>panns</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>panns</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AnnotationWriter</color><color=#f92672>[</color><color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>getArgumentTypes</color><color=#f8f8f2>(</color><color=#f8f8f2>descriptor</color><color=#f8f8f2>).</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>panns</color><color=#f92672>[</color><color=#f8f8f2>parameter</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>panns</color><color=#f92672>[</color><color=#f8f8f2>parameter</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ipanns</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ipanns</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AnnotationWriter</color><color=#f92672>[</color><color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>getArgumentTypes</color><color=#f8f8f2>(</color><color=#f8f8f2>descriptor</color><color=#f8f8f2>).</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>ipanns</color><color=#f92672>[</color><color=#f8f8f2>parameter</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>ipanns</color><color=#f92672>[</color><color=#f8f8f2>parameter</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitAttribute</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Attribute</color> <color=#f8f8f2>attr</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>attr</color><color=#f8f8f2>.</color><color=#a6e22e>isCodeAttribute</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>attr</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>cattrs</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>cattrs</color> <color=#f92672>=</color> <color=#f8f8f2>attr</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>attr</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>attrs</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>attrs</color> <color=#f92672>=</color> <color=#f8f8f2>attr</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitCode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitFrame</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>nLocal</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Object</color><color=#f92672>[]</color> <color=#f8f8f2>local</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>nStack</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Object</color><color=#f92672>[]</color> <color=#f8f8f2>stack</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>FRAMES</color> <color=#f92672>||</color> <color=#f8f8f2>compute</color> <color=#f92672>==</color> <color=#f8f8f2>FRAMES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>F_NEW</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>previousFrame</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>visitImplicitFirstFrame</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>currentLocals</color> <color=#f92672>=</color> <color=#f8f8f2>nLocal</color><color=#f8f8f2>;</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>frameIndex</color> <color=#f92672>=</color> <color=#f8f8f2>startFrame</color><color=#f8f8f2>(</color><color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>nLocal</color><color=#f8f8f2>,</color> <color=#f8f8f2>nStack</color><color=#f8f8f2>);</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nLocal</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>local</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>frameIndex</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>OBJECT</color> <color=#f92672>|</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>addType</color><color=#f8f8f2>((</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>local</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>local</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>frameIndex</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>Integer</color><color=#f8f8f2>)</color> <color=#f8f8f2>local</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>).</color><color=#a6e22e>intValue</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>frameIndex</color><color=#f92672>++]</color> <color=#f92672>=</color>
              <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>UNINITIALIZED</color> <color=#f92672>|</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>addUninitializedType</color><color=#f8f8f2>(</color><color=#e6db74>""</color><color=#f8f8f2>,</color> <color=#f8f8f2>((</color><color=#f8f8f2>Label</color><color=#f8f8f2>)</color> <color=#f8f8f2>local</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>).</color><color=#a6e22e>position</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nStack</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stack</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>frameIndex</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>OBJECT</color> <color=#f92672>|</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>addType</color><color=#f8f8f2>((</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>stack</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stack</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>frameIndex</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>Integer</color><color=#f8f8f2>)</color> <color=#f8f8f2>stack</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>).</color><color=#a6e22e>intValue</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>frameIndex</color><color=#f92672>++]</color> <color=#f92672>=</color>
              <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>UNINITIALIZED</color> <color=#f92672>|</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>addUninitializedType</color><color=#f8f8f2>(</color><color=#e6db74>""</color><color=#f8f8f2>,</color> <color=#f8f8f2>((</color><color=#f8f8f2>Label</color><color=#f8f8f2>)</color> <color=#f8f8f2>stack</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>).</color><color=#a6e22e>position</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>endFrame</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>delta</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stackMap</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>stackMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteVector</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>delta</color> <color=#f92672>=</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>delta</color> <color=#f92672>=</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#f8f8f2>previousFrameOffset</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>delta</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>F_SAME</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>F_FULL</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>currentLocals</color> <color=#f92672>=</color> <color=#f8f8f2>nLocal</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>FULL_FRAME</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>nLocal</color><color=#f8f8f2>);</color>
          <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nLocal</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>writeFrameType</color><color=#f8f8f2>(</color><color=#f8f8f2>local</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>nStack</color><color=#f8f8f2>);</color>
          <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nStack</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>writeFrameType</color><color=#f8f8f2>(</color><color=#f8f8f2>stack</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>F_APPEND</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>currentLocals</color> <color=#f92672>+=</color> <color=#f8f8f2>nLocal</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>SAME_FRAME_EXTENDED</color> <color=#f92672>+</color> <color=#f8f8f2>nLocal</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>);</color>
          <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nLocal</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>writeFrameType</color><color=#f8f8f2>(</color><color=#f8f8f2>local</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>F_CHOP</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>currentLocals</color> <color=#f92672>-=</color> <color=#f8f8f2>nLocal</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>SAME_FRAME_EXTENDED</color> <color=#f92672>-</color> <color=#f8f8f2>nLocal</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>);</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>F_SAME</color><color=#f8f8f2>:</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>delta</color> <color=#f92672><</color> <color=#ae81ff>64</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>SAME_FRAME_EXTENDED</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>F_SAME1</color><color=#f8f8f2>:</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>delta</color> <color=#f92672><</color> <color=#ae81ff>64</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>SAME_LOCALS_1_STACK_ITEM_FRAME</color> <color=#f92672>+</color> <color=#f8f8f2>delta</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>writeFrameType</color><color=#f8f8f2>(</color><color=#f8f8f2>stack</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>);</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>previousFrameOffset</color> <color=#f92672>=</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#f92672>++</color><color=#f8f8f2>frameCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>maxStack</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>maxStack</color><color=#f8f8f2>,</color> <color=#f8f8f2>nStack</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>maxLocals</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>maxLocals</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentLocals</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitInsn</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>opcode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>lastCodeOffset</color> <color=#f92672>=</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#75715e>// adds the instruction to the bytecode of the method</color>
    <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>);</color>
    <color=#75715e>// update currentBlock</color>
    <color=#75715e>// Label currentBlock = this.currentBlock;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentBlock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compute</color> <color=#f92672>==</color> <color=#f8f8f2>FRAMES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>currentBlock</color><color=#f8f8f2>.</color><color=#a6e22e>frame</color><color=#f8f8f2>.</color><color=#a6e22e>execute</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>// updates current and max stack sizes</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>stackSize</color> <color=#f92672>+</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>SIZE</color><color=#f92672>[</color><color=#f8f8f2>opcode</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>></color> <color=#f8f8f2>maxStackSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>maxStackSize</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>stackSize</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#75715e>// if opcode == ATHROW or xRETURN, ends current block (no successor)</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>opcode</color> <color=#f92672>>=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>IRETURN</color> <color=#f92672>&&</color> <color=#f8f8f2>opcode</color> <color=#f92672><=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>RETURN</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ATHROW</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>noSuccessor</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitIntInsn</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>operand</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>lastCodeOffset</color> <color=#f92672>=</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#75715e>// Label currentBlock = this.currentBlock;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentBlock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compute</color> <color=#f92672>==</color> <color=#f8f8f2>FRAMES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>currentBlock</color><color=#f8f8f2>.</color><color=#a6e22e>frame</color><color=#f8f8f2>.</color><color=#a6e22e>execute</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>operand</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>!=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>NEWARRAY</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// updates current and max stack sizes only for NEWARRAY</color>
        <color=#75715e>// (stack size variation = 0 for BIPUSH or SIPUSH)</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>stackSize</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>></color> <color=#f8f8f2>maxStackSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>maxStackSize</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>stackSize</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// adds the instruction to the bytecode of the method</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>SIPUSH</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>operand</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color> <color=#75715e>// BIPUSH or NEWARRAY</color>
      <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>put11</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>operand</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitVarInsn</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>var</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>lastCodeOffset</color> <color=#f92672>=</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#75715e>// Label currentBlock = this.currentBlock;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentBlock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compute</color> <color=#f92672>==</color> <color=#f8f8f2>FRAMES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>currentBlock</color><color=#f8f8f2>.</color><color=#a6e22e>frame</color><color=#f8f8f2>.</color><color=#a6e22e>execute</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>var</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>// updates current and max stack sizes</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>RET</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>// no stack change, but end of current block (no successor)</color>
          <color=#f8f8f2>currentBlock</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>|=</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>RET</color><color=#f8f8f2>;</color>
          <color=#75715e>// save 'stackSize' here for future use</color>
          <color=#75715e>// (see {@link #findSubroutineSuccessors})</color>
          <color=#f8f8f2>currentBlock</color><color=#f8f8f2>.</color><color=#a6e22e>inputStackTop</color> <color=#f92672>=</color> <color=#f8f8f2>stackSize</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>noSuccessor</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color> <color=#75715e>// xLOAD or xSTORE</color>
          <color=#66d9ef>int</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>stackSize</color> <color=#f92672>+</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>SIZE</color><color=#f92672>[</color><color=#f8f8f2>opcode</color><color=#f92672>]</color><color=#f8f8f2>;</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>></color> <color=#f8f8f2>maxStackSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>maxStackSize</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>stackSize</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compute</color> <color=#f92672>!=</color> <color=#f8f8f2>NOTHING</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>// updates max locals</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>LLOAD</color>
          <color=#f92672>||</color> <color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>DLOAD</color>
          <color=#f92672>||</color> <color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>LSTORE</color>
          <color=#f92672>||</color> <color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>DSTORE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#66d9ef>var</color> <color=#960050>+ 2;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#66d9ef>var</color> <color=#960050>+ 1;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672>></color> <color=#f8f8f2>maxLocals</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>maxLocals</color> <color=#f92672>=</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// adds the instruction to the bytecode of the method</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#66d9ef>var</color> <color=#960050>< 4 && </color><color=#f8f8f2>opcode</color> <color=#f92672>!=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>RET</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>opt</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672><</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ISTORE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* ILOAD_0 */</color>
        <color=#f8f8f2>opt</color> <color=#f92672>=</color> <color=#ae81ff>26</color> <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>opcode</color> <color=#f92672>-</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ILOAD</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>var</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/* ISTORE_0 */</color>
        <color=#f8f8f2>opt</color> <color=#f92672>=</color> <color=#ae81ff>59</color> <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>opcode</color> <color=#f92672>-</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ISTORE</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>var</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>opt</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#66d9ef>var</color> <color=#960050>>= 256) {</color>
      <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#ae81ff>196</color> <color=#75715e>/* WIDE */</color><color=#f8f8f2>).</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>var</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>put11</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>var</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>>=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ISTORE</color> <color=#f92672>&&</color> <color=#f8f8f2>compute</color> <color=#f92672>==</color> <color=#f8f8f2>FRAMES</color> <color=#f92672>&&</color> <color=#f8f8f2>handlerCount</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>visitLabel</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitTypeInsn</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>lastCodeOffset</color> <color=#f92672>=</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Item</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newClassItem</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>);</color>
    <color=#75715e>// Label currentBlock = this.currentBlock;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentBlock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compute</color> <color=#f92672>==</color> <color=#f8f8f2>FRAMES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>currentBlock</color><color=#f8f8f2>.</color><color=#a6e22e>frame</color><color=#f8f8f2>.</color><color=#a6e22e>execute</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>NEW</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// updates current and max stack sizes only if opcode == NEW</color>
        <color=#75715e>// (no stack change for ANEWARRAY, CHECKCAST, INSTANCEOF)</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>stackSize</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>></color> <color=#f8f8f2>maxStackSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>maxStackSize</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>stackSize</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// adds the instruction to the bytecode of the method</color>
    <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitFieldInsn</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>lastCodeOffset</color> <color=#f92672>=</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Item</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newFieldItem</color><color=#f8f8f2>(</color><color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>);</color>
    <color=#75715e>// Label currentBlock = this.currentBlock;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentBlock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compute</color> <color=#f92672>==</color> <color=#f8f8f2>FRAMES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>currentBlock</color><color=#f8f8f2>.</color><color=#a6e22e>frame</color><color=#f8f8f2>.</color><color=#a6e22e>execute</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
        <color=#75715e>// computes the stack size variation</color>
        <color=#66d9ef>char</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>desc</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>GETSTATIC</color><color=#f8f8f2>:</color>
            <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>stackSize</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#e6db74>'D'</color> <color=#f92672>||</color> <color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#e6db74>'J'</color> <color=#f92672>?</color> <color=#ae81ff>2</color> <color=#f8f8f2>:</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>PUTSTATIC</color><color=#f8f8f2>:</color>
            <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>stackSize</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#e6db74>'D'</color> <color=#f92672>||</color> <color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#e6db74>'J'</color> <color=#f92672>?</color> <color=#f92672>-</color><color=#ae81ff>2</color> <color=#f8f8f2>:</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>GETFIELD</color><color=#f8f8f2>:</color>
            <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>stackSize</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#e6db74>'D'</color> <color=#f92672>||</color> <color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#e6db74>'J'</color> <color=#f92672>?</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#75715e>// case Constants.PUTFIELD:</color>
          <color=#66d9ef>default</color><color=#f8f8f2>:</color>
            <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>stackSize</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#e6db74>'D'</color> <color=#f92672>||</color> <color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#e6db74>'J'</color> <color=#f92672>?</color> <color=#f92672>-</color><color=#ae81ff>3</color> <color=#f8f8f2>:</color> <color=#f92672>-</color><color=#ae81ff>2</color><color=#f8f8f2>);</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>// updates current and max stack sizes</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>></color> <color=#f8f8f2>maxStackSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>maxStackSize</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>stackSize</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// adds the instruction to the bytecode of the method</color>
    <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitMethodInsn</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>opcode</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>owner</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>itf</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>lastCodeOffset</color> <color=#f92672>=</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Item</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newMethodItem</color><color=#f8f8f2>(</color><color=#f8f8f2>owner</color><color=#f8f8f2>,</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>itf</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>argSize</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>intVal</color><color=#f8f8f2>;</color>
    <color=#75715e>// Label currentBlock = this.currentBlock;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentBlock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compute</color> <color=#f92672>==</color> <color=#f8f8f2>FRAMES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>currentBlock</color><color=#f8f8f2>.</color><color=#a6e22e>frame</color><color=#f8f8f2>.</color><color=#a6e22e>execute</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * computes the stack size variation. In order not to recompute</color>
<color=#75715e>         * several times this variation for the same Item, we use the</color>
<color=#75715e>         * intVal field of this item to store this variation, once it</color>
<color=#75715e>         * has been computed. More precisely this intVal field stores</color>
<color=#75715e>         * the sizes of the arguments and of the return value</color>
<color=#75715e>         * corresponding to desc.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>argSize</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>// the above sizes have not been computed yet,</color>
          <color=#75715e>// so we compute them...</color>
          <color=#f8f8f2>argSize</color> <color=#f92672>=</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>getArgumentsAndReturnSizes</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>);</color>
          <color=#75715e>// ... and we save them in order</color>
          <color=#75715e>// not to recompute them in the future</color>
          <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>intVal</color> <color=#f92672>=</color> <color=#f8f8f2>argSize</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>INVOKESTATIC</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>stackSize</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>argSize</color> <color=#f92672>>></color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>argSize</color> <color=#f92672>&</color> <color=#ae81ff>0x03</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>stackSize</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>argSize</color> <color=#f92672>>></color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>argSize</color> <color=#f92672>&</color> <color=#ae81ff>0x03</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>// updates current and max stack sizes</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>></color> <color=#f8f8f2>maxStackSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>maxStackSize</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>stackSize</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// adds the instruction to the bytecode of the method</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>INVOKEINTERFACE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>argSize</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>argSize</color> <color=#f92672>=</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>getArgumentsAndReturnSizes</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>intVal</color> <color=#f92672>=</color> <color=#f8f8f2>argSize</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>INVOKEINTERFACE</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f8f8f2>).</color><color=#a6e22e>put11</color><color=#f8f8f2>(</color><color=#f8f8f2>argSize</color> <color=#f92672>>></color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitInvokeDynamicInsn</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Handle</color> <color=#f8f8f2>bsm</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Object</color><color=#f8f8f2>...</color> <color=#f8f8f2>bsmArgs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>lastCodeOffset</color> <color=#f92672>=</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Item</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newInvokeDynamicItem</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>bsm</color><color=#f8f8f2>,</color> <color=#f8f8f2>bsmArgs</color><color=#f8f8f2>);</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>argSize</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>intVal</color><color=#f8f8f2>;</color>
    <color=#75715e>// Label currentBlock = this.currentBlock;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentBlock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compute</color> <color=#f92672>==</color> <color=#f8f8f2>FRAMES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>currentBlock</color><color=#f8f8f2>.</color><color=#a6e22e>frame</color><color=#f8f8f2>.</color><color=#a6e22e>execute</color><color=#f8f8f2>(</color><color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>INVOKEDYNAMIC</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * computes the stack size variation. In order not to recompute</color>
<color=#75715e>         * several times this variation for the same Item, we use the</color>
<color=#75715e>         * intVal field of this item to store this variation, once it</color>
<color=#75715e>         * has been computed. More precisely this intVal field stores</color>
<color=#75715e>         * the sizes of the arguments and of the return value</color>
<color=#75715e>         * corresponding to desc.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>argSize</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>// the above sizes have not been computed yet,</color>
          <color=#75715e>// so we compute them...</color>
          <color=#f8f8f2>argSize</color> <color=#f92672>=</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>getArgumentsAndReturnSizes</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>);</color>
          <color=#75715e>// ... and we save them in order</color>
          <color=#75715e>// not to recompute them in the future</color>
          <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>intVal</color> <color=#f92672>=</color> <color=#f8f8f2>argSize</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>stackSize</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>argSize</color> <color=#f92672>>></color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>argSize</color> <color=#f92672>&</color> <color=#ae81ff>0x03</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

        <color=#75715e>// updates current and max stack sizes</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>></color> <color=#f8f8f2>maxStackSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>maxStackSize</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>stackSize</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// adds the instruction to the bytecode of the method</color>
    <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>INVOKEDYNAMIC</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitJumpInsn</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Label</color> <color=#f8f8f2>label</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>lastCodeOffset</color> <color=#f92672>=</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Label</color> <color=#f8f8f2>nextInsn</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#75715e>// Label currentBlock = this.currentBlock;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentBlock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compute</color> <color=#f92672>==</color> <color=#f8f8f2>FRAMES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>currentBlock</color><color=#f8f8f2>.</color><color=#a6e22e>frame</color><color=#f8f8f2>.</color><color=#a6e22e>execute</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#75715e>// 'label' is the target of a jump instruction</color>
        <color=#f8f8f2>label</color><color=#f8f8f2>.</color><color=#a6e22e>getFirst</color><color=#f8f8f2>().</color><color=#a6e22e>status</color> <color=#f92672>|=</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>TARGET</color><color=#f8f8f2>;</color>
        <color=#75715e>// adds 'label' as a successor of this basic block</color>
        <color=#f8f8f2>addSuccessor</color><color=#f8f8f2>(</color><color=#f8f8f2>Edge</color><color=#f8f8f2>.</color><color=#a6e22e>NORMAL</color><color=#f8f8f2>,</color> <color=#f8f8f2>label</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>!=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>GOTO</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>// creates a Label for the next basic block</color>
          <color=#f8f8f2>nextInsn</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>JSR</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>label</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>&</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>SUBROUTINE</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>label</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>|=</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>SUBROUTINE</color><color=#f8f8f2>;</color>
            <color=#f92672>++</color><color=#f8f8f2>subroutines</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>currentBlock</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>|=</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>JSR</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>addSuccessor</color><color=#f8f8f2>(</color><color=#f8f8f2>stackSize</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>label</color><color=#f8f8f2>);</color>
          <color=#75715e>// creates a Label for the next basic block</color>
          <color=#f8f8f2>nextInsn</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f8f8f2>();</color>
          <color=#75715e>/*</color>
<color=#75715e>           * note that, by construction in this method, a JSR block</color>
<color=#75715e>           * has at least two successors in the control flow graph:</color>
<color=#75715e>           * the first one leads the next instruction after the JSR,</color>
<color=#75715e>           * while the second one leads to the JSR target.</color>
<color=#75715e>           */</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#75715e>// updates current stack size (max stack size unchanged</color>
          <color=#75715e>// because stack size variation always negative in this</color>
          <color=#75715e>// case)</color>
          <color=#f8f8f2>stackSize</color> <color=#f92672>+=</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>SIZE</color><color=#f92672>[</color><color=#f8f8f2>opcode</color><color=#f92672>]</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>addSuccessor</color><color=#f8f8f2>(</color><color=#f8f8f2>stackSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>label</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// adds the instruction to the bytecode of the method</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>label</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>&</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>RESOLVED</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>label</color><color=#f8f8f2>.</color><color=#a6e22e>position</color> <color=#f92672>-</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672><</color> <color=#f8f8f2>Short</color><color=#f8f8f2>.</color><color=#a6e22e>MIN_VALUE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * case of a backward jump with an offset < -32768. In this case we</color>
<color=#75715e>       * automatically replace GOTO with GOTO_W, JSR with JSR_W and IFxxx</color>
<color=#75715e>       * <l> with IFNOTxxx <l'> GOTO_W <l>, where IFNOTxxx is the</color>
<color=#75715e>       * "opposite" opcode of IFxxx (i.e., IFNE for IFEQ) and where <l'></color>
<color=#75715e>       * designates the instruction just after the GOTO_W.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>GOTO</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#ae81ff>200</color><color=#f8f8f2>);</color> <color=#75715e>// GOTO_W</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>JSR</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#ae81ff>201</color><color=#f8f8f2>);</color> <color=#75715e>// JSR_W</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>// if the IF instruction is transformed into IFNOT GOTO_W the</color>
        <color=#75715e>// next instruction becomes the target of the IFNOT instruction</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nextInsn</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>nextInsn</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>|=</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>TARGET</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672><=</color> <color=#ae81ff>166</color> <color=#f92672>?</color> <color=#f8f8f2>((</color><color=#f8f8f2>opcode</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>^</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#f8f8f2>opcode</color> <color=#f92672>^</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#ae81ff>8</color><color=#f8f8f2>);</color> <color=#75715e>// jump offset</color>
        <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#ae81ff>200</color><color=#f8f8f2>);</color> <color=#75715e>// GOTO_W</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>label</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>code</color><color=#f8f8f2>,</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * case of a backward jump with an offset >= -32768, or of a forward</color>
<color=#75715e>       * jump with, of course, an unknown offset. In these cases we store</color>
<color=#75715e>       * the offset in 2 bytes (which will be increased in</color>
<color=#75715e>       * resizeInstructions, if needed).</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>label</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>code</color><color=#f8f8f2>,</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentBlock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nextInsn</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// if the jump instruction is not a GOTO, the next instruction</color>
        <color=#75715e>// is also a successor of this instruction. Calling visitLabel</color>
        <color=#75715e>// adds the label of this next instruction as a successor of the</color>
        <color=#75715e>// current block, and starts a new basic block</color>
        <color=#f8f8f2>visitLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>nextInsn</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>GOTO</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>noSuccessor</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitLabel</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Label</color> <color=#f8f8f2>label</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>// resolves previous forward references to label, if any</color>
    <color=#f8f8f2>resize</color> <color=#f92672>|=</color> <color=#f8f8f2>label</color><color=#f8f8f2>.</color><color=#a6e22e>resolve</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>);</color>
    <color=#75715e>// updates currentBlock</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>label</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>&</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>DEBUG</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compute</color> <color=#f92672>==</color> <color=#f8f8f2>FRAMES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentBlock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>label</color><color=#f8f8f2>.</color><color=#a6e22e>position</color> <color=#f92672>==</color> <color=#f8f8f2>currentBlock</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>// successive labels, do not start a new basic block</color>
          <color=#f8f8f2>currentBlock</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>|=</color> <color=#f8f8f2>(</color><color=#f8f8f2>label</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>&</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>TARGET</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>label</color><color=#f8f8f2>.</color><color=#a6e22e>frame</color> <color=#f92672>=</color> <color=#f8f8f2>currentBlock</color><color=#f8f8f2>.</color><color=#a6e22e>frame</color><color=#f8f8f2>;</color>
          <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>// ends current block (with one new successor)</color>
        <color=#f8f8f2>addSuccessor</color><color=#f8f8f2>(</color><color=#f8f8f2>Edge</color><color=#f8f8f2>.</color><color=#a6e22e>NORMAL</color><color=#f8f8f2>,</color> <color=#f8f8f2>label</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#75715e>// begins a new current block</color>
      <color=#f8f8f2>currentBlock</color> <color=#f92672>=</color> <color=#f8f8f2>label</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>label</color><color=#f8f8f2>.</color><color=#a6e22e>frame</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>label</color><color=#f8f8f2>.</color><color=#a6e22e>frame</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>label</color><color=#f8f8f2>.</color><color=#a6e22e>frame</color><color=#f8f8f2>.</color><color=#a6e22e>owner</color> <color=#f92672>=</color> <color=#f8f8f2>label</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#75715e>// updates the basic block list</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>previousBlock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>label</color><color=#f8f8f2>.</color><color=#a6e22e>position</color> <color=#f92672>==</color> <color=#f8f8f2>previousBlock</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>previousBlock</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>|=</color> <color=#f8f8f2>(</color><color=#f8f8f2>label</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>&</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>TARGET</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>label</color><color=#f8f8f2>.</color><color=#a6e22e>frame</color> <color=#f92672>=</color> <color=#f8f8f2>previousBlock</color><color=#f8f8f2>.</color><color=#a6e22e>frame</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>currentBlock</color> <color=#f92672>=</color> <color=#f8f8f2>previousBlock</color><color=#f8f8f2>;</color>
          <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>previousBlock</color><color=#f8f8f2>.</color><color=#a6e22e>successor</color> <color=#f92672>=</color> <color=#f8f8f2>label</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>previousBlock</color> <color=#f92672>=</color> <color=#f8f8f2>label</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compute</color> <color=#f92672>==</color> <color=#f8f8f2>MAXS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentBlock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// ends current block (with one new successor)</color>
        <color=#f8f8f2>currentBlock</color><color=#f8f8f2>.</color><color=#a6e22e>outputStackMax</color> <color=#f92672>=</color> <color=#f8f8f2>maxStackSize</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>addSuccessor</color><color=#f8f8f2>(</color><color=#f8f8f2>stackSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>label</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#75715e>// begins a new current block</color>
      <color=#f8f8f2>currentBlock</color> <color=#f92672>=</color> <color=#f8f8f2>label</color><color=#f8f8f2>;</color>
      <color=#75715e>// resets the relative current and max stack sizes</color>
      <color=#f8f8f2>stackSize</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>maxStackSize</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#75715e>// updates the basic block list</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>previousBlock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>previousBlock</color><color=#f8f8f2>.</color><color=#a6e22e>successor</color> <color=#f92672>=</color> <color=#f8f8f2>label</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>previousBlock</color> <color=#f92672>=</color> <color=#f8f8f2>label</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitLdcInsn</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>cst</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>lastCodeOffset</color> <color=#f92672>=</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Item</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newConstItem</color><color=#f8f8f2>(</color><color=#f8f8f2>cst</color><color=#f8f8f2>);</color>
    <color=#75715e>// Label currentBlock = this.currentBlock;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentBlock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compute</color> <color=#f92672>==</color> <color=#f8f8f2>FRAMES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>currentBlock</color><color=#f8f8f2>.</color><color=#a6e22e>frame</color><color=#f8f8f2>.</color><color=#a6e22e>execute</color><color=#f8f8f2>(</color><color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>LDC</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
        <color=#75715e>// computes the stack size variation</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>type</color> <color=#f92672>==</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LONG</color> <color=#f92672>||</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>type</color> <color=#f92672>==</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>DOUBLE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>stackSize</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>stackSize</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>// updates current and max stack sizes</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>></color> <color=#f8f8f2>maxStackSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>maxStackSize</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>stackSize</color> <color=#f92672>=</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// adds the instruction to the bytecode of the method</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>type</color> <color=#f92672>==</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LONG</color> <color=#f92672>||</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>type</color> <color=#f92672>==</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>DOUBLE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#ae81ff>20</color> <color=#75715e>/* LDC2_W */</color><color=#f8f8f2>,</color> <color=#f8f8f2>index</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>>=</color> <color=#ae81ff>256</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#ae81ff>19</color> <color=#75715e>/* LDC_W */</color><color=#f8f8f2>,</color> <color=#f8f8f2>index</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>put11</color><color=#f8f8f2>(</color><color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>LDC</color><color=#f8f8f2>,</color> <color=#f8f8f2>index</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitIincInsn</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>var</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>increment</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>lastCodeOffset</color> <color=#f92672>=</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentBlock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compute</color> <color=#f92672>==</color> <color=#f8f8f2>FRAMES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>currentBlock</color><color=#f8f8f2>.</color><color=#a6e22e>frame</color><color=#f8f8f2>.</color><color=#a6e22e>execute</color><color=#f8f8f2>(</color><color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>IINC</color><color=#f8f8f2>,</color> <color=#f8f8f2>var</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compute</color> <color=#f92672>!=</color> <color=#f8f8f2>NOTHING</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>// updates max locals</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#66d9ef>var</color> <color=#960050>+ 1;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672>></color> <color=#f8f8f2>maxLocals</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>maxLocals</color> <color=#f92672>=</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// adds the instruction to the bytecode of the method</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#66d9ef>var</color> <color=#960050>> 255) || (</color><color=#f8f8f2>increment</color> <color=#f92672>></color> <color=#ae81ff>127</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>increment</color> <color=#f92672><</color> <color=#f92672>-</color><color=#ae81ff>128</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#ae81ff>196</color> <color=#75715e>/* WIDE */</color><color=#f8f8f2>).</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>IINC</color><color=#f8f8f2>,</color> <color=#f8f8f2>var</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>increment</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>IINC</color><color=#f8f8f2>).</color><color=#a6e22e>put11</color><color=#f8f8f2>(</color><color=#f8f8f2>var</color><color=#f8f8f2>,</color> <color=#f8f8f2>increment</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitTableSwitchInsn</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>min</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>max</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Label</color> <color=#f8f8f2>dflt</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Label</color><color=#f8f8f2>...</color> <color=#f8f8f2>labels</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>lastCodeOffset</color> <color=#f92672>=</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#75715e>// adds the instruction to the bytecode of the method</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>source</color> <color=#f92672>=</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>TABLESWITCH</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#ae81ff>4</color> <color=#f92672>-</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>%</color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>dflt</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>code</color><color=#f8f8f2>,</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>min</color><color=#f8f8f2>).</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>max</color><color=#f8f8f2>);</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>labels</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>code</color><color=#f8f8f2>,</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// updates currentBlock</color>
    <color=#f8f8f2>visitSwitchInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>dflt</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitLookupSwitchInsn</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Label</color> <color=#f8f8f2>dflt</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>keys</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Label</color><color=#f92672>[]</color> <color=#f8f8f2>labels</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>lastCodeOffset</color> <color=#f92672>=</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#75715e>// adds the instruction to the bytecode of the method</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>source</color> <color=#f92672>=</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>LOOKUPSWITCH</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#ae81ff>4</color> <color=#f92672>-</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>%</color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>dflt</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>code</color><color=#f8f8f2>,</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>labels</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>labels</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>keys</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>code</color><color=#f8f8f2>,</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// updates currentBlock</color>
    <color=#f8f8f2>visitSwitchInsn</color><color=#f8f8f2>(</color><color=#f8f8f2>dflt</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>visitSwitchInsn</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Label</color> <color=#f8f8f2>dflt</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Label</color><color=#f92672>[]</color> <color=#f8f8f2>labels</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>// Label currentBlock = this.currentBlock;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentBlock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compute</color> <color=#f92672>==</color> <color=#f8f8f2>FRAMES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>currentBlock</color><color=#f8f8f2>.</color><color=#a6e22e>frame</color><color=#f8f8f2>.</color><color=#a6e22e>execute</color><color=#f8f8f2>(</color><color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>LOOKUPSWITCH</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#75715e>// adds current block successors</color>
        <color=#f8f8f2>addSuccessor</color><color=#f8f8f2>(</color><color=#f8f8f2>Edge</color><color=#f8f8f2>.</color><color=#a6e22e>NORMAL</color><color=#f8f8f2>,</color> <color=#f8f8f2>dflt</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>dflt</color><color=#f8f8f2>.</color><color=#a6e22e>getFirst</color><color=#f8f8f2>().</color><color=#a6e22e>status</color> <color=#f92672>|=</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>TARGET</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>labels</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>addSuccessor</color><color=#f8f8f2>(</color><color=#f8f8f2>Edge</color><color=#f8f8f2>.</color><color=#a6e22e>NORMAL</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getFirst</color><color=#f8f8f2>().</color><color=#a6e22e>status</color> <color=#f92672>|=</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>TARGET</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>// updates current stack size (max stack size unchanged)</color>
        <color=#f92672>--</color><color=#f8f8f2>stackSize</color><color=#f8f8f2>;</color>
        <color=#75715e>// adds current block successors</color>
        <color=#f8f8f2>addSuccessor</color><color=#f8f8f2>(</color><color=#f8f8f2>stackSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>dflt</color><color=#f8f8f2>);</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>labels</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>addSuccessor</color><color=#f8f8f2>(</color><color=#f8f8f2>stackSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#75715e>// ends current block</color>
      <color=#f8f8f2>noSuccessor</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitMultiANewArrayInsn</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>dims</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>lastCodeOffset</color> <color=#f92672>=</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Item</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newClassItem</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>);</color>
    <color=#75715e>// Label currentBlock = this.currentBlock;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentBlock</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compute</color> <color=#f92672>==</color> <color=#f8f8f2>FRAMES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>currentBlock</color><color=#f8f8f2>.</color><color=#a6e22e>frame</color><color=#f8f8f2>.</color><color=#a6e22e>execute</color><color=#f8f8f2>(</color><color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>MULTIANEWARRAY</color><color=#f8f8f2>,</color> <color=#f8f8f2>dims</color><color=#f8f8f2>,</color> <color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#75715e>// updates current stack size (max stack size unchanged because</color>
        <color=#75715e>// stack size variation always negative or null)</color>
        <color=#f8f8f2>stackSize</color> <color=#f92672>+=</color> <color=#ae81ff>1</color> <color=#f92672>-</color> <color=#f8f8f2>dims</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// adds the instruction to the bytecode of the method</color>
    <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>put12</color><color=#f8f8f2>(</color><color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>MULTIANEWARRAY</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f8f8f2>).</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>dims</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitInsnAnnotation</color><color=#f8f8f2>(</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>TypePath</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>bv</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteVector</color><color=#f8f8f2>();</color>
    <color=#75715e>// write target_type and target_info</color>
    <color=#f8f8f2>typeRef</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>typeRef</color> <color=#f92672>&</color> <color=#ae81ff>0xFF0000FF</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>lastCodeOffset</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>AnnotationWriter</color><color=#f8f8f2>.</color><color=#a6e22e>putTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>);</color>
    <color=#75715e>// write type, and reserve space for values count</color>
    <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>)).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>AnnotationWriter</color> <color=#f8f8f2>aw</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AnnotationWriter</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>ctanns</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>ctanns</color> <color=#f92672>=</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>ictanns</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>ictanns</color> <color=#f92672>=</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitTryCatchBlock</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Label</color> <color=#f8f8f2>start</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Label</color> <color=#f8f8f2>end</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Label</color> <color=#f8f8f2>handler</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f92672>++</color><color=#f8f8f2>handlerCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Handler</color> <color=#f8f8f2>h</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Handler</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>h</color><color=#f8f8f2>.</color><color=#a6e22e>start</color> <color=#f92672>=</color> <color=#f8f8f2>start</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>h</color><color=#f8f8f2>.</color><color=#a6e22e>end</color> <color=#f92672>=</color> <color=#f8f8f2>end</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>h</color><color=#f8f8f2>.</color><color=#a6e22e>handler</color> <color=#f92672>=</color> <color=#f8f8f2>handler</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>h</color><color=#f8f8f2>.</color><color=#a6e22e>desc</color> <color=#f92672>=</color> <color=#f8f8f2>type</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>h</color><color=#f8f8f2>.</color><color=#a6e22e>type</color> <color=#f92672>=</color> <color=#f8f8f2>type</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newClass</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lastHandler</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>firstHandler</color> <color=#f92672>=</color> <color=#f8f8f2>h</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>lastHandler</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>h</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>lastHandler</color> <color=#f92672>=</color> <color=#f8f8f2>h</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitTryCatchAnnotation</color><color=#f8f8f2>(</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>TypePath</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>bv</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteVector</color><color=#f8f8f2>();</color>
    <color=#75715e>// write target_type and target_info</color>
    <color=#f8f8f2>AnnotationWriter</color><color=#f8f8f2>.</color><color=#a6e22e>putTarget</color><color=#f8f8f2>(</color><color=#f8f8f2>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>);</color>
    <color=#75715e>// write type, and reserve space for values count</color>
    <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>)).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>AnnotationWriter</color> <color=#f8f8f2>aw</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AnnotationWriter</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>ctanns</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>ctanns</color> <color=#f92672>=</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>ictanns</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>ictanns</color> <color=#f92672>=</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitLocalVariable</color><color=#f8f8f2>(</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>signature</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Label</color> <color=#f8f8f2>start</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#f8f8f2>Label</color> <color=#f8f8f2>end</color><color=#f8f8f2>,</color>
      <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>signature</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>localVarType</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>localVarType</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteVector</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#f92672>++</color><color=#f8f8f2>localVarTypeCount</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>localVarType</color>
          <color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>start</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>)</color>
          <color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>end</color><color=#f8f8f2>.</color><color=#a6e22e>position</color> <color=#f92672>-</color> <color=#f8f8f2>start</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>)</color>
          <color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>))</color>
          <color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>signature</color><color=#f8f8f2>))</color>
          <color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>localVar</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>localVar</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteVector</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f92672>++</color><color=#f8f8f2>localVarCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>localVar</color>
        <color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>start</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>)</color>
        <color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>end</color><color=#f8f8f2>.</color><color=#a6e22e>position</color> <color=#f92672>-</color> <color=#f8f8f2>start</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>)</color>
        <color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>))</color>
        <color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>))</color>
        <color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compute</color> <color=#f92672>!=</color> <color=#f8f8f2>NOTHING</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>// updates max locals</color>
      <color=#66d9ef>char</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>desc</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#e6db74>'J'</color> <color=#f92672>||</color> <color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#e6db74>'D'</color> <color=#f92672>?</color> <color=#ae81ff>2</color> <color=#f8f8f2>:</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672>></color> <color=#f8f8f2>maxLocals</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>maxLocals</color> <color=#f92672>=</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitLocalVariableAnnotation</color><color=#f8f8f2>(</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>typeRef</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>TypePath</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Label</color><color=#f92672>[]</color> <color=#f8f8f2>start</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>Label</color><color=#f92672>[]</color> <color=#f8f8f2>end</color><color=#f8f8f2>,</color>
      <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>index</color><color=#f8f8f2>,</color>
      <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color>
      <color=#66d9ef>boolean</color> <color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>bv</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteVector</color><color=#f8f8f2>();</color>
    <color=#75715e>// write target_type and target_info</color>
    <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>typeRef</color> <color=#f92672>>>></color> <color=#ae81ff>24</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>start</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>start</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>start</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>)</color>
          <color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>end</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>position</color> <color=#f92672>-</color> <color=#f8f8f2>start</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>)</color>
          <color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>typePath</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>.</color><color=#a6e22e>b</color><color=#f92672>[</color><color=#f8f8f2>typePath</color><color=#f8f8f2>.</color><color=#a6e22e>offset</color><color=#f92672>]</color> <color=#f92672>*</color> <color=#ae81ff>2</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>typePath</color><color=#f8f8f2>.</color><color=#a6e22e>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>.</color><color=#a6e22e>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// write type, and reserve space for values count</color>
    <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>)).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>AnnotationWriter</color> <color=#f8f8f2>aw</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AnnotationWriter</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>,</color> <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>ctanns</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>ctanns</color> <color=#f92672>=</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>aw</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>ictanns</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>ictanns</color> <color=#f92672>=</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>aw</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitLineNumber</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>line</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Label</color> <color=#f8f8f2>start</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lineNumber</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>lineNumber</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteVector</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f92672>++</color><color=#f8f8f2>lineNumberCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>lineNumber</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>start</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>lineNumber</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>line</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitMaxs</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxStack</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxLocals</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>resize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>// replaces the temporary jump opcodes introduced by Label.resolve.</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>RESIZE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>resizeInstructions</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>RuntimeException</color><color=#f8f8f2>(</color><color=#e6db74>"Method code too large!"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>FRAMES</color> <color=#f92672>&&</color> <color=#f8f8f2>compute</color> <color=#f92672>==</color> <color=#f8f8f2>FRAMES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>// completes the control flow graph with exception handler blocks</color>
      <color=#f8f8f2>Handler</color> <color=#f8f8f2>handler</color> <color=#f92672>=</color> <color=#f8f8f2>firstHandler</color><color=#f8f8f2>;</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>handler</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Label</color> <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#f8f8f2>handler</color><color=#f8f8f2>.</color><color=#a6e22e>start</color><color=#f8f8f2>.</color><color=#a6e22e>getFirst</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>Label</color> <color=#f8f8f2>h</color> <color=#f92672>=</color> <color=#f8f8f2>handler</color><color=#f8f8f2>.</color><color=#a6e22e>handler</color><color=#f8f8f2>.</color><color=#a6e22e>getFirst</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>Label</color> <color=#f8f8f2>e</color> <color=#f92672>=</color> <color=#f8f8f2>handler</color><color=#f8f8f2>.</color><color=#a6e22e>end</color><color=#f8f8f2>.</color><color=#a6e22e>getFirst</color><color=#f8f8f2>();</color>
        <color=#75715e>// computes the kind of the edges to 'h'</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>handler</color><color=#f8f8f2>.</color><color=#a6e22e>desc</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#e6db74>"java/lang/Throwable"</color> <color=#f8f8f2>:</color> <color=#f8f8f2>handler</color><color=#f8f8f2>.</color><color=#a6e22e>desc</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>kind</color> <color=#f92672>=</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>OBJECT</color> <color=#f92672>|</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>addType</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>);</color>
        <color=#75715e>// h is an exception handler</color>
        <color=#f8f8f2>h</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>|=</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>TARGET</color><color=#f8f8f2>;</color>
        <color=#75715e>// adds 'h' as a successor of labels between 'start' and 'end'</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>l</color> <color=#f92672>!=</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>// creates an edge to 'h'</color>
          <color=#f8f8f2>Edge</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Edge</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>info</color> <color=#f92672>=</color> <color=#f8f8f2>kind</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>successor</color> <color=#f92672>=</color> <color=#f8f8f2>h</color><color=#f8f8f2>;</color>
          <color=#75715e>// adds it to the successors of 'l'</color>
          <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>successors</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>successors</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
          <color=#75715e>// goes to the next label</color>
          <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>successor</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>handler</color> <color=#f92672>=</color> <color=#f8f8f2>handler</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>// creates and visits the first (implicit) frame</color>
      <color=#f8f8f2>Frame</color> <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#f8f8f2>labels</color><color=#f8f8f2>.</color><color=#a6e22e>frame</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>Type</color><color=#f92672>[]</color> <color=#f8f8f2>args</color> <color=#f92672>=</color> <color=#f8f8f2>Type</color><color=#f8f8f2>.</color><color=#a6e22e>getArgumentTypes</color><color=#f8f8f2>(</color><color=#f8f8f2>descriptor</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>f</color><color=#f8f8f2>.</color><color=#a6e22e>initInputFrame</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#f8f8f2>access</color><color=#f8f8f2>,</color> <color=#f8f8f2>args</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>maxLocals</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>visitFrame</color><color=#f8f8f2>(</color><color=#f8f8f2>f</color><color=#f8f8f2>);</color>

      <color=#75715e>/*</color>
<color=#75715e>       * fix point algorithm: mark the first basic block as 'changed'</color>
<color=#75715e>       * (i.e. put it in the 'changed' list) and, while there are changed</color>
<color=#75715e>       * basic blocks, choose one, mark it as unchanged, and update its</color>
<color=#75715e>       * successors (which can be changed in the process).</color>
<color=#75715e>       */</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>max</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>Label</color> <color=#f8f8f2>changed</color> <color=#f92672>=</color> <color=#f8f8f2>labels</color><color=#f8f8f2>;</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>changed</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// removes a basic block from the list of changed basic blocks</color>
        <color=#f8f8f2>Label</color> <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#f8f8f2>changed</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>changed</color> <color=#f92672>=</color> <color=#f8f8f2>changed</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>frame</color><color=#f8f8f2>;</color>
        <color=#75715e>// a reachable jump target must be stored in the stack map</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>&</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>TARGET</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>|=</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>STORE</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>// all visited labels are reachable, by definition</color>
        <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>|=</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>REACHABLE</color><color=#f8f8f2>;</color>
        <color=#75715e>// updates the (absolute) maximum stack size</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>blockMax</color> <color=#f92672>=</color> <color=#f8f8f2>f</color><color=#f8f8f2>.</color><color=#a6e22e>inputStack</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>outputStackMax</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>blockMax</color> <color=#f92672>></color> <color=#f8f8f2>max</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>max</color> <color=#f92672>=</color> <color=#f8f8f2>blockMax</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>// updates the successors of the current basic block</color>
        <color=#f8f8f2>Edge</color> <color=#f8f8f2>e</color> <color=#f92672>=</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>successors</color><color=#f8f8f2>;</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>e</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>Label</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>successor</color><color=#f8f8f2>.</color><color=#a6e22e>getFirst</color><color=#f8f8f2>();</color>
          <color=#66d9ef>boolean</color> <color=#f8f8f2>change</color> <color=#f92672>=</color> <color=#f8f8f2>f</color><color=#f8f8f2>.</color><color=#a6e22e>merge</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>frame</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>);</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>change</color> <color=#f92672>&&</color> <color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// if n has changed and is not already in the 'changed'</color>
            <color=#75715e>// list, adds it to this list</color>
            <color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>changed</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>changed</color> <color=#f92672>=</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>e</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>// visits all the frames that must be stored in the stack map</color>
      <color=#f8f8f2>Label</color> <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#f8f8f2>labels</color><color=#f8f8f2>;</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>l</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>frame</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>&</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>STORE</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>visitFrame</color><color=#f8f8f2>(</color><color=#f8f8f2>f</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>&</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>REACHABLE</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>// finds start and end of dead basic block</color>
          <color=#f8f8f2>Label</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>successor</color><color=#f8f8f2>;</color>
          <color=#66d9ef>int</color> <color=#f8f8f2>start</color> <color=#f92672>=</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>;</color>
          <color=#66d9ef>int</color> <color=#f8f8f2>end</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>k</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f8f8f2>:</color> <color=#f8f8f2>k</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
          <color=#75715e>// if non empty basic block</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>end</color> <color=#f92672>>=</color> <color=#f8f8f2>start</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>max</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>max</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
            <color=#75715e>// replaces instructions with NOP ... NOP ATHROW</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>start</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>end</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>NOP</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f92672>[</color><color=#f8f8f2>end</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ATHROW</color><color=#f8f8f2>;</color>
            <color=#75715e>// emits a frame for this unreachable block</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>frameIndex</color> <color=#f92672>=</color> <color=#f8f8f2>startFrame</color><color=#f8f8f2>(</color><color=#f8f8f2>start</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>frameIndex</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>OBJECT</color> <color=#f92672>|</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>addType</color><color=#f8f8f2>(</color><color=#e6db74>"java/lang/Throwable"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>endFrame</color><color=#f8f8f2>();</color>
            <color=#75715e>// removes the start-end range from the exception</color>
            <color=#75715e>// handlers</color>
            <color=#f8f8f2>firstHandler</color> <color=#f92672>=</color> <color=#f8f8f2>Handler</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>firstHandler</color><color=#f8f8f2>,</color> <color=#f8f8f2>l</color><color=#f8f8f2>,</color> <color=#f8f8f2>k</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>successor</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#f8f8f2>handler</color> <color=#f92672>=</color> <color=#f8f8f2>firstHandler</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>handlerCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>handler</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>handlerCount</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>handler</color> <color=#f92672>=</color> <color=#f8f8f2>handler</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>maxStack</color> <color=#f92672>=</color> <color=#f8f8f2>max</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compute</color> <color=#f92672>==</color> <color=#f8f8f2>MAXS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>// completes the control flow graph with exception handler blocks</color>
      <color=#f8f8f2>Handler</color> <color=#f8f8f2>handler</color> <color=#f92672>=</color> <color=#f8f8f2>firstHandler</color><color=#f8f8f2>;</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>handler</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Label</color> <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#f8f8f2>handler</color><color=#f8f8f2>.</color><color=#a6e22e>start</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>Label</color> <color=#f8f8f2>h</color> <color=#f92672>=</color> <color=#f8f8f2>handler</color><color=#f8f8f2>.</color><color=#a6e22e>handler</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>Label</color> <color=#f8f8f2>e</color> <color=#f92672>=</color> <color=#f8f8f2>handler</color><color=#f8f8f2>.</color><color=#a6e22e>end</color><color=#f8f8f2>;</color>
        <color=#75715e>// adds 'h' as a successor of labels between 'start' and 'end'</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>l</color> <color=#f92672>!=</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>// creates an edge to 'h'</color>
          <color=#f8f8f2>Edge</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Edge</color><color=#f8f8f2>();</color>
          <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>info</color> <color=#f92672>=</color> <color=#f8f8f2>Edge</color><color=#f8f8f2>.</color><color=#a6e22e>EXCEPTION</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>successor</color> <color=#f92672>=</color> <color=#f8f8f2>h</color><color=#f8f8f2>;</color>
          <color=#75715e>// adds it to the successors of 'l'</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>&</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>JSR</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>successors</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>successors</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#75715e>// if l is a JSR block, adds b after the first two edges</color>
            <color=#75715e>// to preserve the hypothesis about JSR block successors</color>
            <color=#75715e>// order (see {@link #visitJumpInsn})</color>
            <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>successors</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>successors</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#75715e>// goes to the next label</color>
          <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>successor</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>handler</color> <color=#f92672>=</color> <color=#f8f8f2>handler</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>

      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>subroutines</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// completes the control flow graph with the RET successors</color>
        <color=#75715e>/*</color>
<color=#75715e>         * first step: finds the subroutines. This step determines, for</color>
<color=#75715e>         * each basic block, to which subroutine(s) it belongs.</color>
<color=#75715e>         */</color>
        <color=#75715e>// finds the basic blocks that belong to the "main" subroutine</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>id</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>labels</color><color=#f8f8f2>.</color><color=#a6e22e>visitSubroutine</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>subroutines</color><color=#f8f8f2>);</color>
        <color=#75715e>// finds the basic blocks that belong to the real subroutines</color>
        <color=#f8f8f2>Label</color> <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#f8f8f2>labels</color><color=#f8f8f2>;</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>l</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>&</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>JSR</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// the subroutine is defined by l's TARGET, not by l</color>
            <color=#f8f8f2>Label</color> <color=#f8f8f2>subroutine</color> <color=#f92672>=</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>successors</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>.</color><color=#a6e22e>successor</color><color=#f8f8f2>;</color>
            <color=#75715e>// if this subroutine has not been visited yet...</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>subroutine</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>&</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>VISITED</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#75715e>// ...assigns it a new id and finds its basic blocks</color>
              <color=#f8f8f2>id</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>subroutine</color><color=#f8f8f2>.</color><color=#a6e22e>visitSubroutine</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>id</color> <color=#f92672>/</color> <color=#ae81ff>32L</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>32</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#ae81ff>1L</color> <color=#f92672><<</color> <color=#f8f8f2>(</color><color=#f8f8f2>id</color> <color=#f92672>%</color> <color=#ae81ff>32</color><color=#f8f8f2>)),</color> <color=#f8f8f2>subroutines</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>successor</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>// second step: finds the successors of RET blocks</color>
        <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#f8f8f2>labels</color><color=#f8f8f2>;</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>l</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>&</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>JSR</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Label</color> <color=#f8f8f2>L</color> <color=#f92672>=</color> <color=#f8f8f2>labels</color><color=#f8f8f2>;</color>
            <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>L</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>L</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>&=</color> <color=#f92672>~</color><color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>VISITED2</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>L</color> <color=#f92672>=</color> <color=#f8f8f2>L</color><color=#f8f8f2>.</color><color=#a6e22e>successor</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#75715e>// the subroutine is defined by l's TARGET, not by l</color>
            <color=#f8f8f2>Label</color> <color=#f8f8f2>subroutine</color> <color=#f92672>=</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>successors</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>.</color><color=#a6e22e>successor</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>subroutine</color><color=#f8f8f2>.</color><color=#a6e22e>visitSubroutine</color><color=#f8f8f2>(</color><color=#f8f8f2>l</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>subroutines</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>successor</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>

      <color=#75715e>/*</color>
<color=#75715e>       * control flow analysis algorithm: while the block stack is not</color>
<color=#75715e>       * empty, pop a block from this stack, update the max stack size,</color>
<color=#75715e>       * compute the true (non relative) begin stack size of the</color>
<color=#75715e>       * successors of this block, and push these successors onto the</color>
<color=#75715e>       * stack (unless they have already been pushed onto the stack).</color>
<color=#75715e>       * Note: by hypothesis, the {@link Label#inputStackTop} of the</color>
<color=#75715e>       * blocks in the block stack are the true (non relative) beginning</color>
<color=#75715e>       * stack sizes of these blocks.</color>
<color=#75715e>       */</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>max</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>Label</color> <color=#f8f8f2>stack</color> <color=#f92672>=</color> <color=#f8f8f2>labels</color><color=#f8f8f2>;</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>stack</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// pops a block from the stack</color>
        <color=#f8f8f2>Label</color> <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#f8f8f2>stack</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>stack</color> <color=#f92672>=</color> <color=#f8f8f2>stack</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
        <color=#75715e>// computes the true (non relative) max stack size of this block</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>start</color> <color=#f92672>=</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>inputStackTop</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>blockMax</color> <color=#f92672>=</color> <color=#f8f8f2>start</color> <color=#f92672>+</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>outputStackMax</color><color=#f8f8f2>;</color>
        <color=#75715e>// updates the global max stack size</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>blockMax</color> <color=#f92672>></color> <color=#f8f8f2>max</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>max</color> <color=#f92672>=</color> <color=#f8f8f2>blockMax</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>// analyzes the successors of the block</color>
        <color=#f8f8f2>Edge</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>successors</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>&</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>JSR</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>// ignores the first edge of JSR blocks (virtual successor)</color>
          <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>successor</color><color=#f8f8f2>;</color>
          <color=#75715e>// if this successor has not already been pushed...</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>&</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>PUSHED</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// computes its true beginning stack size...</color>
            <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>inputStackTop</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>info</color> <color=#f92672>==</color> <color=#f8f8f2>Edge</color><color=#f8f8f2>.</color><color=#a6e22e>EXCEPTION</color> <color=#f92672>?</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#f8f8f2>start</color> <color=#f92672>+</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>info</color><color=#f8f8f2>;</color>
            <color=#75715e>// ...and pushes it onto the stack</color>
            <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>|=</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>PUSHED</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>stack</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>stack</color> <color=#f92672>=</color> <color=#f8f8f2>l</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>maxStack</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>maxStack</color><color=#f8f8f2>,</color> <color=#f8f8f2>max</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>maxStack</color> <color=#f92672>=</color> <color=#f8f8f2>maxStack</color><color=#f8f8f2>;</color>
      <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>maxLocals</color> <color=#f92672>=</color> <color=#f8f8f2>maxLocals</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#a6e22e>@Override</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitEnd</color><color=#f8f8f2>()</color> <color=#f8f8f2>{}</color>

  <color=#75715e>// ------------------------------------------------------------------------</color>
  <color=#75715e>// Utility methods: control flow analysis algorithm</color>
  <color=#75715e>// ------------------------------------------------------------------------</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Adds a successor to the {@link #currentBlock currentBlock} block.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param info information about the control flow edge to be added.</color>
<color=#75715e>   * @param successor the successor block to be added to the current block.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>addSuccessor</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>info</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Label</color> <color=#f8f8f2>successor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>// creates and initializes an Edge object...</color>
    <color=#f8f8f2>Edge</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Edge</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>info</color> <color=#f92672>=</color> <color=#f8f8f2>info</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>successor</color> <color=#f92672>=</color> <color=#f8f8f2>successor</color><color=#f8f8f2>;</color>
    <color=#75715e>// ...and adds it to the successor list of the currentBlock block</color>
    <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>currentBlock</color><color=#f8f8f2>.</color><color=#a6e22e>successors</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>currentBlock</color><color=#f8f8f2>.</color><color=#a6e22e>successors</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Ends the current basic block. This method must be used in the case where the current basic</color>
<color=#75715e>   * block does not have any successor.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>noSuccessor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compute</color> <color=#f92672>==</color> <color=#f8f8f2>FRAMES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Label</color> <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Label</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>frame</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>frame</color><color=#f8f8f2>.</color><color=#a6e22e>owner</color> <color=#f92672>=</color> <color=#f8f8f2>l</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>resolve</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>previousBlock</color><color=#f8f8f2>.</color><color=#a6e22e>successor</color> <color=#f92672>=</color> <color=#f8f8f2>l</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>previousBlock</color> <color=#f92672>=</color> <color=#f8f8f2>l</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>currentBlock</color><color=#f8f8f2>.</color><color=#a6e22e>outputStackMax</color> <color=#f92672>=</color> <color=#f8f8f2>maxStackSize</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>currentBlock</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// ------------------------------------------------------------------------</color>
  <color=#75715e>// Utility methods: stack map frames</color>
  <color=#75715e>// ------------------------------------------------------------------------</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits a frame that has been computed from scratch.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param f the frame that must be visited.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>visitFrame</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Frame</color> <color=#f8f8f2>f</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>t</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>nTop</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>nLocal</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>nStack</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>locals</color> <color=#f92672>=</color> <color=#f8f8f2>f</color><color=#f8f8f2>.</color><color=#a6e22e>inputLocals</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>stacks</color> <color=#f92672>=</color> <color=#f8f8f2>f</color><color=#f8f8f2>.</color><color=#a6e22e>inputStack</color><color=#f8f8f2>;</color>
    <color=#75715e>// computes the number of locals (ignores TOP types that are just after</color>
    <color=#75715e>// a LONG or a DOUBLE, and all trailing TOP types)</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>locals</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>locals</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672>==</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>TOP</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f92672>++</color><color=#f8f8f2>nTop</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>nLocal</color> <color=#f92672>+=</color> <color=#f8f8f2>nTop</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>nTop</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672>==</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>LONG</color> <color=#f92672>||</color> <color=#f8f8f2>t</color> <color=#f92672>==</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>DOUBLE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// computes the stack size (ignores TOP types that are just after</color>
    <color=#75715e>// a LONG or a DOUBLE)</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>stacks</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>stacks</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f92672>++</color><color=#f8f8f2>nStack</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672>==</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>LONG</color> <color=#f92672>||</color> <color=#f8f8f2>t</color> <color=#f92672>==</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>DOUBLE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// visits the frame and its content</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>frameIndex</color> <color=#f92672>=</color> <color=#f8f8f2>startFrame</color><color=#f8f8f2>(</color><color=#f8f8f2>f</color><color=#f8f8f2>.</color><color=#a6e22e>owner</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>,</color> <color=#f8f8f2>nLocal</color><color=#f8f8f2>,</color> <color=#f8f8f2>nStack</color><color=#f8f8f2>);</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>nLocal</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f92672>--</color><color=#f8f8f2>nLocal</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>locals</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>frameIndex</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>t</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672>==</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>LONG</color> <color=#f92672>||</color> <color=#f8f8f2>t</color> <color=#f92672>==</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>DOUBLE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>stacks</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>stacks</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>frameIndex</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>t</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672>==</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>LONG</color> <color=#f92672>||</color> <color=#f8f8f2>t</color> <color=#f92672>==</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>DOUBLE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>endFrame</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Visit the implicit first frame of this method. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>visitImplicitFirstFrame</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#75715e>// There can be at most descriptor.length() + 1 locals</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>frameIndex</color> <color=#f92672>=</color> <color=#f8f8f2>startFrame</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>descriptor</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>access</color> <color=#f92672>&</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_STATIC</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>access</color> <color=#f92672>&</color> <color=#f8f8f2>ACC_CONSTRUCTOR</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>frameIndex</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>OBJECT</color> <color=#f92672>|</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>addType</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>thisName</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>frameIndex</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color> <color=#75715e>// Opcodes.UNINITIALIZED_THIS;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>loop</color><color=#f8f8f2>:</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
      <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>descriptor</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>case</color> <color=#e6db74>'Z'</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#e6db74>'C'</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#e6db74>'B'</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#e6db74>'S'</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#e6db74>'I'</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>frameIndex</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#75715e>// Opcodes.INTEGER;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#e6db74>'F'</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>frameIndex</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color> <color=#75715e>// Opcodes.FLOAT;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#e6db74>'J'</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>frameIndex</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color> <color=#75715e>// Opcodes.LONG;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#e6db74>'D'</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>frameIndex</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color> <color=#75715e>// Opcodes.DOUBLE;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#e6db74>'['</color><color=#f8f8f2>:</color>
          <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>descriptor</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#e6db74>'['</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>descriptor</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#e6db74>'L'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>;</color>
            <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>descriptor</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#e6db74>';'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>frameIndex</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>OBJECT</color> <color=#f92672>|</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>addType</color><color=#f8f8f2>(</color><color=#f8f8f2>descriptor</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>j</color><color=#f8f8f2>,</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>));</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#e6db74>'L'</color><color=#f8f8f2>:</color>
          <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>descriptor</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#e6db74>';'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>frameIndex</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>OBJECT</color> <color=#f92672>|</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>addType</color><color=#f8f8f2>(</color><color=#f8f8f2>descriptor</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>));</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>default</color><color=#f8f8f2>:</color>
          <color=#66d9ef>break</color> <color=#f8f8f2>loop</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>frameIndex</color> <color=#f92672>-</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>endFrame</color><color=#f8f8f2>();</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Starts the visit of a stack map frame.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param offset the offset of the instruction to which the frame corresponds.</color>
<color=#75715e>   * @param nLocal the number of local variables in the frame.</color>
<color=#75715e>   * @param nStack the number of stack elements in the frame.</color>
<color=#75715e>   * @return the index of the next element to be written in this frame.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>startFrame</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>nLocal</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>nStack</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#ae81ff>3</color> <color=#f92672>+</color> <color=#f8f8f2>nLocal</color> <color=#f92672>+</color> <color=#f8f8f2>nStack</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>frame</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672><</color> <color=#f8f8f2>n</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>frame</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>n</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>nLocal</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>nStack</color><color=#f8f8f2>;</color>
    <color=#66d9ef>return</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Checks if the visit of the current frame {@link #frame} is finished, and if yes, write it in</color>
<color=#75715e>   * the StackMapTable attribute.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>endFrame</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>previousFrame</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color> <color=#75715e>// do not write the first frame</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stackMap</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>stackMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteVector</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>writeFrame</color><color=#f8f8f2>();</color>
      <color=#f92672>++</color><color=#f8f8f2>frameCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>previousFrame</color> <color=#f92672>=</color> <color=#f8f8f2>frame</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>frame</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/** Compress and writes the current frame {@link #frame} in the StackMapTable attribute. */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>writeFrame</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>clocalsSize</color> <color=#f92672>=</color> <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>cstackSize</color> <color=#f92672>=</color> <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>version</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFF</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>V1_6</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>frame</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>clocalsSize</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>writeFrameTypes</color><color=#f8f8f2>(</color><color=#ae81ff>3</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color> <color=#f92672>+</color> <color=#f8f8f2>clocalsSize</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cstackSize</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>writeFrameTypes</color><color=#f8f8f2>(</color><color=#ae81ff>3</color> <color=#f92672>+</color> <color=#f8f8f2>clocalsSize</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color> <color=#f92672>+</color> <color=#f8f8f2>clocalsSize</color> <color=#f92672>+</color> <color=#f8f8f2>cstackSize</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>localsSize</color> <color=#f92672>=</color> <color=#f8f8f2>previousFrame</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>FULL_FRAME</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>delta</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>frameCount</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>delta</color> <color=#f92672>=</color> <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>delta</color> <color=#f92672>=</color> <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>-</color> <color=#f8f8f2>previousFrame</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cstackSize</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#f8f8f2>clocalsSize</color> <color=#f92672>-</color> <color=#f8f8f2>localsSize</color><color=#f8f8f2>;</color>
      <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>k</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>case</color> <color=#f92672>-</color><color=#ae81ff>3</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f92672>-</color><color=#ae81ff>2</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>CHOP_FRAME</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>localsSize</color> <color=#f92672>=</color> <color=#f8f8f2>clocalsSize</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#ae81ff>0</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>delta</color> <color=#f92672><</color> <color=#ae81ff>64</color> <color=#f92672>?</color> <color=#f8f8f2>SAME_FRAME</color> <color=#f8f8f2>:</color> <color=#f8f8f2>SAME_FRAME_EXTENDED</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#ae81ff>1</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#ae81ff>2</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#ae81ff>3</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>APPEND_FRAME</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>clocalsSize</color> <color=#f92672>==</color> <color=#f8f8f2>localsSize</color> <color=#f92672>&&</color> <color=#f8f8f2>cstackSize</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>delta</color> <color=#f92672><</color> <color=#ae81ff>63</color> <color=#f92672>?</color> <color=#f8f8f2>SAME_LOCALS_1_STACK_ITEM_FRAME</color> <color=#f8f8f2>:</color> <color=#f8f8f2>SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>!=</color> <color=#f8f8f2>FULL_FRAME</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>// verify if locals are the same</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#f8f8f2>localsSize</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>l</color><color=#f92672>]</color> <color=#f92672>!=</color> <color=#f8f8f2>previousFrame</color><color=#f92672>[</color><color=#f8f8f2>l</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>FULL_FRAME</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>l</color><color=#f92672>++</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>SAME_FRAME</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>SAME_LOCALS_1_STACK_ITEM_FRAME</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>SAME_LOCALS_1_STACK_ITEM_FRAME</color> <color=#f92672>+</color> <color=#f8f8f2>delta</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>writeFrameTypes</color><color=#f8f8f2>(</color><color=#ae81ff>3</color> <color=#f92672>+</color> <color=#f8f8f2>clocalsSize</color><color=#f8f8f2>,</color> <color=#ae81ff>4</color> <color=#f92672>+</color> <color=#f8f8f2>clocalsSize</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>writeFrameTypes</color><color=#f8f8f2>(</color><color=#ae81ff>3</color> <color=#f92672>+</color> <color=#f8f8f2>clocalsSize</color><color=#f8f8f2>,</color> <color=#ae81ff>4</color> <color=#f92672>+</color> <color=#f8f8f2>clocalsSize</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>SAME_FRAME_EXTENDED</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>SAME_FRAME_EXTENDED</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>CHOP_FRAME</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>SAME_FRAME_EXTENDED</color> <color=#f92672>+</color> <color=#f8f8f2>k</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#66d9ef>case</color> <color=#f8f8f2>APPEND_FRAME</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>SAME_FRAME_EXTENDED</color> <color=#f92672>+</color> <color=#f8f8f2>k</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>writeFrameTypes</color><color=#f8f8f2>(</color><color=#ae81ff>3</color> <color=#f92672>+</color> <color=#f8f8f2>localsSize</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color> <color=#f92672>+</color> <color=#f8f8f2>clocalsSize</color><color=#f8f8f2>);</color>
        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#75715e>// case FULL_FRAME:</color>
      <color=#66d9ef>default</color><color=#f8f8f2>:</color>
        <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>FULL_FRAME</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>delta</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>clocalsSize</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>writeFrameTypes</color><color=#f8f8f2>(</color><color=#ae81ff>3</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color> <color=#f92672>+</color> <color=#f8f8f2>clocalsSize</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cstackSize</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>writeFrameTypes</color><color=#f8f8f2>(</color><color=#ae81ff>3</color> <color=#f92672>+</color> <color=#f8f8f2>clocalsSize</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color> <color=#f92672>+</color> <color=#f8f8f2>clocalsSize</color> <color=#f92672>+</color> <color=#f8f8f2>cstackSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes some types of the current frame {@link #frame} into the StackMapTableAttribute. This</color>
<color=#75715e>   * method converts types from the format used in {@link Label} to the format used in StackMapTable</color>
<color=#75715e>   * attributes. In particular, it converts type table indexes to constant pool indexes.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param start index of the first type in {@link #frame} to write.</color>
<color=#75715e>   * @param end index of last type in {@link #frame} to write (exclusive).</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>writeFrameTypes</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>start</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>end</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>start</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>end</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>frame</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>d</color> <color=#f92672>=</color> <color=#f8f8f2>t</color> <color=#f92672>&</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>DIM</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>d</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>t</color> <color=#f92672>&</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>BASE_VALUE</color><color=#f8f8f2>;</color>
        <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672>&</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>BASE_KIND</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>OBJECT</color><color=#f8f8f2>:</color>
            <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#ae81ff>7</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newClass</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>typeTable</color><color=#f92672>[</color><color=#f8f8f2>v</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>strVal1</color><color=#f8f8f2>));</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>UNINITIALIZED</color><color=#f8f8f2>:</color>
            <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#ae81ff>8</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>typeTable</color><color=#f92672>[</color><color=#f8f8f2>v</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>intVal</color><color=#f8f8f2>);</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#66d9ef>default</color><color=#f8f8f2>:</color>
            <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>d</color> <color=#f92672>>>=</color> <color=#ae81ff>28</color><color=#f8f8f2>;</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>d</color><color=#f92672>--</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'['</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>t</color> <color=#f92672>&</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>BASE_KIND</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>OBJECT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'L'</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>typeTable</color><color=#f92672>[</color><color=#f8f8f2>t</color> <color=#f92672>&</color> <color=#f8f8f2>Frame</color><color=#f8f8f2>.</color><color=#a6e22e>BASE_VALUE</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>strVal1</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>';'</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672>&</color> <color=#ae81ff>0xF</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>case</color> <color=#ae81ff>1</color><color=#f8f8f2>:</color>
              <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'I'</color><color=#f8f8f2>);</color>
              <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#ae81ff>2</color><color=#f8f8f2>:</color>
              <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'F'</color><color=#f8f8f2>);</color>
              <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#ae81ff>3</color><color=#f8f8f2>:</color>
              <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'D'</color><color=#f8f8f2>);</color>
              <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#ae81ff>9</color><color=#f8f8f2>:</color>
              <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'Z'</color><color=#f8f8f2>);</color>
              <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#ae81ff>10</color><color=#f8f8f2>:</color>
              <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'B'</color><color=#f8f8f2>);</color>
              <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#ae81ff>11</color><color=#f8f8f2>:</color>
              <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'C'</color><color=#f8f8f2>);</color>
              <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#ae81ff>12</color><color=#f8f8f2>:</color>
              <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'S'</color><color=#f8f8f2>);</color>
              <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>default</color><color=#f8f8f2>:</color>
              <color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'J'</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#ae81ff>7</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newClass</color><color=#f8f8f2>(</color><color=#f8f8f2>sb</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>()));</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>writeFrameType</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#ae81ff>7</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newClass</color><color=#f8f8f2>((</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>type</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(((</color><color=#f8f8f2>Integer</color><color=#f8f8f2>)</color> <color=#f8f8f2>type</color><color=#f8f8f2>).</color><color=#a6e22e>intValue</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#ae81ff>8</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(((</color><color=#f8f8f2>Label</color><color=#f8f8f2>)</color> <color=#f8f8f2>type</color><color=#f8f8f2>).</color><color=#a6e22e>position</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// ------------------------------------------------------------------------</color>
  <color=#75715e>// Utility methods: dump bytecode array</color>
  <color=#75715e>// ------------------------------------------------------------------------</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Returns the size of the bytecode of this method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @return the size of the bytecode of this method.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>classReaderOffset</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#ae81ff>6</color> <color=#f92672>+</color> <color=#f8f8f2>classReaderLength</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#ae81ff>65536</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>RuntimeException</color><color=#f8f8f2>(</color><color=#e6db74>"Method code too large!"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"Code"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>18</color> <color=#f92672>+</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#ae81ff>8</color> <color=#f92672>*</color> <color=#f8f8f2>handlerCount</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>localVar</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"LocalVariableTable"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color> <color=#f92672>+</color> <color=#f8f8f2>localVar</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>localVarType</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"LocalVariableTypeTable"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color> <color=#f92672>+</color> <color=#f8f8f2>localVarType</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lineNumber</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"LineNumberTable"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color> <color=#f92672>+</color> <color=#f8f8f2>lineNumber</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stackMap</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>zip</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>version</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFF</color><color=#f8f8f2>)</color> <color=#f92672>>=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>V1_6</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>zip</color> <color=#f92672>?</color> <color=#e6db74>"StackMapTable"</color> <color=#f8f8f2>:</color> <color=#e6db74>"StackMap"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color> <color=#f92672>+</color> <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>ctanns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"RuntimeVisibleTypeAnnotations"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color> <color=#f92672>+</color> <color=#f8f8f2>ctanns</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>ictanns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"RuntimeInvisibleTypeAnnotations"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color> <color=#f92672>+</color> <color=#f8f8f2>ictanns</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cattrs</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>cattrs</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxStack</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxLocals</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exceptionCount</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"Exceptions"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color> <color=#f92672>+</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>exceptionCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>access</color> <color=#f92672>&</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_SYNTHETIC</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>version</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFF</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>V1_5</color>
          <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>access</color> <color=#f92672>&</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_SYNTHETIC_ATTRIBUTE</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"Synthetic"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>access</color> <color=#f92672>&</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_DEPRECATED</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"Deprecated"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>SIGNATURES</color> <color=#f92672>&&</color> <color=#f8f8f2>signature</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"Signature"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>signature</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>methodParameters</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"MethodParameters"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>7</color> <color=#f92672>+</color> <color=#f8f8f2>methodParameters</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>annd</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"AnnotationDefault"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>6</color> <color=#f92672>+</color> <color=#f8f8f2>annd</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>anns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"RuntimeVisibleAnnotations"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color> <color=#f92672>+</color> <color=#f8f8f2>anns</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>ianns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"RuntimeInvisibleAnnotations"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color> <color=#f92672>+</color> <color=#f8f8f2>ianns</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>tanns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"RuntimeVisibleTypeAnnotations"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color> <color=#f92672>+</color> <color=#f8f8f2>tanns</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>itanns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"RuntimeInvisibleTypeAnnotations"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color> <color=#f92672>+</color> <color=#f8f8f2>itanns</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>panns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"RuntimeVisibleParameterAnnotations"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>7</color> <color=#f92672>+</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>panns</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#f8f8f2>synthetics</color><color=#f8f8f2>);</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>panns</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>>=</color> <color=#f8f8f2>synthetics</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>panns</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>panns</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>ipanns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"RuntimeInvisibleParameterAnnotations"</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>7</color> <color=#f92672>+</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>ipanns</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#f8f8f2>synthetics</color><color=#f8f8f2>);</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>ipanns</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>>=</color> <color=#f8f8f2>synthetics</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>ipanns</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>ipanns</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>attrs</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>attrs</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>size</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Puts the bytecode of this method in the given byte vector.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param out the byte vector into which the bytecode of this method must be copied.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>out</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FACTOR</color> <color=#f92672>=</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>TO_ACC_SYNTHETIC</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>mask</color> <color=#f92672>=</color>
        <color=#f8f8f2>ACC_CONSTRUCTOR</color>
            <color=#f92672>|</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_DEPRECATED</color>
            <color=#f92672>|</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_SYNTHETIC_ATTRIBUTE</color>
            <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>access</color> <color=#f92672>&</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_SYNTHETIC_ATTRIBUTE</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>FACTOR</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>access</color> <color=#f92672>&</color> <color=#f92672>~</color><color=#f8f8f2>mask</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>classReaderOffset</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>cr</color><color=#f8f8f2>.</color><color=#a6e22e>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>classReaderOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>classReaderLength</color><color=#f8f8f2>);</color>
      <color=#66d9ef>return</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>attributeCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exceptionCount</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>access</color> <color=#f92672>&</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_SYNTHETIC</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>version</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFF</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>V1_5</color>
          <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>access</color> <color=#f92672>&</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_SYNTHETIC_ATTRIBUTE</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>access</color> <color=#f92672>&</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_DEPRECATED</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>SIGNATURES</color> <color=#f92672>&&</color> <color=#f8f8f2>signature</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>methodParameters</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>annd</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>anns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>ianns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>tanns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>itanns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>panns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>ipanns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>attrs</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>attributeCount</color> <color=#f92672>+=</color> <color=#f8f8f2>attrs</color><color=#f8f8f2>.</color><color=#a6e22e>getCount</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>);</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#ae81ff>12</color> <color=#f92672>+</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#ae81ff>8</color> <color=#f92672>*</color> <color=#f8f8f2>handlerCount</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>localVar</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color> <color=#f92672>+</color> <color=#f8f8f2>localVar</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>localVarType</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color> <color=#f92672>+</color> <color=#f8f8f2>localVarType</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lineNumber</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color> <color=#f92672>+</color> <color=#f8f8f2>lineNumber</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stackMap</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color> <color=#f92672>+</color> <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>ctanns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color> <color=#f92672>+</color> <color=#f8f8f2>ctanns</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>ictanns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#ae81ff>8</color> <color=#f92672>+</color> <color=#f8f8f2>ictanns</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cattrs</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>size</color> <color=#f92672>+=</color> <color=#f8f8f2>cattrs</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxStack</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxLocals</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"Code"</color><color=#f8f8f2>)).</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>size</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>maxStack</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>maxLocals</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>).</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>handlerCount</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>handlerCount</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Handler</color> <color=#f8f8f2>h</color> <color=#f92672>=</color> <color=#f8f8f2>firstHandler</color><color=#f8f8f2>;</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>h</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>h</color><color=#f8f8f2>.</color><color=#a6e22e>start</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>)</color>
              <color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>h</color><color=#f8f8f2>.</color><color=#a6e22e>end</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>)</color>
              <color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>h</color><color=#f8f8f2>.</color><color=#a6e22e>handler</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>)</color>
              <color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>h</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>h</color> <color=#f92672>=</color> <color=#f8f8f2>h</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>attributeCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>localVar</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>localVarType</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lineNumber</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stackMap</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>ctanns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>ictanns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f92672>++</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cattrs</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>attributeCount</color> <color=#f92672>+=</color> <color=#f8f8f2>cattrs</color><color=#f8f8f2>.</color><color=#a6e22e>getCount</color><color=#f8f8f2>();</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>attributeCount</color><color=#f8f8f2>);</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>localVar</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"LocalVariableTable"</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>localVar</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>localVarCount</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>localVar</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>localVar</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>localVarType</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"LocalVariableTypeTable"</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>localVarType</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>localVarTypeCount</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>localVarType</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>localVarType</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lineNumber</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"LineNumberTable"</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>lineNumber</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>lineNumberCount</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>lineNumber</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>lineNumber</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>stackMap</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>zip</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>version</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFF</color><color=#f8f8f2>)</color> <color=#f92672>>=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>V1_6</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>zip</color> <color=#f92672>?</color> <color=#e6db74>"StackMapTable"</color> <color=#f8f8f2>:</color> <color=#e6db74>"StackMap"</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>frameCount</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>stackMap</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>ctanns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"RuntimeVisibleTypeAnnotations"</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>ctanns</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>ictanns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"RuntimeInvisibleTypeAnnotations"</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>ictanns</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cattrs</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cattrs</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>,</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxLocals</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxStack</color><color=#f8f8f2>,</color> <color=#f8f8f2>out</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exceptionCount</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"Exceptions"</color><color=#f8f8f2>)).</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>exceptionCount</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>exceptionCount</color><color=#f8f8f2>);</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>exceptionCount</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>exceptions</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>access</color> <color=#f92672>&</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_SYNTHETIC</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>version</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFF</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>V1_5</color>
          <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>access</color> <color=#f92672>&</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_SYNTHETIC_ATTRIBUTE</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"Synthetic"</color><color=#f8f8f2>)).</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>access</color> <color=#f92672>&</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ACC_DEPRECATED</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"Deprecated"</color><color=#f8f8f2>)).</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>SIGNATURES</color> <color=#f92672>&&</color> <color=#f8f8f2>signature</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"Signature"</color><color=#f8f8f2>)).</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#ae81ff>2</color><color=#f8f8f2>).</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#f8f8f2>signature</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>methodParameters</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"MethodParameters"</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>methodParameters</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>).</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>methodParametersCount</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>methodParameters</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>methodParameters</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>annd</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"AnnotationDefault"</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>annd</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>annd</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>annd</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>anns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"RuntimeVisibleAnnotations"</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>anns</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>ianns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"RuntimeInvisibleAnnotations"</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>ianns</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>tanns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"RuntimeVisibleTypeAnnotations"</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>tanns</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>itanns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"RuntimeInvisibleTypeAnnotations"</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>itanns</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>panns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"RuntimeVisibleParameterAnnotations"</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>AnnotationWriter</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>panns</color><color=#f8f8f2>,</color> <color=#f8f8f2>synthetics</color><color=#f8f8f2>,</color> <color=#f8f8f2>out</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassReader</color><color=#f8f8f2>.</color><color=#a6e22e>ANNOTATIONS</color> <color=#f92672>&&</color> <color=#f8f8f2>ipanns</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>newUTF8</color><color=#f8f8f2>(</color><color=#e6db74>"RuntimeInvisibleParameterAnnotations"</color><color=#f8f8f2>));</color>
      <color=#f8f8f2>AnnotationWriter</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>ipanns</color><color=#f8f8f2>,</color> <color=#f8f8f2>synthetics</color><color=#f8f8f2>,</color> <color=#f8f8f2>out</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>attrs</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>attrs</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>out</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>// ------------------------------------------------------------------------</color>
  <color=#75715e>// Utility methods: instruction resizing (used to handle GOTO_W and JSR_W)</color>
  <color=#75715e>// ------------------------------------------------------------------------</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Resizes and replaces the temporary instructions inserted by {@link Label#resolve} for wide</color>
<color=#75715e>   * forward jumps, while keeping jump offsets and instruction addresses consistent. This may</color>
<color=#75715e>   * require to resize other existing instructions, or even to introduce new instructions: for</color>
<color=#75715e>   * example, increasing the size of an instruction by 2 at the middle of a method can increases the</color>
<color=#75715e>   * offset of an IFEQ instruction from 32766 to 32768, in which case IFEQ 32766 must be replaced</color>
<color=#75715e>   * with IFNEQ 8 GOTO_W 32765. This, in turn, may require to increase the size of another jump</color>
<color=#75715e>   * instruction, and so on... All these operations are handled automatically by this method.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p><i>This method must be called after all the method that is being built has been visited</i>.</color>
<color=#75715e>   * In particular, the {@link Label Label} objects used to construct the method are no longer valid</color>
<color=#75715e>   * after this method has been called.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>resizeInstructions</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>;</color> <color=#75715e>// bytecode of the method</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>u</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>label</color><color=#f8f8f2>;</color> <color=#75715e>// indexes in b</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>j</color><color=#f8f8f2>;</color> <color=#75715e>// loop indexes</color>
    <color=#75715e>/*</color>
<color=#75715e>     * 1st step: As explained above, resizing an instruction may require to</color>
<color=#75715e>     * resize another one, which may require to resize yet another one, and</color>
<color=#75715e>     * so on. The first step of the algorithm consists in finding all the</color>
<color=#75715e>     * instructions that need to be resized, without modifying the code.</color>
<color=#75715e>     * This is done by the following "fix point" algorithm:</color>
<color=#75715e>     *</color>
<color=#75715e>     * Parse the code to find the jump instructions whose offset will need</color>
<color=#75715e>     * more than 2 bytes to be stored (the future offset is computed from</color>
<color=#75715e>     * the current offset and from the number of bytes that will be inserted</color>
<color=#75715e>     * or removed between the source and target instructions). For each such</color>
<color=#75715e>     * instruction, adds an entry in (a copy of) the indexes and sizes</color>
<color=#75715e>     * arrays (if this has not already been done in a previous iteration!).</color>
<color=#75715e>     *</color>
<color=#75715e>     * If at least one entry has been added during the previous step, go</color>
<color=#75715e>     * back to the beginning, otherwise stop.</color>
<color=#75715e>     *</color>
<color=#75715e>     * In fact the real algorithm is complicated by the fact that the size</color>
<color=#75715e>     * of TABLESWITCH and LOOKUPSWITCH instructions depends on their</color>
<color=#75715e>     * position in the bytecode (because of padding). In order to ensure the</color>
<color=#75715e>     * convergence of the algorithm, the number of bytes to be added or</color>
<color=#75715e>     * removed from these instructions is over estimated during the previous</color>
<color=#75715e>     * loop, and computed exactly only after the loop is finished (this</color>
<color=#75715e>     * requires another pass to parse the bytecode of the method).</color>
<color=#75715e>     */</color>
    <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>allIndexes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color> <color=#75715e>// copy of indexes</color>
    <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>allSizes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color> <color=#75715e>// copy of sizes</color>
    <color=#66d9ef>boolean</color><color=#f92672>[]</color> <color=#f8f8f2>resize</color><color=#f8f8f2>;</color> <color=#75715e>// instructions to be resized</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>newOffset</color><color=#f8f8f2>;</color> <color=#75715e>// future offset of a jump instruction</color>

    <color=#f8f8f2>resize</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>boolean</color><color=#f92672>[</color><color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>

    <color=#75715e>// 3 = loop again, 2 = loop ended, 1 = last pass, 0 = done</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
    <color=#66d9ef>do</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>state</color> <color=#f92672>==</color> <color=#ae81ff>3</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672><</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>opcode</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>u</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color> <color=#75715e>// opcode of current instruction</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>insert</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#75715e>// bytes to be added after this instruction</color>

        <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f92672>[</color><color=#f8f8f2>opcode</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>NOARG_INSN</color><color=#f8f8f2>:</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>IMPLVAR_INSN</color><color=#f8f8f2>:</color>
            <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LABEL_INSN</color><color=#f8f8f2>:</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>></color> <color=#ae81ff>201</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#75715e>// converts temporary opcodes 202 to 217, 218 and</color>
              <color=#75715e>// 219 to IFEQ ... JSR (inclusive), IFNULL and</color>
              <color=#75715e>// IFNONNULL</color>
              <color=#f8f8f2>opcode</color> <color=#f92672>=</color> <color=#f8f8f2>opcode</color> <color=#f92672><</color> <color=#ae81ff>218</color> <color=#f92672>?</color> <color=#f8f8f2>opcode</color> <color=#f92672>-</color> <color=#ae81ff>49</color> <color=#f8f8f2>:</color> <color=#f8f8f2>opcode</color> <color=#f92672>-</color> <color=#ae81ff>20</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>label</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>label</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#f8f8f2>readShort</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>newOffset</color> <color=#f92672>=</color> <color=#f8f8f2>getNewOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>allIndexes</color><color=#f8f8f2>,</color> <color=#f8f8f2>allSizes</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>,</color> <color=#f8f8f2>label</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newOffset</color> <color=#f92672><</color> <color=#f8f8f2>Short</color><color=#f8f8f2>.</color><color=#a6e22e>MIN_VALUE</color> <color=#f92672>||</color> <color=#f8f8f2>newOffset</color> <color=#f92672>></color> <color=#f8f8f2>Short</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>resize</color><color=#f92672>[</color><color=#f8f8f2>u</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>GOTO</color> <color=#f92672>||</color> <color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>JSR</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                  <color=#75715e>// two additional bytes will be required to</color>
                  <color=#75715e>// replace this GOTO or JSR instruction with</color>
                  <color=#75715e>// a GOTO_W or a JSR_W</color>
                  <color=#f8f8f2>insert</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                  <color=#75715e>// five additional bytes will be required to</color>
                  <color=#75715e>// replace this IFxxx <l> instruction with</color>
                  <color=#75715e>// IFNOTxxx <l'> GOTO_W <l>, where IFNOTxxx</color>
                  <color=#75715e>// is the "opposite" opcode of IFxxx (i.e.,</color>
                  <color=#75715e>// IFNE for IFEQ) and where <l'> designates</color>
                  <color=#75715e>// the instruction just after the GOTO_W.</color>
                  <color=#f8f8f2>insert</color> <color=#f92672>=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#f8f8f2>resize</color><color=#f92672>[</color><color=#f8f8f2>u</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LABELW_INSN</color><color=#f8f8f2>:</color>
            <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>TABL_INSN</color><color=#f8f8f2>:</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>state</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#75715e>// true number of bytes to be added (or removed)</color>
              <color=#75715e>// from this instruction = (future number of padding</color>
              <color=#75715e>// bytes - current number of padding byte) -</color>
              <color=#75715e>// previously over estimated variation =</color>
              <color=#75715e>// = ((3 - newOffset%4) - (3 - u%4)) - u%4</color>
              <color=#75715e>// = (-newOffset%4 + u%4) - u%4</color>
              <color=#75715e>// = -(newOffset & 3)</color>
              <color=#f8f8f2>newOffset</color> <color=#f92672>=</color> <color=#f8f8f2>getNewOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>allIndexes</color><color=#f8f8f2>,</color> <color=#f8f8f2>allSizes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>insert</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>(</color><color=#f8f8f2>newOffset</color> <color=#f92672>&</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>resize</color><color=#f92672>[</color><color=#f8f8f2>u</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#75715e>// over estimation of the number of bytes to be</color>
              <color=#75715e>// added to this instruction = 3 - current number</color>
              <color=#75715e>// of padding bytes = 3 - (3 - u%4) = u%4 = u & 3</color>
              <color=#f8f8f2>insert</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>&</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>resize</color><color=#f92672>[</color><color=#f8f8f2>u</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#75715e>// skips instruction</color>
            <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>&</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>4</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#ae81ff>12</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LOOK_INSN</color><color=#f8f8f2>:</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>state</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#75715e>// like TABL_INSN</color>
              <color=#f8f8f2>newOffset</color> <color=#f92672>=</color> <color=#f8f8f2>getNewOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>allIndexes</color><color=#f8f8f2>,</color> <color=#f8f8f2>allSizes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>insert</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>(</color><color=#f8f8f2>newOffset</color> <color=#f92672>&</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>resize</color><color=#f92672>[</color><color=#f8f8f2>u</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#75715e>// like TABL_INSN</color>
              <color=#f8f8f2>insert</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>&</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
              <color=#f8f8f2>resize</color><color=#f92672>[</color><color=#f8f8f2>u</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#75715e>// skips instruction</color>
            <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>&</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>8</color> <color=#f92672>*</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>WIDE_INSN</color><color=#f8f8f2>:</color>
            <color=#f8f8f2>opcode</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>IINC</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>VAR_INSN</color><color=#f8f8f2>:</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>SBYTE_INSN</color><color=#f8f8f2>:</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LDC_INSN</color><color=#f8f8f2>:</color>
            <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>SHORT_INSN</color><color=#f8f8f2>:</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LDCW_INSN</color><color=#f8f8f2>:</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>FIELDORMETH_INSN</color><color=#f8f8f2>:</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INSN</color><color=#f8f8f2>:</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>IINC_INSN</color><color=#f8f8f2>:</color>
            <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>ITFMETH_INSN</color><color=#f8f8f2>:</color>
          <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>INDYMETH_INSN</color><color=#f8f8f2>:</color>
            <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#75715e>// case ClassWriter.MANA_INSN:</color>
          <color=#66d9ef>default</color><color=#f8f8f2>:</color>
            <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>insert</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#75715e>// adds a new (u, insert) entry in the allIndexes and</color>
          <color=#75715e>// allSizes arrays</color>
          <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>newIndexes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>allIndexes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
          <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>newSizes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>allSizes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>allIndexes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>newIndexes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>allIndexes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>allSizes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>newSizes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>allSizes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>newIndexes</color><color=#f92672>[</color><color=#f8f8f2>allIndexes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>u</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>newSizes</color><color=#f92672>[</color><color=#f8f8f2>allSizes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>insert</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>allIndexes</color> <color=#f92672>=</color> <color=#f8f8f2>newIndexes</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>allSizes</color> <color=#f92672>=</color> <color=#f8f8f2>newSizes</color><color=#f8f8f2>;</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>insert</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>state</color> <color=#f92672>=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>state</color> <color=#f92672><</color> <color=#ae81ff>3</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f92672>--</color><color=#f8f8f2>state</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>state</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>

    <color=#75715e>// 2nd step:</color>
    <color=#75715e>// copies the bytecode of the method into a new bytevector, updates the</color>
    <color=#75715e>// offsets, and inserts (or removes) bytes as requested.</color>

    <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>newCode</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteVector</color><color=#f8f8f2>(</color><color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>

    <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672><</color> <color=#f8f8f2>code</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>opcode</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>u</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
      <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f92672>[</color><color=#f8f8f2>opcode</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>NOARG_INSN</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>IMPLVAR_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LABEL_INSN</color><color=#f8f8f2>:</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>></color> <color=#ae81ff>201</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// changes temporary opcodes 202 to 217 (inclusive), 218</color>
            <color=#75715e>// and 219 to IFEQ ... JSR (inclusive), IFNULL and</color>
            <color=#75715e>// IFNONNULL</color>
            <color=#f8f8f2>opcode</color> <color=#f92672>=</color> <color=#f8f8f2>opcode</color> <color=#f92672><</color> <color=#ae81ff>218</color> <color=#f92672>?</color> <color=#f8f8f2>opcode</color> <color=#f92672>-</color> <color=#ae81ff>49</color> <color=#f8f8f2>:</color> <color=#f8f8f2>opcode</color> <color=#f92672>-</color> <color=#ae81ff>20</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>label</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>label</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#f8f8f2>readShort</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>newOffset</color> <color=#f92672>=</color> <color=#f8f8f2>getNewOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>allIndexes</color><color=#f8f8f2>,</color> <color=#f8f8f2>allSizes</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>,</color> <color=#f8f8f2>label</color><color=#f8f8f2>);</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>resize</color><color=#f92672>[</color><color=#f8f8f2>u</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// replaces GOTO with GOTO_W, JSR with JSR_W and IFxxx</color>
            <color=#75715e>// <l> with IFNOTxxx <l'> GOTO_W <l>, where IFNOTxxx is</color>
            <color=#75715e>// the "opposite" opcode of IFxxx (i.e., IFNE for IFEQ)</color>
            <color=#75715e>// and where <l'> designates the instruction just after</color>
            <color=#75715e>// the GOTO_W.</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>GOTO</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#ae81ff>200</color><color=#f8f8f2>);</color> <color=#75715e>// GOTO_W</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>JSR</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#ae81ff>201</color><color=#f8f8f2>);</color> <color=#75715e>// JSR_W</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
              <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672><=</color> <color=#ae81ff>166</color> <color=#f92672>?</color> <color=#f8f8f2>((</color><color=#f8f8f2>opcode</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>^</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#f8f8f2>opcode</color> <color=#f92672>^</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
              <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#ae81ff>8</color><color=#f8f8f2>);</color> <color=#75715e>// jump offset</color>
              <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#ae81ff>200</color><color=#f8f8f2>);</color> <color=#75715e>// GOTO_W</color>
              <color=#75715e>// newOffset now computed from start of GOTO_W</color>
              <color=#f8f8f2>newOffset</color> <color=#f92672>-=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>newOffset</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putShort</color><color=#f8f8f2>(</color><color=#f8f8f2>newOffset</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LABELW_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>label</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>newOffset</color> <color=#f92672>=</color> <color=#f8f8f2>getNewOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>allIndexes</color><color=#f8f8f2>,</color> <color=#f8f8f2>allSizes</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>,</color> <color=#f8f8f2>label</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>opcode</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>newOffset</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>TABL_INSN</color><color=#f8f8f2>:</color>
          <color=#75715e>// skips 0 to 3 padding bytes</color>
          <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>u</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>&</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color>
          <color=#75715e>// reads and copies instruction</color>
          <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>TABLESWITCH</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#ae81ff>4</color> <color=#f92672>-</color> <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>%</color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>label</color> <color=#f92672>=</color> <color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>newOffset</color> <color=#f92672>=</color> <color=#f8f8f2>getNewOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>allIndexes</color><color=#f8f8f2>,</color> <color=#f8f8f2>allSizes</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>label</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>newOffset</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>j</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>j</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color> <color=#f92672>-</color> <color=#ae81ff>4</color><color=#f8f8f2>));</color>
          <color=#66d9ef>for</color> <color=#f8f8f2>(;</color> <color=#f8f8f2>j</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>label</color> <color=#f92672>=</color> <color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>newOffset</color> <color=#f92672>=</color> <color=#f8f8f2>getNewOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>allIndexes</color><color=#f8f8f2>,</color> <color=#f8f8f2>allSizes</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>label</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>newOffset</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LOOK_INSN</color><color=#f8f8f2>:</color>
          <color=#75715e>// skips 0 to 3 padding bytes</color>
          <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>u</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>4</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>&</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color>
          <color=#75715e>// reads and copies instruction</color>
          <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putByte</color><color=#f8f8f2>(</color><color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>LOOKUPSWITCH</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#ae81ff>4</color> <color=#f92672>-</color> <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>%</color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>label</color> <color=#f92672>=</color> <color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>newOffset</color> <color=#f92672>=</color> <color=#f8f8f2>getNewOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>allIndexes</color><color=#f8f8f2>,</color> <color=#f8f8f2>allSizes</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>label</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>newOffset</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>j</color><color=#f8f8f2>);</color>
          <color=#66d9ef>for</color> <color=#f8f8f2>(;</color> <color=#f8f8f2>j</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>label</color> <color=#f92672>=</color> <color=#f8f8f2>v</color> <color=#f92672>+</color> <color=#f8f8f2>readInt</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>newOffset</color> <color=#f92672>=</color> <color=#f8f8f2>getNewOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>allIndexes</color><color=#f8f8f2>,</color> <color=#f8f8f2>allSizes</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#f8f8f2>label</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>newOffset</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>WIDE_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>opcode</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
          <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>opcode</color> <color=#f92672>==</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>IINC</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>,</color> <color=#ae81ff>6</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>,</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>}</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>VAR_INSN</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>SBYTE_INSN</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LDC_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>SHORT_INSN</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>LDCW_INSN</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>FIELDORMETH_INSN</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INSN</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>IINC_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>ITFMETH_INSN</color><color=#f8f8f2>:</color>
        <color=#66d9ef>case</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>INDYMETH_INSN</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>,</color> <color=#ae81ff>5</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
          <color=#75715e>// case MANA_INSN:</color>
        <color=#66d9ef>default</color><color=#f8f8f2>:</color>
          <color=#f8f8f2>newCode</color><color=#f8f8f2>.</color><color=#a6e22e>putByteArray</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>,</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
          <color=#66d9ef>break</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// updates the stack map frame labels</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>compute</color> <color=#f92672>==</color> <color=#f8f8f2>FRAMES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Label</color> <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#f8f8f2>labels</color><color=#f8f8f2>;</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>l</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>/*</color>
<color=#75715e>         * Detects the labels that are just after an IF instruction that</color>
<color=#75715e>         * has been resized with the IFNOT GOTO_W pattern. These labels</color>
<color=#75715e>         * are now the target of a jump instruction (the IFNOT</color>
<color=#75715e>         * instruction). Note that we need the original label position</color>
<color=#75715e>         * here. getNewOffset must therefore never have been called for</color>
<color=#75715e>         * this label.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>position</color> <color=#f92672>-</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>>=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>resize</color><color=#f92672>[</color><color=#f8f8f2>u</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>|=</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>TARGET</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>getNewOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>allIndexes</color><color=#f8f8f2>,</color> <color=#f8f8f2>allSizes</color><color=#f8f8f2>,</color> <color=#f8f8f2>l</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>successor</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
      <color=#75715e>// Update the offsets in the uninitialized types</color>
      <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>typeTable</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Item</color> <color=#f8f8f2>item</color> <color=#f92672>=</color> <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>typeTable</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>item</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>item</color><color=#f8f8f2>.</color><color=#a6e22e>type</color> <color=#f92672>==</color> <color=#f8f8f2>ClassWriter</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_UNINIT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>item</color><color=#f8f8f2>.</color><color=#a6e22e>intVal</color> <color=#f92672>=</color> <color=#f8f8f2>getNewOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>allIndexes</color><color=#f8f8f2>,</color> <color=#f8f8f2>allSizes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>item</color><color=#f8f8f2>.</color><color=#a6e22e>intVal</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#75715e>// The stack map frames are not serialized yet, so we don't need</color>
      <color=#75715e>// to update them. They will be serialized in visitMaxs.</color>
    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>frameCount</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#75715e>/*</color>
<color=#75715e>       * Resizing an existing stack map frame table is really hard. Not</color>
<color=#75715e>       * only the table must be parsed to update the offets, but new</color>
<color=#75715e>       * frames may be needed for jump instructions that were inserted by</color>
<color=#75715e>       * this method. And updating the offsets or inserting frames can</color>
<color=#75715e>       * change the format of the following frames, in case of packed</color>
<color=#75715e>       * frames. In practice the whole table must be recomputed. For this</color>
<color=#75715e>       * the frames are marked as potentially invalid. This will cause the</color>
<color=#75715e>       * whole class to be reread and rewritten with the COMPUTE_FRAMES</color>
<color=#75715e>       * option (see the ClassWriter.toByteArray method). This is not very</color>
<color=#75715e>       * efficient but is much easier and requires much less code than any</color>
<color=#75715e>       * other method I can think of.</color>
<color=#75715e>       */</color>
      <color=#f8f8f2>cw</color><color=#f8f8f2>.</color><color=#a6e22e>invalidFrames</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// updates the exception handler block labels</color>
    <color=#f8f8f2>Handler</color> <color=#f8f8f2>h</color> <color=#f92672>=</color> <color=#f8f8f2>firstHandler</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>h</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>getNewOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>allIndexes</color><color=#f8f8f2>,</color> <color=#f8f8f2>allSizes</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>.</color><color=#a6e22e>start</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>getNewOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>allIndexes</color><color=#f8f8f2>,</color> <color=#f8f8f2>allSizes</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>.</color><color=#a6e22e>end</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>getNewOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>allIndexes</color><color=#f8f8f2>,</color> <color=#f8f8f2>allSizes</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>.</color><color=#a6e22e>handler</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>h</color> <color=#f92672>=</color> <color=#f8f8f2>h</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// updates the instructions addresses in the</color>
    <color=#75715e>// local var and line number tables</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>ByteVector</color> <color=#f8f8f2>bv</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f8f8f2>localVar</color> <color=#f8f8f2>:</color> <color=#f8f8f2>localVarType</color><color=#f8f8f2>;</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672><</color> <color=#f8f8f2>bv</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>label</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>newOffset</color> <color=#f92672>=</color> <color=#f8f8f2>getNewOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>allIndexes</color><color=#f8f8f2>,</color> <color=#f8f8f2>allSizes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>label</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>writeShort</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>,</color> <color=#f8f8f2>newOffset</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>label</color> <color=#f92672>+=</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>newOffset</color> <color=#f92672>=</color> <color=#f8f8f2>getNewOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>allIndexes</color><color=#f8f8f2>,</color> <color=#f8f8f2>allSizes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>label</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>newOffset</color><color=#f8f8f2>;</color>
          <color=#f8f8f2>writeShort</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>newOffset</color><color=#f8f8f2>);</color>
          <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lineNumber</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>lineNumber</color><color=#f8f8f2>.</color><color=#a6e22e>data</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
      <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672><</color> <color=#f8f8f2>lineNumber</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>writeShort</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>,</color> <color=#f8f8f2>getNewOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>allIndexes</color><color=#f8f8f2>,</color> <color=#f8f8f2>allSizes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>readUnsignedShort</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>u</color><color=#f8f8f2>)));</color>
        <color=#f8f8f2>u</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// updates the labels of the other attributes</color>
    <color=#f8f8f2>Attribute</color> <color=#f8f8f2>attr</color> <color=#f92672>=</color> <color=#f8f8f2>cattrs</color><color=#f8f8f2>;</color>
    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>attr</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>Label</color><color=#f92672>[]</color> <color=#f8f8f2>labels</color> <color=#f92672>=</color> <color=#f8f8f2>attr</color><color=#f8f8f2>.</color><color=#a6e22e>getLabels</color><color=#f8f8f2>();</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>labels</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>labels</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f92672>--</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          <color=#f8f8f2>getNewOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>allIndexes</color><color=#f8f8f2>,</color> <color=#f8f8f2>allSizes</color><color=#f8f8f2>,</color> <color=#f8f8f2>labels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
      <color=#f8f8f2>}</color>
      <color=#f8f8f2>attr</color> <color=#f92672>=</color> <color=#f8f8f2>attr</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// replaces old bytecodes with new ones</color>
    <color=#f8f8f2>code</color> <color=#f92672>=</color> <color=#f8f8f2>newCode</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads an unsigned short value in the given byte array.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param b a byte array.</color>
<color=#75715e>   * @param index the start index of the value to be read.</color>
<color=#75715e>   * @return the read value.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>readUnsignedShort</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a signed short value in the given byte array.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param b a byte array.</color>
<color=#75715e>   * @param index the start index of the value to be read.</color>
<color=#75715e>   * @return the read value.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>short</color> <color=#a6e22e>readShort</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>short</color><color=#f8f8f2>)</color> <color=#f8f8f2>(((</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>));</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Reads a signed int value in the given byte array.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param b a byte array.</color>
<color=#75715e>   * @param index the start index of the value to be read.</color>
<color=#75715e>   * @return the read value.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>readInt</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color>
        <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color>
        <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color>
        <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Writes a short value in the given byte array.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param b a byte array.</color>
<color=#75715e>   * @param index where the first byte of the short value must be written.</color>
<color=#75715e>   * @param s the value to be written in the given byte array.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>writeShort</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>s</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>s</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>s</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Computes the future value of a bytecode offset.</color>
<color=#75715e>   *</color>
<color=#75715e>   * <p>Note: it is possible to have several entries for the same instruction in the</color>
<color=#75715e>   * <tt>indexes</tt> and <tt>sizes</tt>: two entries (index=a,size=b) and (index=a,size=b') are</color>
<color=#75715e>   * equivalent to a single entry (index=a,size=b+b').</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param indexes current positions of the instructions to be resized. Each instruction must be</color>
<color=#75715e>   *     designated by the index of its <i>last</i> byte, plus one (or, in other words, by the index</color>
<color=#75715e>   *     of the <i>first</i> byte of the <i>next</i> instruction).</color>
<color=#75715e>   * @param sizes the number of bytes to be <i>added</i> to the above instructions. More precisely,</color>
<color=#75715e>   *     for each i < <tt>len</tt>, <tt>sizes</tt>[i] bytes will be added at the end of the</color>
<color=#75715e>   *     instruction designated by <tt>indexes</tt>[i] or, if <tt>sizes</tt>[i] is negative, the</color>
<color=#75715e>   *     <i>last</i> | <tt>sizes[i]</tt>| bytes of the instruction will be removed (the instruction</color>
<color=#75715e>   *     size <i>must not</i> become negative or null).</color>
<color=#75715e>   * @param begin index of the first byte of the source instruction.</color>
<color=#75715e>   * @param end index of the first byte of the target instruction.</color>
<color=#75715e>   * @return the future value of the given bytecode offset.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getNewOffset</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>indexes</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>sizes</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>begin</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>end</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>offset</color> <color=#f92672>=</color> <color=#f8f8f2>end</color> <color=#f92672>-</color> <color=#f8f8f2>begin</color><color=#f8f8f2>;</color>
    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>indexes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>begin</color> <color=#f92672><</color> <color=#f8f8f2>indexes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>&&</color> <color=#f8f8f2>indexes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672><=</color> <color=#f8f8f2>end</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// forward jump</color>
        <color=#f8f8f2>offset</color> <color=#f92672>+=</color> <color=#f8f8f2>sizes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>end</color> <color=#f92672><</color> <color=#f8f8f2>indexes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>&&</color> <color=#f8f8f2>indexes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672><=</color> <color=#f8f8f2>begin</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// backward jump</color>
        <color=#f8f8f2>offset</color> <color=#f92672>-=</color> <color=#f8f8f2>sizes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
      <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Updates the offset of the given label.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param indexes current positions of the instructions to be resized. Each instruction must be</color>
<color=#75715e>   *     designated by the index of its <i>last</i> byte, plus one (or, in other words, by the index</color>
<color=#75715e>   *     of the <i>first</i> byte of the <i>next</i> instruction).</color>
<color=#75715e>   * @param sizes the number of bytes to be <i>added</i> to the above instructions. More precisely,</color>
<color=#75715e>   *     for each i < <tt>len</tt>, <tt>sizes</tt>[i] bytes will be added at the end of the</color>
<color=#75715e>   *     instruction designated by <tt>indexes</tt>[i] or, if <tt>sizes</tt>[i] is negative, the</color>
<color=#75715e>   *     <i>last</i> | <tt>sizes[i]</tt>| bytes of the instruction will be removed (the instruction</color>
<color=#75715e>   *     size <i>must not</i> become negative or null).</color>
<color=#75715e>   * @param label the label whose offset must be updated.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>getNewOffset</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>indexes</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>sizes</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Label</color> <color=#f8f8f2>label</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>label</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>&</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>RESIZED</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>label</color><color=#f8f8f2>.</color><color=#a6e22e>position</color> <color=#f92672>=</color> <color=#f8f8f2>getNewOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>indexes</color><color=#f8f8f2>,</color> <color=#f8f8f2>sizes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>label</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>);</color>
      <color=#f8f8f2>label</color><color=#f8f8f2>.</color><color=#a6e22e>status</color> <color=#f92672>|=</color> <color=#f8f8f2>Label</color><color=#f8f8f2>.</color><color=#a6e22e>RESIZED</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>