<color=#75715e>/***</color>
<color=#75715e> * ASM: a very small and fast Java bytecode manipulation framework</color>
<color=#75715e> * Copyright (c) 2000-2011 INRIA, France Telecom</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions</color>
<color=#75715e> * are met:</color>
<color=#75715e> * 1. Redistributions of source code must retain the above copyright</color>
<color=#75715e> *    notice, this list of conditions and the following disclaimer.</color>
<color=#75715e> * 2. Redistributions in binary form must reproduce the above copyright</color>
<color=#75715e> *    notice, this list of conditions and the following disclaimer in the</color>
<color=#75715e> *    documentation and/or other materials provided with the distribution.</color>
<color=#75715e> * 3. Neither the name of the copyright holders nor the names of its</color>
<color=#75715e> *    contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *    this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</color>
<color=#75715e> * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE</color>
<color=#75715e> * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR</color>
<color=#75715e> * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF</color>
<color=#75715e> * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS</color>
<color=#75715e> * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN</color>
<color=#75715e> * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)</color>
<color=#75715e> * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF</color>
<color=#75715e> * THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.asm</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A visitor to visit a Java field. The methods of this class must be called in the following order:</color>
<color=#75715e> * ( <tt>visitAnnotation</tt> | <tt>visitTypeAnnotation</tt> | <tt>visitAttribute</tt> )*</color>
<color=#75715e> * <tt>visitEnd</tt>.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Eric Bruneton</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>FieldVisitor</color> <color=#f8f8f2>{</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The ASM API version implemented by this visitor. The value of this field must be one of {@link</color>
<color=#75715e>   * Opcodes#ASM4} or {@link Opcodes#ASM5}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>api</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The field visitor to which this visitor must delegate method calls. May be null. */</color>
  <color=#66d9ef>protected</color> <color=#f8f8f2>FieldVisitor</color> <color=#f8f8f2>fv</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs a new {@link FieldVisitor}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param api the ASM API version implemented by this visitor. Must be one of {@link Opcodes#ASM4}</color>
<color=#75715e>   *     or {@link Opcodes#ASM5}.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>FieldVisitor</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>api</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>api</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Constructs a new {@link FieldVisitor}.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param api the ASM API version implemented by this visitor. Must be one of {@link Opcodes#ASM4}</color>
<color=#75715e>   *     or {@link Opcodes#ASM5}.</color>
<color=#75715e>   * @param fv the field visitor to which this visitor must delegate method calls. May be null.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#a6e22e>FieldVisitor</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>api</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>FieldVisitor</color> <color=#f8f8f2>fv</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>api</color> <color=#f92672>!=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ASM4</color> <color=#f92672>&&</color> <color=#f8f8f2>api</color> <color=#f92672>!=</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ASM5</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>api</color> <color=#f92672>=</color> <color=#f8f8f2>api</color><color=#f8f8f2>;</color>
    <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>fv</color> <color=#f92672>=</color> <color=#f8f8f2>fv</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits an annotation of the field.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param desc the class descriptor of the annotation class.</color>
<color=#75715e>   * @param visible <tt>true</tt> if the annotation is visible at runtime.</color>
<color=#75715e>   * @return a visitor to visit the annotation values, or <tt>null</tt> if this visitor is not</color>
<color=#75715e>   *     interested in visiting this annotation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>fv</color><color=#f8f8f2>.</color><color=#a6e22e>visitAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>visible</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits an annotation on the type of the field.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param typeRef a reference to the annotated type. The sort of this type reference must be</color>
<color=#75715e>   *     {@link TypeReference#FIELD FIELD}. See {@link TypeReference}.</color>
<color=#75715e>   * @param typePath the path to the annotated type argument, wildcard bound, array element type, or</color>
<color=#75715e>   *     static inner type within 'typeRef'. May be <tt>null</tt> if the annotation targets</color>
<color=#75715e>   *     'typeRef' as a whole.</color>
<color=#75715e>   * @param desc the class descriptor of the annotation class.</color>
<color=#75715e>   * @param visible <tt>true</tt> if the annotation is visible at runtime.</color>
<color=#75715e>   * @return a visitor to visit the annotation values, or <tt>null</tt> if this visitor is not</color>
<color=#75715e>   *     interested in visiting this annotation.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#f8f8f2>AnnotationVisitor</color> <color=#a6e22e>visitTypeAnnotation</color><color=#f8f8f2>(</color>
      <color=#66d9ef>int</color> <color=#f8f8f2>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>TypePath</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>visible</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>api</color> <color=#f92672><</color> <color=#f8f8f2>Opcodes</color><color=#f8f8f2>.</color><color=#a6e22e>ASM5</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>RuntimeException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#66d9ef>return</color> <color=#f8f8f2>fv</color><color=#f8f8f2>.</color><color=#a6e22e>visitTypeAnnotation</color><color=#f8f8f2>(</color><color=#f8f8f2>typeRef</color><color=#f8f8f2>,</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>,</color> <color=#f8f8f2>desc</color><color=#f8f8f2>,</color> <color=#f8f8f2>visible</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits a non standard attribute of the field.</color>
<color=#75715e>   *</color>
<color=#75715e>   * @param attr an attribute.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitAttribute</color><color=#f8f8f2>(</color><color=#f8f8f2>Attribute</color> <color=#f8f8f2>attr</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>fv</color><color=#f8f8f2>.</color><color=#a6e22e>visitAttribute</color><color=#f8f8f2>(</color><color=#f8f8f2>attr</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>

  <color=#75715e>/**</color>
<color=#75715e>   * Visits the end of the field. This method, which is the last one to be called, is used to inform</color>
<color=#75715e>   * the visitor that all the annotations and attributes of the field have been visited.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visitEnd</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fv</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
      <color=#f8f8f2>fv</color><color=#f8f8f2>.</color><color=#a6e22e>visitEnd</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
  <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>