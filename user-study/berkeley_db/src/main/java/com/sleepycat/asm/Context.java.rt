<color=#75715e>/***</color>
<color=#75715e> * ASM: a very small and fast Java bytecode manipulation framework</color>
<color=#75715e> * Copyright (c) 2000-2011 INRIA, France Telecom</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions</color>
<color=#75715e> * are met:</color>
<color=#75715e> * 1. Redistributions of source code must retain the above copyright</color>
<color=#75715e> *    notice, this list of conditions and the following disclaimer.</color>
<color=#75715e> * 2. Redistributions in binary form must reproduce the above copyright</color>
<color=#75715e> *    notice, this list of conditions and the following disclaimer in the</color>
<color=#75715e> *    documentation and/or other materials provided with the distribution.</color>
<color=#75715e> * 3. Neither the name of the copyright holders nor the names of its</color>
<color=#75715e> *    contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *    this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</color>
<color=#75715e> * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE</color>
<color=#75715e> * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR</color>
<color=#75715e> * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF</color>
<color=#75715e> * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS</color>
<color=#75715e> * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN</color>
<color=#75715e> * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)</color>
<color=#75715e> * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF</color>
<color=#75715e> * THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.sleepycat.asm</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Information about a class being parsed in a {@link ClassReader}.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Eric Bruneton</color>
<color=#75715e> */</color>
<color=#66d9ef>class</color> <color=#a6e22e>Context</color> <color=#f8f8f2>{</color>

  <color=#75715e>/** Prototypes of the attributes that must be parsed for this class. */</color>
  <color=#f8f8f2>Attribute</color><color=#f92672>[]</color> <color=#f8f8f2>attrs</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The {@link ClassReader} option flags for the parsing of this class. */</color>
  <color=#66d9ef>int</color> <color=#f8f8f2>flags</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The buffer used to read strings. */</color>
  <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The start index of each bootstrap method. */</color>
  <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>bootstrapMethods</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The access flags of the method currently being parsed. */</color>
  <color=#66d9ef>int</color> <color=#f8f8f2>access</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The name of the method currently being parsed. */</color>
  <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The descriptor of the method currently being parsed. */</color>
  <color=#f8f8f2>String</color> <color=#f8f8f2>desc</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The label objects, indexed by bytecode offset, of the method currently being parsed (only</color>
<color=#75715e>   * bytecode offsets for which a label is needed have a non null associated Label object).</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Label</color><color=#f92672>[]</color> <color=#f8f8f2>labels</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The target of the type annotation currently being parsed. */</color>
  <color=#66d9ef>int</color> <color=#f8f8f2>typeRef</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The path of the type annotation currently being parsed. */</color>
  <color=#f8f8f2>TypePath</color> <color=#f8f8f2>typePath</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The offset of the latest stack map frame that has been parsed. */</color>
  <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The labels corresponding to the start of the local variable ranges in the local variable type</color>
<color=#75715e>   * annotation currently being parsed.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Label</color><color=#f92672>[]</color> <color=#f8f8f2>start</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The labels corresponding to the end of the local variable ranges in the local variable type</color>
<color=#75715e>   * annotation currently being parsed.</color>
<color=#75715e>   */</color>
  <color=#f8f8f2>Label</color><color=#f92672>[]</color> <color=#f8f8f2>end</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The local variable indices for each local variable range in the local variable type annotation</color>
<color=#75715e>   * currently being parsed.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>index</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The encoding of the latest stack map frame that has been parsed. */</color>
  <color=#66d9ef>int</color> <color=#f8f8f2>mode</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The number of locals in the latest stack map frame that has been parsed. */</color>
  <color=#66d9ef>int</color> <color=#f8f8f2>localCount</color><color=#f8f8f2>;</color>

  <color=#75715e>/**</color>
<color=#75715e>   * The number locals in the latest stack map frame that has been parsed, minus the number of</color>
<color=#75715e>   * locals in the previous frame.</color>
<color=#75715e>   */</color>
  <color=#66d9ef>int</color> <color=#f8f8f2>localDiff</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The local values of the latest stack map frame that has been parsed. */</color>
  <color=#f8f8f2>Object</color><color=#f92672>[]</color> <color=#f8f8f2>local</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The stack size of the latest stack map frame that has been parsed. */</color>
  <color=#66d9ef>int</color> <color=#f8f8f2>stackCount</color><color=#f8f8f2>;</color>

  <color=#75715e>/** The stack values of the latest stack map frame that has been parsed. */</color>
  <color=#f8f8f2>Object</color><color=#f92672>[]</color> <color=#f8f8f2>stack</color><color=#f8f8f2>;</color>
<color=#f8f8f2>}</color>