{
  "edges": [
    {
      "type": "external method call",
      "label": "getDensityBucketsWithFactorScale",
      "declaration": "private static Map\u003cT, Dimension\u003e getDensityBucketsWithFactorScale(java.util.List\u003cT\u003e densities, Dimension srcDimension, Arguments args, float scale)",
      "from": {
        "file": "src/at/favre/tools/dconvert/util/DensityBucketUtil.java",
        "lines": {
          "from": 54,
          "to": 54
        },
        "columns": {
          "from": 16,
          "to": 47
        }
      },
      "to": {
        "file": "src/at/favre/tools/dconvert/util/DensityBucketUtil.java",
        "lines": {
          "from": 126,
          "to": 152
        },
        "columns": {
          "from": 3,
          "to": 3
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "read",
      "declaration": "private static LoadedImage read(ImageInputStream stream, ImageType imageType) throws IOException",
      "from": {
        "file": "src/at/favre/tools/dconvert/util/ImageUtil.java",
        "lines": {
          "from": 59,
          "to": 59
        },
        "columns": {
          "from": 25,
          "to": 28
        }
      },
      "to": {
        "file": "src/at/favre/tools/dconvert/util/ImageUtil.java",
        "lines": {
          "from": 86,
          "to": 110
        },
        "columns": {
          "from": 3,
          "to": 3
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "verticalFromWorkToDst",
      "declaration": "private void verticalFromWorkToDst(byte[][] workPixels, byte[] outPixels, int start, int delta)",
      "from": {
        "file": "src/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 166,
          "to": 166
        },
        "columns": {
          "from": 19,
          "to": 39
        }
      },
      "to": {
        "file": "src/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 315,
          "to": 358
        },
        "columns": {
          "from": 3,
          "to": 3
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "compressJpeg",
      "declaration": "public void compressJpeg(BufferedImage bufferedImage, CompoundDirectory exif, float quality, File targetFile) throws IOException",
      "from": {
        "file": "src/at/favre/tools/dconvert/converters/scaling/ImageHandler.java",
        "lines": {
          "from": 120,
          "to": 120
        },
        "columns": {
          "from": 11,
          "to": 22
        }
      },
      "to": {
        "file": "src/at/favre/tools/dconvert/converters/scaling/ImageHandler.java",
        "lines": {
          "from": 131,
          "to": 151
        },
        "columns": {
          "from": 3,
          "to": 3
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "verticalFromWorkToDst",
      "declaration": "private void verticalFromWorkToDst(byte[][] workPixels, byte[] outPixels, int start, int delta)",
      "from": {
        "file": "src/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 171,
          "to": 171
        },
        "columns": {
          "from": 5,
          "to": 25
        }
      },
      "to": {
        "file": "src/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 315,
          "to": 358
        },
        "columns": {
          "from": 3,
          "to": 3
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "JPEGSegmentUtil.readSegments",
      "declaration": "public static List\u003cJPEGSegment\u003e readSegments(final ImageInputStream stream, final int marker, final String identifier) throws IOException",
      "from": {
        "file": "src/at/favre/tools/dconvert/util/ImageUtil.java",
        "lines": {
          "from": 70,
          "to": 70
        },
        "columns": {
          "from": 57,
          "to": 68
        }
      },
      "to": {
        "file": "src/com/twelvemonkeys/imageio/metadata/jpeg/JPEGSegmentUtil.java",
        "lines": {
          "from": 82,
          "to": 84
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "readExif",
      "declaration": "private static CompoundDirectory readExif(File input) throws IOException",
      "from": {
        "file": "src/at/favre/tools/dconvert/util/ImageUtil.java",
        "lines": {
          "from": 63,
          "to": 63
        },
        "columns": {
          "from": 74,
          "to": 81
        }
      },
      "to": {
        "file": "src/at/favre/tools/dconvert/util/ImageUtil.java",
        "lines": {
          "from": 66,
          "to": 84
        },
        "columns": {
          "from": 3,
          "to": 3
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "new ImageHandler(args).saveToFile",
      "declaration": "public List\u003cFile\u003e saveToFile(File targetFile, LoadedImage imageData, Dimension targetDimension, boolean isNinePatch) throws Exception",
      "from": {
        "file": "src/at/favre/tools/dconvert/converters/APlatformConverter.java",
        "lines": {
          "from": 176,
          "to": 176
        },
        "columns": {
          "from": 32,
          "to": 41
        }
      },
      "to": {
        "file": "src/at/favre/tools/dconvert/converters/scaling/ImageHandler.java",
        "lines": {
          "from": 58,
          "to": 129
        },
        "columns": {
          "from": 3,
          "to": 3
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "doFilter",
      "declaration": "public BufferedImage doFilter(BufferedImage srcImg, BufferedImage dest, int dstWidth, int dstHeight)",
      "from": {
        "file": "src/com/mortennobel/imagescaling/AdvancedResizeOp.java",
        "lines": {
          "from": 56,
          "to": 56
        },
        "columns": {
          "from": 35,
          "to": 42
        }
      },
      "to": {
        "file": "src/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 97,
          "to": 197
        },
        "columns": {
          "from": 3,
          "to": 3
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "ImageUtil.loadImage",
      "declaration": "public static LoadedImage loadImage(File input) throws Exception",
      "from": {
        "file": "src/at/favre/tools/dconvert/converters/APlatformConverter.java",
        "lines": {
          "from": 42,
          "to": 42
        },
        "columns": {
          "from": 41,
          "to": 49
        }
      },
      "to": {
        "file": "src/at/favre/tools/dconvert/util/ImageUtil.java",
        "lines": {
          "from": 47,
          "to": 64
        },
        "columns": {
          "from": 3,
          "to": 3
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "convertImage",
      "declaration": "private void convertImage(Arguments args, LoadedImage imageData, boolean isNinePatch, StringBuilder log, List\u003cFile\u003e allResultingFiles, Dimension dimension, File imageFile) throws Exception",
      "from": {
        "file": "src/at/favre/tools/dconvert/converters/APlatformConverter.java",
        "lines": {
          "from": 101,
          "to": 102
        },
        "columns": {
          "from": 13,
          "to": 24
        }
      },
      "to": {
        "file": "src/at/favre/tools/dconvert/converters/APlatformConverter.java",
        "lines": {
          "from": 166,
          "to": 191
        },
        "columns": {
          "from": 3,
          "to": 3
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "DensityBucketUtil.getDensityBuckets",
      "declaration": "public static Map\u003cT, Dimension\u003e getDensityBuckets(java.util.List\u003cT\u003e densities, Dimension srcDimension, Arguments args, float scale, boolean isNinePatch) throws IOException",
      "from": {
        "file": "src/at/favre/tools/dconvert/converters/APlatformConverter.java",
        "lines": {
          "from": 63,
          "to": 68
        },
        "columns": {
          "from": 29,
          "to": 45
        }
      },
      "to": {
        "file": "src/at/favre/tools/dconvert/util/DensityBucketUtil.java",
        "lines": {
          "from": 35,
          "to": 56
        },
        "columns": {
          "from": 3,
          "to": 3
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "setProgress",
      "declaration": "private void setProgress()",
      "from": {
        "file": "src/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 355,
          "to": 355
        },
        "columns": {
          "from": 9,
          "to": 19
        }
      },
      "to": {
        "file": "src/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 495,
          "to": 497
        },
        "columns": {
          "from": 3,
          "to": 3
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "setProgress",
      "declaration": "private void setProgress()",
      "from": {
        "file": "src/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 441,
          "to": 441
        },
        "columns": {
          "from": 9,
          "to": 19
        }
      },
      "to": {
        "file": "src/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 495,
          "to": 497
        },
        "columns": {
          "from": 3,
          "to": 3
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "horizontallyFromSrcToWork",
      "declaration": "private void horizontallyFromSrcToWork(BufferedImage srcImg, byte[][] workPixels, int start, int delta)",
      "from": {
        "file": "src/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 152,
          "to": 152
        },
        "columns": {
          "from": 5,
          "to": 29
        }
      },
      "to": {
        "file": "src/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 394,
          "to": 444
        },
        "columns": {
          "from": 3,
          "to": 3
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "horizontallyFromSrcToWork",
      "declaration": "private void horizontallyFromSrcToWork(BufferedImage srcImg, byte[][] workPixels, int start, int delta)",
      "from": {
        "file": "src/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 147,
          "to": 147
        },
        "columns": {
          "from": 19,
          "to": 43
        }
      },
      "to": {
        "file": "src/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 394,
          "to": 444
        },
        "columns": {
          "from": 3,
          "to": 3
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "readSegments",
      "declaration": "public static List\u003cJPEGSegment\u003e readSegments(final ImageInputStream stream, final Map\u003cInteger, List\u003cString\u003e\u003e segmentIdentifiers) throws IOException",
      "from": {
        "file": "src/com/twelvemonkeys/imageio/metadata/jpeg/JPEGSegmentUtil.java",
        "lines": {
          "from": 83,
          "to": 83
        },
        "columns": {
          "from": 16,
          "to": 27
        }
      },
      "to": {
        "file": "src/com/twelvemonkeys/imageio/metadata/jpeg/JPEGSegmentUtil.java",
        "lines": {
          "from": 101,
          "to": 129
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    }
  ]
}