<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.composite</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.ColorModel</color><color=#f8f8f2>;</color>

<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>MiscComposite</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Composite</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BLEND</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ADD</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SUBTRACT</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DIFFERENCE</color> <color=#f92672>=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MULTIPLY</color> <color=#f92672>=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DARKEN</color> <color=#f92672>=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BURN</color> <color=#f92672>=</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>COLOR_BURN</color> <color=#f92672>=</color> <color=#ae81ff>7</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SCREEN</color> <color=#f92672>=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LIGHTEN</color> <color=#f92672>=</color> <color=#ae81ff>9</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DODGE</color> <color=#f92672>=</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>COLOR_DODGE</color> <color=#f92672>=</color> <color=#ae81ff>11</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>HUE</color> <color=#f92672>=</color> <color=#ae81ff>12</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SATURATION</color> <color=#f92672>=</color> <color=#ae81ff>13</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>VALUE</color> <color=#f92672>=</color> <color=#ae81ff>14</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>COLOR</color> <color=#f92672>=</color> <color=#ae81ff>15</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>OVERLAY</color> <color=#f92672>=</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SOFT_LIGHT</color> <color=#f92672>=</color> <color=#ae81ff>17</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>HARD_LIGHT</color> <color=#f92672>=</color> <color=#ae81ff>18</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>PIN_LIGHT</color> <color=#f92672>=</color> <color=#ae81ff>19</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>EXCLUSION</color> <color=#f92672>=</color> <color=#ae81ff>20</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>NEGATION</color> <color=#f92672>=</color> <color=#ae81ff>21</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>AVERAGE</color> <color=#f92672>=</color> <color=#ae81ff>22</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>STENCIL</color> <color=#f92672>=</color> <color=#ae81ff>23</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SILHOUETTE</color> <color=#f92672>=</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MIN_RULE</color> <color=#f92672>=</color> <color=#f8f8f2>BLEND</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAX_RULE</color> <color=#f92672>=</color> <color=#f8f8f2>SILHOUETTE</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>RULE_NAMES</color> <color=#f92672>=</color> <color=#f8f8f2>{</color>
            <color=#e6db74>"Normal"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Add"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Subtract"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Difference"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Multiply"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Darken"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Burn"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Color Burn"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Screen"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Lighten"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Dodge"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Color Dodge"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Hue"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Saturation"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Brightness"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Color"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Overlay"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Soft Light"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Hard Light"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Pin Light"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Exclusion"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Negation"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Average"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Stencil"</color><color=#f8f8f2>,</color>
            <color=#e6db74>"Silhouette"</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>};</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>float</color> <color=#f8f8f2>extraAlpha</color><color=#f8f8f2>;</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>int</color> <color=#f8f8f2>rule</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#a6e22e>MiscComposite</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>rule</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>rule</color><color=#f8f8f2>,</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#a6e22e>MiscComposite</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>rule</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>alpha</color> <color=#f92672><</color> <color=#ae81ff>0.0f</color> <color=#f92672>||</color> <color=#f8f8f2>alpha</color> <color=#f92672>></color> <color=#ae81ff>1.0f</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"alpha value out of range"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rule</color> <color=#f92672><</color> <color=#f8f8f2>MIN_RULE</color> <color=#f92672>||</color> <color=#f8f8f2>rule</color> <color=#f92672>></color> <color=#f8f8f2>MAX_RULE</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"unknown composite rule"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>rule</color> <color=#f92672>=</color> <color=#f8f8f2>rule</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>extraAlpha</color> <color=#f92672>=</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Composite</color> <color=#a6e22e>getInstance</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>rule</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>rule</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>.</color><color=#a6e22e>BLEND</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>AlphaComposite</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>AlphaComposite</color><color=#f8f8f2>.</color><color=#a6e22e>SRC_OVER</color><color=#f8f8f2>,</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>.</color><color=#a6e22e>ADD</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>AddComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>.</color><color=#a6e22e>SUBTRACT</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>SubtractComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>.</color><color=#a6e22e>DIFFERENCE</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>DifferenceComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>.</color><color=#a6e22e>MULTIPLY</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>MultiplyComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>.</color><color=#a6e22e>DARKEN</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>DarkenComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>.</color><color=#a6e22e>BURN</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BurnComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>.</color><color=#a6e22e>COLOR_BURN</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ColorBurnComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>.</color><color=#a6e22e>SCREEN</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ScreenComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>.</color><color=#a6e22e>LIGHTEN</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>LightenComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>.</color><color=#a6e22e>DODGE</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>DodgeComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>.</color><color=#a6e22e>COLOR_DODGE</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ColorDodgeComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>.</color><color=#a6e22e>HUE</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>HueComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>.</color><color=#a6e22e>SATURATION</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>SaturationComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>.</color><color=#a6e22e>VALUE</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ValueComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>.</color><color=#a6e22e>COLOR</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ColorComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>.</color><color=#a6e22e>OVERLAY</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>OverlayComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>.</color><color=#a6e22e>SOFT_LIGHT</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>SoftLightComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>.</color><color=#a6e22e>HARD_LIGHT</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>HardLightComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>.</color><color=#a6e22e>PIN_LIGHT</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>PinLightComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>.</color><color=#a6e22e>EXCLUSION</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ExclusionComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>.</color><color=#a6e22e>NEGATION</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>NegationComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>.</color><color=#a6e22e>AVERAGE</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>AverageComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>.</color><color=#a6e22e>STENCIL</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>AlphaComposite</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>AlphaComposite</color><color=#f8f8f2>.</color><color=#a6e22e>DST_IN</color><color=#f8f8f2>,</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>.</color><color=#a6e22e>SILHOUETTE</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>AlphaComposite</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>AlphaComposite</color><color=#f8f8f2>.</color><color=#a6e22e>DST_OUT</color><color=#f8f8f2>,</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>rule</color><color=#f8f8f2>,</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>CompositeContext</color> <color=#a6e22e>createContext</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>srcColorModel</color><color=#f8f8f2>,</color> <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>dstColorModel</color><color=#f8f8f2>,</color> <color=#f8f8f2>RenderingHints</color> <color=#f8f8f2>hints</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>MiscCompositeContext</color><color=#f8f8f2>(</color><color=#f8f8f2>rule</color><color=#f8f8f2>,</color> <color=#f8f8f2>extraAlpha</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcColorModel</color><color=#f8f8f2>,</color> <color=#f8f8f2>dstColorModel</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getAlpha</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>extraAlpha</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getRule</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>rule</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>hashCode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>floatToIntBits</color><color=#f8f8f2>(</color><color=#f8f8f2>extraAlpha</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#ae81ff>31</color> <color=#f92672>+</color> <color=#f8f8f2>rule</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>MiscComposite</color><color=#f8f8f2>))</color> <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>MiscComposite</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>MiscComposite</color><color=#f8f8f2>)</color> <color=#f8f8f2>o</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rule</color> <color=#f92672>!=</color> <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>rule</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>extraAlpha</color> <color=#f92672>!=</color> <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>extraAlpha</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>