<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.composite</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.ColorModel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.Raster</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.WritableRaster</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A special Composite used for drawing "marching ants". It draws the ants at the 127 contour of the</color>
<color=#75715e> * alpha channel of the source. This can only be used on TYPE_INT_RGBA images.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>ContourComposite</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Composite</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ContourComposite</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>offset</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>CompositeContext</color> <color=#a6e22e>createContext</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>srcColorModel</color><color=#f8f8f2>,</color> <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>dstColorModel</color><color=#f8f8f2>,</color> <color=#f8f8f2>RenderingHints</color> <color=#f8f8f2>hints</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ContourCompositeContext</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcColorModel</color><color=#f8f8f2>,</color> <color=#f8f8f2>dstColorModel</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>hashCode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>ContourComposite</color><color=#f8f8f2>))</color> <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>

<color=#66d9ef>class</color> <color=#a6e22e>ContourCompositeContext</color> <color=#66d9ef>implements</color> <color=#f8f8f2>CompositeContext</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ContourCompositeContext</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>srcColorModel</color><color=#f8f8f2>,</color> <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>dstColorModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>offset</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>dispose</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>compose</color><color=#f8f8f2>(</color><color=#f8f8f2>Raster</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>Raster</color> <color=#f8f8f2>dstIn</color><color=#f8f8f2>,</color> <color=#f8f8f2>WritableRaster</color> <color=#f8f8f2>dstOut</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getMinX</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getMinY</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>w</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>h</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>srcPix</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>srcPix2</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>dstInPix</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>dstOutPix</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>w</color> <color=#f92672>*</color> <color=#ae81ff>4</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>h</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>srcPix</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getPixels</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcPix</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>dstInPix</color> <color=#f92672>=</color> <color=#f8f8f2>dstIn</color><color=#f8f8f2>.</color><color=#a6e22e>getPixels</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>dstInPix</color><color=#f8f8f2>);</color>

            <color=#66d9ef>int</color> <color=#f8f8f2>lastAlpha</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#f8f8f2>w</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>alpha</color> <color=#f92672>=</color> <color=#f8f8f2>srcPix</color><color=#f92672>[</color><color=#f8f8f2>k</color> <color=#f92672>+</color> <color=#ae81ff>3</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>alphaAbove</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>!=</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f8f8f2>srcPix2</color><color=#f92672>[</color><color=#f8f8f2>k</color> <color=#f92672>+</color> <color=#ae81ff>3</color><color=#f92672>]</color> <color=#f8f8f2>:</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>;</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>!=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>j</color> <color=#f92672>!=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>((</color><color=#f8f8f2>alpha</color> <color=#f92672>^</color> <color=#f8f8f2>lastAlpha</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0x80</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color>
                        <color=#f92672>||</color> <color=#f8f8f2>((</color><color=#f8f8f2>alpha</color> <color=#f92672>^</color> <color=#f8f8f2>alphaAbove</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0x80</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#ae81ff>10</color> <color=#f92672>></color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>dstOutPix</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>0x00</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>dstOutPix</color><color=#f92672>[</color><color=#f8f8f2>k</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>0x00</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>dstOutPix</color><color=#f92672>[</color><color=#f8f8f2>k</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>0x00</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>dstOutPix</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>dstOutPix</color><color=#f92672>[</color><color=#f8f8f2>k</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>dstOutPix</color><color=#f92672>[</color><color=#f8f8f2>k</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>0x7f</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                    <color=#f8f8f2>dstOutPix</color><color=#f92672>[</color><color=#f8f8f2>k</color> <color=#f92672>+</color> <color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>dstOutPix</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>dstInPix</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>dstOutPix</color><color=#f92672>[</color><color=#f8f8f2>k</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>dstInPix</color><color=#f92672>[</color><color=#f8f8f2>k</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>dstOutPix</color><color=#f92672>[</color><color=#f8f8f2>k</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>dstInPix</color><color=#f92672>[</color><color=#f8f8f2>k</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#75715e>//					if ( dstOut == dstIn )</color>
                    <color=#f8f8f2>dstOutPix</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>dstOutPix</color><color=#f92672>[</color><color=#f8f8f2>k</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>dstOutPix</color><color=#f92672>[</color><color=#f8f8f2>k</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>dstOutPix</color><color=#f92672>[</color><color=#f8f8f2>k</color> <color=#f92672>+</color> <color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                    <color=#75715e>//					else</color>
                    <color=#75715e>//						dstOutPix[k+3] = dstInPix[k+3];</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>lastAlpha</color> <color=#f92672>=</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>k</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>dstOut</color><color=#f8f8f2>.</color><color=#a6e22e>setPixels</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>dstOutPix</color><color=#f8f8f2>);</color>

            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>srcPix</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>srcPix</color> <color=#f92672>=</color> <color=#f8f8f2>srcPix2</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>srcPix2</color> <color=#f92672>=</color> <color=#f8f8f2>t</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>