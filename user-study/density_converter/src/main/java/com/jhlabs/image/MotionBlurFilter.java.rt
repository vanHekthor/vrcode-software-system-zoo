<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.AffineTransform</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.Point2D</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A filter which produces motion blur the slow, but higher-quality way.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>MotionBlurFilter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractBufferedImageOp</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>angle</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>falloff</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>distance</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>zoom</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>rotation</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>wrapEdges</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>premultiplyAlpha</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Construct a MotionBlurFilter.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>MotionBlurFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Construct a MotionBlurFilter.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param distance the distance of blur.</color>
<color=#75715e>     * @param angle    the angle of blur.</color>
<color=#75715e>     * @param rotation the angle of rotation.</color>
<color=#75715e>     * @param zoom     the zoom factor.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>MotionBlurFilter</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>distance</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>angle</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>rotation</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>zoom</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>distance</color> <color=#f92672>=</color> <color=#f8f8f2>distance</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>angle</color> <color=#f92672>=</color> <color=#f8f8f2>angle</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>rotation</color> <color=#f92672>=</color> <color=#f8f8f2>rotation</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>zoom</color> <color=#f92672>=</color> <color=#f8f8f2>zoom</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Specifies the angle of blur.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param angle the angle of blur.</color>
<color=#75715e>     * @angle</color>
<color=#75715e>     * @see #getAngle</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setAngle</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>angle</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>angle</color> <color=#f92672>=</color> <color=#f8f8f2>angle</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the angle of blur.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the angle of blur.</color>
<color=#75715e>     * @see #setAngle</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getAngle</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>angle</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the distance of blur.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param distance the distance of blur.</color>
<color=#75715e>     * @see #getDistance</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setDistance</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>distance</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>distance</color> <color=#f92672>=</color> <color=#f8f8f2>distance</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the distance of blur.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the distance of blur.</color>
<color=#75715e>     * @see #setDistance</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getDistance</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>distance</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the blur rotation.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param rotation the angle of rotation.</color>
<color=#75715e>     * @see #getRotation</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setRotation</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>rotation</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>rotation</color> <color=#f92672>=</color> <color=#f8f8f2>rotation</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the blur rotation.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the angle of rotation.</color>
<color=#75715e>     * @see #setRotation</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getRotation</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>rotation</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the blur zoom.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param zoom the zoom factor.</color>
<color=#75715e>     * @see #getZoom</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setZoom</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>zoom</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>zoom</color> <color=#f92672>=</color> <color=#f8f8f2>zoom</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the blur zoom.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the zoom factor.</color>
<color=#75715e>     * @see #setZoom</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getZoom</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>zoom</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set whether to wrap at the image edges.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param wrapEdges true if it should wrap.</color>
<color=#75715e>     * @see #getWrapEdges</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setWrapEdges</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>wrapEdges</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>wrapEdges</color> <color=#f92672>=</color> <color=#f8f8f2>wrapEdges</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get whether to wrap at the image edges.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return true if it should wrap.</color>
<color=#75715e>     * @see #setWrapEdges</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getWrapEdges</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>wrapEdges</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set whether to premultiply the alpha channel.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param premultiplyAlpha true to premultiply the alpha</color>
<color=#75715e>     * @see #getPremultiplyAlpha</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setPremultiplyAlpha</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>premultiplyAlpha</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>premultiplyAlpha</color> <color=#f92672>=</color> <color=#f8f8f2>premultiplyAlpha</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get whether to premultiply the alpha channel.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return true to premultiply the alpha</color>
<color=#75715e>     * @see #setPremultiplyAlpha</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getPremultiplyAlpha</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>premultiplyAlpha</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dst</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dst</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>dst</color> <color=#f92672>=</color> <color=#f8f8f2>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#f8f8f2>height</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>outPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#f8f8f2>height</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>);</color>

        <color=#66d9ef>float</color> <color=#f8f8f2>sinAngle</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sin</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>);</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>cosAngle</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>cos</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>);</color>

        <color=#66d9ef>float</color> <color=#f8f8f2>total</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>cx</color> <color=#f92672>=</color> <color=#f8f8f2>width</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>cy</color> <color=#f92672>=</color> <color=#f8f8f2>height</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

        <color=#66d9ef>float</color> <color=#f8f8f2>imageRadius</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sqrt</color><color=#f8f8f2>(</color><color=#f8f8f2>cx</color> <color=#f92672>*</color> <color=#f8f8f2>cx</color> <color=#f92672>+</color> <color=#f8f8f2>cy</color> <color=#f92672>*</color> <color=#f8f8f2>cy</color><color=#f8f8f2>);</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>translateX</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>distance</color> <color=#f92672>*</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>cos</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>));</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>translateY</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>distance</color> <color=#f92672>*</color> <color=#f92672>-</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sin</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>));</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>maxDistance</color> <color=#f92672>=</color> <color=#f8f8f2>distance</color> <color=#f92672>+</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>abs</color><color=#f8f8f2>(</color><color=#f8f8f2>rotation</color> <color=#f92672>*</color> <color=#f8f8f2>imageRadius</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>zoom</color> <color=#f92672>*</color> <color=#f8f8f2>imageRadius</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>repetitions</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>maxDistance</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>AffineTransform</color> <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AffineTransform</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>Point2D</color><color=#f8f8f2>.</color><color=#a6e22e>Float</color> <color=#f8f8f2>p</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Point2D</color><color=#f8f8f2>.</color><color=#a6e22e>Float</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>premultiplyAlpha</color><color=#f8f8f2>)</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>premultiply</color><color=#f8f8f2>(</color><color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>repetitions</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>newX</color> <color=#f92672>=</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>newY</color> <color=#f92672>=</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>float</color> <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>i</color> <color=#f92672>/</color> <color=#f8f8f2>repetitions</color><color=#f8f8f2>;</color>

                    <color=#f8f8f2>p</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>=</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>p</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>=</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>t</color><color=#f8f8f2>.</color><color=#a6e22e>setToIdentity</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>t</color><color=#f8f8f2>.</color><color=#a6e22e>translate</color><color=#f8f8f2>(</color><color=#f8f8f2>cx</color> <color=#f92672>+</color> <color=#f8f8f2>f</color> <color=#f92672>*</color> <color=#f8f8f2>translateX</color><color=#f8f8f2>,</color> <color=#f8f8f2>cy</color> <color=#f92672>+</color> <color=#f8f8f2>f</color> <color=#f92672>*</color> <color=#f8f8f2>translateY</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>float</color> <color=#f8f8f2>s</color> <color=#f92672>=</color> <color=#ae81ff>1</color> <color=#f92672>-</color> <color=#f8f8f2>zoom</color> <color=#f92672>*</color> <color=#f8f8f2>f</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>t</color><color=#f8f8f2>.</color><color=#a6e22e>scale</color><color=#f8f8f2>(</color><color=#f8f8f2>s</color><color=#f8f8f2>,</color> <color=#f8f8f2>s</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rotation</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>t</color><color=#f8f8f2>.</color><color=#a6e22e>rotate</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>rotation</color> <color=#f92672>*</color> <color=#f8f8f2>f</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>t</color><color=#f8f8f2>.</color><color=#a6e22e>translate</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>cx</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#f8f8f2>cy</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>t</color><color=#f8f8f2>.</color><color=#a6e22e>transform</color><color=#f8f8f2>(</color><color=#f8f8f2>p</color><color=#f8f8f2>,</color> <color=#f8f8f2>p</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>newX</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>p</color><color=#f8f8f2>.</color><color=#a6e22e>x</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>newY</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>p</color><color=#f8f8f2>.</color><color=#a6e22e>y</color><color=#f8f8f2>;</color>

                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newX</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>newX</color> <color=#f92672>>=</color> <color=#f8f8f2>width</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>wrapEdges</color><color=#f8f8f2>)</color> <color=#f8f8f2>newX</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>mod</color><color=#f8f8f2>(</color><color=#f8f8f2>newX</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>);</color>
                        <color=#66d9ef>else</color> <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newY</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>newY</color> <color=#f92672>>=</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>wrapEdges</color><color=#f8f8f2>)</color> <color=#f8f8f2>newY</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>mod</color><color=#f8f8f2>(</color><color=#f8f8f2>newY</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>
                        <color=#66d9ef>else</color> <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>

                    <color=#f8f8f2>count</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>newY</color> <color=#f92672>*</color> <color=#f8f8f2>width</color> <color=#f92672>+</color> <color=#f8f8f2>newX</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>a</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>r</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>g</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>b</color> <color=#f92672>+=</color> <color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>count</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>outPixels</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672>/</color> <color=#f8f8f2>count</color><color=#f8f8f2>));</color>
                    <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672>/</color> <color=#f8f8f2>count</color><color=#f8f8f2>));</color>
                    <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>g</color> <color=#f92672>/</color> <color=#f8f8f2>count</color><color=#f8f8f2>));</color>
                    <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color> <color=#f92672>/</color> <color=#f8f8f2>count</color><color=#f8f8f2>));</color>
                    <color=#f8f8f2>outPixels</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>g</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#f8f8f2>index</color><color=#f92672>++</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>premultiplyAlpha</color><color=#f8f8f2>)</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>unpremultiply</color><color=#f8f8f2>(</color><color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>setRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>dst</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>dst</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#e6db74>"Blur/Motion Blur..."</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>