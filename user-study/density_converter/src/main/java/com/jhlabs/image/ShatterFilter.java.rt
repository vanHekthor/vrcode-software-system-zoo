<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.AffineTransform</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.Point2D</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Random</color><color=#f8f8f2>;</color>

<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ShatterFilter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractBufferedImageOp</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>centreX</color> <color=#f92672>=</color> <color=#ae81ff>0.5f</color><color=#f8f8f2>,</color> <color=#f8f8f2>centreY</color> <color=#f92672>=</color> <color=#ae81ff>0.5f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>distance</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>transition</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>rotation</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>zoom</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>startAlpha</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>endAlpha</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>iterations</color> <color=#f92672>=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>tile</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ShatterFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setTransition</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>transition</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>transition</color> <color=#f92672>=</color> <color=#f8f8f2>transition</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getTransition</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>transition</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setDistance</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>distance</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>distance</color> <color=#f92672>=</color> <color=#f8f8f2>distance</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getDistance</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>distance</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setRotation</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>rotation</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>rotation</color> <color=#f92672>=</color> <color=#f8f8f2>rotation</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getRotation</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>rotation</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setZoom</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>zoom</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>zoom</color> <color=#f92672>=</color> <color=#f8f8f2>zoom</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getZoom</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>zoom</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setStartAlpha</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>startAlpha</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>startAlpha</color> <color=#f92672>=</color> <color=#f8f8f2>startAlpha</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getStartAlpha</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>startAlpha</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setEndAlpha</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>endAlpha</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>endAlpha</color> <color=#f92672>=</color> <color=#f8f8f2>endAlpha</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getEndAlpha</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>endAlpha</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setCentreX</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>centreX</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>centreX</color> <color=#f92672>=</color> <color=#f8f8f2>centreX</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getCentreX</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>centreX</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setCentreY</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>centreY</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>centreY</color> <color=#f92672>=</color> <color=#f8f8f2>centreY</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getCentreY</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>centreY</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setCentre</color><color=#f8f8f2>(</color><color=#f8f8f2>Point2D</color> <color=#f8f8f2>centre</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>centreX</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>centre</color><color=#f8f8f2>.</color><color=#a6e22e>getX</color><color=#f8f8f2>();</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>centreY</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>centre</color><color=#f8f8f2>.</color><color=#a6e22e>getY</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Point2D</color> <color=#a6e22e>getCentre</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Point2D</color><color=#f8f8f2>.</color><color=#a6e22e>Float</color><color=#f8f8f2>(</color><color=#f8f8f2>centreX</color><color=#f8f8f2>,</color> <color=#f8f8f2>centreY</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setIterations</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>iterations</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>iterations</color> <color=#f92672>=</color> <color=#f8f8f2>iterations</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getIterations</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>iterations</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setTile</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>tile</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>tile</color> <color=#f92672>=</color> <color=#f8f8f2>tile</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getTile</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>tile</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>Tile</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>vx</color><color=#f8f8f2>,</color> <color=#f8f8f2>vy</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>rotation</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>Shape</color> <color=#f8f8f2>shape</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dst</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dst</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>dst</color> <color=#f92672>=</color> <color=#f8f8f2>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>cx</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>()</color> <color=#f92672>*</color> <color=#f8f8f2>centreX</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>cy</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>()</color> <color=#f92672>*</color> <color=#f8f8f2>centreY</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>imageRadius</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sqrt</color><color=#f8f8f2>(</color><color=#f8f8f2>cx</color> <color=#f92672>*</color> <color=#f8f8f2>cx</color> <color=#f92672>+</color> <color=#f8f8f2>cy</color> <color=#f92672>*</color> <color=#f8f8f2>cy</color><color=#f8f8f2>);</color>

        <color=#75715e>//        BufferedImage[] tiles = new BufferedImage[iterations];</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>numTiles</color> <color=#f92672>=</color> <color=#f8f8f2>iterations</color> <color=#f92672>*</color> <color=#f8f8f2>iterations</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>Tile</color><color=#f92672>[]</color> <color=#f8f8f2>shapes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Tile</color><color=#f92672>[</color><color=#f8f8f2>numTiles</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>rx</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>float</color><color=#f92672>[</color><color=#f8f8f2>numTiles</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>ry</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>float</color><color=#f92672>[</color><color=#f8f8f2>numTiles</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>rz</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>float</color><color=#f92672>[</color><color=#f8f8f2>numTiles</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>Graphics2D</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>dst</color><color=#f8f8f2>.</color><color=#a6e22e>createGraphics</color><color=#f8f8f2>();</color>
        <color=#75715e>//		g.drawImage( src, null, null );</color>

        <color=#f8f8f2>Random</color> <color=#f8f8f2>random</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Random</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>lastx</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>lasty</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#75715e>/*</color>
<color=#75715e>            for ( int i = 0; i <= numTiles; i++ ) {</color>
<color=#75715e>                double angle = (double)i * 2*Math.PI / numTiles;</color>
<color=#75715e>                float x = cx + width*(float)Math.cos(angle);</color>
<color=#75715e>                float y = cy + height*(float)Math.sin(angle);</color>
<color=#75715e>                g.setColor( Color.black );</color>
<color=#75715e>                g.setColor( Color.getHSBColor( (float)angle, 1, 1 ) );</color>
<color=#75715e>    			if ( i != 0 ) {</color>
<color=#75715e>    				rz[i-1] = tile*(2*random.nextFloat()-1);</color>
<color=#75715e>    				ry[i-1] = tile*random.nextFloat();</color>
<color=#75715e>    				rz[i-1] = tile*random.nextFloat();</color>
<color=#75715e>                    GeneralPath p = new GeneralPath();</color>
<color=#75715e>                    p.moveTo( cx, cy );</color>
<color=#75715e>                    p.lineTo( lastx, lasty );</color>
<color=#75715e>                    p.lineTo( x, y );</color>
<color=#75715e>                    p.closePath();</color>
<color=#75715e>    				shapes[i-1] = p;</color>
<color=#75715e>    //                Rectangle r = p.getBounds();</color>
<color=#75715e>    //                r.intersect( r, new Rectangle( (int)width, (int)height ), r );</color>
<color=#75715e>                }</color>
<color=#75715e>                lastx = x;</color>
<color=#75715e>                lasty = y;</color>
<color=#75715e>            }</color>
<color=#75715e>    */</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>iterations</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>y1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>height</color> <color=#f92672>*</color> <color=#f8f8f2>y</color> <color=#f92672>/</color> <color=#f8f8f2>iterations</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>y2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>height</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>y</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>iterations</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>iterations</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672>*</color> <color=#f8f8f2>iterations</color> <color=#f92672>+</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>x1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#f8f8f2>x</color> <color=#f92672>/</color> <color=#f8f8f2>iterations</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>x2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>iterations</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>rx</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>tile</color> <color=#f92672>*</color> <color=#f8f8f2>random</color><color=#f8f8f2>.</color><color=#a6e22e>nextFloat</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>ry</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>tile</color> <color=#f92672>*</color> <color=#f8f8f2>random</color><color=#f8f8f2>.</color><color=#a6e22e>nextFloat</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>rx</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>ry</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>rz</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>tile</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>random</color><color=#f8f8f2>.</color><color=#a6e22e>nextFloat</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>Shape</color> <color=#f8f8f2>p</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rectangle</color><color=#f8f8f2>(</color><color=#f8f8f2>x1</color><color=#f8f8f2>,</color> <color=#f8f8f2>y1</color><color=#f8f8f2>,</color> <color=#f8f8f2>x2</color> <color=#f92672>-</color> <color=#f8f8f2>x1</color><color=#f8f8f2>,</color> <color=#f8f8f2>y2</color> <color=#f92672>-</color> <color=#f8f8f2>y1</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>shapes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Tile</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>shapes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>shape</color> <color=#f92672>=</color> <color=#f8f8f2>p</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>shapes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>x1</color> <color=#f92672>+</color> <color=#f8f8f2>x2</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#ae81ff>0.5f</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>shapes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>y1</color> <color=#f92672>+</color> <color=#f8f8f2>y2</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#ae81ff>0.5f</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>shapes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>vx</color> <color=#f92672>=</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>cx</color> <color=#f92672>-</color> <color=#f8f8f2>x</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>shapes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>vy</color> <color=#f92672>=</color> <color=#f8f8f2>height</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>cy</color> <color=#f92672>-</color> <color=#f8f8f2>y</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>shapes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>w</color> <color=#f92672>=</color> <color=#f8f8f2>x2</color> <color=#f92672>-</color> <color=#f8f8f2>x1</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>shapes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>h</color> <color=#f92672>=</color> <color=#f8f8f2>y2</color> <color=#f92672>-</color> <color=#f8f8f2>y1</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>numTiles</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>h</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>i</color> <color=#f92672>/</color> <color=#f8f8f2>numTiles</color><color=#f8f8f2>;</color>
            <color=#66d9ef>double</color> <color=#f8f8f2>angle</color> <color=#f92672>=</color> <color=#f8f8f2>h</color> <color=#f92672>*</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>PI</color><color=#f8f8f2>;</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>transition</color> <color=#f92672>*</color> <color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>cos</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>);</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#f8f8f2>transition</color> <color=#f92672>*</color> <color=#f8f8f2>height</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sin</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>Tile</color> <color=#f8f8f2>tile</color> <color=#f92672>=</color> <color=#f8f8f2>shapes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>Rectangle</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>tile</color><color=#f8f8f2>.</color><color=#a6e22e>shape</color><color=#f8f8f2>.</color><color=#a6e22e>getBounds</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>AffineTransform</color> <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>getTransform</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>tile</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>+</color> <color=#f8f8f2>transition</color> <color=#f92672>*</color> <color=#f8f8f2>tile</color><color=#f8f8f2>.</color><color=#a6e22e>vx</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#f8f8f2>tile</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>+</color> <color=#f8f8f2>transition</color> <color=#f92672>*</color> <color=#f8f8f2>tile</color><color=#f8f8f2>.</color><color=#a6e22e>vy</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>translate</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>);</color>
            <color=#75715e>//			g.translate( tile.w*0.5f, tile.h*0.5f );</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>rotate</color><color=#f8f8f2>(</color><color=#f8f8f2>transition</color> <color=#f92672>*</color> <color=#f8f8f2>rz</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
            <color=#75715e>//			g.scale( (float)Math.cos( transition * rx[i] ), (float)Math.cos( transition * ry[i] ) );</color>
            <color=#75715e>//			g.translate( -tile.w*0.5f, -tile.h*0.5f );</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>setColor</color><color=#f8f8f2>(</color><color=#f8f8f2>Color</color><color=#f8f8f2>.</color><color=#a6e22e>getHSBColor</color><color=#f8f8f2>(</color><color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>Shape</color> <color=#f8f8f2>clip</color> <color=#f92672>=</color> <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>getClip</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>clip</color><color=#f8f8f2>(</color><color=#f8f8f2>tile</color><color=#f8f8f2>.</color><color=#a6e22e>shape</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>setClip</color><color=#f8f8f2>(</color><color=#f8f8f2>clip</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>setTransform</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>dst</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#e6db74>"Transition/Shatter..."</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>