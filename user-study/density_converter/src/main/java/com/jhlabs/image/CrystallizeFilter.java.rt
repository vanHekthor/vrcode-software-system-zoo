<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A filter which applies a crystallizing effect to an image, by producing Voronoi cells filled with</color>
<color=#75715e> * colours from the image.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>CrystallizeFilter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>CellularFilter</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>edgeThickness</color> <color=#f92672>=</color> <color=#ae81ff>0.4f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>fadeEdges</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>edgeColor</color> <color=#f92672>=</color> <color=#ae81ff>0xff000000</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>CrystallizeFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>setScale</color><color=#f8f8f2>(</color><color=#ae81ff>16</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>setRandomness</color><color=#f8f8f2>(</color><color=#ae81ff>0.0f</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setEdgeThickness</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>edgeThickness</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>edgeThickness</color> <color=#f92672>=</color> <color=#f8f8f2>edgeThickness</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getEdgeThickness</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>edgeThickness</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setFadeEdges</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>fadeEdges</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>fadeEdges</color> <color=#f92672>=</color> <color=#f8f8f2>fadeEdges</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getFadeEdges</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>fadeEdges</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setEdgeColor</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>edgeColor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>edgeColor</color> <color=#f92672>=</color> <color=#f8f8f2>edgeColor</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getEdgeColor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>edgeColor</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getPixel</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>nx</color> <color=#f92672>=</color> <color=#f8f8f2>m00</color> <color=#f92672>*</color> <color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>m01</color> <color=#f92672>*</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>ny</color> <color=#f92672>=</color> <color=#f8f8f2>m10</color> <color=#f92672>*</color> <color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>m11</color> <color=#f92672>*</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>nx</color> <color=#f92672>/=</color> <color=#f8f8f2>scale</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>ny</color> <color=#f92672>/=</color> <color=#f8f8f2>scale</color> <color=#f92672>*</color> <color=#f8f8f2>stretch</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>nx</color> <color=#f92672>+=</color> <color=#ae81ff>1000</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>ny</color> <color=#f92672>+=</color> <color=#ae81ff>1000</color><color=#f8f8f2>;</color> <color=#75715e>// Reduce artifacts around 0,0</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#f8f8f2>evaluate</color><color=#f8f8f2>(</color><color=#f8f8f2>nx</color><color=#f8f8f2>,</color> <color=#f8f8f2>ny</color><color=#f8f8f2>);</color>

        <color=#66d9ef>float</color> <color=#f8f8f2>f1</color> <color=#f92672>=</color> <color=#f8f8f2>results</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>distance</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>f2</color> <color=#f92672>=</color> <color=#f8f8f2>results</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>distance</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>srcx</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>results</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>-</color> <color=#ae81ff>1000</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>scale</color><color=#f8f8f2>),</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>srcy</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>results</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>-</color> <color=#ae81ff>1000</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>scale</color><color=#f8f8f2>),</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>srcy</color> <color=#f92672>*</color> <color=#f8f8f2>width</color> <color=#f92672>+</color> <color=#f8f8f2>srcx</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>f2</color> <color=#f92672>-</color> <color=#f8f8f2>f1</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>edgeThickness</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>smoothStep</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>edgeThickness</color><color=#f8f8f2>,</color> <color=#f8f8f2>f</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fadeEdges</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>srcx</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>results</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>-</color> <color=#ae81ff>1000</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>scale</color><color=#f8f8f2>),</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>srcy</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>results</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>-</color> <color=#ae81ff>1000</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>scale</color><color=#f8f8f2>),</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>v2</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>srcy</color> <color=#f92672>*</color> <color=#f8f8f2>width</color> <color=#f92672>+</color> <color=#f8f8f2>srcx</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>v2</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>mixColors</color><color=#f8f8f2>(</color><color=#ae81ff>0.5f</color><color=#f8f8f2>,</color> <color=#f8f8f2>v2</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>mixColors</color><color=#f8f8f2>(</color><color=#f8f8f2>f</color><color=#f8f8f2>,</color> <color=#f8f8f2>v2</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>mixColors</color><color=#f8f8f2>(</color><color=#f8f8f2>f</color><color=#f8f8f2>,</color> <color=#f8f8f2>edgeColor</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>v</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#e6db74>"Pixellate/Crystallize..."</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>