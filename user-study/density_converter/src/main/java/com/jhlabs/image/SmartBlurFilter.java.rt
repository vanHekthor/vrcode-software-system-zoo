<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.Kernel</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A filter which performs a "smart blur". i.e. a blur which blurs smotth parts of the image while</color>
<color=#75715e> * preserving edges.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>SmartBlurFilter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractBufferedImageOp</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>hRadius</color> <color=#f92672>=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>vRadius</color> <color=#f92672>=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>threshold</color> <color=#f92672>=</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dst</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dst</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>dst</color> <color=#f92672>=</color> <color=#f8f8f2>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#f8f8f2>height</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>outPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#f8f8f2>height</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>Kernel</color> <color=#f8f8f2>kernel</color> <color=#f92672>=</color> <color=#f8f8f2>GaussianFilter</color><color=#f8f8f2>.</color><color=#a6e22e>makeKernel</color><color=#f8f8f2>(</color><color=#f8f8f2>hRadius</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>thresholdBlur</color><color=#f8f8f2>(</color><color=#f8f8f2>kernel</color><color=#f8f8f2>,</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>thresholdBlur</color><color=#f8f8f2>(</color><color=#f8f8f2>kernel</color><color=#f8f8f2>,</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>setRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>dst</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>dst</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Convolve with a kernel consisting of one row</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>thresholdBlur</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>Kernel</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>matrix</color> <color=#f92672>=</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>.</color><color=#a6e22e>getKernelData</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>cols</color> <color=#f92672>=</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>cols2</color> <color=#f92672>=</color> <color=#f8f8f2>cols</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>ioffset</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672>*</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>outIndex</color> <color=#f92672>=</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>moffset</color> <color=#f92672>=</color> <color=#f8f8f2>cols2</color><color=#f8f8f2>;</color>

                <color=#66d9ef>int</color> <color=#f8f8f2>rgb1</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>ioffset</color> <color=#f92672>+</color> <color=#f8f8f2>x</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>a1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb1</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>r1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb1</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>g1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb1</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>b1</color> <color=#f92672>=</color> <color=#f8f8f2>rgb1</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>af</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>rf</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>gf</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>bf</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>col</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>cols2</color><color=#f8f8f2>;</color> <color=#f8f8f2>col</color> <color=#f92672><=</color> <color=#f8f8f2>cols2</color><color=#f8f8f2>;</color> <color=#f8f8f2>col</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>float</color> <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#f8f8f2>matrix</color><color=#f92672>[</color><color=#f8f8f2>moffset</color> <color=#f92672>+</color> <color=#f8f8f2>col</color><color=#f92672>]</color><color=#f8f8f2>;</color>

                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>f</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>ix</color> <color=#f92672>=</color> <color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>col</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#ae81ff>0</color> <color=#f92672><=</color> <color=#f8f8f2>ix</color> <color=#f92672>&&</color> <color=#f8f8f2>ix</color> <color=#f92672><</color> <color=#f8f8f2>width</color><color=#f8f8f2>))</color> <color=#f8f8f2>ix</color> <color=#f92672>=</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>rgb2</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>ioffset</color> <color=#f92672>+</color> <color=#f8f8f2>ix</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>a2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb2</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>r2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb2</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>g2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb2</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>b2</color> <color=#f92672>=</color> <color=#f8f8f2>rgb2</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>

                        <color=#66d9ef>int</color> <color=#f8f8f2>d</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>d</color> <color=#f92672>=</color> <color=#f8f8f2>a1</color> <color=#f92672>-</color> <color=#f8f8f2>a2</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>d</color> <color=#f92672>>=</color> <color=#f92672>-</color><color=#f8f8f2>threshold</color> <color=#f92672>&&</color> <color=#f8f8f2>d</color> <color=#f92672><=</color> <color=#f8f8f2>threshold</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>a</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color> <color=#f92672>*</color> <color=#f8f8f2>a2</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>af</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color>
                        <color=#f8f8f2>d</color> <color=#f92672>=</color> <color=#f8f8f2>r1</color> <color=#f92672>-</color> <color=#f8f8f2>r2</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>d</color> <color=#f92672>>=</color> <color=#f92672>-</color><color=#f8f8f2>threshold</color> <color=#f92672>&&</color> <color=#f8f8f2>d</color> <color=#f92672><=</color> <color=#f8f8f2>threshold</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>r</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color> <color=#f92672>*</color> <color=#f8f8f2>r2</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>rf</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color>
                        <color=#f8f8f2>d</color> <color=#f92672>=</color> <color=#f8f8f2>g1</color> <color=#f92672>-</color> <color=#f8f8f2>g2</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>d</color> <color=#f92672>>=</color> <color=#f92672>-</color><color=#f8f8f2>threshold</color> <color=#f92672>&&</color> <color=#f8f8f2>d</color> <color=#f92672><=</color> <color=#f8f8f2>threshold</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>g</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color> <color=#f92672>*</color> <color=#f8f8f2>g2</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>gf</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color>
                        <color=#f8f8f2>d</color> <color=#f92672>=</color> <color=#f8f8f2>b1</color> <color=#f92672>-</color> <color=#f8f8f2>b2</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>d</color> <color=#f92672>>=</color> <color=#f92672>-</color><color=#f8f8f2>threshold</color> <color=#f92672>&&</color> <color=#f8f8f2>d</color> <color=#f92672><=</color> <color=#f8f8f2>threshold</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>b</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color> <color=#f92672>*</color> <color=#f8f8f2>b2</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>bf</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
                <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#f8f8f2>af</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f8f8f2>a1</color> <color=#f8f8f2>:</color> <color=#f8f8f2>a</color> <color=#f92672>/</color> <color=#f8f8f2>af</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>rf</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f8f8f2>r1</color> <color=#f8f8f2>:</color> <color=#f8f8f2>r</color> <color=#f92672>/</color> <color=#f8f8f2>rf</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>gf</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f8f8f2>g1</color> <color=#f8f8f2>:</color> <color=#f8f8f2>g</color> <color=#f92672>/</color> <color=#f8f8f2>gf</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>bf</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f8f8f2>b1</color> <color=#f8f8f2>:</color> <color=#f8f8f2>b</color> <color=#f92672>/</color> <color=#f8f8f2>bf</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>ia</color> <color=#f92672>=</color> <color=#f8f8f2>alpha</color> <color=#f92672>?</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>))</color> <color=#f8f8f2>:</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>ir</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>));</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>ig</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>g</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>));</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>ib</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>outPixels</color><color=#f92672>[</color><color=#f8f8f2>outIndex</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ia</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>ir</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>ig</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>ib</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>outIndex</color> <color=#f92672>+=</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the horizontal size of the blur.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param hRadius the radius of the blur in the horizontal direction</color>
<color=#75715e>     * @min-value 0</color>
<color=#75715e>     * @see #getHRadius</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setHRadius</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>hRadius</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>hRadius</color> <color=#f92672>=</color> <color=#f8f8f2>hRadius</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the horizontal size of the blur.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the radius of the blur in the horizontal direction</color>
<color=#75715e>     * @see #setHRadius</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getHRadius</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>hRadius</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the vertical size of the blur.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param vRadius the radius of the blur in the vertical direction</color>
<color=#75715e>     * @min-value 0</color>
<color=#75715e>     * @see #getVRadius</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setVRadius</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>vRadius</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>vRadius</color> <color=#f92672>=</color> <color=#f8f8f2>vRadius</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the vertical size of the blur.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the radius of the blur in the vertical direction</color>
<color=#75715e>     * @see #setVRadius</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getVRadius</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>vRadius</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the radius of the effect.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param radius the radius</color>
<color=#75715e>     * @min-value 0</color>
<color=#75715e>     * @see #getRadius</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setRadius</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>radius</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>hRadius</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>vRadius</color> <color=#f92672>=</color> <color=#f8f8f2>radius</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the radius of the effect.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the radius</color>
<color=#75715e>     * @see #setRadius</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getRadius</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>hRadius</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the threshold value.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param threshold the threshold value</color>
<color=#75715e>     * @see #getThreshold</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setThreshold</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>threshold</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>threshold</color> <color=#f92672>=</color> <color=#f8f8f2>threshold</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the threshold value.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the threshold value</color>
<color=#75715e>     * @see #setThreshold</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getThreshold</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>threshold</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#e6db74>"Blur/Smart Blur..."</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>