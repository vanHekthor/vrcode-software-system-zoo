<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A filter which simulates the appearance of looking through glass. A separate grayscale</color>
<color=#75715e> * displacement image is provided and pixels in the source image are displaced according to the</color>
<color=#75715e> * gradient of the displacement map.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>DisplaceFilter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>TransformFilter</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>amount</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>displacementMap</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>xmap</color><color=#f8f8f2>,</color> <color=#f8f8f2>ymap</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>dw</color><color=#f8f8f2>,</color> <color=#f8f8f2>dh</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>DisplaceFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the displacement map.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param displacementMap an image representing the displacment at each point</color>
<color=#75715e>     * @see #getDisplacementMap</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setDisplacementMap</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>displacementMap</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>displacementMap</color> <color=#f92672>=</color> <color=#f8f8f2>displacementMap</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the displacement map.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return an image representing the displacment at each point</color>
<color=#75715e>     * @see #setDisplacementMap</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>getDisplacementMap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>displacementMap</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the amount of distortion.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param amount the amount</color>
<color=#75715e>     * @min-value 0</color>
<color=#75715e>     * @max-value 1</color>
<color=#75715e>     * @see #getAmount</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setAmount</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>amount</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>amount</color> <color=#f92672>=</color> <color=#f8f8f2>amount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the amount of distortion.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the amount</color>
<color=#75715e>     * @see #setAmount</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getAmount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>amount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dst</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>w</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>h</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dm</color> <color=#f92672>=</color> <color=#f8f8f2>displacementMap</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>displacementMap</color> <color=#f8f8f2>:</color> <color=#f8f8f2>src</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>dw</color> <color=#f92672>=</color> <color=#f8f8f2>dm</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>dh</color> <color=#f92672>=</color> <color=#f8f8f2>dm</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>mapPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>dw</color> <color=#f92672>*</color> <color=#f8f8f2>dh</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>dm</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>dw</color><color=#f8f8f2>,</color> <color=#f8f8f2>dh</color><color=#f8f8f2>,</color> <color=#f8f8f2>mapPixels</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>xmap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>dw</color> <color=#f92672>*</color> <color=#f8f8f2>dh</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>ymap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>dw</color> <color=#f92672>*</color> <color=#f8f8f2>dh</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>dh</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>dw</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>mapPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>mapPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color>
                        <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672>+</color> <color=#f8f8f2>g</color> <color=#f92672>+</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color> <color=#75715e>// An arbitrary scaling factor which gives a good range for "amount"</color>
                <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>dh</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>j1</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>y</color> <color=#f92672>+</color> <color=#f8f8f2>dh</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#f8f8f2>dh</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>dw</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>j2</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672>*</color> <color=#f8f8f2>dw</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>j3</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>y</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#f8f8f2>dh</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>dw</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>dw</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>k1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>dw</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#f8f8f2>dw</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>k2</color> <color=#f92672>=</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>k3</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#f8f8f2>dw</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>xmap</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color>
                        <color=#f8f8f2>mapPixels</color><color=#f92672>[</color><color=#f8f8f2>k1</color> <color=#f92672>+</color> <color=#f8f8f2>j1</color><color=#f92672>]</color>
                                <color=#f92672>+</color> <color=#f8f8f2>mapPixels</color><color=#f92672>[</color><color=#f8f8f2>k1</color> <color=#f92672>+</color> <color=#f8f8f2>j2</color><color=#f92672>]</color>
                                <color=#f92672>+</color> <color=#f8f8f2>mapPixels</color><color=#f92672>[</color><color=#f8f8f2>k1</color> <color=#f92672>+</color> <color=#f8f8f2>j3</color><color=#f92672>]</color>
                                <color=#f92672>-</color> <color=#f8f8f2>mapPixels</color><color=#f92672>[</color><color=#f8f8f2>k3</color> <color=#f92672>+</color> <color=#f8f8f2>j1</color><color=#f92672>]</color>
                                <color=#f92672>-</color> <color=#f8f8f2>mapPixels</color><color=#f92672>[</color><color=#f8f8f2>k3</color> <color=#f92672>+</color> <color=#f8f8f2>j2</color><color=#f92672>]</color>
                                <color=#f92672>-</color> <color=#f8f8f2>mapPixels</color><color=#f92672>[</color><color=#f8f8f2>k3</color> <color=#f92672>+</color> <color=#f8f8f2>j3</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>ymap</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color>
                        <color=#f8f8f2>mapPixels</color><color=#f92672>[</color><color=#f8f8f2>k1</color> <color=#f92672>+</color> <color=#f8f8f2>j3</color><color=#f92672>]</color>
                                <color=#f92672>+</color> <color=#f8f8f2>mapPixels</color><color=#f92672>[</color><color=#f8f8f2>k2</color> <color=#f92672>+</color> <color=#f8f8f2>j3</color><color=#f92672>]</color>
                                <color=#f92672>+</color> <color=#f8f8f2>mapPixels</color><color=#f92672>[</color><color=#f8f8f2>k3</color> <color=#f92672>+</color> <color=#f8f8f2>j3</color><color=#f92672>]</color>
                                <color=#f92672>-</color> <color=#f8f8f2>mapPixels</color><color=#f92672>[</color><color=#f8f8f2>k1</color> <color=#f92672>+</color> <color=#f8f8f2>j1</color><color=#f92672>]</color>
                                <color=#f92672>-</color> <color=#f8f8f2>mapPixels</color><color=#f92672>[</color><color=#f8f8f2>k2</color> <color=#f92672>+</color> <color=#f8f8f2>j1</color><color=#f92672>]</color>
                                <color=#f92672>-</color> <color=#f8f8f2>mapPixels</color><color=#f92672>[</color><color=#f8f8f2>k3</color> <color=#f92672>+</color> <color=#f8f8f2>j1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>mapPixels</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>dst</color> <color=#f92672>=</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>dst</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>xmap</color> <color=#f92672>=</color> <color=#f8f8f2>ymap</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>dst</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>transformInverse</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>out</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>xDisplacement</color><color=#f8f8f2>,</color> <color=#f8f8f2>yDisplacement</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>nx</color> <color=#f92672>=</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>ny</color> <color=#f92672>=</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>y</color> <color=#f92672>%</color> <color=#f8f8f2>dh</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>dw</color> <color=#f92672>+</color> <color=#f8f8f2>x</color> <color=#f92672>%</color> <color=#f8f8f2>dw</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>out</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>amount</color> <color=#f92672>*</color> <color=#f8f8f2>xmap</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>out</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672>+</color> <color=#f8f8f2>amount</color> <color=#f92672>*</color> <color=#f8f8f2>ymap</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#e6db74>"Distort/Displace..."</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>