<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.ColorModel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.WritableRaster</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A page curl effect.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>CurlFilter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>TransformFilter</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>angle</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>transition</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>radius</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Construct a CurlFilter with no distortion.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>CurlFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>setEdgeAction</color><color=#f8f8f2>(</color><color=#f8f8f2>ZERO</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setTransition</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>transition</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>transition</color> <color=#f92672>=</color> <color=#f8f8f2>transition</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getTransition</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>transition</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setAngle</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>angle</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>angle</color> <color=#f92672>=</color> <color=#f8f8f2>angle</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getAngle</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>angle</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setRadius</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>radius</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>radius</color> <color=#f92672>=</color> <color=#f8f8f2>radius</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getRadius</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>radius</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>      public BufferedImage filter( BufferedImage src, BufferedImage dst ) {</color>
<color=#75715e>  		this.width = src.getWidth();</color>
<color=#75715e>  		this.height = src.getHeight();</color>
<color=#75715e>  		return super.filter( src, dst );</color>
<color=#75715e>  	}</color>
<color=#75715e>  */</color>

    <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>Sampler</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>edgeAction</color><color=#f8f8f2>;</color>
        <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color>
        <color=#66d9ef>private</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>;</color>

        <color=#66d9ef>public</color> <color=#a6e22e>Sampler</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>image</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>inPixels</color> <color=#f92672>=</color> <color=#f8f8f2>ImageUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>sample</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>y</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>srcX</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>floor</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>);</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>srcY</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>floor</color><color=#f8f8f2>(</color><color=#f8f8f2>y</color><color=#f8f8f2>);</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>xWeight</color> <color=#f92672>=</color> <color=#f8f8f2>x</color> <color=#f92672>-</color> <color=#f8f8f2>srcX</color><color=#f8f8f2>;</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>yWeight</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672>-</color> <color=#f8f8f2>srcY</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>nw</color><color=#f8f8f2>,</color> <color=#f8f8f2>ne</color><color=#f8f8f2>,</color> <color=#f8f8f2>sw</color><color=#f8f8f2>,</color> <color=#f8f8f2>se</color><color=#f8f8f2>;</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>srcX</color> <color=#f92672>>=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>srcX</color> <color=#f92672><</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#ae81ff>1</color> <color=#f92672>&&</color> <color=#f8f8f2>srcY</color> <color=#f92672>>=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>srcY</color> <color=#f92672><</color> <color=#f8f8f2>height</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Easy case, all corners are in the image</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#f8f8f2>srcY</color> <color=#f92672>+</color> <color=#f8f8f2>srcX</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>nw</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>ne</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>sw</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#f8f8f2>width</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>se</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#f8f8f2>width</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Some of the corners are off the image</color>
                <color=#f8f8f2>nw</color> <color=#f92672>=</color> <color=#f8f8f2>getPixel</color><color=#f8f8f2>(</color><color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcX</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcY</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>ne</color> <color=#f92672>=</color> <color=#f8f8f2>getPixel</color><color=#f8f8f2>(</color><color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcX</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcY</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>sw</color> <color=#f92672>=</color> <color=#f8f8f2>getPixel</color><color=#f8f8f2>(</color><color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcX</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcY</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>se</color> <color=#f92672>=</color> <color=#f8f8f2>getPixel</color><color=#f8f8f2>(</color><color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcX</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcY</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>bilinearInterpolate</color><color=#f8f8f2>(</color><color=#f8f8f2>xWeight</color><color=#f8f8f2>,</color> <color=#f8f8f2>yWeight</color><color=#f8f8f2>,</color> <color=#f8f8f2>nw</color><color=#f8f8f2>,</color> <color=#f8f8f2>ne</color><color=#f8f8f2>,</color> <color=#f8f8f2>sw</color><color=#f8f8f2>,</color> <color=#f8f8f2>se</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getPixel</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>x</color> <color=#f92672>>=</color> <color=#f8f8f2>width</color> <color=#f92672>||</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>y</color> <color=#f92672>>=</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>edgeAction</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>case</color> <color=#f8f8f2>ZERO</color><color=#f8f8f2>:</color>
                    <color=#66d9ef>default</color><color=#f8f8f2>:</color>
                        <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>case</color> <color=#f8f8f2>WRAP</color><color=#f8f8f2>:</color>
                        <color=#66d9ef>return</color> <color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>(</color><color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>mod</color><color=#f8f8f2>(</color><color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>width</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>mod</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>case</color> <color=#f8f8f2>CLAMP</color><color=#f8f8f2>:</color>
                        <color=#66d9ef>return</color> <color=#f8f8f2>pixels</color><color=#f92672>[</color>
                                <color=#f8f8f2>(</color><color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>(</color><color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>width</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>y</color> <color=#f92672>*</color> <color=#f8f8f2>width</color> <color=#f92672>+</color> <color=#f8f8f2>x</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dst</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>width</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>height</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>

        <color=#f8f8f2>originalSpace</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rectangle</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>transformedSpace</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rectangle</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>transformSpace</color><color=#f8f8f2>(</color><color=#f8f8f2>transformedSpace</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dst</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>dstCM</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getColorModel</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>dst</color> <color=#f92672>=</color>
                    <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color>
                            <color=#f8f8f2>dstCM</color><color=#f8f8f2>,</color>
                            <color=#f8f8f2>dstCM</color><color=#f8f8f2>.</color><color=#a6e22e>createCompatibleWritableRaster</color><color=#f8f8f2>(</color><color=#f8f8f2>transformedSpace</color><color=#f8f8f2>.</color><color=#a6e22e>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>transformedSpace</color><color=#f8f8f2>.</color><color=#a6e22e>height</color><color=#f8f8f2>),</color>
                            <color=#f8f8f2>dstCM</color><color=#f8f8f2>.</color><color=#a6e22e>isAlphaPremultiplied</color><color=#f8f8f2>(),</color>
                            <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>WritableRaster</color> <color=#f8f8f2>dstRaster</color> <color=#f92672>=</color> <color=#f8f8f2>dst</color><color=#f8f8f2>.</color><color=#a6e22e>getRaster</color><color=#f8f8f2>();</color>

        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inPixels</color> <color=#f92672>=</color> <color=#f8f8f2>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>interpolation</color> <color=#f92672>==</color> <color=#f8f8f2>NEAREST_NEIGHBOUR</color><color=#f8f8f2>)</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>filterPixelsNN</color><color=#f8f8f2>(</color><color=#f8f8f2>dst</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>transformedSpace</color><color=#f8f8f2>);</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>srcWidth</color> <color=#f92672>=</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>srcHeight</color> <color=#f92672>=</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>srcWidth1</color> <color=#f92672>=</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>srcHeight1</color> <color=#f92672>=</color> <color=#f8f8f2>height</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>outWidth</color> <color=#f92672>=</color> <color=#f8f8f2>transformedSpace</color><color=#f8f8f2>.</color><color=#a6e22e>width</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>outHeight</color> <color=#f92672>=</color> <color=#f8f8f2>transformedSpace</color><color=#f8f8f2>.</color><color=#a6e22e>height</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>outX</color><color=#f8f8f2>,</color> <color=#f8f8f2>outY</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>outPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>outWidth</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>outX</color> <color=#f92672>=</color> <color=#f8f8f2>transformedSpace</color><color=#f8f8f2>.</color><color=#a6e22e>x</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>outY</color> <color=#f92672>=</color> <color=#f8f8f2>transformedSpace</color><color=#f8f8f2>.</color><color=#a6e22e>y</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>float</color><color=#f92672>[</color><color=#ae81ff>4</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>outHeight</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>outWidth</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>transformInverse</color><color=#f8f8f2>(</color><color=#f8f8f2>outX</color> <color=#f92672>+</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>outY</color> <color=#f92672>+</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>out</color><color=#f8f8f2>);</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>srcX</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>floor</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>);</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>srcY</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>floor</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>);</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>xWeight</color> <color=#f92672>=</color> <color=#f8f8f2>out</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>-</color> <color=#f8f8f2>srcX</color><color=#f8f8f2>;</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>yWeight</color> <color=#f92672>=</color> <color=#f8f8f2>out</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>-</color> <color=#f8f8f2>srcY</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>nw</color><color=#f8f8f2>,</color> <color=#f8f8f2>ne</color><color=#f8f8f2>,</color> <color=#f8f8f2>sw</color><color=#f8f8f2>,</color> <color=#f8f8f2>se</color><color=#f8f8f2>;</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>srcX</color> <color=#f92672>>=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>srcX</color> <color=#f92672><</color> <color=#f8f8f2>srcWidth1</color> <color=#f92672>&&</color> <color=#f8f8f2>srcY</color> <color=#f92672>>=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>srcY</color> <color=#f92672><</color> <color=#f8f8f2>srcHeight1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// Easy case, all corners are in the image</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>srcWidth</color> <color=#f92672>*</color> <color=#f8f8f2>srcY</color> <color=#f92672>+</color> <color=#f8f8f2>srcX</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>nw</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>ne</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>sw</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#f8f8f2>srcWidth</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>se</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#f8f8f2>srcWidth</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// Some of the corners are off the image</color>
                    <color=#f8f8f2>nw</color> <color=#f92672>=</color> <color=#f8f8f2>getPixel</color><color=#f8f8f2>(</color><color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcX</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcY</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcHeight</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>ne</color> <color=#f92672>=</color> <color=#f8f8f2>getPixel</color><color=#f8f8f2>(</color><color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcX</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcY</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcHeight</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>sw</color> <color=#f92672>=</color> <color=#f8f8f2>getPixel</color><color=#f8f8f2>(</color><color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcX</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcY</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcHeight</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>se</color> <color=#f92672>=</color> <color=#f8f8f2>getPixel</color><color=#f8f8f2>(</color><color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcX</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcY</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcHeight</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>bilinearInterpolate</color><color=#f8f8f2>(</color><color=#f8f8f2>xWeight</color><color=#f8f8f2>,</color> <color=#f8f8f2>yWeight</color><color=#f8f8f2>,</color> <color=#f8f8f2>nw</color><color=#f8f8f2>,</color> <color=#f8f8f2>ne</color><color=#f8f8f2>,</color> <color=#f8f8f2>sw</color><color=#f8f8f2>,</color> <color=#f8f8f2>se</color><color=#f8f8f2>);</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>shade</color> <color=#f92672>=</color> <color=#f8f8f2>out</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672>*</color> <color=#f8f8f2>shade</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>g</color> <color=#f92672>*</color> <color=#f8f8f2>shade</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color> <color=#f92672>*</color> <color=#f8f8f2>shade</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0xff000000</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>g</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color>
                    <color=#f8f8f2>outPixels</color><color=#f92672>[</color><color=#f8f8f2>x</color><color=#f92672>]</color> <color=#f92672>=</color>
                            <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>combinePixels</color><color=#f8f8f2>(</color><color=#f8f8f2>rgb</color><color=#f8f8f2>,</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>srcWidth</color> <color=#f92672>*</color> <color=#f8f8f2>y</color> <color=#f92672>+</color> <color=#f8f8f2>x</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>NORMAL</color><color=#f8f8f2>);</color>
                <color=#66d9ef>else</color> <color=#f8f8f2>outPixels</color><color=#f92672>[</color><color=#f8f8f2>x</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>rgb</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>setRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>dst</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>transformedSpace</color><color=#f8f8f2>.</color><color=#a6e22e>width</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>dst</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getPixel</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>x</color> <color=#f92672>>=</color> <color=#f8f8f2>width</color> <color=#f92672>||</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>y</color> <color=#f92672>>=</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>edgeAction</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>ZERO</color><color=#f8f8f2>:</color>
                <color=#66d9ef>default</color><color=#f8f8f2>:</color>
                    <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>WRAP</color><color=#f8f8f2>:</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>(</color><color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>mod</color><color=#f8f8f2>(</color><color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>width</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>mod</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>CLAMP</color><color=#f8f8f2>:</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>pixels</color><color=#f92672>[</color>
                            <color=#f8f8f2>(</color><color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>(</color><color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>width</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>y</color> <color=#f92672>*</color> <color=#f8f8f2>width</color> <color=#f92672>+</color> <color=#f8f8f2>x</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>transformInverse</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>out</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/*Fisheye</color>
<color=#75715e>    		float mirrorDistance = width*centreX;</color>
<color=#75715e>    		float mirrorRadius = width*centreY;</color>
<color=#75715e>    		float cx = width*.5f;</color>
<color=#75715e>    		float cy = height*.5f;</color>
<color=#75715e>    		float dx = x-cx;</color>
<color=#75715e>    		float dy = y-cy;</color>
<color=#75715e>    		float r2 = dx*dx+dy*dy;</color>
<color=#75715e>    		float r = (float)Math.sqrt( r2 );</color>
<color=#75715e>    		float phi = (float)(Math.PI*.5-Math.asin( Math.sqrt( mirrorRadius*mirrorRadius-r2 )/mirrorRadius ));</color>
<color=#75715e>    		r = r > mirrorRadius ? width : mirrorDistance * (float)Math.tan( phi );</color>
<color=#75715e>    		phi = (float)Math.atan2( dy, dx );</color>
<color=#75715e>    		out[0] = cx + r*(float)Math.cos( phi );</color>
<color=#75715e>    		out[1] = cy + r*(float)Math.sin( phi );</color>
<color=#75715e>    */</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>transition</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>px</color> <color=#f92672>=</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>py</color> <color=#f92672>=</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>s</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sin</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>);</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>cos</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>);</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>tx</color> <color=#f92672>=</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>tx</color> <color=#f92672>=</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sqrt</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#f8f8f2>width</color> <color=#f92672>+</color> <color=#f8f8f2>height</color> <color=#f92672>*</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>

        <color=#75715e>// Start from the correct corner according to the angle</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>xoffset</color> <color=#f92672>=</color> <color=#f8f8f2>c</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f8f8f2>width</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>yoffset</color> <color=#f92672>=</color> <color=#f8f8f2>s</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f8f8f2>height</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

        <color=#75715e>// Transform into unrotated coordinates</color>
        <color=#f8f8f2>px</color> <color=#f92672>-=</color> <color=#f8f8f2>xoffset</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>py</color> <color=#f92672>-=</color> <color=#f8f8f2>yoffset</color><color=#f8f8f2>;</color>

        <color=#66d9ef>float</color> <color=#f8f8f2>qx</color> <color=#f92672>=</color> <color=#f8f8f2>px</color> <color=#f92672>*</color> <color=#f8f8f2>c</color> <color=#f92672>+</color> <color=#f8f8f2>py</color> <color=#f92672>*</color> <color=#f8f8f2>s</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>qy</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>px</color> <color=#f92672>*</color> <color=#f8f8f2>s</color> <color=#f92672>+</color> <color=#f8f8f2>py</color> <color=#f92672>*</color> <color=#f8f8f2>c</color><color=#f8f8f2>;</color>

        <color=#66d9ef>boolean</color> <color=#f8f8f2>outside</color> <color=#f92672>=</color> <color=#f8f8f2>qx</color> <color=#f92672><</color> <color=#f8f8f2>tx</color><color=#f8f8f2>;</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>unfolded</color> <color=#f92672>=</color> <color=#f8f8f2>qx</color> <color=#f92672>></color> <color=#f8f8f2>tx</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>oncurl</color> <color=#f92672>=</color> <color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>outside</color> <color=#f92672>||</color> <color=#f8f8f2>unfolded</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>qx</color> <color=#f92672>=</color> <color=#f8f8f2>qx</color> <color=#f92672>></color> <color=#f8f8f2>tx</color> <color=#f92672>*</color> <color=#ae81ff>2</color> <color=#f92672>?</color> <color=#f8f8f2>qx</color> <color=#f8f8f2>:</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>tx</color> <color=#f92672>-</color> <color=#f8f8f2>qx</color><color=#f8f8f2>;</color>

        <color=#75715e>// Transform back into rotated coordinates</color>
        <color=#f8f8f2>px</color> <color=#f92672>=</color> <color=#f8f8f2>qx</color> <color=#f92672>*</color> <color=#f8f8f2>c</color> <color=#f92672>-</color> <color=#f8f8f2>qy</color> <color=#f92672>*</color> <color=#f8f8f2>s</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>py</color> <color=#f92672>=</color> <color=#f8f8f2>qx</color> <color=#f92672>*</color> <color=#f8f8f2>s</color> <color=#f92672>+</color> <color=#f8f8f2>qy</color> <color=#f92672>*</color> <color=#f8f8f2>c</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>px</color> <color=#f92672>+=</color> <color=#f8f8f2>xoffset</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>py</color> <color=#f92672>+=</color> <color=#f8f8f2>yoffset</color><color=#f8f8f2>;</color>

        <color=#75715e>// See if we're off the edge of the page</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>offpage</color> <color=#f92672>=</color> <color=#f8f8f2>px</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>py</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>px</color> <color=#f92672>>=</color> <color=#f8f8f2>width</color> <color=#f92672>||</color> <color=#f8f8f2>py</color> <color=#f92672>>=</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color>

        <color=#75715e>// If we're off the edge, but in the curl...</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>offpage</color> <color=#f92672>&&</color> <color=#f8f8f2>oncurl</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>px</color> <color=#f92672>=</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>py</color> <color=#f92672>=</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Shade the curl</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>shade</color> <color=#f92672>=</color>
                <color=#f92672>!</color><color=#f8f8f2>offpage</color> <color=#f92672>&&</color> <color=#f8f8f2>oncurl</color> <color=#f92672>?</color> <color=#ae81ff>1.9f</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>1.0f</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>cos</color><color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>exp</color><color=#f8f8f2>((</color><color=#f8f8f2>qx</color> <color=#f92672>-</color> <color=#f8f8f2>tx</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>radius</color><color=#f8f8f2>)))</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>out</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>1</color> <color=#f92672>-</color> <color=#f8f8f2>shade</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>outside</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>out</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>out</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>out</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>px</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>out</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>py</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>out</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f92672>!</color><color=#f8f8f2>offpage</color> <color=#f92672>&&</color> <color=#f8f8f2>oncurl</color> <color=#f92672>?</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#e6db74>"Distort/Curl..."</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>