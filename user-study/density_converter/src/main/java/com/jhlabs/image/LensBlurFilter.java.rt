<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.jhlabs.math.FFT</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A filter which use FFTs to simulate lens blur on an image.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>LensBlurFilter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractBufferedImageOp</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>radius</color> <color=#f92672>=</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>bloom</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>bloomThreshold</color> <color=#f92672>=</color> <color=#ae81ff>255</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>angle</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>sides</color> <color=#f92672>=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the radius of the kernel, and hence the amount of blur.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param radius the radius of the blur in pixels.</color>
<color=#75715e>     * @see #getRadius</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setRadius</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>radius</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>radius</color> <color=#f92672>=</color> <color=#f8f8f2>radius</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the radius of the kernel.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the radius</color>
<color=#75715e>     * @see #setRadius</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getRadius</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>radius</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the number of sides of the aperture.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param sides the number of sides</color>
<color=#75715e>     * @see #getSides</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setSides</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>sides</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>sides</color> <color=#f92672>=</color> <color=#f8f8f2>sides</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the number of sides of the aperture.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the number of sides</color>
<color=#75715e>     * @see #setSides</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getSides</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>sides</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the bloom factor.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param bloom the bloom factor</color>
<color=#75715e>     * @see #getBloom</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setBloom</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>bloom</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>bloom</color> <color=#f92672>=</color> <color=#f8f8f2>bloom</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the bloom factor.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the bloom factor</color>
<color=#75715e>     * @see #setBloom</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getBloom</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>bloom</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the bloom threshold.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param bloomThreshold the bloom threshold</color>
<color=#75715e>     * @see #getBloomThreshold</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setBloomThreshold</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>bloomThreshold</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>bloomThreshold</color> <color=#f92672>=</color> <color=#f8f8f2>bloomThreshold</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the bloom threshold.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the bloom threshold</color>
<color=#75715e>     * @see #setBloomThreshold</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getBloomThreshold</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>bloomThreshold</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dst</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>rows</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>cols</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>log2rows</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>log2cols</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>iradius</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>ceil</color><color=#f8f8f2>(</color><color=#f8f8f2>radius</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>tileWidth</color> <color=#f92672>=</color> <color=#ae81ff>128</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>tileHeight</color> <color=#f92672>=</color> <color=#f8f8f2>tileWidth</color><color=#f8f8f2>;</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>adjustedWidth</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>width</color> <color=#f92672>+</color> <color=#f8f8f2>iradius</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>adjustedHeight</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>height</color> <color=#f92672>+</color> <color=#f8f8f2>iradius</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>tileWidth</color> <color=#f92672>=</color>
                <color=#f8f8f2>iradius</color> <color=#f92672><</color> <color=#ae81ff>32</color> <color=#f92672>?</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#ae81ff>128</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color> <color=#f92672>+</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>iradius</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#ae81ff>256</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color> <color=#f92672>+</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>iradius</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>tileHeight</color> <color=#f92672>=</color>
                <color=#f8f8f2>iradius</color> <color=#f92672><</color> <color=#ae81ff>32</color> <color=#f92672>?</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#ae81ff>128</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color> <color=#f92672>+</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>iradius</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#ae81ff>256</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color> <color=#f92672>+</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>iradius</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dst</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>dst</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB</color><color=#f8f8f2>);</color>

        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>rows</color> <color=#f92672><</color> <color=#f8f8f2>tileHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>rows</color> <color=#f92672>*=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>log2rows</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>cols</color> <color=#f92672><</color> <color=#f8f8f2>tileWidth</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>cols</color> <color=#f92672>*=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>log2cols</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>w</color> <color=#f92672>=</color> <color=#f8f8f2>cols</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>h</color> <color=#f92672>=</color> <color=#f8f8f2>rows</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>tileWidth</color> <color=#f92672>=</color> <color=#f8f8f2>w</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>tileHeight</color> <color=#f92672>=</color> <color=#f8f8f2>h</color><color=#f8f8f2>;</color> <color=#75715e>// FIXME-tileWidth, w, and cols are always all the same</color>

        <color=#f8f8f2>FFT</color> <color=#f8f8f2>fft</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FFT</color><color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>log2rows</color><color=#f8f8f2>,</color> <color=#f8f8f2>log2cols</color><color=#f8f8f2>));</color>

        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>w</color> <color=#f92672>*</color> <color=#f8f8f2>h</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color><color=#f92672>[][]</color> <color=#f8f8f2>mask</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>float</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>][</color><color=#f8f8f2>w</color> <color=#f92672>*</color> <color=#f8f8f2>h</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color><color=#f92672>[][]</color> <color=#f8f8f2>gb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>float</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>][</color><color=#f8f8f2>w</color> <color=#f92672>*</color> <color=#f8f8f2>h</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color><color=#f92672>[][]</color> <color=#f8f8f2>ar</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>float</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>][</color><color=#f8f8f2>w</color> <color=#f92672>*</color> <color=#f8f8f2>h</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#75715e>// Create the kernel</color>
        <color=#66d9ef>double</color> <color=#f8f8f2>polyAngle</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>PI</color> <color=#f92672>/</color> <color=#f8f8f2>sides</color><color=#f8f8f2>;</color>
        <color=#66d9ef>double</color> <color=#f8f8f2>polyScale</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color> <color=#f92672>/</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>cos</color><color=#f8f8f2>(</color><color=#f8f8f2>polyAngle</color><color=#f8f8f2>);</color>
        <color=#66d9ef>double</color> <color=#f8f8f2>r2</color> <color=#f92672>=</color> <color=#f8f8f2>radius</color> <color=#f92672>*</color> <color=#f8f8f2>radius</color><color=#f8f8f2>;</color>
        <color=#66d9ef>double</color> <color=#f8f8f2>rangle</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>toRadians</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>);</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>total</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>h</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>w</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>double</color> <color=#f8f8f2>dx</color> <color=#f92672>=</color> <color=#f8f8f2>x</color> <color=#f92672>-</color> <color=#f8f8f2>w</color> <color=#f92672>/</color> <color=#ae81ff>2f</color><color=#f8f8f2>;</color>
                <color=#66d9ef>double</color> <color=#f8f8f2>dy</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672>-</color> <color=#f8f8f2>h</color> <color=#f92672>/</color> <color=#ae81ff>2f</color><color=#f8f8f2>;</color>
                <color=#66d9ef>double</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>dx</color> <color=#f92672>*</color> <color=#f8f8f2>dx</color> <color=#f92672>+</color> <color=#f8f8f2>dy</color> <color=#f92672>*</color> <color=#f8f8f2>dy</color><color=#f8f8f2>;</color>
                <color=#66d9ef>double</color> <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#f8f8f2>r</color> <color=#f92672><</color> <color=#f8f8f2>r2</color> <color=#f92672>?</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>f</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sqrt</color><color=#f8f8f2>(</color><color=#f8f8f2>r</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sides</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>double</color> <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>atan2</color><color=#f8f8f2>(</color><color=#f8f8f2>dy</color><color=#f8f8f2>,</color> <color=#f8f8f2>dx</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>rangle</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>mod</color><color=#f8f8f2>(</color><color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#f8f8f2>polyAngle</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>polyAngle</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>cos</color><color=#f8f8f2>(</color><color=#f8f8f2>a</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>polyScale</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#f8f8f2>f</color> <color=#f92672>*</color> <color=#f8f8f2>r</color> <color=#f92672><</color> <color=#f8f8f2>radius</color> <color=#f92672>?</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#f8f8f2>total</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>f</color><color=#f8f8f2>;</color>

                <color=#f8f8f2>mask</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>][</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>f</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>mask</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>][</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Normalize the kernel</color>
        <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>h</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>w</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>mask</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>][</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>/=</color> <color=#f8f8f2>total</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>fft</color><color=#f8f8f2>.</color><color=#a6e22e>transform2D</color><color=#f8f8f2>(</color><color=#f8f8f2>mask</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>mask</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>tileY</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>iradius</color><color=#f8f8f2>;</color> <color=#f8f8f2>tileY</color> <color=#f92672><</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color> <color=#f8f8f2>tileY</color> <color=#f92672>+=</color> <color=#f8f8f2>tileHeight</color> <color=#f92672>-</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>iradius</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>tileX</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>iradius</color><color=#f8f8f2>;</color> <color=#f8f8f2>tileX</color> <color=#f92672><</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color> <color=#f8f8f2>tileX</color> <color=#f92672>+=</color> <color=#f8f8f2>tileWidth</color> <color=#f92672>-</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>iradius</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>//                System.out.println("Tile: "+tileX+" "+tileY+" "+tileWidth+" "+tileHeight);</color>

                <color=#75715e>// Clip the tile to the image bounds</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>tx</color> <color=#f92672>=</color> <color=#f8f8f2>tileX</color><color=#f8f8f2>,</color> <color=#f8f8f2>ty</color> <color=#f92672>=</color> <color=#f8f8f2>tileY</color><color=#f8f8f2>,</color> <color=#f8f8f2>tw</color> <color=#f92672>=</color> <color=#f8f8f2>tileWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>th</color> <color=#f92672>=</color> <color=#f8f8f2>tileHeight</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>fx</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>fy</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tx</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>tw</color> <color=#f92672>+=</color> <color=#f8f8f2>tx</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>fx</color> <color=#f92672>-=</color> <color=#f8f8f2>tx</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>tx</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ty</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>th</color> <color=#f92672>+=</color> <color=#f8f8f2>ty</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>fy</color> <color=#f92672>-=</color> <color=#f8f8f2>ty</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>ty</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tx</color> <color=#f92672>+</color> <color=#f8f8f2>tw</color> <color=#f92672>></color> <color=#f8f8f2>width</color><color=#f8f8f2>)</color> <color=#f8f8f2>tw</color> <color=#f92672>=</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#f8f8f2>tx</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ty</color> <color=#f92672>+</color> <color=#f8f8f2>th</color> <color=#f92672>></color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>th</color> <color=#f92672>=</color> <color=#f8f8f2>height</color> <color=#f92672>-</color> <color=#f8f8f2>ty</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>tx</color><color=#f8f8f2>,</color> <color=#f8f8f2>ty</color><color=#f8f8f2>,</color> <color=#f8f8f2>tw</color><color=#f8f8f2>,</color> <color=#f8f8f2>th</color><color=#f8f8f2>,</color> <color=#f8f8f2>rgb</color><color=#f8f8f2>,</color> <color=#f8f8f2>fy</color> <color=#f92672>*</color> <color=#f8f8f2>w</color> <color=#f92672>+</color> <color=#f8f8f2>fx</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>);</color>

                <color=#75715e>// Create a float array from the pixels. Any pixels off the edge of the source image get</color>
                <color=#75715e>// duplicated from the edge.</color>
                <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>h</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>imageY</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672>+</color> <color=#f8f8f2>tileY</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>j</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>imageY</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>fy</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>imageY</color> <color=#f92672>></color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>fy</color> <color=#f92672>+</color> <color=#f8f8f2>th</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>else</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>j</color> <color=#f92672>*=</color> <color=#f8f8f2>w</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>w</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>imageX</color> <color=#f92672>=</color> <color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>tileX</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>k</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>imageX</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#f8f8f2>fx</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>imageX</color> <color=#f92672>></color> <color=#f8f8f2>width</color><color=#f8f8f2>)</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#f8f8f2>fx</color> <color=#f92672>+</color> <color=#f8f8f2>tw</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>else</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>k</color> <color=#f92672>+=</color> <color=#f8f8f2>j</color><color=#f8f8f2>;</color>

                        <color=#f8f8f2>ar</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>][</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>rgb</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
                        <color=#66d9ef>float</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>rgb</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
                        <color=#66d9ef>float</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>rgb</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
                        <color=#66d9ef>float</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>

                        <color=#75715e>// Bloom...</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672>></color> <color=#f8f8f2>bloomThreshold</color><color=#f8f8f2>)</color> <color=#f8f8f2>r</color> <color=#f92672>*=</color> <color=#f8f8f2>bloom</color><color=#f8f8f2>;</color>
                        <color=#75715e>//							r = bloomThreshold + (r-bloomThreshold) * bloom;</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>g</color> <color=#f92672>></color> <color=#f8f8f2>bloomThreshold</color><color=#f8f8f2>)</color> <color=#f8f8f2>g</color> <color=#f92672>*=</color> <color=#f8f8f2>bloom</color><color=#f8f8f2>;</color>
                        <color=#75715e>//							g = bloomThreshold + (g-bloomThreshold) * bloom;</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color> <color=#f92672>></color> <color=#f8f8f2>bloomThreshold</color><color=#f8f8f2>)</color> <color=#f8f8f2>b</color> <color=#f92672>*=</color> <color=#f8f8f2>bloom</color><color=#f8f8f2>;</color>
                        <color=#75715e>//							b = bloomThreshold + (b-bloomThreshold) * bloom;</color>

                        <color=#f8f8f2>ar</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>][</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>r</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>gb</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>][</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>g</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>gb</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>][</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>

                        <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>k</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>

                <color=#75715e>// Transform into frequency space</color>
                <color=#f8f8f2>fft</color><color=#f8f8f2>.</color><color=#a6e22e>transform2D</color><color=#f8f8f2>(</color><color=#f8f8f2>ar</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>ar</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>cols</color><color=#f8f8f2>,</color> <color=#f8f8f2>rows</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>fft</color><color=#f8f8f2>.</color><color=#a6e22e>transform2D</color><color=#f8f8f2>(</color><color=#f8f8f2>gb</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>gb</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>cols</color><color=#f8f8f2>,</color> <color=#f8f8f2>rows</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>

                <color=#75715e>// Multiply the transformed pixels by the transformed kernel</color>
                <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>h</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>w</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>float</color> <color=#f8f8f2>re</color> <color=#f92672>=</color> <color=#f8f8f2>ar</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>][</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>float</color> <color=#f8f8f2>im</color> <color=#f92672>=</color> <color=#f8f8f2>ar</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>][</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>float</color> <color=#f8f8f2>rem</color> <color=#f92672>=</color> <color=#f8f8f2>mask</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>][</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>float</color> <color=#f8f8f2>imm</color> <color=#f92672>=</color> <color=#f8f8f2>mask</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>][</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>ar</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>][</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>re</color> <color=#f92672>*</color> <color=#f8f8f2>rem</color> <color=#f92672>-</color> <color=#f8f8f2>im</color> <color=#f92672>*</color> <color=#f8f8f2>imm</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>ar</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>][</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>re</color> <color=#f92672>*</color> <color=#f8f8f2>imm</color> <color=#f92672>+</color> <color=#f8f8f2>im</color> <color=#f92672>*</color> <color=#f8f8f2>rem</color><color=#f8f8f2>;</color>

                        <color=#f8f8f2>re</color> <color=#f92672>=</color> <color=#f8f8f2>gb</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>][</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>im</color> <color=#f92672>=</color> <color=#f8f8f2>gb</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>][</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>gb</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>][</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>re</color> <color=#f92672>*</color> <color=#f8f8f2>rem</color> <color=#f92672>-</color> <color=#f8f8f2>im</color> <color=#f92672>*</color> <color=#f8f8f2>imm</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>gb</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>][</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>re</color> <color=#f92672>*</color> <color=#f8f8f2>imm</color> <color=#f92672>+</color> <color=#f8f8f2>im</color> <color=#f92672>*</color> <color=#f8f8f2>rem</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>

                <color=#75715e>// Transform back</color>
                <color=#f8f8f2>fft</color><color=#f8f8f2>.</color><color=#a6e22e>transform2D</color><color=#f8f8f2>(</color><color=#f8f8f2>ar</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>ar</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>cols</color><color=#f8f8f2>,</color> <color=#f8f8f2>rows</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>fft</color><color=#f8f8f2>.</color><color=#a6e22e>transform2D</color><color=#f8f8f2>(</color><color=#f8f8f2>gb</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>gb</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>cols</color><color=#f8f8f2>,</color> <color=#f8f8f2>rows</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>

                <color=#75715e>// Convert back to RGB pixels, with quadrant remapping</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>row_flip</color> <color=#f92672>=</color> <color=#f8f8f2>w</color> <color=#f92672>>></color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>col_flip</color> <color=#f92672>=</color> <color=#f8f8f2>h</color> <color=#f92672>>></color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

                <color=#75715e>// FIXME-don't bother converting pixels off image edges</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>w</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>ym</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672>^</color> <color=#f8f8f2>row_flip</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>yi</color> <color=#f92672>=</color> <color=#f8f8f2>ym</color> <color=#f92672>*</color> <color=#f8f8f2>cols</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>w</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>xm</color> <color=#f92672>=</color> <color=#f8f8f2>yi</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>^</color> <color=#f8f8f2>col_flip</color><color=#f8f8f2>);</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>ar</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>][</color><color=#f8f8f2>xm</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>ar</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>][</color><color=#f8f8f2>xm</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>gb</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>][</color><color=#f8f8f2>xm</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>gb</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>][</color><color=#f8f8f2>xm</color><color=#f92672>]</color><color=#f8f8f2>;</color>

                        <color=#75715e>// Clamp high pixels due to blooming</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672>></color> <color=#ae81ff>255</color><color=#f8f8f2>)</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#ae81ff>255</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>g</color> <color=#f92672>></color> <color=#ae81ff>255</color><color=#f8f8f2>)</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#ae81ff>255</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color> <color=#f92672>></color> <color=#ae81ff>255</color><color=#f8f8f2>)</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#ae81ff>255</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>argb</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>g</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>rgb</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>argb</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>

                <color=#75715e>// Clip to the output image</color>
                <color=#f8f8f2>tx</color> <color=#f92672>=</color> <color=#f8f8f2>tileX</color> <color=#f92672>+</color> <color=#f8f8f2>iradius</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>ty</color> <color=#f92672>=</color> <color=#f8f8f2>tileY</color> <color=#f92672>+</color> <color=#f8f8f2>iradius</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>tw</color> <color=#f92672>=</color> <color=#f8f8f2>tileWidth</color> <color=#f92672>-</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>iradius</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>th</color> <color=#f92672>=</color> <color=#f8f8f2>tileHeight</color> <color=#f92672>-</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>iradius</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tx</color> <color=#f92672>+</color> <color=#f8f8f2>tw</color> <color=#f92672>></color> <color=#f8f8f2>width</color><color=#f8f8f2>)</color> <color=#f8f8f2>tw</color> <color=#f92672>=</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#f8f8f2>tx</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ty</color> <color=#f92672>+</color> <color=#f8f8f2>th</color> <color=#f92672>></color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>th</color> <color=#f92672>=</color> <color=#f8f8f2>height</color> <color=#f92672>-</color> <color=#f8f8f2>ty</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>dst</color><color=#f8f8f2>.</color><color=#a6e22e>setRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>tx</color><color=#f8f8f2>,</color> <color=#f8f8f2>ty</color><color=#f8f8f2>,</color> <color=#f8f8f2>tw</color><color=#f8f8f2>,</color> <color=#f8f8f2>th</color><color=#f8f8f2>,</color> <color=#f8f8f2>rgb</color><color=#f8f8f2>,</color> <color=#f8f8f2>iradius</color> <color=#f92672>*</color> <color=#f8f8f2>w</color> <color=#f92672>+</color> <color=#f8f8f2>iradius</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>dst</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#e6db74>"Blur/Lens Blur..."</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>