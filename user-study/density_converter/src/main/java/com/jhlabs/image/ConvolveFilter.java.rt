<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.Point2D</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.Rectangle2D</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.ColorModel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.Kernel</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A filter which applies a convolution kernel to an image.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Jerry Huxtable</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ConvolveFilter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractBufferedImageOp</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Treat pixels off the edge as zero.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>ZERO_EDGES</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Clamp pixels off the edge to the nearest edge.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>CLAMP_EDGES</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Wrap pixels off the edge to the opposite edge.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>WRAP_EDGES</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The convolution kernel.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>Kernel</color> <color=#f8f8f2>kernel</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Whether to convolve alpha.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>alpha</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Whether to promultiply the alpha before convolving.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>premultiplyAlpha</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * What do do at the image edges.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>edgeAction</color> <color=#f92672>=</color> <color=#f8f8f2>CLAMP_EDGES</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Construct a filter with a null kernel. This is only useful if you're going to change the kernel</color>
<color=#75715e>     * later on.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>ConvolveFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#66d9ef>float</color><color=#f92672>[</color><color=#ae81ff>9</color><color=#f92672>]</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Construct a filter with the given 3x3 kernel.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param matrix an array of 9 floats containing the kernel</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>ConvolveFilter</color><color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>matrix</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Kernel</color><color=#f8f8f2>(</color><color=#ae81ff>3</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color><color=#f8f8f2>,</color> <color=#f8f8f2>matrix</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Construct a filter with the given kernel.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param rows   the number of rows in the kernel</color>
<color=#75715e>     * @param cols   the number of columns in the kernel</color>
<color=#75715e>     * @param matrix an array of rows*cols floats containing the kernel</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>ConvolveFilter</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>rows</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>cols</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>matrix</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Kernel</color><color=#f8f8f2>(</color><color=#f8f8f2>cols</color><color=#f8f8f2>,</color> <color=#f8f8f2>rows</color><color=#f8f8f2>,</color> <color=#f8f8f2>matrix</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Construct a filter with the given 3x3 kernel.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param kernel the convolution kernel</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>ConvolveFilter</color><color=#f8f8f2>(</color><color=#f8f8f2>Kernel</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>kernel</color> <color=#f92672>=</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the convolution kernel.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param kernel the kernel</color>
<color=#75715e>     * @see #getKernel</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setKernel</color><color=#f8f8f2>(</color><color=#f8f8f2>Kernel</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>kernel</color> <color=#f92672>=</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the convolution kernel.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the kernel</color>
<color=#75715e>     * @see #setKernel</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Kernel</color> <color=#a6e22e>getKernel</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the action to perfomr for pixels off the image edges.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param edgeAction the action</color>
<color=#75715e>     * @see #getEdgeAction</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setEdgeAction</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>edgeAction</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>edgeAction</color> <color=#f92672>=</color> <color=#f8f8f2>edgeAction</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the action to perfomr for pixels off the image edges.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the action</color>
<color=#75715e>     * @see #setEdgeAction</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getEdgeAction</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>edgeAction</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set whether to convolve the alpha channel.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param useAlpha true to convolve the alpha</color>
<color=#75715e>     * @see #getUseAlpha</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setUseAlpha</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>useAlpha</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>alpha</color> <color=#f92672>=</color> <color=#f8f8f2>useAlpha</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get whether to convolve the alpha channel.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return true to convolve the alpha</color>
<color=#75715e>     * @see #setUseAlpha</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getUseAlpha</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set whether to premultiply the alpha channel.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param premultiplyAlpha true to premultiply the alpha</color>
<color=#75715e>     * @see #getPremultiplyAlpha</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setPremultiplyAlpha</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>premultiplyAlpha</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>premultiplyAlpha</color> <color=#f92672>=</color> <color=#f8f8f2>premultiplyAlpha</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get whether to premultiply the alpha channel.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return true to premultiply the alpha</color>
<color=#75715e>     * @see #setPremultiplyAlpha</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getPremultiplyAlpha</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>premultiplyAlpha</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dst</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dst</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>dst</color> <color=#f92672>=</color> <color=#f8f8f2>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#f8f8f2>height</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>outPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#f8f8f2>height</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>premultiplyAlpha</color><color=#f8f8f2>)</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>premultiply</color><color=#f8f8f2>(</color><color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>convolve</color><color=#f8f8f2>(</color><color=#f8f8f2>kernel</color><color=#f8f8f2>,</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>,</color> <color=#f8f8f2>edgeAction</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>premultiplyAlpha</color><color=#f8f8f2>)</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>unpremultiply</color><color=#f8f8f2>(</color><color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>setRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>dst</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>dst</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>dstCM</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dstCM</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>dstCM</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getColorModel</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>dstCM</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>dstCM</color><color=#f8f8f2>.</color><color=#a6e22e>createCompatibleWritableRaster</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>()),</color>
                <color=#f8f8f2>dstCM</color><color=#f8f8f2>.</color><color=#a6e22e>isAlphaPremultiplied</color><color=#f8f8f2>(),</color>
                <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Rectangle2D</color> <color=#a6e22e>getBounds2D</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rectangle</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Point2D</color> <color=#a6e22e>getPoint2D</color><color=#f8f8f2>(</color><color=#f8f8f2>Point2D</color> <color=#f8f8f2>srcPt</color><color=#f8f8f2>,</color> <color=#f8f8f2>Point2D</color> <color=#f8f8f2>dstPt</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dstPt</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>dstPt</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Point2D</color><color=#f8f8f2>.</color><color=#a6e22e>Double</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>dstPt</color><color=#f8f8f2>.</color><color=#a6e22e>setLocation</color><color=#f8f8f2>(</color><color=#f8f8f2>srcPt</color><color=#f8f8f2>.</color><color=#a6e22e>getX</color><color=#f8f8f2>(),</color> <color=#f8f8f2>srcPt</color><color=#f8f8f2>.</color><color=#a6e22e>getY</color><color=#f8f8f2>());</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>dstPt</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>RenderingHints</color> <color=#a6e22e>getRenderingHints</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Convolve a block of pixels.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param kernel     the kernel</color>
<color=#75715e>     * @param inPixels   the input pixels</color>
<color=#75715e>     * @param outPixels  the output pixels</color>
<color=#75715e>     * @param width      the width</color>
<color=#75715e>     * @param height     the height</color>
<color=#75715e>     * @param edgeAction what to do at the edges</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>convolve</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>Kernel</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>edgeAction</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>convolve</color><color=#f8f8f2>(</color><color=#f8f8f2>kernel</color><color=#f8f8f2>,</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>edgeAction</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Convolve a block of pixels.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param kernel     the kernel</color>
<color=#75715e>     * @param inPixels   the input pixels</color>
<color=#75715e>     * @param outPixels  the output pixels</color>
<color=#75715e>     * @param width      the width</color>
<color=#75715e>     * @param height     the height</color>
<color=#75715e>     * @param alpha      include alpha channel</color>
<color=#75715e>     * @param edgeAction what to do at the edges</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>convolve</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>Kernel</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color>
            <color=#66d9ef>boolean</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>edgeAction</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>kernel</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color>
            <color=#f8f8f2>convolveH</color><color=#f8f8f2>(</color><color=#f8f8f2>kernel</color><color=#f8f8f2>,</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>,</color> <color=#f8f8f2>edgeAction</color><color=#f8f8f2>);</color>
        <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>kernel</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color>
            <color=#f8f8f2>convolveV</color><color=#f8f8f2>(</color><color=#f8f8f2>kernel</color><color=#f8f8f2>,</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>,</color> <color=#f8f8f2>edgeAction</color><color=#f8f8f2>);</color>
        <color=#66d9ef>else</color> <color=#f8f8f2>convolveHV</color><color=#f8f8f2>(</color><color=#f8f8f2>kernel</color><color=#f8f8f2>,</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>,</color> <color=#f8f8f2>edgeAction</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Convolve with a 2D kernel.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param kernel     the kernel</color>
<color=#75715e>     * @param inPixels   the input pixels</color>
<color=#75715e>     * @param outPixels  the output pixels</color>
<color=#75715e>     * @param width      the width</color>
<color=#75715e>     * @param height     the height</color>
<color=#75715e>     * @param alpha      include alpha channel</color>
<color=#75715e>     * @param edgeAction what to do at the edges</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>convolveHV</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>Kernel</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color>
            <color=#66d9ef>boolean</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>edgeAction</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>matrix</color> <color=#f92672>=</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>.</color><color=#a6e22e>getKernelData</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>rows</color> <color=#f92672>=</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>cols</color> <color=#f92672>=</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>rows2</color> <color=#f92672>=</color> <color=#f8f8f2>rows</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>cols2</color> <color=#f92672>=</color> <color=#f8f8f2>cols</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>row</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>rows2</color><color=#f8f8f2>;</color> <color=#f8f8f2>row</color> <color=#f92672><=</color> <color=#f8f8f2>rows2</color><color=#f8f8f2>;</color> <color=#f8f8f2>row</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>iy</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672>+</color> <color=#f8f8f2>row</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>ioffset</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#ae81ff>0</color> <color=#f92672><=</color> <color=#f8f8f2>iy</color> <color=#f92672>&&</color> <color=#f8f8f2>iy</color> <color=#f92672><</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>ioffset</color> <color=#f92672>=</color> <color=#f8f8f2>iy</color> <color=#f92672>*</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>edgeAction</color> <color=#f92672>==</color> <color=#f8f8f2>CLAMP_EDGES</color><color=#f8f8f2>)</color> <color=#f8f8f2>ioffset</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672>*</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>edgeAction</color> <color=#f92672>==</color> <color=#f8f8f2>WRAP_EDGES</color><color=#f8f8f2>)</color> <color=#f8f8f2>ioffset</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>iy</color> <color=#f92672>+</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>else</color> <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>moffset</color> <color=#f92672>=</color> <color=#f8f8f2>cols</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>row</color> <color=#f92672>+</color> <color=#f8f8f2>rows2</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>cols2</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>col</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>cols2</color><color=#f8f8f2>;</color> <color=#f8f8f2>col</color> <color=#f92672><=</color> <color=#f8f8f2>cols2</color><color=#f8f8f2>;</color> <color=#f8f8f2>col</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>float</color> <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#f8f8f2>matrix</color><color=#f92672>[</color><color=#f8f8f2>moffset</color> <color=#f92672>+</color> <color=#f8f8f2>col</color><color=#f92672>]</color><color=#f8f8f2>;</color>

                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>f</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#66d9ef>int</color> <color=#f8f8f2>ix</color> <color=#f92672>=</color> <color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>col</color><color=#f8f8f2>;</color>
                            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#ae81ff>0</color> <color=#f92672><=</color> <color=#f8f8f2>ix</color> <color=#f92672>&&</color> <color=#f8f8f2>ix</color> <color=#f92672><</color> <color=#f8f8f2>width</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>edgeAction</color> <color=#f92672>==</color> <color=#f8f8f2>CLAMP_EDGES</color><color=#f8f8f2>)</color> <color=#f8f8f2>ix</color> <color=#f92672>=</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
                                <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>edgeAction</color> <color=#f92672>==</color> <color=#f8f8f2>WRAP_EDGES</color><color=#f8f8f2>)</color> <color=#f8f8f2>ix</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>width</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
                                <color=#66d9ef>else</color> <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>}</color>
                            <color=#66d9ef>int</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>ioffset</color> <color=#f92672>+</color> <color=#f8f8f2>ix</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>a</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color> <color=#f92672>*</color> <color=#f8f8f2>((</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
                            <color=#f8f8f2>r</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color> <color=#f92672>*</color> <color=#f8f8f2>((</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
                            <color=#f8f8f2>g</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color> <color=#f92672>*</color> <color=#f8f8f2>((</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
                            <color=#f8f8f2>b</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>}</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>ia</color> <color=#f92672>=</color> <color=#f8f8f2>alpha</color> <color=#f92672>?</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>))</color> <color=#f8f8f2>:</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>ir</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>));</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>ig</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>g</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>));</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>ib</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>outPixels</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ia</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>ir</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>ig</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>ib</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Convolve with a kernel consisting of one row.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param kernel     the kernel</color>
<color=#75715e>     * @param inPixels   the input pixels</color>
<color=#75715e>     * @param outPixels  the output pixels</color>
<color=#75715e>     * @param width      the width</color>
<color=#75715e>     * @param height     the height</color>
<color=#75715e>     * @param alpha      include alpha channel</color>
<color=#75715e>     * @param edgeAction what to do at the edges</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>convolveH</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>Kernel</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color>
            <color=#66d9ef>boolean</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>edgeAction</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>matrix</color> <color=#f92672>=</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>.</color><color=#a6e22e>getKernelData</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>cols</color> <color=#f92672>=</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>cols2</color> <color=#f92672>=</color> <color=#f8f8f2>cols</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>ioffset</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672>*</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>moffset</color> <color=#f92672>=</color> <color=#f8f8f2>cols2</color><color=#f8f8f2>;</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>col</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>cols2</color><color=#f8f8f2>;</color> <color=#f8f8f2>col</color> <color=#f92672><=</color> <color=#f8f8f2>cols2</color><color=#f8f8f2>;</color> <color=#f8f8f2>col</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>float</color> <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#f8f8f2>matrix</color><color=#f92672>[</color><color=#f8f8f2>moffset</color> <color=#f92672>+</color> <color=#f8f8f2>col</color><color=#f92672>]</color><color=#f8f8f2>;</color>

                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>f</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>ix</color> <color=#f92672>=</color> <color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>col</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ix</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>edgeAction</color> <color=#f92672>==</color> <color=#f8f8f2>CLAMP_EDGES</color><color=#f8f8f2>)</color> <color=#f8f8f2>ix</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                            <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>edgeAction</color> <color=#f92672>==</color> <color=#f8f8f2>WRAP_EDGES</color><color=#f8f8f2>)</color> <color=#f8f8f2>ix</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>width</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ix</color> <color=#f92672>>=</color> <color=#f8f8f2>width</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>edgeAction</color> <color=#f92672>==</color> <color=#f8f8f2>CLAMP_EDGES</color><color=#f8f8f2>)</color> <color=#f8f8f2>ix</color> <color=#f92672>=</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                            <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>edgeAction</color> <color=#f92672>==</color> <color=#f8f8f2>WRAP_EDGES</color><color=#f8f8f2>)</color> <color=#f8f8f2>ix</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>width</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>ioffset</color> <color=#f92672>+</color> <color=#f8f8f2>ix</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>a</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color> <color=#f92672>*</color> <color=#f8f8f2>((</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>r</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color> <color=#f92672>*</color> <color=#f8f8f2>((</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>g</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color> <color=#f92672>*</color> <color=#f8f8f2>((</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>b</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>ia</color> <color=#f92672>=</color> <color=#f8f8f2>alpha</color> <color=#f92672>?</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>))</color> <color=#f8f8f2>:</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>ir</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>));</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>ig</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>g</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>));</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>ib</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>outPixels</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ia</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>ir</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>ig</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>ib</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Convolve with a kernel consisting of one column.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param kernel     the kernel</color>
<color=#75715e>     * @param inPixels   the input pixels</color>
<color=#75715e>     * @param outPixels  the output pixels</color>
<color=#75715e>     * @param width      the width</color>
<color=#75715e>     * @param height     the height</color>
<color=#75715e>     * @param alpha      include alpha channel</color>
<color=#75715e>     * @param edgeAction what to do at the edges</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>convolveV</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>Kernel</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color>
            <color=#66d9ef>boolean</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>edgeAction</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>matrix</color> <color=#f92672>=</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>.</color><color=#a6e22e>getKernelData</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>rows</color> <color=#f92672>=</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>rows2</color> <color=#f92672>=</color> <color=#f8f8f2>rows</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>row</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>rows2</color><color=#f8f8f2>;</color> <color=#f8f8f2>row</color> <color=#f92672><=</color> <color=#f8f8f2>rows2</color><color=#f8f8f2>;</color> <color=#f8f8f2>row</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>iy</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672>+</color> <color=#f8f8f2>row</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>ioffset</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>iy</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>edgeAction</color> <color=#f92672>==</color> <color=#f8f8f2>CLAMP_EDGES</color><color=#f8f8f2>)</color> <color=#f8f8f2>ioffset</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>edgeAction</color> <color=#f92672>==</color> <color=#f8f8f2>WRAP_EDGES</color><color=#f8f8f2>)</color> <color=#f8f8f2>ioffset</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>y</color> <color=#f92672>+</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>else</color> <color=#f8f8f2>ioffset</color> <color=#f92672>=</color> <color=#f8f8f2>iy</color> <color=#f92672>*</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>iy</color> <color=#f92672>>=</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>edgeAction</color> <color=#f92672>==</color> <color=#f8f8f2>CLAMP_EDGES</color><color=#f8f8f2>)</color> <color=#f8f8f2>ioffset</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>height</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>edgeAction</color> <color=#f92672>==</color> <color=#f8f8f2>WRAP_EDGES</color><color=#f8f8f2>)</color> <color=#f8f8f2>ioffset</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>y</color> <color=#f92672>+</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>else</color> <color=#f8f8f2>ioffset</color> <color=#f92672>=</color> <color=#f8f8f2>iy</color> <color=#f92672>*</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>ioffset</color> <color=#f92672>=</color> <color=#f8f8f2>iy</color> <color=#f92672>*</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>

                    <color=#66d9ef>float</color> <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#f8f8f2>matrix</color><color=#f92672>[</color><color=#f8f8f2>row</color> <color=#f92672>+</color> <color=#f8f8f2>rows2</color><color=#f92672>]</color><color=#f8f8f2>;</color>

                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>f</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>ioffset</color> <color=#f92672>+</color> <color=#f8f8f2>x</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>a</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color> <color=#f92672>*</color> <color=#f8f8f2>((</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>r</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color> <color=#f92672>*</color> <color=#f8f8f2>((</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>g</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color> <color=#f92672>*</color> <color=#f8f8f2>((</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>b</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>ia</color> <color=#f92672>=</color> <color=#f8f8f2>alpha</color> <color=#f92672>?</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>))</color> <color=#f8f8f2>:</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>ir</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>));</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>ig</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>g</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>));</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>ib</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>outPixels</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ia</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>ir</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>ig</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>ib</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#e6db74>"Blur/Convolve..."</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>