<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A filter which quantizes an image to a set number of colors - useful for producing images which</color>
<color=#75715e> * are to be encoded using an index color model. The filter can perform Floyd-Steinberg</color>
<color=#75715e> * error-diffusion dithering if required. At present, the quantization is done using an octtree</color>
<color=#75715e> * algorithm but I eventually hope to add more quantization methods such as median cut. Note: at</color>
<color=#75715e> * present, the filter produces an image which uses the RGB color model (because the application it</color>
<color=#75715e> * was written for required it). I hope to extend it to produce an IndexColorModel by request.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>QuantizeFilter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>WholeImageFilter</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Floyd-Steinberg dithering matrix.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>matrix</color> <color=#f92672>=</color> <color=#f8f8f2>{</color>
            <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color>
            <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>7</color><color=#f8f8f2>,</color>
            <color=#ae81ff>3</color><color=#f8f8f2>,</color> <color=#ae81ff>5</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>};</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>sum</color> <color=#f92672>=</color> <color=#ae81ff>3</color> <color=#f92672>+</color> <color=#ae81ff>5</color> <color=#f92672>+</color> <color=#ae81ff>7</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>dither</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>numColors</color> <color=#f92672>=</color> <color=#ae81ff>256</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>serpentine</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the number of colors to quantize to.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param numColors the number of colors. The default is 256.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setNumColors</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>numColors</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>numColors</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>numColors</color><color=#f8f8f2>,</color> <color=#ae81ff>8</color><color=#f8f8f2>),</color> <color=#ae81ff>256</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the number of colors to quantize to.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the number of colors.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNumColors</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>numColors</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set whether to use dithering or not. If not, the image is posterized.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param dither true to use dithering</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setDither</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>dither</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dither</color> <color=#f92672>=</color> <color=#f8f8f2>dither</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Return the dithering setting</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the current setting</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getDither</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>dither</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set whether to use a serpentine pattern for return or not. This can reduce 'avalanche'</color>
<color=#75715e>     * artifacts in the output.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param serpentine true to use serpentine pattern</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setSerpentine</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>serpentine</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>serpentine</color> <color=#f92672>=</color> <color=#f8f8f2>serpentine</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Return the serpentine setting</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the current setting</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getSerpentine</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>serpentine</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>quantize</color><color=#f8f8f2>(</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>numColors</color><color=#f8f8f2>,</color>
            <color=#66d9ef>boolean</color> <color=#f8f8f2>dither</color><color=#f8f8f2>,</color>
            <color=#66d9ef>boolean</color> <color=#f8f8f2>serpentine</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>Quantizer</color> <color=#f8f8f2>quantizer</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>OctTreeQuantizer</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>quantizer</color><color=#f8f8f2>.</color><color=#a6e22e>setup</color><color=#f8f8f2>(</color><color=#f8f8f2>numColors</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>quantizer</color><color=#f8f8f2>.</color><color=#a6e22e>addPixels</color><color=#f8f8f2>(</color><color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>count</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>table</color> <color=#f92672>=</color> <color=#f8f8f2>quantizer</color><color=#f8f8f2>.</color><color=#a6e22e>buildColorTable</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>dither</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>outPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>table</color><color=#f92672>[</color><color=#f8f8f2>quantizer</color><color=#f8f8f2>.</color><color=#a6e22e>getIndexForColor</color><color=#f8f8f2>(</color><color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>boolean</color> <color=#f8f8f2>reverse</color> <color=#f92672>=</color> <color=#f8f8f2>serpentine</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>y</color> <color=#f92672>&</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>direction</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>reverse</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672>*</color> <color=#f8f8f2>width</color> <color=#f92672>+</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>direction</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672>*</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>direction</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>rgb1</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>rgb2</color> <color=#f92672>=</color> <color=#f8f8f2>table</color><color=#f92672>[</color><color=#f8f8f2>quantizer</color><color=#f8f8f2>.</color><color=#a6e22e>getIndexForColor</color><color=#f8f8f2>(</color><color=#f8f8f2>rgb1</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>

                    <color=#f8f8f2>outPixels</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>rgb2</color><color=#f8f8f2>;</color>

                    <color=#66d9ef>int</color> <color=#f8f8f2>r1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb1</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>g1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb1</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>b1</color> <color=#f92672>=</color> <color=#f8f8f2>rgb1</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>

                    <color=#66d9ef>int</color> <color=#f8f8f2>r2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb2</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>g2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb2</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>b2</color> <color=#f92672>=</color> <color=#f8f8f2>rgb2</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>

                    <color=#66d9ef>int</color> <color=#f8f8f2>er</color> <color=#f92672>=</color> <color=#f8f8f2>r1</color> <color=#f92672>-</color> <color=#f8f8f2>r2</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>eg</color> <color=#f92672>=</color> <color=#f8f8f2>g1</color> <color=#f92672>-</color> <color=#f8f8f2>g2</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>eb</color> <color=#f92672>=</color> <color=#f8f8f2>b1</color> <color=#f92672>-</color> <color=#f8f8f2>b2</color><color=#f8f8f2>;</color>

                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>iy</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#ae81ff>0</color> <color=#f92672><=</color> <color=#f8f8f2>iy</color> <color=#f92672>&&</color> <color=#f8f8f2>iy</color> <color=#f92672><</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                <color=#66d9ef>int</color> <color=#f8f8f2>jx</color> <color=#f92672>=</color> <color=#f8f8f2>j</color> <color=#f92672>+</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
                                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#ae81ff>0</color> <color=#f92672><=</color> <color=#f8f8f2>jx</color> <color=#f92672>&&</color> <color=#f8f8f2>jx</color> <color=#f92672><</color> <color=#f8f8f2>width</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                    <color=#66d9ef>int</color> <color=#f8f8f2>w</color><color=#f8f8f2>;</color>
                                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>reverse</color><color=#f8f8f2>)</color> <color=#f8f8f2>w</color> <color=#f92672>=</color> <color=#f8f8f2>matrix</color><color=#f92672>[</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#ae81ff>3</color> <color=#f92672>-</color> <color=#f8f8f2>j</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                                    <color=#66d9ef>else</color> <color=#f8f8f2>w</color> <color=#f92672>=</color> <color=#f8f8f2>matrix</color><color=#f92672>[</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#ae81ff>3</color> <color=#f92672>+</color> <color=#f8f8f2>j</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>w</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                        <color=#66d9ef>int</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#f8f8f2>reverse</color> <color=#f92672>?</color> <color=#f8f8f2>index</color> <color=#f92672>-</color> <color=#f8f8f2>j</color> <color=#f8f8f2>:</color> <color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#f8f8f2>j</color><color=#f8f8f2>;</color>
                                        <color=#f8f8f2>rgb1</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                                        <color=#f8f8f2>r1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb1</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                                        <color=#f8f8f2>g1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb1</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                                        <color=#f8f8f2>b1</color> <color=#f92672>=</color> <color=#f8f8f2>rgb1</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                                        <color=#f8f8f2>r1</color> <color=#f92672>+=</color> <color=#f8f8f2>er</color> <color=#f92672>*</color> <color=#f8f8f2>w</color> <color=#f92672>/</color> <color=#f8f8f2>sum</color><color=#f8f8f2>;</color>
                                        <color=#f8f8f2>g1</color> <color=#f92672>+=</color> <color=#f8f8f2>eg</color> <color=#f92672>*</color> <color=#f8f8f2>w</color> <color=#f92672>/</color> <color=#f8f8f2>sum</color><color=#f8f8f2>;</color>
                                        <color=#f8f8f2>b1</color> <color=#f92672>+=</color> <color=#f8f8f2>eb</color> <color=#f92672>*</color> <color=#f8f8f2>w</color> <color=#f92672>/</color> <color=#f8f8f2>sum</color><color=#f8f8f2>;</color>
                                        <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color> <color=#f92672>=</color>
                                                <color=#f8f8f2>(</color><color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>(</color><color=#f8f8f2>r1</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color>
                                                        <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>(</color><color=#f8f8f2>g1</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color>
                                                        <color=#f92672>|</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>(</color><color=#f8f8f2>b1</color><color=#f8f8f2>);</color>
                                    <color=#f8f8f2>}</color>
                                <color=#f8f8f2>}</color>
                            <color=#f8f8f2>}</color>
                        <color=#f8f8f2>}</color>
                    <color=#f8f8f2>}</color>
                    <color=#f8f8f2>index</color> <color=#f92672>+=</color> <color=#f8f8f2>direction</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#a6e22e>filterPixels</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>Rectangle</color> <color=#f8f8f2>transformedSpace</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>outPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#f8f8f2>height</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>quantize</color><color=#f8f8f2>(</color><color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>numColors</color><color=#f8f8f2>,</color> <color=#f8f8f2>dither</color><color=#f8f8f2>,</color> <color=#f8f8f2>serpentine</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#e6db74>"Colors/Quantize..."</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>