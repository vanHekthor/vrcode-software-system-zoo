<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.AffineTransform</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.Point2D</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.Rectangle2D</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BandCombineOp</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.ColorModel</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A filter which draws a drop shadow based on the alpha channel of the image.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ShadowFilter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractBufferedImageOp</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>radius</color> <color=#f92672>=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>angle</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>PI</color> <color=#f92672>*</color> <color=#ae81ff>6</color> <color=#f92672>/</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>distance</color> <color=#f92672>=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>opacity</color> <color=#f92672>=</color> <color=#ae81ff>0.5f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>addMargins</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>shadowOnly</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>shadowColor</color> <color=#f92672>=</color> <color=#ae81ff>0xff000000</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Construct a ShadowFilter.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>ShadowFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Construct a ShadowFilter.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param radius  the radius of the shadow</color>
<color=#75715e>     * @param xOffset the X offset of the shadow</color>
<color=#75715e>     * @param yOffset the Y offset of the shadow</color>
<color=#75715e>     * @param opacity the opacity of the shadow</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>ShadowFilter</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>radius</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>xOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>yOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>opacity</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>radius</color> <color=#f92672>=</color> <color=#f8f8f2>radius</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>angle</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>atan2</color><color=#f8f8f2>(</color><color=#f8f8f2>yOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>xOffset</color><color=#f8f8f2>);</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>distance</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sqrt</color><color=#f8f8f2>(</color><color=#f8f8f2>xOffset</color> <color=#f92672>*</color> <color=#f8f8f2>xOffset</color> <color=#f92672>+</color> <color=#f8f8f2>yOffset</color> <color=#f92672>*</color> <color=#f8f8f2>yOffset</color><color=#f8f8f2>);</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>opacity</color> <color=#f92672>=</color> <color=#f8f8f2>opacity</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Specifies the angle of the shadow.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param angle the angle of the shadow.</color>
<color=#75715e>     * @angle</color>
<color=#75715e>     * @see #getAngle</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setAngle</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>angle</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>angle</color> <color=#f92672>=</color> <color=#f8f8f2>angle</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the angle of the shadow.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the angle of the shadow.</color>
<color=#75715e>     * @see #setAngle</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getAngle</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>angle</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the distance of the shadow.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param distance the distance.</color>
<color=#75715e>     * @see #getDistance</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setDistance</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>distance</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>distance</color> <color=#f92672>=</color> <color=#f8f8f2>distance</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the distance of the shadow.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the distance.</color>
<color=#75715e>     * @see #setDistance</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getDistance</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>distance</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the radius of the kernel, and hence the amount of blur. The bigger the radius, the longer</color>
<color=#75715e>     * this filter will take.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param radius the radius of the blur in pixels.</color>
<color=#75715e>     * @see #getRadius</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setRadius</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>radius</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>radius</color> <color=#f92672>=</color> <color=#f8f8f2>radius</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the radius of the kernel.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the radius</color>
<color=#75715e>     * @see #setRadius</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getRadius</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>radius</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the opacity of the shadow.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param opacity the opacity.</color>
<color=#75715e>     * @see #getOpacity</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setOpacity</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>opacity</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>opacity</color> <color=#f92672>=</color> <color=#f8f8f2>opacity</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the opacity of the shadow.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the opacity.</color>
<color=#75715e>     * @see #setOpacity</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getOpacity</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>opacity</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the color of the shadow.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param shadowColor the color.</color>
<color=#75715e>     * @see #getShadowColor</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setShadowColor</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>shadowColor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>shadowColor</color> <color=#f92672>=</color> <color=#f8f8f2>shadowColor</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the color of the shadow.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the color.</color>
<color=#75715e>     * @see #setShadowColor</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getShadowColor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>shadowColor</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set whether to increase the size of the output image to accomodate the shadow.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param addMargins true to add margins.</color>
<color=#75715e>     * @see #getAddMargins</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setAddMargins</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>addMargins</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>addMargins</color> <color=#f92672>=</color> <color=#f8f8f2>addMargins</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get whether to increase the size of the output image to accomodate the shadow.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return true to add margins.</color>
<color=#75715e>     * @see #setAddMargins</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getAddMargins</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>addMargins</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set whether to only draw the shadow without the original image.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param shadowOnly true to only draw the shadow.</color>
<color=#75715e>     * @see #getShadowOnly</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setShadowOnly</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>shadowOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>shadowOnly</color> <color=#f92672>=</color> <color=#f8f8f2>shadowOnly</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get whether to only draw the shadow without the original image.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return true to only draw the shadow.</color>
<color=#75715e>     * @see #setShadowOnly</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getShadowOnly</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>shadowOnly</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Rectangle2D</color> <color=#a6e22e>getBounds2D</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Rectangle</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rectangle</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>());</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>addMargins</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>xOffset</color> <color=#f92672>=</color> <color=#f8f8f2>distance</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>cos</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>);</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>yOffset</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>distance</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sin</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>r</color><color=#f8f8f2>.</color><color=#a6e22e>width</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>abs</color><color=#f8f8f2>(</color><color=#f8f8f2>xOffset</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>radius</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>r</color><color=#f8f8f2>.</color><color=#a6e22e>height</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>abs</color><color=#f8f8f2>(</color><color=#f8f8f2>yOffset</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>radius</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>r</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Point2D</color> <color=#a6e22e>getPoint2D</color><color=#f8f8f2>(</color><color=#f8f8f2>Point2D</color> <color=#f8f8f2>srcPt</color><color=#f8f8f2>,</color> <color=#f8f8f2>Point2D</color> <color=#f8f8f2>dstPt</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dstPt</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>dstPt</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Point2D</color><color=#f8f8f2>.</color><color=#a6e22e>Double</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>addMargins</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>xOffset</color> <color=#f92672>=</color> <color=#f8f8f2>distance</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>cos</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>);</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>yOffset</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>distance</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sin</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>);</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>topShadow</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>radius</color> <color=#f92672>-</color> <color=#f8f8f2>yOffset</color><color=#f8f8f2>);</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>leftShadow</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>radius</color> <color=#f92672>-</color> <color=#f8f8f2>xOffset</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>dstPt</color><color=#f8f8f2>.</color><color=#a6e22e>setLocation</color><color=#f8f8f2>(</color><color=#f8f8f2>srcPt</color><color=#f8f8f2>.</color><color=#a6e22e>getX</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>leftShadow</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcPt</color><color=#f8f8f2>.</color><color=#a6e22e>getY</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>topShadow</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>dstPt</color><color=#f8f8f2>.</color><color=#a6e22e>setLocation</color><color=#f8f8f2>(</color><color=#f8f8f2>srcPt</color><color=#f8f8f2>.</color><color=#a6e22e>getX</color><color=#f8f8f2>(),</color> <color=#f8f8f2>srcPt</color><color=#f8f8f2>.</color><color=#a6e22e>getY</color><color=#f8f8f2>());</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>dstPt</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dst</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#66d9ef>float</color> <color=#f8f8f2>xOffset</color> <color=#f92672>=</color> <color=#f8f8f2>distance</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>cos</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>);</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>yOffset</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>distance</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sin</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dst</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>addMargins</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>cm</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getColorModel</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>dst</color> <color=#f92672>=</color>
                        <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color>
                                <color=#f8f8f2>cm</color><color=#f8f8f2>,</color>
                                <color=#f8f8f2>cm</color><color=#f8f8f2>.</color><color=#a6e22e>createCompatibleWritableRaster</color><color=#f8f8f2>(</color>
                                        <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>abs</color><color=#f8f8f2>(</color><color=#f8f8f2>xOffset</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>radius</color><color=#f8f8f2>),</color>
                                        <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>abs</color><color=#f8f8f2>(</color><color=#f8f8f2>yOffset</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>radius</color><color=#f8f8f2>)),</color>
                                <color=#f8f8f2>cm</color><color=#f8f8f2>.</color><color=#a6e22e>isAlphaPremultiplied</color><color=#f8f8f2>(),</color>
                                <color=#66d9ef>null</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>dst</color> <color=#f92672>=</color> <color=#f8f8f2>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>float</color> <color=#f8f8f2>shadowR</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>shadowColor</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>255</color><color=#f8f8f2>f</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>shadowG</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>shadowColor</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>255</color><color=#f8f8f2>f</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>shadowB</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>shadowColor</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>255</color><color=#f8f8f2>f</color><color=#f8f8f2>;</color>

        <color=#75715e>// Make a black mask from the image's alpha channel</color>
        <color=#66d9ef>float</color><color=#f92672>[][]</color> <color=#f8f8f2>extractAlpha</color> <color=#f92672>=</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>{</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>shadowR</color><color=#f8f8f2>},</color>
                <color=#f8f8f2>{</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>shadowG</color><color=#f8f8f2>},</color>
                <color=#f8f8f2>{</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>shadowB</color><color=#f8f8f2>},</color>
                <color=#f8f8f2>{</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>opacity</color><color=#f8f8f2>}</color>
        <color=#f8f8f2>};</color>
        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>shadow</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB</color><color=#f8f8f2>);</color>
        <color=#66d9ef>new</color> <color=#f8f8f2>BandCombineOp</color><color=#f8f8f2>(</color><color=#f8f8f2>extractAlpha</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>).</color><color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getRaster</color><color=#f8f8f2>(),</color> <color=#f8f8f2>shadow</color><color=#f8f8f2>.</color><color=#a6e22e>getRaster</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>shadow</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>GaussianFilter</color><color=#f8f8f2>(</color><color=#f8f8f2>radius</color><color=#f8f8f2>).</color><color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>shadow</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>Graphics2D</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>dst</color><color=#f8f8f2>.</color><color=#a6e22e>createGraphics</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>setComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>AlphaComposite</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>AlphaComposite</color><color=#f8f8f2>.</color><color=#a6e22e>SRC_OVER</color><color=#f8f8f2>,</color> <color=#f8f8f2>opacity</color><color=#f8f8f2>));</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>addMargins</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>radius2</color> <color=#f92672>=</color> <color=#f8f8f2>radius</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>topShadow</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>radius</color> <color=#f92672>-</color> <color=#f8f8f2>yOffset</color><color=#f8f8f2>);</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>leftShadow</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>radius</color> <color=#f92672>-</color> <color=#f8f8f2>xOffset</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>translate</color><color=#f8f8f2>(</color><color=#f8f8f2>leftShadow</color><color=#f8f8f2>,</color> <color=#f8f8f2>topShadow</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawRenderedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>shadow</color><color=#f8f8f2>,</color> <color=#f8f8f2>AffineTransform</color><color=#f8f8f2>.</color><color=#a6e22e>getTranslateInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>xOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>yOffset</color><color=#f8f8f2>));</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>shadowOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>setComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>AlphaComposite</color><color=#f8f8f2>.</color><color=#a6e22e>SrcOver</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawRenderedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>dst</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#e6db74>"Stylize/Drop Shadow..."</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>