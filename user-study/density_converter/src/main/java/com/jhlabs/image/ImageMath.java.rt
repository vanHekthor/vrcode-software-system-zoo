<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A class containing static math methods useful for image processing.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ImageMath</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The value of pi as a float.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>PI</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>PI</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The value of half pi as a float.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>HALF_PI</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>PI</color> <color=#f92672>/</color> <color=#ae81ff>2.0f</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The value of quarter pi as a float.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>QUARTER_PI</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>PI</color> <color=#f92672>/</color> <color=#ae81ff>4.0f</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The value of two pi as a float.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>TWO_PI</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>PI</color> <color=#f92672>*</color> <color=#ae81ff>2.0f</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Apply a bias to a number in the unit interval, moving numbers towards 0 or 1 according to the</color>
<color=#75715e>     * bias parameter.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param a the number to bias</color>
<color=#75715e>     * @param b the bias parameter. 0.5 means no change, smaller values bias towards 0, larger towards</color>
<color=#75715e>     *          1.</color>
<color=#75715e>     * @return the output value</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>float</color> <color=#a6e22e>bias</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>//		return (float)Math.pow(a, Math.log(b) / Math.log(0.5));</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>a</color> <color=#f92672>/</color> <color=#f8f8f2>((</color><color=#ae81ff>1.0f</color> <color=#f92672>/</color> <color=#f8f8f2>b</color> <color=#f92672>-</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>1.0f</color> <color=#f92672>-</color> <color=#f8f8f2>a</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * A variant of the gamma function.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param a the number to apply gain to</color>
<color=#75715e>     * @param b the gain parameter. 0.5 means no change, smaller values reduce gain, larger values</color>
<color=#75715e>     *          increase gain.</color>
<color=#75715e>     * @return the output value</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>float</color> <color=#a6e22e>gain</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#75715e>/*</color>
<color=#75715e>    		float p = (float)Math.log(1.0 - b) / (float)Math.log(0.5);</color>

<color=#75715e>    		if (a < .001)</color>
<color=#75715e>    			return 0.0f;</color>
<color=#75715e>    		else if (a > .999)</color>
<color=#75715e>    			return 1.0f;</color>
<color=#75715e>    		if (a < 0.5)</color>
<color=#75715e>    			return (float)Math.pow(2 * a, p) / 2;</color>
<color=#75715e>    		else</color>
<color=#75715e>    			return 1.0f - (float)Math.pow(2 * (1. - a), p) / 2;</color>
<color=#75715e>    */</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#ae81ff>1.0f</color> <color=#f92672>/</color> <color=#f8f8f2>b</color> <color=#f92672>-</color> <color=#ae81ff>2.0f</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>1.0f</color> <color=#f92672>-</color> <color=#ae81ff>2.0f</color> <color=#f92672>*</color> <color=#f8f8f2>a</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672><</color> <color=#ae81ff>0.5</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color> <color=#f8f8f2>a</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>+</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>);</color>
        <color=#66d9ef>else</color> <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>-</color> <color=#f8f8f2>a</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>-</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The step function. Returns 0 below a threshold, 1 above.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param a the threshold position</color>
<color=#75715e>     * @param x the input parameter</color>
<color=#75715e>     * @return the output value - 0 or 1</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>float</color> <color=#a6e22e>step</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>x</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>a</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>0.0f</color> <color=#f8f8f2>:</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The pulse function. Returns 1 between two thresholds, 0 outside.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param a the lower threshold position</color>
<color=#75715e>     * @param b the upper threshold position</color>
<color=#75715e>     * @param x the input parameter</color>
<color=#75715e>     * @return the output value - 0 or 1</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>float</color> <color=#a6e22e>pulse</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>x</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>a</color> <color=#f92672>||</color> <color=#f8f8f2>x</color> <color=#f92672>>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>0.0f</color> <color=#f8f8f2>:</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * A smoothed pulse function. A cubic function is used to smooth the step between two thresholds.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param a1 the lower threshold position for the start of the pulse</color>
<color=#75715e>     * @param a2 the upper threshold position for the start of the pulse</color>
<color=#75715e>     * @param b1 the lower threshold position for the end of the pulse</color>
<color=#75715e>     * @param b2 the upper threshold position for the end of the pulse</color>
<color=#75715e>     * @param x  the input parameter</color>
<color=#75715e>     * @return the output value</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>float</color> <color=#a6e22e>smoothPulse</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>a1</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>a2</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>b1</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>b2</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>x</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>a1</color> <color=#f92672>||</color> <color=#f8f8f2>x</color> <color=#f92672>>=</color> <color=#f8f8f2>b2</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>>=</color> <color=#f8f8f2>a2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>b1</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>-</color> <color=#f8f8f2>b1</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#f8f8f2>b2</color> <color=#f92672>-</color> <color=#f8f8f2>b1</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color> <color=#ae81ff>1.0f</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>*</color> <color=#f8f8f2>x</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>3.0f</color> <color=#f92672>-</color> <color=#ae81ff>2.0f</color> <color=#f92672>*</color> <color=#f8f8f2>x</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>-</color> <color=#f8f8f2>a1</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#f8f8f2>a2</color> <color=#f92672>-</color> <color=#f8f8f2>a1</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>x</color> <color=#f92672>*</color> <color=#f8f8f2>x</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>3.0f</color> <color=#f92672>-</color> <color=#ae81ff>2.0f</color> <color=#f92672>*</color> <color=#f8f8f2>x</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * A smoothed step function. A cubic function is used to smooth the step between two thresholds.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param a the lower threshold position</color>
<color=#75715e>     * @param b the upper threshold position</color>
<color=#75715e>     * @param x the input parameter</color>
<color=#75715e>     * @return the output value</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>float</color> <color=#a6e22e>smoothStep</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>x</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>a</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>-</color> <color=#f8f8f2>a</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color> <color=#f92672>-</color> <color=#f8f8f2>a</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>x</color> <color=#f92672>*</color> <color=#f8f8f2>x</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>3</color> <color=#f92672>-</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>x</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * A "circle up" function. Returns y on a unit circle given 1-x. Useful for forming bevels.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param x the input parameter in the range 0..1</color>
<color=#75715e>     * @return the output value</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>float</color> <color=#a6e22e>circleUp</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>x</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>1</color> <color=#f92672>-</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sqrt</color><color=#f8f8f2>(</color><color=#ae81ff>1</color> <color=#f92672>-</color> <color=#f8f8f2>x</color> <color=#f92672>*</color> <color=#f8f8f2>x</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * A "circle down" function. Returns 1-y on a unit circle given x. Useful for forming bevels.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param x the input parameter in the range 0..1</color>
<color=#75715e>     * @return the output value</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>float</color> <color=#a6e22e>circleDown</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>x</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>1.0f</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sqrt</color><color=#f8f8f2>(</color><color=#ae81ff>1</color> <color=#f92672>-</color> <color=#f8f8f2>x</color> <color=#f92672>*</color> <color=#f8f8f2>x</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Clamp a value to an interval.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param a the lower clamp threshold</color>
<color=#75715e>     * @param b the upper clamp threshold</color>
<color=#75715e>     * @param x the input parameter</color>
<color=#75715e>     * @return the clamped value</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>float</color> <color=#a6e22e>clamp</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>a</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>a</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>></color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>b</color> <color=#f8f8f2>:</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Clamp a value to an interval.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param a the lower clamp threshold</color>
<color=#75715e>     * @param b the upper clamp threshold</color>
<color=#75715e>     * @param x the input parameter</color>
<color=#75715e>     * @return the clamped value</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>clamp</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>a</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>a</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>></color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>b</color> <color=#f8f8f2>:</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Return a mod b. This differs from the % operator with respect to negative numbers.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param a the dividend</color>
<color=#75715e>     * @param b the divisor</color>
<color=#75715e>     * @return a mod b</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>double</color> <color=#a6e22e>mod</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#66d9ef>double</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672>/</color> <color=#f8f8f2>b</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>a</color> <color=#f92672>-=</color> <color=#f8f8f2>n</color> <color=#f92672>*</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color> <color=#f8f8f2>a</color> <color=#f92672>+</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>a</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Return a mod b. This differs from the % operator with respect to negative numbers.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param a the dividend</color>
<color=#75715e>     * @param b the divisor</color>
<color=#75715e>     * @return a mod b</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>float</color> <color=#a6e22e>mod</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672>/</color> <color=#f8f8f2>b</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>a</color> <color=#f92672>-=</color> <color=#f8f8f2>n</color> <color=#f92672>*</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color> <color=#f8f8f2>a</color> <color=#f92672>+</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>a</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Return a mod b. This differs from the % operator with respect to negative numbers.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param a the dividend</color>
<color=#75715e>     * @param b the divisor</color>
<color=#75715e>     * @return a mod b</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>mod</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>a</color> <color=#f92672>/</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>a</color> <color=#f92672>-=</color> <color=#f8f8f2>n</color> <color=#f92672>*</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color> <color=#f8f8f2>a</color> <color=#f92672>+</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>a</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The triangle function. Returns a repeating triangle shape in the range 0..1 with wavelength 1.0</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param x the input parameter</color>
<color=#75715e>     * @return the output value</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>float</color> <color=#a6e22e>triangle</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>x</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>mod</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#ae81ff>2.0f</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672><</color> <color=#ae81ff>0.5</color> <color=#f92672>?</color> <color=#f8f8f2>r</color> <color=#f8f8f2>:</color> <color=#ae81ff>1</color> <color=#f92672>-</color> <color=#f8f8f2>r</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Linear interpolation.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param t the interpolation parameter</color>
<color=#75715e>     * @param a the lower interpolation range</color>
<color=#75715e>     * @param b the upper interpolation range</color>
<color=#75715e>     * @return the interpolated value</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>float</color> <color=#a6e22e>lerp</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>t</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>a</color> <color=#f92672>+</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color> <color=#f92672>-</color> <color=#f8f8f2>a</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Linear interpolation.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param t the interpolation parameter</color>
<color=#75715e>     * @param a the lower interpolation range</color>
<color=#75715e>     * @param b the upper interpolation range</color>
<color=#75715e>     * @return the interpolated value</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>lerp</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>t</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672>+</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color> <color=#f92672>-</color> <color=#f8f8f2>a</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Linear interpolation of ARGB values.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param t    the interpolation parameter</color>
<color=#75715e>     * @param rgb1 the lower interpolation range</color>
<color=#75715e>     * @param rgb2 the upper interpolation range</color>
<color=#75715e>     * @return the interpolated value</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>mixColors</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>t</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>rgb1</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>rgb2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>a1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb1</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>r1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb1</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>g1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb1</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>b1</color> <color=#f92672>=</color> <color=#f8f8f2>rgb1</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>a2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb2</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>r2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb2</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>g2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb2</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>b2</color> <color=#f92672>=</color> <color=#f8f8f2>rgb2</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>a1</color> <color=#f92672>=</color> <color=#f8f8f2>lerp</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>,</color> <color=#f8f8f2>a1</color><color=#f8f8f2>,</color> <color=#f8f8f2>a2</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>r1</color> <color=#f92672>=</color> <color=#f8f8f2>lerp</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>,</color> <color=#f8f8f2>r1</color><color=#f8f8f2>,</color> <color=#f8f8f2>r2</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>g1</color> <color=#f92672>=</color> <color=#f8f8f2>lerp</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>,</color> <color=#f8f8f2>g1</color><color=#f8f8f2>,</color> <color=#f8f8f2>g2</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>b1</color> <color=#f92672>=</color> <color=#f8f8f2>lerp</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>,</color> <color=#f8f8f2>b1</color><color=#f8f8f2>,</color> <color=#f8f8f2>b2</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>a1</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>r1</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>g1</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>b1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Bilinear interpolation of ARGB values.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param x   the X interpolation parameter 0..1</color>
<color=#75715e>     * @param y   the y interpolation parameter 0..1</color>
<color=#75715e>     * @param rgb array of four ARGB values in the order NW, NE, SW, SE</color>
<color=#75715e>     * @return the interpolated value</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>bilinearInterpolate</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>nw</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>ne</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>sw</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>se</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>m0</color><color=#f8f8f2>,</color> <color=#f8f8f2>m1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>a0</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>nw</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>r0</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>nw</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>g0</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>nw</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>b0</color> <color=#f92672>=</color> <color=#f8f8f2>nw</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>a1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ne</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>r1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ne</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>g1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ne</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>b1</color> <color=#f92672>=</color> <color=#f8f8f2>ne</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>a2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>sw</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>r2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>sw</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>g2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>sw</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>b2</color> <color=#f92672>=</color> <color=#f8f8f2>sw</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>a3</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>se</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>r3</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>se</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>g3</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>se</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>b3</color> <color=#f92672>=</color> <color=#f8f8f2>se</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>

        <color=#66d9ef>float</color> <color=#f8f8f2>cx</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color> <color=#f92672>-</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>cy</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color> <color=#f92672>-</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>m0</color> <color=#f92672>=</color> <color=#f8f8f2>cx</color> <color=#f92672>*</color> <color=#f8f8f2>a0</color> <color=#f92672>+</color> <color=#f8f8f2>x</color> <color=#f92672>*</color> <color=#f8f8f2>a1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>m1</color> <color=#f92672>=</color> <color=#f8f8f2>cx</color> <color=#f92672>*</color> <color=#f8f8f2>a2</color> <color=#f92672>+</color> <color=#f8f8f2>x</color> <color=#f92672>*</color> <color=#f8f8f2>a3</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>cy</color> <color=#f92672>*</color> <color=#f8f8f2>m0</color> <color=#f92672>+</color> <color=#f8f8f2>y</color> <color=#f92672>*</color> <color=#f8f8f2>m1</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>m0</color> <color=#f92672>=</color> <color=#f8f8f2>cx</color> <color=#f92672>*</color> <color=#f8f8f2>r0</color> <color=#f92672>+</color> <color=#f8f8f2>x</color> <color=#f92672>*</color> <color=#f8f8f2>r1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>m1</color> <color=#f92672>=</color> <color=#f8f8f2>cx</color> <color=#f92672>*</color> <color=#f8f8f2>r2</color> <color=#f92672>+</color> <color=#f8f8f2>x</color> <color=#f92672>*</color> <color=#f8f8f2>r3</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>cy</color> <color=#f92672>*</color> <color=#f8f8f2>m0</color> <color=#f92672>+</color> <color=#f8f8f2>y</color> <color=#f92672>*</color> <color=#f8f8f2>m1</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>m0</color> <color=#f92672>=</color> <color=#f8f8f2>cx</color> <color=#f92672>*</color> <color=#f8f8f2>g0</color> <color=#f92672>+</color> <color=#f8f8f2>x</color> <color=#f92672>*</color> <color=#f8f8f2>g1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>m1</color> <color=#f92672>=</color> <color=#f8f8f2>cx</color> <color=#f92672>*</color> <color=#f8f8f2>g2</color> <color=#f92672>+</color> <color=#f8f8f2>x</color> <color=#f92672>*</color> <color=#f8f8f2>g3</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>cy</color> <color=#f92672>*</color> <color=#f8f8f2>m0</color> <color=#f92672>+</color> <color=#f8f8f2>y</color> <color=#f92672>*</color> <color=#f8f8f2>m1</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>m0</color> <color=#f92672>=</color> <color=#f8f8f2>cx</color> <color=#f92672>*</color> <color=#f8f8f2>b0</color> <color=#f92672>+</color> <color=#f8f8f2>x</color> <color=#f92672>*</color> <color=#f8f8f2>b1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>m1</color> <color=#f92672>=</color> <color=#f8f8f2>cx</color> <color=#f92672>*</color> <color=#f8f8f2>b2</color> <color=#f92672>+</color> <color=#f8f8f2>x</color> <color=#f92672>*</color> <color=#f8f8f2>b3</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>cy</color> <color=#f92672>*</color> <color=#f8f8f2>m0</color> <color=#f92672>+</color> <color=#f8f8f2>y</color> <color=#f92672>*</color> <color=#f8f8f2>m1</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>g</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Return the NTSC gray level of an RGB value.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param rgb1 the input pixel</color>
<color=#75715e>     * @return the gray level (0-255)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>brightnessNTSC</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>rgb</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672>*</color> <color=#ae81ff>0.299f</color> <color=#f92672>+</color> <color=#f8f8f2>g</color> <color=#f92672>*</color> <color=#ae81ff>0.587f</color> <color=#f92672>+</color> <color=#f8f8f2>b</color> <color=#f92672>*</color> <color=#ae81ff>0.114f</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// Catmull-Rom splines</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>m00</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>0.5f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>m01</color> <color=#f92672>=</color> <color=#ae81ff>1.5f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>m02</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1.5f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>m03</color> <color=#f92672>=</color> <color=#ae81ff>0.5f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>m10</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>m11</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>2.5f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>m12</color> <color=#f92672>=</color> <color=#ae81ff>2.0f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>m13</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>0.5f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>m20</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>0.5f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>m21</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>m22</color> <color=#f92672>=</color> <color=#ae81ff>0.5f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>m23</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>m30</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>m31</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>m32</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>m33</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Compute a Catmull-Rom spline.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param x        the input parameter</color>
<color=#75715e>     * @param numKnots the number of knots in the spline</color>
<color=#75715e>     * @param knots    the array of knots</color>
<color=#75715e>     * @return the spline value</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>float</color> <color=#a6e22e>spline</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>numKnots</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>knots</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>span</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>numSpans</color> <color=#f92672>=</color> <color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>k0</color><color=#f8f8f2>,</color> <color=#f8f8f2>k1</color><color=#f8f8f2>,</color> <color=#f8f8f2>k2</color><color=#f8f8f2>,</color> <color=#f8f8f2>k3</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>c0</color><color=#f8f8f2>,</color> <color=#f8f8f2>c1</color><color=#f8f8f2>,</color> <color=#f8f8f2>c2</color><color=#f8f8f2>,</color> <color=#f8f8f2>c3</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>numSpans</color> <color=#f92672><</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Too few knots in spline"</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>clamp</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>numSpans</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>span</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>span</color> <color=#f92672>></color> <color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f8f8f2>span</color> <color=#f92672>=</color> <color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>x</color> <color=#f92672>-=</color> <color=#f8f8f2>span</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>k0</color> <color=#f92672>=</color> <color=#f8f8f2>knots</color><color=#f92672>[</color><color=#f8f8f2>span</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>k1</color> <color=#f92672>=</color> <color=#f8f8f2>knots</color><color=#f92672>[</color><color=#f8f8f2>span</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>k2</color> <color=#f92672>=</color> <color=#f8f8f2>knots</color><color=#f92672>[</color><color=#f8f8f2>span</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>k3</color> <color=#f92672>=</color> <color=#f8f8f2>knots</color><color=#f92672>[</color><color=#f8f8f2>span</color> <color=#f92672>+</color> <color=#ae81ff>3</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>c3</color> <color=#f92672>=</color> <color=#f8f8f2>m00</color> <color=#f92672>*</color> <color=#f8f8f2>k0</color> <color=#f92672>+</color> <color=#f8f8f2>m01</color> <color=#f92672>*</color> <color=#f8f8f2>k1</color> <color=#f92672>+</color> <color=#f8f8f2>m02</color> <color=#f92672>*</color> <color=#f8f8f2>k2</color> <color=#f92672>+</color> <color=#f8f8f2>m03</color> <color=#f92672>*</color> <color=#f8f8f2>k3</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>c2</color> <color=#f92672>=</color> <color=#f8f8f2>m10</color> <color=#f92672>*</color> <color=#f8f8f2>k0</color> <color=#f92672>+</color> <color=#f8f8f2>m11</color> <color=#f92672>*</color> <color=#f8f8f2>k1</color> <color=#f92672>+</color> <color=#f8f8f2>m12</color> <color=#f92672>*</color> <color=#f8f8f2>k2</color> <color=#f92672>+</color> <color=#f8f8f2>m13</color> <color=#f92672>*</color> <color=#f8f8f2>k3</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>c1</color> <color=#f92672>=</color> <color=#f8f8f2>m20</color> <color=#f92672>*</color> <color=#f8f8f2>k0</color> <color=#f92672>+</color> <color=#f8f8f2>m21</color> <color=#f92672>*</color> <color=#f8f8f2>k1</color> <color=#f92672>+</color> <color=#f8f8f2>m22</color> <color=#f92672>*</color> <color=#f8f8f2>k2</color> <color=#f92672>+</color> <color=#f8f8f2>m23</color> <color=#f92672>*</color> <color=#f8f8f2>k3</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>c0</color> <color=#f92672>=</color> <color=#f8f8f2>m30</color> <color=#f92672>*</color> <color=#f8f8f2>k0</color> <color=#f92672>+</color> <color=#f8f8f2>m31</color> <color=#f92672>*</color> <color=#f8f8f2>k1</color> <color=#f92672>+</color> <color=#f8f8f2>m32</color> <color=#f92672>*</color> <color=#f8f8f2>k2</color> <color=#f92672>+</color> <color=#f8f8f2>m33</color> <color=#f92672>*</color> <color=#f8f8f2>k3</color><color=#f8f8f2>;</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>c3</color> <color=#f92672>*</color> <color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>c2</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>c1</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>c0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Compute a Catmull-Rom spline, but with variable knot spacing.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param x        the input parameter</color>
<color=#75715e>     * @param numKnots the number of knots in the spline</color>
<color=#75715e>     * @param xknots   the array of knot x values</color>
<color=#75715e>     * @param yknots   the array of knot y values</color>
<color=#75715e>     * @return the spline value</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>float</color> <color=#a6e22e>spline</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>numKnots</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>xknots</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>yknots</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>span</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>numSpans</color> <color=#f92672>=</color> <color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>k0</color><color=#f8f8f2>,</color> <color=#f8f8f2>k1</color><color=#f8f8f2>,</color> <color=#f8f8f2>k2</color><color=#f8f8f2>,</color> <color=#f8f8f2>k3</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>c0</color><color=#f8f8f2>,</color> <color=#f8f8f2>c1</color><color=#f8f8f2>,</color> <color=#f8f8f2>c2</color><color=#f8f8f2>,</color> <color=#f8f8f2>c3</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>numSpans</color> <color=#f92672><</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Too few knots in spline"</color><color=#f8f8f2>);</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>span</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>span</color> <color=#f92672><</color> <color=#f8f8f2>numSpans</color><color=#f8f8f2>;</color> <color=#f8f8f2>span</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>xknots</color><color=#f92672>[</color><color=#f8f8f2>span</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>></color> <color=#f8f8f2>x</color><color=#f8f8f2>)</color> <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>span</color> <color=#f92672>></color> <color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>3</color><color=#f8f8f2>)</color> <color=#f8f8f2>span</color> <color=#f92672>=</color> <color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>-</color> <color=#f8f8f2>xknots</color><color=#f92672>[</color><color=#f8f8f2>span</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#f8f8f2>xknots</color><color=#f92672>[</color><color=#f8f8f2>span</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>-</color> <color=#f8f8f2>xknots</color><color=#f92672>[</color><color=#f8f8f2>span</color><color=#f92672>]</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>span</color><color=#f92672>--</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>span</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>span</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>k0</color> <color=#f92672>=</color> <color=#f8f8f2>yknots</color><color=#f92672>[</color><color=#f8f8f2>span</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>k1</color> <color=#f92672>=</color> <color=#f8f8f2>yknots</color><color=#f92672>[</color><color=#f8f8f2>span</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>k2</color> <color=#f92672>=</color> <color=#f8f8f2>yknots</color><color=#f92672>[</color><color=#f8f8f2>span</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>k3</color> <color=#f92672>=</color> <color=#f8f8f2>yknots</color><color=#f92672>[</color><color=#f8f8f2>span</color> <color=#f92672>+</color> <color=#ae81ff>3</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>c3</color> <color=#f92672>=</color> <color=#f8f8f2>m00</color> <color=#f92672>*</color> <color=#f8f8f2>k0</color> <color=#f92672>+</color> <color=#f8f8f2>m01</color> <color=#f92672>*</color> <color=#f8f8f2>k1</color> <color=#f92672>+</color> <color=#f8f8f2>m02</color> <color=#f92672>*</color> <color=#f8f8f2>k2</color> <color=#f92672>+</color> <color=#f8f8f2>m03</color> <color=#f92672>*</color> <color=#f8f8f2>k3</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>c2</color> <color=#f92672>=</color> <color=#f8f8f2>m10</color> <color=#f92672>*</color> <color=#f8f8f2>k0</color> <color=#f92672>+</color> <color=#f8f8f2>m11</color> <color=#f92672>*</color> <color=#f8f8f2>k1</color> <color=#f92672>+</color> <color=#f8f8f2>m12</color> <color=#f92672>*</color> <color=#f8f8f2>k2</color> <color=#f92672>+</color> <color=#f8f8f2>m13</color> <color=#f92672>*</color> <color=#f8f8f2>k3</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>c1</color> <color=#f92672>=</color> <color=#f8f8f2>m20</color> <color=#f92672>*</color> <color=#f8f8f2>k0</color> <color=#f92672>+</color> <color=#f8f8f2>m21</color> <color=#f92672>*</color> <color=#f8f8f2>k1</color> <color=#f92672>+</color> <color=#f8f8f2>m22</color> <color=#f92672>*</color> <color=#f8f8f2>k2</color> <color=#f92672>+</color> <color=#f8f8f2>m23</color> <color=#f92672>*</color> <color=#f8f8f2>k3</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>c0</color> <color=#f92672>=</color> <color=#f8f8f2>m30</color> <color=#f92672>*</color> <color=#f8f8f2>k0</color> <color=#f92672>+</color> <color=#f8f8f2>m31</color> <color=#f92672>*</color> <color=#f8f8f2>k1</color> <color=#f92672>+</color> <color=#f8f8f2>m32</color> <color=#f92672>*</color> <color=#f8f8f2>k2</color> <color=#f92672>+</color> <color=#f8f8f2>m33</color> <color=#f92672>*</color> <color=#f8f8f2>k3</color><color=#f8f8f2>;</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>c3</color> <color=#f92672>*</color> <color=#f8f8f2>t</color> <color=#f92672>+</color> <color=#f8f8f2>c2</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>t</color> <color=#f92672>+</color> <color=#f8f8f2>c1</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>t</color> <color=#f92672>+</color> <color=#f8f8f2>c0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Compute a Catmull-Rom spline for RGB values.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param x        the input parameter</color>
<color=#75715e>     * @param numKnots the number of knots in the spline</color>
<color=#75715e>     * @param knots    the array of knots</color>
<color=#75715e>     * @return the spline value</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>colorSpline</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>numKnots</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>knots</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>span</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>numSpans</color> <color=#f92672>=</color> <color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>k0</color><color=#f8f8f2>,</color> <color=#f8f8f2>k1</color><color=#f8f8f2>,</color> <color=#f8f8f2>k2</color><color=#f8f8f2>,</color> <color=#f8f8f2>k3</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>c0</color><color=#f8f8f2>,</color> <color=#f8f8f2>c1</color><color=#f8f8f2>,</color> <color=#f8f8f2>c2</color><color=#f8f8f2>,</color> <color=#f8f8f2>c3</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>numSpans</color> <color=#f92672><</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Too few knots in spline"</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>clamp</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>numSpans</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>span</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>span</color> <color=#f92672>></color> <color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f8f8f2>span</color> <color=#f92672>=</color> <color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>x</color> <color=#f92672>-=</color> <color=#f8f8f2>span</color><color=#f8f8f2>;</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>shift</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>*</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>k0</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>knots</color><color=#f92672>[</color><color=#f8f8f2>span</color><color=#f92672>]</color> <color=#f92672>>></color> <color=#f8f8f2>shift</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>k1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>knots</color><color=#f92672>[</color><color=#f8f8f2>span</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>>></color> <color=#f8f8f2>shift</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>k2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>knots</color><color=#f92672>[</color><color=#f8f8f2>span</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>>></color> <color=#f8f8f2>shift</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>k3</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>knots</color><color=#f92672>[</color><color=#f8f8f2>span</color> <color=#f92672>+</color> <color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>>></color> <color=#f8f8f2>shift</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>c3</color> <color=#f92672>=</color> <color=#f8f8f2>m00</color> <color=#f92672>*</color> <color=#f8f8f2>k0</color> <color=#f92672>+</color> <color=#f8f8f2>m01</color> <color=#f92672>*</color> <color=#f8f8f2>k1</color> <color=#f92672>+</color> <color=#f8f8f2>m02</color> <color=#f92672>*</color> <color=#f8f8f2>k2</color> <color=#f92672>+</color> <color=#f8f8f2>m03</color> <color=#f92672>*</color> <color=#f8f8f2>k3</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>c2</color> <color=#f92672>=</color> <color=#f8f8f2>m10</color> <color=#f92672>*</color> <color=#f8f8f2>k0</color> <color=#f92672>+</color> <color=#f8f8f2>m11</color> <color=#f92672>*</color> <color=#f8f8f2>k1</color> <color=#f92672>+</color> <color=#f8f8f2>m12</color> <color=#f92672>*</color> <color=#f8f8f2>k2</color> <color=#f92672>+</color> <color=#f8f8f2>m13</color> <color=#f92672>*</color> <color=#f8f8f2>k3</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>c1</color> <color=#f92672>=</color> <color=#f8f8f2>m20</color> <color=#f92672>*</color> <color=#f8f8f2>k0</color> <color=#f92672>+</color> <color=#f8f8f2>m21</color> <color=#f92672>*</color> <color=#f8f8f2>k1</color> <color=#f92672>+</color> <color=#f8f8f2>m22</color> <color=#f92672>*</color> <color=#f8f8f2>k2</color> <color=#f92672>+</color> <color=#f8f8f2>m23</color> <color=#f92672>*</color> <color=#f8f8f2>k3</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>c0</color> <color=#f92672>=</color> <color=#f8f8f2>m30</color> <color=#f92672>*</color> <color=#f8f8f2>k0</color> <color=#f92672>+</color> <color=#f8f8f2>m31</color> <color=#f92672>*</color> <color=#f8f8f2>k1</color> <color=#f92672>+</color> <color=#f8f8f2>m32</color> <color=#f92672>*</color> <color=#f8f8f2>k2</color> <color=#f92672>+</color> <color=#f8f8f2>m33</color> <color=#f92672>*</color> <color=#f8f8f2>k3</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(((</color><color=#f8f8f2>c3</color> <color=#f92672>*</color> <color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>c2</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>c1</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>c0</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672>></color> <color=#ae81ff>255</color><color=#f8f8f2>)</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#ae81ff>255</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>v</color> <color=#f92672>|=</color> <color=#f8f8f2>n</color> <color=#f92672><<</color> <color=#f8f8f2>shift</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>v</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Compute a Catmull-Rom spline for RGB values, but with variable knot spacing.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param x        the input parameter</color>
<color=#75715e>     * @param numKnots the number of knots in the spline</color>
<color=#75715e>     * @param xknots   the array of knot x values</color>
<color=#75715e>     * @param yknots   the array of knot y values</color>
<color=#75715e>     * @return the spline value</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>colorSpline</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>numKnots</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>xknots</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>yknots</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>span</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>numSpans</color> <color=#f92672>=</color> <color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>k0</color><color=#f8f8f2>,</color> <color=#f8f8f2>k1</color><color=#f8f8f2>,</color> <color=#f8f8f2>k2</color><color=#f8f8f2>,</color> <color=#f8f8f2>k3</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>c0</color><color=#f8f8f2>,</color> <color=#f8f8f2>c1</color><color=#f8f8f2>,</color> <color=#f8f8f2>c2</color><color=#f8f8f2>,</color> <color=#f8f8f2>c3</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>numSpans</color> <color=#f92672><</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Too few knots in spline"</color><color=#f8f8f2>);</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>span</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>span</color> <color=#f92672><</color> <color=#f8f8f2>numSpans</color><color=#f8f8f2>;</color> <color=#f8f8f2>span</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>xknots</color><color=#f92672>[</color><color=#f8f8f2>span</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>></color> <color=#f8f8f2>x</color><color=#f8f8f2>)</color> <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>span</color> <color=#f92672>></color> <color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>3</color><color=#f8f8f2>)</color> <color=#f8f8f2>span</color> <color=#f92672>=</color> <color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>-</color> <color=#f8f8f2>xknots</color><color=#f92672>[</color><color=#f8f8f2>span</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#f8f8f2>xknots</color><color=#f92672>[</color><color=#f8f8f2>span</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>-</color> <color=#f8f8f2>xknots</color><color=#f92672>[</color><color=#f8f8f2>span</color><color=#f92672>]</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>span</color><color=#f92672>--</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>span</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>span</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>shift</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>*</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>k0</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>yknots</color><color=#f92672>[</color><color=#f8f8f2>span</color><color=#f92672>]</color> <color=#f92672>>></color> <color=#f8f8f2>shift</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>k1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>yknots</color><color=#f92672>[</color><color=#f8f8f2>span</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>>></color> <color=#f8f8f2>shift</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>k2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>yknots</color><color=#f92672>[</color><color=#f8f8f2>span</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>>></color> <color=#f8f8f2>shift</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>k3</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>yknots</color><color=#f92672>[</color><color=#f8f8f2>span</color> <color=#f92672>+</color> <color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>>></color> <color=#f8f8f2>shift</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>c3</color> <color=#f92672>=</color> <color=#f8f8f2>m00</color> <color=#f92672>*</color> <color=#f8f8f2>k0</color> <color=#f92672>+</color> <color=#f8f8f2>m01</color> <color=#f92672>*</color> <color=#f8f8f2>k1</color> <color=#f92672>+</color> <color=#f8f8f2>m02</color> <color=#f92672>*</color> <color=#f8f8f2>k2</color> <color=#f92672>+</color> <color=#f8f8f2>m03</color> <color=#f92672>*</color> <color=#f8f8f2>k3</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>c2</color> <color=#f92672>=</color> <color=#f8f8f2>m10</color> <color=#f92672>*</color> <color=#f8f8f2>k0</color> <color=#f92672>+</color> <color=#f8f8f2>m11</color> <color=#f92672>*</color> <color=#f8f8f2>k1</color> <color=#f92672>+</color> <color=#f8f8f2>m12</color> <color=#f92672>*</color> <color=#f8f8f2>k2</color> <color=#f92672>+</color> <color=#f8f8f2>m13</color> <color=#f92672>*</color> <color=#f8f8f2>k3</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>c1</color> <color=#f92672>=</color> <color=#f8f8f2>m20</color> <color=#f92672>*</color> <color=#f8f8f2>k0</color> <color=#f92672>+</color> <color=#f8f8f2>m21</color> <color=#f92672>*</color> <color=#f8f8f2>k1</color> <color=#f92672>+</color> <color=#f8f8f2>m22</color> <color=#f92672>*</color> <color=#f8f8f2>k2</color> <color=#f92672>+</color> <color=#f8f8f2>m23</color> <color=#f92672>*</color> <color=#f8f8f2>k3</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>c0</color> <color=#f92672>=</color> <color=#f8f8f2>m30</color> <color=#f92672>*</color> <color=#f8f8f2>k0</color> <color=#f92672>+</color> <color=#f8f8f2>m31</color> <color=#f92672>*</color> <color=#f8f8f2>k1</color> <color=#f92672>+</color> <color=#f8f8f2>m32</color> <color=#f92672>*</color> <color=#f8f8f2>k2</color> <color=#f92672>+</color> <color=#f8f8f2>m33</color> <color=#f92672>*</color> <color=#f8f8f2>k3</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(((</color><color=#f8f8f2>c3</color> <color=#f92672>*</color> <color=#f8f8f2>t</color> <color=#f92672>+</color> <color=#f8f8f2>c2</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>t</color> <color=#f92672>+</color> <color=#f8f8f2>c1</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>t</color> <color=#f92672>+</color> <color=#f8f8f2>c0</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672>></color> <color=#ae81ff>255</color><color=#f8f8f2>)</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#ae81ff>255</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>v</color> <color=#f92672>|=</color> <color=#f8f8f2>n</color> <color=#f92672><<</color> <color=#f8f8f2>shift</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>v</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * An implementation of Fant's resampling algorithm.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param source the source pixels</color>
<color=#75715e>     * @param dest   the destination pixels</color>
<color=#75715e>     * @param length the length of the scanline to resample</color>
<color=#75715e>     * @param offset the start offset into the arrays</color>
<color=#75715e>     * @param stride the offset between pixels in consecutive rows</color>
<color=#75715e>     * @param out    an array of output positions for each pixel</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>resample</color><color=#f8f8f2>(</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>dest</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>length</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>stride</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>out</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>j</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>sizfac</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>inSegment</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>outSegment</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#f8f8f2>r</color><color=#f8f8f2>,</color> <color=#f8f8f2>g</color><color=#f8f8f2>,</color> <color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>nextA</color><color=#f8f8f2>,</color> <color=#f8f8f2>nextR</color><color=#f8f8f2>,</color> <color=#f8f8f2>nextG</color><color=#f8f8f2>,</color> <color=#f8f8f2>nextB</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>aSum</color><color=#f8f8f2>,</color> <color=#f8f8f2>rSum</color><color=#f8f8f2>,</color> <color=#f8f8f2>gSum</color><color=#f8f8f2>,</color> <color=#f8f8f2>bSum</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>in</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>srcIndex</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>destIndex</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>lastIndex</color> <color=#f92672>=</color> <color=#f8f8f2>source</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>rgb</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>in</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>float</color><color=#f92672>[</color><color=#f8f8f2>length</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672><</color> <color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>in</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672>-</color> <color=#f8f8f2>out</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>-</color> <color=#f8f8f2>out</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
            <color=#75715e>//			in[j] = ImageMath.clamp( in[j], 0, length-1 );</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>in</color><color=#f92672>[</color><color=#f8f8f2>length</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>in</color><color=#f92672>[</color><color=#f8f8f2>length</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>inSegment</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>outSegment</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>sizfac</color> <color=#f92672>=</color> <color=#f8f8f2>outSegment</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>aSum</color> <color=#f92672>=</color> <color=#f8f8f2>rSum</color> <color=#f92672>=</color> <color=#f8f8f2>gSum</color> <color=#f92672>=</color> <color=#f8f8f2>bSum</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>source</color><color=#f92672>[</color><color=#f8f8f2>srcIndex</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>srcIndex</color> <color=#f92672>+=</color> <color=#f8f8f2>stride</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>source</color><color=#f92672>[</color><color=#f8f8f2>srcIndex</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>nextA</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>nextR</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>nextG</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>nextB</color> <color=#f92672>=</color> <color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>srcIndex</color> <color=#f92672>+=</color> <color=#f8f8f2>stride</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672><=</color> <color=#f8f8f2>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>aIntensity</color> <color=#f92672>=</color> <color=#f8f8f2>inSegment</color> <color=#f92672>*</color> <color=#f8f8f2>a</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#ae81ff>1.0f</color> <color=#f92672>-</color> <color=#f8f8f2>inSegment</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>nextA</color><color=#f8f8f2>;</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>rIntensity</color> <color=#f92672>=</color> <color=#f8f8f2>inSegment</color> <color=#f92672>*</color> <color=#f8f8f2>r</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#ae81ff>1.0f</color> <color=#f92672>-</color> <color=#f8f8f2>inSegment</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>nextR</color><color=#f8f8f2>;</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>gIntensity</color> <color=#f92672>=</color> <color=#f8f8f2>inSegment</color> <color=#f92672>*</color> <color=#f8f8f2>g</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#ae81ff>1.0f</color> <color=#f92672>-</color> <color=#f8f8f2>inSegment</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>nextG</color><color=#f8f8f2>;</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>bIntensity</color> <color=#f92672>=</color> <color=#f8f8f2>inSegment</color> <color=#f92672>*</color> <color=#f8f8f2>b</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#ae81ff>1.0f</color> <color=#f92672>-</color> <color=#f8f8f2>inSegment</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>nextB</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>inSegment</color> <color=#f92672><</color> <color=#f8f8f2>outSegment</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>aSum</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>aIntensity</color> <color=#f92672>*</color> <color=#f8f8f2>inSegment</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>rSum</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rIntensity</color> <color=#f92672>*</color> <color=#f8f8f2>inSegment</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>gSum</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>gIntensity</color> <color=#f92672>*</color> <color=#f8f8f2>inSegment</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>bSum</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>bIntensity</color> <color=#f92672>*</color> <color=#f8f8f2>inSegment</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>outSegment</color> <color=#f92672>-=</color> <color=#f8f8f2>inSegment</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>inSegment</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#f8f8f2>nextA</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>nextR</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>nextG</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>nextB</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>srcIndex</color> <color=#f92672><</color> <color=#f8f8f2>lastIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>source</color><color=#f92672>[</color><color=#f8f8f2>srcIndex</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>nextA</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>nextR</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>nextG</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>nextB</color> <color=#f92672>=</color> <color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>srcIndex</color> <color=#f92672>+=</color> <color=#f8f8f2>stride</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>aSum</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>aIntensity</color> <color=#f92672>*</color> <color=#f8f8f2>outSegment</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>rSum</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rIntensity</color> <color=#f92672>*</color> <color=#f8f8f2>outSegment</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>gSum</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>gIntensity</color> <color=#f92672>*</color> <color=#f8f8f2>outSegment</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>bSum</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>bIntensity</color> <color=#f92672>*</color> <color=#f8f8f2>outSegment</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>dest</color><color=#f92672>[</color><color=#f8f8f2>destIndex</color><color=#f92672>]</color> <color=#f92672>=</color>
                        <color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>aSum</color> <color=#f92672>/</color> <color=#f8f8f2>sizfac</color><color=#f8f8f2>,</color> <color=#ae81ff>255</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color>
                                <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>rSum</color> <color=#f92672>/</color> <color=#f8f8f2>sizfac</color><color=#f8f8f2>,</color> <color=#ae81ff>255</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color>
                                <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>gSum</color> <color=#f92672>/</color> <color=#f8f8f2>sizfac</color><color=#f8f8f2>,</color> <color=#ae81ff>255</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color>
                                <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>bSum</color> <color=#f92672>/</color> <color=#f8f8f2>sizfac</color><color=#f8f8f2>,</color> <color=#ae81ff>255</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>destIndex</color> <color=#f92672>+=</color> <color=#f8f8f2>stride</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>aSum</color> <color=#f92672>=</color> <color=#f8f8f2>rSum</color> <color=#f92672>=</color> <color=#f8f8f2>gSum</color> <color=#f92672>=</color> <color=#f8f8f2>bSum</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>inSegment</color> <color=#f92672>-=</color> <color=#f8f8f2>outSegment</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>outSegment</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>-</color> <color=#f8f8f2>in</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>sizfac</color> <color=#f92672>=</color> <color=#f8f8f2>outSegment</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Premultiply a block of pixels</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>premultiply</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>p</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>length</color> <color=#f92672>+=</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>p</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#f8f8f2>a</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>1.0f</color> <color=#f92672>/</color> <color=#ae81ff>255.0f</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>r</color> <color=#f92672>*=</color> <color=#f8f8f2>f</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>g</color> <color=#f92672>*=</color> <color=#f8f8f2>f</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>b</color> <color=#f92672>*=</color> <color=#f8f8f2>f</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>p</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>g</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Premultiply a block of pixels</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>unpremultiply</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>p</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>length</color> <color=#f92672>+=</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>p</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672>!=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>a</color> <color=#f92672>!=</color> <color=#ae81ff>255</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#ae81ff>255.0f</color> <color=#f92672>/</color> <color=#f8f8f2>a</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>r</color> <color=#f92672>*=</color> <color=#f8f8f2>f</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>g</color> <color=#f92672>*=</color> <color=#f8f8f2>f</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>b</color> <color=#f92672>*=</color> <color=#f8f8f2>f</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672>></color> <color=#ae81ff>255</color><color=#f8f8f2>)</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#ae81ff>255</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>g</color> <color=#f92672>></color> <color=#ae81ff>255</color><color=#f8f8f2>)</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#ae81ff>255</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color> <color=#f92672>></color> <color=#ae81ff>255</color><color=#f8f8f2>)</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#ae81ff>255</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>p</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>g</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>