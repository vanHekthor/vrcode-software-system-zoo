<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A filter which uses a another image as a ask to produce a halftoning effect.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>HalftoneFilter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractBufferedImageOp</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>softness</color> <color=#f92672>=</color> <color=#ae81ff>0.1f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>invert</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>monochrome</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>mask</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>HalftoneFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the softness of the effect in the range 0..1.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param softness the softness</color>
<color=#75715e>     * @min-value 0</color>
<color=#75715e>     * @max-value 1</color>
<color=#75715e>     * @see #getSoftness</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setSoftness</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>softness</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>softness</color> <color=#f92672>=</color> <color=#f8f8f2>softness</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the softness of the effect.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the softness</color>
<color=#75715e>     * @see #setSoftness</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getSoftness</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>softness</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the halftone mask.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param mask the mask</color>
<color=#75715e>     * @see #getMask</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setMask</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>mask</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>mask</color> <color=#f92672>=</color> <color=#f8f8f2>mask</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the halftone mask.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the mask</color>
<color=#75715e>     * @see #setMask</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>getMask</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>mask</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setInvert</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>invert</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>invert</color> <color=#f92672>=</color> <color=#f8f8f2>invert</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getInvert</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>invert</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set whether to do monochrome halftoning.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param monochrome true for monochrome halftoning</color>
<color=#75715e>     * @see #getMonochrome</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setMonochrome</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>monochrome</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>monochrome</color> <color=#f92672>=</color> <color=#f8f8f2>monochrome</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get whether to do monochrome halftoning.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return true for monochrome halftoning</color>
<color=#75715e>     * @see #setMonochrome</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getMonochrome</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>monochrome</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dst</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dst</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>dst</color> <color=#f92672>=</color> <color=#f8f8f2>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mask</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color> <color=#f8f8f2>dst</color><color=#f8f8f2>;</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>maskWidth</color> <color=#f92672>=</color> <color=#f8f8f2>mask</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>maskHeight</color> <color=#f92672>=</color> <color=#f8f8f2>mask</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#66d9ef>float</color> <color=#f8f8f2>s</color> <color=#f92672>=</color> <color=#ae81ff>255</color> <color=#f92672>*</color> <color=#f8f8f2>softness</color><color=#f8f8f2>;</color>

        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>width</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>maskPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>maskWidth</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>mask</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color> <color=#f92672>%</color> <color=#f8f8f2>maskHeight</color><color=#f8f8f2>,</color> <color=#f8f8f2>maskWidth</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>maskPixels</color><color=#f8f8f2>);</color>

            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>maskRGB</color> <color=#f92672>=</color> <color=#f8f8f2>maskPixels</color><color=#f92672>[</color><color=#f8f8f2>x</color> <color=#f92672>%</color> <color=#f8f8f2>maskWidth</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>inRGB</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>x</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>invert</color><color=#f8f8f2>)</color> <color=#f8f8f2>maskRGB</color> <color=#f92672>^=</color> <color=#ae81ff>0xffffff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>monochrome</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>brightness</color><color=#f8f8f2>(</color><color=#f8f8f2>maskRGB</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>iv</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>brightness</color><color=#f8f8f2>(</color><color=#f8f8f2>inRGB</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>float</color> <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#ae81ff>1</color> <color=#f92672>-</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>smoothStep</color><color=#f8f8f2>(</color><color=#f8f8f2>iv</color> <color=#f92672>-</color> <color=#f8f8f2>s</color><color=#f8f8f2>,</color> <color=#f8f8f2>iv</color> <color=#f92672>+</color> <color=#f8f8f2>s</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>255</color> <color=#f92672>*</color> <color=#f8f8f2>f</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>x</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>inRGB</color> <color=#f92672>&</color> <color=#ae81ff>0xff000000</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>a</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>ir</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>inRGB</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>ig</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>inRGB</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>ib</color> <color=#f92672>=</color> <color=#f8f8f2>inRGB</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>mr</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>maskRGB</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>mg</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>maskRGB</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>mb</color> <color=#f92672>=</color> <color=#f8f8f2>maskRGB</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>255</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>1</color> <color=#f92672>-</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>smoothStep</color><color=#f8f8f2>(</color><color=#f8f8f2>ir</color> <color=#f92672>-</color> <color=#f8f8f2>s</color><color=#f8f8f2>,</color> <color=#f8f8f2>ir</color> <color=#f92672>+</color> <color=#f8f8f2>s</color><color=#f8f8f2>,</color> <color=#f8f8f2>mr</color><color=#f8f8f2>)));</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>255</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>1</color> <color=#f92672>-</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>smoothStep</color><color=#f8f8f2>(</color><color=#f8f8f2>ig</color> <color=#f92672>-</color> <color=#f8f8f2>s</color><color=#f8f8f2>,</color> <color=#f8f8f2>ig</color> <color=#f92672>+</color> <color=#f8f8f2>s</color><color=#f8f8f2>,</color> <color=#f8f8f2>mg</color><color=#f8f8f2>)));</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>255</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>1</color> <color=#f92672>-</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>smoothStep</color><color=#f8f8f2>(</color><color=#f8f8f2>ib</color> <color=#f92672>-</color> <color=#f8f8f2>s</color><color=#f8f8f2>,</color> <color=#f8f8f2>ib</color> <color=#f92672>+</color> <color=#f8f8f2>s</color><color=#f8f8f2>,</color> <color=#f8f8f2>mb</color><color=#f8f8f2>)));</color>
                    <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>x</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>inRGB</color> <color=#f92672>&</color> <color=#ae81ff>0xff000000</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>g</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>setRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>dst</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>dst</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#e6db74>"Stylize/Halftone..."</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>