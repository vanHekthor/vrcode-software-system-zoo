<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A Colormap implemented using Catmull-Rom colour splines. The map has a variable number of knots</color>
<color=#75715e> * with a minimum of four. The first and last knots give the tangent at the end of the spline, and</color>
<color=#75715e> * colours are interpolated from the second to the second-last knots. Each knot can be given a type</color>
<color=#75715e> * of interpolation. These are:</color>
<color=#75715e> *</color>
<color=#75715e> * <UL></color>
<color=#75715e> * <LI>LINEAR - linear interpolation to next knot</color>
<color=#75715e> * <LI>SPLINE - spline interpolation to next knot</color>
<color=#75715e> * <LI>CONSTANT - no interpolation - the colour is constant to the next knot</color>
<color=#75715e> * <LI>HUE_CW - interpolation of hue clockwise to next knot</color>
<color=#75715e> * <LI>HUE_CCW - interpolation of hue counter-clockwise to next knot</color>
<color=#75715e> * </UL></color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Gradient</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ArrayColormap</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Cloneable</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Interpolate in RGB space.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>RGB</color> <color=#f92672>=</color> <color=#ae81ff>0x00</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Interpolate hue clockwise.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>HUE_CW</color> <color=#f92672>=</color> <color=#ae81ff>0x01</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Interpolate hue counter clockwise.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>HUE_CCW</color> <color=#f92672>=</color> <color=#ae81ff>0x02</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Interpolate linearly.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LINEAR</color> <color=#f92672>=</color> <color=#ae81ff>0x10</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Interpolate using a spline.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SPLINE</color> <color=#f92672>=</color> <color=#ae81ff>0x20</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Interpolate with a rising circle shape curve.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>CIRCLE_UP</color> <color=#f92672>=</color> <color=#ae81ff>0x30</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Interpolate with a falling circle shape curve.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>CIRCLE_DOWN</color> <color=#f92672>=</color> <color=#ae81ff>0x40</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Don't tnterpolate - just use the starting value.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>CONSTANT</color> <color=#f92672>=</color> <color=#ae81ff>0x50</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>COLOR_MASK</color> <color=#f92672>=</color> <color=#ae81ff>0x03</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BLEND_MASK</color> <color=#f92672>=</color> <color=#ae81ff>0x70</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>numKnots</color> <color=#f92672>=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>xKnots</color> <color=#f92672>=</color> <color=#f8f8f2>{</color><color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>255</color><color=#f8f8f2>,</color> <color=#ae81ff>256</color><color=#f8f8f2>};</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>yKnots</color> <color=#f92672>=</color> <color=#f8f8f2>{</color>
            <color=#ae81ff>0xff000000</color><color=#f8f8f2>,</color> <color=#ae81ff>0xff000000</color><color=#f8f8f2>,</color> <color=#ae81ff>0xffffffff</color><color=#f8f8f2>,</color> <color=#ae81ff>0xffffffff</color><color=#f8f8f2>,</color>
    <color=#f8f8f2>};</color>
    <color=#66d9ef>private</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>knotTypes</color> <color=#f92672>=</color> <color=#f8f8f2>{</color><color=#f8f8f2>RGB</color> <color=#f92672>|</color> <color=#f8f8f2>SPLINE</color><color=#f8f8f2>,</color> <color=#f8f8f2>RGB</color> <color=#f92672>|</color> <color=#f8f8f2>SPLINE</color><color=#f8f8f2>,</color> <color=#f8f8f2>RGB</color> <color=#f92672>|</color> <color=#f8f8f2>SPLINE</color><color=#f8f8f2>,</color> <color=#f8f8f2>RGB</color> <color=#f92672>|</color> <color=#f8f8f2>SPLINE</color><color=#f8f8f2>};</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Construct a Gradient.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>Gradient</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>rebuildGradient</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Construct a Gradient with the given colors.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param rgb the colors</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>Gradient</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>rgb</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>rgb</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Construct a Gradient with the given colors and knot positions.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param x   the knot positions</color>
<color=#75715e>     * @param rgb the colors</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>Gradient</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>rgb</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>rgb</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Construct a Gradient with the given colors, knot positions and interpolation types.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param x     the knot positions</color>
<color=#75715e>     * @param rgb   the colors</color>
<color=#75715e>     * @param types interpolation types</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>Gradient</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>rgb</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>types</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>setKnots</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>rgb</color><color=#f8f8f2>,</color> <color=#f8f8f2>types</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>clone</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Gradient</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Gradient</color><color=#f8f8f2>)</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>map</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>map</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>xKnots</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>xKnots</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>yKnots</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>yKnots</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>knotTypes</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>knotTypes</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>g</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Copy one Gradient into another.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param g the Gradient to copy into</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>copyTo</color><color=#f8f8f2>(</color><color=#f8f8f2>Gradient</color> <color=#f8f8f2>g</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>numKnots</color> <color=#f92672>=</color> <color=#f8f8f2>numKnots</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>map</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>map</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>xKnots</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>xKnots</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>yKnots</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>yKnots</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>knotTypes</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>knotTypes</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set a knot color.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param n     the knot index</color>
<color=#75715e>     * @param color the color</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setColor</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>color</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>firstColor</color> <color=#f92672>=</color> <color=#f8f8f2>map</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>lastColor</color> <color=#f92672>=</color> <color=#f8f8f2>map</color><color=#f92672>[</color><color=#ae81ff>256</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>map</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>mixColors</color><color=#f8f8f2>((</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>i</color> <color=#f92672>/</color> <color=#f8f8f2>n</color><color=#f8f8f2>,</color> <color=#f8f8f2>firstColor</color><color=#f8f8f2>,</color> <color=#f8f8f2>color</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672><</color> <color=#ae81ff>256</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#ae81ff>256</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color>
                <color=#f8f8f2>map</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>mixColors</color><color=#f8f8f2>((</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>-</color> <color=#f8f8f2>n</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#ae81ff>256</color> <color=#f92672>-</color> <color=#f8f8f2>n</color><color=#f8f8f2>),</color> <color=#f8f8f2>color</color><color=#f8f8f2>,</color> <color=#f8f8f2>lastColor</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the number of knots in the gradient.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the number of knots.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNumKnots</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>numKnots</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set a knot color.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param n     the knot index</color>
<color=#75715e>     * @param color the color</color>
<color=#75715e>     * @see #getKnot</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setKnot</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>color</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>yKnots</color><color=#f92672>[</color><color=#f8f8f2>n</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>color</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>rebuildGradient</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get a knot color.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param n the knot index</color>
<color=#75715e>     * @return the knot color</color>
<color=#75715e>     * @see #setKnot</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getKnot</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>yKnots</color><color=#f92672>[</color><color=#f8f8f2>n</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set a knot type.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param n    the knot index</color>
<color=#75715e>     * @param type the type</color>
<color=#75715e>     * @see #getKnotType</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setKnotType</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>knotTypes</color><color=#f92672>[</color><color=#f8f8f2>n</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>knotTypes</color><color=#f92672>[</color><color=#f8f8f2>n</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#f92672>~</color><color=#f8f8f2>COLOR_MASK</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>type</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>rebuildGradient</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get a knot type.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param n the knot index</color>
<color=#75715e>     * @return the knot type</color>
<color=#75715e>     * @see #setKnotType</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getKnotType</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>knotTypes</color><color=#f92672>[</color><color=#f8f8f2>n</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#f8f8f2>COLOR_MASK</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set a knot blend type.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param n    the knot index</color>
<color=#75715e>     * @param type the knot blend type</color>
<color=#75715e>     * @see #getKnotBlend</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setKnotBlend</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>knotTypes</color><color=#f92672>[</color><color=#f8f8f2>n</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>knotTypes</color><color=#f92672>[</color><color=#f8f8f2>n</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#f92672>~</color><color=#f8f8f2>BLEND_MASK</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>type</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>rebuildGradient</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get a knot blend type.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param n the knot index</color>
<color=#75715e>     * @return the knot blend type</color>
<color=#75715e>     * @see #setKnotBlend</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>byte</color> <color=#a6e22e>getKnotBlend</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>knotTypes</color><color=#f92672>[</color><color=#f8f8f2>n</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#f8f8f2>BLEND_MASK</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Add a new knot.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param x     the knot position</color>
<color=#75715e>     * @param color the color</color>
<color=#75715e>     * @param type  the knot type</color>
<color=#75715e>     * @see #removeKnot</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>addKnot</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>color</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>nx</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>ny</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>nt</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>xKnots</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>nx</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>numKnots</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>yKnots</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>ny</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>numKnots</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>knotTypes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>nt</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>numKnots</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>xKnots</color> <color=#f92672>=</color> <color=#f8f8f2>nx</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>yKnots</color> <color=#f92672>=</color> <color=#f8f8f2>ny</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>knotTypes</color> <color=#f92672>=</color> <color=#f8f8f2>nt</color><color=#f8f8f2>;</color>
        <color=#75715e>// Insert one position before the end so the sort works correctly</color>
        <color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>yKnots</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>yKnots</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>knotTypes</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>knotTypes</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>yKnots</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>color</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>knotTypes</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>type</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>numKnots</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>sortKnots</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>rebuildGradient</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Remove a knot.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param n the knot index</color>
<color=#75715e>     * @see #addKnot</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>removeKnot</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>numKnots</color> <color=#f92672><=</color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672><</color> <color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>xKnots</color><color=#f8f8f2>,</color> <color=#f8f8f2>n</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>xKnots</color><color=#f8f8f2>,</color> <color=#f8f8f2>n</color><color=#f8f8f2>,</color> <color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#f8f8f2>n</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>yKnots</color><color=#f8f8f2>,</color> <color=#f8f8f2>n</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>yKnots</color><color=#f8f8f2>,</color> <color=#f8f8f2>n</color><color=#f8f8f2>,</color> <color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#f8f8f2>n</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>knotTypes</color><color=#f8f8f2>,</color> <color=#f8f8f2>n</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>knotTypes</color><color=#f8f8f2>,</color> <color=#f8f8f2>n</color><color=#f8f8f2>,</color> <color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#f8f8f2>n</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>numKnots</color><color=#f92672>--</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>rebuildGradient</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the values of all the knots. This version does not require the "extra" knots at -1 and 256</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param x     the knot positions</color>
<color=#75715e>     * @param rgb   the knot colors</color>
<color=#75715e>     * @param types the knot types</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setKnots</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>rgb</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>types</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>numKnots</color> <color=#f92672>=</color> <color=#f8f8f2>rgb</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>xKnots</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>yKnots</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>knotTypes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>xKnots</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
        <color=#66d9ef>else</color> <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>255</color> <color=#f92672>*</color> <color=#f8f8f2>i</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>rgb</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>yKnots</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>types</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>types</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>knotTypes</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
        <color=#66d9ef>else</color> <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#f8f8f2>numKnots</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>knotTypes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>RGB</color> <color=#f92672>|</color> <color=#f8f8f2>SPLINE</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>sortKnots</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>rebuildGradient</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the values of a set of knots.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param x      the knot positions</color>
<color=#75715e>     * @param y      the knot colors</color>
<color=#75715e>     * @param types  the knot types</color>
<color=#75715e>     * @param offset the first knot to set</color>
<color=#75715e>     * @param count  the number of knots</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setKnots</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>types</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>count</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>numKnots</color> <color=#f92672>=</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>xKnots</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>yKnots</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>knotTypes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>xKnots</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>numKnots</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>yKnots</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>numKnots</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>types</color><color=#f8f8f2>,</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>knotTypes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>numKnots</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>sortKnots</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>rebuildGradient</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Split a span into two by adding a knot in the middle.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param n the span index</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>splitSpan</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#f8f8f2>n</color><color=#f92672>]</color> <color=#f92672>+</color> <color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#f8f8f2>n</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>addKnot</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>getColor</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>/</color> <color=#ae81ff>256.0f</color><color=#f8f8f2>),</color> <color=#f8f8f2>knotTypes</color><color=#f92672>[</color><color=#f8f8f2>n</color><color=#f92672>]</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>rebuildGradient</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set a knot position.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param n the knot index</color>
<color=#75715e>     * @param x the knot position</color>
<color=#75715e>     * @see #setKnotPosition</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setKnotPosition</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>x</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#f8f8f2>n</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>255</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>sortKnots</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>rebuildGradient</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get a knot position.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param n the knot index</color>
<color=#75715e>     * @return the knot position</color>
<color=#75715e>     * @see #setKnotPosition</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getKnotPosition</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#f8f8f2>n</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Return the knot at a given position.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param x the position</color>
<color=#75715e>     * @return the knot number, or 1 if no knot found</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>knotAt</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>></color> <color=#f8f8f2>x</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>rebuildGradient</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>256</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>yKnots</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>yKnots</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>yKnots</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>yKnots</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>knot</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>spanLength</color> <color=#f92672>=</color> <color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>-</color> <color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>end</color> <color=#f92672>=</color> <color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>==</color> <color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>end</color><color=#f92672>++</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#f8f8f2>end</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>rgb1</color> <color=#f92672>=</color> <color=#f8f8f2>yKnots</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>rgb2</color> <color=#f92672>=</color> <color=#f8f8f2>yKnots</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>hsb1</color><color=#f92672>[]</color> <color=#f92672>=</color> <color=#f8f8f2>Color</color><color=#f8f8f2>.</color><color=#a6e22e>RGBtoHSB</color><color=#f8f8f2>((</color><color=#f8f8f2>rgb1</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb1</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>,</color> <color=#f8f8f2>rgb1</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>hsb2</color><color=#f92672>[]</color> <color=#f92672>=</color> <color=#f8f8f2>Color</color><color=#f8f8f2>.</color><color=#a6e22e>RGBtoHSB</color><color=#f8f8f2>((</color><color=#f8f8f2>rgb2</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb2</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>,</color> <color=#f8f8f2>rgb2</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672>-</color> <color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>spanLength</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>getKnotType</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>blend</color> <color=#f92672>=</color> <color=#f8f8f2>getKnotBlend</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672>>=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>j</color> <color=#f92672><=</color> <color=#ae81ff>255</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>blend</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>case</color> <color=#f8f8f2>CONSTANT</color><color=#f8f8f2>:</color>
                            <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>case</color> <color=#f8f8f2>LINEAR</color><color=#f8f8f2>:</color>
                            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>case</color> <color=#f8f8f2>SPLINE</color><color=#f8f8f2>:</color>
                            <color=#75715e>//						map[i] = ImageMath.colorSpline(j, numKnots, xKnots, yKnots);</color>
                            <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>smoothStep</color><color=#f8f8f2>(</color><color=#ae81ff>0.15f</color><color=#f8f8f2>,</color> <color=#ae81ff>0.85f</color><color=#f8f8f2>,</color> <color=#f8f8f2>t</color><color=#f8f8f2>);</color>
                            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>case</color> <color=#f8f8f2>CIRCLE_UP</color><color=#f8f8f2>:</color>
                            <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>t</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sqrt</color><color=#f8f8f2>(</color><color=#ae81ff>1</color> <color=#f92672>-</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>t</color><color=#f8f8f2>);</color>
                            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>case</color> <color=#f8f8f2>CIRCLE_DOWN</color><color=#f8f8f2>:</color>
                            <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#ae81ff>1</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sqrt</color><color=#f8f8f2>(</color><color=#ae81ff>1</color> <color=#f92672>-</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>t</color><color=#f8f8f2>);</color>
                            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                    <color=#75715e>//					if (blend != SPLINE) {</color>
                    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>case</color> <color=#f8f8f2>RGB</color><color=#f8f8f2>:</color>
                            <color=#f8f8f2>map</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>mixColors</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>,</color> <color=#f8f8f2>rgb1</color><color=#f8f8f2>,</color> <color=#f8f8f2>rgb2</color><color=#f8f8f2>);</color>
                            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>case</color> <color=#f8f8f2>HUE_CW</color><color=#f8f8f2>:</color>
                        <color=#66d9ef>case</color> <color=#f8f8f2>HUE_CCW</color><color=#f8f8f2>:</color>
                            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>==</color> <color=#f8f8f2>HUE_CW</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hsb2</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672><=</color> <color=#f8f8f2>hsb1</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>hsb2</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>+=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hsb1</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672><=</color> <color=#f8f8f2>hsb2</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>hsb1</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>+=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>}</color>
                            <color=#66d9ef>float</color> <color=#f8f8f2>h</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>lerp</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>,</color> <color=#f8f8f2>hsb1</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>hsb2</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#f8f8f2>(</color><color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>TWO_PI</color><color=#f8f8f2>);</color>
                            <color=#66d9ef>float</color> <color=#f8f8f2>s</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>lerp</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>,</color> <color=#f8f8f2>hsb1</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>hsb2</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>);</color>
                            <color=#66d9ef>float</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>lerp</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>,</color> <color=#f8f8f2>hsb1</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>hsb2</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>);</color>
                            <color=#f8f8f2>map</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>0xff000000</color> <color=#f92672>|</color> <color=#f8f8f2>Color</color><color=#f8f8f2>.</color><color=#a6e22e>HSBtoRGB</color><color=#f8f8f2>((</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>s</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>b</color><color=#f8f8f2>);</color> <color=#75715e>// FIXME-alpha</color>
                            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                    <color=#75715e>//					}</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>sortKnots</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672><</color> <color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>t</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>yKnots</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>yKnots</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>yKnots</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>yKnots</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>t</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>byte</color> <color=#f8f8f2>bt</color> <color=#f92672>=</color> <color=#f8f8f2>knotTypes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>knotTypes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>knotTypes</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>knotTypes</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>bt</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>rebuild</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sortKnots</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>rebuildGradient</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Randomize the gradient.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>randomize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>numKnots</color> <color=#f92672>=</color> <color=#ae81ff>4</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>6</color> <color=#f92672>*</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>random</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>xKnots</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>yKnots</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>knotTypes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>numKnots</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>255</color> <color=#f92672>*</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>random</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>yKnots</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color>
                    <color=#ae81ff>0xff000000</color>
                            <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>255</color> <color=#f92672>*</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>random</color><color=#f8f8f2>())</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color>
                            <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>255</color> <color=#f92672>*</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>random</color><color=#f8f8f2>())</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color>
                            <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>255</color> <color=#f92672>*</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>random</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>knotTypes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>RGB</color> <color=#f92672>|</color> <color=#f8f8f2>SPLINE</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>255</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>xKnots</color><color=#f92672>[</color><color=#f8f8f2>numKnots</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>256</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>sortKnots</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>rebuildGradient</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Mutate the gradient.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param amount the amount in the range zero to one</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>mutate</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>amount</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>numKnots</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>yKnots</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672>+</color> <color=#f8f8f2>amount</color> <color=#f92672>*</color> <color=#ae81ff>255</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>random</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>0.5</color><color=#f8f8f2>)));</color>
            <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>g</color> <color=#f92672>+</color> <color=#f8f8f2>amount</color> <color=#f92672>*</color> <color=#ae81ff>255</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>random</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>0.5</color><color=#f8f8f2>)));</color>
            <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color> <color=#f92672>+</color> <color=#f8f8f2>amount</color> <color=#f92672>*</color> <color=#ae81ff>255</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>random</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>0.5</color><color=#f8f8f2>)));</color>
            <color=#f8f8f2>yKnots</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>0xff000000</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>g</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>knotTypes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>RGB</color> <color=#f92672>|</color> <color=#f8f8f2>SPLINE</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>sortKnots</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>rebuildGradient</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Build a random gradient.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the new Gradient</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Gradient</color> <color=#a6e22e>randomGradient</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Gradient</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Gradient</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>randomize</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>g</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>