<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A class which warps an image using a field Warp algorithm.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>FieldWarpFilter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>TransformFilter</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>Line</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#f8f8f2>x1</color><color=#f8f8f2>,</color> <color=#f8f8f2>y1</color><color=#f8f8f2>,</color> <color=#f8f8f2>x2</color><color=#f8f8f2>,</color> <color=#f8f8f2>y2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#f8f8f2>dx</color><color=#f8f8f2>,</color> <color=#f8f8f2>dy</color><color=#f8f8f2>;</color>
        <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#f8f8f2>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>lengthSquared</color><color=#f8f8f2>;</color>

        <color=#66d9ef>public</color> <color=#a6e22e>Line</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x1</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>y1</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>x2</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>y2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>x1</color> <color=#f92672>=</color> <color=#f8f8f2>x1</color><color=#f8f8f2>;</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>y1</color> <color=#f92672>=</color> <color=#f8f8f2>y1</color><color=#f8f8f2>;</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>x2</color> <color=#f92672>=</color> <color=#f8f8f2>x2</color><color=#f8f8f2>;</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>y2</color> <color=#f92672>=</color> <color=#f8f8f2>y2</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setup</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>dx</color> <color=#f92672>=</color> <color=#f8f8f2>x2</color> <color=#f92672>-</color> <color=#f8f8f2>x1</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>dy</color> <color=#f92672>=</color> <color=#f8f8f2>y2</color> <color=#f92672>-</color> <color=#f8f8f2>y1</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>lengthSquared</color> <color=#f92672>=</color> <color=#f8f8f2>dx</color> <color=#f92672>*</color> <color=#f8f8f2>dx</color> <color=#f92672>+</color> <color=#f8f8f2>dy</color> <color=#f92672>*</color> <color=#f8f8f2>dy</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sqrt</color><color=#f8f8f2>(</color><color=#f8f8f2>lengthSquared</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>amount</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>power</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>strength</color> <color=#f92672>=</color> <color=#ae81ff>2.0f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>Line</color><color=#f92672>[]</color> <color=#f8f8f2>inLines</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>Line</color><color=#f92672>[]</color> <color=#f8f8f2>outLines</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>Line</color><color=#f92672>[]</color> <color=#f8f8f2>intermediateLines</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>FieldWarpFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the amount of warp.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param amount the amount</color>
<color=#75715e>     * @min-value 0</color>
<color=#75715e>     * @max-value 1</color>
<color=#75715e>     * @see #getAmount</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setAmount</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>amount</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>amount</color> <color=#f92672>=</color> <color=#f8f8f2>amount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the amount of warp.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the amount</color>
<color=#75715e>     * @see #setAmount</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getAmount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>amount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setPower</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>power</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>power</color> <color=#f92672>=</color> <color=#f8f8f2>power</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getPower</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>power</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setStrength</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>strength</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>strength</color> <color=#f92672>=</color> <color=#f8f8f2>strength</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getStrength</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>strength</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setInLines</color><color=#f8f8f2>(</color><color=#f8f8f2>Line</color><color=#f92672>[]</color> <color=#f8f8f2>inLines</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>inLines</color> <color=#f92672>=</color> <color=#f8f8f2>inLines</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Line</color><color=#f92672>[]</color> <color=#a6e22e>getInLines</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>inLines</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setOutLines</color><color=#f8f8f2>(</color><color=#f8f8f2>Line</color><color=#f92672>[]</color> <color=#f8f8f2>outLines</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>outLines</color> <color=#f92672>=</color> <color=#f8f8f2>outLines</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Line</color><color=#f92672>[]</color> <color=#a6e22e>getOutLines</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>outLines</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>transform</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>Point</color> <color=#f8f8f2>out</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>transformInverse</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>out</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>fraction</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>distance</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>fdist</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>weight</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#ae81ff>0.001f</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#ae81ff>1.5f</color> <color=#f92672>*</color> <color=#f8f8f2>strength</color> <color=#f92672>+</color> <color=#ae81ff>0.5f</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>p</color> <color=#f92672>=</color> <color=#f8f8f2>power</color><color=#f8f8f2>;</color>

        <color=#66d9ef>float</color> <color=#f8f8f2>totalWeight</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>sumX</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>sumY</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>line</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>line</color> <color=#f92672><</color> <color=#f8f8f2>inLines</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>line</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Line</color> <color=#f8f8f2>l1</color> <color=#f92672>=</color> <color=#f8f8f2>inLines</color><color=#f92672>[</color><color=#f8f8f2>line</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>Line</color> <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#f8f8f2>intermediateLines</color><color=#f92672>[</color><color=#f8f8f2>line</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>dx</color> <color=#f92672>=</color> <color=#f8f8f2>x</color> <color=#f92672>-</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>x1</color><color=#f8f8f2>;</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>dy</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672>-</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>y1</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>fraction</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>dx</color> <color=#f92672>*</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>dx</color> <color=#f92672>+</color> <color=#f8f8f2>dy</color> <color=#f92672>*</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>dy</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>lengthSquared</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>fdist</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>dy</color> <color=#f92672>*</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>dx</color> <color=#f92672>-</color> <color=#f8f8f2>dx</color> <color=#f92672>*</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>dy</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fraction</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>distance</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sqrt</color><color=#f8f8f2>(</color><color=#f8f8f2>dx</color> <color=#f92672>*</color> <color=#f8f8f2>dx</color> <color=#f92672>+</color> <color=#f8f8f2>dy</color> <color=#f92672>*</color> <color=#f8f8f2>dy</color><color=#f8f8f2>);</color>
            <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fraction</color> <color=#f92672>>=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>dx</color> <color=#f92672>=</color> <color=#f8f8f2>x</color> <color=#f92672>-</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>x2</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>dy</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672>-</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>y2</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>distance</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sqrt</color><color=#f8f8f2>(</color><color=#f8f8f2>dx</color> <color=#f92672>*</color> <color=#f8f8f2>dx</color> <color=#f92672>+</color> <color=#f8f8f2>dy</color> <color=#f92672>*</color> <color=#f8f8f2>dy</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fdist</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>distance</color> <color=#f92672>=</color> <color=#f8f8f2>fdist</color><color=#f8f8f2>;</color>
            <color=#66d9ef>else</color> <color=#f8f8f2>distance</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>fdist</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>u</color> <color=#f92672>=</color> <color=#f8f8f2>l1</color><color=#f8f8f2>.</color><color=#a6e22e>x1</color> <color=#f92672>+</color> <color=#f8f8f2>fraction</color> <color=#f92672>*</color> <color=#f8f8f2>l1</color><color=#f8f8f2>.</color><color=#a6e22e>dx</color> <color=#f92672>-</color> <color=#f8f8f2>fdist</color> <color=#f92672>*</color> <color=#f8f8f2>l1</color><color=#f8f8f2>.</color><color=#a6e22e>dy</color> <color=#f92672>/</color> <color=#f8f8f2>l1</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>l1</color><color=#f8f8f2>.</color><color=#a6e22e>y1</color> <color=#f92672>+</color> <color=#f8f8f2>fraction</color> <color=#f92672>*</color> <color=#f8f8f2>l1</color><color=#f8f8f2>.</color><color=#a6e22e>dy</color> <color=#f92672>+</color> <color=#f8f8f2>fdist</color> <color=#f92672>*</color> <color=#f8f8f2>l1</color><color=#f8f8f2>.</color><color=#a6e22e>dx</color> <color=#f92672>/</color> <color=#f8f8f2>l1</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>weight</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>pow</color><color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>pow</color><color=#f8f8f2>(</color><color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>p</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672>+</color> <color=#f8f8f2>distance</color><color=#f8f8f2>),</color> <color=#f8f8f2>b</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>sumX</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>u</color> <color=#f92672>-</color> <color=#f8f8f2>x</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>weight</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>sumY</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>-</color> <color=#f8f8f2>y</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>weight</color><color=#f8f8f2>;</color>
            <color=#75715e>// if (x % 10 == 0&&y == 20)System.out.println("distance="+distance+" weight="+weight+"</color>
            <color=#75715e>// sumX="+sumX+" sumY="+sumY+" u="+u+" v="+v);</color>
            <color=#f8f8f2>totalWeight</color> <color=#f92672>+=</color> <color=#f8f8f2>weight</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>//		out[0] = ImageMath.clamp(x + sumX / totalWeight + 0.5f, 0, width-1);</color>
        <color=#75715e>//		out[1] = ImageMath.clamp(y + sumY / totalWeight + 0.5f, 0, height-1);</color>
        <color=#f8f8f2>out</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>sumX</color> <color=#f92672>/</color> <color=#f8f8f2>totalWeight</color> <color=#f92672>+</color> <color=#ae81ff>0.5f</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>out</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672>+</color> <color=#f8f8f2>sumY</color> <color=#f92672>/</color> <color=#f8f8f2>totalWeight</color> <color=#f92672>+</color> <color=#ae81ff>0.5f</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dst</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>width</color> <color=#f92672>=</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>height</color> <color=#f92672>=</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>inLines</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>outLines</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>intermediateLines</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Line</color><color=#f92672>[</color><color=#f8f8f2>inLines</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>line</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>line</color> <color=#f92672><</color> <color=#f8f8f2>inLines</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>line</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>Line</color> <color=#f8f8f2>l</color> <color=#f92672>=</color>
                        <color=#f8f8f2>intermediateLines</color><color=#f92672>[</color><color=#f8f8f2>line</color><color=#f92672>]</color> <color=#f92672>=</color>
                                <color=#66d9ef>new</color> <color=#f8f8f2>Line</color><color=#f8f8f2>(</color>
                                        <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>lerp</color><color=#f8f8f2>(</color><color=#f8f8f2>amount</color><color=#f8f8f2>,</color> <color=#f8f8f2>inLines</color><color=#f92672>[</color><color=#f8f8f2>line</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>x1</color><color=#f8f8f2>,</color> <color=#f8f8f2>outLines</color><color=#f92672>[</color><color=#f8f8f2>line</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>x1</color><color=#f8f8f2>),</color>
                                        <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>lerp</color><color=#f8f8f2>(</color><color=#f8f8f2>amount</color><color=#f8f8f2>,</color> <color=#f8f8f2>inLines</color><color=#f92672>[</color><color=#f8f8f2>line</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>y1</color><color=#f8f8f2>,</color> <color=#f8f8f2>outLines</color><color=#f92672>[</color><color=#f8f8f2>line</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>y1</color><color=#f8f8f2>),</color>
                                        <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>lerp</color><color=#f8f8f2>(</color><color=#f8f8f2>amount</color><color=#f8f8f2>,</color> <color=#f8f8f2>inLines</color><color=#f92672>[</color><color=#f8f8f2>line</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>x2</color><color=#f8f8f2>,</color> <color=#f8f8f2>outLines</color><color=#f92672>[</color><color=#f8f8f2>line</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>x2</color><color=#f8f8f2>),</color>
                                        <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>lerp</color><color=#f8f8f2>(</color><color=#f8f8f2>amount</color><color=#f8f8f2>,</color> <color=#f8f8f2>inLines</color><color=#f92672>[</color><color=#f8f8f2>line</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>y2</color><color=#f8f8f2>,</color> <color=#f8f8f2>outLines</color><color=#f92672>[</color><color=#f8f8f2>line</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>y2</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>setup</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>inLines</color><color=#f92672>[</color><color=#f8f8f2>line</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>setup</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>dst</color> <color=#f92672>=</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>dst</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>intermediateLines</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>dst</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>src</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#e6db74>"Distort/Field Warp..."</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>