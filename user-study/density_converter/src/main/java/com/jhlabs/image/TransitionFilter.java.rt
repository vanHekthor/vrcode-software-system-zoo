<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImageOp</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.beans.BeanInfo</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.beans.IntrospectionException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.beans.Introspector</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.beans.PropertyDescriptor</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Method</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A filter which uses another filter to perform a transition. e.g. to create a blur transition, you</color>
<color=#75715e> * could write: new TransitionFilter( new BoxBlurFilter(), "radius", 0, 100 );</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>TransitionFilter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractBufferedImageOp</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>transition</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>destination</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#f8f8f2>property</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>Method</color> <color=#f8f8f2>method</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The filter used for the transition.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>BufferedImageOp</color> <color=#f8f8f2>filter</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The start value for the filter property.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>float</color> <color=#f8f8f2>minValue</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The end value for the filter property.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>float</color> <color=#f8f8f2>maxValue</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Construct a TransitionFilter.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#a6e22e>TransitionFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Construct a TransitionFilter.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param filter   the filter to use</color>
<color=#75715e>     * @param property the filter property which is changed over the transition</color>
<color=#75715e>     * @param minValue the start value for the filter property</color>
<color=#75715e>     * @param maxValue the end value for the filter property</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>TransitionFilter</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImageOp</color> <color=#f8f8f2>filter</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>property</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>minValue</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>maxValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>filter</color> <color=#f92672>=</color> <color=#f8f8f2>filter</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>property</color> <color=#f92672>=</color> <color=#f8f8f2>property</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>minValue</color> <color=#f92672>=</color> <color=#f8f8f2>minValue</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>maxValue</color> <color=#f92672>=</color> <color=#f8f8f2>maxValue</color><color=#f8f8f2>;</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>BeanInfo</color> <color=#f8f8f2>info</color> <color=#f92672>=</color> <color=#f8f8f2>Introspector</color><color=#f8f8f2>.</color><color=#a6e22e>getBeanInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>filter</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>PropertyDescriptor</color><color=#f92672>[]</color> <color=#f8f8f2>pds</color> <color=#f92672>=</color> <color=#f8f8f2>info</color><color=#f8f8f2>.</color><color=#a6e22e>getPropertyDescriptors</color><color=#f8f8f2>();</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>pds</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>PropertyDescriptor</color> <color=#f8f8f2>pd</color> <color=#f92672>=</color> <color=#f8f8f2>pds</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>property</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>pd</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>method</color> <color=#f92672>=</color> <color=#f8f8f2>pd</color><color=#f8f8f2>.</color><color=#a6e22e>getWriteMethod</color><color=#f8f8f2>();</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>method</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"No such property in object: "</color> <color=#f92672>+</color> <color=#f8f8f2>property</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IntrospectionException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the transition of the image in the range 0..1.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param transition the transition</color>
<color=#75715e>     * @min-value 0</color>
<color=#75715e>     * @max-value 1</color>
<color=#75715e>     * @see #getTransition</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setTransition</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>transition</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>transition</color> <color=#f92672>=</color> <color=#f8f8f2>transition</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the transition of the image.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the transition</color>
<color=#75715e>     * @see #setTransition</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getTransition</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>transition</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the destination image.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param destination the destination image</color>
<color=#75715e>     * @see #getDestination</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setDestination</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>destination</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>destination</color> <color=#f92672>=</color> <color=#f8f8f2>destination</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the destination image.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the destination image</color>
<color=#75715e>     * @see #setDestination</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>getDestination</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>destination</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>  	public void setFilter( BufferedImageOp filter ) {</color>
<color=#75715e>  		this.filter = filter;</color>
<color=#75715e>  	}</color>

<color=#75715e>  	public int getFilter() {</color>
<color=#75715e>  		return filter;</color>
<color=#75715e>  	}</color>
<color=#75715e>  */</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Prepare the filter for the transiton at a given time. The default implementation sets the given</color>
<color=#75715e>     * filter property, but you could override this method to make other changes.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param transition the transition time in the range 0 - 1</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>prepareFilter</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>transition</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>method</color><color=#f8f8f2>.</color><color=#a6e22e>invoke</color><color=#f8f8f2>(</color><color=#f8f8f2>filter</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>Object</color><color=#f92672>[]</color><color=#f8f8f2>{</color><color=#66d9ef>new</color> <color=#f8f8f2>Float</color><color=#f8f8f2>(</color><color=#f8f8f2>transition</color><color=#f8f8f2>)});</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Error setting value for property: "</color> <color=#f92672>+</color> <color=#f8f8f2>property</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dst</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dst</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>dst</color> <color=#f92672>=</color> <color=#f8f8f2>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>destination</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color> <color=#f8f8f2>dst</color><color=#f8f8f2>;</color>

        <color=#66d9ef>float</color> <color=#f8f8f2>itransition</color> <color=#f92672>=</color> <color=#ae81ff>1</color> <color=#f92672>-</color> <color=#f8f8f2>transition</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>Graphics2D</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>dst</color><color=#f8f8f2>.</color><color=#a6e22e>createGraphics</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>transition</color> <color=#f92672>!=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>minValue</color> <color=#f92672>+</color> <color=#f8f8f2>transition</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>maxValue</color> <color=#f92672>-</color> <color=#f8f8f2>minValue</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>prepareFilter</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>filter</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>transition</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>setComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>AlphaComposite</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>AlphaComposite</color><color=#f8f8f2>.</color><color=#a6e22e>SRC_OVER</color><color=#f8f8f2>,</color> <color=#f8f8f2>transition</color><color=#f8f8f2>));</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>minValue</color> <color=#f92672>+</color> <color=#f8f8f2>itransition</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>maxValue</color> <color=#f92672>-</color> <color=#f8f8f2>minValue</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>prepareFilter</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>destination</color><color=#f8f8f2>,</color> <color=#f8f8f2>filter</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>dst</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#e6db74>"Transitions/Transition..."</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>