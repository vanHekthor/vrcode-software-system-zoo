<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * The interface for an image quantizer. The addColor method is called (repeatedly if necessary)</color>
<color=#75715e> * with all the image pixels. A color table can then be returned by calling the buildColorTable</color>
<color=#75715e> * method.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>Quantizer</color> <color=#f8f8f2>{</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Initialize the quantizer. This should be called before adding any pixels.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param numColors the number of colors we're quantizing to.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setup</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>numColors</color><color=#f8f8f2>);</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Add pixels to the quantizer.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pixels the array of ARGB pixels</color>
<color=#75715e>     * @param offset the offset into the array</color>
<color=#75715e>     * @param count  the count of pixels</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>addPixels</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>count</color><color=#f8f8f2>);</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Build a color table from the added pixels.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return an array of ARGB pixels representing a color table</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#a6e22e>buildColorTable</color><color=#f8f8f2>();</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Using the previously-built color table, return the index into that table for a pixel. This is</color>
<color=#75715e>     * guaranteed to return a valid index - returning the index of a color closer to that requested if</color>
<color=#75715e>     * necessary.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param rgb the pixel to find</color>
<color=#75715e>     * @return the pixel's index in the color table</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getIndexForColor</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>rgb</color><color=#f8f8f2>);</color>
<color=#f8f8f2>}</color>