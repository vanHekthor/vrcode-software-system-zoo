<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.ColorModel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.WritableRaster</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A filter which flips images or rotates by multiples of 90 degrees.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>FlipFilter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractBufferedImageOp</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Flip the image horizontally.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FLIP_H</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Flip the image vertically.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FLIP_V</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Flip the image horizontally and vertically.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FLIP_HV</color> <color=#f92672>=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Rotate the image 90 degrees clockwise.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FLIP_90CW</color> <color=#f92672>=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Rotate the image 90 degrees counter-clockwise.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FLIP_90CCW</color> <color=#f92672>=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Rotate the image 180 degrees.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FLIP_180</color> <color=#f92672>=</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>operation</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>newWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>newHeight</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Construct a FlipFilter which flips horizontally and vertically.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>FlipFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>FLIP_HV</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Construct a FlipFilter.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param operation the filter operation</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>FlipFilter</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>operation</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>operation</color> <color=#f92672>=</color> <color=#f8f8f2>operation</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the filter operation.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param operation the filter operation</color>
<color=#75715e>     * @see #getOperation</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setOperation</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>operation</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>operation</color> <color=#f92672>=</color> <color=#f8f8f2>operation</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the filter operation.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the filter operation</color>
<color=#75715e>     * @see #setOperation</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getOperation</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>operation</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dst</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>WritableRaster</color> <color=#f8f8f2>srcRaster</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getRaster</color><color=#f8f8f2>();</color>

        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inPixels</color> <color=#f92672>=</color> <color=#f8f8f2>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>w</color> <color=#f92672>=</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>h</color> <color=#f92672>=</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>newX</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>newY</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>newW</color> <color=#f92672>=</color> <color=#f8f8f2>w</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>newH</color> <color=#f92672>=</color> <color=#f8f8f2>h</color><color=#f8f8f2>;</color>
        <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>operation</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FLIP_H</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>newX</color> <color=#f92672>=</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>w</color><color=#f8f8f2>);</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FLIP_V</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>newY</color> <color=#f92672>=</color> <color=#f8f8f2>height</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>y</color> <color=#f92672>+</color> <color=#f8f8f2>h</color><color=#f8f8f2>);</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FLIP_HV</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>newW</color> <color=#f92672>=</color> <color=#f8f8f2>h</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>newH</color> <color=#f92672>=</color> <color=#f8f8f2>w</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>newX</color> <color=#f92672>=</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>newY</color> <color=#f92672>=</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FLIP_90CW</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>newW</color> <color=#f92672>=</color> <color=#f8f8f2>h</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>newH</color> <color=#f92672>=</color> <color=#f8f8f2>w</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>newX</color> <color=#f92672>=</color> <color=#f8f8f2>height</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>y</color> <color=#f92672>+</color> <color=#f8f8f2>h</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>newY</color> <color=#f92672>=</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FLIP_90CCW</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>newW</color> <color=#f92672>=</color> <color=#f8f8f2>h</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>newH</color> <color=#f92672>=</color> <color=#f8f8f2>w</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>newX</color> <color=#f92672>=</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>newY</color> <color=#f92672>=</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>w</color><color=#f8f8f2>);</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FLIP_180</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>newX</color> <color=#f92672>=</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>w</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>newY</color> <color=#f92672>=</color> <color=#f8f8f2>height</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>y</color> <color=#f92672>+</color> <color=#f8f8f2>h</color><color=#f8f8f2>);</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>newPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>newW</color> <color=#f92672>*</color> <color=#f8f8f2>newH</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>row</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>row</color> <color=#f92672><</color> <color=#f8f8f2>h</color><color=#f8f8f2>;</color> <color=#f8f8f2>row</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>col</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>col</color> <color=#f92672><</color> <color=#f8f8f2>w</color><color=#f8f8f2>;</color> <color=#f8f8f2>col</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>row</color> <color=#f92672>*</color> <color=#f8f8f2>width</color> <color=#f92672>+</color> <color=#f8f8f2>col</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>newRow</color> <color=#f92672>=</color> <color=#f8f8f2>row</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>newCol</color> <color=#f92672>=</color> <color=#f8f8f2>col</color><color=#f8f8f2>;</color>
                <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>operation</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>case</color> <color=#f8f8f2>FLIP_H</color><color=#f8f8f2>:</color>
                        <color=#f8f8f2>newCol</color> <color=#f92672>=</color> <color=#f8f8f2>w</color> <color=#f92672>-</color> <color=#f8f8f2>col</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>case</color> <color=#f8f8f2>FLIP_V</color><color=#f8f8f2>:</color>
                        <color=#f8f8f2>newRow</color> <color=#f92672>=</color> <color=#f8f8f2>h</color> <color=#f92672>-</color> <color=#f8f8f2>row</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>case</color> <color=#f8f8f2>FLIP_HV</color><color=#f8f8f2>:</color>
                        <color=#f8f8f2>newRow</color> <color=#f92672>=</color> <color=#f8f8f2>col</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>newCol</color> <color=#f92672>=</color> <color=#f8f8f2>row</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>case</color> <color=#f8f8f2>FLIP_90CW</color><color=#f8f8f2>:</color>
                        <color=#f8f8f2>newRow</color> <color=#f92672>=</color> <color=#f8f8f2>col</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>newCol</color> <color=#f92672>=</color> <color=#f8f8f2>h</color> <color=#f92672>-</color> <color=#f8f8f2>row</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>;</color>
                        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>case</color> <color=#f8f8f2>FLIP_90CCW</color><color=#f8f8f2>:</color>
                        <color=#f8f8f2>newRow</color> <color=#f92672>=</color> <color=#f8f8f2>w</color> <color=#f92672>-</color> <color=#f8f8f2>col</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>newCol</color> <color=#f92672>=</color> <color=#f8f8f2>row</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>case</color> <color=#f8f8f2>FLIP_180</color><color=#f8f8f2>:</color>
                        <color=#f8f8f2>newRow</color> <color=#f92672>=</color> <color=#f8f8f2>h</color> <color=#f92672>-</color> <color=#f8f8f2>row</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>newCol</color> <color=#f92672>=</color> <color=#f8f8f2>w</color> <color=#f92672>-</color> <color=#f8f8f2>col</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>newIndex</color> <color=#f92672>=</color> <color=#f8f8f2>newRow</color> <color=#f92672>*</color> <color=#f8f8f2>newW</color> <color=#f92672>+</color> <color=#f8f8f2>newCol</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>newPixels</color><color=#f92672>[</color><color=#f8f8f2>newIndex</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dst</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>dstCM</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getColorModel</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>dst</color> <color=#f92672>=</color>
                    <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color>
                            <color=#f8f8f2>dstCM</color><color=#f8f8f2>,</color>
                            <color=#f8f8f2>dstCM</color><color=#f8f8f2>.</color><color=#a6e22e>createCompatibleWritableRaster</color><color=#f8f8f2>(</color><color=#f8f8f2>newW</color><color=#f8f8f2>,</color> <color=#f8f8f2>newH</color><color=#f8f8f2>),</color>
                            <color=#f8f8f2>dstCM</color><color=#f8f8f2>.</color><color=#a6e22e>isAlphaPremultiplied</color><color=#f8f8f2>(),</color>
                            <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>WritableRaster</color> <color=#f8f8f2>dstRaster</color> <color=#f92672>=</color> <color=#f8f8f2>dst</color><color=#f8f8f2>.</color><color=#a6e22e>getRaster</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>setRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>dst</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>newW</color><color=#f8f8f2>,</color> <color=#f8f8f2>newH</color><color=#f8f8f2>,</color> <color=#f8f8f2>newPixels</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>dst</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>operation</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FLIP_H</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#e6db74>"Flip Horizontal"</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FLIP_V</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#e6db74>"Flip Vertical"</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FLIP_HV</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#e6db74>"Flip Diagonal"</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FLIP_90CW</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#e6db74>"Rotate 90"</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FLIP_90CCW</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#e6db74>"Rotate -90"</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FLIP_180</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#e6db74>"Rotate 180"</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#e6db74>"Flip"</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>