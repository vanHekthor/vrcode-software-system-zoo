<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A filter which renders "glints" on bright parts of the image.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>GlintFilter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractBufferedImageOp</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>threshold</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>blur</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>amount</color> <color=#f92672>=</color> <color=#ae81ff>0.1f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>glintOnly</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>Colormap</color> <color=#f8f8f2>colormap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LinearColormap</color><color=#f8f8f2>(</color><color=#ae81ff>0xffffffff</color><color=#f8f8f2>,</color> <color=#ae81ff>0xff000000</color><color=#f8f8f2>);</color>

    <color=#66d9ef>public</color> <color=#a6e22e>GlintFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the threshold value.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param threshold the threshold value</color>
<color=#75715e>     * @see #getThreshold</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setThreshold</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>threshold</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>threshold</color> <color=#f92672>=</color> <color=#f8f8f2>threshold</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the threshold value.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the threshold value</color>
<color=#75715e>     * @see #setThreshold</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getThreshold</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>threshold</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the amount of glint.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param amount the amount</color>
<color=#75715e>     * @min-value 0</color>
<color=#75715e>     * @max-value 1</color>
<color=#75715e>     * @see #getAmount</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setAmount</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>amount</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>amount</color> <color=#f92672>=</color> <color=#f8f8f2>amount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the amount of glint.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the amount</color>
<color=#75715e>     * @see #setAmount</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getAmount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>amount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the length of the stars.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param length the length</color>
<color=#75715e>     * @see #getLength</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setLength</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>=</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the length of the stars.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the length</color>
<color=#75715e>     * @see #setLength</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getLength</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the blur that is applied before thresholding.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param blur the blur radius</color>
<color=#75715e>     * @see #getBlur</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setBlur</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>blur</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>blur</color> <color=#f92672>=</color> <color=#f8f8f2>blur</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the blur that is applied before thresholding.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the blur radius</color>
<color=#75715e>     * @see #setBlur</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getBlur</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>blur</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set whether to render the stars and the image or only the stars.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param glintOnly true to render only stars</color>
<color=#75715e>     * @see #getGlintOnly</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setGlintOnly</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>glintOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>glintOnly</color> <color=#f92672>=</color> <color=#f8f8f2>glintOnly</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get whether to render the stars and the image or only the stars.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return true to render only stars</color>
<color=#75715e>     * @see #setGlintOnly</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getGlintOnly</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>glintOnly</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the colormap to be used for the filter.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param colormap the colormap</color>
<color=#75715e>     * @see #getColormap</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setColormap</color><color=#f8f8f2>(</color><color=#f8f8f2>Colormap</color> <color=#f8f8f2>colormap</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>colormap</color> <color=#f92672>=</color> <color=#f8f8f2>colormap</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the colormap to be used for the filter.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the colormap</color>
<color=#75715e>     * @see #setColormap</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Colormap</color> <color=#a6e22e>getColormap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>colormap</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dst</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>width</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>length2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>length</color> <color=#f92672>/</color> <color=#ae81ff>1.414f</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>colors</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>length</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>colors2</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>length2</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>colormap</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><=</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>argb</color> <color=#f92672>=</color> <color=#f8f8f2>colormap</color><color=#f8f8f2>.</color><color=#a6e22e>getColor</color><color=#f8f8f2>((</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>i</color> <color=#f92672>/</color> <color=#f8f8f2>length</color><color=#f8f8f2>);</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>argb</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>argb</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>argb</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>argb</color> <color=#f92672>=</color>
                        <color=#f8f8f2>(</color><color=#f8f8f2>argb</color> <color=#f92672>&</color> <color=#ae81ff>0xff000000</color><color=#f8f8f2>)</color>
                                <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>amount</color> <color=#f92672>*</color> <color=#f8f8f2>r</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color>
                                <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>amount</color> <color=#f92672>*</color> <color=#f8f8f2>g</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color>
                                <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>amount</color> <color=#f92672>*</color> <color=#f8f8f2>b</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>colors</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>argb</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><=</color> <color=#f8f8f2>length2</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>argb</color> <color=#f92672>=</color> <color=#f8f8f2>colormap</color><color=#f8f8f2>.</color><color=#a6e22e>getColor</color><color=#f8f8f2>((</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>i</color> <color=#f92672>/</color> <color=#f8f8f2>length2</color><color=#f8f8f2>);</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>argb</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>argb</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>argb</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>argb</color> <color=#f92672>=</color>
                        <color=#f8f8f2>(</color><color=#f8f8f2>argb</color> <color=#f92672>&</color> <color=#ae81ff>0xff000000</color><color=#f8f8f2>)</color>
                                <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>amount</color> <color=#f92672>*</color> <color=#f8f8f2>r</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color>
                                <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>amount</color> <color=#f92672>*</color> <color=#f8f8f2>g</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color>
                                <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>amount</color> <color=#f92672>*</color> <color=#f8f8f2>b</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>colors2</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>argb</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>mask</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB</color><color=#f8f8f2>);</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>threshold3</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>threshold</color> <color=#f92672>*</color> <color=#ae81ff>3</color> <color=#f92672>*</color> <color=#ae81ff>255</color><color=#f8f8f2>);</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>);</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>x</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0xff000000</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#f8f8f2>r</color> <color=#f92672>+</color> <color=#f8f8f2>g</color> <color=#f92672>+</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>l</color> <color=#f92672><</color> <color=#f8f8f2>threshold3</color><color=#f8f8f2>)</color> <color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>x</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>0xff000000</color><color=#f8f8f2>;</color>
                <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>l</color> <color=#f92672>/=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>x</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>a</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>l</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>l</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>l</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>setRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>mask</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>blur</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>mask</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>GaussianFilter</color><color=#f8f8f2>(</color><color=#f8f8f2>blur</color><color=#f8f8f2>).</color><color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>mask</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dst</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>dst</color> <color=#f92672>=</color> <color=#f8f8f2>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>dstPixels</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>glintOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>dstPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#f8f8f2>height</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>else</color> <color=#f8f8f2>dstPixels</color> <color=#f92672>=</color> <color=#f8f8f2>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color> <color=#75715e>// FIXME - only need 2*length</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672>*</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>mask</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>);</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>ymin</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>y</color> <color=#f92672>-</color> <color=#f8f8f2>length</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>ymax</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>y</color> <color=#f92672>+</color> <color=#f8f8f2>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>ymin2</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>y</color> <color=#f92672>-</color> <color=#f8f8f2>length2</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>ymax2</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>y</color> <color=#f92672>+</color> <color=#f8f8f2>length2</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>x</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f92672>></color> <color=#f8f8f2>threshold</color> <color=#f92672>*</color> <color=#ae81ff>255</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>xmin</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>-</color> <color=#f8f8f2>length</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>xmax</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>xmin2</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>-</color> <color=#f8f8f2>length2</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>xmax2</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>length2</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>

                    <color=#75715e>// Horizontal</color>
                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><=</color> <color=#f8f8f2>xmax</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>k</color><color=#f92672>++</color><color=#f8f8f2>)</color>
                        <color=#f8f8f2>dstPixels</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color>
                                <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>combinePixels</color><color=#f8f8f2>(</color><color=#f8f8f2>dstPixels</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>colors</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>ADD</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>>=</color> <color=#f8f8f2>xmin</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>--</color><color=#f8f8f2>,</color> <color=#f8f8f2>k</color><color=#f92672>++</color><color=#f8f8f2>)</color>
                        <color=#f8f8f2>dstPixels</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color>
                                <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>combinePixels</color><color=#f8f8f2>(</color><color=#f8f8f2>dstPixels</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>colors</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>ADD</color><color=#f8f8f2>);</color>
                    <color=#75715e>// Vertical</color>
                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><=</color> <color=#f8f8f2>ymax</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>j</color> <color=#f92672>+=</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>k</color><color=#f92672>++</color><color=#f8f8f2>)</color>
                        <color=#f8f8f2>dstPixels</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>combinePixels</color><color=#f8f8f2>(</color><color=#f8f8f2>dstPixels</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>colors</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>ADD</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>index</color> <color=#f92672>-</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>>=</color> <color=#f8f8f2>ymin</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>--</color><color=#f8f8f2>,</color> <color=#f8f8f2>j</color> <color=#f92672>-=</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>k</color><color=#f92672>++</color><color=#f8f8f2>)</color>
                        <color=#f8f8f2>dstPixels</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>combinePixels</color><color=#f8f8f2>(</color><color=#f8f8f2>dstPixels</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>colors</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>ADD</color><color=#f8f8f2>);</color>

                    <color=#75715e>// Diagonals</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>xymin</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>xmin2</color><color=#f8f8f2>,</color> <color=#f8f8f2>ymin2</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>xymax</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>xmax2</color><color=#f8f8f2>,</color> <color=#f8f8f2>ymax2</color><color=#f8f8f2>);</color>
                    <color=#75715e>// SE</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>xmax2</color><color=#f8f8f2>,</color> <color=#f8f8f2>ymax2</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#f8f8f2>width</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><=</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>j</color> <color=#f92672>+=</color> <color=#f8f8f2>width</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>k</color><color=#f92672>++</color><color=#f8f8f2>)</color>
                        <color=#f8f8f2>dstPixels</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>combinePixels</color><color=#f8f8f2>(</color><color=#f8f8f2>dstPixels</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>colors2</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>ADD</color><color=#f8f8f2>);</color>
                    <color=#75715e>// NW</color>
                    <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>xmin2</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#f8f8f2>ymin2</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>index</color> <color=#f92672>-</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><=</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>j</color> <color=#f92672>-=</color> <color=#f8f8f2>width</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>k</color><color=#f92672>++</color><color=#f8f8f2>)</color>
                        <color=#f8f8f2>dstPixels</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>combinePixels</color><color=#f8f8f2>(</color><color=#f8f8f2>dstPixels</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>colors2</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>ADD</color><color=#f8f8f2>);</color>
                    <color=#75715e>// NE</color>
                    <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>xmax2</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#f8f8f2>ymin2</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>index</color> <color=#f92672>-</color> <color=#f8f8f2>width</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><=</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>j</color> <color=#f92672>+=</color> <color=#f92672>-</color><color=#f8f8f2>width</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>k</color><color=#f92672>++</color><color=#f8f8f2>)</color>
                        <color=#f8f8f2>dstPixels</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>combinePixels</color><color=#f8f8f2>(</color><color=#f8f8f2>dstPixels</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>colors2</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>ADD</color><color=#f8f8f2>);</color>
                    <color=#75715e>// SW</color>
                    <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>xmin2</color><color=#f8f8f2>,</color> <color=#f8f8f2>ymax2</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><=</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>j</color> <color=#f92672>+=</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>k</color><color=#f92672>++</color><color=#f8f8f2>)</color>
                        <color=#f8f8f2>dstPixels</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>combinePixels</color><color=#f8f8f2>(</color><color=#f8f8f2>dstPixels</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>colors2</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>ADD</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
                <color=#f8f8f2>index</color><color=#f92672>++</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>setRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>dst</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>dstPixels</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>dst</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#e6db74>"Effects/Glint..."</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>