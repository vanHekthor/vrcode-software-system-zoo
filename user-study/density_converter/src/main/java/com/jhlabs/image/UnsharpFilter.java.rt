<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A filter which subtracts Gaussian blur from an image, sharpening it.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Jerry Huxtable</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>UnsharpFilter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>GaussianFilter</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>amount</color> <color=#f92672>=</color> <color=#ae81ff>0.5f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>threshold</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>UnsharpFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>radius</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the threshold value.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param threshold the threshold value</color>
<color=#75715e>     * @see #getThreshold</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setThreshold</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>threshold</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>threshold</color> <color=#f92672>=</color> <color=#f8f8f2>threshold</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the threshold value.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the threshold value</color>
<color=#75715e>     * @see #setThreshold</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getThreshold</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>threshold</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the amount of sharpening.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param amount the amount</color>
<color=#75715e>     * @min-value 0</color>
<color=#75715e>     * @max-value 1</color>
<color=#75715e>     * @see #getAmount</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setAmount</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>amount</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>amount</color> <color=#f92672>=</color> <color=#f8f8f2>amount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the amount of sharpening.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the amount</color>
<color=#75715e>     * @see #setAmount</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getAmount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>amount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dst</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dst</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>dst</color> <color=#f92672>=</color> <color=#f8f8f2>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#f8f8f2>height</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>outPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#f8f8f2>height</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getRGB</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>radius</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>convolveAndTranspose</color><color=#f8f8f2>(</color>
                    <color=#f8f8f2>kernel</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>width</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>height</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>alpha</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>alpha</color> <color=#f92672>&&</color> <color=#f8f8f2>premultiplyAlpha</color><color=#f8f8f2>,</color>
                    <color=#66d9ef>false</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>CLAMP_EDGES</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>convolveAndTranspose</color><color=#f8f8f2>(</color>
                    <color=#f8f8f2>kernel</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>height</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>width</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>alpha</color><color=#f8f8f2>,</color>
                    <color=#66d9ef>false</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>alpha</color> <color=#f92672>&&</color> <color=#f8f8f2>premultiplyAlpha</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>CLAMP_EDGES</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getRGB</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>);</color>

        <color=#66d9ef>float</color> <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#ae81ff>4</color> <color=#f92672>*</color> <color=#f8f8f2>amount</color><color=#f8f8f2>;</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>rgb1</color> <color=#f92672>=</color> <color=#f8f8f2>outPixels</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>r1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb1</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>g1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb1</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>b1</color> <color=#f92672>=</color> <color=#f8f8f2>rgb1</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>

                <color=#66d9ef>int</color> <color=#f8f8f2>rgb2</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>r2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb2</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>g2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb2</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>b2</color> <color=#f92672>=</color> <color=#f8f8f2>rgb2</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>abs</color><color=#f8f8f2>(</color><color=#f8f8f2>r1</color> <color=#f92672>-</color> <color=#f8f8f2>r2</color><color=#f8f8f2>)</color> <color=#f92672>>=</color> <color=#f8f8f2>threshold</color><color=#f8f8f2>)</color> <color=#f8f8f2>r1</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>a</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>r1</color> <color=#f92672>-</color> <color=#f8f8f2>r2</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>r2</color><color=#f8f8f2>));</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>abs</color><color=#f8f8f2>(</color><color=#f8f8f2>g1</color> <color=#f92672>-</color> <color=#f8f8f2>g2</color><color=#f8f8f2>)</color> <color=#f92672>>=</color> <color=#f8f8f2>threshold</color><color=#f8f8f2>)</color> <color=#f8f8f2>g1</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>a</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>g1</color> <color=#f92672>-</color> <color=#f8f8f2>g2</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>g2</color><color=#f8f8f2>));</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>abs</color><color=#f8f8f2>(</color><color=#f8f8f2>b1</color> <color=#f92672>-</color> <color=#f8f8f2>b2</color><color=#f8f8f2>)</color> <color=#f92672>>=</color> <color=#f8f8f2>threshold</color><color=#f8f8f2>)</color> <color=#f8f8f2>b1</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>a</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>b1</color> <color=#f92672>-</color> <color=#f8f8f2>b2</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>b2</color><color=#f8f8f2>));</color>

                <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb1</color> <color=#f92672>&</color> <color=#ae81ff>0xff000000</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>r1</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>g1</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>b1</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>index</color><color=#f92672>++</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>dst</color><color=#f8f8f2>.</color><color=#a6e22e>setRGB</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>dst</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#e6db74>"Blur/Unsharp Mask..."</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>