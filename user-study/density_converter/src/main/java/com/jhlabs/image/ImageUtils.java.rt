<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.AffineTransform</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A class containing some static utility methods for dealing with BufferedImages.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>ImageUtils</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>backgroundImage</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Cretae a BufferedImage from an ImageProducer.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param producer the ImageProducer</color>
<color=#75715e>     * @return a new TYPE_INT_ARGB BufferedImage</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>createImage</color><color=#f8f8f2>(</color><color=#f8f8f2>ImageProducer</color> <color=#f8f8f2>producer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>PixelGrabber</color> <color=#f8f8f2>pg</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>PixelGrabber</color><color=#f8f8f2>(</color><color=#f8f8f2>producer</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pg</color><color=#f8f8f2>.</color><color=#a6e22e>grabPixels</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>RuntimeException</color><color=#f8f8f2>(</color><color=#e6db74>"Image fetch interrupted"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pg</color><color=#f8f8f2>.</color><color=#a6e22e>status</color><color=#f8f8f2>()</color> <color=#f92672>&</color> <color=#f8f8f2>ImageObserver</color><color=#f8f8f2>.</color><color=#a6e22e>ABORT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>RuntimeException</color><color=#f8f8f2>(</color><color=#e6db74>"Image fetch aborted"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pg</color><color=#f8f8f2>.</color><color=#a6e22e>status</color><color=#f8f8f2>()</color> <color=#f92672>&</color> <color=#f8f8f2>ImageObserver</color><color=#f8f8f2>.</color><color=#a6e22e>ERROR</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>RuntimeException</color><color=#f8f8f2>(</color><color=#e6db74>"Image fetch error"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>p</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pg</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pg</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>(),</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>p</color><color=#f8f8f2>.</color><color=#a6e22e>setRGB</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>pg</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pg</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>(),</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>pg</color><color=#f8f8f2>.</color><color=#a6e22e>getPixels</color><color=#f8f8f2>(),</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>pg</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>());</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>p</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Convert an Image into a TYPE_INT_ARGB BufferedImage. If the image is already of this type, the</color>
<color=#75715e>     * original image is returned unchanged.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param image the image to convert</color>
<color=#75715e>     * @return the converted image</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>convertImageToARGB</color><color=#f8f8f2>(</color><color=#f8f8f2>Image</color> <color=#f8f8f2>image</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>image</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>BufferedImage</color>
                <color=#f92672>&&</color> <color=#f8f8f2>((</color><color=#f8f8f2>BufferedImage</color><color=#f8f8f2>)</color> <color=#f8f8f2>image</color><color=#f8f8f2>).</color><color=#a6e22e>getType</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB</color><color=#f8f8f2>)</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color><color=#f8f8f2>)</color> <color=#f8f8f2>image</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>p</color> <color=#f92672>=</color>
                <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>),</color> <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>),</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>Graphics2D</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>p</color><color=#f8f8f2>.</color><color=#a6e22e>createGraphics</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>p</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns a *copy* of a subimage of image. This avoids the performance problems associated with</color>
<color=#75715e>     * BufferedImage.getSubimage.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param image the image</color>
<color=#75715e>     * @param x     the x position</color>
<color=#75715e>     * @param y     the y position</color>
<color=#75715e>     * @param w     the width</color>
<color=#75715e>     * @param h     the height</color>
<color=#75715e>     * @return the subimage</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>getSubimage</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>h</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>newImage</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>Graphics2D</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>newImage</color><color=#f8f8f2>.</color><color=#a6e22e>createGraphics</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawRenderedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#f8f8f2>AffineTransform</color><color=#f8f8f2>.</color><color=#a6e22e>getTranslateInstance</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#f8f8f2>y</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>newImage</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Clones a BufferedImage.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param image the image to clone</color>
<color=#75715e>     * @return the cloned image</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>cloneImage</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>image</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>newImage</color> <color=#f92672>=</color>
                <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>(),</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>Graphics2D</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>newImage</color><color=#f8f8f2>.</color><color=#a6e22e>createGraphics</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawRenderedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>newImage</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Paint a check pattern, used for a background to indicate image transparency.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param c      the component to draw into</color>
<color=#75715e>     * @param g      the Graphics objects</color>
<color=#75715e>     * @param x      the x position</color>
<color=#75715e>     * @param y      the y position</color>
<color=#75715e>     * @param width  the width</color>
<color=#75715e>     * @param height the height</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>paintCheckedBackground</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>Component</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#f8f8f2>Graphics</color> <color=#f8f8f2>g</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>backgroundImage</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>backgroundImage</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color><color=#ae81ff>64</color><color=#f8f8f2>,</color> <color=#ae81ff>64</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>Graphics</color> <color=#f8f8f2>bg</color> <color=#f92672>=</color> <color=#f8f8f2>backgroundImage</color><color=#f8f8f2>.</color><color=#a6e22e>createGraphics</color><color=#f8f8f2>();</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>by</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>by</color> <color=#f92672><</color> <color=#ae81ff>64</color><color=#f8f8f2>;</color> <color=#f8f8f2>by</color> <color=#f92672>+=</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>bx</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>bx</color> <color=#f92672><</color> <color=#ae81ff>64</color><color=#f8f8f2>;</color> <color=#f8f8f2>bx</color> <color=#f92672>+=</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>bg</color><color=#f8f8f2>.</color><color=#a6e22e>setColor</color><color=#f8f8f2>(((</color><color=#f8f8f2>bx</color> <color=#f92672>^</color> <color=#f8f8f2>by</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f8f8f2>Color</color><color=#f8f8f2>.</color><color=#a6e22e>lightGray</color> <color=#f8f8f2>:</color> <color=#f8f8f2>Color</color><color=#f8f8f2>.</color><color=#a6e22e>white</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>bg</color><color=#f8f8f2>.</color><color=#a6e22e>fillRect</color><color=#f8f8f2>(</color><color=#f8f8f2>bx</color><color=#f8f8f2>,</color> <color=#f8f8f2>by</color><color=#f8f8f2>,</color> <color=#ae81ff>8</color><color=#f8f8f2>,</color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>bg</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>backgroundImage</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Shape</color> <color=#f8f8f2>saveClip</color> <color=#f92672>=</color> <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>getClip</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>Rectangle</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>getClipBounds</color><color=#f8f8f2>();</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rectangle</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>r</color><color=#f8f8f2>.</color><color=#a6e22e>intersection</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Rectangle</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>setClip</color><color=#f8f8f2>(</color><color=#f8f8f2>r</color><color=#f8f8f2>);</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>w</color> <color=#f92672>=</color> <color=#f8f8f2>backgroundImage</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>h</color> <color=#f92672>=</color> <color=#f8f8f2>backgroundImage</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>w</color> <color=#f92672>!=</color> <color=#f92672>-</color><color=#ae81ff>1</color> <color=#f92672>&&</color> <color=#f8f8f2>h</color> <color=#f92672>!=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>x1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>/</color> <color=#f8f8f2>w</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>w</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>y1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>/</color> <color=#f8f8f2>h</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>h</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>x2</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>r</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>+</color> <color=#f8f8f2>r</color><color=#f8f8f2>.</color><color=#a6e22e>width</color> <color=#f92672>+</color> <color=#f8f8f2>w</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>w</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>w</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>y2</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>r</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>+</color> <color=#f8f8f2>r</color><color=#f8f8f2>.</color><color=#a6e22e>height</color> <color=#f92672>+</color> <color=#f8f8f2>h</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>h</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>h</color><color=#f8f8f2>;</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#f8f8f2>y1</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>y2</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672>+=</color> <color=#f8f8f2>h</color><color=#f8f8f2>)</color>
                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>x1</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>x2</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672>+=</color> <color=#f8f8f2>w</color><color=#f8f8f2>)</color> <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>backgroundImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>setClip</color><color=#f8f8f2>(</color><color=#f8f8f2>saveClip</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Calculates the bounds of the non-transparent parts of the given image.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param p the image</color>
<color=#75715e>     * @return the bounds of the non-transparent area</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Rectangle</color> <color=#a6e22e>getSelectedBounds</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>p</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>p</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>p</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>maxX</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxY</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>minX</color> <color=#f92672>=</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>minY</color> <color=#f92672>=</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>anySelected</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>y1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pixels</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>y1</color> <color=#f92672>=</color> <color=#f8f8f2>height</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>y1</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y1</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pixels</color> <color=#f92672>=</color> <color=#f8f8f2>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>p</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>y1</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>);</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>minX</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>x</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff000000</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>minX</color> <color=#f92672>=</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>maxY</color> <color=#f92672>=</color> <color=#f8f8f2>y1</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>anySelected</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672>>=</color> <color=#f8f8f2>maxX</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>x</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff000000</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>maxX</color> <color=#f92672>=</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>maxY</color> <color=#f92672>=</color> <color=#f8f8f2>y1</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>anySelected</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>anySelected</color><color=#f8f8f2>)</color> <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>pixels</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>y1</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pixels</color> <color=#f92672>=</color> <color=#f8f8f2>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>p</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>);</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>minX</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>x</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff000000</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>minX</color> <color=#f92672>=</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>minY</color><color=#f8f8f2>)</color> <color=#f8f8f2>minY</color> <color=#f92672>=</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>anySelected</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672>>=</color> <color=#f8f8f2>maxX</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>x</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff000000</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>maxX</color> <color=#f92672>=</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>minY</color><color=#f8f8f2>)</color> <color=#f8f8f2>minY</color> <color=#f92672>=</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>anySelected</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>anySelected</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rectangle</color><color=#f8f8f2>(</color><color=#f8f8f2>minX</color><color=#f8f8f2>,</color> <color=#f8f8f2>minY</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxX</color> <color=#f92672>-</color> <color=#f8f8f2>minX</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxY</color> <color=#f92672>-</color> <color=#f8f8f2>minY</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Compose src onto dst using the alpha of sel to interpolate between the two. I can't think of a</color>
<color=#75715e>     * way to do this using AlphaComposite.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param src the source raster</color>
<color=#75715e>     * @param dst the destination raster</color>
<color=#75715e>     * @param sel the mask raster</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>composeThroughMask</color><color=#f8f8f2>(</color><color=#f8f8f2>Raster</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>WritableRaster</color> <color=#f8f8f2>dst</color><color=#f8f8f2>,</color> <color=#f8f8f2>Raster</color> <color=#f8f8f2>sel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getMinX</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getMinY</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>w</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>h</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>srcRGB</color><color=#f92672>[]</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>selRGB</color><color=#f92672>[]</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>dstRGB</color><color=#f92672>[]</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>h</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>srcRGB</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getPixels</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcRGB</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>selRGB</color> <color=#f92672>=</color> <color=#f8f8f2>sel</color><color=#f8f8f2>.</color><color=#a6e22e>getPixels</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>selRGB</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>dstRGB</color> <color=#f92672>=</color> <color=#f8f8f2>dst</color><color=#f8f8f2>.</color><color=#a6e22e>getPixels</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>dstRGB</color><color=#f8f8f2>);</color>

            <color=#66d9ef>int</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#f8f8f2>w</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>sr</color> <color=#f92672>=</color> <color=#f8f8f2>srcRGB</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>dir</color> <color=#f92672>=</color> <color=#f8f8f2>dstRGB</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>sg</color> <color=#f92672>=</color> <color=#f8f8f2>srcRGB</color><color=#f92672>[</color><color=#f8f8f2>k</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>dig</color> <color=#f92672>=</color> <color=#f8f8f2>dstRGB</color><color=#f92672>[</color><color=#f8f8f2>k</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>sb</color> <color=#f92672>=</color> <color=#f8f8f2>srcRGB</color><color=#f92672>[</color><color=#f8f8f2>k</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>dib</color> <color=#f92672>=</color> <color=#f8f8f2>dstRGB</color><color=#f92672>[</color><color=#f8f8f2>k</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>sa</color> <color=#f92672>=</color> <color=#f8f8f2>srcRGB</color><color=#f92672>[</color><color=#f8f8f2>k</color> <color=#f92672>+</color> <color=#ae81ff>3</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>dia</color> <color=#f92672>=</color> <color=#f8f8f2>dstRGB</color><color=#f92672>[</color><color=#f8f8f2>k</color> <color=#f92672>+</color> <color=#ae81ff>3</color><color=#f92672>]</color><color=#f8f8f2>;</color>

                <color=#66d9ef>float</color> <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#f8f8f2>selRGB</color><color=#f92672>[</color><color=#f8f8f2>k</color> <color=#f92672>+</color> <color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>/</color> <color=#ae81ff>255</color><color=#f8f8f2>f</color><color=#f8f8f2>;</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>ac</color> <color=#f92672>=</color> <color=#ae81ff>1</color> <color=#f92672>-</color> <color=#f8f8f2>a</color><color=#f8f8f2>;</color>

                <color=#f8f8f2>dstRGB</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672>*</color> <color=#f8f8f2>sr</color> <color=#f92672>+</color> <color=#f8f8f2>ac</color> <color=#f92672>*</color> <color=#f8f8f2>dir</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>dstRGB</color><color=#f92672>[</color><color=#f8f8f2>k</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672>*</color> <color=#f8f8f2>sg</color> <color=#f92672>+</color> <color=#f8f8f2>ac</color> <color=#f92672>*</color> <color=#f8f8f2>dig</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>dstRGB</color><color=#f92672>[</color><color=#f8f8f2>k</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672>*</color> <color=#f8f8f2>sb</color> <color=#f92672>+</color> <color=#f8f8f2>ac</color> <color=#f92672>*</color> <color=#f8f8f2>dib</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>dstRGB</color><color=#f92672>[</color><color=#f8f8f2>k</color> <color=#f92672>+</color> <color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672>*</color> <color=#f8f8f2>sa</color> <color=#f92672>+</color> <color=#f8f8f2>ac</color> <color=#f92672>*</color> <color=#f8f8f2>dia</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>k</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>dst</color><color=#f8f8f2>.</color><color=#a6e22e>setPixels</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>dstRGB</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * A convenience method for getting ARGB pixels from an image. This tries to avoid the performance</color>
<color=#75715e>     * penalty of BufferedImage.getRGB unmanaging the image.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param image  a BufferedImage object</color>
<color=#75715e>     * @param x      the left edge of the pixel block</color>
<color=#75715e>     * @param y      the right edge of the pixel block</color>
<color=#75715e>     * @param width  the width of the pixel arry</color>
<color=#75715e>     * @param height the height of the pixel arry</color>
<color=#75715e>     * @param pixels the array to hold the returned pixels. May be null.</color>
<color=#75715e>     * @return the pixels</color>
<color=#75715e>     * @see #setRGB</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#a6e22e>getRGB</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>==</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB</color> <color=#f92672>||</color> <color=#f8f8f2>type</color> <color=#f92672>==</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_RGB</color><color=#f8f8f2>)</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getRaster</color><color=#f8f8f2>().</color><color=#a6e22e>getDataElements</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * A convenience method for setting ARGB pixels in an image. This tries to avoid the performance</color>
<color=#75715e>     * penalty of BufferedImage.setRGB unmanaging the image.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param image  a BufferedImage object</color>
<color=#75715e>     * @param x      the left edge of the pixel block</color>
<color=#75715e>     * @param y      the right edge of the pixel block</color>
<color=#75715e>     * @param width  the width of the pixel arry</color>
<color=#75715e>     * @param height the height of the pixel arry</color>
<color=#75715e>     * @param pixels the array of pixels to set</color>
<color=#75715e>     * @see #getRGB</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>setRGB</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>==</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB</color> <color=#f92672>||</color> <color=#f8f8f2>type</color> <color=#f92672>==</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_RGB</color><color=#f8f8f2>)</color>
            <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getRaster</color><color=#f8f8f2>().</color><color=#a6e22e>setDataElements</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>);</color>
        <color=#66d9ef>else</color> <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>setRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>