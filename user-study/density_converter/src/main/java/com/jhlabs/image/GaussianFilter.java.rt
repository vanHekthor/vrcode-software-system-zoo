<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.Kernel</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A filter which applies Gaussian blur to an image. This is a subclass of ConvolveFilter which</color>
<color=#75715e> * simply creates a kernel with a Gaussian distribution for blurring.</color>
<color=#75715e> *</color>
<color=#75715e> * @author Jerry Huxtable</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>GaussianFilter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ConvolveFilter</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The blur radius.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>float</color> <color=#f8f8f2>radius</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The convolution kernel.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>Kernel</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Construct a Gaussian filter.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>GaussianFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#ae81ff>2</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Construct a Gaussian filter.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param radius blur radius in pixels</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>GaussianFilter</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>radius</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>setRadius</color><color=#f8f8f2>(</color><color=#f8f8f2>radius</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the radius of the kernel, and hence the amount of blur. The bigger the radius, the longer</color>
<color=#75715e>     * this filter will take.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param radius the radius of the blur in pixels.</color>
<color=#75715e>     * @min-value 0</color>
<color=#75715e>     * @max-value 100+</color>
<color=#75715e>     * @see #getRadius</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setRadius</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>radius</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>radius</color> <color=#f92672>=</color> <color=#f8f8f2>radius</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>kernel</color> <color=#f92672>=</color> <color=#f8f8f2>makeKernel</color><color=#f8f8f2>(</color><color=#f8f8f2>radius</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the radius of the kernel.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the radius</color>
<color=#75715e>     * @see #setRadius</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getRadius</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>radius</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dst</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dst</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>dst</color> <color=#f92672>=</color> <color=#f8f8f2>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#f8f8f2>height</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>outPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#f8f8f2>height</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getRGB</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>radius</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>convolveAndTranspose</color><color=#f8f8f2>(</color>
                    <color=#f8f8f2>kernel</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>width</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>height</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>alpha</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>alpha</color> <color=#f92672>&&</color> <color=#f8f8f2>premultiplyAlpha</color><color=#f8f8f2>,</color>
                    <color=#66d9ef>false</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>CLAMP_EDGES</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>convolveAndTranspose</color><color=#f8f8f2>(</color>
                    <color=#f8f8f2>kernel</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>height</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>width</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>alpha</color><color=#f8f8f2>,</color>
                    <color=#66d9ef>false</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>alpha</color> <color=#f92672>&&</color> <color=#f8f8f2>premultiplyAlpha</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>CLAMP_EDGES</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>dst</color><color=#f8f8f2>.</color><color=#a6e22e>setRGB</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>dst</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Blur and transpose a block of ARGB pixels.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param kernel     the blur kernel</color>
<color=#75715e>     * @param inPixels   the input pixels</color>
<color=#75715e>     * @param outPixels  the output pixels</color>
<color=#75715e>     * @param width      the width of the pixel array</color>
<color=#75715e>     * @param height     the height of the pixel array</color>
<color=#75715e>     * @param alpha      whether to blur the alpha channel</color>
<color=#75715e>     * @param edgeAction what to do at the edges</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>convolveAndTranspose</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>Kernel</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color>
            <color=#66d9ef>boolean</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>,</color>
            <color=#66d9ef>boolean</color> <color=#f8f8f2>premultiply</color><color=#f8f8f2>,</color>
            <color=#66d9ef>boolean</color> <color=#f8f8f2>unpremultiply</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>edgeAction</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>matrix</color> <color=#f92672>=</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>.</color><color=#a6e22e>getKernelData</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>cols</color> <color=#f92672>=</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>cols2</color> <color=#f92672>=</color> <color=#f8f8f2>cols</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>ioffset</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672>*</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>moffset</color> <color=#f92672>=</color> <color=#f8f8f2>cols2</color><color=#f8f8f2>;</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>col</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>cols2</color><color=#f8f8f2>;</color> <color=#f8f8f2>col</color> <color=#f92672><=</color> <color=#f8f8f2>cols2</color><color=#f8f8f2>;</color> <color=#f8f8f2>col</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>float</color> <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#f8f8f2>matrix</color><color=#f92672>[</color><color=#f8f8f2>moffset</color> <color=#f92672>+</color> <color=#f8f8f2>col</color><color=#f92672>]</color><color=#f8f8f2>;</color>

                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>f</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>ix</color> <color=#f92672>=</color> <color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>col</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ix</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>edgeAction</color> <color=#f92672>==</color> <color=#f8f8f2>CLAMP_EDGES</color><color=#f8f8f2>)</color> <color=#f8f8f2>ix</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                            <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>edgeAction</color> <color=#f92672>==</color> <color=#f8f8f2>WRAP_EDGES</color><color=#f8f8f2>)</color> <color=#f8f8f2>ix</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>width</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ix</color> <color=#f92672>>=</color> <color=#f8f8f2>width</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>edgeAction</color> <color=#f92672>==</color> <color=#f8f8f2>CLAMP_EDGES</color><color=#f8f8f2>)</color> <color=#f8f8f2>ix</color> <color=#f92672>=</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                            <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>edgeAction</color> <color=#f92672>==</color> <color=#f8f8f2>WRAP_EDGES</color><color=#f8f8f2>)</color> <color=#f8f8f2>ix</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>width</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>ioffset</color> <color=#f92672>+</color> <color=#f8f8f2>ix</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>pa</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>pr</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>pg</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>pb</color> <color=#f92672>=</color> <color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>premultiply</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#66d9ef>float</color> <color=#f8f8f2>a255</color> <color=#f92672>=</color> <color=#f8f8f2>pa</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>1.0f</color> <color=#f92672>/</color> <color=#ae81ff>255.0f</color><color=#f8f8f2>);</color>
                            <color=#f8f8f2>pr</color> <color=#f92672>*=</color> <color=#f8f8f2>a255</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>pg</color> <color=#f92672>*=</color> <color=#f8f8f2>a255</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>pb</color> <color=#f92672>*=</color> <color=#f8f8f2>a255</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color>
                        <color=#f8f8f2>a</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color> <color=#f92672>*</color> <color=#f8f8f2>pa</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>r</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color> <color=#f92672>*</color> <color=#f8f8f2>pr</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>g</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color> <color=#f92672>*</color> <color=#f8f8f2>pg</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>b</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color> <color=#f92672>*</color> <color=#f8f8f2>pb</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>unpremultiply</color> <color=#f92672>&&</color> <color=#f8f8f2>a</color> <color=#f92672>!=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>a</color> <color=#f92672>!=</color> <color=#ae81ff>255</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>float</color> <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#ae81ff>255.0f</color> <color=#f92672>/</color> <color=#f8f8f2>a</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>r</color> <color=#f92672>*=</color> <color=#f8f8f2>f</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>g</color> <color=#f92672>*=</color> <color=#f8f8f2>f</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>b</color> <color=#f92672>*=</color> <color=#f8f8f2>f</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>ia</color> <color=#f92672>=</color> <color=#f8f8f2>alpha</color> <color=#f92672>?</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>))</color> <color=#f8f8f2>:</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>ir</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>));</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>ig</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>g</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>));</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>ib</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>outPixels</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ia</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>ir</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>ig</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>ib</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>index</color> <color=#f92672>+=</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Make a Gaussian blur kernel.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param radius the blur radius</color>
<color=#75715e>     * @return the kernel</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Kernel</color> <color=#a6e22e>makeKernel</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>radius</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>ceil</color><color=#f8f8f2>(</color><color=#f8f8f2>radius</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>rows</color> <color=#f92672>=</color> <color=#f8f8f2>r</color> <color=#f92672>*</color> <color=#ae81ff>2</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>matrix</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>float</color><color=#f92672>[</color><color=#f8f8f2>rows</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>sigma</color> <color=#f92672>=</color> <color=#f8f8f2>radius</color> <color=#f92672>/</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>sigma22</color> <color=#f92672>=</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>sigma</color> <color=#f92672>*</color> <color=#f8f8f2>sigma</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>sigmaPi2</color> <color=#f92672>=</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>PI</color> <color=#f92672>*</color> <color=#f8f8f2>sigma</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>sqrtSigmaPi2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sqrt</color><color=#f8f8f2>(</color><color=#f8f8f2>sigmaPi2</color><color=#f8f8f2>);</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>radius2</color> <color=#f92672>=</color> <color=#f8f8f2>radius</color> <color=#f92672>*</color> <color=#f8f8f2>radius</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>total</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>row</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>r</color><color=#f8f8f2>;</color> <color=#f8f8f2>row</color> <color=#f92672><=</color> <color=#f8f8f2>r</color><color=#f8f8f2>;</color> <color=#f8f8f2>row</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>distance</color> <color=#f92672>=</color> <color=#f8f8f2>row</color> <color=#f92672>*</color> <color=#f8f8f2>row</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>distance</color> <color=#f92672>></color> <color=#f8f8f2>radius2</color><color=#f8f8f2>)</color> <color=#f8f8f2>matrix</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#66d9ef>else</color> <color=#f8f8f2>matrix</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>exp</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>(</color><color=#f8f8f2>distance</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>sigma22</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>sqrtSigmaPi2</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>total</color> <color=#f92672>+=</color> <color=#f8f8f2>matrix</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>index</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>rows</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>matrix</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>/=</color> <color=#f8f8f2>total</color><color=#f8f8f2>;</color>

        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Kernel</color><color=#f8f8f2>(</color><color=#f8f8f2>rows</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>matrix</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#e6db74>"Blur/Gaussian Blur..."</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>