<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A filter for warping images using the gridwarp algorithm. You need to supply two warp grids, one</color>
<color=#75715e> * for the source image and one for the destination image. The image will be warped so that a point</color>
<color=#75715e> * in the source grid moves to its counterpart in the destination grid.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>WarpFilter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>WholeImageFilter</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>WarpGrid</color> <color=#f8f8f2>sourceGrid</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>WarpGrid</color> <color=#f8f8f2>destGrid</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>frames</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>morphImage</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>time</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Create a WarpFilter.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>WarpFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Create a WarpFilter with two warp grids.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param sourceGrid the source grid</color>
<color=#75715e>     * @param destGrid   the destination grid</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>WarpFilter</color><color=#f8f8f2>(</color><color=#f8f8f2>WarpGrid</color> <color=#f8f8f2>sourceGrid</color><color=#f8f8f2>,</color> <color=#f8f8f2>WarpGrid</color> <color=#f8f8f2>destGrid</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>sourceGrid</color> <color=#f92672>=</color> <color=#f8f8f2>sourceGrid</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>destGrid</color> <color=#f92672>=</color> <color=#f8f8f2>destGrid</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the source warp grid.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param sourceGrid the source grid</color>
<color=#75715e>     * @see #getSourceGrid</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setSourceGrid</color><color=#f8f8f2>(</color><color=#f8f8f2>WarpGrid</color> <color=#f8f8f2>sourceGrid</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>sourceGrid</color> <color=#f92672>=</color> <color=#f8f8f2>sourceGrid</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the source warp grid.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the source grid</color>
<color=#75715e>     * @see #setSourceGrid</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>WarpGrid</color> <color=#a6e22e>getSourceGrid</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>sourceGrid</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the destination warp grid.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param destGrid the destination grid</color>
<color=#75715e>     * @see #getDestGrid</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setDestGrid</color><color=#f8f8f2>(</color><color=#f8f8f2>WarpGrid</color> <color=#f8f8f2>destGrid</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>destGrid</color> <color=#f92672>=</color> <color=#f8f8f2>destGrid</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the destination warp grid.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the destination grid</color>
<color=#75715e>     * @see #setDestGrid</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>WarpGrid</color> <color=#a6e22e>getDestGrid</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>destGrid</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setFrames</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>frames</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>frames</color> <color=#f92672>=</color> <color=#f8f8f2>frames</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getFrames</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>frames</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * For morphing, sets the image we're morphing to. If not, set then we're just warping.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setMorphImage</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>morphImage</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>morphImage</color> <color=#f92672>=</color> <color=#f8f8f2>morphImage</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>getMorphImage</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>morphImage</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setTime</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>time</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>time</color> <color=#f92672>=</color> <color=#f8f8f2>time</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getTime</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>time</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>transformSpace</color><color=#f8f8f2>(</color><color=#f8f8f2>Rectangle</color> <color=#f8f8f2>r</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>r</color><color=#f8f8f2>.</color><color=#a6e22e>width</color> <color=#f92672>*=</color> <color=#f8f8f2>frames</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#a6e22e>filterPixels</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>Rectangle</color> <color=#f8f8f2>transformedSpace</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>outPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#f8f8f2>height</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>morphImage</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>morphPixels</color> <color=#f92672>=</color> <color=#f8f8f2>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>morphImage</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>morph</color><color=#f8f8f2>(</color><color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>morphPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>sourceGrid</color><color=#f8f8f2>,</color> <color=#f8f8f2>destGrid</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>time</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>frames</color> <color=#f92672><=</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>sourceGrid</color><color=#f8f8f2>.</color><color=#a6e22e>warp</color><color=#f8f8f2>(</color><color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>sourceGrid</color><color=#f8f8f2>,</color> <color=#f8f8f2>destGrid</color><color=#f8f8f2>,</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>WarpGrid</color> <color=#f8f8f2>newGrid</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>WarpGrid</color><color=#f8f8f2>(</color><color=#f8f8f2>sourceGrid</color><color=#f8f8f2>.</color><color=#a6e22e>rows</color><color=#f8f8f2>,</color> <color=#f8f8f2>sourceGrid</color><color=#f8f8f2>.</color><color=#a6e22e>cols</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>frames</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>i</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#f8f8f2>frames</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>sourceGrid</color><color=#f8f8f2>.</color><color=#a6e22e>lerp</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>,</color> <color=#f8f8f2>destGrid</color><color=#f8f8f2>,</color> <color=#f8f8f2>newGrid</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>sourceGrid</color><color=#f8f8f2>.</color><color=#a6e22e>warp</color><color=#f8f8f2>(</color><color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>sourceGrid</color><color=#f8f8f2>,</color> <color=#f8f8f2>newGrid</color><color=#f8f8f2>,</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>morph</color><color=#f8f8f2>(</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>srcPixels</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>destPixels</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>WarpGrid</color> <color=#f8f8f2>srcGrid</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>WarpGrid</color> <color=#f8f8f2>destGrid</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>WarpGrid</color> <color=#f8f8f2>newGrid</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>WarpGrid</color><color=#f8f8f2>(</color><color=#f8f8f2>srcGrid</color><color=#f8f8f2>.</color><color=#a6e22e>rows</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcGrid</color><color=#f8f8f2>.</color><color=#a6e22e>cols</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>srcGrid</color><color=#f8f8f2>.</color><color=#a6e22e>lerp</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>,</color> <color=#f8f8f2>destGrid</color><color=#f8f8f2>,</color> <color=#f8f8f2>newGrid</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>srcGrid</color><color=#f8f8f2>.</color><color=#a6e22e>warp</color><color=#f8f8f2>(</color><color=#f8f8f2>srcPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcGrid</color><color=#f8f8f2>,</color> <color=#f8f8f2>newGrid</color><color=#f8f8f2>,</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>destPixels2</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#f8f8f2>height</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>destGrid</color><color=#f8f8f2>.</color><color=#a6e22e>warp</color><color=#f8f8f2>(</color><color=#f8f8f2>destPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>destGrid</color><color=#f8f8f2>,</color> <color=#f8f8f2>newGrid</color><color=#f8f8f2>,</color> <color=#f8f8f2>destPixels2</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>crossDissolve</color><color=#f8f8f2>(</color><color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>destPixels2</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>t</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>crossDissolve</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pixels1</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pixels2</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>pixels1</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>mixColors</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels1</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels2</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>index</color><color=#f92672>++</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#e6db74>"Distort/Mesh Warp..."</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>