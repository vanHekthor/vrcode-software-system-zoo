<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.Point2D</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.Rectangle2D</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImageOp</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.ColorModel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Random</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A filter which produces an image simulating brushed metal.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>BrushedMetalFilter</color> <color=#66d9ef>implements</color> <color=#f8f8f2>BufferedImageOp</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>radius</color> <color=#f92672>=</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>amount</color> <color=#f92672>=</color> <color=#ae81ff>0.1f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>color</color> <color=#f92672>=</color> <color=#ae81ff>0xff888888</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>shine</color> <color=#f92672>=</color> <color=#ae81ff>0.1f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>monochrome</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>Random</color> <color=#f8f8f2>randomNumbers</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Constructs a BrushedMetalFilter object.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>BrushedMetalFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Constructs a BrushedMetalFilter object.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param color      an int specifying the metal color</color>
<color=#75715e>     * @param radius     an int specifying the blur size</color>
<color=#75715e>     * @param amount     a float specifying the amount of texture</color>
<color=#75715e>     * @param monochrome a boolean -- true for monochrome texture</color>
<color=#75715e>     * @param shine      a float specifying the shine to add</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>BrushedMetalFilter</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>color</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>radius</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>amount</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>monochrome</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>shine</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>color</color> <color=#f92672>=</color> <color=#f8f8f2>color</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>radius</color> <color=#f92672>=</color> <color=#f8f8f2>radius</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>amount</color> <color=#f92672>=</color> <color=#f8f8f2>amount</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>monochrome</color> <color=#f92672>=</color> <color=#f8f8f2>monochrome</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>shine</color> <color=#f92672>=</color> <color=#f8f8f2>shine</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dst</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dst</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>dst</color> <color=#f92672>=</color> <color=#f8f8f2>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>width</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>outPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>width</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>randomNumbers</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Random</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#f8f8f2>color</color> <color=#f92672>&</color> <color=#ae81ff>0xff000000</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>color</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>color</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>color</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>tr</color> <color=#f92672>=</color> <color=#f8f8f2>r</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>tg</color> <color=#f92672>=</color> <color=#f8f8f2>g</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>tb</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>shine</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>255</color> <color=#f92672>*</color> <color=#f8f8f2>shine</color> <color=#f92672>*</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sin</color><color=#f8f8f2>((</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>x</color> <color=#f92672>/</color> <color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>PI</color><color=#f8f8f2>));</color>
                    <color=#f8f8f2>tr</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>tg</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>tb</color> <color=#f92672>+=</color> <color=#f8f8f2>f</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>monochrome</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>255</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>randomNumbers</color><color=#f8f8f2>.</color><color=#a6e22e>nextFloat</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>amount</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>x</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>a</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>clamp</color><color=#f8f8f2>(</color><color=#f8f8f2>tr</color> <color=#f92672>+</color> <color=#f8f8f2>n</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>clamp</color><color=#f8f8f2>(</color><color=#f8f8f2>tg</color> <color=#f92672>+</color> <color=#f8f8f2>n</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>clamp</color><color=#f8f8f2>(</color><color=#f8f8f2>tb</color> <color=#f92672>+</color> <color=#f8f8f2>n</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>x</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>a</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>random</color><color=#f8f8f2>(</color><color=#f8f8f2>tr</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>random</color><color=#f8f8f2>(</color><color=#f8f8f2>tg</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>random</color><color=#f8f8f2>(</color><color=#f8f8f2>tb</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>radius</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>blur</color><color=#f8f8f2>(</color><color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>radius</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>setRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>dst</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>setRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>dst</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>dst</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>random</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>x</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>255</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>randomNumbers</color><color=#f8f8f2>.</color><color=#a6e22e>nextFloat</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>amount</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>></color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>clamp</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>c</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>></color> <color=#ae81ff>255</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color> <color=#ae81ff>255</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>c</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Return a mod b. This differs from the % operator with respect to negative numbers.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param a the dividend</color>
<color=#75715e>     * @param b the divisor</color>
<color=#75715e>     * @return a mod b</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>mod</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>a</color> <color=#f92672>/</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>a</color> <color=#f92672>-=</color> <color=#f8f8f2>n</color> <color=#f92672>*</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color> <color=#f8f8f2>a</color> <color=#f92672>+</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>a</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>blur</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>radius</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>widthMinus1</color> <color=#f92672>=</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>r2</color> <color=#f92672>=</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>radius</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>tr</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>tg</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>tb</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>radius</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><=</color> <color=#f8f8f2>radius</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f92672>[</color><color=#f8f8f2>mod</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>tr</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>tg</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>tb</color> <color=#f92672>+=</color> <color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>out</color><color=#f92672>[</color><color=#f8f8f2>x</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>0xff000000</color> <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>tr</color> <color=#f92672>/</color> <color=#f8f8f2>r2</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>tg</color> <color=#f92672>/</color> <color=#f8f8f2>r2</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>tb</color> <color=#f92672>/</color> <color=#f8f8f2>r2</color><color=#f8f8f2>);</color>

            <color=#66d9ef>int</color> <color=#f8f8f2>i1</color> <color=#f92672>=</color> <color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>radius</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i1</color> <color=#f92672>></color> <color=#f8f8f2>widthMinus1</color><color=#f8f8f2>)</color> <color=#f8f8f2>i1</color> <color=#f92672>=</color> <color=#f8f8f2>mod</color><color=#f8f8f2>(</color><color=#f8f8f2>i1</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>);</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>i2</color> <color=#f92672>=</color> <color=#f8f8f2>x</color> <color=#f92672>-</color> <color=#f8f8f2>radius</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i2</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>i2</color> <color=#f92672>=</color> <color=#f8f8f2>mod</color><color=#f8f8f2>(</color><color=#f8f8f2>i2</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>);</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>rgb1</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f92672>[</color><color=#f8f8f2>i1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>rgb2</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f92672>[</color><color=#f8f8f2>i2</color><color=#f92672>]</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>tr</color> <color=#f92672>+=</color> <color=#f8f8f2>((</color><color=#f8f8f2>rgb1</color> <color=#f92672>&</color> <color=#ae81ff>0xff0000</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb2</color> <color=#f92672>&</color> <color=#ae81ff>0xff0000</color><color=#f8f8f2>))</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>tg</color> <color=#f92672>+=</color> <color=#f8f8f2>((</color><color=#f8f8f2>rgb1</color> <color=#f92672>&</color> <color=#ae81ff>0xff00</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb2</color> <color=#f92672>&</color> <color=#ae81ff>0xff00</color><color=#f8f8f2>))</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>tb</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb1</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb2</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the horizontal size of the blur.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param radius the radius of the blur in the horizontal direction</color>
<color=#75715e>     * @min-value 0</color>
<color=#75715e>     * @max-value 100+</color>
<color=#75715e>     * @see #getRadius</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setRadius</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>radius</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>radius</color> <color=#f92672>=</color> <color=#f8f8f2>radius</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the horizontal size of the blur.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the radius of the blur in the horizontal direction</color>
<color=#75715e>     * @see #setRadius</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getRadius</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>radius</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the amount of noise to add in the range 0..1.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param amount the amount of noise</color>
<color=#75715e>     * @min-value 0</color>
<color=#75715e>     * @max-value 1</color>
<color=#75715e>     * @see #getAmount</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setAmount</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>amount</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>amount</color> <color=#f92672>=</color> <color=#f8f8f2>amount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the amount of noise to add.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the amount of noise</color>
<color=#75715e>     * @see #setAmount</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getAmount</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>amount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the amount of shine to add to the range 0..1.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param shine the amount of shine</color>
<color=#75715e>     * @min-value 0</color>
<color=#75715e>     * @max-value 1</color>
<color=#75715e>     * @see #getShine</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setShine</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>shine</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>shine</color> <color=#f92672>=</color> <color=#f8f8f2>shine</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the amount of shine to add in the range 0..1.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the amount of shine</color>
<color=#75715e>     * @see #setShine</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getShine</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>shine</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the color of the metal.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param color the color in ARGB form</color>
<color=#75715e>     * @see #getColor</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setColor</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>color</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>color</color> <color=#f92672>=</color> <color=#f8f8f2>color</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the color of the metal.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the color in ARGB form</color>
<color=#75715e>     * @see #setColor</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getColor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>color</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the type of noise to add.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param monochrome true for monochrome noise</color>
<color=#75715e>     * @see #getMonochrome</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setMonochrome</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>monochrome</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>monochrome</color> <color=#f92672>=</color> <color=#f8f8f2>monochrome</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the type of noise to add.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return true for monochrome noise</color>
<color=#75715e>     * @see #setMonochrome</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>getMonochrome</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>monochrome</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>dstCM</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dstCM</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>dstCM</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getColorModel</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>dstCM</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>dstCM</color><color=#f8f8f2>.</color><color=#a6e22e>createCompatibleWritableRaster</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>()),</color>
                <color=#f8f8f2>dstCM</color><color=#f8f8f2>.</color><color=#a6e22e>isAlphaPremultiplied</color><color=#f8f8f2>(),</color>
                <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Rectangle2D</color> <color=#a6e22e>getBounds2D</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rectangle</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Point2D</color> <color=#a6e22e>getPoint2D</color><color=#f8f8f2>(</color><color=#f8f8f2>Point2D</color> <color=#f8f8f2>srcPt</color><color=#f8f8f2>,</color> <color=#f8f8f2>Point2D</color> <color=#f8f8f2>dstPt</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dstPt</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>dstPt</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Point2D</color><color=#f8f8f2>.</color><color=#a6e22e>Double</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>dstPt</color><color=#f8f8f2>.</color><color=#a6e22e>setLocation</color><color=#f8f8f2>(</color><color=#f8f8f2>srcPt</color><color=#f8f8f2>.</color><color=#a6e22e>getX</color><color=#f8f8f2>(),</color> <color=#f8f8f2>srcPt</color><color=#f8f8f2>.</color><color=#a6e22e>getY</color><color=#f8f8f2>());</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>dstPt</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>RenderingHints</color> <color=#a6e22e>getRenderingHints</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * A convenience method for setting ARGB pixels in an image. This tries to avoid the performance</color>
<color=#75715e>     * penalty of BufferedImage.setRGB unmanaging the image.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>==</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB</color> <color=#f92672>||</color> <color=#f8f8f2>type</color> <color=#f92672>==</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_RGB</color><color=#f8f8f2>)</color>
            <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getRaster</color><color=#f8f8f2>().</color><color=#a6e22e>setDataElements</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>);</color>
        <color=#66d9ef>else</color> <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>setRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#e6db74>"Texture/Brushed Metal..."</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>