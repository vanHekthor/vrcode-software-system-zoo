<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A filter which draws a coloured gradient. This is largely superceded by GradientPaint in Java1.2,</color>
<color=#75715e> * but does provide a few more gradient options.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>GradientFilter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractBufferedImageOp</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LINEAR</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BILINEAR</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>RADIAL</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>CONICAL</color> <color=#f92672>=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BICONICAL</color> <color=#f92672>=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SQUARE</color> <color=#f92672>=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>INT_LINEAR</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>INT_CIRCLE_UP</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>INT_CIRCLE_DOWN</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>INT_SMOOTH</color> <color=#f92672>=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>angle</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>color1</color> <color=#f92672>=</color> <color=#ae81ff>0xff000000</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>color2</color> <color=#f92672>=</color> <color=#ae81ff>0xffffffff</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>Point</color> <color=#f8f8f2>p1</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Point</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>),</color> <color=#f8f8f2>p2</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Point</color><color=#f8f8f2>(</color><color=#ae81ff>64</color><color=#f8f8f2>,</color> <color=#ae81ff>64</color><color=#f8f8f2>);</color>
    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>repeat</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>x1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>y1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>dx</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>dy</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>Colormap</color> <color=#f8f8f2>colormap</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>type</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>interpolation</color> <color=#f92672>=</color> <color=#f8f8f2>INT_LINEAR</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>paintMode</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>NORMAL</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>GradientFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>GradientFilter</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>Point</color> <color=#f8f8f2>p1</color><color=#f8f8f2>,</color> <color=#f8f8f2>Point</color> <color=#f8f8f2>p2</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>color1</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>color2</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>repeat</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>interpolation</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>p1</color> <color=#f92672>=</color> <color=#f8f8f2>p1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>p2</color> <color=#f92672>=</color> <color=#f8f8f2>p2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>color1</color> <color=#f92672>=</color> <color=#f8f8f2>color1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>color2</color> <color=#f92672>=</color> <color=#f8f8f2>color2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>repeat</color> <color=#f92672>=</color> <color=#f8f8f2>repeat</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>type</color> <color=#f92672>=</color> <color=#f8f8f2>type</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>interpolation</color> <color=#f92672>=</color> <color=#f8f8f2>interpolation</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>colormap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LinearColormap</color><color=#f8f8f2>(</color><color=#f8f8f2>color1</color><color=#f8f8f2>,</color> <color=#f8f8f2>color2</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setPoint1</color><color=#f8f8f2>(</color><color=#f8f8f2>Point</color> <color=#f8f8f2>point1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>p1</color> <color=#f92672>=</color> <color=#f8f8f2>point1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Point</color> <color=#a6e22e>getPoint1</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>p1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setPoint2</color><color=#f8f8f2>(</color><color=#f8f8f2>Point</color> <color=#f8f8f2>point2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>p2</color> <color=#f92672>=</color> <color=#f8f8f2>point2</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Point</color> <color=#a6e22e>getPoint2</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>p2</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setType</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>type</color> <color=#f92672>=</color> <color=#f8f8f2>type</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getType</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>type</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setInterpolation</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>interpolation</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>interpolation</color> <color=#f92672>=</color> <color=#f8f8f2>interpolation</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getInterpolation</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>interpolation</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Specifies the angle of the texture.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param angle the angle of the texture.</color>
<color=#75715e>     * @angle</color>
<color=#75715e>     * @see #getAngle</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setAngle</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>angle</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>angle</color> <color=#f92672>=</color> <color=#f8f8f2>angle</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>p2</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Point</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>64</color> <color=#f92672>*</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>cos</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>)),</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>64</color> <color=#f92672>*</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sin</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>)));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the angle of the texture.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the angle of the texture.</color>
<color=#75715e>     * @see #setAngle</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getAngle</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>angle</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the colormap to be used for the filter.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param colormap the colormap</color>
<color=#75715e>     * @see #getColormap</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setColormap</color><color=#f8f8f2>(</color><color=#f8f8f2>Colormap</color> <color=#f8f8f2>colormap</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>colormap</color> <color=#f92672>=</color> <color=#f8f8f2>colormap</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the colormap to be used for the filter.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the colormap</color>
<color=#75715e>     * @see #setColormap</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Colormap</color> <color=#a6e22e>getColormap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>colormap</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setPaintMode</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>paintMode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>paintMode</color> <color=#f92672>=</color> <color=#f8f8f2>paintMode</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getPaintMode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>paintMode</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dst</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dst</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>dst</color> <color=#f92672>=</color> <color=#f8f8f2>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>rgb1</color><color=#f8f8f2>,</color> <color=#f8f8f2>rgb2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>x1</color><color=#f8f8f2>,</color> <color=#f8f8f2>y1</color><color=#f8f8f2>,</color> <color=#f8f8f2>x2</color><color=#f8f8f2>,</color> <color=#f8f8f2>y2</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>x1</color> <color=#f92672>=</color> <color=#f8f8f2>p1</color><color=#f8f8f2>.</color><color=#a6e22e>x</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>x2</color> <color=#f92672>=</color> <color=#f8f8f2>p2</color><color=#f8f8f2>.</color><color=#a6e22e>x</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>x1</color> <color=#f92672>></color> <color=#f8f8f2>x2</color> <color=#f92672>&&</color> <color=#f8f8f2>type</color> <color=#f92672>!=</color> <color=#f8f8f2>RADIAL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>y1</color> <color=#f92672>=</color> <color=#f8f8f2>x1</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>x1</color> <color=#f92672>=</color> <color=#f8f8f2>x2</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>x2</color> <color=#f92672>=</color> <color=#f8f8f2>y1</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>y1</color> <color=#f92672>=</color> <color=#f8f8f2>p2</color><color=#f8f8f2>.</color><color=#a6e22e>y</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>y2</color> <color=#f92672>=</color> <color=#f8f8f2>p1</color><color=#f8f8f2>.</color><color=#a6e22e>y</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>rgb1</color> <color=#f92672>=</color> <color=#f8f8f2>color2</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>rgb2</color> <color=#f92672>=</color> <color=#f8f8f2>color1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>y1</color> <color=#f92672>=</color> <color=#f8f8f2>p1</color><color=#f8f8f2>.</color><color=#a6e22e>y</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>y2</color> <color=#f92672>=</color> <color=#f8f8f2>p2</color><color=#f8f8f2>.</color><color=#a6e22e>y</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>rgb1</color> <color=#f92672>=</color> <color=#f8f8f2>color1</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>rgb2</color> <color=#f92672>=</color> <color=#f8f8f2>color2</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>dx</color> <color=#f92672>=</color> <color=#f8f8f2>x2</color> <color=#f92672>-</color> <color=#f8f8f2>x1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>dy</color> <color=#f92672>=</color> <color=#f8f8f2>y2</color> <color=#f92672>-</color> <color=#f8f8f2>y1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>lenSq</color> <color=#f92672>=</color> <color=#f8f8f2>dx</color> <color=#f92672>*</color> <color=#f8f8f2>dx</color> <color=#f92672>+</color> <color=#f8f8f2>dy</color> <color=#f92672>*</color> <color=#f8f8f2>dy</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>x1</color> <color=#f92672>=</color> <color=#f8f8f2>x1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>y1</color> <color=#f92672>=</color> <color=#f8f8f2>y1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lenSq</color> <color=#f92672>>=</color> <color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>MIN_VALUE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>dx</color> <color=#f92672>=</color> <color=#f8f8f2>dx</color> <color=#f92672>/</color> <color=#f8f8f2>lenSq</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>dy</color> <color=#f92672>=</color> <color=#f8f8f2>dy</color> <color=#f92672>/</color> <color=#f8f8f2>lenSq</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repeat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>dx</color> <color=#f92672>=</color> <color=#f8f8f2>dx</color> <color=#f92672>%</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>dy</color> <color=#f92672>=</color> <color=#f8f8f2>dy</color> <color=#f92672>%</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dx</color> <color=#f92672>=</color> <color=#f8f8f2>dx</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dy</color> <color=#f92672>=</color> <color=#f8f8f2>dy</color><color=#f8f8f2>;</color>

        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>width</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>);</color>
            <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>LINEAR</color><color=#f8f8f2>:</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>BILINEAR</color><color=#f8f8f2>:</color>
                    <color=#f8f8f2>linearGradient</color><color=#f8f8f2>(</color><color=#f8f8f2>pixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>RADIAL</color><color=#f8f8f2>:</color>
                    <color=#f8f8f2>radialGradient</color><color=#f8f8f2>(</color><color=#f8f8f2>pixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>CONICAL</color><color=#f8f8f2>:</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>BICONICAL</color><color=#f8f8f2>:</color>
                    <color=#f8f8f2>conicalGradient</color><color=#f8f8f2>(</color><color=#f8f8f2>pixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>SQUARE</color><color=#f8f8f2>:</color>
                    <color=#f8f8f2>squareGradient</color><color=#f8f8f2>(</color><color=#f8f8f2>pixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>setRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>dst</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>dst</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>repeatGradient</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>rowrel</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>dx</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>dy</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>off</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>h</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>colrel</color> <color=#f92672>=</color> <color=#f8f8f2>rowrel</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>w</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>rgb</color><color=#f8f8f2>;</color>
            <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f92672>--</color><color=#f8f8f2>j</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>==</color> <color=#f8f8f2>BILINEAR</color><color=#f8f8f2>)</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>colormap</color><color=#f8f8f2>.</color><color=#a6e22e>getColor</color><color=#f8f8f2>(</color><color=#f8f8f2>map</color><color=#f8f8f2>(</color><color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>triangle</color><color=#f8f8f2>(</color><color=#f8f8f2>colrel</color><color=#f8f8f2>)));</color>
                <color=#66d9ef>else</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>colormap</color><color=#f8f8f2>.</color><color=#a6e22e>getColor</color><color=#f8f8f2>(</color><color=#f8f8f2>map</color><color=#f8f8f2>(</color><color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>mod</color><color=#f8f8f2>(</color><color=#f8f8f2>colrel</color><color=#f8f8f2>,</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>)));</color>
                <color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>combinePixels</color><color=#f8f8f2>(</color><color=#f8f8f2>rgb</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>paintMode</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>off</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>colrel</color> <color=#f92672>+=</color> <color=#f8f8f2>dx</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>rowrel</color> <color=#f92672>+=</color> <color=#f8f8f2>dy</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>singleGradient</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>rowrel</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>dx</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>dy</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>off</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>h</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>colrel</color> <color=#f92672>=</color> <color=#f8f8f2>rowrel</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>w</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>rgb</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>colrel</color> <color=#f92672><=</color> <color=#ae81ff>0.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>colormap</color><color=#f8f8f2>.</color><color=#a6e22e>getColor</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
                <color=#66d9ef>do</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>combinePixels</color><color=#f8f8f2>(</color><color=#f8f8f2>rgb</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>paintMode</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>off</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>colrel</color> <color=#f92672>+=</color> <color=#f8f8f2>dx</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f92672>--</color><color=#f8f8f2>j</color> <color=#f92672>></color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>colrel</color> <color=#f92672><=</color> <color=#ae81ff>0.0</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>colrel</color> <color=#f92672><</color> <color=#ae81ff>1.0</color> <color=#f92672>&&</color> <color=#f92672>--</color><color=#f8f8f2>j</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>==</color> <color=#f8f8f2>BILINEAR</color><color=#f8f8f2>)</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>colormap</color><color=#f8f8f2>.</color><color=#a6e22e>getColor</color><color=#f8f8f2>(</color><color=#f8f8f2>map</color><color=#f8f8f2>(</color><color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>triangle</color><color=#f8f8f2>(</color><color=#f8f8f2>colrel</color><color=#f8f8f2>)));</color>
                <color=#66d9ef>else</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>colormap</color><color=#f8f8f2>.</color><color=#a6e22e>getColor</color><color=#f8f8f2>(</color><color=#f8f8f2>map</color><color=#f8f8f2>(</color><color=#f8f8f2>colrel</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>combinePixels</color><color=#f8f8f2>(</color><color=#f8f8f2>rgb</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>paintMode</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>off</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>colrel</color> <color=#f92672>+=</color> <color=#f8f8f2>dx</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>==</color> <color=#f8f8f2>BILINEAR</color><color=#f8f8f2>)</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>colormap</color><color=#f8f8f2>.</color><color=#a6e22e>getColor</color><color=#f8f8f2>(</color><color=#ae81ff>0.0f</color><color=#f8f8f2>);</color>
                <color=#66d9ef>else</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>colormap</color><color=#f8f8f2>.</color><color=#a6e22e>getColor</color><color=#f8f8f2>(</color><color=#ae81ff>1.0f</color><color=#f8f8f2>);</color>
                <color=#66d9ef>do</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>combinePixels</color><color=#f8f8f2>(</color><color=#f8f8f2>rgb</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>paintMode</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>off</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f92672>--</color><color=#f8f8f2>j</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>rowrel</color> <color=#f92672>+=</color> <color=#f8f8f2>dy</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>linearGradient</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>h</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>rowrel</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>-</color> <color=#f8f8f2>x1</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>dx</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>y</color> <color=#f92672>-</color> <color=#f8f8f2>y1</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>dy</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repeat</color><color=#f8f8f2>)</color> <color=#f8f8f2>repeatGradient</color><color=#f8f8f2>(</color><color=#f8f8f2>pixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#f8f8f2>rowrel</color><color=#f8f8f2>,</color> <color=#f8f8f2>dx</color><color=#f8f8f2>,</color> <color=#f8f8f2>dy</color><color=#f8f8f2>);</color>
        <color=#66d9ef>else</color> <color=#f8f8f2>singleGradient</color><color=#f8f8f2>(</color><color=#f8f8f2>pixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#f8f8f2>rowrel</color><color=#f8f8f2>,</color> <color=#f8f8f2>dx</color><color=#f8f8f2>,</color> <color=#f8f8f2>dy</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>radialGradient</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>h</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>off</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>radius</color> <color=#f92672>=</color> <color=#f8f8f2>distance</color><color=#f8f8f2>(</color><color=#f8f8f2>p2</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>-</color> <color=#f8f8f2>p1</color><color=#f8f8f2>.</color><color=#a6e22e>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>p2</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>-</color> <color=#f8f8f2>p1</color><color=#f8f8f2>.</color><color=#a6e22e>y</color><color=#f8f8f2>);</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>w</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>distance</color> <color=#f92672>=</color> <color=#f8f8f2>distance</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>-</color> <color=#f8f8f2>p1</color><color=#f8f8f2>.</color><color=#a6e22e>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color> <color=#f92672>-</color> <color=#f8f8f2>p1</color><color=#f8f8f2>.</color><color=#a6e22e>y</color><color=#f8f8f2>);</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>ratio</color> <color=#f92672>=</color> <color=#f8f8f2>distance</color> <color=#f92672>/</color> <color=#f8f8f2>radius</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repeat</color><color=#f8f8f2>)</color> <color=#f8f8f2>ratio</color> <color=#f92672>=</color> <color=#f8f8f2>ratio</color> <color=#f92672>%</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
            <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ratio</color> <color=#f92672>></color> <color=#ae81ff>1.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>ratio</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>colormap</color><color=#f8f8f2>.</color><color=#a6e22e>getColor</color><color=#f8f8f2>(</color><color=#f8f8f2>map</color><color=#f8f8f2>(</color><color=#f8f8f2>ratio</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>combinePixels</color><color=#f8f8f2>(</color><color=#f8f8f2>rgb</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>paintMode</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>off</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>squareGradient</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>h</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>off</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>radius</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>abs</color><color=#f8f8f2>(</color><color=#f8f8f2>p2</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>-</color> <color=#f8f8f2>p1</color><color=#f8f8f2>.</color><color=#a6e22e>x</color><color=#f8f8f2>),</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>abs</color><color=#f8f8f2>(</color><color=#f8f8f2>p2</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>-</color> <color=#f8f8f2>p1</color><color=#f8f8f2>.</color><color=#a6e22e>y</color><color=#f8f8f2>));</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>w</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>distance</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>abs</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>-</color> <color=#f8f8f2>p1</color><color=#f8f8f2>.</color><color=#a6e22e>x</color><color=#f8f8f2>),</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>abs</color><color=#f8f8f2>(</color><color=#f8f8f2>y</color> <color=#f92672>-</color> <color=#f8f8f2>p1</color><color=#f8f8f2>.</color><color=#a6e22e>y</color><color=#f8f8f2>));</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>ratio</color> <color=#f92672>=</color> <color=#f8f8f2>distance</color> <color=#f92672>/</color> <color=#f8f8f2>radius</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repeat</color><color=#f8f8f2>)</color> <color=#f8f8f2>ratio</color> <color=#f92672>=</color> <color=#f8f8f2>ratio</color> <color=#f92672>%</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
            <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ratio</color> <color=#f92672>></color> <color=#ae81ff>1.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>ratio</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>colormap</color><color=#f8f8f2>.</color><color=#a6e22e>getColor</color><color=#f8f8f2>(</color><color=#f8f8f2>map</color><color=#f8f8f2>(</color><color=#f8f8f2>ratio</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>combinePixels</color><color=#f8f8f2>(</color><color=#f8f8f2>rgb</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>paintMode</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>off</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>conicalGradient</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>h</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>off</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>angle0</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>atan2</color><color=#f8f8f2>(</color><color=#f8f8f2>p2</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>-</color> <color=#f8f8f2>p1</color><color=#f8f8f2>.</color><color=#a6e22e>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>p2</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>-</color> <color=#f8f8f2>p1</color><color=#f8f8f2>.</color><color=#a6e22e>y</color><color=#f8f8f2>);</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>w</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>angle</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>atan2</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>-</color> <color=#f8f8f2>p1</color><color=#f8f8f2>.</color><color=#a6e22e>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color> <color=#f92672>-</color> <color=#f8f8f2>p1</color><color=#f8f8f2>.</color><color=#a6e22e>y</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>angle0</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>TWO_PI</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>angle</color> <color=#f92672>+=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>angle</color> <color=#f92672>%=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>==</color> <color=#f8f8f2>BICONICAL</color><color=#f8f8f2>)</color> <color=#f8f8f2>angle</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>triangle</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>);</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>colormap</color><color=#f8f8f2>.</color><color=#a6e22e>getColor</color><color=#f8f8f2>(</color><color=#f8f8f2>map</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>combinePixels</color><color=#f8f8f2>(</color><color=#f8f8f2>rgb</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>off</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>paintMode</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>off</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#a6e22e>map</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>v</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>repeat</color><color=#f8f8f2>)</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>v</color> <color=#f92672>></color> <color=#ae81ff>1.0</color> <color=#f92672>?</color> <color=#ae81ff>2.0f</color> <color=#f92672>-</color> <color=#f8f8f2>v</color> <color=#f8f8f2>:</color> <color=#f8f8f2>v</color><color=#f8f8f2>;</color>
        <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>interpolation</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>INT_CIRCLE_UP</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>circleUp</color><color=#f8f8f2>(</color><color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>,</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>));</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>INT_CIRCLE_DOWN</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>circleDown</color><color=#f8f8f2>(</color><color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>,</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>));</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>INT_SMOOTH</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>smoothStep</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f8f8f2>);</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>v</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#a6e22e>distance</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sqrt</color><color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672>*</color> <color=#f8f8f2>a</color> <color=#f92672>+</color> <color=#f8f8f2>b</color> <color=#f92672>*</color> <color=#f8f8f2>b</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#e6db74>"Other/Gradient Fill..."</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>