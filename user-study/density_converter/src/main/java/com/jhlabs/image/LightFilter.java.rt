<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.jhlabs.math.Function2D</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.jhlabs.math.ImageFunction2D</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.jhlabs.vecmath.Color4f</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.jhlabs.vecmath.Vector3f</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.Kernel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Vector</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A filter which produces lighting and embossing effects.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>LightFilter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>WholeImageFilter</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Take the output colors from the input image.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>COLORS_FROM_IMAGE</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Use constant material color.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>COLORS_CONSTANT</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Use the input image brightness as the bump map.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BUMPS_FROM_IMAGE</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Use the input image alpha as the bump map.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BUMPS_FROM_IMAGE_ALPHA</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Use a separate image alpha channel as the bump map.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BUMPS_FROM_MAP</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Use a custom function as the bump map.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BUMPS_FROM_BEVEL</color> <color=#f92672>=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>bumpHeight</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>bumpSoftness</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>bumpShape</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>viewDistance</color> <color=#f92672>=</color> <color=#ae81ff>10000.0f</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>Material</color> <color=#f8f8f2>material</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>Vector</color> <color=#f8f8f2>lights</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>colorSource</color> <color=#f92672>=</color> <color=#f8f8f2>COLORS_FROM_IMAGE</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>bumpSource</color> <color=#f92672>=</color> <color=#f8f8f2>BUMPS_FROM_IMAGE</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>Function2D</color> <color=#f8f8f2>bumpFunction</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>Image</color> <color=#f8f8f2>environmentMap</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>envPixels</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>envWidth</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>envHeight</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

    <color=#75715e>// Temporary variables used to avoid per-pixel memory allocation while filtering</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>Vector3f</color> <color=#f8f8f2>l</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>Vector3f</color> <color=#f8f8f2>v</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>Vector3f</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>Color4f</color> <color=#f8f8f2>shadedColor</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>Color4f</color> <color=#f8f8f2>diffuse_color</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>Color4f</color> <color=#f8f8f2>specular_color</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>Vector3f</color> <color=#f8f8f2>tmpv</color><color=#f8f8f2>,</color> <color=#f8f8f2>tmpv2</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>LightFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>lights</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Vector</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>addLight</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>DistantLight</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>bumpHeight</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>bumpSoftness</color> <color=#f92672>=</color> <color=#ae81ff>5.0f</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>bumpShape</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>material</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Material</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Vector3f</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Vector3f</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Vector3f</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>shadedColor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Color4f</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>diffuse_color</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Color4f</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>specular_color</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Color4f</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>tmpv</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Vector3f</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>tmpv2</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Vector3f</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setMaterial</color><color=#f8f8f2>(</color><color=#f8f8f2>Material</color> <color=#f8f8f2>material</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>material</color> <color=#f92672>=</color> <color=#f8f8f2>material</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Material</color> <color=#a6e22e>getMaterial</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>material</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setBumpFunction</color><color=#f8f8f2>(</color><color=#f8f8f2>Function2D</color> <color=#f8f8f2>bumpFunction</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>bumpFunction</color> <color=#f92672>=</color> <color=#f8f8f2>bumpFunction</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Function2D</color> <color=#a6e22e>getBumpFunction</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>bumpFunction</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setBumpHeight</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>bumpHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>bumpHeight</color> <color=#f92672>=</color> <color=#f8f8f2>bumpHeight</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getBumpHeight</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>bumpHeight</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setBumpSoftness</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>bumpSoftness</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>bumpSoftness</color> <color=#f92672>=</color> <color=#f8f8f2>bumpSoftness</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getBumpSoftness</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>bumpSoftness</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setBumpShape</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>bumpShape</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>bumpShape</color> <color=#f92672>=</color> <color=#f8f8f2>bumpShape</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getBumpShape</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>bumpShape</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setViewDistance</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>viewDistance</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>viewDistance</color> <color=#f92672>=</color> <color=#f8f8f2>viewDistance</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getViewDistance</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>viewDistance</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setEnvironmentMap</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>environmentMap</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>environmentMap</color> <color=#f92672>=</color> <color=#f8f8f2>environmentMap</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>environmentMap</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>envWidth</color> <color=#f92672>=</color> <color=#f8f8f2>environmentMap</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>envHeight</color> <color=#f92672>=</color> <color=#f8f8f2>environmentMap</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>envPixels</color> <color=#f92672>=</color> <color=#f8f8f2>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>environmentMap</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>envWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>envHeight</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>envWidth</color> <color=#f92672>=</color> <color=#f8f8f2>envHeight</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>envPixels</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Image</color> <color=#a6e22e>getEnvironmentMap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>environmentMap</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setColorSource</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>colorSource</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>colorSource</color> <color=#f92672>=</color> <color=#f8f8f2>colorSource</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getColorSource</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>colorSource</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setBumpSource</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>bumpSource</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>bumpSource</color> <color=#f92672>=</color> <color=#f8f8f2>bumpSource</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getBumpSource</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>bumpSource</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setDiffuseColor</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>diffuseColor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>material</color><color=#f8f8f2>.</color><color=#a6e22e>diffuseColor</color> <color=#f92672>=</color> <color=#f8f8f2>diffuseColor</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getDiffuseColor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>material</color><color=#f8f8f2>.</color><color=#a6e22e>diffuseColor</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>addLight</color><color=#f8f8f2>(</color><color=#f8f8f2>Light</color> <color=#f8f8f2>light</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>lights</color><color=#f8f8f2>.</color><color=#a6e22e>addElement</color><color=#f8f8f2>(</color><color=#f8f8f2>light</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>removeLight</color><color=#f8f8f2>(</color><color=#f8f8f2>Light</color> <color=#f8f8f2>light</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>lights</color><color=#f8f8f2>.</color><color=#a6e22e>removeElement</color><color=#f8f8f2>(</color><color=#f8f8f2>light</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Vector</color> <color=#a6e22e>getLights</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>lights</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>r255</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color> <color=#f92672>/</color> <color=#ae81ff>255.0f</color><color=#f8f8f2>;</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>setFromRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>Color4f</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>argb</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>((</color><color=#f8f8f2>argb</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>r255</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>((</color><color=#f8f8f2>argb</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>r255</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>(</color><color=#f8f8f2>argb</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>r255</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>((</color><color=#f8f8f2>argb</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>r255</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#a6e22e>filterPixels</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>Rectangle</color> <color=#f8f8f2>transformedSpace</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>outPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#f8f8f2>height</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>width45</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>abs</color><color=#f8f8f2>(</color><color=#ae81ff>6.0f</color> <color=#f92672>*</color> <color=#f8f8f2>bumpHeight</color><color=#f8f8f2>);</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>invertBumps</color> <color=#f92672>=</color> <color=#f8f8f2>bumpHeight</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>Vector3f</color> <color=#f8f8f2>position</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Vector3f</color><color=#f8f8f2>(</color><color=#ae81ff>0.0f</color><color=#f8f8f2>,</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>,</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>Vector3f</color> <color=#f8f8f2>viewpoint</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Vector3f</color><color=#f8f8f2>((</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>width</color> <color=#f92672>/</color> <color=#ae81ff>2.0f</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>height</color> <color=#f92672>/</color> <color=#ae81ff>2.0f</color><color=#f8f8f2>,</color> <color=#f8f8f2>viewDistance</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>Vector3f</color> <color=#f8f8f2>normal</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Vector3f</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>Color4f</color> <color=#f8f8f2>envColor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Color4f</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>Color4f</color> <color=#f8f8f2>diffuseColor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Color4f</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Color</color><color=#f8f8f2>(</color><color=#f8f8f2>material</color><color=#f8f8f2>.</color><color=#a6e22e>diffuseColor</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>Color4f</color> <color=#f8f8f2>specularColor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Color4f</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Color</color><color=#f8f8f2>(</color><color=#f8f8f2>material</color><color=#f8f8f2>.</color><color=#a6e22e>specularColor</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>Function2D</color> <color=#f8f8f2>bump</color> <color=#f92672>=</color> <color=#f8f8f2>bumpFunction</color><color=#f8f8f2>;</color>

        <color=#75715e>// Apply the bump softness</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bumpSource</color> <color=#f92672>==</color> <color=#f8f8f2>BUMPS_FROM_IMAGE</color>
                <color=#f92672>||</color> <color=#f8f8f2>bumpSource</color> <color=#f92672>==</color> <color=#f8f8f2>BUMPS_FROM_IMAGE_ALPHA</color>
                <color=#f92672>||</color> <color=#f8f8f2>bumpSource</color> <color=#f92672>==</color> <color=#f8f8f2>BUMPS_FROM_MAP</color>
                <color=#f92672>||</color> <color=#f8f8f2>bump</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bumpSoftness</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>bumpWidth</color> <color=#f92672>=</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>bumpHeight</color> <color=#f92672>=</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>bumpPixels</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bumpSource</color> <color=#f92672>==</color> <color=#f8f8f2>BUMPS_FROM_MAP</color> <color=#f92672>&&</color> <color=#f8f8f2>bumpFunction</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>ImageFunction2D</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>ImageFunction2D</color> <color=#f8f8f2>if2d</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ImageFunction2D</color><color=#f8f8f2>)</color> <color=#f8f8f2>bumpFunction</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>bumpWidth</color> <color=#f92672>=</color> <color=#f8f8f2>if2d</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>bumpHeight</color> <color=#f92672>=</color> <color=#f8f8f2>if2d</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>bumpPixels</color> <color=#f92672>=</color> <color=#f8f8f2>if2d</color><color=#f8f8f2>.</color><color=#a6e22e>getPixels</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color>
                <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>tmpPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>bumpWidth</color> <color=#f92672>*</color> <color=#f8f8f2>bumpHeight</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>softPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>bumpWidth</color> <color=#f92672>*</color> <color=#f8f8f2>bumpHeight</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#75715e>/*</color>
<color=#75715e>        				for (int i = 0; i < 3; i++ ) {</color>
<color=#75715e>        					BoxBlurFilter.blur( bumpPixels, tmpPixels, bumpWidth, bumpHeight, (int)bumpSoftness );</color>
<color=#75715e>        					BoxBlurFilter.blur( tmpPixels, softPixels, bumpHeight, bumpWidth, (int)bumpSoftness );</color>
<color=#75715e>        				}</color>
<color=#75715e>        */</color>
                <color=#f8f8f2>Kernel</color> <color=#f8f8f2>kernel</color> <color=#f92672>=</color> <color=#f8f8f2>GaussianFilter</color><color=#f8f8f2>.</color><color=#a6e22e>makeKernel</color><color=#f8f8f2>(</color><color=#f8f8f2>bumpSoftness</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>GaussianFilter</color><color=#f8f8f2>.</color><color=#a6e22e>convolveAndTranspose</color><color=#f8f8f2>(</color>
                        <color=#f8f8f2>kernel</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>bumpPixels</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>tmpPixels</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>bumpWidth</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>bumpHeight</color><color=#f8f8f2>,</color>
                        <color=#66d9ef>true</color><color=#f8f8f2>,</color>
                        <color=#66d9ef>false</color><color=#f8f8f2>,</color>
                        <color=#66d9ef>false</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>GaussianFilter</color><color=#f8f8f2>.</color><color=#a6e22e>WRAP_EDGES</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>GaussianFilter</color><color=#f8f8f2>.</color><color=#a6e22e>convolveAndTranspose</color><color=#f8f8f2>(</color>
                        <color=#f8f8f2>kernel</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>tmpPixels</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>softPixels</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>bumpHeight</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>bumpWidth</color><color=#f8f8f2>,</color>
                        <color=#66d9ef>true</color><color=#f8f8f2>,</color>
                        <color=#66d9ef>false</color><color=#f8f8f2>,</color>
                        <color=#66d9ef>false</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>GaussianFilter</color><color=#f8f8f2>.</color><color=#a6e22e>WRAP_EDGES</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>bump</color> <color=#f92672>=</color>
                        <color=#66d9ef>new</color> <color=#f8f8f2>ImageFunction2D</color><color=#f8f8f2>(</color>
                                <color=#f8f8f2>softPixels</color><color=#f8f8f2>,</color>
                                <color=#f8f8f2>bumpWidth</color><color=#f8f8f2>,</color>
                                <color=#f8f8f2>bumpHeight</color><color=#f8f8f2>,</color>
                                <color=#f8f8f2>ImageFunction2D</color><color=#f8f8f2>.</color><color=#a6e22e>CLAMP</color><color=#f8f8f2>,</color>
                                <color=#f8f8f2>bumpSource</color> <color=#f92672>==</color> <color=#f8f8f2>BUMPS_FROM_IMAGE_ALPHA</color><color=#f8f8f2>);</color>
                <color=#66d9ef>final</color> <color=#f8f8f2>Function2D</color> <color=#f8f8f2>bbump</color> <color=#f92672>=</color> <color=#f8f8f2>bump</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bumpShape</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>bump</color> <color=#f92672>=</color>
                            <color=#66d9ef>new</color> <color=#f8f8f2>Function2D</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                                <color=#66d9ef>private</color> <color=#f8f8f2>Function2D</color> <color=#f8f8f2>original</color> <color=#f92672>=</color> <color=#f8f8f2>bbump</color><color=#f8f8f2>;</color>

                                <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>evaluate</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>y</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                    <color=#66d9ef>float</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>original</color><color=#f8f8f2>.</color><color=#a6e22e>evaluate</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>);</color>
                                    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>bumpShape</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                        <color=#66d9ef>case</color> <color=#ae81ff>1</color><color=#f8f8f2>:</color>
                                            <color=#75715e>//				v = v > 0.5f ? 0.5f : v;</color>
                                            <color=#f8f8f2>v</color> <color=#f92672>*=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>smoothStep</color><color=#f8f8f2>(</color><color=#ae81ff>0.45f</color><color=#f8f8f2>,</color> <color=#ae81ff>0.55f</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f8f8f2>);</color>
                                            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                                        <color=#66d9ef>case</color> <color=#ae81ff>2</color><color=#f8f8f2>:</color>
                                            <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>v</color> <color=#f92672><</color> <color=#ae81ff>0.5f</color> <color=#f92672>?</color> <color=#ae81ff>0.5f</color> <color=#f8f8f2>:</color> <color=#f8f8f2>v</color><color=#f8f8f2>;</color>
                                            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                                        <color=#66d9ef>case</color> <color=#ae81ff>3</color><color=#f8f8f2>:</color>
                                            <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>triangle</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>);</color>
                                            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                                        <color=#66d9ef>case</color> <color=#ae81ff>4</color><color=#f8f8f2>:</color>
                                            <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>circleDown</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>);</color>
                                            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                                        <color=#66d9ef>case</color> <color=#ae81ff>5</color><color=#f8f8f2>:</color>
                                            <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>gain</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#ae81ff>0.75f</color><color=#f8f8f2>);</color>
                                            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                                    <color=#f8f8f2>}</color>
                                    <color=#66d9ef>return</color> <color=#f8f8f2>v</color><color=#f8f8f2>;</color>
                                <color=#f8f8f2>}</color>
                            <color=#f8f8f2>};</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bumpSource</color> <color=#f92672>!=</color> <color=#f8f8f2>BUMPS_FROM_MAP</color><color=#f8f8f2>)</color>
                <color=#f8f8f2>bump</color> <color=#f92672>=</color>
                        <color=#66d9ef>new</color> <color=#f8f8f2>ImageFunction2D</color><color=#f8f8f2>(</color>
                                <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color>
                                <color=#f8f8f2>width</color><color=#f8f8f2>,</color>
                                <color=#f8f8f2>height</color><color=#f8f8f2>,</color>
                                <color=#f8f8f2>ImageFunction2D</color><color=#f8f8f2>.</color><color=#a6e22e>CLAMP</color><color=#f8f8f2>,</color>
                                <color=#f8f8f2>bumpSource</color> <color=#f92672>==</color> <color=#f8f8f2>BUMPS_FROM_IMAGE_ALPHA</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>float</color> <color=#f8f8f2>reflectivity</color> <color=#f92672>=</color> <color=#f8f8f2>material</color><color=#f8f8f2>.</color><color=#a6e22e>reflectivity</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>areflectivity</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#ae81ff>1</color> <color=#f92672>-</color> <color=#f8f8f2>reflectivity</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>Vector3f</color> <color=#f8f8f2>v1</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Vector3f</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>Vector3f</color> <color=#f8f8f2>v2</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Vector3f</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>Vector3f</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Vector3f</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>Light</color><color=#f92672>[]</color> <color=#f8f8f2>lightsArray</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Light</color><color=#f92672>[</color><color=#f8f8f2>lights</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>lights</color><color=#f8f8f2>.</color><color=#a6e22e>copyInto</color><color=#f8f8f2>(</color><color=#f8f8f2>lightsArray</color><color=#f8f8f2>);</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>lightsArray</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>lightsArray</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>prepare</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>

        <color=#66d9ef>float</color><color=#f92672>[][]</color> <color=#f8f8f2>heightWindow</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>float</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>][</color><color=#f8f8f2>width</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>heightWindow</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>][</color><color=#f8f8f2>x</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>width45</color> <color=#f92672>*</color> <color=#f8f8f2>bump</color><color=#f8f8f2>.</color><color=#a6e22e>evaluate</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>

        <color=#75715e>// Loop through each source pixel</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>boolean</color> <color=#f8f8f2>y0</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#66d9ef>boolean</color> <color=#f8f8f2>y1</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>height</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>position</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>=</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>heightWindow</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>][</color><color=#f8f8f2>x</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>width45</color> <color=#f92672>*</color> <color=#f8f8f2>bump</color><color=#f8f8f2>.</color><color=#a6e22e>evaluate</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>boolean</color> <color=#f8f8f2>x0</color> <color=#f92672>=</color> <color=#f8f8f2>x</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                <color=#66d9ef>boolean</color> <color=#f8f8f2>x1</color> <color=#f92672>=</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

                <color=#75715e>// Calculate the normal at this point</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bumpSource</color> <color=#f92672>!=</color> <color=#f8f8f2>BUMPS_FROM_BEVEL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// Complicated and slower method</color>
                    <color=#75715e>// Calculate four normals using the gradients in +/- X/Y directions</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>normal</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>=</color> <color=#f8f8f2>normal</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>=</color> <color=#f8f8f2>normal</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>float</color> <color=#f8f8f2>m0</color> <color=#f92672>=</color> <color=#f8f8f2>heightWindow</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>][</color><color=#f8f8f2>x</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>float</color> <color=#f8f8f2>m1</color> <color=#f92672>=</color> <color=#f8f8f2>x0</color> <color=#f92672>?</color> <color=#f8f8f2>heightWindow</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>][</color><color=#f8f8f2>x</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>-</color> <color=#f8f8f2>m0</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>float</color> <color=#f8f8f2>m2</color> <color=#f92672>=</color> <color=#f8f8f2>y0</color> <color=#f92672>?</color> <color=#f8f8f2>heightWindow</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>][</color><color=#f8f8f2>x</color><color=#f92672>]</color> <color=#f92672>-</color> <color=#f8f8f2>m0</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>float</color> <color=#f8f8f2>m3</color> <color=#f92672>=</color> <color=#f8f8f2>x1</color> <color=#f92672>?</color> <color=#f8f8f2>heightWindow</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>][</color><color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>-</color> <color=#f8f8f2>m0</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>float</color> <color=#f8f8f2>m4</color> <color=#f92672>=</color> <color=#f8f8f2>y1</color> <color=#f92672>?</color> <color=#f8f8f2>heightWindow</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>][</color><color=#f8f8f2>x</color><color=#f92672>]</color> <color=#f92672>-</color> <color=#f8f8f2>m0</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>x0</color> <color=#f92672>&&</color> <color=#f8f8f2>y1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>v1</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>v1</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>v1</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672>=</color> <color=#f8f8f2>m1</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>v2</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>v2</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>v2</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672>=</color> <color=#f8f8f2>m4</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>cross</color><color=#f8f8f2>(</color><color=#f8f8f2>v1</color><color=#f8f8f2>,</color> <color=#f8f8f2>v2</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>normalize</color><color=#f8f8f2>();</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672><</color> <color=#ae81ff>0.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>z</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>normal</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>n</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>count</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>x0</color> <color=#f92672>&&</color> <color=#f8f8f2>y0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>v1</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>v1</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>v1</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672>=</color> <color=#f8f8f2>m1</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>v2</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>v2</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>v2</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672>=</color> <color=#f8f8f2>m2</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>cross</color><color=#f8f8f2>(</color><color=#f8f8f2>v1</color><color=#f8f8f2>,</color> <color=#f8f8f2>v2</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>normalize</color><color=#f8f8f2>();</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672><</color> <color=#ae81ff>0.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>z</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>normal</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>n</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>count</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>y0</color> <color=#f92672>&&</color> <color=#f8f8f2>x1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>v1</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>v1</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>v1</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672>=</color> <color=#f8f8f2>m2</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>v2</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>v2</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>v2</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672>=</color> <color=#f8f8f2>m3</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>cross</color><color=#f8f8f2>(</color><color=#f8f8f2>v1</color><color=#f8f8f2>,</color> <color=#f8f8f2>v2</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>normalize</color><color=#f8f8f2>();</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672><</color> <color=#ae81ff>0.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>z</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>normal</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>n</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>count</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>x1</color> <color=#f92672>&&</color> <color=#f8f8f2>y1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>v1</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>v1</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>v1</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672>=</color> <color=#f8f8f2>m3</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>v2</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>v2</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>v2</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672>=</color> <color=#f8f8f2>m4</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>cross</color><color=#f8f8f2>(</color><color=#f8f8f2>v1</color><color=#f8f8f2>,</color> <color=#f8f8f2>v2</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>normalize</color><color=#f8f8f2>();</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672><</color> <color=#ae81ff>0.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>z</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>normal</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>n</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>count</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>

                    <color=#75715e>// Average the four normals</color>
                    <color=#f8f8f2>normal</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>/=</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>normal</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>/=</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>normal</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672>/=</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>invertBumps</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>normal</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>normal</color><color=#f8f8f2>.</color><color=#a6e22e>x</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>normal</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>normal</color><color=#f8f8f2>.</color><color=#a6e22e>y</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#f8f8f2>position</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>=</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>normal</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// Get the material colour at this point</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>colorSource</color> <color=#f92672>==</color> <color=#f8f8f2>COLORS_FROM_IMAGE</color><color=#f8f8f2>)</color> <color=#f8f8f2>setFromRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>diffuseColor</color><color=#f8f8f2>,</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>else</color> <color=#f8f8f2>setFromRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>diffuseColor</color><color=#f8f8f2>,</color> <color=#f8f8f2>material</color><color=#f8f8f2>.</color><color=#a6e22e>diffuseColor</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>reflectivity</color> <color=#f92672>!=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>environmentMap</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#75715e>// FIXME-too much normalizing going on here</color>
                        <color=#f8f8f2>tmpv2</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>viewpoint</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>tmpv2</color><color=#f8f8f2>.</color><color=#a6e22e>sub</color><color=#f8f8f2>(</color><color=#f8f8f2>position</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>tmpv2</color><color=#f8f8f2>.</color><color=#a6e22e>normalize</color><color=#f8f8f2>();</color>
                        <color=#f8f8f2>tmpv</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>normal</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>tmpv</color><color=#f8f8f2>.</color><color=#a6e22e>normalize</color><color=#f8f8f2>();</color>

                        <color=#75715e>// Reflect</color>
                        <color=#f8f8f2>tmpv</color><color=#f8f8f2>.</color><color=#a6e22e>scale</color><color=#f8f8f2>(</color><color=#ae81ff>2.0f</color> <color=#f92672>*</color> <color=#f8f8f2>tmpv</color><color=#f8f8f2>.</color><color=#a6e22e>dot</color><color=#f8f8f2>(</color><color=#f8f8f2>tmpv2</color><color=#f8f8f2>));</color>
                        <color=#f8f8f2>tmpv</color><color=#f8f8f2>.</color><color=#a6e22e>sub</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>);</color>

                        <color=#f8f8f2>tmpv</color><color=#f8f8f2>.</color><color=#a6e22e>normalize</color><color=#f8f8f2>();</color>
                        <color=#f8f8f2>setFromRGB</color><color=#f8f8f2>(</color>
                                <color=#f8f8f2>envColor</color><color=#f8f8f2>,</color> <color=#f8f8f2>getEnvironmentMap</color><color=#f8f8f2>(</color><color=#f8f8f2>tmpv</color><color=#f8f8f2>,</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>));</color> <color=#75715e>// FIXME-interpolate()</color>
                        <color=#f8f8f2>diffuseColor</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>=</color> <color=#f8f8f2>reflectivity</color> <color=#f92672>*</color> <color=#f8f8f2>envColor</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>+</color> <color=#f8f8f2>areflectivity</color> <color=#f92672>*</color> <color=#f8f8f2>diffuseColor</color><color=#f8f8f2>.</color><color=#a6e22e>x</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>diffuseColor</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>=</color> <color=#f8f8f2>reflectivity</color> <color=#f92672>*</color> <color=#f8f8f2>envColor</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>+</color> <color=#f8f8f2>areflectivity</color> <color=#f92672>*</color> <color=#f8f8f2>diffuseColor</color><color=#f8f8f2>.</color><color=#a6e22e>y</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>diffuseColor</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672>=</color> <color=#f8f8f2>reflectivity</color> <color=#f92672>*</color> <color=#f8f8f2>envColor</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672>+</color> <color=#f8f8f2>areflectivity</color> <color=#f92672>*</color> <color=#f8f8f2>diffuseColor</color><color=#f8f8f2>.</color><color=#a6e22e>z</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                    <color=#75715e>// Shade the pixel</color>
                    <color=#f8f8f2>Color4f</color> <color=#f8f8f2>c</color> <color=#f92672>=</color>
                            <color=#f8f8f2>phongShade</color><color=#f8f8f2>(</color>
                                    <color=#f8f8f2>position</color><color=#f8f8f2>,</color> <color=#f8f8f2>viewpoint</color><color=#f8f8f2>,</color> <color=#f8f8f2>normal</color><color=#f8f8f2>,</color> <color=#f8f8f2>diffuseColor</color><color=#f8f8f2>,</color> <color=#f8f8f2>specularColor</color><color=#f8f8f2>,</color> <color=#f8f8f2>material</color><color=#f8f8f2>,</color> <color=#f8f8f2>lightsArray</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>alpha</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff000000</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>*</color> <color=#ae81ff>255</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>*</color> <color=#ae81ff>255</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672>*</color> <color=#ae81ff>255</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>outPixels</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>alpha</color> <color=#f92672>|</color> <color=#f8f8f2>rgb</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>outPixels</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>heightWindow</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>heightWindow</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>heightWindow</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>heightWindow</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>heightWindow</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>heightWindow</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>t</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#f8f8f2>Color4f</color> <color=#a6e22e>phongShade</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>Vector3f</color> <color=#f8f8f2>position</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>Vector3f</color> <color=#f8f8f2>viewpoint</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>Vector3f</color> <color=#f8f8f2>normal</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>Color4f</color> <color=#f8f8f2>diffuseColor</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>Color4f</color> <color=#f8f8f2>specularColor</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>Material</color> <color=#f8f8f2>material</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>Light</color><color=#f92672>[]</color> <color=#f8f8f2>lightsArray</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>shadedColor</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>diffuseColor</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>shadedColor</color><color=#f8f8f2>.</color><color=#a6e22e>scale</color><color=#f8f8f2>(</color><color=#f8f8f2>material</color><color=#f8f8f2>.</color><color=#a6e22e>ambientIntensity</color><color=#f8f8f2>);</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>lightsArray</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Light</color> <color=#f8f8f2>light</color> <color=#f92672>=</color> <color=#f8f8f2>lightsArray</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>normal</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>light</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>light</color><color=#f8f8f2>.</color><color=#a6e22e>type</color> <color=#f92672>!=</color> <color=#f8f8f2>DISTANT</color><color=#f8f8f2>)</color> <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>sub</color><color=#f8f8f2>(</color><color=#f8f8f2>position</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>l</color><color=#f8f8f2>.</color><color=#a6e22e>normalize</color><color=#f8f8f2>();</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>nDotL</color> <color=#f92672>=</color> <color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>dot</color><color=#f8f8f2>(</color><color=#f8f8f2>l</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nDotL</color> <color=#f92672>>=</color> <color=#ae81ff>0.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>dDotL</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

                <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>viewpoint</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>sub</color><color=#f8f8f2>(</color><color=#f8f8f2>position</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>normalize</color><color=#f8f8f2>();</color>

                <color=#75715e>// Spotlight</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>light</color><color=#f8f8f2>.</color><color=#a6e22e>type</color> <color=#f92672>==</color> <color=#f8f8f2>SPOT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>dDotL</color> <color=#f92672>=</color> <color=#f8f8f2>light</color><color=#f8f8f2>.</color><color=#a6e22e>direction</color><color=#f8f8f2>.</color><color=#a6e22e>dot</color><color=#f8f8f2>(</color><color=#f8f8f2>l</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dDotL</color> <color=#f92672><</color> <color=#f8f8f2>light</color><color=#f8f8f2>.</color><color=#a6e22e>cosConeAngle</color><color=#f8f8f2>)</color> <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>scale</color><color=#f8f8f2>(</color><color=#ae81ff>2.0f</color> <color=#f92672>*</color> <color=#f8f8f2>nDotL</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>sub</color><color=#f8f8f2>(</color><color=#f8f8f2>l</color><color=#f8f8f2>);</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>rDotV</color> <color=#f92672>=</color> <color=#f8f8f2>n</color><color=#f8f8f2>.</color><color=#a6e22e>dot</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f8f8f2>);</color>

                <color=#66d9ef>float</color> <color=#f8f8f2>rv</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rDotV</color> <color=#f92672><</color> <color=#ae81ff>0.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>rv</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
                <color=#66d9ef>else</color>
                    <color=#75715e>//					rv = (float)Math.pow(rDotV, material.highlight);</color>
                    <color=#f8f8f2>rv</color> <color=#f92672>=</color>
                            <color=#f8f8f2>rDotV</color>
                                    <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#f8f8f2>material</color><color=#f8f8f2>.</color><color=#a6e22e>highlight</color>
                                    <color=#f92672>-</color> <color=#f8f8f2>material</color><color=#f8f8f2>.</color><color=#a6e22e>highlight</color> <color=#f92672>*</color> <color=#f8f8f2>rDotV</color>
                                    <color=#f92672>+</color> <color=#f8f8f2>rDotV</color><color=#f8f8f2>);</color> <color=#75715e>// Fast approximation to pow</color>

                <color=#75715e>// Spotlight</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>light</color><color=#f8f8f2>.</color><color=#a6e22e>type</color> <color=#f92672>==</color> <color=#f8f8f2>SPOT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>dDotL</color> <color=#f92672>=</color> <color=#f8f8f2>light</color><color=#f8f8f2>.</color><color=#a6e22e>cosConeAngle</color> <color=#f92672>/</color> <color=#f8f8f2>dDotL</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>float</color> <color=#f8f8f2>e</color> <color=#f92672>=</color> <color=#f8f8f2>dDotL</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>e</color> <color=#f92672>*=</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>e</color> <color=#f92672>*=</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>e</color> <color=#f92672>*=</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>e</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>pow</color><color=#f8f8f2>(</color><color=#f8f8f2>dDotL</color><color=#f8f8f2>,</color> <color=#f8f8f2>light</color><color=#f8f8f2>.</color><color=#a6e22e>focus</color> <color=#f92672>*</color> <color=#ae81ff>10</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>1</color> <color=#f92672>-</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>rv</color> <color=#f92672>*=</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>nDotL</color> <color=#f92672>*=</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>diffuse_color</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>diffuseColor</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>diffuse_color</color><color=#f8f8f2>.</color><color=#a6e22e>scale</color><color=#f8f8f2>(</color><color=#f8f8f2>material</color><color=#f8f8f2>.</color><color=#a6e22e>diffuseReflectivity</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>diffuse_color</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>*=</color> <color=#f8f8f2>light</color><color=#f8f8f2>.</color><color=#a6e22e>realColor</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>*</color> <color=#f8f8f2>nDotL</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>diffuse_color</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>*=</color> <color=#f8f8f2>light</color><color=#f8f8f2>.</color><color=#a6e22e>realColor</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>*</color> <color=#f8f8f2>nDotL</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>diffuse_color</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672>*=</color> <color=#f8f8f2>light</color><color=#f8f8f2>.</color><color=#a6e22e>realColor</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672>*</color> <color=#f8f8f2>nDotL</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>specular_color</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>specularColor</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>specular_color</color><color=#f8f8f2>.</color><color=#a6e22e>scale</color><color=#f8f8f2>(</color><color=#f8f8f2>material</color><color=#f8f8f2>.</color><color=#a6e22e>specularReflectivity</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>specular_color</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>*=</color> <color=#f8f8f2>light</color><color=#f8f8f2>.</color><color=#a6e22e>realColor</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>*</color> <color=#f8f8f2>rv</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>specular_color</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>*=</color> <color=#f8f8f2>light</color><color=#f8f8f2>.</color><color=#a6e22e>realColor</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>*</color> <color=#f8f8f2>rv</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>specular_color</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672>*=</color> <color=#f8f8f2>light</color><color=#f8f8f2>.</color><color=#a6e22e>realColor</color><color=#f8f8f2>.</color><color=#a6e22e>z</color> <color=#f92672>*</color> <color=#f8f8f2>rv</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>diffuse_color</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>specular_color</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>diffuse_color</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>shadedColor</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>diffuse_color</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>shadedColor</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>shadedColor</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>getEnvironmentMap</color><color=#f8f8f2>(</color><color=#f8f8f2>Vector3f</color> <color=#f8f8f2>normal</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>environmentMap</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>angle</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>acos</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>normal</color><color=#f8f8f2>.</color><color=#a6e22e>y</color><color=#f8f8f2>);</color>

            <color=#66d9ef>float</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#f8f8f2>angle</color> <color=#f92672>/</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>PI</color><color=#f8f8f2>;</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>y</color> <color=#f92672>==</color> <color=#ae81ff>0.0f</color> <color=#f92672>||</color> <color=#f8f8f2>y</color> <color=#f92672>==</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>)</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
            <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#f8f8f2>normal</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sin</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>);</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>f</color> <color=#f92672>></color> <color=#ae81ff>1.0f</color><color=#f8f8f2>)</color> <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
                <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>f</color> <color=#f92672><</color> <color=#f92672>-</color><color=#ae81ff>1.0f</color><color=#f8f8f2>)</color> <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>

                <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>acos</color><color=#f8f8f2>(</color><color=#f8f8f2>f</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>PI</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#75715e>// A bit of empirical scaling....</color>
            <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>*</color> <color=#f8f8f2>envWidth</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>envWidth</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>(</color><color=#f8f8f2>y</color> <color=#f92672>*</color> <color=#f8f8f2>envHeight</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>envHeight</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>ix</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>iy</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>

            <color=#66d9ef>float</color> <color=#f8f8f2>xWeight</color> <color=#f92672>=</color> <color=#f8f8f2>x</color> <color=#f92672>-</color> <color=#f8f8f2>ix</color><color=#f8f8f2>;</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>yWeight</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672>-</color> <color=#f8f8f2>iy</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>envWidth</color> <color=#f92672>*</color> <color=#f8f8f2>iy</color> <color=#f92672>+</color> <color=#f8f8f2>ix</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>dx</color> <color=#f92672>=</color> <color=#f8f8f2>ix</color> <color=#f92672>==</color> <color=#f8f8f2>envWidth</color> <color=#f92672>-</color> <color=#ae81ff>1</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>dy</color> <color=#f92672>=</color> <color=#f8f8f2>iy</color> <color=#f92672>==</color> <color=#f8f8f2>envHeight</color> <color=#f92672>-</color> <color=#ae81ff>1</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>envWidth</color><color=#f8f8f2>;</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>bilinearInterpolate</color><color=#f8f8f2>(</color>
                    <color=#f8f8f2>xWeight</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>yWeight</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>envPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>envPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#f8f8f2>dx</color><color=#f92672>]</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>envPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#f8f8f2>dy</color><color=#f92672>]</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>envPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#f8f8f2>dx</color> <color=#f92672>+</color> <color=#f8f8f2>dy</color><color=#f92672>]</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#e6db74>"Stylize/Light Effects..."</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * A class representing material properties.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>Material</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>diffuseColor</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>specularColor</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>ambientIntensity</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>diffuseReflectivity</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>specularReflectivity</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>highlight</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>reflectivity</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>opacity</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

        <color=#66d9ef>public</color> <color=#a6e22e>Material</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>ambientIntensity</color> <color=#f92672>=</color> <color=#ae81ff>0.5f</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>diffuseReflectivity</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>specularReflectivity</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>highlight</color> <color=#f92672>=</color> <color=#ae81ff>3.0f</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>reflectivity</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>diffuseColor</color> <color=#f92672>=</color> <color=#ae81ff>0xff888888</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>specularColor</color> <color=#f92672>=</color> <color=#ae81ff>0xffffffff</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setDiffuseColor</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>diffuseColor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>diffuseColor</color> <color=#f92672>=</color> <color=#f8f8f2>diffuseColor</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getDiffuseColor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>diffuseColor</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setOpacity</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>opacity</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>opacity</color> <color=#f92672>=</color> <color=#f8f8f2>opacity</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getOpacity</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>opacity</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>AMBIENT</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DISTANT</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>POINT</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SPOT</color> <color=#f92672>=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * A class representing a light.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>Light</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Cloneable</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>AMBIENT</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>Vector3f</color> <color=#f8f8f2>position</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>Vector3f</color> <color=#f8f8f2>direction</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>Color4f</color> <color=#f8f8f2>realColor</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Color4f</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>color</color> <color=#f92672>=</color> <color=#ae81ff>0xffffffff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>intensity</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>azimuth</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>elevation</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>focus</color> <color=#f92672>=</color> <color=#ae81ff>0.5f</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>centreX</color> <color=#f92672>=</color> <color=#ae81ff>0.5f</color><color=#f8f8f2>,</color> <color=#f8f8f2>centreY</color> <color=#f92672>=</color> <color=#ae81ff>0.5f</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>coneAngle</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>PI</color> <color=#f92672>/</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>cosConeAngle</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>distance</color> <color=#f92672>=</color> <color=#ae81ff>100.0f</color><color=#f8f8f2>;</color>

        <color=#66d9ef>public</color> <color=#a6e22e>Light</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#ae81ff>270</color> <color=#f92672>*</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>PI</color> <color=#f92672>/</color> <color=#ae81ff>180.0f</color><color=#f8f8f2>,</color> <color=#ae81ff>0.5235987755982988f</color><color=#f8f8f2>,</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#a6e22e>Light</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>azimuth</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>elevation</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>intensity</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>azimuth</color> <color=#f92672>=</color> <color=#f8f8f2>azimuth</color><color=#f8f8f2>;</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>elevation</color> <color=#f92672>=</color> <color=#f8f8f2>elevation</color><color=#f8f8f2>;</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>intensity</color> <color=#f92672>=</color> <color=#f8f8f2>intensity</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setAzimuth</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>azimuth</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>azimuth</color> <color=#f92672>=</color> <color=#f8f8f2>azimuth</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getAzimuth</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>azimuth</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setElevation</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>elevation</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>elevation</color> <color=#f92672>=</color> <color=#f8f8f2>elevation</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getElevation</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>elevation</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setDistance</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>distance</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>distance</color> <color=#f92672>=</color> <color=#f8f8f2>distance</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getDistance</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>distance</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setIntensity</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>intensity</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>intensity</color> <color=#f92672>=</color> <color=#f8f8f2>intensity</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getIntensity</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>intensity</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setConeAngle</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>coneAngle</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>coneAngle</color> <color=#f92672>=</color> <color=#f8f8f2>coneAngle</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getConeAngle</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>coneAngle</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setFocus</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>focus</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>focus</color> <color=#f92672>=</color> <color=#f8f8f2>focus</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getFocus</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>focus</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setColor</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>color</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>color</color> <color=#f92672>=</color> <color=#f8f8f2>color</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getColor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>color</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Set the centre of the light in the X direction as a proportion of the image size.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param centreX the center</color>
<color=#75715e>         * @see #getCentreX</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setCentreX</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>x</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>centreX</color> <color=#f92672>=</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Get the centre of the light in the X direction as a proportion of the image size.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @return the center</color>
<color=#75715e>         * @see #setCentreX</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getCentreX</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>centreX</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Set the centre of the light in the Y direction as a proportion of the image size.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param centreY the center</color>
<color=#75715e>         * @see #getCentreY</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setCentreY</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>y</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>centreY</color> <color=#f92672>=</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Get the centre of the light in the Y direction as a proportion of the image size.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @return the center</color>
<color=#75715e>         * @see #setCentreY</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getCentreY</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>centreY</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Prepare the light for rendering.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param width  the output image width</color>
<color=#75715e>         * @param height the output image height</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>prepare</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>lx</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>cos</color><color=#f8f8f2>(</color><color=#f8f8f2>azimuth</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>cos</color><color=#f8f8f2>(</color><color=#f8f8f2>elevation</color><color=#f8f8f2>));</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>ly</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sin</color><color=#f8f8f2>(</color><color=#f8f8f2>azimuth</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>cos</color><color=#f8f8f2>(</color><color=#f8f8f2>elevation</color><color=#f8f8f2>));</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>lz</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sin</color><color=#f8f8f2>(</color><color=#f8f8f2>elevation</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>direction</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Vector3f</color><color=#f8f8f2>(</color><color=#f8f8f2>lx</color><color=#f8f8f2>,</color> <color=#f8f8f2>ly</color><color=#f8f8f2>,</color> <color=#f8f8f2>lz</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>direction</color><color=#f8f8f2>.</color><color=#a6e22e>normalize</color><color=#f8f8f2>();</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>!=</color> <color=#f8f8f2>DISTANT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>lx</color> <color=#f92672>*=</color> <color=#f8f8f2>distance</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>ly</color> <color=#f92672>*=</color> <color=#f8f8f2>distance</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>lz</color> <color=#f92672>*=</color> <color=#f8f8f2>distance</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>lx</color> <color=#f92672>+=</color> <color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#f8f8f2>centreX</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>ly</color> <color=#f92672>+=</color> <color=#f8f8f2>height</color> <color=#f92672>*</color> <color=#f8f8f2>centreY</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>position</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Vector3f</color><color=#f8f8f2>(</color><color=#f8f8f2>lx</color><color=#f8f8f2>,</color> <color=#f8f8f2>ly</color><color=#f8f8f2>,</color> <color=#f8f8f2>lz</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>realColor</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Color</color><color=#f8f8f2>(</color><color=#f8f8f2>color</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>realColor</color><color=#f8f8f2>.</color><color=#a6e22e>scale</color><color=#f8f8f2>(</color><color=#f8f8f2>intensity</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>cosConeAngle</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>cos</color><color=#f8f8f2>(</color><color=#f8f8f2>coneAngle</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>clone</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>Light</color> <color=#f8f8f2>copy</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Light</color><color=#f8f8f2>)</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>copy</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>CloneNotSupportedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#e6db74>"Light"</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>AmbientLight</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Light</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#e6db74>"Ambient Light"</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>PointLight</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Light</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>public</color> <color=#a6e22e>PointLight</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>POINT</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#e6db74>"Point Light"</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>DistantLight</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Light</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>public</color> <color=#a6e22e>DistantLight</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>DISTANT</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#e6db74>"Distant Light"</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>SpotLight</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Light</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>public</color> <color=#a6e22e>SpotLight</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>SPOT</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#e6db74>"Spotlight"</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>