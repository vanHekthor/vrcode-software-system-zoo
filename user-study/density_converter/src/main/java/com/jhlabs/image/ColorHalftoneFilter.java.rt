<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.WritableRaster</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A Filter to pixellate images.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ColorHalftoneFilter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractBufferedImageOp</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>dotRadius</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>cyanScreenAngle</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>toRadians</color><color=#f8f8f2>(</color><color=#ae81ff>108</color><color=#f8f8f2>);</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>magentaScreenAngle</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>toRadians</color><color=#f8f8f2>(</color><color=#ae81ff>162</color><color=#f8f8f2>);</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>yellowScreenAngle</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>toRadians</color><color=#f8f8f2>(</color><color=#ae81ff>90</color><color=#f8f8f2>);</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ColorHalftoneFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the pixel block size.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param dotRadius the number of pixels along each block edge</color>
<color=#75715e>     * @min-value 1</color>
<color=#75715e>     * @max-value 100+</color>
<color=#75715e>     * @see #getdotRadius</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setdotRadius</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>dotRadius</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dotRadius</color> <color=#f92672>=</color> <color=#f8f8f2>dotRadius</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the pixel block size.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the number of pixels along each block edge</color>
<color=#75715e>     * @see #setdotRadius</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getdotRadius</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>dotRadius</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the cyan screen angle.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the cyan screen angle (in radians)</color>
<color=#75715e>     * @see #setCyanScreenAngle</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getCyanScreenAngle</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>cyanScreenAngle</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the cyan screen angle.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param cyanScreenAngle the cyan screen angle (in radians)</color>
<color=#75715e>     * @see #getCyanScreenAngle</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setCyanScreenAngle</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>cyanScreenAngle</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>cyanScreenAngle</color> <color=#f92672>=</color> <color=#f8f8f2>cyanScreenAngle</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the magenta screen angle.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the magenta screen angle (in radians)</color>
<color=#75715e>     * @see #setMagentaScreenAngle</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getMagentaScreenAngle</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>magentaScreenAngle</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the magenta screen angle.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param magentaScreenAngle the magenta screen angle (in radians)</color>
<color=#75715e>     * @see #getMagentaScreenAngle</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setMagentaScreenAngle</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>magentaScreenAngle</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>magentaScreenAngle</color> <color=#f92672>=</color> <color=#f8f8f2>magentaScreenAngle</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the yellow screen angle.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the yellow screen angle (in radians)</color>
<color=#75715e>     * @see #setYellowScreenAngle</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getYellowScreenAngle</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>yellowScreenAngle</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the yellow screen angle.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param yellowScreenAngle the yellow screen angle (in radians)</color>
<color=#75715e>     * @see #getYellowScreenAngle</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setYellowScreenAngle</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>yellowScreenAngle</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>yellowScreenAngle</color> <color=#f92672>=</color> <color=#f8f8f2>yellowScreenAngle</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dst</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>WritableRaster</color> <color=#f8f8f2>srcRaster</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getRaster</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dst</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>dst</color> <color=#f92672>=</color> <color=#f8f8f2>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

        <color=#66d9ef>float</color> <color=#f8f8f2>gridSize</color> <color=#f92672>=</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>dotRadius</color> <color=#f92672>*</color> <color=#ae81ff>1.414f</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>angles</color> <color=#f92672>=</color> <color=#f8f8f2>{</color><color=#f8f8f2>cyanScreenAngle</color><color=#f8f8f2>,</color> <color=#f8f8f2>magentaScreenAngle</color><color=#f8f8f2>,</color> <color=#f8f8f2>yellowScreenAngle</color><color=#f8f8f2>};</color>
        <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>mx</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>float</color><color=#f92672>[]</color><color=#f8f8f2>{</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>};</color>
        <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>my</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>float</color><color=#f92672>[]</color><color=#f8f8f2>{</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>};</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>halfGridSize</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>gridSize</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>outPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>width</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inPixels</color> <color=#f92672>=</color> <color=#f8f8f2>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>ix</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672>*</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>ix</color><color=#f92672>++</color><color=#f8f8f2>)</color>
                <color=#f8f8f2>outPixels</color><color=#f92672>[</color><color=#f8f8f2>x</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>ix</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff000000</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#ae81ff>0xffffff</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>channel</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>channel</color> <color=#f92672><</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color> <color=#f8f8f2>channel</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>shift</color> <color=#f92672>=</color> <color=#ae81ff>16</color> <color=#f92672>-</color> <color=#ae81ff>8</color> <color=#f92672>*</color> <color=#f8f8f2>channel</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>mask</color> <color=#f92672>=</color> <color=#ae81ff>0x000000ff</color> <color=#f92672><<</color> <color=#f8f8f2>shift</color><color=#f8f8f2>;</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>angle</color> <color=#f92672>=</color> <color=#f8f8f2>angles</color><color=#f92672>[</color><color=#f8f8f2>channel</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>sin</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sin</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>);</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>cos</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>cos</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>);</color>

                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// Transform x,y into halftone screen coordinate space</color>
                    <color=#66d9ef>float</color> <color=#f8f8f2>tx</color> <color=#f92672>=</color> <color=#f8f8f2>x</color> <color=#f92672>*</color> <color=#f8f8f2>cos</color> <color=#f92672>+</color> <color=#f8f8f2>y</color> <color=#f92672>*</color> <color=#f8f8f2>sin</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>float</color> <color=#f8f8f2>ty</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>x</color> <color=#f92672>*</color> <color=#f8f8f2>sin</color> <color=#f92672>+</color> <color=#f8f8f2>y</color> <color=#f92672>*</color> <color=#f8f8f2>cos</color><color=#f8f8f2>;</color>

                    <color=#75715e>// Find the nearest grid point</color>
                    <color=#f8f8f2>tx</color> <color=#f92672>=</color> <color=#f8f8f2>tx</color> <color=#f92672>-</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>mod</color><color=#f8f8f2>(</color><color=#f8f8f2>tx</color> <color=#f92672>-</color> <color=#f8f8f2>halfGridSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>gridSize</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>halfGridSize</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>ty</color> <color=#f92672>=</color> <color=#f8f8f2>ty</color> <color=#f92672>-</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>mod</color><color=#f8f8f2>(</color><color=#f8f8f2>ty</color> <color=#f92672>-</color> <color=#f8f8f2>halfGridSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>gridSize</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>halfGridSize</color><color=#f8f8f2>;</color>

                    <color=#66d9ef>float</color> <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

                    <color=#75715e>// TODO: Efficiency warning: Because the dots overlap, we need to check neighbouring grid</color>
                    <color=#75715e>// squares.</color>
                    <color=#75715e>// We check all four neighbours, but in practice only one can ever overlap any given</color>
                    <color=#75715e>// point.</color>
                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#75715e>// Find neigbouring grid point</color>
                        <color=#66d9ef>float</color> <color=#f8f8f2>ttx</color> <color=#f92672>=</color> <color=#f8f8f2>tx</color> <color=#f92672>+</color> <color=#f8f8f2>mx</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>*</color> <color=#f8f8f2>gridSize</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>float</color> <color=#f8f8f2>tty</color> <color=#f92672>=</color> <color=#f8f8f2>ty</color> <color=#f92672>+</color> <color=#f8f8f2>my</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>*</color> <color=#f8f8f2>gridSize</color><color=#f8f8f2>;</color>
                        <color=#75715e>// Transform back into image space</color>
                        <color=#66d9ef>float</color> <color=#f8f8f2>ntx</color> <color=#f92672>=</color> <color=#f8f8f2>ttx</color> <color=#f92672>*</color> <color=#f8f8f2>cos</color> <color=#f92672>-</color> <color=#f8f8f2>tty</color> <color=#f92672>*</color> <color=#f8f8f2>sin</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>float</color> <color=#f8f8f2>nty</color> <color=#f92672>=</color> <color=#f8f8f2>ttx</color> <color=#f92672>*</color> <color=#f8f8f2>sin</color> <color=#f92672>+</color> <color=#f8f8f2>tty</color> <color=#f92672>*</color> <color=#f8f8f2>cos</color><color=#f8f8f2>;</color>
                        <color=#75715e>// Clamp to the image</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>nx</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>ntx</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>ny</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>nty</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>argb</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>ny</color> <color=#f92672>*</color> <color=#f8f8f2>width</color> <color=#f92672>+</color> <color=#f8f8f2>nx</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>nr</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>argb</color> <color=#f92672>>></color> <color=#f8f8f2>shift</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>float</color> <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#f8f8f2>nr</color> <color=#f92672>/</color> <color=#ae81ff>255.0f</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#ae81ff>1</color> <color=#f92672>-</color> <color=#f8f8f2>l</color> <color=#f92672>*</color> <color=#f8f8f2>l</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>l</color> <color=#f92672>*=</color> <color=#f8f8f2>halfGridSize</color> <color=#f92672>*</color> <color=#ae81ff>1.414</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>float</color> <color=#f8f8f2>dx</color> <color=#f92672>=</color> <color=#f8f8f2>x</color> <color=#f92672>-</color> <color=#f8f8f2>ntx</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>float</color> <color=#f8f8f2>dy</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672>-</color> <color=#f8f8f2>nty</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>float</color> <color=#f8f8f2>dx2</color> <color=#f92672>=</color> <color=#f8f8f2>dx</color> <color=#f92672>*</color> <color=#f8f8f2>dx</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>float</color> <color=#f8f8f2>dy2</color> <color=#f92672>=</color> <color=#f8f8f2>dy</color> <color=#f92672>*</color> <color=#f8f8f2>dy</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>float</color> <color=#f8f8f2>R</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sqrt</color><color=#f8f8f2>(</color><color=#f8f8f2>dx2</color> <color=#f92672>+</color> <color=#f8f8f2>dy2</color><color=#f8f8f2>);</color>
                        <color=#66d9ef>float</color> <color=#f8f8f2>f2</color> <color=#f92672>=</color> <color=#ae81ff>1</color> <color=#f92672>-</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>smoothStep</color><color=#f8f8f2>(</color><color=#f8f8f2>R</color><color=#f8f8f2>,</color> <color=#f8f8f2>R</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>l</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>f</color><color=#f8f8f2>,</color> <color=#f8f8f2>f2</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>int</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>255</color> <color=#f92672>*</color> <color=#f8f8f2>f</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>v</color> <color=#f92672><<=</color> <color=#f8f8f2>shift</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>v</color> <color=#f92672>^=</color> <color=#f92672>~</color><color=#f8f8f2>mask</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>v</color> <color=#f92672>|=</color> <color=#ae81ff>0xff000000</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>outPixels</color><color=#f92672>[</color><color=#f8f8f2>x</color><color=#f92672>]</color> <color=#f92672>&=</color> <color=#f8f8f2>v</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>setRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>dst</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>outPixels</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>dst</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#e6db74>"Pixellate/Color Halftone..."</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>