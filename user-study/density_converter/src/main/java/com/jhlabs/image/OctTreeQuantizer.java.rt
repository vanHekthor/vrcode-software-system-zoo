<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.PrintStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Vector</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * An image Quantizer based on the Octree algorithm. This is a very basic implementation at present</color>
<color=#75715e> * and could be much improved by picking the nodes to reduce more carefully (i.e. not completely at</color>
<color=#75715e> * random) when I get the time.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>OctTreeQuantizer</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Quantizer</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The greatest depth the tree is allowed to reach</color>
<color=#75715e>     */</color>
    <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAX_LEVEL</color> <color=#f92672>=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * An Octtree node.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>class</color> <color=#a6e22e>OctTreeNode</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>children</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>level</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>OctTreeNode</color> <color=#f8f8f2>parent</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>OctTreeNode</color> <color=#f8f8f2>leaf</color><color=#f92672>[]</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>OctTreeNode</color><color=#f92672>[</color><color=#ae81ff>8</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>isLeaf</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>totalRed</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>totalGreen</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>totalBlue</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>;</color>

        <color=#75715e>/**</color>
<color=#75715e>         * A debugging method which prints the tree out.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>list</color><color=#f8f8f2>(</color><color=#f8f8f2>PrintStream</color> <color=#f8f8f2>s</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>level</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>level</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>' '</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>count</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#e6db74>": count="</color> <color=#f92672>+</color> <color=#f8f8f2>count</color><color=#f8f8f2>);</color>
            <color=#66d9ef>else</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                        <color=#f8f8f2>index</color>
                                <color=#f92672>+</color> <color=#e6db74>": count="</color>
                                <color=#f92672>+</color> <color=#f8f8f2>count</color>
                                <color=#f92672>+</color> <color=#e6db74>" red="</color>
                                <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>totalRed</color> <color=#f92672>/</color> <color=#f8f8f2>count</color><color=#f8f8f2>)</color>
                                <color=#f92672>+</color> <color=#e6db74>" green="</color>
                                <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>totalGreen</color> <color=#f92672>/</color> <color=#f8f8f2>count</color><color=#f8f8f2>)</color>
                                <color=#f92672>+</color> <color=#e6db74>" blue="</color>
                                <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>totalBlue</color> <color=#f92672>/</color> <color=#f8f8f2>count</color><color=#f8f8f2>));</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>leaf</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>leaf</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>list</color><color=#f8f8f2>(</color><color=#f8f8f2>s</color><color=#f8f8f2>,</color> <color=#f8f8f2>level</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>nodes</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>OctTreeNode</color> <color=#f8f8f2>root</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>reduceColors</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>maximumColors</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>colors</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>Vector</color><color=#f92672>[]</color> <color=#f8f8f2>colorList</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>OctTreeQuantizer</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>setup</color><color=#f8f8f2>(</color><color=#ae81ff>256</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>colorList</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Vector</color><color=#f92672>[</color><color=#f8f8f2>MAX_LEVEL</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>MAX_LEVEL</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>colorList</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Vector</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>root</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>OctTreeNode</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Initialize the quantizer. This should be called before adding any pixels.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param numColors the number of colors we're quantizing to.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setup</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>numColors</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>maximumColors</color> <color=#f92672>=</color> <color=#f8f8f2>numColors</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>reduceColors</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#ae81ff>512</color><color=#f8f8f2>,</color> <color=#f8f8f2>numColors</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Add pixels to the quantizer.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pixels the array of ARGB pixels</color>
<color=#75715e>     * @param offset the offset into the array</color>
<color=#75715e>     * @param count  the count of pixels</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>addPixels</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>count</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>insertColor</color><color=#f8f8f2>(</color><color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#f8f8f2>offset</color><color=#f92672>]</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>colors</color> <color=#f92672>></color> <color=#f8f8f2>reduceColors</color><color=#f8f8f2>)</color> <color=#f8f8f2>reduceTree</color><color=#f8f8f2>(</color><color=#f8f8f2>reduceColors</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the color table index for a color.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param rgb the color</color>
<color=#75715e>     * @return the index</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getIndexForColor</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>rgb</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>red</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>green</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>blue</color> <color=#f92672>=</color> <color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>OctTreeNode</color> <color=#f8f8f2>node</color> <color=#f92672>=</color> <color=#f8f8f2>root</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>level</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>level</color> <color=#f92672><=</color> <color=#f8f8f2>MAX_LEVEL</color><color=#f8f8f2>;</color> <color=#f8f8f2>level</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>OctTreeNode</color> <color=#f8f8f2>child</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>bit</color> <color=#f92672>=</color> <color=#ae81ff>0x80</color> <color=#f92672>>></color> <color=#f8f8f2>level</color><color=#f8f8f2>;</color>

            <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>red</color> <color=#f92672>&</color> <color=#f8f8f2>bit</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>index</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>green</color> <color=#f92672>&</color> <color=#f8f8f2>bit</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>index</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>blue</color> <color=#f92672>&</color> <color=#f8f8f2>bit</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>index</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>child</color> <color=#f92672>=</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>leaf</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color><color=#f8f8f2>;</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>child</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f8f8f2>;</color>
            <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>isLeaf</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color> <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f8f8f2>;</color>
            <color=#66d9ef>else</color> <color=#f8f8f2>node</color> <color=#f92672>=</color> <color=#f8f8f2>child</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"getIndexForColor failed"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>insertColor</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>rgb</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>red</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>green</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>blue</color> <color=#f92672>=</color> <color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>OctTreeNode</color> <color=#f8f8f2>node</color> <color=#f92672>=</color> <color=#f8f8f2>root</color><color=#f8f8f2>;</color>

        <color=#75715e>//		System.out.println("insertColor="+Integer.toHexString(rgb));</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>level</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>level</color> <color=#f92672><=</color> <color=#f8f8f2>MAX_LEVEL</color><color=#f8f8f2>;</color> <color=#f8f8f2>level</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>OctTreeNode</color> <color=#f8f8f2>child</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>bit</color> <color=#f92672>=</color> <color=#ae81ff>0x80</color> <color=#f92672>>></color> <color=#f8f8f2>level</color><color=#f8f8f2>;</color>

            <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>red</color> <color=#f92672>&</color> <color=#f8f8f2>bit</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>index</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>green</color> <color=#f92672>&</color> <color=#f8f8f2>bit</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>index</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>blue</color> <color=#f92672>&</color> <color=#f8f8f2>bit</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>index</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>child</color> <color=#f92672>=</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>leaf</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color><color=#f8f8f2>;</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>child</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>children</color><color=#f92672>++</color><color=#f8f8f2>;</color>

                <color=#f8f8f2>child</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>OctTreeNode</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color> <color=#f92672>=</color> <color=#f8f8f2>node</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>leaf</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>child</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isLeaf</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>nodes</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>colorList</color><color=#f92672>[</color><color=#f8f8f2>level</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>addElement</color><color=#f8f8f2>(</color><color=#f8f8f2>child</color><color=#f8f8f2>);</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>level</color> <color=#f92672>==</color> <color=#f8f8f2>MAX_LEVEL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>isLeaf</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>count</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>totalRed</color> <color=#f92672>=</color> <color=#f8f8f2>red</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>totalGreen</color> <color=#f92672>=</color> <color=#f8f8f2>green</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>totalBlue</color> <color=#f92672>=</color> <color=#f8f8f2>blue</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>level</color> <color=#f92672>=</color> <color=#f8f8f2>level</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>colors</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>return</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>node</color> <color=#f92672>=</color> <color=#f8f8f2>child</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>isLeaf</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>count</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>totalRed</color> <color=#f92672>+=</color> <color=#f8f8f2>red</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>totalGreen</color> <color=#f92672>+=</color> <color=#f8f8f2>green</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>totalBlue</color> <color=#f92672>+=</color> <color=#f8f8f2>blue</color><color=#f8f8f2>;</color>
                <color=#66d9ef>return</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>node</color> <color=#f92672>=</color> <color=#f8f8f2>child</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"insertColor failed"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>reduceTree</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>numColors</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>level</color> <color=#f92672>=</color> <color=#f8f8f2>MAX_LEVEL</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>level</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>level</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Vector</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>colorList</color><color=#f92672>[</color><color=#f8f8f2>level</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>OctTreeNode</color> <color=#f8f8f2>node</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>OctTreeNode</color><color=#f8f8f2>)</color> <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>elementAt</color><color=#f8f8f2>(</color><color=#f8f8f2>j</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>children</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>OctTreeNode</color> <color=#f8f8f2>child</color> <color=#f92672>=</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>leaf</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>child</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>isLeaf</color><color=#f8f8f2>)</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"not a leaf!"</color><color=#f8f8f2>);</color>
                                <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>count</color> <color=#f92672>+=</color> <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>count</color><color=#f8f8f2>;</color>
                                <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>totalRed</color> <color=#f92672>+=</color> <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>totalRed</color><color=#f8f8f2>;</color>
                                <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>totalGreen</color> <color=#f92672>+=</color> <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>totalGreen</color><color=#f8f8f2>;</color>
                                <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>totalBlue</color> <color=#f92672>+=</color> <color=#f8f8f2>child</color><color=#f8f8f2>.</color><color=#a6e22e>totalBlue</color><color=#f8f8f2>;</color>
                                <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>leaf</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
                                <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>children</color><color=#f92672>--</color><color=#f8f8f2>;</color>
                                <color=#f8f8f2>colors</color><color=#f92672>--</color><color=#f8f8f2>;</color>
                                <color=#f8f8f2>nodes</color><color=#f92672>--</color><color=#f8f8f2>;</color>
                                <color=#f8f8f2>colorList</color><color=#f92672>[</color><color=#f8f8f2>level</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>removeElement</color><color=#f8f8f2>(</color><color=#f8f8f2>child</color><color=#f8f8f2>);</color>
                            <color=#f8f8f2>}</color>
                        <color=#f8f8f2>}</color>
                        <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isLeaf</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>colors</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>colors</color> <color=#f92672><=</color> <color=#f8f8f2>numColors</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Unable to reduce the OctTree"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Build the color table.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the color table</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#a6e22e>buildColorTable</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>table</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>colors</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>buildColorTable</color><color=#f8f8f2>(</color><color=#f8f8f2>root</color><color=#f8f8f2>,</color> <color=#f8f8f2>table</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>table</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * A quick way to use the quantizer. Just create a table the right size and pass in the pixels.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param inPixels the input colors</color>
<color=#75715e>     * @param table    the output color table</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>buildColorTable</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>table</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>inPixels</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>maximumColors</color> <color=#f92672>=</color> <color=#f8f8f2>table</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>insertColor</color><color=#f8f8f2>(</color><color=#f8f8f2>inPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>colors</color> <color=#f92672>></color> <color=#f8f8f2>reduceColors</color><color=#f8f8f2>)</color> <color=#f8f8f2>reduceTree</color><color=#f8f8f2>(</color><color=#f8f8f2>reduceColors</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>colors</color> <color=#f92672>></color> <color=#f8f8f2>maximumColors</color><color=#f8f8f2>)</color> <color=#f8f8f2>reduceTree</color><color=#f8f8f2>(</color><color=#f8f8f2>maximumColors</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>buildColorTable</color><color=#f8f8f2>(</color><color=#f8f8f2>root</color><color=#f8f8f2>,</color> <color=#f8f8f2>table</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>buildColorTable</color><color=#f8f8f2>(</color><color=#f8f8f2>OctTreeNode</color> <color=#f8f8f2>node</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>table</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>colors</color> <color=#f92672>></color> <color=#f8f8f2>maximumColors</color><color=#f8f8f2>)</color> <color=#f8f8f2>reduceTree</color><color=#f8f8f2>(</color><color=#f8f8f2>maximumColors</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>isLeaf</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>count</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>table</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color>
                    <color=#ae81ff>0xff000000</color>
                            <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>totalRed</color> <color=#f92672>/</color> <color=#f8f8f2>count</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color>
                            <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>totalGreen</color> <color=#f92672>/</color> <color=#f8f8f2>count</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color>
                            <color=#f92672>|</color> <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>totalBlue</color> <color=#f92672>/</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>index</color> <color=#f92672>=</color> <color=#f8f8f2>index</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>leaf</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>index</color> <color=#f92672>=</color> <color=#f8f8f2>index</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>buildColorTable</color><color=#f8f8f2>(</color><color=#f8f8f2>node</color><color=#f8f8f2>.</color><color=#a6e22e>leaf</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>table</color><color=#f8f8f2>,</color> <color=#f8f8f2>index</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>index</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>