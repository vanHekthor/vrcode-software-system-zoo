<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.jhlabs.math.Noise</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A filter which distorts an image by rippling it in the X or Y directions. The amplitude and</color>
<color=#75715e> * wavelength of rippling can be specified as well as whether pixels going off the edges are wrapped</color>
<color=#75715e> * or not.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>RippleFilter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>TransformFilter</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Sine wave ripples.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SINE</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Sawtooth wave ripples.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SAWTOOTH</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Triangle wave ripples.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TRIANGLE</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Noise ripples.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>NOISE</color> <color=#f92672>=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>xAmplitude</color><color=#f8f8f2>,</color> <color=#f8f8f2>yAmplitude</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>xWavelength</color><color=#f8f8f2>,</color> <color=#f8f8f2>yWavelength</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>waveType</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Construct a RippleFilter.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>RippleFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>xAmplitude</color> <color=#f92672>=</color> <color=#ae81ff>5.0f</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>yAmplitude</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>xWavelength</color> <color=#f92672>=</color> <color=#f8f8f2>yWavelength</color> <color=#f92672>=</color> <color=#ae81ff>16.0f</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the amplitude of ripple in the X direction.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param xAmplitude the amplitude (in pixels).</color>
<color=#75715e>     * @see #getXAmplitude</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setXAmplitude</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>xAmplitude</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>xAmplitude</color> <color=#f92672>=</color> <color=#f8f8f2>xAmplitude</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the amplitude of ripple in the X direction.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the amplitude (in pixels).</color>
<color=#75715e>     * @see #setXAmplitude</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getXAmplitude</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>xAmplitude</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the wavelength of ripple in the X direction.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param xWavelength the wavelength (in pixels).</color>
<color=#75715e>     * @see #getXWavelength</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setXWavelength</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>xWavelength</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>xWavelength</color> <color=#f92672>=</color> <color=#f8f8f2>xWavelength</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the wavelength of ripple in the X direction.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the wavelength (in pixels).</color>
<color=#75715e>     * @see #setXWavelength</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getXWavelength</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>xWavelength</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the amplitude of ripple in the Y direction.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param yAmplitude the amplitude (in pixels).</color>
<color=#75715e>     * @see #getYAmplitude</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setYAmplitude</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>yAmplitude</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>yAmplitude</color> <color=#f92672>=</color> <color=#f8f8f2>yAmplitude</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the amplitude of ripple in the Y direction.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the amplitude (in pixels).</color>
<color=#75715e>     * @see #setYAmplitude</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getYAmplitude</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>yAmplitude</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the wavelength of ripple in the Y direction.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param yWavelength the wavelength (in pixels).</color>
<color=#75715e>     * @see #getYWavelength</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setYWavelength</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>yWavelength</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>yWavelength</color> <color=#f92672>=</color> <color=#f8f8f2>yWavelength</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the wavelength of ripple in the Y direction.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the wavelength (in pixels).</color>
<color=#75715e>     * @see #setYWavelength</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getYWavelength</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>yWavelength</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Set the wave type.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param waveType the type.</color>
<color=#75715e>     * @see #getWaveType</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setWaveType</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>waveType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>waveType</color> <color=#f92672>=</color> <color=#f8f8f2>waveType</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Get the wave type.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the type.</color>
<color=#75715e>     * @see #setWaveType</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getWaveType</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>waveType</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>transformSpace</color><color=#f8f8f2>(</color><color=#f8f8f2>Rectangle</color> <color=#f8f8f2>r</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>edgeAction</color> <color=#f92672>==</color> <color=#f8f8f2>ZERO</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>r</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>-=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>xAmplitude</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>r</color><color=#f8f8f2>.</color><color=#a6e22e>width</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>xAmplitude</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>r</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>-=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>yAmplitude</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>r</color><color=#f8f8f2>.</color><color=#a6e22e>height</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>yAmplitude</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>transformInverse</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>out</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>nx</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>y</color> <color=#f92672>/</color> <color=#f8f8f2>xWavelength</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>ny</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>x</color> <color=#f92672>/</color> <color=#f8f8f2>yWavelength</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>fx</color><color=#f8f8f2>,</color> <color=#f8f8f2>fy</color><color=#f8f8f2>;</color>
        <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>waveType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>SINE</color><color=#f8f8f2>:</color>
            <color=#66d9ef>default</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>fx</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sin</color><color=#f8f8f2>(</color><color=#f8f8f2>nx</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>fy</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sin</color><color=#f8f8f2>(</color><color=#f8f8f2>ny</color><color=#f8f8f2>);</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>SAWTOOTH</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>fx</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>mod</color><color=#f8f8f2>(</color><color=#f8f8f2>nx</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>fy</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>mod</color><color=#f8f8f2>(</color><color=#f8f8f2>ny</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>TRIANGLE</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>fx</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>triangle</color><color=#f8f8f2>(</color><color=#f8f8f2>nx</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>fy</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>triangle</color><color=#f8f8f2>(</color><color=#f8f8f2>ny</color><color=#f8f8f2>);</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>NOISE</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>fx</color> <color=#f92672>=</color> <color=#f8f8f2>Noise</color><color=#f8f8f2>.</color><color=#a6e22e>noise1</color><color=#f8f8f2>(</color><color=#f8f8f2>nx</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>fy</color> <color=#f92672>=</color> <color=#f8f8f2>Noise</color><color=#f8f8f2>.</color><color=#a6e22e>noise1</color><color=#f8f8f2>(</color><color=#f8f8f2>ny</color><color=#f8f8f2>);</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>out</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>xAmplitude</color> <color=#f92672>*</color> <color=#f8f8f2>fx</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>out</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672>+</color> <color=#f8f8f2>yAmplitude</color> <color=#f92672>*</color> <color=#f8f8f2>fy</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#e6db74>"Distort/Ripple..."</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>