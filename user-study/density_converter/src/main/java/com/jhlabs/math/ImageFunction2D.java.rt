<color=#75715e>/*</color>
<color=#75715e>Copyright 2006 Jerry Huxtable</color>

<color=#75715e>Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e>you may not use this file except in compliance with the License.</color>
<color=#75715e>You may obtain a copy of the License at</color>

<color=#75715e>   http://www.apache.org/licenses/LICENSE-2.0</color>

<color=#75715e>Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e>distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e>See the License for the specific language governing permissions and</color>
<color=#75715e>limitations under the License.</color>
<color=#75715e>*/</color>

<color=#f92672>package</color> <color=#f8f8f2>com.jhlabs.math</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.jhlabs.image.ImageMath</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.jhlabs.image.PixelUtils</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.ImageObserver</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.PixelGrabber</color><color=#f8f8f2>;</color>

<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ImageFunction2D</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Function2D</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ZERO</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>CLAMP</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>WRAP</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>;</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>int</color> <color=#f8f8f2>edgeAction</color> <color=#f92672>=</color> <color=#f8f8f2>ZERO</color><color=#f8f8f2>;</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>alpha</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ImageFunction2D</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>image</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ImageFunction2D</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#f8f8f2>ZERO</color><color=#f8f8f2>,</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ImageFunction2D</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>edgeAction</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>init</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>(),</color> <color=#66d9ef>null</color><color=#f8f8f2>),</color>
                <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color>
                <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>(),</color>
                <color=#f8f8f2>edgeAction</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ImageFunction2D</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>edgeAction</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>init</color><color=#f8f8f2>(</color><color=#f8f8f2>pixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>edgeAction</color><color=#f8f8f2>,</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ImageFunction2D</color><color=#f8f8f2>(</color><color=#f8f8f2>Image</color> <color=#f8f8f2>image</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#f8f8f2>ZERO</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ImageFunction2D</color><color=#f8f8f2>(</color><color=#f8f8f2>Image</color> <color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>edgeAction</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>PixelGrabber</color> <color=#f8f8f2>pg</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>PixelGrabber</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pg</color><color=#f8f8f2>.</color><color=#a6e22e>grabPixels</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>RuntimeException</color><color=#f8f8f2>(</color><color=#e6db74>"interrupted waiting for pixels!"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pg</color><color=#f8f8f2>.</color><color=#a6e22e>status</color><color=#f8f8f2>()</color> <color=#f92672>&</color> <color=#f8f8f2>ImageObserver</color><color=#f8f8f2>.</color><color=#a6e22e>ABORT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>RuntimeException</color><color=#f8f8f2>(</color><color=#e6db74>"image fetch aborted"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>init</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>pg</color><color=#f8f8f2>.</color><color=#a6e22e>getPixels</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pg</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pg</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>(),</color> <color=#f8f8f2>edgeAction</color><color=#f8f8f2>,</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * A convenience method for getting ARGB pixels from an image. This tries to avoid the performance</color>
<color=#75715e>     * penalty of BufferedImage.getRGB unmanaging the image.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#a6e22e>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>==</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB</color> <color=#f92672>||</color> <color=#f8f8f2>type</color> <color=#f92672>==</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_RGB</color><color=#f8f8f2>)</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getRaster</color><color=#f8f8f2>().</color><color=#a6e22e>getDataElements</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>init</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>edgeAction</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>pixels</color> <color=#f92672>=</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>width</color> <color=#f92672>=</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>height</color> <color=#f92672>=</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>edgeAction</color> <color=#f92672>=</color> <color=#f8f8f2>edgeAction</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>alpha</color> <color=#f92672>=</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>evaluate</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>y</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>ix</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>iy</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>edgeAction</color> <color=#f92672>==</color> <color=#f8f8f2>WRAP</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>ix</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>mod</color><color=#f8f8f2>(</color><color=#f8f8f2>ix</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>iy</color> <color=#f92672>=</color> <color=#f8f8f2>ImageMath</color><color=#f8f8f2>.</color><color=#a6e22e>mod</color><color=#f8f8f2>(</color><color=#f8f8f2>iy</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ix</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>iy</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>ix</color> <color=#f92672>>=</color> <color=#f8f8f2>width</color> <color=#f92672>||</color> <color=#f8f8f2>iy</color> <color=#f92672>>=</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>edgeAction</color> <color=#f92672>==</color> <color=#f8f8f2>ZERO</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ix</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>ix</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ix</color> <color=#f92672>>=</color> <color=#f8f8f2>width</color><color=#f8f8f2>)</color> <color=#f8f8f2>ix</color> <color=#f92672>=</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>iy</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>iy</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>iy</color> <color=#f92672>>=</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>iy</color> <color=#f92672>=</color> <color=#f8f8f2>height</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>alpha</color>
                <color=#f92672>?</color> <color=#f8f8f2>((</color><color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>iy</color> <color=#f92672>*</color> <color=#f8f8f2>width</color> <color=#f92672>+</color> <color=#f8f8f2>ix</color><color=#f92672>]</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>255.0f</color>
                <color=#f8f8f2>:</color> <color=#f8f8f2>PixelUtils</color><color=#f8f8f2>.</color><color=#a6e22e>brightness</color><color=#f8f8f2>(</color><color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>iy</color> <color=#f92672>*</color> <color=#f8f8f2>width</color> <color=#f92672>+</color> <color=#f8f8f2>ix</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>255.0f</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setEdgeAction</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>edgeAction</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>edgeAction</color> <color=#f92672>=</color> <color=#f8f8f2>edgeAction</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getEdgeAction</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>edgeAction</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getWidth</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getHeight</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#a6e22e>getPixels</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>