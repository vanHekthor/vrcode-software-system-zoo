<color=#75715e>/*</color>
<color=#75715e> * Copyright 2013, Morten Nobel-Joergensen</color>
<color=#75715e> *</color>
<color=#75715e> * License: The BSD 3-Clause License</color>
<color=#75715e> * http://opensource.org/licenses/BSD-3-Clause</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.mortennobel.imagescaling</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.IIOImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.ImageIO</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.ImageReader</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.ImageWriter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.metadata.IIOMetadata</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.stream.ImageInputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.stream.ImageOutputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.stream.MemoryCacheImageInputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.stream.MemoryCacheImageOutputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.Raster</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.WritableRaster</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.ByteArrayInputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.ByteArrayOutputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.InputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Iterator</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * @author Heinz Doerr</color>
<color=#75715e> * @author Morten Nobel-Joergensen</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ImageUtils</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>imageTypeName</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>img</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>img</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_3BYTE_BGR</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#e6db74>"TYPE_3BYTE_BGR"</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_4BYTE_ABGR</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#e6db74>"TYPE_4BYTE_ABGR"</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_4BYTE_ABGR_PRE</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#e6db74>"TYPE_4BYTE_ABGR_PRE"</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BYTE_BINARY</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#e6db74>"TYPE_BYTE_BINARY"</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BYTE_GRAY</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#e6db74>"TYPE_BYTE_GRAY"</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BYTE_INDEXED</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#e6db74>"TYPE_BYTE_INDEXED"</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_CUSTOM</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#e6db74>"TYPE_CUSTOM"</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#e6db74>"TYPE_INT_ARGB"</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB_PRE</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#e6db74>"TYPE_INT_ARGB_PRE"</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_BGR</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#e6db74>"TYPE_INT_BGR"</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_RGB</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#e6db74>"TYPE_INT_RGB"</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_USHORT_555_RGB</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#e6db74>"TYPE_USHORT_555_RGB"</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_USHORT_565_RGB</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#e6db74>"TYPE_USHORT_565_RGB"</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_USHORT_GRAY</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#e6db74>"TYPE_USHORT_GRAY"</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#e6db74>"unknown image type #"</color> <color=#f92672>+</color> <color=#f8f8f2>img</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>nrChannels</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>img</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>img</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_3BYTE_BGR</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_4BYTE_ABGR</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BYTE_GRAY</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_BGR</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_RGB</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_CUSTOM</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_4BYTE_ABGR_PRE</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB_PRE</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_USHORT_555_RGB</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_USHORT_565_RGB</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_USHORT_GRAY</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * returns one row (height == 1) of byte packed image data in BGR or AGBR form</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param img</color>
<color=#75715e>     * @param y</color>
<color=#75715e>     * @param w</color>
<color=#75715e>     * @param array</color>
<color=#75715e>     * @param temp  must be either null or a array with length of w*h</color>
<color=#75715e>     * @return</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>getPixelsBGR</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>img</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>array</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>temp</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>h</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

        <color=#66d9ef>assert</color> <color=#f8f8f2>array</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#f8f8f2>temp</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>*</color> <color=#f8f8f2>nrChannels</color><color=#f8f8f2>(</color><color=#f8f8f2>img</color><color=#f8f8f2>);</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>(</color><color=#f8f8f2>temp</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#f8f8f2>w</color><color=#f8f8f2>);</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>imageType</color> <color=#f92672>=</color> <color=#f8f8f2>img</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>Raster</color> <color=#f8f8f2>raster</color><color=#f8f8f2>;</color>
        <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>imageType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_3BYTE_BGR</color><color=#f8f8f2>:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_4BYTE_ABGR</color><color=#f8f8f2>:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_4BYTE_ABGR_PRE</color><color=#f8f8f2>:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BYTE_GRAY</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>raster</color> <color=#f92672>=</color> <color=#f8f8f2>img</color><color=#f8f8f2>.</color><color=#a6e22e>getRaster</color><color=#f8f8f2>();</color>
                <color=#75715e>// int ttype= raster.getTransferType();</color>
                <color=#f8f8f2>raster</color><color=#f8f8f2>.</color><color=#a6e22e>getDataElements</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#f8f8f2>array</color><color=#f8f8f2>);</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_BGR</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>raster</color> <color=#f92672>=</color> <color=#f8f8f2>img</color><color=#f8f8f2>.</color><color=#a6e22e>getRaster</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>raster</color><color=#f8f8f2>.</color><color=#a6e22e>getDataElements</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#f8f8f2>temp</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>ints2bytes</color><color=#f8f8f2>(</color><color=#f8f8f2>temp</color><color=#f8f8f2>,</color> <color=#f8f8f2>array</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color> <color=#75715e>// bgr -->  bgr</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_RGB</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>raster</color> <color=#f92672>=</color> <color=#f8f8f2>img</color><color=#f8f8f2>.</color><color=#a6e22e>getRaster</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>raster</color><color=#f8f8f2>.</color><color=#a6e22e>getDataElements</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#f8f8f2>temp</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>ints2bytes</color><color=#f8f8f2>(</color><color=#f8f8f2>temp</color><color=#f8f8f2>,</color> <color=#f8f8f2>array</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color> <color=#75715e>// rgb -->  bgr</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB</color><color=#f8f8f2>:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB_PRE</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>raster</color> <color=#f92672>=</color> <color=#f8f8f2>img</color><color=#f8f8f2>.</color><color=#a6e22e>getRaster</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>raster</color><color=#f8f8f2>.</color><color=#a6e22e>getDataElements</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#f8f8f2>temp</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>ints2bytes</color><color=#f8f8f2>(</color><color=#f8f8f2>temp</color><color=#f8f8f2>,</color> <color=#f8f8f2>array</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color> <color=#75715e>// argb -->  abgr</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_CUSTOM</color><color=#f8f8f2>:</color> <color=#75715e>// TODO: works for my icon image loader, but else ???</color>
                <color=#f8f8f2>img</color><color=#f8f8f2>.</color><color=#a6e22e>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#f8f8f2>temp</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>ints2bytes</color><color=#f8f8f2>(</color><color=#f8f8f2>temp</color><color=#f8f8f2>,</color> <color=#f8f8f2>array</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color> <color=#75715e>// argb -->  abgr</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>default</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>img</color><color=#f8f8f2>.</color><color=#a6e22e>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#f8f8f2>temp</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>ints2bytes</color><color=#f8f8f2>(</color><color=#f8f8f2>temp</color><color=#f8f8f2>,</color> <color=#f8f8f2>array</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color> <color=#75715e>// rgb -->  bgr</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>array</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * converts and copies byte packed BGR or ABGR into the img buffer, the img type may vary (e.g.</color>
<color=#75715e>     * RGB or BGR, int or byte packed) but the number of components (w/o alpha, w alpha, gray) must</color>
<color=#75715e>     * match</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>does not unmange the image for all (A)RGN and (A)BGR and gray imaged</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>setBGRPixels</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bgrPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>img</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>h</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>imageType</color> <color=#f92672>=</color> <color=#f8f8f2>img</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>WritableRaster</color> <color=#f8f8f2>raster</color> <color=#f92672>=</color> <color=#f8f8f2>img</color><color=#f8f8f2>.</color><color=#a6e22e>getRaster</color><color=#f8f8f2>();</color>
        <color=#75715e>// int ttype= raster.getTransferType();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>imageType</color> <color=#f92672>==</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_3BYTE_BGR</color>
                <color=#f92672>||</color> <color=#f8f8f2>imageType</color> <color=#f92672>==</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_4BYTE_ABGR</color>
                <color=#f92672>||</color> <color=#f8f8f2>imageType</color> <color=#f92672>==</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_4BYTE_ABGR_PRE</color>
                <color=#f92672>||</color> <color=#f8f8f2>imageType</color> <color=#f92672>==</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BYTE_GRAY</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>raster</color><color=#f8f8f2>.</color><color=#a6e22e>setDataElements</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#f8f8f2>bgrPixels</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>imageType</color> <color=#f92672>==</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_BGR</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>pixels</color> <color=#f92672>=</color> <color=#f8f8f2>bytes2int</color><color=#f8f8f2>(</color><color=#f8f8f2>bgrPixels</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color> <color=#75715e>// bgr -->  bgr</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>imageType</color> <color=#f92672>==</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB</color>
                    <color=#f92672>||</color> <color=#f8f8f2>imageType</color> <color=#f92672>==</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB_PRE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>pixels</color> <color=#f92672>=</color> <color=#f8f8f2>bytes2int</color><color=#f8f8f2>(</color><color=#f8f8f2>bgrPixels</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color> <color=#75715e>// abgr -->  argb</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>pixels</color> <color=#f92672>=</color> <color=#f8f8f2>bytes2int</color><color=#f8f8f2>(</color><color=#f8f8f2>bgrPixels</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color> <color=#75715e>// bgr -->  rgb</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>w</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>h</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pixels</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672><</color> <color=#f8f8f2>w</color> <color=#f92672>*</color> <color=#f8f8f2>h</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"pixels array must have a length"</color> <color=#f92672>+</color> <color=#e6db74>" >= w*h"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>imageType</color> <color=#f92672>==</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB</color>
                    <color=#f92672>||</color> <color=#f8f8f2>imageType</color> <color=#f92672>==</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_RGB</color>
                    <color=#f92672>||</color> <color=#f8f8f2>imageType</color> <color=#f92672>==</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB_PRE</color>
                    <color=#f92672>||</color> <color=#f8f8f2>imageType</color> <color=#f92672>==</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_BGR</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>raster</color><color=#f8f8f2>.</color><color=#a6e22e>setDataElements</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Unmanages the image</color>
                <color=#f8f8f2>img</color><color=#f8f8f2>.</color><color=#a6e22e>setRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>ints2bytes</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>index1</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>index2</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>index3</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>*</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>out</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#f8f8f2>index1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>value</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>out</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#f8f8f2>index2</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>value</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>out</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#f8f8f2>index3</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>ints2bytes</color><color=#f8f8f2>(</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>index1</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>index2</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>index3</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>index4</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>*</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>out</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#f8f8f2>index1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>value</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>out</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#f8f8f2>index2</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>value</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>out</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#f8f8f2>index3</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>value</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>out</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#f8f8f2>index4</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#a6e22e>bytes2int</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>index1</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>index2</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>index3</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>/</color> <color=#ae81ff>3</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>*</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>b1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#f8f8f2>index1</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>b2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#f8f8f2>index2</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>b3</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#f8f8f2>index3</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>out</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>b1</color> <color=#f92672>|</color> <color=#f8f8f2>b2</color> <color=#f92672>|</color> <color=#f8f8f2>b3</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>out</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#a6e22e>bytes2int</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>index1</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>index2</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>index3</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>index4</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>/</color> <color=#ae81ff>4</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>*</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>b1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#f8f8f2>index1</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>b2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#f8f8f2>index2</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>b3</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#f8f8f2>index3</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>b4</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#f8f8f2>index4</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>out</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>b1</color> <color=#f92672>|</color> <color=#f8f8f2>b2</color> <color=#f92672>|</color> <color=#f8f8f2>b3</color> <color=#f92672>|</color> <color=#f8f8f2>b4</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>out</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>convert</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>bufImgType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>img</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>(),</color> <color=#f8f8f2>bufImgType</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>Graphics2D</color> <color=#f8f8f2>g2d</color> <color=#f92672>=</color> <color=#f8f8f2>img</color><color=#f8f8f2>.</color><color=#a6e22e>createGraphics</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>g2d</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>g2d</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>img</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Copy jpeg meta data (exif) from source to dest and save it to out.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param source</color>
<color=#75715e>     * @param dest</color>
<color=#75715e>     * @return result</color>
<color=#75715e>     * @throws IOException</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>copyJpegMetaData</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>dest</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ByteArrayOutputStream</color> <color=#f8f8f2>baos</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteArrayOutputStream</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>ImageOutputStream</color> <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MemoryCacheImageOutputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>baos</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>copyJpegMetaData</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>ByteArrayInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>source</color><color=#f8f8f2>),</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteArrayInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>dest</color><color=#f8f8f2>),</color> <color=#f8f8f2>out</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>baos</color><color=#f8f8f2>.</color><color=#a6e22e>toByteArray</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Copy jpeg meta data (exif) from source to dest and save it to out</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param source</color>
<color=#75715e>     * @param dest</color>
<color=#75715e>     * @param out</color>
<color=#75715e>     * @throws IOException</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>copyJpegMetaData</color><color=#f8f8f2>(</color><color=#f8f8f2>InputStream</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#f8f8f2>InputStream</color> <color=#f8f8f2>dest</color><color=#f8f8f2>,</color> <color=#f8f8f2>ImageOutputStream</color> <color=#f8f8f2>out</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Read meta data from src image</color>
        <color=#f8f8f2>Iterator</color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>ImageIO</color><color=#f8f8f2>.</color><color=#a6e22e>getImageReadersByFormatName</color><color=#f8f8f2>(</color><color=#e6db74>"jpeg"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>ImageReader</color> <color=#f8f8f2>reader</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ImageReader</color><color=#f8f8f2>)</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>iis</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MemoryCacheImageInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>source</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>setInput</color><color=#f8f8f2>(</color><color=#f8f8f2>iis</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>IIOMetadata</color> <color=#f8f8f2>metadata</color> <color=#f92672>=</color> <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>getImageMetadata</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>iis</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#75715e>// Read dest image</color>
        <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>outIis</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MemoryCacheImageInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>dest</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>setInput</color><color=#f8f8f2>(</color><color=#f8f8f2>outIis</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>IIOImage</color> <color=#f8f8f2>image</color> <color=#f92672>=</color> <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>readAll</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>setMetadata</color><color=#f8f8f2>(</color><color=#f8f8f2>metadata</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>outIis</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#75715e>// write dest image</color>
        <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>ImageIO</color><color=#f8f8f2>.</color><color=#a6e22e>getImageWritersByFormatName</color><color=#f8f8f2>(</color><color=#e6db74>"jpeg"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>ImageWriter</color> <color=#f8f8f2>writer</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ImageWriter</color><color=#f8f8f2>)</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>writer</color><color=#f8f8f2>.</color><color=#a6e22e>setOutput</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>writer</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>