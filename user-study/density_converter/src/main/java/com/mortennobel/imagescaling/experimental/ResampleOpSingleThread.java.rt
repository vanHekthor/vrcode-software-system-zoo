<color=#75715e>/*</color>
<color=#75715e> * Copyright 2013, Morten Nobel-Joergensen</color>
<color=#75715e> *</color>
<color=#75715e> * License: The BSD 3-Clause License</color>
<color=#75715e> * http://opensource.org/licenses/BSD-3-Clause</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.mortennobel.imagescaling.experimental</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.mortennobel.imagescaling.*</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.DataBuffer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.BitSet</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Based on work from Java Image Util ( http://schmidt.devlib.org/jiu/ )</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that the filter method is not thread safe</color>
<color=#75715e> *</color>
<color=#75715e> * @author Morten Nobel-Joergensen</color>
<color=#75715e> * @author Heinz Doerr</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ResampleOpSingleThread</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AdvancedResizeOp</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAX_CHANNEL_VALUE</color> <color=#f92672>=</color> <color=#ae81ff>255</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>nrChannels</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>srcWidth</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>srcHeight</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>dstWidth</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>dstHeight</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>SubSamplingData</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>arrN</color><color=#f8f8f2>;</color> <color=#75715e>// individual - per row or per column - nr of contributions</color>
        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>arrPixel</color><color=#f8f8f2>;</color> <color=#75715e>// 2Dim: [wid or hei][contrib]</color>
        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>arrWeight</color><color=#f8f8f2>;</color> <color=#75715e>// 2Dim: [wid or hei][contrib]</color>
        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color>
                <color=#f8f8f2>numContributors</color><color=#f8f8f2>;</color> <color=#75715e>// the primary index length for the 2Dim arrays : arrPixel and arrWeight</color>
        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>

        <color=#66d9ef>private</color> <color=#a6e22e>SubSamplingData</color><color=#f8f8f2>(</color>
                <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>arrN</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>arrPixel</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>arrWeight</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>numContributors</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>width</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>arrN</color> <color=#f92672>=</color> <color=#f8f8f2>arrN</color><color=#f8f8f2>;</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>arrPixel</color> <color=#f92672>=</color> <color=#f8f8f2>arrPixel</color><color=#f8f8f2>;</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>arrWeight</color> <color=#f92672>=</color> <color=#f8f8f2>arrWeight</color><color=#f8f8f2>;</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>numContributors</color> <color=#f92672>=</color> <color=#f8f8f2>numContributors</color><color=#f8f8f2>;</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>width</color> <color=#f92672>=</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>SubSamplingData</color> <color=#f8f8f2>horizontalSubsamplingData</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>SubSamplingData</color> <color=#f8f8f2>verticalSubsamplingData</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>processedItems</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>totalItems</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>ResampleFilter</color> <color=#f8f8f2>filter</color> <color=#f92672>=</color> <color=#f8f8f2>ResampleFilters</color><color=#f8f8f2>.</color><color=#a6e22e>getLanczos3Filter</color><color=#f8f8f2>();</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ResampleOpSingleThread</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>destWidth</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>destHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>DimensionConstrain</color><color=#f8f8f2>.</color><color=#a6e22e>createAbsolutionDimension</color><color=#f8f8f2>(</color><color=#f8f8f2>destWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>destHeight</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ResampleOpSingleThread</color><color=#f8f8f2>(</color><color=#f8f8f2>DimensionConstrain</color> <color=#f8f8f2>dimensionConstrain</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>dimensionConstrain</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>ResampleFilter</color> <color=#a6e22e>getFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>filter</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setFilter</color><color=#f8f8f2>(</color><color=#f8f8f2>ResampleFilter</color> <color=#f8f8f2>filter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>filter</color> <color=#f92672>=</color> <color=#f8f8f2>filter</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>doFilter</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>srcImg</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dest</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>dstWidth</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>dstHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dstWidth</color> <color=#f92672>=</color> <color=#f8f8f2>dstWidth</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dstHeight</color> <color=#f92672>=</color> <color=#f8f8f2>dstHeight</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>srcImg</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BYTE_BINARY</color>
                <color=#f92672>||</color> <color=#f8f8f2>srcImg</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BYTE_INDEXED</color>
                <color=#f92672>||</color> <color=#f8f8f2>srcImg</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_CUSTOM</color><color=#f8f8f2>)</color>
            <color=#f8f8f2>srcImg</color> <color=#f92672>=</color>
                    <color=#f8f8f2>ImageUtils</color><color=#f8f8f2>.</color><color=#a6e22e>convert</color><color=#f8f8f2>(</color>
                            <color=#f8f8f2>srcImg</color><color=#f8f8f2>,</color>
                            <color=#f8f8f2>srcImg</color><color=#f8f8f2>.</color><color=#a6e22e>getColorModel</color><color=#f8f8f2>().</color><color=#a6e22e>hasAlpha</color><color=#f8f8f2>()</color>
                                    <color=#f92672>?</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_4BYTE_ABGR</color>
                                    <color=#f8f8f2>:</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_3BYTE_BGR</color><color=#f8f8f2>);</color>

        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>nrChannels</color> <color=#f92672>=</color> <color=#f8f8f2>ImageUtils</color><color=#f8f8f2>.</color><color=#a6e22e>nrChannels</color><color=#f8f8f2>(</color><color=#f8f8f2>srcImg</color><color=#f8f8f2>);</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>nrChannels</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>srcWidth</color> <color=#f92672>=</color> <color=#f8f8f2>srcImg</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>srcHeight</color> <color=#f92672>=</color> <color=#f8f8f2>srcImg</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>processedItems</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>totalItems</color> <color=#f92672>=</color> <color=#f8f8f2>srcHeight</color><color=#f8f8f2>;</color>

        <color=#75715e>// Pre-calculate  sub-sampling</color>
        <color=#f8f8f2>horizontalSubsamplingData</color> <color=#f92672>=</color> <color=#f8f8f2>createSubSampling</color><color=#f8f8f2>(</color><color=#f8f8f2>srcWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>dstWidth</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>verticalSubsamplingData</color> <color=#f92672>=</color> <color=#f8f8f2>createSubSampling</color><color=#f8f8f2>(</color><color=#f8f8f2>srcHeight</color><color=#f8f8f2>,</color> <color=#f8f8f2>dstHeight</color><color=#f8f8f2>);</color>

        <color=#75715e>// final byte[] outPixels = new byte[dstWidth*dstHeight*nrChannels];</color>

        <color=#75715e>// Idea: Since only a small part of the buffer is used, scaling the image, we reuse the rows to</color>
        <color=#75715e>// save memory</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>bufferHeight</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>ceil</color><color=#f8f8f2>(</color><color=#f8f8f2>verticalSubsamplingData</color><color=#f8f8f2>.</color><color=#a6e22e>width</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>byte</color><color=#f92672>[][]</color> <color=#f8f8f2>workPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>srcHeight</color><color=#f92672>][]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>bufferHeight</color> <color=#f92672>&&</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>srcHeight</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>workPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>dstWidth</color> <color=#f92672>*</color> <color=#f8f8f2>nrChannels</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>bufferHeight</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>workPixels</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>workPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>workPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>%</color> <color=#f8f8f2>bufferHeight</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[][]</color> <color=#f8f8f2>workPixelsCopy</color> <color=#f92672>=</color> <color=#f8f8f2>workPixels</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>out</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dest</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>dstWidth</color> <color=#f92672>==</color> <color=#f8f8f2>dest</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>dstHeight</color> <color=#f92672>==</color> <color=#f8f8f2>dest</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#f8f8f2>dest</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>dstWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>dstHeight</color><color=#f8f8f2>,</color> <color=#f8f8f2>getResultBufferedImageType</color><color=#f8f8f2>(</color><color=#f8f8f2>srcImg</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>scale</color><color=#f8f8f2>(</color><color=#f8f8f2>srcImg</color><color=#f8f8f2>,</color> <color=#f8f8f2>workPixelsCopy</color><color=#f8f8f2>,</color> <color=#f8f8f2>out</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>out</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>SubSamplingData</color> <color=#a6e22e>createSubSampling</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>srcSize</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>dstSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>scale</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>dstSize</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>srcSize</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>arrN</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>dstSize</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>numContributors</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>arrWeight</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>arrPixel</color><color=#f8f8f2>;</color>

        <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>fwidth</color> <color=#f92672>=</color> <color=#f8f8f2>filter</color><color=#f8f8f2>.</color><color=#a6e22e>getSamplingRadius</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>scale</color> <color=#f92672><</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>fwidth</color> <color=#f92672>/</color> <color=#f8f8f2>scale</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>numContributors</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#ae81ff>2.0f</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color> <color=#75715e>// Heinz: added 1 to be save with the ceilling</color>
            <color=#f8f8f2>arrWeight</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>float</color><color=#f92672>[</color><color=#f8f8f2>dstSize</color> <color=#f92672>*</color> <color=#f8f8f2>numContributors</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>arrPixel</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>dstSize</color> <color=#f92672>*</color> <color=#f8f8f2>numContributors</color><color=#f92672>]</color><color=#f8f8f2>;</color>

            <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>fNormFac</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>1f</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>ceil</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>fwidth</color><color=#f8f8f2>));</color>
            <color=#75715e>//</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>dstSize</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>subindex</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>*</color> <color=#f8f8f2>numContributors</color><color=#f8f8f2>;</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>center</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>/</color> <color=#f8f8f2>scale</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>left</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>floor</color><color=#f8f8f2>(</color><color=#f8f8f2>center</color> <color=#f92672>-</color> <color=#f8f8f2>width</color><color=#f8f8f2>);</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>right</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>ceil</color><color=#f8f8f2>(</color><color=#f8f8f2>center</color> <color=#f92672>+</color> <color=#f8f8f2>width</color><color=#f8f8f2>);</color>

                <color=#66d9ef>assert</color> <color=#f8f8f2>right</color> <color=#f92672>-</color> <color=#f8f8f2>left</color> <color=#f92672><=</color> <color=#f8f8f2>numContributors</color><color=#f8f8f2>;</color>

                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>left</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><=</color> <color=#f8f8f2>right</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>float</color> <color=#f8f8f2>weight</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>weight</color> <color=#f92672>=</color> <color=#f8f8f2>filter</color><color=#f8f8f2>.</color><color=#a6e22e>apply</color><color=#f8f8f2>((</color><color=#f8f8f2>center</color> <color=#f92672>-</color> <color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>fNormFac</color><color=#f8f8f2>);</color>

                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>weight</color> <color=#f92672>==</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>j</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672>>=</color> <color=#f8f8f2>srcSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>srcSize</color> <color=#f92672>-</color> <color=#f8f8f2>j</color> <color=#f92672>+</color> <color=#f8f8f2>srcSize</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>j</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#f8f8f2>arrN</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>arrN</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]++</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>n</color> <color=#f92672>>=</color> <color=#f8f8f2>srcSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>weight</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color> <color=#75715e>// Flag that cell should not be used</color>
                    <color=#f8f8f2>}</color>
                    <color=#f8f8f2>arrPixel</color><color=#f92672>[</color><color=#f8f8f2>subindex</color> <color=#f92672>+</color> <color=#f8f8f2>k</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>arrWeight</color><color=#f92672>[</color><color=#f8f8f2>subindex</color> <color=#f92672>+</color> <color=#f8f8f2>k</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>weight</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#75715e>// normalize the filter's weight's so the sum equals to 1.0, very important for avoiding box</color>
                <color=#75715e>// type of artifacts</color>
                <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>max</color> <color=#f92672>=</color> <color=#f8f8f2>arrN</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>tot</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>k</color> <color=#f92672><</color> <color=#f8f8f2>max</color><color=#f8f8f2>;</color> <color=#f8f8f2>k</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>tot</color> <color=#f92672>+=</color> <color=#f8f8f2>arrWeight</color><color=#f92672>[</color><color=#f8f8f2>subindex</color> <color=#f92672>+</color> <color=#f8f8f2>k</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tot</color> <color=#f92672>!=</color> <color=#ae81ff>0f</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color> <color=#75715e>// 0 should never happen except bug in filter</color>
                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>k</color> <color=#f92672><</color> <color=#f8f8f2>max</color><color=#f8f8f2>;</color> <color=#f8f8f2>k</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>arrWeight</color><color=#f92672>[</color><color=#f8f8f2>subindex</color> <color=#f92672>+</color> <color=#f8f8f2>k</color><color=#f92672>]</color> <color=#f92672>/=</color> <color=#f8f8f2>tot</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color>
        <color=#75715e>// super-sampling</color>
        <color=#75715e>// Scales from smaller to bigger height</color>
        <color=#f8f8f2>{</color>
            <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>fwidth</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>numContributors</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>fwidth</color> <color=#f92672>*</color> <color=#ae81ff>2.0f</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>arrWeight</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>float</color><color=#f92672>[</color><color=#f8f8f2>dstSize</color> <color=#f92672>*</color> <color=#f8f8f2>numContributors</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>arrPixel</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>dstSize</color> <color=#f92672>*</color> <color=#f8f8f2>numContributors</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#75715e>//</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>dstSize</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>subindex</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>*</color> <color=#f8f8f2>numContributors</color><color=#f8f8f2>;</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>center</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>/</color> <color=#f8f8f2>scale</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>left</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>floor</color><color=#f8f8f2>(</color><color=#f8f8f2>center</color> <color=#f92672>-</color> <color=#f8f8f2>fwidth</color><color=#f8f8f2>);</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>right</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>ceil</color><color=#f8f8f2>(</color><color=#f8f8f2>center</color> <color=#f92672>+</color> <color=#f8f8f2>fwidth</color><color=#f8f8f2>);</color>

                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>left</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><=</color> <color=#f8f8f2>right</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>float</color> <color=#f8f8f2>weight</color> <color=#f92672>=</color> <color=#f8f8f2>filter</color><color=#f8f8f2>.</color><color=#a6e22e>apply</color><color=#f8f8f2>(</color><color=#f8f8f2>center</color> <color=#f92672>-</color> <color=#f8f8f2>j</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>weight</color> <color=#f92672>==</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>j</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672>>=</color> <color=#f8f8f2>srcSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>srcSize</color> <color=#f92672>-</color> <color=#f8f8f2>j</color> <color=#f92672>+</color> <color=#f8f8f2>srcSize</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>j</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#f8f8f2>arrN</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>arrN</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]++</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>n</color> <color=#f92672>>=</color> <color=#f8f8f2>srcSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>weight</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color> <color=#75715e>// Flag that cell should not be used</color>
                    <color=#f8f8f2>}</color>
                    <color=#f8f8f2>arrPixel</color><color=#f92672>[</color><color=#f8f8f2>subindex</color> <color=#f92672>+</color> <color=#f8f8f2>k</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>arrWeight</color><color=#f92672>[</color><color=#f8f8f2>subindex</color> <color=#f92672>+</color> <color=#f8f8f2>k</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>weight</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#75715e>// normalize the filter's weight's so the sum equals to 1.0, very important for avoiding box</color>
                <color=#75715e>// type of artifacts</color>
                <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>max</color> <color=#f92672>=</color> <color=#f8f8f2>arrN</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>tot</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>k</color> <color=#f92672><</color> <color=#f8f8f2>max</color><color=#f8f8f2>;</color> <color=#f8f8f2>k</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>tot</color> <color=#f92672>+=</color> <color=#f8f8f2>arrWeight</color><color=#f92672>[</color><color=#f8f8f2>subindex</color> <color=#f92672>+</color> <color=#f8f8f2>k</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>assert</color> <color=#f8f8f2>tot</color> <color=#f92672>!=</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#e6db74>"should never happen except bug in filter"</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tot</color> <color=#f92672>!=</color> <color=#ae81ff>0f</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>k</color> <color=#f92672><</color> <color=#f8f8f2>max</color><color=#f8f8f2>;</color> <color=#f8f8f2>k</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>arrWeight</color><color=#f92672>[</color><color=#f8f8f2>subindex</color> <color=#f92672>+</color> <color=#f8f8f2>k</color><color=#f92672>]</color> <color=#f92672>/=</color> <color=#f8f8f2>tot</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>SubSamplingData</color><color=#f8f8f2>(</color><color=#f8f8f2>arrN</color><color=#f8f8f2>,</color> <color=#f8f8f2>arrPixel</color><color=#f8f8f2>,</color> <color=#f8f8f2>arrWeight</color><color=#f8f8f2>,</color> <color=#f8f8f2>numContributors</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Pseudocode: for each for in destination image check that all dependent rows in source image is</color>
<color=#75715e>     * scaled horizontally and stored in work pixels if not then scale missing rows horizontal and</color>
<color=#75715e>     * store them in work pixels Scale the destination row vertically and store the result in out</color>
<color=#75715e>     * pixels</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>It may seem counter intuitive that the vertical scale is done for each row. The simple</color>
<color=#75715e>     * scaling algorithm would first scale the image horizontal (a row at a time) into the temp image,</color>
<color=#75715e>     * and then scale the temp image vertically (a column at a time) into the final image. The</color>
<color=#75715e>     * disadvantage of the simple approach is that you need a large temporary image.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>I have avoided this by doing the vertically scale a row at a time. Scaling a single row</color>
<color=#75715e>     * vertically, needs the horizontally scaled rows that the scaling depends on. These dependencies</color>
<color=#75715e>     * will be lazy initialized. Since we know the height of the 'window' we work on (the maximum</color>
<color=#75715e>     * number of source rows needed to calculate a dest row), the work pixels only needs to have the</color>
<color=#75715e>     * same height.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>Instead of creating a temporary image with a height different from the source image's</color>
<color=#75715e>     * height, I created a double array where inner array is repeated (so if the window height is 3</color>
<color=#75715e>     * the first and the forth row is the same instance). This keeps algorithm a bit simpler (the</color>
<color=#75715e>     * alternative would be to maintain a mapping between)</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param srcImg     source image</color>
<color=#75715e>     * @param workPixels temporary image</color>
<color=#75715e>     * @param outImage   result image</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>scale</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>srcImg</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[][]</color> <color=#f8f8f2>workPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>outImage</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>tempPixels</color> <color=#f92672>=</color>
                <color=#66d9ef>new</color> <color=#66d9ef>int</color>
                        <color=#f92672>[</color><color=#f8f8f2>srcWidth</color><color=#f92672>]</color><color=#f8f8f2>;</color> <color=#75715e>// Used if we work on int based bitmaps, later used to keep channel values</color>
        <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>srcPixels</color> <color=#f92672>=</color>
                <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>srcWidth</color> <color=#f92672>*</color> <color=#f8f8f2>nrChannels</color><color=#f92672>]</color><color=#f8f8f2>;</color> <color=#75715e>// create reusable row to minimize memory overhead</color>

        <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>dstPixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>dstWidth</color> <color=#f92672>*</color> <color=#f8f8f2>nrChannels</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#66d9ef>final</color> <color=#f8f8f2>BitSet</color> <color=#f8f8f2>isRowInitialized</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BitSet</color><color=#f8f8f2>(</color><color=#f8f8f2>srcHeight</color><color=#f8f8f2>);</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>dstY</color> <color=#f92672>=</color> <color=#f8f8f2>dstHeight</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>dstY</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>dstY</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// vertical scaling</color>
            <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>yTimesNumContributors</color> <color=#f92672>=</color> <color=#f8f8f2>dstY</color> <color=#f92672>*</color> <color=#f8f8f2>verticalSubsamplingData</color><color=#f8f8f2>.</color><color=#a6e22e>numContributors</color><color=#f8f8f2>;</color>
            <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>max</color> <color=#f92672>=</color> <color=#f8f8f2>verticalSubsamplingData</color><color=#f8f8f2>.</color><color=#a6e22e>arrN</color><color=#f92672>[</color><color=#f8f8f2>dstY</color><color=#f92672>]</color><color=#f8f8f2>;</color>

            <color=#75715e>// check that the horizontal rows are scaled horizontally</color>
            <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>yTimesNumContributors</color><color=#f8f8f2>;</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>max</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>valueLocation</color> <color=#f92672>=</color> <color=#f8f8f2>verticalSubsamplingData</color><color=#f8f8f2>.</color><color=#a6e22e>arrPixel</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>index</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isRowInitialized</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>valueLocation</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                        <color=#75715e>// do horizontal scaling</color>
                        <color=#f8f8f2>isRowInitialized</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>valueLocation</color><color=#f8f8f2>);</color>

                        <color=#75715e>// scale row horizontally</color>
                        <color=#f8f8f2>ImageUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getPixelsBGR</color><color=#f8f8f2>(</color><color=#f8f8f2>srcImg</color><color=#f8f8f2>,</color> <color=#f8f8f2>valueLocation</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>tempPixels</color><color=#f8f8f2>);</color>

                        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>channel</color> <color=#f92672>=</color> <color=#f8f8f2>nrChannels</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>channel</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>channel</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#75715e>// reuse tempPixels as sample value</color>
                            <color=#f8f8f2>getSamplesHorizontal</color><color=#f8f8f2>(</color><color=#f8f8f2>srcPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>tempPixels</color><color=#f8f8f2>);</color>

                            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>dstWidth</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                <color=#66d9ef>int</color> <color=#f8f8f2>sampleLocation</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>*</color> <color=#f8f8f2>nrChannels</color><color=#f8f8f2>;</color>
                                <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>horizontalMax</color> <color=#f92672>=</color> <color=#f8f8f2>horizontalSubsamplingData</color><color=#f8f8f2>.</color><color=#a6e22e>arrN</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>

                                <color=#66d9ef>float</color> <color=#f8f8f2>sample</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
                                <color=#66d9ef>int</color> <color=#f8f8f2>horizontalIndex</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>*</color> <color=#f8f8f2>horizontalSubsamplingData</color><color=#f8f8f2>.</color><color=#a6e22e>numContributors</color><color=#f8f8f2>;</color>
                                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>jj</color> <color=#f92672>=</color> <color=#f8f8f2>horizontalMax</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>jj</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>jj</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

                                    <color=#f8f8f2>sample</color> <color=#f92672>+=</color>
                                            <color=#f8f8f2>tempPixels</color><color=#f92672>[</color><color=#f8f8f2>horizontalSubsamplingData</color><color=#f8f8f2>.</color><color=#a6e22e>arrPixel</color><color=#f92672>[</color><color=#f8f8f2>horizontalIndex</color><color=#f92672>]]</color>
                                                    <color=#f92672>*</color> <color=#f8f8f2>horizontalSubsamplingData</color><color=#f8f8f2>.</color><color=#a6e22e>arrWeight</color><color=#f92672>[</color><color=#f8f8f2>horizontalIndex</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                                    <color=#f8f8f2>horizontalIndex</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                                <color=#f8f8f2>}</color>

                                <color=#f8f8f2>putSample</color><color=#f8f8f2>(</color><color=#f8f8f2>workPixels</color><color=#f92672>[</color><color=#f8f8f2>valueLocation</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>sample</color><color=#f8f8f2>,</color> <color=#f8f8f2>sampleLocation</color><color=#f8f8f2>);</color>
                            <color=#f8f8f2>}</color>
                        <color=#f8f8f2>}</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>dstWidth</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>xLocation</color> <color=#f92672>=</color> <color=#f8f8f2>x</color> <color=#f92672>*</color> <color=#f8f8f2>nrChannels</color><color=#f8f8f2>;</color>
                <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>sampleLocation</color> <color=#f92672>=</color> <color=#f8f8f2>x</color> <color=#f92672>*</color> <color=#f8f8f2>nrChannels</color><color=#f8f8f2>;</color>

                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>channel</color> <color=#f92672>=</color> <color=#f8f8f2>nrChannels</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>channel</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>channel</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>float</color> <color=#f8f8f2>sample</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>yTimesNumContributors</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>max</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>valueLocation</color> <color=#f92672>=</color> <color=#f8f8f2>verticalSubsamplingData</color><color=#f8f8f2>.</color><color=#a6e22e>arrPixel</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>sample</color> <color=#f92672>+=</color>
                                <color=#f8f8f2>(</color><color=#f8f8f2>workPixels</color><color=#f92672>[</color><color=#f8f8f2>valueLocation</color><color=#f92672>][</color><color=#f8f8f2>xLocation</color> <color=#f92672>+</color> <color=#f8f8f2>channel</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color>
                                        <color=#f92672>*</color> <color=#f8f8f2>verticalSubsamplingData</color><color=#f8f8f2>.</color><color=#a6e22e>arrWeight</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color><color=#f8f8f2>;</color>

                        <color=#f8f8f2>index</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>

                    <color=#f8f8f2>putSample</color><color=#f8f8f2>(</color><color=#f8f8f2>dstPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>sample</color><color=#f8f8f2>,</color> <color=#f8f8f2>sampleLocation</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>ImageUtils</color><color=#f8f8f2>.</color><color=#a6e22e>setBGRPixels</color><color=#f8f8f2>(</color><color=#f8f8f2>dstPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>outImage</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>dstY</color><color=#f8f8f2>,</color> <color=#f8f8f2>dstWidth</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>setProgress</color><color=#f8f8f2>(</color><color=#f8f8f2>processedItems</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>totalItems</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>putSample</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>sample</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>location</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>sample</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sample</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>></color> <color=#f8f8f2>MAX_CHANNEL_VALUE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>MAX_CHANNEL_VALUE</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>image</color><color=#f92672>[</color><color=#f8f8f2>location</color> <color=#f92672>+</color> <color=#f8f8f2>channel</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>getSamplesHorizontal</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>dest</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>xDest</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>channel</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672>+=</color> <color=#f8f8f2>nrChannels</color><color=#f8f8f2>,</color> <color=#f8f8f2>xDest</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>dest</color><color=#f92672>[</color><color=#f8f8f2>xDest</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f92672>[</color><color=#f8f8f2>x</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setProgress</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>zeroBasedIndex</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>totalItems</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>fireProgressChanged</color><color=#f8f8f2>(</color><color=#f8f8f2>zeroBasedIndex</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>totalItems</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>int</color> <color=#a6e22e>getResultBufferedImageType</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>srcImg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>nrChannels</color> <color=#f92672>==</color> <color=#ae81ff>3</color>
                <color=#f92672>?</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_3BYTE_BGR</color>
                <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#f8f8f2>nrChannels</color> <color=#f92672>==</color> <color=#ae81ff>4</color>
                <color=#f92672>?</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_4BYTE_ABGR</color>
                <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#f8f8f2>srcImg</color><color=#f8f8f2>.</color><color=#a6e22e>getSampleModel</color><color=#f8f8f2>().</color><color=#a6e22e>getDataType</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_USHORT</color>
                <color=#f92672>?</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_USHORT_GRAY</color>
                <color=#f8f8f2>:</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BYTE_GRAY</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>