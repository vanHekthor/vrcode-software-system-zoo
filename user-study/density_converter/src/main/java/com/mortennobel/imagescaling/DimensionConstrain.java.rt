<color=#75715e>/*</color>
<color=#75715e> * Copyright 2013, Morten Nobel-Joergensen</color>
<color=#75715e> *</color>
<color=#75715e> * License: The BSD 3-Clause License</color>
<color=#75715e> * http://opensource.org/licenses/BSD-3-Clause</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.mortennobel.imagescaling</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * This class let you create dimension constrains based on a actual image.</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>DimensionConstrain</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>Dimension</color> <color=#f8f8f2>dimension</color><color=#f8f8f2>;</color>

    <color=#66d9ef>protected</color> <color=#a6e22e>DimensionConstrain</color><color=#f8f8f2>(</color><color=#f8f8f2>Dimension</color> <color=#f8f8f2>dimension</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dimension</color> <color=#f92672>=</color> <color=#f8f8f2>dimension</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Will always return a dimension with positive width and height;</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the dimension of the scaled image</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Dimension</color> <color=#a6e22e>getDimension</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dimension</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Used when the destination size is fixed. This may not keep the image aspect radio</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param width  destination dimension width</color>
<color=#75715e>     * @param height destination dimension height</color>
<color=#75715e>     * @return destination dimension (width x height)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>DimensionConstrain</color> <color=#a6e22e>createAbsolutionDimension</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>width</color> <color=#f92672>></color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>height</color> <color=#f92672>></color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#e6db74>"Dimension must be a positive integer"</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>DimensionConstrain</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Dimension</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Used when the destination size is relative to the source. This keeps the image aspect radio</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param fraction resize fraction (must be a positive number)</color>
<color=#75715e>     * @return the new dimension (the input dimension times the fraction)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>DimensionConstrain</color> <color=#a6e22e>createRelativeDimension</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>fraction</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>createRelativeDimension</color><color=#f8f8f2>(</color><color=#f8f8f2>fraction</color><color=#f8f8f2>,</color> <color=#f8f8f2>fraction</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Used when the destination size is relative to the source. This keeps the image aspect radio if</color>
<color=#75715e>     * fractionWidth equals fractionHeight</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param</color>
<color=#75715e>     * @return</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>DimensionConstrain</color> <color=#a6e22e>createRelativeDimension</color><color=#f8f8f2>(</color>
            <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>fractionWidth</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>fractionHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>fractionHeight</color> <color=#f92672>></color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>fractionWidth</color> <color=#f92672>></color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#e6db74>"Fractions must be larger than 0.0"</color><color=#f8f8f2>;</color>
<color=#75715e>//    return new DimensionConstrain() {</color>
<color=#75715e>//      public Dimension getDimension(Dimension dimension) {</color>
<color=#75715e>//        int width = Math.max(1, Math.round(fractionWidth * dimension.width));</color>
<color=#75715e>//        int height = Math.max(1, Math.round(fractionHeight * dimension.height));</color>
<color=#75715e>//        return new Dimension(width, height);</color>
<color=#75715e>//      }</color>
<color=#75715e>//    };</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Forces the image to keep radio and be keeped within the width and height</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param width</color>
<color=#75715e>     * @param height</color>
<color=#75715e>     * @return</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>DimensionConstrain</color> <color=#a6e22e>createMaxDimension</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>createMaxDimension</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Forces the image to keep radio and be keeped within the width and height.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param width</color>
<color=#75715e>     * @param height</color>
<color=#75715e>     * @param neverEnlargeImage if true only a downscale will occour</color>
<color=#75715e>     * @return</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>DimensionConstrain</color> <color=#a6e22e>createMaxDimension</color><color=#f8f8f2>(</color>
            <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>neverEnlargeImage</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>width</color> <color=#f92672>></color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>height</color> <color=#f92672>></color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#e6db74>"Dimension must be larger that 0"</color><color=#f8f8f2>;</color>
        <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>scaleFactor</color> <color=#f92672>=</color> <color=#f8f8f2>width</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color>
<color=#75715e>//    return new DimensionConstrain() {</color>
<color=#75715e>//      public Dimension getDimension(Dimension dimension) {</color>
<color=#75715e>//        double srcScaleFactor = dimension.width / (double) dimension.height;</color>
<color=#75715e>//        double scale;</color>
<color=#75715e>//        if (srcScaleFactor > scaleFactor) {</color>
<color=#75715e>//          scale = width / (double) dimension.width;</color>
<color=#75715e>//        } else {</color>
<color=#75715e>//          scale = height / (double) dimension.height;</color>
<color=#75715e>//        }</color>
<color=#75715e>//        if (neverEnlargeImage) {</color>
<color=#75715e>//          scale = Math.min(scale, 1);</color>
<color=#75715e>//        }</color>
<color=#75715e>//        int dstWidth = (int) Math.round(dimension.width * scale);</color>
<color=#75715e>//        int dstHeight = (int) Math.round(dimension.height * scale);</color>
<color=#75715e>//        return new Dimension(dstWidth, dstHeight);</color>
<color=#75715e>//      }</color>
<color=#75715e>//    };</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Forces the image to keep radio and be keeped within the width and height. Width and height are</color>
<color=#75715e>     * defined (length1 x length2) or (length2 x length1).</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>This is usefull is the scaling allow a certain format (such as 16x9") but allow the</color>
<color=#75715e>     * dimension to be rotated 90 degrees (so also 9x16" is allowed).</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param length1</color>
<color=#75715e>     * @param length2</color>
<color=#75715e>     * @return</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>DimensionConstrain</color> <color=#a6e22e>createMaxDimensionNoOrientation</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>length1</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>length2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>createMaxDimensionNoOrientation</color><color=#f8f8f2>(</color><color=#f8f8f2>length1</color><color=#f8f8f2>,</color> <color=#f8f8f2>length2</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Forces the image to keep radio and be keeped within the width and height. Width and height are</color>
<color=#75715e>     * defined (length1 x length2) or (length2 x length1).</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>This is usefull is the scaling allow a certain format (such as 16x9") but allow the</color>
<color=#75715e>     * dimension to be rotated 90 degrees (so also 9x16" is allowed).</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param length1</color>
<color=#75715e>     * @param length2</color>
<color=#75715e>     * @param neverEnlargeImage if true only a downscale will occour</color>
<color=#75715e>     * @return</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>DimensionConstrain</color> <color=#a6e22e>createMaxDimensionNoOrientation</color><color=#f8f8f2>(</color>
            <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>length1</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>length2</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>neverEnlargeImage</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>length1</color> <color=#f92672>></color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>length2</color> <color=#f92672>></color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#e6db74>"Dimension must be larger that 0"</color><color=#f8f8f2>;</color>
        <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>scaleFactor</color> <color=#f92672>=</color> <color=#f8f8f2>length1</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>length2</color><color=#f8f8f2>;</color>
<color=#75715e>//    return new DimensionConstrain() {</color>
<color=#75715e>//      public Dimension getDimension(Dimension dimension) {</color>
<color=#75715e>//        double srcScaleFactor = dimension.width / (double) dimension.height;</color>
<color=#75715e>//        int width;</color>
<color=#75715e>//        int height;</color>
<color=#75715e>//        // swap length1 and length2</color>
<color=#75715e>//        if (srcScaleFactor > scaleFactor) {</color>
<color=#75715e>//          width = length1;</color>
<color=#75715e>//          height = length2;</color>
<color=#75715e>//        } else {</color>
<color=#75715e>//          width = length2;</color>
<color=#75715e>//          height = length1;</color>
<color=#75715e>//        }</color>
<color=#75715e>//</color>
<color=#75715e>//        final double scaleFactor = width / (double) height;</color>
<color=#75715e>//        double scale;</color>
<color=#75715e>//        if (srcScaleFactor > scaleFactor) {</color>
<color=#75715e>//          scale = width / (double) dimension.width;</color>
<color=#75715e>//        } else {</color>
<color=#75715e>//          scale = height / (double) dimension.height;</color>
<color=#75715e>//        }</color>
<color=#75715e>//        if (neverEnlargeImage) {</color>
<color=#75715e>//          scale = Math.min(scale, 1);</color>
<color=#75715e>//        }</color>
<color=#75715e>//        int dstWidth = (int) Math.round(dimension.width * scale);</color>
<color=#75715e>//        int dstHeight = (int) Math.round(dimension.height * scale);</color>
<color=#75715e>//        return new Dimension(dstWidth, dstHeight);</color>
<color=#75715e>//      }</color>
<color=#75715e>//    };</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>