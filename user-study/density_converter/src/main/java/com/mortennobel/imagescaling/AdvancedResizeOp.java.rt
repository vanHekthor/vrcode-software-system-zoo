<color=#75715e>/*</color>
<color=#75715e> * Copyright 2013, Morten Nobel-Joergensen</color>
<color=#75715e> *</color>
<color=#75715e> * License: The BSD 3-Clause License</color>
<color=#75715e> * http://opensource.org/licenses/BSD-3-Clause</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.mortennobel.imagescaling</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.jhlabs.image.UnsharpFilter</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.Point2D</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.Rectangle2D</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImageOp</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.ColorModel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.ArrayList</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.List</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * @author Morten Nobel-Joergensen</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>AdvancedResizeOp</color> <color=#66d9ef>implements</color> <color=#f8f8f2>BufferedImageOp</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DimensionConstrain</color> <color=#f8f8f2>dimensionConstrain</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>ProgressListener</color><color=#f92672>></color> <color=#f8f8f2>listeners</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>ProgressListener</color><color=#f92672>></color><color=#f8f8f2>();</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>UnsharpenMask</color> <color=#f8f8f2>unsharpenMask</color> <color=#f92672>=</color> <color=#f8f8f2>UnsharpenMask</color><color=#f8f8f2>.</color><color=#a6e22e>None</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>AdvancedResizeOp</color><color=#f8f8f2>(</color><color=#f8f8f2>DimensionConstrain</color> <color=#f8f8f2>dimensionConstrain</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dimensionConstrain</color> <color=#f92672>=</color> <color=#f8f8f2>dimensionConstrain</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>UnsharpenMask</color> <color=#a6e22e>getUnsharpenMask</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>unsharpenMask</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setUnsharpenMask</color><color=#f8f8f2>(</color><color=#f8f8f2>UnsharpenMask</color> <color=#f8f8f2>unsharpenMask</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>unsharpenMask</color> <color=#f92672>=</color> <color=#f8f8f2>unsharpenMask</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>fireProgressChanged</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>fraction</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>ProgressListener</color> <color=#f8f8f2>progressListener</color> <color=#f8f8f2>:</color> <color=#f8f8f2>listeners</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>progressListener</color><color=#f8f8f2>.</color><color=#a6e22e>notifyProgress</color><color=#f8f8f2>(</color><color=#f8f8f2>fraction</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>addProgressListener</color><color=#f8f8f2>(</color><color=#f8f8f2>ProgressListener</color> <color=#f8f8f2>progressListener</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>listeners</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>progressListener</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>removeProgressListener</color><color=#f8f8f2>(</color><color=#f8f8f2>ProgressListener</color> <color=#f8f8f2>progressListener</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>listeners</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>progressListener</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dest</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Dimension</color> <color=#f8f8f2>dstDimension</color> <color=#f92672>=</color>
                <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dimensionConstrain</color><color=#f8f8f2>.</color><color=#a6e22e>getDimension</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>dstWidth</color> <color=#f92672>=</color> <color=#f8f8f2>dstDimension</color><color=#f8f8f2>.</color><color=#a6e22e>width</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>dstHeight</color> <color=#f92672>=</color> <color=#f8f8f2>dstDimension</color><color=#f8f8f2>.</color><color=#a6e22e>height</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>bufferedImage</color> <color=#f92672>=</color> <color=#f8f8f2>doFilter</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>dest</color><color=#f8f8f2>,</color> <color=#f8f8f2>dstWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>dstHeight</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>unsharpenMask</color> <color=#f92672>!=</color> <color=#f8f8f2>UnsharpenMask</color><color=#f8f8f2>.</color><color=#a6e22e>None</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>UnsharpFilter</color> <color=#f8f8f2>unsharpFilter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsharpFilter</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>unsharpFilter</color><color=#f8f8f2>.</color><color=#a6e22e>setRadius</color><color=#f8f8f2>(</color><color=#ae81ff>2f</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>unsharpFilter</color><color=#f8f8f2>.</color><color=#a6e22e>setAmount</color><color=#f8f8f2>(</color><color=#f8f8f2>unsharpenMask</color><color=#f8f8f2>.</color><color=#a6e22e>factor</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>unsharpFilter</color><color=#f8f8f2>.</color><color=#a6e22e>setThreshold</color><color=#f8f8f2>(</color><color=#ae81ff>10</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>unsharpFilter</color><color=#f8f8f2>.</color><color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>bufferedImage</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>bufferedImage</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>doFilter</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dest</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>dstWidth</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>dstHeight</color><color=#f8f8f2>);</color>

    <color=#75715e>/**</color>
<color=#75715e>     * {@inheritDoc}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>Rectangle2D</color> <color=#a6e22e>getBounds2D</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rectangle</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * {@inheritDoc}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>destCM</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>destCM</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>destCM</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getColorModel</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>destCM</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>destCM</color><color=#f8f8f2>.</color><color=#a6e22e>createCompatibleWritableRaster</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>()),</color>
                <color=#f8f8f2>destCM</color><color=#f8f8f2>.</color><color=#a6e22e>isAlphaPremultiplied</color><color=#f8f8f2>(),</color>
                <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * {@inheritDoc}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>Point2D</color> <color=#a6e22e>getPoint2D</color><color=#f8f8f2>(</color><color=#f8f8f2>Point2D</color> <color=#f8f8f2>srcPt</color><color=#f8f8f2>,</color> <color=#f8f8f2>Point2D</color> <color=#f8f8f2>dstPt</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>Point2D</color><color=#f8f8f2>)</color> <color=#f8f8f2>srcPt</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * {@inheritDoc}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>RenderingHints</color> <color=#a6e22e>getRenderingHints</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>enum</color> <color=#f8f8f2>UnsharpenMask</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>None</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>),</color>
        <color=#f8f8f2>Soft</color><color=#f8f8f2>(</color><color=#ae81ff>0.15f</color><color=#f8f8f2>),</color>
        <color=#f8f8f2>Normal</color><color=#f8f8f2>(</color><color=#ae81ff>0.3f</color><color=#f8f8f2>),</color>
        <color=#f8f8f2>VerySharp</color><color=#f8f8f2>(</color><color=#ae81ff>0.45f</color><color=#f8f8f2>),</color>
        <color=#f8f8f2>Oversharpened</color><color=#f8f8f2>(</color><color=#ae81ff>0.60f</color><color=#f8f8f2>);</color>
        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>factor</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>UnsharpenMask</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>factor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>factor</color> <color=#f92672>=</color> <color=#f8f8f2>factor</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>