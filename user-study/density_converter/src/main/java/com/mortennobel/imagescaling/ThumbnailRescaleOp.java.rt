<color=#75715e>/*</color>
<color=#75715e> * Copyright 2013, Morten Nobel-Joergensen</color>
<color=#75715e> *</color>
<color=#75715e> * License: The BSD 3-Clause License</color>
<color=#75715e> * http://opensource.org/licenses/BSD-3-Clause</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.mortennobel.imagescaling</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * The idea of this class is to provide fast (and inaccurate) rescaling method suitable for creating</color>
<color=#75715e> * thumbnails.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that the algorithm assumes that the source image is significant larger than the</color>
<color=#75715e> * destination image</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ThumbnailRescaleOp</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AdvancedResizeOp</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>enum</color> <color=#f8f8f2>Sampling</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>S_1SAMPLE</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#66d9ef>float</color><color=#f92672>[][]</color><color=#f8f8f2>{{</color><color=#ae81ff>0.5f</color><color=#f8f8f2>,</color> <color=#ae81ff>0.5f</color><color=#f8f8f2>}}),</color>
        <color=#f8f8f2>S_2X2_RGSS</color><color=#f8f8f2>(</color>
                <color=#66d9ef>new</color> <color=#66d9ef>float</color><color=#f92672>[][]</color><color=#f8f8f2>{</color>
                        <color=#f8f8f2>{</color><color=#ae81ff>0.6f</color><color=#f8f8f2>,</color> <color=#ae81ff>0.2f</color><color=#f8f8f2>},</color>
                        <color=#f8f8f2>{</color><color=#ae81ff>0.2f</color><color=#f8f8f2>,</color> <color=#ae81ff>0.4f</color><color=#f8f8f2>},</color>
                        <color=#f8f8f2>{</color><color=#ae81ff>0.8f</color><color=#f8f8f2>,</color> <color=#ae81ff>0.6f</color><color=#f8f8f2>},</color>
                        <color=#f8f8f2>{</color><color=#ae81ff>0.4f</color><color=#f8f8f2>,</color> <color=#ae81ff>0.8f</color><color=#f8f8f2>},</color>
                <color=#f8f8f2>}),</color>
        <color=#f8f8f2>S_8ROCKS</color><color=#f8f8f2>(</color>
                <color=#66d9ef>new</color> <color=#66d9ef>float</color><color=#f92672>[][]</color><color=#f8f8f2>{</color>
                        <color=#f8f8f2>{</color><color=#ae81ff>0</color> <color=#f92672>/</color> <color=#ae81ff>6f</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color> <color=#f92672>/</color> <color=#ae81ff>6f</color><color=#f8f8f2>},</color>
                        <color=#f8f8f2>{</color><color=#ae81ff>2</color> <color=#f92672>/</color> <color=#ae81ff>6f</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color> <color=#f92672>/</color> <color=#ae81ff>6f</color><color=#f8f8f2>},</color>
                        <color=#f8f8f2>{</color><color=#ae81ff>4</color> <color=#f92672>/</color> <color=#ae81ff>6f</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color> <color=#f92672>/</color> <color=#ae81ff>6f</color><color=#f8f8f2>},</color>
                        <color=#f8f8f2>{</color><color=#ae81ff>5</color> <color=#f92672>/</color> <color=#ae81ff>6f</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color> <color=#f92672>/</color> <color=#ae81ff>6f</color><color=#f8f8f2>},</color>
                        <color=#f8f8f2>{</color><color=#ae81ff>6</color> <color=#f92672>/</color> <color=#ae81ff>6f</color><color=#f8f8f2>,</color> <color=#ae81ff>4</color> <color=#f92672>/</color> <color=#ae81ff>6f</color><color=#f8f8f2>},</color>
                        <color=#f8f8f2>{</color><color=#ae81ff>4</color> <color=#f92672>/</color> <color=#ae81ff>6f</color><color=#f8f8f2>,</color> <color=#ae81ff>5</color> <color=#f92672>/</color> <color=#ae81ff>6f</color><color=#f8f8f2>},</color>
                        <color=#f8f8f2>{</color><color=#ae81ff>2</color> <color=#f92672>/</color> <color=#ae81ff>6f</color><color=#f8f8f2>,</color> <color=#ae81ff>6</color> <color=#f92672>/</color> <color=#ae81ff>6f</color><color=#f8f8f2>},</color>
                        <color=#f8f8f2>{</color><color=#ae81ff>1</color> <color=#f92672>/</color> <color=#ae81ff>6f</color><color=#f8f8f2>,</color> <color=#ae81ff>4</color> <color=#f92672>/</color> <color=#ae81ff>6f</color><color=#f8f8f2>},</color>
                <color=#f8f8f2>});</color>
        <color=#66d9ef>final</color> <color=#66d9ef>float</color><color=#f92672>[][]</color> <color=#f8f8f2>points</color><color=#f8f8f2>;</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>rightshift</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>Sampling</color><color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f92672>[][]</color> <color=#f8f8f2>points</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>points</color> <color=#f92672>=</color> <color=#f8f8f2>points</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>rightshift</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>numberOfTrailingZeros</color><color=#f8f8f2>(</color><color=#f8f8f2>points</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>Sampling</color> <color=#f8f8f2>sampling</color> <color=#f92672>=</color> <color=#f8f8f2>Sampling</color><color=#f8f8f2>.</color><color=#a6e22e>S_8ROCKS</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ThumbnailRescaleOp</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>destWidth</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>destHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>DimensionConstrain</color><color=#f8f8f2>.</color><color=#a6e22e>createAbsolutionDimension</color><color=#f8f8f2>(</color><color=#f8f8f2>destWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>destHeight</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ThumbnailRescaleOp</color><color=#f8f8f2>(</color><color=#f8f8f2>DimensionConstrain</color> <color=#f8f8f2>dimensionConstrain</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>dimensionConstrain</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>doFilter</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dest</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>dstWidth</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>dstHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>numberOfChannels</color> <color=#f92672>=</color> <color=#f8f8f2>ImageUtils</color><color=#f8f8f2>.</color><color=#a6e22e>nrChannels</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>out</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dest</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>dstWidth</color> <color=#f92672>==</color> <color=#f8f8f2>dest</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>dstHeight</color> <color=#f92672>==</color> <color=#f8f8f2>dest</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#f8f8f2>dest</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

            <color=#f8f8f2>out</color> <color=#f92672>=</color>
                    <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color>
                            <color=#f8f8f2>dstWidth</color><color=#f8f8f2>,</color>
                            <color=#f8f8f2>dstHeight</color><color=#f8f8f2>,</color>
                            <color=#f8f8f2>numberOfChannels</color> <color=#f92672>==</color> <color=#ae81ff>4</color> <color=#f92672>?</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB</color> <color=#f8f8f2>:</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_RGB</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>float</color> <color=#f8f8f2>scaleX</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>()</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>dstWidth</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>scaleY</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>()</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>dstHeight</color><color=#f8f8f2>;</color>

        <color=#66d9ef>float</color><color=#f92672>[][]</color> <color=#f8f8f2>scaledSampling</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>float</color><color=#f92672>[</color><color=#f8f8f2>sampling</color><color=#f8f8f2>.</color><color=#a6e22e>points</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>][</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>sampling</color><color=#f8f8f2>.</color><color=#a6e22e>points</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>point</color> <color=#f92672>=</color> <color=#f8f8f2>sampling</color><color=#f8f8f2>.</color><color=#a6e22e>points</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>ROUNDING_ERROR_MARGIN</color> <color=#f92672>=</color> <color=#ae81ff>0.0001f</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>scaledSampling</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>][</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>point</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>*</color> <color=#f8f8f2>scaleX</color> <color=#f92672>+</color> <color=#f8f8f2>ROUNDING_ERROR_MARGIN</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>scaledSampling</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>][</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>point</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>*</color> <color=#f8f8f2>scaleY</color> <color=#f92672>+</color> <color=#f8f8f2>ROUNDING_ERROR_MARGIN</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>maxSrcX</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>maxSrcY</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>float</color> <color=#f8f8f2>srcY</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>dstY</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>dstY</color> <color=#f92672><</color> <color=#f8f8f2>dstHeight</color><color=#f8f8f2>;</color> <color=#f8f8f2>dstY</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcY</color> <color=#f92672>+=</color> <color=#f8f8f2>scaleY</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>srcX</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>dstX</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>dstX</color> <color=#f92672><</color> <color=#f8f8f2>dstWidth</color><color=#f8f8f2>;</color> <color=#f8f8f2>dstX</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcX</color> <color=#f92672>+=</color> <color=#f8f8f2>scaleX</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>point</color> <color=#f8f8f2>:</color> <color=#f8f8f2>scaledSampling</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>srcX</color> <color=#f92672>+</color> <color=#f8f8f2>point</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>srcY</color> <color=#f92672>+</color> <color=#f8f8f2>point</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxSrcX</color><color=#f8f8f2>));</color>
                    <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxSrcY</color><color=#f8f8f2>));</color>

                    <color=#66d9ef>int</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>b</color> <color=#f92672>+=</color> <color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>rgb</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>g</color> <color=#f92672>+=</color> <color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>rgb</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>r</color> <color=#f92672>+=</color> <color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>rgb</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>a</color> <color=#f92672>+=</color> <color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>r</color> <color=#f92672>>></color> <color=#f8f8f2>sampling</color><color=#f8f8f2>.</color><color=#a6e22e>rightshift</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>g</color> <color=#f92672>>></color> <color=#f8f8f2>sampling</color><color=#f8f8f2>.</color><color=#a6e22e>rightshift</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>b</color> <color=#f92672>>></color> <color=#f8f8f2>sampling</color><color=#f8f8f2>.</color><color=#a6e22e>rightshift</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#f8f8f2>a</color> <color=#f92672>>></color> <color=#f8f8f2>sampling</color><color=#f8f8f2>.</color><color=#a6e22e>rightshift</color><color=#f8f8f2>;</color>

                <color=#66d9ef>int</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>g</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>setRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>dstX</color><color=#f8f8f2>,</color> <color=#f8f8f2>dstY</color><color=#f8f8f2>,</color> <color=#f8f8f2>rgb</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>out</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setSampling</color><color=#f8f8f2>(</color><color=#f8f8f2>Sampling</color> <color=#f8f8f2>sampling</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>sampling</color> <color=#f92672>=</color> <color=#f8f8f2>sampling</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>