<color=#75715e>/*</color>
<color=#75715e> * Copyright 2013, Morten Nobel-Joergensen</color>
<color=#75715e> *</color>
<color=#75715e> * License: The BSD 3-Clause License</color>
<color=#75715e> * http://opensource.org/licenses/BSD-3-Clause</color>
<color=#75715e> */</color>
<color=#f92672>package</color> <color=#f8f8f2>com.mortennobel.imagescaling.experimental</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.mortennobel.imagescaling.AdvancedResizeOp</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.mortennobel.imagescaling.DimensionConstrain</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * The idea of this class is to test if the Sun's implementation multistep image scaling (using</color>
<color=#75715e> * either RenderingHints.VALUE_INTERPOLATION_BICUBIC or RenderingHints.VALUE_INTERPOLATION_BILINEAR)</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ImprovedMultistepRescaleOp</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AdvancedResizeOp</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>renderingHintInterpolation</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ImprovedMultistepRescaleOp</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>dstWidth</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>dstHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>dstWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>dstHeight</color><color=#f8f8f2>,</color> <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>VALUE_INTERPOLATION_BILINEAR</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ImprovedMultistepRescaleOp</color><color=#f8f8f2>(</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>dstWidth</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>dstHeight</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>renderingHintInterpolation</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>DimensionConstrain</color><color=#f8f8f2>.</color><color=#a6e22e>createAbsolutionDimension</color><color=#f8f8f2>(</color><color=#f8f8f2>dstWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>dstHeight</color><color=#f8f8f2>),</color>
                <color=#f8f8f2>renderingHintInterpolation</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ImprovedMultistepRescaleOp</color><color=#f8f8f2>(</color><color=#f8f8f2>DimensionConstrain</color> <color=#f8f8f2>dimensionConstain</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>dimensionConstain</color><color=#f8f8f2>,</color> <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>VALUE_INTERPOLATION_BILINEAR</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ImprovedMultistepRescaleOp</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>DimensionConstrain</color> <color=#f8f8f2>dimensionConstain</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>renderingHintInterpolation</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>dimensionConstain</color><color=#f8f8f2>);</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>renderingHintInterpolation</color> <color=#f92672>=</color> <color=#f8f8f2>renderingHintInterpolation</color><color=#f8f8f2>;</color>
        <color=#66d9ef>assert</color> <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>KEY_INTERPOLATION</color><color=#f8f8f2>.</color><color=#a6e22e>isCompatibleValue</color><color=#f8f8f2>(</color><color=#f8f8f2>renderingHintInterpolation</color><color=#f8f8f2>)</color>
                <color=#f8f8f2>:</color> <color=#e6db74>"Rendering hint "</color> <color=#f92672>+</color> <color=#f8f8f2>renderingHintInterpolation</color> <color=#f92672>+</color> <color=#e6db74>" is not compatible with interpolation"</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>doFilter</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>img</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dest</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>dstWidth</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>dstHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>type</color> <color=#f92672>=</color>
                <color=#f8f8f2>(</color><color=#f8f8f2>img</color><color=#f8f8f2>.</color><color=#a6e22e>getTransparency</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>Transparency</color><color=#f8f8f2>.</color><color=#a6e22e>OPAQUE</color><color=#f8f8f2>)</color>
                        <color=#f92672>?</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_RGB</color>
                        <color=#f8f8f2>:</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#f8f8f2>img</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>;</color>

        <color=#75715e>// Use multi-step technique: start with original size, then</color>
        <color=#75715e>// scale down in multiple passes with drawImage()</color>
        <color=#75715e>// until the target size is reached</color>
        <color=#f8f8f2>w</color> <color=#f92672>=</color> <color=#f8f8f2>img</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>h</color> <color=#f92672>=</color> <color=#f8f8f2>img</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#66d9ef>do</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>w</color> <color=#f92672>></color> <color=#f8f8f2>dstWidth</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>w</color> <color=#f92672>/=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>w</color> <color=#f92672><</color> <color=#f8f8f2>dstWidth</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>w</color> <color=#f92672>=</color> <color=#f8f8f2>dstWidth</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>w</color> <color=#f92672>=</color> <color=#f8f8f2>dstWidth</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>h</color> <color=#f92672>></color> <color=#f8f8f2>dstHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>h</color> <color=#f92672>/=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>h</color> <color=#f92672><</color> <color=#f8f8f2>dstHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>h</color> <color=#f92672>=</color> <color=#f8f8f2>dstHeight</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>h</color> <color=#f92672>=</color> <color=#f8f8f2>dstHeight</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>tmp</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dest</color> <color=#f92672>!=</color> <color=#66d9ef>null</color>
                    <color=#f92672>&&</color> <color=#f8f8f2>dest</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>w</color>
                    <color=#f92672>&&</color> <color=#f8f8f2>dest</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>h</color>
                    <color=#f92672>&&</color> <color=#f8f8f2>w</color> <color=#f92672>==</color> <color=#f8f8f2>dstWidth</color>
                    <color=#f92672>&&</color> <color=#f8f8f2>h</color> <color=#f92672>==</color> <color=#f8f8f2>dstHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>tmp</color> <color=#f92672>=</color> <color=#f8f8f2>dest</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>tmp</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>Graphics2D</color> <color=#f8f8f2>g2</color> <color=#f92672>=</color> <color=#f8f8f2>tmp</color><color=#f8f8f2>.</color><color=#a6e22e>createGraphics</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>g2</color><color=#f8f8f2>.</color><color=#a6e22e>setRenderingHint</color><color=#f8f8f2>(</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>KEY_INTERPOLATION</color><color=#f8f8f2>,</color> <color=#f8f8f2>renderingHintInterpolation</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>g2</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>ret</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>g2</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>

            <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#f8f8f2>tmp</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>w</color> <color=#f92672>!=</color> <color=#f8f8f2>dstWidth</color> <color=#f92672>||</color> <color=#f8f8f2>h</color> <color=#f92672>!=</color> <color=#f8f8f2>dstHeight</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>