<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.io</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Arrays</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A {@code File} implementation that resolves the Windows {@code .lnk} files as symbolic links.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>This class is based on example code from <a</color>
<color=#75715e> * href="http://www.oreilly.com/catalog/swinghks/index.html">Swing Hacks</a>, By Joshua Marinacci,</color>
<color=#75715e> * Chris Adamson (O'Reilly, ISBN: 0-596-00907-0), Hack 30.</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @version $Id:</color>
<color=#75715e> * //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/io/Win32Lnk.java#2</color>
<color=#75715e> * $</color>
<color=#75715e> */</color>
<color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>Win32Lnk</color> <color=#66d9ef>extends</color> <color=#f8f8f2>File</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>LNK_MAGIC</color> <color=#f92672>=</color> <color=#f8f8f2>{</color>
            <color=#e6db74>'L'</color><color=#f8f8f2>,</color> <color=#ae81ff>0x00</color><color=#f8f8f2>,</color> <color=#ae81ff>0x00</color><color=#f8f8f2>,</color> <color=#ae81ff>0x00</color><color=#f8f8f2>,</color> <color=#75715e>// Magic</color>
    <color=#f8f8f2>};</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>LNK_GUID</color> <color=#f92672>=</color> <color=#f8f8f2>{</color>
            <color=#ae81ff>0x01</color><color=#f8f8f2>,</color>
            <color=#ae81ff>0x14</color><color=#f8f8f2>,</color>
            <color=#ae81ff>0x02</color><color=#f8f8f2>,</color>
            <color=#ae81ff>0x00</color><color=#f8f8f2>,</color>
            <color=#ae81ff>0x00</color><color=#f8f8f2>,</color>
            <color=#ae81ff>0x00</color><color=#f8f8f2>,</color>
            <color=#ae81ff>0x00</color><color=#f8f8f2>,</color>
            <color=#ae81ff>0x00</color><color=#f8f8f2>,</color> <color=#75715e>// Shell Link GUID</color>
            <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0xC0</color><color=#f8f8f2>,</color>
            <color=#ae81ff>0x00</color><color=#f8f8f2>,</color>
            <color=#ae81ff>0x00</color><color=#f8f8f2>,</color>
            <color=#ae81ff>0x00</color><color=#f8f8f2>,</color>
            <color=#ae81ff>0x00</color><color=#f8f8f2>,</color>
            <color=#ae81ff>0x00</color><color=#f8f8f2>,</color>
            <color=#ae81ff>0x00</color><color=#f8f8f2>,</color>
            <color=#e6db74>'F'</color>
    <color=#f8f8f2>};</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>target</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FLAG_ITEM_ID_LIST</color> <color=#f92672>=</color> <color=#ae81ff>0x01</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FLAG_FILE_LOC_INFO</color> <color=#f92672>=</color> <color=#ae81ff>0x02</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FLAG_DESC_STRING</color> <color=#f92672>=</color> <color=#ae81ff>0x04</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FLAG_REL_PATH_STRING</color> <color=#f92672>=</color> <color=#ae81ff>0x08</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FLAG_WORKING_DIRECTORY</color> <color=#f92672>=</color> <color=#ae81ff>0x10</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FLAG_COMMAND_LINE_ARGS</color> <color=#f92672>=</color> <color=#ae81ff>0x20</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FLAG_ICON_FILENAME</color> <color=#f92672>=</color> <color=#ae81ff>0x40</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FLAG_ADDITIONAL_INFO</color> <color=#f92672>=</color> <color=#ae81ff>0x80</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#a6e22e>Win32Lnk</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>pPath</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>File</color> <color=#f8f8f2>target</color> <color=#f92672>=</color> <color=#f8f8f2>parse</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color> <color=#f92672>==</color> <color=#66d9ef>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// NOTE: This is a workaround</color>
            <color=#75715e>// target = this causes infinite loops in some methods</color>
            <color=#f8f8f2>target</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pPath</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>target</color> <color=#f92672>=</color> <color=#f8f8f2>target</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>Win32Lnk</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>pPath</color><color=#f8f8f2>.</color><color=#a6e22e>getPath</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Parses a {@code .lnk} file to find the real file.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pPath the path to the {@code .lnk} file</color>
<color=#75715e>     * @return a new file object that</color>
<color=#75715e>     * @throws IOException if the {@code .lnk} cannot be parsed</color>
<color=#75715e>     */</color>
    <color=#66d9ef>static</color> <color=#f8f8f2>File</color> <color=#a6e22e>parse</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>pPath</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>endsWith</color><color=#f8f8f2>(</color><color=#e6db74>".lnk"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>File</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>LittleEndianDataInputStream</color> <color=#f8f8f2>in</color> <color=#f92672>=</color>
                <color=#66d9ef>new</color> <color=#f8f8f2>LittleEndianDataInputStream</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>BufferedInputStream</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>FileInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>pPath</color><color=#f8f8f2>)));</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>magic</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>4</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>readFully</color><color=#f8f8f2>(</color><color=#f8f8f2>magic</color><color=#f8f8f2>);</color>

            <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>guid</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>16</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>readFully</color><color=#f8f8f2>(</color><color=#f8f8f2>guid</color><color=#f8f8f2>);</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>LNK_MAGIC</color><color=#f8f8f2>,</color> <color=#f8f8f2>magic</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>LNK_GUID</color><color=#f8f8f2>,</color> <color=#f8f8f2>guid</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
                <color=#75715e>// System.out.println("Not a symlink");</color>
                <color=#75715e>// Not a symlink</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Get the flags</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>flags</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>();</color>
            <color=#75715e>// System.out.println("flags: " + Integer.toBinaryString(flags & 0xff));</color>

            <color=#75715e>// Get to the file settings</color>
            <color=#75715e>/*int attributes = */</color>
            <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>();</color>

            <color=#75715e>// File attributes</color>
            <color=#75715e>// 0 Target is read only.</color>
            <color=#75715e>// 1 Target is hidden.</color>
            <color=#75715e>// 2 Target is a system file.</color>
            <color=#75715e>// 3 Target is a volume label. (Not possible)</color>
            <color=#75715e>// 4 Target is a directory.</color>
            <color=#75715e>// 5 Target has been modified since last backup. (archive)</color>
            <color=#75715e>// 6 Target is encrypted (NTFS EFS)</color>
            <color=#75715e>// 7 Target is Normal??</color>
            <color=#75715e>// 8 Target is temporary.</color>
            <color=#75715e>// 9 Target is a sparse file.</color>
            <color=#75715e>// 10 Target has reparse point data.</color>
            <color=#75715e>// 11 Target is compressed.</color>
            <color=#75715e>// 12 Target is offline.</color>
            <color=#75715e>// System.out.println("attributes: " + Integer.toBinaryString(attributes));</color>
            <color=#75715e>// NOTE: Cygwin .lnks are not directory links, can't rely on this.. :-/</color>

            <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>skipBytes</color><color=#f8f8f2>(</color><color=#ae81ff>48</color><color=#f8f8f2>);</color> <color=#75715e>// TODO: Make sense of this data...</color>

            <color=#75715e>// Skipped data:</color>
            <color=#75715e>// long time 1 (creation)</color>
            <color=#75715e>// long time 2 (modification)</color>
            <color=#75715e>// long time 3 (last access)</color>
            <color=#75715e>// int file length</color>
            <color=#75715e>// int icon number</color>
            <color=#75715e>// int ShowVnd value</color>
            <color=#75715e>// int hotkey</color>
            <color=#75715e>// int, int - unknown: 0,0</color>

            <color=#75715e>// If the shell settings are present, skip them</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>FLAG_ITEM_ID_LIST</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Shell Item Id List present</color>
                <color=#75715e>// System.out.println("Shell Item Id List present");</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>shellLen</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>readShort</color><color=#f8f8f2>();</color> <color=#75715e>// Short</color>
                <color=#75715e>// System.out.println("shellLen: " + shellLen);</color>

                <color=#75715e>// TODO: Probably need to parse this data, to determine</color>
                <color=#75715e>// Cygwin folders...</color>

        <color=#75715e>/*</color>
<color=#75715e>        int read = 2;</color>
<color=#75715e>        int itemLen = in.readShort();</color>
<color=#75715e>        while (itemLen > 0) {</color>
<color=#75715e>            System.out.println("--> ITEM: " + itemLen);</color>

<color=#75715e>            BufferedReader reader = new BufferedReader(new InputStreamReader(new SubStream(in, itemLen - 2)));</color>
<color=#75715e>            //byte[] itemBytes = new byte[itemLen - 2]; // NOTE: Lenght included</color>
<color=#75715e>            //in.readFully(itemBytes);</color>

<color=#75715e>            String item = reader.readLine();</color>
<color=#75715e>            System.out.println("item: \"" + item + "\"");</color>

<color=#75715e>            itemLen = in.readShort();</color>
<color=#75715e>            read += itemLen;</color>
<color=#75715e>        }</color>

<color=#75715e>        System.out.println("read: " + read);</color>
<color=#75715e>        */</color>

                <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>skipBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>shellLen</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>FLAG_FILE_LOC_INFO</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// File Location Info Table present</color>
                <color=#75715e>// System.out.println("File Location Info Table present");</color>

                <color=#75715e>// 0h 1 dword This is the total length of this structure and all following data</color>
                <color=#75715e>// 4h 1 dword This is a pointer to first offset after this structure. 1Ch</color>
                <color=#75715e>// 8h 1 dword Flags</color>
                <color=#75715e>// Ch 1 dword Offset of local volume info</color>
                <color=#75715e>// 10h 1 dword Offset of base pathname on local system</color>
                <color=#75715e>// 14h 1 dword Offset of network volume info</color>
                <color=#75715e>// 18h 1 dword Offset of remaining pathname</color>

                <color=#75715e>// Flags:</color>
                <color=#75715e>// Bit Meaning</color>
                <color=#75715e>// 0 Available on a local volume</color>
                <color=#75715e>// 1 Available on a network share</color>
                <color=#75715e>// TODO: Make sure the path is on a local disk, etc..</color>

                <color=#66d9ef>int</color> <color=#f8f8f2>tableLen</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>();</color> <color=#75715e>// Int</color>
                <color=#75715e>// System.out.println("tableLen: " + tableLen);</color>

                <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>();</color> <color=#75715e>// Skip</color>

                <color=#66d9ef>int</color> <color=#f8f8f2>locFlags</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>();</color>
                <color=#75715e>// System.out.println("locFlags: " + Integer.toBinaryString(locFlags));</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>locFlags</color> <color=#f92672>&</color> <color=#ae81ff>0x01</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// System.out.println("Available local");</color>
                <color=#f8f8f2>}</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>locFlags</color> <color=#f92672>&</color> <color=#ae81ff>0x02</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// System.err.println("Available on network path");</color>
                <color=#f8f8f2>}</color>

                <color=#75715e>// Get the local volume and local system values</color>
                <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>skipBytes</color><color=#f8f8f2>(</color><color=#ae81ff>4</color><color=#f8f8f2>);</color> <color=#75715e>// TODO: see above for structure</color>

                <color=#66d9ef>int</color> <color=#f8f8f2>localSysOff</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>();</color>
                <color=#75715e>// System.out.println("localSysOff: " + localSysOff);</color>
                <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>skipBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>localSysOff</color> <color=#f92672>-</color> <color=#ae81ff>20</color><color=#f8f8f2>);</color> <color=#75715e>// Relative to start of chunk</color>

                <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pathBytes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>tableLen</color> <color=#f92672>-</color> <color=#f8f8f2>localSysOff</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>readFully</color><color=#f8f8f2>(</color><color=#f8f8f2>pathBytes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>pathBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>String</color> <color=#f8f8f2>path</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f8f8f2>(</color><color=#f8f8f2>pathBytes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>pathBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#75715e>/*</color>
<color=#75715e>        ByteArrayOutputStream bytes = new ByteArrayOutputStream();</color>
<color=#75715e>        byte read;</color>
<color=#75715e>        // Read bytes until the null (0) character</color>
<color=#75715e>        while (true) {</color>
<color=#75715e>            read = in.readByte();</color>
<color=#75715e>            if (read == 0) {</color>
<color=#75715e>                break;</color>
<color=#75715e>            }</color>
<color=#75715e>            bytes.write(read & 0xff);</color>
<color=#75715e>        }</color>

<color=#75715e>        String path = new String(bytes.toByteArray(), 0, bytes.size());</color>
<color=#75715e>        //*/</color>

                <color=#75715e>// Recurse to end of link chain</color>
                <color=#75715e>// TODO: This may cause endless loop if cyclic chain...</color>
                <color=#75715e>// System.out.println("path: \"" + path + "\"");</color>
                <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>parse</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>path</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>StackOverflowError</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"Cannot resolve cyclic link: "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>FLAG_DESC_STRING</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Description String present, skip it.</color>
                <color=#75715e>// System.out.println("Description String present");</color>

                <color=#75715e>// The string length is the first word which must also be skipped.</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>descLen</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>readShort</color><color=#f8f8f2>();</color>
                <color=#75715e>// System.out.println("descLen: " + descLen);</color>

                <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>descBytes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>descLen</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>readFully</color><color=#f8f8f2>(</color><color=#f8f8f2>descBytes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>descLen</color><color=#f8f8f2>);</color>

                <color=#75715e>// String desc = new String(descBytes, 0, descLen);</color>
                <color=#75715e>// System.out.println("desc: " + desc);</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>FLAG_REL_PATH_STRING</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Relative Path String present</color>
                <color=#75715e>// System.out.println("Relative Path String present");</color>

                <color=#75715e>// The string length is the first word which must also be skipped.</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>pathLen</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>readShort</color><color=#f8f8f2>();</color>
                <color=#75715e>// System.out.println("pathLen: " + pathLen);</color>

                <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pathBytes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>pathLen</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>readFully</color><color=#f8f8f2>(</color><color=#f8f8f2>pathBytes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>pathLen</color><color=#f8f8f2>);</color>

                <color=#f8f8f2>String</color> <color=#f8f8f2>path</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f8f8f2>(</color><color=#f8f8f2>pathBytes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>pathLen</color><color=#f8f8f2>);</color>

                <color=#75715e>// TODO: This may cause endless loop if cyclic chain...</color>
                <color=#75715e>// System.out.println("path: \"" + path + "\"");</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>parse</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pPath</color><color=#f8f8f2>.</color><color=#a6e22e>getParentFile</color><color=#f8f8f2>(),</color> <color=#f8f8f2>path</color><color=#f8f8f2>));</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>StackOverflowError</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"Cannot resolve cyclic link: "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>FLAG_WORKING_DIRECTORY</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// System.out.println("Working Directory present");</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>FLAG_COMMAND_LINE_ARGS</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// System.out.println("Command Line Arguments present");</color>
                <color=#75715e>// NOTE: This means this .lnk is not a folder, don't follow</color>
                <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>FLAG_ICON_FILENAME</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// System.out.println("Icon Filename present");</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>flags</color> <color=#f92672>&</color> <color=#f8f8f2>FLAG_ADDITIONAL_INFO</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// System.out.println("Additional Info present");</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>  private static String getNullDelimitedString(byte[] bytes, int off) {</color>
<color=#75715e>      int len = 0;</color>
<color=#75715e>      // Count bytes until the null (0) character</color>
<color=#75715e>      while (true) {</color>
<color=#75715e>          if (bytes[off + len] == 0) {</color>
<color=#75715e>              break;</color>
<color=#75715e>          }</color>
<color=#75715e>          len++;</color>
<color=#75715e>      }</color>

<color=#75715e>      System.err.println("--> " + len);</color>

<color=#75715e>      return new String(bytes, off, len);</color>
<color=#75715e>  }</color>
<color=#75715e>  */</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts two bytes into a short.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>NOTE: this is little endian because it's for an Intel only OS @ param bytes @ param off</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the bytes as a short.</color>
<color=#75715e>     */</color>
  <color=#75715e>/*</color>
<color=#75715e>  private static int bytes2short(byte[] bytes, int off) {</color>
<color=#75715e>      return ((bytes[off + 1] & 0xff) << 8) | (bytes[off] & 0xff);</color>
<color=#75715e>  }</color>
<color=#75715e>  */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>File</color> <color=#a6e22e>getTarget</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>target</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// java.io.File overrides below</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isDirectory</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isDirectory</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>canRead</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>canRead</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>canWrite</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>canWrite</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// NOTE: equals is implemented using compareto == 0</color>
  <color=#75715e>/*</color>
<color=#75715e>  public int compareTo(File pathname) {</color>
<color=#75715e>      // TODO: Verify this</color>
<color=#75715e>      // Probably not a good idea, as it IS NOT THE SAME file</color>
<color=#75715e>      // It's probably better to not override</color>
<color=#75715e>      return target.compareTo(pathname);</color>
<color=#75715e>  }</color>
<color=#75715e>  */</color>

    <color=#75715e>// Should probably never allow creating a new .lnk</color>
    <color=#75715e>// public boolean createNewFile() throws IOException</color>

    <color=#75715e>// Deletes only the .lnk</color>
    <color=#75715e>// public boolean delete() {</color>
    <color=#75715e>// public void deleteOnExit() {</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>exists</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>exists</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// A .lnk may be absolute</color>
    <color=#75715e>// public File getAbsoluteFile() {</color>
    <color=#75715e>// public String getAbsolutePath() {</color>

    <color=#75715e>// Theses should be resolved according to the API (for Unix).</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>File</color> <color=#a6e22e>getCanonicalFile</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getCanonicalFile</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getCanonicalPath</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>getCanonicalPath</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// public String getName() {</color>

    <color=#75715e>// I guess the parent should be the parent of the .lnk, not the target</color>
    <color=#75715e>// public String getParent() {</color>
    <color=#75715e>// public File getParentFile() {</color>

    <color=#75715e>// public boolean isAbsolute() {</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isFile</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isFile</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isHidden</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>isHidden</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>lastModified</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>lastModified</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#a6e22e>list</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>list</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#a6e22e>list</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>FilenameFilter</color> <color=#f8f8f2>filter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>list</color><color=#f8f8f2>(</color><color=#f8f8f2>filter</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#a6e22e>listFiles</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Win32File</color><color=#f8f8f2>.</color><color=#a6e22e>wrap</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>listFiles</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#a6e22e>listFiles</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>FileFilter</color> <color=#f8f8f2>filter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Win32File</color><color=#f8f8f2>.</color><color=#a6e22e>wrap</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>listFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>filter</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#a6e22e>listFiles</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>FilenameFilter</color> <color=#f8f8f2>filter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Win32File</color><color=#f8f8f2>.</color><color=#a6e22e>wrap</color><color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>listFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>filter</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// Makes no sense, does it?</color>
    <color=#75715e>// public boolean mkdir() {</color>
    <color=#75715e>// public boolean mkdirs() {</color>

    <color=#75715e>// Only rename the lnk</color>
    <color=#75715e>// public boolean renameTo(File dest) {</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>setLastModified</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>time</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>setLastModified</color><color=#f8f8f2>(</color><color=#f8f8f2>time</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>setReadOnly</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>setReadOnly</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" -> "</color> <color=#f92672>+</color> <color=#f8f8f2>target</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>