<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.io.ole2</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.io.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.lang.StringUtil</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.stream.ImageInputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Arrays</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.SortedSet</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.TreeSet</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.UUID</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Represents a read-only OLE2 compound document.</color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> * <!-- TODO: Consider really detaching the entries, as this is hard for users to enforce... --></color>
<color=#75715e> * <em>NOTE: This class is not synchronized. Accessing the document or its entries from different</color>
<color=#75715e> * threads, will need synchronization on the document instance.</em></color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.no">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haku $</color>
<color=#75715e> * @version $Id:</color>
<color=#75715e> * //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/io/ole2/CompoundDocument.java#4</color>
<color=#75715e> * $</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>CompoundDocument</color> <color=#f8f8f2>{</color>
    <color=#75715e>// TODO: Write support...</color>
    <color=#75715e>// TODO: Properties: http://support.microsoft.com/kb/186898</color>

    <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>MAGIC</color> <color=#f92672>=</color>
            <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[]</color><color=#f8f8f2>{</color>
                    <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0xD0</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0xCF</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0x11</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0xE0</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0xA1</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0xB1</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0x1A</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0xE1</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>};</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FREE_SID</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>END_OF_CHAIN_SID</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>SAT_SECTOR_SID</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>3</color><color=#f8f8f2>;</color> <color=#75715e>// Sector used by SAT</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>MSAT_SECTOR_SID</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>4</color><color=#f8f8f2>;</color> <color=#75715e>// Sector used my Master SAT</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>HEADER_SIZE</color> <color=#f92672>=</color> <color=#ae81ff>512</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The epoch offset of CompoundDocument time stamps</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>EPOCH_OFFSET</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>11644477200000L</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>DataInput</color> <color=#f8f8f2>input</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>UUID</color> <color=#f8f8f2>uUID</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>sectorSize</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>shortSectorSize</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>directorySId</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>minStreamSize</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>shortSATSId</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>shortSATSize</color><color=#f8f8f2>;</color>

    <color=#75715e>// Master Sector Allocation Table</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>masterSAT</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>SAT</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>shortSAT</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>Entry</color> <color=#f8f8f2>rootEntry</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>SIdChain</color> <color=#f8f8f2>shortStreamSIdChain</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>SIdChain</color> <color=#f8f8f2>directorySIdChain</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a (for now) read only {@code CompoundDocument}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFile the file to read from</color>
<color=#75715e>     * @throws IOException if an I/O exception occurs while reading the header</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>CompoundDocument</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>pFile</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>input</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LittleEndianRandomAccessFile</color><color=#f8f8f2>(</color><color=#f8f8f2>FileUtil</color><color=#f8f8f2>.</color><color=#a6e22e>resolve</color><color=#f8f8f2>(</color><color=#f8f8f2>pFile</color><color=#f8f8f2>),</color> <color=#e6db74>"r"</color><color=#f8f8f2>);</color>

        <color=#75715e>// TODO: Might be better to read header on first read operation?!</color>
        <color=#75715e>// OTOH: It's also good to be fail-fast, so at least we should make</color>
        <color=#75715e>// sure we're reading a valid document</color>
        <color=#f8f8f2>readHeader</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a read only {@code CompoundDocument}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pInput the input to read from</color>
<color=#75715e>     * @throws IOException if an I/O exception occurs while reading the header</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>CompoundDocument</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>InputStream</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>FileCacheSeekableStream</color><color=#f8f8f2>(</color><color=#f8f8f2>pInput</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// For testing only, consider exposing later</color>
    <color=#f8f8f2>CompoundDocument</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>SeekableInputStream</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>input</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>SeekableLittleEndianDataInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>pInput</color><color=#f8f8f2>);</color>

        <color=#75715e>// TODO: Might be better to read header on first read operation?!</color>
        <color=#75715e>// OTOH: It's also good to be fail-fast, so at least we should make</color>
        <color=#75715e>// sure we're reading a valid document</color>
        <color=#f8f8f2>readHeader</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a read only {@code CompoundDocument}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pInput the input to read from</color>
<color=#75715e>     * @throws IOException if an I/O exception occurs while reading the header</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>CompoundDocument</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>input</color> <color=#f92672>=</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>;</color>

        <color=#75715e>// TODO: Might be better to read header on first read operation?!</color>
        <color=#75715e>// OTOH: It's also good to be fail-fast, so at least we should make</color>
        <color=#75715e>// sure we're reading a valid document</color>
        <color=#f8f8f2>readHeader</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>canRead</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DataInput</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>canRead</color><color=#f8f8f2>(</color><color=#f8f8f2>pInput</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// TODO: Refactor.. Figure out what we really need to expose to ImageIO for</color>
    <color=#75715e>// easy reading of the Thumbs.db file</color>
    <color=#75715e>// It's probably safer to create one version for InputStream and one for File</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>canRead</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DataInput</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pReset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>pos</color> <color=#f92672>=</color> <color=#f8f8f2>FREE_SID</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pReset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pInput</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>InputStream</color> <color=#f92672>&&</color> <color=#f8f8f2>((</color><color=#f8f8f2>InputStream</color><color=#f8f8f2>)</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>).</color><color=#a6e22e>markSupported</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>((</color><color=#f8f8f2>InputStream</color><color=#f8f8f2>)</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>).</color><color=#a6e22e>mark</color><color=#f8f8f2>(</color><color=#ae81ff>8</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pInput</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>ImageInputStream</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>((</color><color=#f8f8f2>ImageInputStream</color><color=#f8f8f2>)</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>).</color><color=#a6e22e>mark</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pInput</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>RandomAccessFile</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>pos</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>RandomAccessFile</color><color=#f8f8f2>)</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>).</color><color=#a6e22e>getFilePointer</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pInput</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>LittleEndianRandomAccessFile</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>pos</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>LittleEndianRandomAccessFile</color><color=#f8f8f2>)</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>).</color><color=#a6e22e>getFilePointer</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>magic</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>8</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readFully</color><color=#f8f8f2>(</color><color=#f8f8f2>magic</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>magic</color><color=#f8f8f2>,</color> <color=#f8f8f2>MAGIC</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Ignore</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pReset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pInput</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>InputStream</color> <color=#f92672>&&</color> <color=#f8f8f2>((</color><color=#f8f8f2>InputStream</color><color=#f8f8f2>)</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>).</color><color=#a6e22e>markSupported</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>((</color><color=#f8f8f2>InputStream</color><color=#f8f8f2>)</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>).</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pInput</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>ImageInputStream</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>((</color><color=#f8f8f2>ImageInputStream</color><color=#f8f8f2>)</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>).</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pInput</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>RandomAccessFile</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>((</color><color=#f8f8f2>RandomAccessFile</color><color=#f8f8f2>)</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>).</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>pos</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pInput</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>LittleEndianRandomAccessFile</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>((</color><color=#f8f8f2>LittleEndianRandomAccessFile</color><color=#f8f8f2>)</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>).</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>pos</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// TODO: This isn't actually good enough...</color>
                    <color=#75715e>// Means something fucked up, and will fail...</color>
                    <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>printStackTrace</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>readHeader</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>masterSAT</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>canRead</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>CorruptDocumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Not an OLE 2 Compound Document"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// UID (seems to be all 0s)</color>
        <color=#f8f8f2>uUID</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>UUID</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readLong</color><color=#f8f8f2>(),</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readLong</color><color=#f8f8f2>());</color>
        <color=#75715e>//        System.out.println("uUID: " + uUID);</color>

        <color=#75715e>// int version =</color>
        <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readUnsignedShort</color><color=#f8f8f2>();</color>
        <color=#75715e>//        System.out.println("version: " + version);</color>
        <color=#75715e>// int revision =</color>
        <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readUnsignedShort</color><color=#f8f8f2>();</color>
        <color=#75715e>//        System.out.println("revision: " + revision);</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>byteOrder</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readUnsignedShort</color><color=#f8f8f2>();</color>
        <color=#75715e>//        System.out.printf("byteOrder: 0x%04x\n", byteOrder);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteOrder</color> <color=#f92672>==</color> <color=#ae81ff>0xffff</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>CorruptDocumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Cannot read big endian OLE 2 Compound Documents"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteOrder</color> <color=#f92672>!=</color> <color=#ae81ff>0xfffe</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Reversed, as I'm already reading little-endian</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>CorruptDocumentException</color><color=#f8f8f2>(</color>
                    <color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#e6db74>"Unknown byte order marker: 0x%04x, expected 0xfffe or 0xffff"</color><color=#f8f8f2>,</color> <color=#f8f8f2>byteOrder</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>sectorSize</color> <color=#f92672>=</color> <color=#ae81ff>1</color> <color=#f92672><<</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readUnsignedShort</color><color=#f8f8f2>();</color>
        <color=#75715e>//        System.out.println("sectorSize: " + sectorSize + " bytes");</color>
        <color=#f8f8f2>shortSectorSize</color> <color=#f92672>=</color> <color=#ae81ff>1</color> <color=#f92672><<</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readUnsignedShort</color><color=#f8f8f2>();</color>
        <color=#75715e>//        System.out.println("shortSectorSize: " + shortSectorSize + " bytes");</color>

        <color=#75715e>// Reserved</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>skipBytesFully</color><color=#f8f8f2>(</color><color=#ae81ff>10</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>10</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>CorruptDocumentException</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>SATSize</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>();</color>
        <color=#75715e>//        System.out.println("normalSATSize: " + SATSize);</color>

        <color=#f8f8f2>directorySId</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>();</color>
        <color=#75715e>//        System.out.println("directorySId: " + directorySId);</color>

        <color=#75715e>// Reserved</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>skipBytesFully</color><color=#f8f8f2>(</color><color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>CorruptDocumentException</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>minStreamSize</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>();</color>
        <color=#75715e>//        System.out.println("minStreamSize: " + minStreamSize + " bytes");</color>

        <color=#f8f8f2>shortSATSId</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>();</color>
        <color=#75715e>//        System.out.println("shortSATSId: " + shortSATSId);</color>
        <color=#f8f8f2>shortSATSize</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>();</color>
        <color=#75715e>//        System.out.println("shortSATSize: " + shortSATSize);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>masterSATSId</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>();</color>
        <color=#75715e>//        System.out.println("masterSATSId: " + masterSATSId);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>masterSATSize</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>();</color>
        <color=#75715e>//        System.out.println("masterSATSize: " + masterSATSize);</color>

        <color=#75715e>// Read masterSAT: 436 bytes, containing up to 109 SIDs</color>
        <color=#75715e>// System.out.println("MSAT:");</color>
        <color=#f8f8f2>masterSAT</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>SATSize</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>headerSIds</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>SATSize</color><color=#f8f8f2>,</color> <color=#ae81ff>109</color><color=#f8f8f2>);</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>headerSIds</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>masterSAT</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>();</color>
            <color=#75715e>// System.out.println("\tSID(" + i + "): " + masterSAT[i]);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>masterSATSId</color> <color=#f92672>==</color> <color=#f8f8f2>END_OF_CHAIN_SID</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// End of chain</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>freeSIdLength</color> <color=#f92672>=</color> <color=#ae81ff>436</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>SATSize</color> <color=#f92672>*</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>skipBytesFully</color><color=#f8f8f2>(</color><color=#f8f8f2>freeSIdLength</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#f8f8f2>freeSIdLength</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>CorruptDocumentException</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Parse the SIDs in the extended MasterSAT sectors...</color>
            <color=#f8f8f2>seekToSId</color><color=#f8f8f2>(</color><color=#f8f8f2>masterSATSId</color><color=#f8f8f2>,</color> <color=#f8f8f2>FREE_SID</color><color=#f8f8f2>);</color>

            <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>headerSIds</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>masterSATSize</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#ae81ff>127</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>sid</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>();</color>
                    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>sid</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>case</color> <color=#f8f8f2>FREE_SID</color><color=#f8f8f2>:</color> <color=#75715e>// Free</color>
                            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>default</color><color=#f8f8f2>:</color>
                            <color=#f8f8f2>masterSAT</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>sid</color><color=#f8f8f2>;</color>
                            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>

                <color=#66d9ef>int</color> <color=#f8f8f2>next</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>();</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>next</color> <color=#f92672>==</color> <color=#f8f8f2>END_OF_CHAIN_SID</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color> <color=#75715e>// End of chain</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>seekToSId</color><color=#f8f8f2>(</color><color=#f8f8f2>next</color><color=#f8f8f2>,</color> <color=#f8f8f2>FREE_SID</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>skipBytesFully</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>toSkip</color> <color=#f92672>=</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>

        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>toSkip</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>skipped</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>skipBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>n</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>skipped</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>toSkip</color> <color=#f92672>-=</color> <color=#f8f8f2>skipped</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>n</color> <color=#f92672>-</color> <color=#f8f8f2>toSkip</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>readSAT</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>SAT</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>intsPerSector</color> <color=#f92672>=</color> <color=#f8f8f2>sectorSize</color> <color=#f92672>/</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>

        <color=#75715e>// Read the Sector Allocation Table</color>
        <color=#f8f8f2>SAT</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>masterSAT</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>*</color> <color=#f8f8f2>intsPerSector</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>masterSAT</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>seekToSId</color><color=#f8f8f2>(</color><color=#f8f8f2>masterSAT</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>FREE_SID</color><color=#f8f8f2>);</color>

            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#f8f8f2>intsPerSector</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>nextSID</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>();</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>*</color> <color=#f8f8f2>intsPerSector</color><color=#f8f8f2>));</color>

                <color=#f8f8f2>SAT</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>nextSID</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Read the short-stream Sector Allocation Table</color>
        <color=#f8f8f2>SIdChain</color> <color=#f8f8f2>chain</color> <color=#f92672>=</color> <color=#f8f8f2>getSIdChain</color><color=#f8f8f2>(</color><color=#f8f8f2>shortSATSId</color><color=#f8f8f2>,</color> <color=#f8f8f2>FREE_SID</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>shortSAT</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>shortSATSize</color> <color=#f92672>*</color> <color=#f8f8f2>intsPerSector</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>shortSATSize</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>seekToSId</color><color=#f8f8f2>(</color><color=#f8f8f2>chain</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>),</color> <color=#f8f8f2>FREE_SID</color><color=#f8f8f2>);</color>

            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#f8f8f2>intsPerSector</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>nextSID</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>();</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>*</color> <color=#f8f8f2>intsPerSector</color><color=#f8f8f2>));</color>

                <color=#f8f8f2>shortSAT</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>nextSID</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the SIdChain for the given stream Id</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSId        the stream Id</color>
<color=#75715e>     * @param pStreamSize the size of the stream, or -1 for system control streams</color>
<color=#75715e>     * @return the SIdChain for the given stream Id</color>
<color=#75715e>     * @throws IOException if an I/O exception occurs</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>SIdChain</color> <color=#a6e22e>getSIdChain</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pSId</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pStreamSize</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>SIdChain</color> <color=#f8f8f2>chain</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>SIdChain</color><color=#f8f8f2>();</color>

        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>sat</color> <color=#f92672>=</color> <color=#f8f8f2>isShortStream</color><color=#f8f8f2>(</color><color=#f8f8f2>pStreamSize</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>shortSAT</color> <color=#f8f8f2>:</color> <color=#f8f8f2>SAT</color><color=#f8f8f2>;</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>sid</color> <color=#f92672>=</color> <color=#f8f8f2>pSId</color><color=#f8f8f2>;</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>sid</color> <color=#f92672>!=</color> <color=#f8f8f2>END_OF_CHAIN_SID</color> <color=#f92672>&&</color> <color=#f8f8f2>sid</color> <color=#f92672>!=</color> <color=#f8f8f2>FREE_SID</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>chain</color><color=#f8f8f2>.</color><color=#a6e22e>addSID</color><color=#f8f8f2>(</color><color=#f8f8f2>sid</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>sid</color> <color=#f92672>=</color> <color=#f8f8f2>sat</color><color=#f92672>[</color><color=#f8f8f2>sid</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>chain</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isShortStream</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pStreamSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pStreamSize</color> <color=#f92672>!=</color> <color=#f8f8f2>FREE_SID</color> <color=#f92672>&&</color> <color=#f8f8f2>pStreamSize</color> <color=#f92672><</color> <color=#f8f8f2>minStreamSize</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Seeks to the start pos for the given stream Id</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSId        the stream Id</color>
<color=#75715e>     * @param pStreamSize the size of the stream, or -1 for system control streams</color>
<color=#75715e>     * @throws IOException if an I/O exception occurs</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>seekToSId</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pSId</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pStreamSize</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>pos</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isShortStream</color><color=#f8f8f2>(</color><color=#f8f8f2>pStreamSize</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#75715e>// The short stream is not continuous...</color>
            <color=#f8f8f2>Entry</color> <color=#f8f8f2>root</color> <color=#f92672>=</color> <color=#f8f8f2>getRootEntry</color><color=#f8f8f2>();</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>shortStreamSIdChain</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>shortStreamSIdChain</color> <color=#f92672>=</color> <color=#f8f8f2>getSIdChain</color><color=#f8f8f2>(</color><color=#f8f8f2>root</color><color=#f8f8f2>.</color><color=#a6e22e>startSId</color><color=#f8f8f2>,</color> <color=#f8f8f2>root</color><color=#f8f8f2>.</color><color=#a6e22e>streamSize</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>//            System.err.println("pSId: " + pSId);</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>shortPerSId</color> <color=#f92672>=</color> <color=#f8f8f2>sectorSize</color> <color=#f92672>/</color> <color=#f8f8f2>shortSectorSize</color><color=#f8f8f2>;</color>
            <color=#75715e>//            System.err.println("shortPerSId: " + shortPerSId);</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>offset</color> <color=#f92672>=</color> <color=#f8f8f2>pSId</color> <color=#f92672>/</color> <color=#f8f8f2>shortPerSId</color><color=#f8f8f2>;</color>
            <color=#75715e>//            System.err.println("offset: " + offset);</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>shortOffset</color> <color=#f92672>=</color> <color=#f8f8f2>pSId</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>offset</color> <color=#f92672>*</color> <color=#f8f8f2>shortPerSId</color><color=#f8f8f2>);</color>
            <color=#75715e>//            System.err.println("shortOffset: " + shortOffset);</color>
            <color=#75715e>//            System.err.println("shortStreamSIdChain.offset: " +</color>
            <color=#75715e>// shortStreamSIdChain.get(offset));</color>

            <color=#f8f8f2>pos</color> <color=#f92672>=</color>
                    <color=#f8f8f2>HEADER_SIZE</color>
                            <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>shortStreamSIdChain</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>sectorSize</color><color=#f8f8f2>)</color>
                            <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>shortOffset</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>shortSectorSize</color><color=#f8f8f2>);</color>
            <color=#75715e>//            System.err.println("pos: " + pos);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pos</color> <color=#f92672>=</color> <color=#f8f8f2>HEADER_SIZE</color> <color=#f92672>+</color> <color=#f8f8f2>pSId</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>sectorSize</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>input</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>LittleEndianRandomAccessFile</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>((</color><color=#f8f8f2>LittleEndianRandomAccessFile</color><color=#f8f8f2>)</color> <color=#f8f8f2>input</color><color=#f8f8f2>).</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>pos</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>input</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>ImageInputStream</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>((</color><color=#f8f8f2>ImageInputStream</color><color=#f8f8f2>)</color> <color=#f8f8f2>input</color><color=#f8f8f2>).</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>pos</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>((</color><color=#f8f8f2>SeekableLittleEndianDataInputStream</color><color=#f8f8f2>)</color> <color=#f8f8f2>input</color><color=#f8f8f2>).</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>pos</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>seekToDId</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pDId</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>directorySIdChain</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>directorySIdChain</color> <color=#f92672>=</color> <color=#f8f8f2>getSIdChain</color><color=#f8f8f2>(</color><color=#f8f8f2>directorySId</color><color=#f8f8f2>,</color> <color=#f8f8f2>FREE_SID</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>dIdsPerSId</color> <color=#f92672>=</color> <color=#f8f8f2>sectorSize</color> <color=#f92672>/</color> <color=#f8f8f2>Entry</color><color=#f8f8f2>.</color><color=#a6e22e>LENGTH</color><color=#f8f8f2>;</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>sIdOffset</color> <color=#f92672>=</color> <color=#f8f8f2>pDId</color> <color=#f92672>/</color> <color=#f8f8f2>dIdsPerSId</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>dIdOffset</color> <color=#f92672>=</color> <color=#f8f8f2>pDId</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>sIdOffset</color> <color=#f92672>*</color> <color=#f8f8f2>dIdsPerSId</color><color=#f8f8f2>);</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>sId</color> <color=#f92672>=</color> <color=#f8f8f2>directorySIdChain</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>sIdOffset</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>seekToSId</color><color=#f8f8f2>(</color><color=#f8f8f2>sId</color><color=#f8f8f2>,</color> <color=#f8f8f2>FREE_SID</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>input</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>LittleEndianRandomAccessFile</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>LittleEndianRandomAccessFile</color> <color=#f8f8f2>input</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>LittleEndianRandomAccessFile</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>input</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>getFilePointer</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>dIdOffset</color> <color=#f92672>*</color> <color=#f8f8f2>Entry</color><color=#f8f8f2>.</color><color=#a6e22e>LENGTH</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>input</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>ImageInputStream</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>input</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ImageInputStream</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>input</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>getStreamPosition</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>dIdOffset</color> <color=#f92672>*</color> <color=#f8f8f2>Entry</color><color=#f8f8f2>.</color><color=#a6e22e>LENGTH</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>SeekableLittleEndianDataInputStream</color> <color=#f8f8f2>input</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>SeekableLittleEndianDataInputStream</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>input</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>getStreamPosition</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>dIdOffset</color> <color=#f92672>*</color> <color=#f8f8f2>Entry</color><color=#f8f8f2>.</color><color=#a6e22e>LENGTH</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>SeekableInputStream</color> <color=#a6e22e>getInputStreamForSId</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pStreamId</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pStreamSize</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>SIdChain</color> <color=#f8f8f2>chain</color> <color=#f92672>=</color> <color=#f8f8f2>getSIdChain</color><color=#f8f8f2>(</color><color=#f8f8f2>pStreamId</color><color=#f8f8f2>,</color> <color=#f8f8f2>pStreamSize</color><color=#f8f8f2>);</color>

        <color=#75715e>// TODO: Detach? Means, we have to copy to a byte buffer, or keep track of</color>
        <color=#75715e>// positions, and seek back and forth (would be cool, but difficult)..</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>sectorSize</color> <color=#f92672>=</color> <color=#f8f8f2>pStreamSize</color> <color=#f92672><</color> <color=#f8f8f2>minStreamSize</color> <color=#f92672>?</color> <color=#f8f8f2>shortSectorSize</color> <color=#f8f8f2>:</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>sectorSize</color><color=#f8f8f2>;</color>

        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>MemoryCacheSeekableStream</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Stream</color><color=#f8f8f2>(</color><color=#f8f8f2>chain</color><color=#f8f8f2>,</color> <color=#f8f8f2>pStreamSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>sectorSize</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>InputStream</color> <color=#a6e22e>getDirectoryStreamForDId</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pDirectoryId</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#75715e>// This is always exactly 128 bytes, so we'll just read it all,</color>
        <color=#75715e>// and buffer (we might want to optimize this later).</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>Entry</color><color=#f8f8f2>.</color><color=#a6e22e>LENGTH</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>seekToDId</color><color=#f8f8f2>(</color><color=#f8f8f2>pDirectoryId</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readFully</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteArrayInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>Entry</color> <color=#a6e22e>getEntry</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pDirectoryId</color><color=#f8f8f2>,</color> <color=#f8f8f2>Entry</color> <color=#f8f8f2>pParent</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Entry</color> <color=#f8f8f2>entry</color> <color=#f92672>=</color>
                <color=#f8f8f2>Entry</color><color=#f8f8f2>.</color><color=#a6e22e>readEntry</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>LittleEndianDataInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>getDirectoryStreamForDId</color><color=#f8f8f2>(</color><color=#f8f8f2>pDirectoryId</color><color=#f8f8f2>)));</color>
        <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>parent</color> <color=#f92672>=</color> <color=#f8f8f2>pParent</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>document</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>entry</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>SortedSet</color><color=#f92672><</color><color=#f8f8f2>Entry</color><color=#f92672>></color> <color=#a6e22e>getEntries</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pDirectoryId</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Entry</color> <color=#f8f8f2>pParent</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>getEntriesRecursive</color><color=#f8f8f2>(</color><color=#f8f8f2>pDirectoryId</color><color=#f8f8f2>,</color> <color=#f8f8f2>pParent</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>TreeSet</color><color=#f92672><</color><color=#f8f8f2>Entry</color><color=#f92672>></color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>SortedSet</color><color=#f92672><</color><color=#f8f8f2>Entry</color><color=#f92672>></color> <color=#a6e22e>getEntriesRecursive</color><color=#f8f8f2>(</color>
            <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pDirectoryId</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Entry</color> <color=#f8f8f2>pParent</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>SortedSet</color><color=#f92672><</color><color=#f8f8f2>Entry</color><color=#f92672>></color> <color=#f8f8f2>pEntries</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

        <color=#75715e>// System.out.println("pDirectoryId: " + pDirectoryId);</color>

        <color=#f8f8f2>Entry</color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>getEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>pDirectoryId</color><color=#f8f8f2>,</color> <color=#f8f8f2>pParent</color><color=#f8f8f2>);</color>

        <color=#75715e>// System.out.println("entry: " + entry);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>pEntries</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#75715e>// TODO: This occurs in some Thumbs.db files, and Windows will</color>
            <color=#75715e>// still parse the file gracefully somehow...</color>
            <color=#75715e>// Deleting and regenerating the file will remove the cyclic</color>
            <color=#75715e>// references, but... How can Windows parse this file?</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>CorruptDocumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Cyclic chain reference for entry: "</color> <color=#f92672>+</color> <color=#f8f8f2>pDirectoryId</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>prevDId</color> <color=#f92672>!=</color> <color=#f8f8f2>FREE_SID</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// System.out.println("prevDId: " + entry.prevDId);</color>
            <color=#f8f8f2>getEntriesRecursive</color><color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>prevDId</color><color=#f8f8f2>,</color> <color=#f8f8f2>pParent</color><color=#f8f8f2>,</color> <color=#f8f8f2>pEntries</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>nextDId</color> <color=#f92672>!=</color> <color=#f8f8f2>FREE_SID</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// System.out.println("nextDId: " + entry.nextDId);</color>
            <color=#f8f8f2>getEntriesRecursive</color><color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>nextDId</color><color=#f8f8f2>,</color> <color=#f8f8f2>pParent</color><color=#f8f8f2>,</color> <color=#f8f8f2>pEntries</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>pEntries</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*public*/</color> <color=#f8f8f2>Entry</color> <color=#a6e22e>getEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>pPath</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>pPath</color><color=#f8f8f2>.</color><color=#a6e22e>startsWith</color><color=#f8f8f2>(</color><color=#e6db74>"/"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                    <color=#e6db74>"Path must be absolute, and contain a valid path: "</color> <color=#f92672>+</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>Entry</color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>getRootEntry</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pPath</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"/"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#75715e>// '/' means root entry</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>entry</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Otherwise get children recursively:</color>
            <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>pathElements</color> <color=#f92672>=</color> <color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>toStringArray</color><color=#f8f8f2>(</color><color=#f8f8f2>pPath</color><color=#f8f8f2>,</color> <color=#e6db74>"/"</color><color=#f8f8f2>);</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pathElement</color> <color=#f8f8f2>:</color> <color=#f8f8f2>pathElements</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getChildEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>pathElement</color><color=#f8f8f2>);</color>

                <color=#75715e>// No such child...</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entry</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color> <color=#75715e>// TODO: FileNotFoundException? Should behave like Entry.getChildEntry!!</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>entry</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Entry</color> <color=#a6e22e>getRootEntry</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rootEntry</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>readSAT</color><color=#f8f8f2>();</color>

            <color=#f8f8f2>rootEntry</color> <color=#f92672>=</color> <color=#f8f8f2>getEntry</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rootEntry</color><color=#f8f8f2>.</color><color=#a6e22e>type</color> <color=#f92672>!=</color> <color=#f8f8f2>Entry</color><color=#f8f8f2>.</color><color=#a6e22e>ROOT_STORAGE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>CorruptDocumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Invalid root storage type: "</color> <color=#f92672>+</color> <color=#f8f8f2>rootEntry</color><color=#f8f8f2>.</color><color=#a6e22e>type</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>rootEntry</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// This is useless, as most documents on file have all-zero UUIDs...</color>
    <color=#75715e>//    @Override</color>
    <color=#75715e>//    public int hashCode() {</color>
    <color=#75715e>//        return uUID.hashCode();</color>
    <color=#75715e>//    }</color>
    <color=#75715e>//</color>
    <color=#75715e>//    @Override</color>
    <color=#75715e>//    public boolean equals(final Object pOther) {</color>
    <color=#75715e>//        if (pOther == this) {</color>
    <color=#75715e>//            return true;</color>
    <color=#75715e>//        }</color>
    <color=#75715e>//</color>
    <color=#75715e>//        if (pOther == null) {</color>
    <color=#75715e>//            return true;</color>
    <color=#75715e>//        }</color>
    <color=#75715e>//</color>
    <color=#75715e>//        if (pOther.getClass() == getClass()) {</color>
    <color=#75715e>//            return uUID.equals(((CompoundDocument) pOther).uUID);</color>
    <color=#75715e>//        }</color>
    <color=#75715e>//</color>
    <color=#75715e>//        return false;</color>
    <color=#75715e>//    }</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color>
                <color=#e6db74>"%s[uuid: %s, sector size: %d/%d bytes, directory SID: %d, master SAT: %s entries]"</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getSimpleName</color><color=#f8f8f2>(),</color>
                <color=#f8f8f2>uUID</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>sectorSize</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>shortSectorSize</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>directorySId</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>masterSAT</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts the given time stamp to standard Java time representation, milliseconds since January</color>
<color=#75715e>     * 1, 1970. The time stamp parameter is assumed to be in units of 100 nano seconds since January</color>
<color=#75715e>     * 1, 1601.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>If the timestamp is {@code 0L} (meaning not specified), no conversion is done, to behave</color>
<color=#75715e>     * like {@code java.io.File}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pMSTime an unsigned long value representing the time stamp (in units of 100 nano seconds</color>
<color=#75715e>     *                since January 1, 1601).</color>
<color=#75715e>     * @return the time stamp converted to Java time stamp in milliseconds, or {@code 0L} if {@code</color>
<color=#75715e>     * pMSTime == 0L}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>toJavaTimeInMillis</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pMSTime</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// NOTE: The time stamp field is an unsigned 64-bit integer value that</color>
        <color=#75715e>// contains the time elapsed since 1601-Jan-01 00:00:00 (Gregorian</color>
        <color=#75715e>// calendar).</color>
        <color=#75715e>// One unit of this value is equal to 100 nanoseconds).</color>
        <color=#75715e>// That means, each second the time stamp value will be increased by</color>
        <color=#75715e>// 10 million units.</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pMSTime</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>;</color> <color=#75715e>// This is just less confusing...</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Convert to milliseconds (signed),</color>
        <color=#75715e>// then convert to Java std epoch (1970-Jan-01 00:00:00)</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>pMSTime</color> <color=#f92672>>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>5000</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>EPOCH_OFFSET</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>Stream</color> <color=#66d9ef>extends</color> <color=#f8f8f2>InputStream</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>SIdChain</color> <color=#f8f8f2>chain</color><color=#f8f8f2>;</color>
        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>CompoundDocument</color> <color=#f8f8f2>document</color><color=#f8f8f2>;</color>
        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color>

        <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>streamPos</color><color=#f8f8f2>;</color>
        <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>nextSectorPos</color><color=#f8f8f2>;</color>
        <color=#66d9ef>private</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>;</color>
        <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>bufferPos</color><color=#f8f8f2>;</color>

        <color=#66d9ef>public</color> <color=#a6e22e>Stream</color><color=#f8f8f2>(</color><color=#f8f8f2>SIdChain</color> <color=#f8f8f2>chain</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>streamSize</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>sectorSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>CompoundDocument</color> <color=#f8f8f2>document</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>chain</color> <color=#f92672>=</color> <color=#f8f8f2>chain</color><color=#f8f8f2>;</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>=</color> <color=#f8f8f2>streamSize</color><color=#f8f8f2>;</color>

            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>buffer</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>sectorSize</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>bufferPos</color> <color=#f92672>=</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>

            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>document</color> <color=#f92672>=</color> <color=#f8f8f2>document</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#a6e22e>@Override</color>
        <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>available</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#f8f8f2>bufferPos</color><color=#f8f8f2>,</color> <color=#f8f8f2>length</color> <color=#f92672>-</color> <color=#f8f8f2>streamPos</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>available</color><color=#f8f8f2>()</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>fillBuffer</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>streamPos</color><color=#f92672>++</color><color=#f8f8f2>;</color>

            <color=#66d9ef>return</color> <color=#f8f8f2>buffer</color><color=#f92672>[</color><color=#f8f8f2>bufferPos</color><color=#f92672>++]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>fillBuffer</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>streamPos</color> <color=#f92672><</color> <color=#f8f8f2>length</color> <color=#f92672>&&</color> <color=#f8f8f2>nextSectorPos</color> <color=#f92672><</color> <color=#f8f8f2>chain</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#75715e>// TODO: Sync on document.input here, and we are completely detached... :-)</color>
                <color=#75715e>// TODO: Update: We also need to sync other places... :-P</color>
                <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>document</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>document</color><color=#f8f8f2>.</color><color=#a6e22e>seekToSId</color><color=#f8f8f2>(</color><color=#f8f8f2>chain</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>nextSectorPos</color><color=#f8f8f2>),</color> <color=#f8f8f2>length</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>document</color><color=#f8f8f2>.</color><color=#a6e22e>input</color><color=#f8f8f2>.</color><color=#a6e22e>readFully</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>nextSectorPos</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>bufferPos</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

                <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#a6e22e>@Override</color>
        <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color> <color=#f8f8f2>b</color><color=#f92672>[]</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>available</color><color=#f8f8f2>()</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>fillBuffer</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>int</color> <color=#f8f8f2>toRead</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>len</color><color=#f8f8f2>,</color> <color=#f8f8f2>available</color><color=#f8f8f2>());</color>

            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>bufferPos</color><color=#f8f8f2>,</color> <color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>toRead</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>bufferPos</color> <color=#f92672>+=</color> <color=#f8f8f2>toRead</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>streamPos</color> <color=#f92672>+=</color> <color=#f8f8f2>toRead</color><color=#f8f8f2>;</color>

            <color=#66d9ef>return</color> <color=#f8f8f2>toRead</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#a6e22e>@Override</color>
        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>buffer</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>SeekableLittleEndianDataInputStream</color> <color=#66d9ef>extends</color> <color=#f8f8f2>LittleEndianDataInputStream</color>
            <color=#66d9ef>implements</color> <color=#f8f8f2>Seekable</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>SeekableInputStream</color> <color=#f8f8f2>seekable</color><color=#f8f8f2>;</color>

        <color=#66d9ef>public</color> <color=#a6e22e>SeekableLittleEndianDataInputStream</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>SeekableInputStream</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>pInput</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>seekable</color> <color=#f92672>=</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pPosition</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>seekable</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>pPosition</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isCachedFile</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>seekable</color><color=#f8f8f2>.</color><color=#a6e22e>isCachedFile</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isCachedMemory</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>seekable</color><color=#f8f8f2>.</color><color=#a6e22e>isCachedMemory</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isCached</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>seekable</color><color=#f8f8f2>.</color><color=#a6e22e>isCached</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getStreamPosition</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>seekable</color><color=#f8f8f2>.</color><color=#a6e22e>getStreamPosition</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getFlushedPosition</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>seekable</color><color=#f8f8f2>.</color><color=#a6e22e>getFlushedPosition</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>flushBefore</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pPosition</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>seekable</color><color=#f8f8f2>.</color><color=#a6e22e>flushBefore</color><color=#f8f8f2>(</color><color=#f8f8f2>pPosition</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>flush</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>seekable</color><color=#f8f8f2>.</color><color=#a6e22e>flush</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#a6e22e>@Override</color>
        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>reset</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>seekable</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>mark</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>seekable</color><color=#f8f8f2>.</color><color=#a6e22e>mark</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>