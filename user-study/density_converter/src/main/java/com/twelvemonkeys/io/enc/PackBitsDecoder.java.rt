<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.io.enc</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.EOFException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.InputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteBuffer</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Decoder implementation for Apple PackBits run-length encoding.</color>
<color=#75715e> *</color>
<color=#75715e> * <p><small>From Wikipedia, the free encyclopedia</small><br></color>
<color=#75715e> * PackBits is a fast, simple compression scheme for run-length encoding of data.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Apple introduced the PackBits format with the release of MacPaint on the Macintosh computer.</color>
<color=#75715e> * This compression scheme is one of the types of compression that can be used in TIFF-files.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>A PackBits data stream consists of packets of one byte of header followed by data. The header</color>
<color=#75715e> * is a signed byte; the data can be signed, unsigned, or packed (such as MacPaint pixels).</color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * <table><tr><th>Header byte</th><th>Data</th></tr></color>
<color=#75715e> * <tr><td>0 to 127</td>    <td>1 + <i>n</i> literal bytes of data</td></tr></color>
<color=#75715e> * <tr><td>0 to -127</td>   <td>One byte of data, repeated 1 - <i>n</i> times in</color>
<color=#75715e> *                           the decompressed output</td></tr></color>
<color=#75715e> * <tr><td>-128</td>        <td>No operation</td></tr></table></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Note that interpreting 0 as positive or negative makes no difference in the output. Runs of</color>
<color=#75715e> * two bytes adjacent to non-runs are typically written as literal data.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>See <a href="http://developer.apple.com/technotes/tn/tn1023.html">Understanding PackBits</a></color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @version $Id:</color>
<color=#75715e> * //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/io/enc/PackBitsDecoder.java#1</color>
<color=#75715e> * $</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>PackBitsDecoder</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Decoder</color> <color=#f8f8f2>{</color>
    <color=#75715e>// TODO: Look at ICNSImageReader#unpackbits... What is this weirdness?</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>disableNoOp</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>sample</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>leftOfRun</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>splitRun</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>reachedEOF</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@code PackBitsDecoder}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>PackBitsDecoder</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@code PackBitsDecoder}, with optional compatibility mode.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>As some implementations of PackBits-like encoders treat {@code -128} as length of a</color>
<color=#75715e>     * compressed run, instead of a no-op, it's possible to disable no-ops for compatibility. Should</color>
<color=#75715e>     * be used with caution, even though, most known encoders never write no-ops in the compressed</color>
<color=#75715e>     * streams.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param disableNoOp {@code true} if {@code -128} should be treated as a compressed run, and not</color>
<color=#75715e>     *                    a no-op</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>PackBitsDecoder</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>disableNoOp</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>disableNoOp</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@code PackBitsDecoder}, with optional compatibility mode.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>As some implementations of PackBits-like encoders treat {@code -128} as length of a</color>
<color=#75715e>     * compressed run, instead of a no-op, it's possible to disable no-ops for compatibility. Should</color>
<color=#75715e>     * be used with caution, even though, most known encoders never write no-ops in the compressed</color>
<color=#75715e>     * streams.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param disableNoOp {@code true} if {@code -128} should be treated as a compressed run, and not</color>
<color=#75715e>     *                    a no-op</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>PackBitsDecoder</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>sampleSize</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>disableNoOp</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>sample</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>sampleSize</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>disableNoOp</color> <color=#f92672>=</color> <color=#f8f8f2>disableNoOp</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Decodes bytes from the given input stream, to the given buffer.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param stream the stream to decode from</color>
<color=#75715e>     * @param buffer a byte array, minimum 128 (or 129 if no-op is disabled) bytes long</color>
<color=#75715e>     * @return The number of bytes decoded</color>
<color=#75715e>     * @throws IOException</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>decode</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>InputStream</color> <color=#f8f8f2>stream</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>reachedEOF</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// TODO: Don't decode more than single runs, because some writers add pad bytes inside the</color>
        <color=#75715e>// stream...</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>hasRemaining</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>splitRun</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Continue run</color>
                <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>leftOfRun</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>splitRun</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Start new run</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>reachedEOF</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Split run at or before max</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672>>=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>n</color> <color=#f92672>+</color> <color=#ae81ff>1</color> <color=#f92672>></color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>remaining</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>leftOfRun</color> <color=#f92672>=</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>splitRun</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f92672>-</color><color=#f8f8f2>n</color> <color=#f92672>+</color> <color=#ae81ff>1</color> <color=#f92672>></color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>remaining</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>leftOfRun</color> <color=#f92672>=</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>splitRun</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// Copy next n + 1 bytes literally</color>
                    <color=#f8f8f2>readFully</color><color=#f8f8f2>(</color><color=#f8f8f2>stream</color><color=#f8f8f2>,</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>sample</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>}</color>
                <color=#75715e>// Allow -128 for compatibility, see above</color>
                <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>disableNoOp</color> <color=#f92672>||</color> <color=#f8f8f2>n</color> <color=#f92672>!=</color> <color=#f92672>-</color><color=#ae81ff>128</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// Replicate the next byte -n + 1 times</color>
                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>s</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>s</color> <color=#f92672><</color> <color=#f8f8f2>sample</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>s</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>sample</color><color=#f92672>[</color><color=#f8f8f2>s</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>readByte</color><color=#f8f8f2>(</color><color=#f8f8f2>stream</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>n</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>sample</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
                <color=#75715e>// else NOOP (-128)</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>DecodeException</color><color=#f8f8f2>(</color><color=#e6db74>"Error in PackBits decompression, data seems corrupt"</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>byte</color> <color=#a6e22e>readByte</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>InputStream</color> <color=#f8f8f2>pStream</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>read</color> <color=#f92672>=</color> <color=#f8f8f2>pStream</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>read</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EOFException</color><color=#f8f8f2>(</color><color=#e6db74>"Unexpected end of PackBits stream"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>read</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>readFully</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>InputStream</color> <color=#f8f8f2>pStream</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>pBuffer</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLength</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#e6db74>"Negative length: %d"</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>total</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>total</color> <color=#f92672><</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color>
                    <color=#f8f8f2>pStream</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color>
                            <color=#f8f8f2>pBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>array</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>arrayOffset</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>pBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>total</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength</color> <color=#f92672>-</color> <color=#f8f8f2>total</color><color=#f8f8f2>);</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>count</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EOFException</color><color=#f8f8f2>(</color><color=#e6db74>"Unexpected end of PackBits stream"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>total</color> <color=#f92672>+=</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>pBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>(</color><color=#f8f8f2>pBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>total</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>