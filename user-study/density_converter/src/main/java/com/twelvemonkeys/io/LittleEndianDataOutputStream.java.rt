<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>
<color=#75715e>/*</color>
<color=#75715e> * From http://www.cafeaulait.org/books/javaio/ioexamples/index.html:</color>
<color=#75715e> *</color>
<color=#75715e> * Please feel free to use any fragment of this code you need in your own work.</color>
<color=#75715e> * As far as I am concerned, it's in the public domain. No permission is necessary</color>
<color=#75715e> * or required.  Credit is always appreciated if you use a large chunk or base a</color>
<color=#75715e> * significant product on one of my examples, but that's not required either.</color>
<color=#75715e> *</color>
<color=#75715e> * Elliotte Rusty Harold</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.io</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.lang.Validate</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A little endian output stream writes primitive Java numbers and characters to an output stream in</color>
<color=#75715e> * a little endian format.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The standard {@code java.io.DataOutputStream} class which this class imitates uses big endian</color>
<color=#75715e> * integers.</color>
<color=#75715e> *</color>
<color=#75715e> * <p><em>Warning:</color>
<color=#75715e> * <!-- Beware of little indians! --></color>
<color=#75715e> * The {@code DataInput} and {@code DataOutput} interfaces specifies big endian byte order in their</color>
<color=#75715e> * documentation. This means that this class is, strictly speaking, not a proper implementation.</color>
<color=#75715e> * However, I don't see a reason for the these interfaces to specify the byte order of their</color>
<color=#75715e> * underlying representations. </em></color>
<color=#75715e> *</color>
<color=#75715e> * @author Elliotte Rusty Harold</color>
<color=#75715e> * @version 1.0.1, 19 May 1999</color>
<color=#75715e> * @see LittleEndianRandomAccessFile</color>
<color=#75715e> * @see DataOutputStream</color>
<color=#75715e> * @see DataInput</color>
<color=#75715e> * @see DataOutput</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>LittleEndianDataOutputStream</color> <color=#66d9ef>extends</color> <color=#f8f8f2>FilterOutputStream</color> <color=#66d9ef>implements</color> <color=#f8f8f2>DataOutput</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The number of bytes written so far to the little endian output stream.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>int</color> <color=#f8f8f2>bytesWritten</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a new little endian output stream and chains it to the output stream specified by the</color>
<color=#75715e>     * {@code pStream} argument.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pStream the underlying output stream.</color>
<color=#75715e>     * @see FilterOutputStream#out</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>LittleEndianDataOutputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>OutputStream</color> <color=#f8f8f2>pStream</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>Validate</color><color=#f8f8f2>.</color><color=#a6e22e>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>pStream</color><color=#f8f8f2>,</color> <color=#e6db74>"stream"</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes the specified byte value to the underlying output stream.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pByte the {@code byte} value to be written.</color>
<color=#75715e>     * @throws IOException if the underlying stream throws an IOException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pByte</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>pByte</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>bytesWritten</color><color=#f92672>++</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes {@code pLength} bytes from the specified byte array starting at {@code pOffset} to the</color>
<color=#75715e>     * underlying output stream.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pBytes  the data.</color>
<color=#75715e>     * @param pOffset the start offset in the data.</color>
<color=#75715e>     * @param pLength the number of bytes to write.</color>
<color=#75715e>     * @throws IOException if the underlying stream throws an IOException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pBytes</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>pBytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>bytesWritten</color> <color=#f92672>+=</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes a {@code boolean} to the underlying output stream as a single byte. If the argument is</color>
<color=#75715e>     * true, the byte value 1 is written. If the argument is false, the byte value {@code 0} in</color>
<color=#75715e>     * written.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pBoolean the {@code boolean} value to be written.</color>
<color=#75715e>     * @throws IOException if the underlying stream throws an IOException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeBoolean</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>pBoolean</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pBoolean</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>write</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>write</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes out a {@code byte} to the underlying output stream</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pByte the {@code byte} value to be written.</color>
<color=#75715e>     * @throws IOException if the underlying stream throws an IOException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeByte</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pByte</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>pByte</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>bytesWritten</color><color=#f92672>++</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes a two byte {@code short} to the underlying output stream in little endian order, low</color>
<color=#75715e>     * byte first.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pShort the {@code short} to be written.</color>
<color=#75715e>     * @throws IOException if the underlying stream throws an IOException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeShort</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pShort</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>pShort</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#f8f8f2>pShort</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>bytesWritten</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes a two byte {@code char} to the underlying output stream in little endian order, low byte</color>
<color=#75715e>     * first.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pChar the {@code char} value to be written.</color>
<color=#75715e>     * @throws IOException if the underlying stream throws an IOException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeChar</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pChar</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>pChar</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#f8f8f2>pChar</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>bytesWritten</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes a four-byte {@code int} to the underlying output stream in little endian order, low byte</color>
<color=#75715e>     * first, high byte last</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pInt the {@code int} to be written.</color>
<color=#75715e>     * @throws IOException if the underlying stream throws an IOException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeInt</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pInt</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>pInt</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#f8f8f2>pInt</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#f8f8f2>pInt</color> <color=#f92672>>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#f8f8f2>pInt</color> <color=#f92672>>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>bytesWritten</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes an eight-byte {@code long} to the underlying output stream in little endian order, low</color>
<color=#75715e>     * byte first, high byte last</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pLong the {@code long} to be written.</color>
<color=#75715e>     * @throws IOException if the underlying stream throws an IOException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeLong</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>pLong</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>pLong</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLong</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLong</color> <color=#f92672>>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLong</color> <color=#f92672>>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLong</color> <color=#f92672>>>></color> <color=#ae81ff>32</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLong</color> <color=#f92672>>>></color> <color=#ae81ff>40</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLong</color> <color=#f92672>>>></color> <color=#ae81ff>48</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLong</color> <color=#f92672>>>></color> <color=#ae81ff>56</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>bytesWritten</color> <color=#f92672>+=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes a 4 byte Java float to the underlying output stream in little endian order.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param f the {@code float} value to be written.</color>
<color=#75715e>     * @throws IOException if an I/O error occurs.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>writeFloat</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>f</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>writeInt</color><color=#f8f8f2>(</color><color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>floatToIntBits</color><color=#f8f8f2>(</color><color=#f8f8f2>f</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes an 8 byte Java double to the underlying output stream in little endian order.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param d the {@code double} value to be written.</color>
<color=#75715e>     * @throws IOException if an I/O error occurs.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>writeDouble</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>d</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>writeLong</color><color=#f8f8f2>(</color><color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>doubleToLongBits</color><color=#f8f8f2>(</color><color=#f8f8f2>d</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes a string to the underlying output stream as a sequence of bytes. Each character is</color>
<color=#75715e>     * written to the data output stream as if by the {@link #writeByte(int)} method.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString the {@code String} value to be written.</color>
<color=#75715e>     * @throws IOException if the underlying stream throws an IOException.</color>
<color=#75715e>     * @see #writeByte(int)</color>
<color=#75715e>     * @see #out</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>bytesWritten</color> <color=#f92672>+=</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes a string to the underlying output stream as a sequence of characters. Each character is</color>
<color=#75715e>     * written to the data output stream as if by the {@code writeChar} method.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString a {@code String} value to be written.</color>
<color=#75715e>     * @throws IOException if the underlying stream throws an IOException.</color>
<color=#75715e>     * @see #writeChar(int)</color>
<color=#75715e>     * @see #out</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeChars</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#f8f8f2>c</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>bytesWritten</color> <color=#f92672>+=</color> <color=#f8f8f2>length</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes a string of no more than 65,535 characters to the underlying output stream using UTF-8</color>
<color=#75715e>     * encoding. This method first writes a two byte short in <b>big</b> endian order as required by</color>
<color=#75715e>     * the UTF-8 specification. This gives the number of bytes in the UTF-8 encoded version of the</color>
<color=#75715e>     * string, not the number of characters in the string. Next each character of the string is</color>
<color=#75715e>     * written using the UTF-8 encoding for the character.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString the string to be written.</color>
<color=#75715e>     * @throws UTFDataFormatException if the string is longer than 65,535 characters.</color>
<color=#75715e>     * @throws IOException            if the underlying stream throws an IOException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeUTF</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>numchars</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>numbytes</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>numchars</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>c</color> <color=#f92672>>=</color> <color=#ae81ff>0x0001</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672><=</color> <color=#ae81ff>0x007F</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>numbytes</color><color=#f92672>++</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>></color> <color=#ae81ff>0x07FF</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>numbytes</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>numbytes</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>numbytes</color> <color=#f92672>></color> <color=#ae81ff>65535</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UTFDataFormatException</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#f8f8f2>numbytes</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>numbytes</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>numchars</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>c</color> <color=#f92672>>=</color> <color=#ae81ff>0x0001</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672><=</color> <color=#ae81ff>0x007F</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>></color> <color=#ae81ff>0x07FF</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#ae81ff>0xE0</color> <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>c</color> <color=#f92672>>></color> <color=#ae81ff>12</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0x0F</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#ae81ff>0x80</color> <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>c</color> <color=#f92672>>></color> <color=#ae81ff>6</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0x3F</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#ae81ff>0x80</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>&</color> <color=#ae81ff>0x3F</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>bytesWritten</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#ae81ff>0xC0</color> <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>c</color> <color=#f92672>>></color> <color=#ae81ff>6</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0x1F</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#ae81ff>0x80</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>&</color> <color=#ae81ff>0x3F</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>bytesWritten</color> <color=#f92672>+=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>bytesWritten</color> <color=#f92672>+=</color> <color=#f8f8f2>numchars</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the number of bytes written to this little endian output stream. (This class is not</color>
<color=#75715e>     * thread-safe with respect to this method. It is possible that this number is temporarily less</color>
<color=#75715e>     * than the actual number of bytes written.)</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the value of the {@code written} field.</color>
<color=#75715e>     * @see #bytesWritten</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>bytesWritten</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>