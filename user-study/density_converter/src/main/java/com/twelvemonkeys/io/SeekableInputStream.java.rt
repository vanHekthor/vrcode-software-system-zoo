<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.io</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.InputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Stack</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Abstract base class for {@code InputStream}s implementing the {@code Seekable} interface.</color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @version $Id:</color>
<color=#75715e> * //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/io/SeekableInputStream.java#4</color>
<color=#75715e> * $</color>
<color=#75715e> * @see SeekableOutputStream</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>SeekableInputStream</color> <color=#66d9ef>extends</color> <color=#f8f8f2>InputStream</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Seekable</color> <color=#f8f8f2>{</color>

    <color=#75715e>// TODO: It's at the moment not possible to create subclasses outside this</color>
    <color=#75715e>// package, as there's no access to position. position needs to be</color>
    <color=#75715e>// updated from the read/read/read methods...</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The stream position in this stream</color>
<color=#75715e>     */</color>
    <color=#66d9ef>long</color> <color=#f8f8f2>position</color><color=#f8f8f2>;</color>

    <color=#66d9ef>long</color> <color=#f8f8f2>flushedPosition</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>closed</color><color=#f8f8f2>;</color>

    <color=#66d9ef>protected</color> <color=#f8f8f2>Stack</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color> <color=#f8f8f2>markedPositions</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Stack</color><color=#f92672><</color><color=#f8f8f2>Long</color><color=#f92672>></color><color=#f8f8f2>();</color>

    <color=#75715e>/// InputStream overrides</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pBytes</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>read</color><color=#f8f8f2>(</color><color=#f8f8f2>pBytes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>pBytes</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>pBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f8f8f2>:</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Implemented using {@code seek(currentPos + pLength)}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pLength the number of bytes to skip</color>
<color=#75715e>     * @return the actual number of bytes skipped (may be equal to or less than {@code pLength})</color>
<color=#75715e>     * @throws IOException if an I/O exception occurs during skip</color>
<color=#75715e>     */</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#a6e22e>skip</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>pos</color> <color=#f92672>=</color> <color=#f8f8f2>position</color><color=#f8f8f2>;</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>wantedPosition</color> <color=#f92672>=</color> <color=#f8f8f2>pos</color> <color=#f92672>+</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>wantedPosition</color> <color=#f92672><</color> <color=#f8f8f2>flushedPosition</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"position < flushedPosition"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Stop at stream length for compatibility, even though it might be allowed</color>
        <color=#75715e>// to seek past end of stream</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>available</color> <color=#f92672>=</color> <color=#f8f8f2>available</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>available</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>wantedPosition</color><color=#f8f8f2>,</color> <color=#f8f8f2>pos</color> <color=#f92672>+</color> <color=#f8f8f2>available</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>// TODO: Add optimization for streams with known length!</color>
        <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Slow mode...</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>toSkip</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>pLength</color><color=#f8f8f2>,</color> <color=#ae81ff>512</color><color=#f8f8f2>),</color> <color=#f92672>-</color><color=#ae81ff>512</color><color=#f8f8f2>);</color>
            <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>toSkip</color> <color=#f92672>></color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>read</color><color=#f8f8f2>()</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>toSkip</color><color=#f92672>--</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>position</color> <color=#f92672>-</color> <color=#f8f8f2>pos</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>mark</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pLimit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>mark</color><color=#f8f8f2>();</color>

        <color=#75715e>// TODO: We don't really need to do this.. Is it a good idea?</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>flushBefore</color><color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>position</color> <color=#f92672>-</color> <color=#f8f8f2>pLimit</color><color=#f8f8f2>,</color> <color=#f8f8f2>flushedPosition</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Ignore, as it's not really critical</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns {@code true}, as marking is always supported.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return {@code true}.</color>
<color=#75715e>     */</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>markSupported</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/// Seekable implementation</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>pPosition</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>

        <color=#75715e>// NOTE: This is correct according to javax.imageio (IndexOutOfBoundsException),</color>
        <color=#75715e>// but it's kind of inconsistent with reset that throws IOException...</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pPosition</color> <color=#f92672><</color> <color=#f8f8f2>flushedPosition</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>(</color><color=#e6db74>"position < flushedPosition"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>seekImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>pPosition</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>position</color> <color=#f92672>=</color> <color=#f8f8f2>pPosition</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>abstract</color> <color=#66d9ef>void</color> <color=#a6e22e>seekImpl</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>pPosition</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>mark</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>markedPositions</color><color=#f8f8f2>.</color><color=#a6e22e>push</color><color=#f8f8f2>(</color><color=#f8f8f2>position</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>reset</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>markedPositions</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>long</color> <color=#f8f8f2>newPos</color> <color=#f92672>=</color> <color=#f8f8f2>markedPositions</color><color=#f8f8f2>.</color><color=#a6e22e>pop</color><color=#f8f8f2>();</color>

            <color=#75715e>// NOTE: This is correct according to javax.imageio (IOException),</color>
            <color=#75715e>// but it's kind of inconsistent with seek that throws IndexOutOfBoundsException...</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newPos</color> <color=#f92672><</color> <color=#f8f8f2>flushedPosition</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"Previous marked position has been discarded"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>newPos</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#75715e>// TODO: To iron out some wrinkles due to conflicting contracts</color>
            <color=#75715e>// (InputStream and Seekable both declare reset),</color>
            <color=#75715e>// we might need to reset to the last marked position instead..</color>
            <color=#75715e>// However, that becomes REALLY confusing if that position is after</color>
            <color=#75715e>// the current position...</color>
            <color=#f8f8f2>seek</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>flushBefore</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>pPosition</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pPosition</color> <color=#f92672><</color> <color=#f8f8f2>flushedPosition</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>(</color><color=#e6db74>"position < flushedPosition"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pPosition</color> <color=#f92672>></color> <color=#f8f8f2>getStreamPosition</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>(</color><color=#e6db74>"position > stream position"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>flushBeforeImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>pPosition</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>flushedPosition</color> <color=#f92672>=</color> <color=#f8f8f2>pPosition</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Discards the initial portion of the stream prior to the indicated postion.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pPosition the position to flush to</color>
<color=#75715e>     * @throws IOException if an I/O exception occurs during the flush operation</color>
<color=#75715e>     * @see #flushBefore(long)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>abstract</color> <color=#66d9ef>void</color> <color=#a6e22e>flushBeforeImpl</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>pPosition</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>flush</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>flushBefore</color><color=#f8f8f2>(</color><color=#f8f8f2>flushedPosition</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#a6e22e>getFlushedPosition</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>flushedPosition</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#a6e22e>getStreamPosition</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>position</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>checkOpen</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>closed</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"closed"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>closed</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>closeImpl</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>abstract</color> <color=#66d9ef>void</color> <color=#a6e22e>closeImpl</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Finalizes this object prior to garbage collection. The {@code close} method is called to close</color>
<color=#75715e>     * any open input source. This method should not be called from application code.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @throws Throwable if an error occurs during superclass finalization.</color>
<color=#75715e>     */</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>finalize</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>Throwable</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>closed</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>close</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Ignroe</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>finalize</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>