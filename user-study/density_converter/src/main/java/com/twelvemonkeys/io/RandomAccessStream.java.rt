<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.io</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.DataInput</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.DataOutput</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.EOFException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A data stream that is both readable and writable, much like a {@code RandomAccessFile}, except it</color>
<color=#75715e> * may be backed by something other than a file.</color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haku $</color>
<color=#75715e> * @version $Id:</color>
<color=#75715e> * //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/io/RandomAccessStream.java#3</color>
<color=#75715e> * $</color>
<color=#75715e> * @see java.io.RandomAccessFile</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>RandomAccessStream</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Seekable</color><color=#f8f8f2>,</color> <color=#f8f8f2>DataInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>DataOutput</color> <color=#f8f8f2>{</color>
    <color=#75715e>// TODO: Use a RandomAcceessFile as backing in impl, probably</color>
    <color=#75715e>// TODO: Create an in-memory implementation too?</color>
    <color=#75715e>// TODO: Package private SeekableDelegate?</color>

    <color=#75715e>// TODO: Both read and write must update stream position</color>
    <color=#75715e>// private int position = -1;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * This random access stream, wrapped in an {@code InputStream}</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>SeekableInputStream</color> <color=#f8f8f2>inputView</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#75715e>/**</color>
<color=#75715e>     * This random access stream, wrapped in an {@code OutputStream}</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>SeekableOutputStream</color> <color=#f8f8f2>outputView</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#75715e>// TODO: Create an Input and an Output interface matching InputStream and OutputStream?</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>readByte</color><color=#f8f8f2>()</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>EOFException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pBytes</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pBytes</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"bytes == null"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pOffset</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color>
                <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>pOffset</color> <color=#f92672>></color> <color=#f8f8f2>pBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color>
                <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLength</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color>
                <color=#f92672>||</color> <color=#f8f8f2>((</color><color=#f8f8f2>pOffset</color> <color=#f92672>+</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#f92672>></color> <color=#f8f8f2>pBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color>
                <color=#f92672>||</color> <color=#f8f8f2>((</color><color=#f8f8f2>pOffset</color> <color=#f92672>+</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLength</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Special case, allready at EOF</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>read</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Otherwise, read as many as bytes as possible</color>
        <color=#f8f8f2>pBytes</color><color=#f92672>[</color><color=#f8f8f2>pOffset</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>c</color><color=#f8f8f2>;</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>read</color><color=#f8f8f2>();</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#f8f8f2>pBytes</color><color=#f92672>[</color><color=#f8f8f2>pOffset</color> <color=#f92672>+</color> <color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>c</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Ignore exception, just return length</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pBytes</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>read</color><color=#f8f8f2>(</color><color=#f8f8f2>pBytes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>pBytes</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>pBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f8f8f2>:</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns an input view of this {@code RandomAccessStream}. Invoking this method several times,</color>
<color=#75715e>     * will return the same object.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p><em>Note that read access is NOT synchronized.</em></color>
<color=#75715e>     *</color>
<color=#75715e>     * @return a {@code SeekableInputStream} reading from this stream</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>SeekableInputStream</color> <color=#a6e22e>asInputStream</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>inputView</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>inputView</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>InputStreamView</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>inputView</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns an output view of this {@code RandomAccessStream}. Invoking this method several times,</color>
<color=#75715e>     * will return the same object.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p><em>Note that write access is NOT synchronized.</em></color>
<color=#75715e>     *</color>
<color=#75715e>     * @return a {@code SeekableOutputStream} writing to this stream</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>SeekableOutputStream</color> <color=#a6e22e>asOutputStream</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>outputView</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>outputView</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>OutputStreamView</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>outputView</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>InputStreamView</color> <color=#66d9ef>extends</color> <color=#f8f8f2>SeekableInputStream</color> <color=#f8f8f2>{</color>
        <color=#75715e>// TODO: Consider adding synchonization (on stream) for all operations</color>
        <color=#75715e>// TODO: Is is a good thing that close/flush etc works on stream?</color>
        <color=#75715e>//  - Or should it rather just work on the views?</color>
        <color=#75715e>//  - Allow multiple views?</color>

        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>RandomAccessStream</color> <color=#f8f8f2>mStream</color><color=#f8f8f2>;</color>

        <color=#66d9ef>public</color> <color=#a6e22e>InputStreamView</color><color=#f8f8f2>(</color><color=#f8f8f2>RandomAccessStream</color> <color=#f8f8f2>pStream</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pStream</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"stream == null"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>mStream</color> <color=#f92672>=</color> <color=#f8f8f2>pStream</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isCached</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>mStream</color><color=#f8f8f2>.</color><color=#a6e22e>isCached</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isCachedFile</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>mStream</color><color=#f8f8f2>.</color><color=#a6e22e>isCachedFile</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isCachedMemory</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>mStream</color><color=#f8f8f2>.</color><color=#a6e22e>isCachedMemory</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>closeImpl</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>mStream</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>flushBeforeImpl</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>pPosition</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>mStream</color><color=#f8f8f2>.</color><color=#a6e22e>flushBefore</color><color=#f8f8f2>(</color><color=#f8f8f2>pPosition</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>seekImpl</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>pPosition</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>mStream</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>pPosition</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>mStream</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#a6e22e>@Override</color>
        <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color> <color=#f8f8f2>pBytes</color><color=#f92672>[]</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>mStream</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>pBytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>OutputStreamView</color> <color=#66d9ef>extends</color> <color=#f8f8f2>SeekableOutputStream</color> <color=#f8f8f2>{</color>
        <color=#75715e>// TODO: Consider adding synchonization (on stream) for all operations</color>
        <color=#75715e>// TODO: Is is a good thing that close/flush etc works on stream?</color>
        <color=#75715e>//  - Or should it rather just work on the views?</color>
        <color=#75715e>//  - Allow multiple views?</color>

        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>RandomAccessStream</color> <color=#f8f8f2>mStream</color><color=#f8f8f2>;</color>

        <color=#66d9ef>public</color> <color=#a6e22e>OutputStreamView</color><color=#f8f8f2>(</color><color=#f8f8f2>RandomAccessStream</color> <color=#f8f8f2>pStream</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pStream</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"stream == null"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>mStream</color> <color=#f92672>=</color> <color=#f8f8f2>pStream</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isCached</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>mStream</color><color=#f8f8f2>.</color><color=#a6e22e>isCached</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isCachedFile</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>mStream</color><color=#f8f8f2>.</color><color=#a6e22e>isCachedFile</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isCachedMemory</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>mStream</color><color=#f8f8f2>.</color><color=#a6e22e>isCachedMemory</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>closeImpl</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>mStream</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>flushBeforeImpl</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>pPosition</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>mStream</color><color=#f8f8f2>.</color><color=#a6e22e>flushBefore</color><color=#f8f8f2>(</color><color=#f8f8f2>pPosition</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>seekImpl</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>pPosition</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>mStream</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>pPosition</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pByte</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>mStream</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>pByte</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#a6e22e>@Override</color>
        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color> <color=#f8f8f2>pBytes</color><color=#f92672>[]</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>mStream</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>pBytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>