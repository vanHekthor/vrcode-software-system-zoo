<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.io.enc</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.OutputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteBuffer</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * {@code Encoder} implementation for standard base64 encoding.</color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @version $Id:</color>
<color=#75715e> * //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/io/enc/Base64Encoder.java#2</color>
<color=#75715e> * $</color>
<color=#75715e> * @see <a href="http://tools.ietf.org/html/rfc1421">RFC 1421</a></color>
<color=#75715e> * @see <a href="http://tools.ietf.org/html/rfc2045"RFC 2045</a></color>
<color=#75715e> * @see Base64Decoder</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Base64Encoder</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Encoder</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>encode</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>OutputStream</color> <color=#f8f8f2>stream</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

        <color=#75715e>// TODO: Implement</color>
        <color=#75715e>// NOTE: This is impossible, given the current spec, as we need to either:</color>
        <color=#75715e>//  - buffer all data in the EncoderStream</color>
        <color=#75715e>//  - or have flush/end method(s) in the Encoder</color>
        <color=#75715e>// to ensure proper end of stream handling</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color>

        <color=#75715e>// TODO: Temp impl, will only work for single writes</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>hasRemaining</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>byte</color> <color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>;</color>

            <color=#75715e>//            if ((buffer.remaining()) > 2) {</color>
            <color=#75715e>//                length = 3;</color>
            <color=#75715e>//            }</color>
            <color=#75715e>//            else {</color>
            <color=#75715e>//                length = buffer.remaining();</color>
            <color=#75715e>//            }</color>
            <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#ae81ff>3</color><color=#f8f8f2>,</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>remaining</color><color=#f8f8f2>());</color>

            <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>case</color> <color=#ae81ff>1</color><color=#f8f8f2>:</color>
                    <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>Base64Decoder</color><color=#f8f8f2>.</color><color=#a6e22e>PEM_ARRAY</color><color=#f92672>[</color><color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672>>>></color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0x3F</color><color=#f92672>]</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>Base64Decoder</color><color=#f8f8f2>.</color><color=#a6e22e>PEM_ARRAY</color><color=#f92672>[</color><color=#f8f8f2>((</color><color=#f8f8f2>a</color> <color=#f92672><<</color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0x30</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>b</color> <color=#f92672>>>></color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xf</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#e6db74>'='</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#e6db74>'='</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>

                <color=#66d9ef>case</color> <color=#ae81ff>2</color><color=#f8f8f2>:</color>
                    <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>Base64Decoder</color><color=#f8f8f2>.</color><color=#a6e22e>PEM_ARRAY</color><color=#f92672>[</color><color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672>>>></color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0x3F</color><color=#f92672>]</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>Base64Decoder</color><color=#f8f8f2>.</color><color=#a6e22e>PEM_ARRAY</color><color=#f92672>[</color><color=#f8f8f2>((</color><color=#f8f8f2>a</color> <color=#f92672><<</color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0x30</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>b</color> <color=#f92672>>>></color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xf</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>Base64Decoder</color><color=#f8f8f2>.</color><color=#a6e22e>PEM_ARRAY</color><color=#f92672>[</color><color=#f8f8f2>((</color><color=#f8f8f2>b</color> <color=#f92672><<</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0x3c</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>c</color> <color=#f92672>>>></color> <color=#ae81ff>6</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0x3</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#e6db74>'='</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>

                <color=#66d9ef>default</color><color=#f8f8f2>:</color>
                    <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>Base64Decoder</color><color=#f8f8f2>.</color><color=#a6e22e>PEM_ARRAY</color><color=#f92672>[</color><color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672>>>></color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0x3F</color><color=#f92672>]</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>Base64Decoder</color><color=#f8f8f2>.</color><color=#a6e22e>PEM_ARRAY</color><color=#f92672>[</color><color=#f8f8f2>((</color><color=#f8f8f2>a</color> <color=#f92672><<</color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0x30</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>b</color> <color=#f92672>>>></color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xf</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>Base64Decoder</color><color=#f8f8f2>.</color><color=#a6e22e>PEM_ARRAY</color><color=#f92672>[</color><color=#f8f8f2>((</color><color=#f8f8f2>b</color> <color=#f92672><<</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0x3c</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>c</color> <color=#f92672>>>></color> <color=#ae81ff>6</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0x3</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>Base64Decoder</color><color=#f8f8f2>.</color><color=#a6e22e>PEM_ARRAY</color><color=#f92672>[</color><color=#f8f8f2>c</color> <color=#f92672>&</color> <color=#ae81ff>0x3F</color><color=#f92672>]</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>