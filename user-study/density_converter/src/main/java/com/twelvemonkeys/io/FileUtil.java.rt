<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.io</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.lang.StringUtil</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.lang.Validate</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.util.Visitor</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.InvocationTargetException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Method</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.UndeclaredThrowableException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.net.URL</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.text.NumberFormat</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A utility class with some useful file and i/o related methods.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>Versions exists take Input and OutputStreams as parameters, to allow for copying streams</color>
<color=#75715e> * (URL's etc.).</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author <A href="mailto:eirik.torske@iconmedialab.no">Eirik Torske</A></color>
<color=#75715e> * @author last modified by $Author: haku $</color>
<color=#75715e> * @version $Id:</color>
<color=#75715e> * //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/io/FileUtil.java#3</color>
<color=#75715e> * $</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>FileUtil</color> <color=#f8f8f2>{</color>
    <color=#75715e>// TODO: Be more cosequent using resolve() all places where File objects are involved</color>
    <color=#75715e>// TODO: Parameter handling (allow null vs IllegalArgument)</color>
    <color=#75715e>// TODO: Exception handling</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The size of the buffer used for copying</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BUF_SIZE</color> <color=#f92672>=</color> <color=#ae81ff>1024</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#f8f8f2>TEMP_DIR</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>FileSystem</color> <color=#f8f8f2>FS</color> <color=#f92672>=</color> <color=#f8f8f2>FileSystem</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>main</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>pArgs</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>File</color> <color=#f8f8f2>file</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>startsWith</color><color=#f8f8f2>(</color><color=#e6db74>"file:"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>file</color> <color=#f92672>=</color> <color=#f8f8f2>toFile</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>URL</color><color=#f8f8f2>(</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>file</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>toURL</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Free space: "</color> <color=#f92672>+</color> <color=#f8f8f2>getFreeSpace</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#e6db74>"/"</color> <color=#f92672>+</color> <color=#f8f8f2>getTotalSpace</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#e6db74>" bytes"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

  <color=#75715e>/*</color>
<color=#75715e>   * Method main for test only.</color>
<color=#75715e>   *</color>
<color=#75715e>  public static void main0(String[] pArgs) {</color>
<color=#75715e>      if (pArgs.length != 2) {</color>
<color=#75715e>          System.out.println("usage: java Copy in out");</color>
<color=#75715e>          return;</color>
<color=#75715e>      }</color>
<color=#75715e>      try {</color>
<color=#75715e>          if (!copy(pArgs[0], pArgs[1])) {</color>
<color=#75715e>              System.out.println("Error copying");</color>
<color=#75715e>          }</color>
<color=#75715e>      }</color>
<color=#75715e>      catch (IOException e) {</color>
<color=#75715e>          System.out.println(e.getMessage());</color>
<color=#75715e>      }</color>
<color=#75715e>  }</color>
<color=#75715e>  //*/</color>

    <color=#75715e>// Avoid instances/constructor showing up in API doc</color>
    <color=#66d9ef>private</color> <color=#a6e22e>FileUtil</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Copies the fromFile to the toFile location. If toFile is a directory, a new file is created in</color>
<color=#75715e>     * that directory, with the name of the fromFile. If the toFile exists, the file will not be</color>
<color=#75715e>     * copied, unless owerWrite is true.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFromFileName The name of the file to copy from</color>
<color=#75715e>     * @param pToFileName   The name of the file to copy to</color>
<color=#75715e>     * @return true if the file was copied successfully, false if the output file exists. In all other</color>
<color=#75715e>     * cases, an IOException is thrown, and the method does not return a value.</color>
<color=#75715e>     * @throws IOException if an i/o error occurs during copy</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>copy</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pFromFileName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pToFileName</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>copy</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pFromFileName</color><color=#f8f8f2>),</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pToFileName</color><color=#f8f8f2>),</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Copies the fromFile to the toFile location. If toFile is a directory, a new file is created in</color>
<color=#75715e>     * that directory, with the name of the fromFile. If the toFile exists, the file will not be</color>
<color=#75715e>     * copied, unless owerWrite is true.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFromFileName The name of the file to copy from</color>
<color=#75715e>     * @param pToFileName   The name of the file to copy to</color>
<color=#75715e>     * @param pOverWrite    Specifies if the toFile should be overwritten, if it exists.</color>
<color=#75715e>     * @return true if the file was copied successfully, false if the output file exists, and the</color>
<color=#75715e>     * owerWrite parameter is false. In all other cases, an IOException is thrown, and the method</color>
<color=#75715e>     * does not return a value.</color>
<color=#75715e>     * @throws IOException if an i/o error occurs during copy</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>copy</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pFromFileName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pToFileName</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pOverWrite</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>copy</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pFromFileName</color><color=#f8f8f2>),</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pToFileName</color><color=#f8f8f2>),</color> <color=#f8f8f2>pOverWrite</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Copies the fromFile to the toFile location. If toFile is a directory, a new file is created in</color>
<color=#75715e>     * that directory, with the name of the fromFile. If the toFile exists, the file will not be</color>
<color=#75715e>     * copied, unless owerWrite is true.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFromFile The file to copy from</color>
<color=#75715e>     * @param pToFile   The file to copy to</color>
<color=#75715e>     * @return true if the file was copied successfully, false if the output file exists. In all other</color>
<color=#75715e>     * cases, an IOException is thrown, and the method does not return a value.</color>
<color=#75715e>     * @throws IOException if an i/o error occurs during copy</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>copy</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>pFromFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>File</color> <color=#f8f8f2>pToFile</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>copy</color><color=#f8f8f2>(</color><color=#f8f8f2>pFromFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>pToFile</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Copies the fromFile to the toFile location. If toFile is a directory, a new file is created in</color>
<color=#75715e>     * that directory, with the name of the fromFile. If the toFile exists, the file will not be</color>
<color=#75715e>     * copied, unless owerWrite is true.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFromFile  The file to copy from</color>
<color=#75715e>     * @param pToFile    The file to copy to</color>
<color=#75715e>     * @param pOverWrite Specifies if the toFile should be overwritten, if it exists.</color>
<color=#75715e>     * @return {@code true} if the file was copied successfully, {@code false} if the output file</color>
<color=#75715e>     * exists, and the {@code pOwerWrite} parameter is {@code false}. In all other cases, an</color>
<color=#75715e>     * {@code IOExceptio}n is thrown, and the method does not return.</color>
<color=#75715e>     * @throws IOException if an i/o error occurs during copy</color>
<color=#75715e>     * @todo Test copyDir functionality!</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>copy</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>pFromFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>File</color> <color=#f8f8f2>pToFile</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pOverWrite</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Copy all directory structure</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pFromFile</color><color=#f8f8f2>.</color><color=#a6e22e>isDirectory</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>copyDir</color><color=#f8f8f2>(</color><color=#f8f8f2>pFromFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>pToFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOverWrite</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Check if destination is a directory</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pToFile</color><color=#f8f8f2>.</color><color=#a6e22e>isDirectory</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Create a new file with same name as from</color>
            <color=#f8f8f2>pToFile</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pToFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>pFromFile</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Check if file exists, and return false if overWrite is false</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>pOverWrite</color> <color=#f92672>&&</color> <color=#f8f8f2>pToFile</color><color=#f8f8f2>.</color><color=#a6e22e>exists</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>InputStream</color> <color=#f8f8f2>in</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>OutputStream</color> <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Use buffer size two times byte array, to avoid i/o bottleneck</color>
            <color=#f8f8f2>in</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>pFromFile</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileOutputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>pToFile</color><color=#f8f8f2>);</color>

            <color=#75715e>// Copy from inputStream to outputStream</color>
            <color=#f8f8f2>copy</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#f8f8f2>out</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>// Just pass any IOException on up the stack</color>
        <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>close</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>close</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color> <color=#75715e>// If we got here, everything is probably okay.. ;-)</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Tries to close the given stream. NOTE: If the stream cannot be closed, the IOException thrown</color>
<color=#75715e>     * is silently ignored.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pInput the stream to close</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>(</color><color=#f8f8f2>InputStream</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pInput</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Non critical error</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Tries to close the given stream. NOTE: If the stream cannot be closed, the IOException thrown</color>
<color=#75715e>     * is silently ignored.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pOutput the stream to close</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>(</color><color=#f8f8f2>OutputStream</color> <color=#f8f8f2>pOutput</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pOutput</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>pOutput</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Non critical error</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>(</color><color=#f8f8f2>Reader</color> <color=#f8f8f2>pReader</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pReader</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>pReader</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Non critical error</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>(</color><color=#f8f8f2>Writer</color> <color=#f8f8f2>pWriter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pWriter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>pWriter</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Non critical error</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Copies a directory recursively. If the destination folder does not exist, it is created</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFrom      the source directory</color>
<color=#75715e>     * @param pTo        the destination directory</color>
<color=#75715e>     * @param pOverWrite {@code true} if we should allow overwrting existing files</color>
<color=#75715e>     * @return {@code true} if all files were copied sucessfully</color>
<color=#75715e>     * @throws IOException if {@code pTo} exists, and it not a directory, or if copying of any of the</color>
<color=#75715e>     *                     files in the folder fails</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>copyDir</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>pFrom</color><color=#f8f8f2>,</color> <color=#f8f8f2>File</color> <color=#f8f8f2>pTo</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pOverWrite</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pTo</color><color=#f8f8f2>.</color><color=#a6e22e>exists</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>pTo</color><color=#f8f8f2>.</color><color=#a6e22e>isDirectory</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"A directory may only be copied to another directory, not to a file"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>pTo</color><color=#f8f8f2>.</color><color=#a6e22e>mkdirs</color><color=#f8f8f2>();</color> <color=#75715e>// mkdir?</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>allOkay</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#f8f8f2>files</color> <color=#f92672>=</color> <color=#f8f8f2>pFrom</color><color=#f8f8f2>.</color><color=#a6e22e>listFiles</color><color=#f8f8f2>();</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>file</color> <color=#f8f8f2>:</color> <color=#f8f8f2>files</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>copy</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pTo</color><color=#f8f8f2>,</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()),</color> <color=#f8f8f2>pOverWrite</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>allOkay</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>allOkay</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Copies all data from one stream to another. The data is copied from the fromStream to the</color>
<color=#75715e>     * toStream using buffered streams for efficiency.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFrom The input srteam to copy from</color>
<color=#75715e>     * @param pTo   The output stream to copy to</color>
<color=#75715e>     * @return true. Otherwise, an IOException is thrown, and the method does not return a value.</color>
<color=#75715e>     * @throws IOException              if an i/o error occurs during copy</color>
<color=#75715e>     * @throws IllegalArgumentException if either {@code pFrom} or {@code pTo} is {@code null}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>copy</color><color=#f8f8f2>(</color><color=#f8f8f2>InputStream</color> <color=#f8f8f2>pFrom</color><color=#f8f8f2>,</color> <color=#f8f8f2>OutputStream</color> <color=#f8f8f2>pTo</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Validate</color><color=#f8f8f2>.</color><color=#a6e22e>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>pFrom</color><color=#f8f8f2>,</color> <color=#e6db74>"from"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>Validate</color><color=#f8f8f2>.</color><color=#a6e22e>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>pTo</color><color=#f8f8f2>,</color> <color=#e6db74>"to"</color><color=#f8f8f2>);</color>

        <color=#75715e>// TODO: Consider using file channels for faster copy where possible</color>

        <color=#75715e>// Use buffer size two times byte array, to avoid i/o bottleneck</color>
        <color=#75715e>// TODO: Consider letting the client decide as this is sometimes not a good thing!</color>
        <color=#f8f8f2>InputStream</color> <color=#f8f8f2>in</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>pFrom</color><color=#f8f8f2>,</color> <color=#f8f8f2>BUF_SIZE</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>OutputStream</color> <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedOutputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>pTo</color><color=#f8f8f2>,</color> <color=#f8f8f2>BUF_SIZE</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>

        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buffer</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>BUF_SIZE</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>

        <color=#66d9ef>while</color> <color=#f8f8f2>((</color><color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>))</color> <color=#f92672>!=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>count</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Flush out stream, to write any remaining buffered data</color>
        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>flush</color><color=#f8f8f2>();</color>

        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color> <color=#75715e>// If we got here, everything is probably okay.. ;-)</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the file (type) extension of the given file. A file extension is the part of the filename,</color>
<color=#75715e>     * after the last occurence of a period {@code '.'}. If the filename contains no period, {@code</color>
<color=#75715e>     * null} is returned.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFileName the full filename with extension</color>
<color=#75715e>     * @return the extension (type) of the file, or {@code null}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getExtension</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pFileName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>getExtension0</color><color=#f8f8f2>(</color><color=#f8f8f2>getFilename</color><color=#f8f8f2>(</color><color=#f8f8f2>pFileName</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the file (type) extension of the given file. A file extension is the part of the filename,</color>
<color=#75715e>     * after the last occurence of a period {@code '.'}. If the filename contains no period, {@code</color>
<color=#75715e>     * null} is returned.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFile the file</color>
<color=#75715e>     * @return the extension (type) of the file, or {@code null}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getExtension</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>pFile</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>getExtension0</color><color=#f8f8f2>(</color><color=#f8f8f2>pFile</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// NOTE: Assumes filename and no path</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getExtension0</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pFileName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>pFileName</color><color=#f8f8f2>.</color><color=#a6e22e>lastIndexOf</color><color=#f8f8f2>(</color><color=#e6db74>'.'</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pFileName</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// No period found</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the file name of the given file, without the extension (type). A file extension is the</color>
<color=#75715e>     * part of the filename, after the last occurence of a period {@code '.'}. If the filename</color>
<color=#75715e>     * contains no period, the complete file name is returned (same as {@code pFileName}, if the</color>
<color=#75715e>     * string contains no path elements).</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFileName the full filename with extension</color>
<color=#75715e>     * @return the base name of the file</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getBasename</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pFileName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>getBasename0</color><color=#f8f8f2>(</color><color=#f8f8f2>getFilename</color><color=#f8f8f2>(</color><color=#f8f8f2>pFileName</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the file name of the given file, without the extension (type). A file extension is the</color>
<color=#75715e>     * part of the filename, after the last occurence of a period {@code '.'}. If the filename</color>
<color=#75715e>     * contains no period, {@code pFile.getName()} is returned.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFile the file</color>
<color=#75715e>     * @return the base name of the file</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getBasename</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>pFile</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>getBasename0</color><color=#f8f8f2>(</color><color=#f8f8f2>pFile</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// NOTE: Assumes filename and no path</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getBasename0</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pFileName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>pFileName</color><color=#f8f8f2>.</color><color=#a6e22e>lastIndexOf</color><color=#f8f8f2>(</color><color=#e6db74>'.'</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pFileName</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>index</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// No period found</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pFileName</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Extracts the directory path without the filename, from a complete filename path.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pPath The full filename path.</color>
<color=#75715e>     * @return the path without the filename.</color>
<color=#75715e>     * @see File#getParent</color>
<color=#75715e>     * @see #getFilename</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getDirectoryname</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>getDirectoryname</color><color=#f8f8f2>(</color><color=#f8f8f2>pPath</color><color=#f8f8f2>,</color> <color=#f8f8f2>File</color><color=#f8f8f2>.</color><color=#a6e22e>separatorChar</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Extracts the directory path without the filename, from a complete filename path.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pPath      The full filename path.</color>
<color=#75715e>     * @param pSeparator the separator char used in {@code pPath}</color>
<color=#75715e>     * @return the path without the filename.</color>
<color=#75715e>     * @see File#getParent</color>
<color=#75715e>     * @see #getFilename</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getDirectoryname</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>char</color> <color=#f8f8f2>pSeparator</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>.</color><color=#a6e22e>lastIndexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>pSeparator</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#e6db74>""</color><color=#f8f8f2>;</color> <color=#75715e>// Assume only filename</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>index</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Extracts the filename of a complete filename path.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pPath The full filename path.</color>
<color=#75715e>     * @return the extracted filename.</color>
<color=#75715e>     * @see File#getName</color>
<color=#75715e>     * @see #getDirectoryname</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getFilename</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>getFilename</color><color=#f8f8f2>(</color><color=#f8f8f2>pPath</color><color=#f8f8f2>,</color> <color=#f8f8f2>File</color><color=#f8f8f2>.</color><color=#a6e22e>separatorChar</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Extracts the filename of a complete filename path.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pPath      The full filename path.</color>
<color=#75715e>     * @param pSeparator The file separator.</color>
<color=#75715e>     * @return the extracted filename.</color>
<color=#75715e>     * @see File#getName</color>
<color=#75715e>     * @see #getDirectoryname</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getFilename</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>char</color> <color=#f8f8f2>pSeparator</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>.</color><color=#a6e22e>lastIndexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>pSeparator</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>;</color> <color=#75715e>// Assume only filename</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Tests if a file or directory has no content. A file is empty if it has a length of 0L. A</color>
<color=#75715e>     * non-existing file is also considered empty. A directory is considered empty if it contains no</color>
<color=#75715e>     * files.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFile The file to test</color>
<color=#75715e>     * @return {@code true} if the file is empty, otherwise {@code false}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>pFile</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pFile</color><color=#f8f8f2>.</color><color=#a6e22e>isDirectory</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>pFile</color><color=#f8f8f2>.</color><color=#a6e22e>list</color><color=#f8f8f2>().</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>pFile</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the default temp directory for the system as a File.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return a {@code File}, representing the default temp directory.</color>
<color=#75715e>     * @see File#createTempFile</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>File</color> <color=#a6e22e>getTempDirFile</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>getTempDir</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the default temp directory for the system.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return a {@code String}, representing the path to the default temp directory.</color>
<color=#75715e>     * @see File#createTempFile</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getTempDir</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>FileUtil</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>TEMP_DIR</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Get the 'java.io.tmpdir' property</color>
                <color=#f8f8f2>String</color> <color=#f8f8f2>tmpDir</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#e6db74>"java.io.tmpdir"</color><color=#f8f8f2>);</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>tmpDir</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// Stupid fallback...</color>
                    <color=#75715e>// TODO: Delegate to FileSystem?</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#e6db74>"/temp"</color><color=#f8f8f2>).</color><color=#a6e22e>exists</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>tmpDir</color> <color=#f92672>=</color> <color=#e6db74>"/temp"</color><color=#f8f8f2>;</color> <color=#75715e>// Windows</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>tmpDir</color> <color=#f92672>=</color> <color=#e6db74>"/tmp"</color><color=#f8f8f2>;</color> <color=#75715e>// Unix</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
                <color=#f8f8f2>TEMP_DIR</color> <color=#f92672>=</color> <color=#f8f8f2>tmpDir</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>TEMP_DIR</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the contents of the given file, as a byte array.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFilename the name of the file to get content from</color>
<color=#75715e>     * @return the content of the file as a byte array.</color>
<color=#75715e>     * @throws IOException if the read operation fails</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pFilename</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>read</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pFilename</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the contents of the given file, as a byte array.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFile the file to get content from</color>
<color=#75715e>     * @return the content of the file as a byte array.</color>
<color=#75715e>     * @throws IOException if the read operation fails</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>pFile</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Custom implementation, as we know the size of a file</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>pFile</color><color=#f8f8f2>.</color><color=#a6e22e>exists</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileNotFoundException</color><color=#f8f8f2>(</color><color=#f8f8f2>pFile</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>pFile</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>InputStream</color> <color=#f8f8f2>in</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Use buffer size two times byte array, to avoid i/o bottleneck</color>
            <color=#f8f8f2>in</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedInputStream</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>FileInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>pFile</color><color=#f8f8f2>),</color> <color=#f8f8f2>BUF_SIZE</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>

            <color=#66d9ef>int</color> <color=#f8f8f2>off</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color>
            <color=#66d9ef>while</color> <color=#f8f8f2>((</color><color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>available</color><color=#f8f8f2>()))</color> <color=#f92672>!=</color> <color=#f92672>-</color><color=#ae81ff>1</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>off</color> <color=#f92672><</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>off</color> <color=#f92672>+=</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color>
                <color=#75715e>//              System.out.println("read:" + len);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>// Just pass any IOException on up the stack</color>
        <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>close</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Reads all data from the input stream to a byte array.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pInput The input stream to read from</color>
<color=#75715e>     * @return The content of the stream as a byte array.</color>
<color=#75715e>     * @throws IOException if an i/o error occurs during read.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>InputStream</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Create byte array</color>
        <color=#f8f8f2>ByteArrayOutputStream</color> <color=#f8f8f2>bytes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FastByteArrayOutputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>BUF_SIZE</color><color=#f8f8f2>);</color>

        <color=#75715e>// Copy from stream to byte array</color>
        <color=#f8f8f2>copy</color><color=#f8f8f2>(</color><color=#f8f8f2>pInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>.</color><color=#a6e22e>toByteArray</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes the contents from a byte array to an output stream.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pOutput The output stream to write to</color>
<color=#75715e>     * @param pData   The byte array to write</color>
<color=#75715e>     * @return {@code true}, otherwise an IOException is thrown.</color>
<color=#75715e>     * @throws IOException if an i/o error occurs during write.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>OutputStream</color> <color=#f8f8f2>pOutput</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pData</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Write data</color>
        <color=#f8f8f2>pOutput</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>pData</color><color=#f8f8f2>);</color>

        <color=#75715e>// If we got here, all is okay</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes the contents from a byte array to a file.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFile The file to write to</color>
<color=#75715e>     * @param pData The byte array to write</color>
<color=#75715e>     * @return {@code true}, otherwise an IOException is thrown.</color>
<color=#75715e>     * @throws IOException if an i/o error occurs during write.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>pFile</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pData</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>OutputStream</color> <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedOutputStream</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>FileOutputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>pFile</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>success</color> <color=#f92672>=</color> <color=#f8f8f2>write</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#f8f8f2>pData</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>close</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>success</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes the contents from a byte array to a file.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFilename The name of the file to write to</color>
<color=#75715e>     * @param pData     The byte array to write</color>
<color=#75715e>     * @return {@code true}, otherwise an IOException is thrown.</color>
<color=#75715e>     * @throws IOException if an i/o error occurs during write.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pFilename</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pData</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>write</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pFilename</color><color=#f8f8f2>),</color> <color=#f8f8f2>pData</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Deletes the specified file.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFile  The file to delete</color>
<color=#75715e>     * @param pForce Forces delete, even if the parameter is a directory, and is not empty. Be</color>
<color=#75715e>     *               careful!</color>
<color=#75715e>     * @return {@code true}, if the file existed and was deleted.</color>
<color=#75715e>     * @throws IOException if an i/o error occurs during delete.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>delete</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>pFile</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pForce</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pForce</color> <color=#f92672>&&</color> <color=#f8f8f2>pFile</color><color=#f8f8f2>.</color><color=#a6e22e>isDirectory</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>deleteDir</color><color=#f8f8f2>(</color><color=#f8f8f2>pFile</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pFile</color><color=#f8f8f2>.</color><color=#a6e22e>exists</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>pFile</color><color=#f8f8f2>.</color><color=#a6e22e>delete</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Deletes a directory recursively.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFile the file to delete</color>
<color=#75715e>     * @return {@code true} if the file was deleted sucessfully</color>
<color=#75715e>     * @throws IOException if an i/o error occurs during delete.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>deleteDir</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>pFile</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Recusively delete all files/subfolders</color>
        <color=#75715e>// Deletes the files using visitor pattern, to avoid allocating</color>
        <color=#75715e>// a file array, which may throw OutOfMemoryExceptions for</color>
        <color=#75715e>// large directories/in low memory situations</color>
        <color=#66d9ef>class</color> <color=#a6e22e>DeleteFilesVisitor</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Visitor</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#f8f8f2>{</color>
            <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>failedCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#66d9ef>private</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>exception</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

            <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>pFile</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>delete</color><color=#f8f8f2>(</color><color=#f8f8f2>pFile</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>failedCount</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>failedCount</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exception</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>exception</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>boolean</color> <color=#a6e22e>succeeded</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>exception</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>throw</color> <color=#f8f8f2>exception</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>failedCount</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>DeleteFilesVisitor</color> <color=#f8f8f2>fileDeleter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DeleteFilesVisitor</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>visitFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>pFile</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileDeleter</color><color=#f8f8f2>);</color>

        <color=#75715e>// If any of the deletes above failed, this will fail (or return false)</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>fileDeleter</color><color=#f8f8f2>.</color><color=#a6e22e>succeeded</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>pFile</color><color=#f8f8f2>.</color><color=#a6e22e>delete</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Deletes the specified file.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFilename The name of file to delete</color>
<color=#75715e>     * @param pForce    Forces delete, even if the parameter is a directory, and is not empty. Careful!</color>
<color=#75715e>     * @return {@code true}, if the file existed and was deleted.</color>
<color=#75715e>     * @throws IOException if deletion fails</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>delete</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pFilename</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pForce</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>delete</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pFilename</color><color=#f8f8f2>),</color> <color=#f8f8f2>pForce</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Deletes the specified file.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFile The file to delete</color>
<color=#75715e>     * @return {@code true}, if the file existed and was deleted.</color>
<color=#75715e>     * @throws IOException if deletion fails</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>delete</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>pFile</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>delete</color><color=#f8f8f2>(</color><color=#f8f8f2>pFile</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Deletes the specified file.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFilename The name of file to delete</color>
<color=#75715e>     * @return {@code true}, if the file existed and was deleted.</color>
<color=#75715e>     * @throws IOException if deletion fails</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>delete</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pFilename</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>delete</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pFilename</color><color=#f8f8f2>),</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Renames the specified file. If the destination is a directory (and the source is not), the</color>
<color=#75715e>     * source file is simply moved to the destination directory.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFrom      The file to rename</color>
<color=#75715e>     * @param pTo        The new file</color>
<color=#75715e>     * @param pOverWrite Specifies if the tofile should be overwritten, if it exists</color>
<color=#75715e>     * @return {@code true}, if the file was renamed.</color>
<color=#75715e>     * @throws FileNotFoundException if {@code pFrom} does not exist.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>rename</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>pFrom</color><color=#f8f8f2>,</color> <color=#f8f8f2>File</color> <color=#f8f8f2>pTo</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pOverWrite</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>pFrom</color><color=#f8f8f2>.</color><color=#a6e22e>exists</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileNotFoundException</color><color=#f8f8f2>(</color><color=#f8f8f2>pFrom</color><color=#f8f8f2>.</color><color=#a6e22e>getAbsolutePath</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pFrom</color><color=#f8f8f2>.</color><color=#a6e22e>isFile</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>pTo</color><color=#f8f8f2>.</color><color=#a6e22e>isDirectory</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pTo</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pTo</color><color=#f8f8f2>,</color> <color=#f8f8f2>pFrom</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>pOverWrite</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>pTo</color><color=#f8f8f2>.</color><color=#a6e22e>exists</color><color=#f8f8f2>())</color> <color=#f92672>&&</color> <color=#f8f8f2>pFrom</color><color=#f8f8f2>.</color><color=#a6e22e>renameTo</color><color=#f8f8f2>(</color><color=#f8f8f2>pTo</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Renames the specified file, if the destination does not exist. If the destination is a</color>
<color=#75715e>     * directory (and the source is not), the source file is simply moved to the destination</color>
<color=#75715e>     * directory.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFrom The file to rename</color>
<color=#75715e>     * @param pTo   The new file</color>
<color=#75715e>     * @return {@code true}, if the file was renamed.</color>
<color=#75715e>     * @throws IOException if rename fails</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>rename</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>pFrom</color><color=#f8f8f2>,</color> <color=#f8f8f2>File</color> <color=#f8f8f2>pTo</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>rename</color><color=#f8f8f2>(</color><color=#f8f8f2>pFrom</color><color=#f8f8f2>,</color> <color=#f8f8f2>pTo</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Renames the specified file. If the destination is a directory (and the source is not), the</color>
<color=#75715e>     * source file is simply moved to the destination directory.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFrom      The file to rename</color>
<color=#75715e>     * @param pTo        The new name of the file</color>
<color=#75715e>     * @param pOverWrite Specifies if the tofile should be overwritten, if it exists</color>
<color=#75715e>     * @return {@code true}, if the file was renamed.</color>
<color=#75715e>     * @throws IOException if rename fails</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>rename</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>pFrom</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pTo</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pOverWrite</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>rename</color><color=#f8f8f2>(</color><color=#f8f8f2>pFrom</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pTo</color><color=#f8f8f2>),</color> <color=#f8f8f2>pOverWrite</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Renames the specified file, if the destination does not exist. If the destination is a</color>
<color=#75715e>     * directory (and the source is not), the source file is simply moved to the destination</color>
<color=#75715e>     * directory.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFrom The file to rename</color>
<color=#75715e>     * @param pTo   The new name of the file</color>
<color=#75715e>     * @return {@code true}, if the file was renamed.</color>
<color=#75715e>     * @throws IOException if rename fails</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>rename</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>pFrom</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pTo</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>rename</color><color=#f8f8f2>(</color><color=#f8f8f2>pFrom</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pTo</color><color=#f8f8f2>),</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Renames the specified file. If the destination is a directory (and the source is not), the</color>
<color=#75715e>     * source file is simply moved to the destination directory.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFrom      The name of the file to rename</color>
<color=#75715e>     * @param pTo        The new name of the file</color>
<color=#75715e>     * @param pOverWrite Specifies if the tofile should be overwritten, if it exists</color>
<color=#75715e>     * @return {@code true}, if the file was renamed.</color>
<color=#75715e>     * @throws IOException if rename fails</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>rename</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pFrom</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pTo</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pOverWrite</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>rename</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pFrom</color><color=#f8f8f2>),</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pTo</color><color=#f8f8f2>),</color> <color=#f8f8f2>pOverWrite</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Renames the specified file, if the destination does not exist. If the destination is a</color>
<color=#75715e>     * directory (and the source is not), the source file is simply moved to the destination</color>
<color=#75715e>     * directory.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFrom The name of the file to rename</color>
<color=#75715e>     * @param pTo   The new name of the file</color>
<color=#75715e>     * @return {@code true}, if the file was renamed.</color>
<color=#75715e>     * @throws IOException if rename fails</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>rename</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pFrom</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pTo</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>rename</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pFrom</color><color=#f8f8f2>),</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pTo</color><color=#f8f8f2>),</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Lists all files (and directories) in a specific folder.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFolder The folder to list</color>
<color=#75715e>     * @return a list of {@code java.io.File} objects.</color>
<color=#75715e>     * @throws FileNotFoundException if {@code pFolder} is not a readable file</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#a6e22e>list</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pFolder</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>list</color><color=#f8f8f2>(</color><color=#f8f8f2>pFolder</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Lists all files (and directories) in a specific folder which are embraced by the wildcard</color>
<color=#75715e>     * filename mask provided.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFolder       The folder to list</color>
<color=#75715e>     * @param pFilenameMask The wildcard filename mask</color>
<color=#75715e>     * @return a list of {@code java.io.File} objects.</color>
<color=#75715e>     * @throws FileNotFoundException if {@code pFolder} is not a readable file</color>
<color=#75715e>     * @see File#listFiles(FilenameFilter)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#a6e22e>list</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pFolder</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pFilenameMask</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>pFolder</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>File</color> <color=#f8f8f2>folder</color> <color=#f92672>=</color> <color=#f8f8f2>resolve</color><color=#f8f8f2>(</color><color=#f8f8f2>pFolder</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color>
                <color=#75715e>/*folder.exists() &&*/</color> <color=#f8f8f2>folder</color><color=#f8f8f2>.</color><color=#a6e22e>isDirectory</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>folder</color><color=#f8f8f2>.</color><color=#a6e22e>canRead</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
            <color=#75715e>// NOTE: exists is implicitly called by isDirectory</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileNotFoundException</color><color=#f8f8f2>(</color><color=#e6db74>"\""</color> <color=#f92672>+</color> <color=#f8f8f2>pFolder</color> <color=#f92672>+</color> <color=#e6db74>"\" is not a directory or is not readable."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>pFilenameMask</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>folder</color><color=#f8f8f2>.</color><color=#a6e22e>listFiles</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// TODO: Rewrite to use regexp</color>

        <color=#f8f8f2>FilenameFilter</color> <color=#f8f8f2>filter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FilenameMaskFilter</color><color=#f8f8f2>(</color><color=#f8f8f2>pFilenameMask</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>folder</color><color=#f8f8f2>.</color><color=#a6e22e>listFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>filter</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@code File} based on the path part of the URL, for file-protocol ({@code file:})</color>
<color=#75715e>     * based URLs.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pURL the {@code file:} URL</color>
<color=#75715e>     * @return a new {@code File} object representing the URL</color>
<color=#75715e>     * @throws NullPointerException     if {@code pURL} is {@code null}</color>
<color=#75715e>     * @throws IllegalArgumentException if {@code pURL} is not a file-protocol URL.</color>
<color=#75715e>     * @see File#toURI()</color>
<color=#75715e>     * @see File#File(java.net.URI)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>File</color> <color=#a6e22e>toFile</color><color=#f8f8f2>(</color><color=#f8f8f2>URL</color> <color=#f8f8f2>pURL</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pURL</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"URL == null"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// NOTE: Precondition tests below is based on the File(URI) constructor,</color>
        <color=#75715e>//   and is most likely overkill...</color>
        <color=#75715e>// NOTE: A URI is absolute iff it has a scheme component</color>
        <color=#75715e>//   As the scheme has to be "file", this is implicitly tested below</color>
        <color=#75715e>// NOTE: A URI is opaque iff it is absolute and it's shceme-specific</color>
        <color=#75715e>//   part does not begin with a '/', see below</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#e6db74>"file"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>pURL</color><color=#f8f8f2>.</color><color=#a6e22e>getProtocol</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
            <color=#75715e>// URL protocol => URI scheme</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"URL scheme is not \"file\""</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pURL</color><color=#f8f8f2>.</color><color=#a6e22e>getAuthority</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"URL has an authority component"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pURL</color><color=#f8f8f2>.</color><color=#a6e22e>getRef</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// URL ref (anchor) => URI fragment</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"URI has a fragment component"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pURL</color><color=#f8f8f2>.</color><color=#a6e22e>getQuery</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"URL has a query component"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>path</color> <color=#f92672>=</color> <color=#f8f8f2>pURL</color><color=#f8f8f2>.</color><color=#a6e22e>getPath</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>path</color><color=#f8f8f2>.</color><color=#a6e22e>startsWith</color><color=#f8f8f2>(</color><color=#e6db74>"/"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#75715e>// A URL should never be able to represent an opaque URI, test anyway</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"URI is not hierarchical"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>path</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>""</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"URI path component is empty"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Convert separator, doesn't seem to be neccessary on Windows/Unix,</color>
        <color=#75715e>// but do it anyway to be compatible...</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>File</color><color=#f8f8f2>.</color><color=#a6e22e>separatorChar</color> <color=#f92672>!=</color> <color=#e6db74>'/'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>path</color> <color=#f92672>=</color> <color=#f8f8f2>path</color><color=#f8f8f2>.</color><color=#a6e22e>replace</color><color=#f8f8f2>(</color><color=#e6db74>'/'</color><color=#f8f8f2>,</color> <color=#f8f8f2>File</color><color=#f8f8f2>.</color><color=#a6e22e>separatorChar</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>resolve</color><color=#f8f8f2>(</color><color=#f8f8f2>path</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>File</color> <color=#a6e22e>resolve</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Win32File</color><color=#f8f8f2>.</color><color=#a6e22e>wrap</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pPath</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>File</color> <color=#a6e22e>resolve</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Win32File</color><color=#f8f8f2>.</color><color=#a6e22e>wrap</color><color=#f8f8f2>(</color><color=#f8f8f2>pPath</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>File</color> <color=#a6e22e>resolve</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>pParent</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pChild</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Win32File</color><color=#f8f8f2>.</color><color=#a6e22e>wrap</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pParent</color><color=#f8f8f2>,</color> <color=#f8f8f2>pChild</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#a6e22e>resolve</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#f8f8f2>pPaths</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Win32File</color><color=#f8f8f2>.</color><color=#a6e22e>wrap</color><color=#f8f8f2>(</color><color=#f8f8f2>pPaths</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// TODO: Handle SecurityManagers in a deterministic way</color>
    <color=#75715e>// TODO: Exception handling</color>
    <color=#75715e>// TODO: What happens if the file does not exist?</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>getFreeSpace</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// NOTE: Allow null, to get space in current/system volume</color>
        <color=#f8f8f2>File</color> <color=#f8f8f2>path</color> <color=#f92672>=</color> <color=#f8f8f2>pPath</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>pPath</color> <color=#f8f8f2>:</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#e6db74>"."</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>Long</color> <color=#f8f8f2>space</color> <color=#f92672>=</color> <color=#f8f8f2>getSpace16</color><color=#f8f8f2>(</color><color=#e6db74>"getFreeSpace"</color><color=#f8f8f2>,</color> <color=#f8f8f2>path</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>space</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>space</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>FS</color><color=#f8f8f2>.</color><color=#a6e22e>getFreeSpace</color><color=#f8f8f2>(</color><color=#f8f8f2>path</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>getUsableSpace</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// NOTE: Allow null, to get space in current/system volume</color>
        <color=#f8f8f2>File</color> <color=#f8f8f2>path</color> <color=#f92672>=</color> <color=#f8f8f2>pPath</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>pPath</color> <color=#f8f8f2>:</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#e6db74>"."</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>Long</color> <color=#f8f8f2>space</color> <color=#f92672>=</color> <color=#f8f8f2>getSpace16</color><color=#f8f8f2>(</color><color=#e6db74>"getUsableSpace"</color><color=#f8f8f2>,</color> <color=#f8f8f2>path</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>space</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>space</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>getTotalSpace</color><color=#f8f8f2>(</color><color=#f8f8f2>path</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// TODO: FixMe for Windows, before making it public...</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>getTotalSpace</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// NOTE: Allow null, to get space in current/system volume</color>
        <color=#f8f8f2>File</color> <color=#f8f8f2>path</color> <color=#f92672>=</color> <color=#f8f8f2>pPath</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>pPath</color> <color=#f8f8f2>:</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#e6db74>"."</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>Long</color> <color=#f8f8f2>space</color> <color=#f92672>=</color> <color=#f8f8f2>getSpace16</color><color=#f8f8f2>(</color><color=#e6db74>"getTotalSpace"</color><color=#f8f8f2>,</color> <color=#f8f8f2>path</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>space</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>space</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>FS</color><color=#f8f8f2>.</color><color=#a6e22e>getTotalSpace</color><color=#f8f8f2>(</color><color=#f8f8f2>path</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Long</color> <color=#a6e22e>getSpace16</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pMethodName</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Method</color> <color=#f8f8f2>freeSpace</color> <color=#f92672>=</color> <color=#f8f8f2>File</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>.</color><color=#a6e22e>getMethod</color><color=#f8f8f2>(</color><color=#f8f8f2>pMethodName</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>Long</color><color=#f8f8f2>)</color> <color=#f8f8f2>freeSpace</color><color=#f8f8f2>.</color><color=#a6e22e>invoke</color><color=#f8f8f2>(</color><color=#f8f8f2>pPath</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NoSuchMethodException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalAccessException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InvocationTargetException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Throwable</color> <color=#f8f8f2>throwable</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getTargetException</color><color=#f8f8f2>();</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>throwable</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>SecurityException</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#f8f8f2>(</color><color=#f8f8f2>SecurityException</color><color=#f8f8f2>)</color> <color=#f8f8f2>throwable</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UndeclaredThrowableException</color><color=#f8f8f2>(</color><color=#f8f8f2>throwable</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Formats the given number to a human readable format. Kind of like {@code df -h}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSizeInBytes the size in byte</color>
<color=#75715e>     * @return a human readable string representation</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>toHumanReadableSize</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pSizeInBytes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// TODO: Rewrite to use String.format?</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pSizeInBytes</color> <color=#f92672><</color> <color=#ae81ff>1024L</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pSizeInBytes</color> <color=#f92672>+</color> <color=#e6db74>" Bytes"</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pSizeInBytes</color> <color=#f92672><</color> <color=#f8f8f2>(</color><color=#ae81ff>1024L</color> <color=#f92672><<</color> <color=#ae81ff>10</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>getSizeFormat</color><color=#f8f8f2>().</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>pSizeInBytes</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>1024L</color><color=#f8f8f2>))</color> <color=#f92672>+</color> <color=#e6db74>" KB"</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pSizeInBytes</color> <color=#f92672><</color> <color=#f8f8f2>(</color><color=#ae81ff>1024L</color> <color=#f92672><<</color> <color=#ae81ff>20</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>getSizeFormat</color><color=#f8f8f2>().</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>pSizeInBytes</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>1024L</color> <color=#f92672><<</color> <color=#ae81ff>10</color><color=#f8f8f2>))</color> <color=#f92672>+</color> <color=#e6db74>" MB"</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pSizeInBytes</color> <color=#f92672><</color> <color=#f8f8f2>(</color><color=#ae81ff>1024L</color> <color=#f92672><<</color> <color=#ae81ff>30</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>getSizeFormat</color><color=#f8f8f2>().</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>pSizeInBytes</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>1024L</color> <color=#f92672><<</color> <color=#ae81ff>20</color><color=#f8f8f2>))</color> <color=#f92672>+</color> <color=#e6db74>" GB"</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pSizeInBytes</color> <color=#f92672><</color> <color=#f8f8f2>(</color><color=#ae81ff>1024L</color> <color=#f92672><<</color> <color=#ae81ff>40</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>getSizeFormat</color><color=#f8f8f2>().</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>pSizeInBytes</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>1024L</color> <color=#f92672><<</color> <color=#ae81ff>30</color><color=#f8f8f2>))</color> <color=#f92672>+</color> <color=#e6db74>" TB"</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>getSizeFormat</color><color=#f8f8f2>().</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>pSizeInBytes</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>1024L</color> <color=#f92672><<</color> <color=#ae81ff>40</color><color=#f8f8f2>))</color> <color=#f92672>+</color> <color=#e6db74>" PB"</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// NumberFormat is not thread-safe, so we stick to thread-confined instances</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>ThreadLocal</color><color=#f92672><</color><color=#f8f8f2>NumberFormat</color><color=#f92672>></color> <color=#f8f8f2>sNumberFormat</color> <color=#f92672>=</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>ThreadLocal</color><color=#f92672><</color><color=#f8f8f2>NumberFormat</color><color=#f92672>></color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>protected</color> <color=#f8f8f2>NumberFormat</color> <color=#a6e22e>initialValue</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>NumberFormat</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>NumberFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getNumberInstance</color><color=#f8f8f2>();</color>
                    <color=#75715e>// TODO: Consider making this locale/platform specific, OR a method parameter...</color>
                    <color=#75715e>//            format.setMaximumFractionDigits(2);</color>
                    <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>setMaximumFractionDigits</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>};</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>NumberFormat</color> <color=#a6e22e>getSizeFormat</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>sNumberFormat</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Visits all files in {@code pDirectory}. Optionally filtered through a {@link FileFilter}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pDirectory the directory to visit files in</color>
<color=#75715e>     * @param pFilter    the filter, may be {@code null}, meaning all files will be visited</color>
<color=#75715e>     * @param pVisitor   the visitor</color>
<color=#75715e>     * @throws IllegalArgumentException if either {@code pDirectory} or {@code pVisitor} are {@code</color>
<color=#75715e>     *                                  null}</color>
<color=#75715e>     * @see Visitor</color>
<color=#75715e>     */</color>
    <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>({</color><color=#e6db74>"ResultOfMethodCallIgnored"</color><color=#f8f8f2>})</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>visitFiles</color><color=#f8f8f2>(</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>pDirectory</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>FileFilter</color> <color=#f8f8f2>pFilter</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Visitor</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#f8f8f2>pVisitor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Validate</color><color=#f8f8f2>.</color><color=#a6e22e>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>pDirectory</color><color=#f8f8f2>,</color> <color=#e6db74>"directory"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>Validate</color><color=#f8f8f2>.</color><color=#a6e22e>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>pVisitor</color><color=#f8f8f2>,</color> <color=#e6db74>"visitor"</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>pDirectory</color><color=#f8f8f2>.</color><color=#a6e22e>listFiles</color><color=#f8f8f2>(</color>
                <color=#66d9ef>new</color> <color=#f8f8f2>FileFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>accept</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>pFile</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pFilter</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>pFilter</color><color=#f8f8f2>.</color><color=#a6e22e>accept</color><color=#f8f8f2>(</color><color=#f8f8f2>pFile</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>pVisitor</color><color=#f8f8f2>.</color><color=#a6e22e>visit</color><color=#f8f8f2>(</color><color=#f8f8f2>pFile</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>}</color>

                        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>});</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>