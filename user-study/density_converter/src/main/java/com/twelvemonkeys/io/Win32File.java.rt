<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.io</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.File</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.FileFilter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.FilenameFilter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Win32File</color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @version $Id:</color>
<color=#75715e> * //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/io/Win32File.java#2</color>
<color=#75715e> * $</color>
<color=#75715e> */</color>
<color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>Win32File</color> <color=#66d9ef>extends</color> <color=#f8f8f2>File</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>IS_WINDOWS</color> <color=#f92672>=</color> <color=#f8f8f2>isWindows</color><color=#f8f8f2>();</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isWindows</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>os</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#e6db74>"os.name"</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>os</color><color=#f8f8f2>.</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>().</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#e6db74>"windows"</color><color=#f8f8f2>)</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Throwable</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Ignore</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#a6e22e>Win32File</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>pPath</color><color=#f8f8f2>.</color><color=#a6e22e>getPath</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>main</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>pArgs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>argIdx</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>recursive</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>pArgs</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#f8f8f2>argIdx</color> <color=#f92672>+</color> <color=#ae81ff>1</color>
                <color=#f92672>&&</color> <color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#e6db74>'-'</color>
                <color=#f92672>&&</color> <color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#e6db74>'R'</color> <color=#f92672>||</color> <color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"--recursive"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>recursive</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Unknown option: "</color> <color=#f92672>+</color> <color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>argIdx</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>File</color> <color=#f8f8f2>file</color> <color=#f92672>=</color> <color=#f8f8f2>wrap</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"file: "</color> <color=#f92672>+</color> <color=#f8f8f2>file</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"file.getClass(): "</color> <color=#f92672>+</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>());</color>

        <color=#f8f8f2>listFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>recursive</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>listFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>pFile</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLevel</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pRecursive</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pFile</color><color=#f8f8f2>.</color><color=#a6e22e>isDirectory</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#f8f8f2>files</color> <color=#f92672>=</color> <color=#f8f8f2>pFile</color><color=#f8f8f2>.</color><color=#a6e22e>listFiles</color><color=#f8f8f2>();</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>l</color> <color=#f92672><</color> <color=#f8f8f2>pLevel</color><color=#f8f8f2>;</color> <color=#f8f8f2>l</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>" "</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Contents of "</color> <color=#f92672>+</color> <color=#f8f8f2>pFile</color> <color=#f92672>+</color> <color=#e6db74>": "</color><color=#f8f8f2>);</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>file</color> <color=#f8f8f2>:</color> <color=#f8f8f2>files</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>l</color> <color=#f92672><</color> <color=#f8f8f2>pLevel</color><color=#f8f8f2>;</color> <color=#f8f8f2>l</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>" "</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"  "</color> <color=#f92672>+</color> <color=#f8f8f2>file</color><color=#f8f8f2>);</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pRecursive</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>listFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>file</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLevel</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLevel</color> <color=#f92672><</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Wraps a {@code File} object pointing to a Windows symbolic link ({@code .lnk} file) in a {@code</color>
<color=#75715e>     * Win32Lnk}. If the operating system is not Windows, the {@code pPath} parameter is returned</color>
<color=#75715e>     * unwrapped.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pPath any path, possibly pointing to a Windows symbolic link file. May be {@code null},</color>
<color=#75715e>     *              in which case {@code null} is returned.</color>
<color=#75715e>     * @return a new {@code Win32Lnk} object if the current os is Windows, and the file is a Windows</color>
<color=#75715e>     * symbolic link ({@code .lnk} file), otherwise {@code pPath}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>File</color> <color=#a6e22e>wrap</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pPath</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>IS_WINDOWS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Don't wrap if allready wrapped</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pPath</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Win32File</color> <color=#f92672>||</color> <color=#f8f8f2>pPath</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Win32Lnk</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pPath</color><color=#f8f8f2>.</color><color=#a6e22e>exists</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>endsWith</color><color=#f8f8f2>(</color><color=#e6db74>".lnk"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#75715e>// If Win32 .lnk, let's wrap</color>
                <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Win32Lnk</color><color=#f8f8f2>(</color><color=#f8f8f2>pPath</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// TODO: FixMe!</color>
                    <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>printStackTrace</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Wwrap even if not a .lnk, as the listFiles() methods etc,</color>
            <color=#75715e>// could potentially return .lnk's, that we want to wrap later...</color>
            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Win32File</color><color=#f8f8f2>(</color><color=#f8f8f2>pPath</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>pPath</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Wraps a {@code File} array, possibly pointing to Windows symbolic links ({@code .lnk} files) in</color>
<color=#75715e>     * {@code Win32Lnk}s.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pPaths an array of {@code File}s, possibly pointing to Windows symbolic link files. May</color>
<color=#75715e>     *               be {@code null}, in which case {@code null} is returned.</color>
<color=#75715e>     * @return {@code pPaths}, with any {@code File} representing a Windows symbolic link ({@code</color>
<color=#75715e>     * .lnk} file) wrapped in a {@code Win32Lnk}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#a6e22e>wrap</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#f8f8f2>pPaths</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>IS_WINDOWS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>pPaths</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>pPaths</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>pPaths</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>wrap</color><color=#f8f8f2>(</color><color=#f8f8f2>pPaths</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pPaths</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// File overrides</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>File</color> <color=#a6e22e>getAbsoluteFile</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>wrap</color><color=#f8f8f2>(</color><color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>getAbsoluteFile</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>File</color> <color=#a6e22e>getCanonicalFile</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>wrap</color><color=#f8f8f2>(</color><color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>getCanonicalFile</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>File</color> <color=#a6e22e>getParentFile</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>wrap</color><color=#f8f8f2>(</color><color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>getParentFile</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#a6e22e>listFiles</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>wrap</color><color=#f8f8f2>(</color><color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>listFiles</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#a6e22e>listFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>FileFilter</color> <color=#f8f8f2>filter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>wrap</color><color=#f8f8f2>(</color><color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>listFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>filter</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>File</color><color=#f92672>[]</color> <color=#a6e22e>listFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>FilenameFilter</color> <color=#f8f8f2>filter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>wrap</color><color=#f8f8f2>(</color><color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>listFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>filter</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>