<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.io</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Interface for seekable streams.</color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @version $Id:</color>
<color=#75715e> * //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/io/Seekable.java#1</color>
<color=#75715e> * $</color>
<color=#75715e> * @see SeekableInputStream</color>
<color=#75715e> * @see SeekableOutputStream</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>interface</color> <color=#a6e22e>Seekable</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the current byte position of the stream. The next read will take place starting at this</color>
<color=#75715e>     * offset.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return a {@code long} containing the position of the stream.</color>
<color=#75715e>     * @throws IOException if an I/O error occurs.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>long</color> <color=#a6e22e>getStreamPosition</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Sets the current stream position to the desired location. The next read will occur at this</color>
<color=#75715e>     * location.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>An {@code IndexOutOfBoundsException} will be thrown if pPosition is smaller than the flushed</color>
<color=#75715e>     * position (as returned by {@link #getFlushedPosition()}).</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>It is legal to seek past the end of the file; an {@code EOFException} will be thrown only if</color>
<color=#75715e>     * a read is performed.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pPosition a long containing the desired file pointer position.</color>
<color=#75715e>     * @throws IndexOutOfBoundsException if {@code pPosition} is smaller than the flushed position.</color>
<color=#75715e>     * @throws IOException               if any other I/O error occurs.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>void</color> <color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>pPosition</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Marks a position in the stream to be returned to by a subsequent call to reset. Unlike a</color>
<color=#75715e>     * standard {@code InputStream}, all {@code Seekable} streams upport marking. Additionally, calls</color>
<color=#75715e>     * to {@code mark} and {@code reset} may be nested arbitrarily.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>Unlike the {@code mark} methods declared by the {@code Reader} or {@code InputStream}</color>
<color=#75715e>     * interfaces, no {@code readLimit} parameter is used. An arbitrary amount of data may be read</color>
<color=#75715e>     * following the call to {@code mark}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>void</color> <color=#a6e22e>mark</color><color=#f8f8f2>();</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the file pointer to its previous position, at the time of the most recent unmatched</color>
<color=#75715e>     * call to mark.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>Calls to reset without a corresponding call to mark will either:</color>
<color=#75715e>     *</color>
<color=#75715e>     * <ul></color>
<color=#75715e>     *   <li>throw an {@code IOException}</color>
<color=#75715e>     *   <li>or, reset to the beginning of the stream.</color>
<color=#75715e>     * </ul></color>
<color=#75715e>     * <p></color>
<color=#75715e>     * An {@code IOException} will be thrown if the previous marked position lies in the discarded</color>
<color=#75715e>     * portion of the stream.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @throws IOException if an I/O error occurs.</color>
<color=#75715e>     * @see java.io.InputStream#reset()</color>
<color=#75715e>     */</color>
    <color=#66d9ef>void</color> <color=#a6e22e>reset</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Discards the initial portion of the stream prior to the indicated postion. Attempting to seek</color>
<color=#75715e>     * to an offset within the flushed portion of the stream will result in an {@code</color>
<color=#75715e>     * IndexOutOfBoundsException}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>Calling {@code flushBefore} may allow classes implementing this interface to free up</color>
<color=#75715e>     * resources such as memory or disk space that are being used to store data from the stream.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pPosition a long containing the length of the file prefix that may be flushed.</color>
<color=#75715e>     * @throws IndexOutOfBoundsException if {@code pPosition} lies in the flushed portion of the</color>
<color=#75715e>     *                                   stream or past the current stream position.</color>
<color=#75715e>     * @throws IOException               if an I/O error occurs.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>void</color> <color=#a6e22e>flushBefore</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>pPosition</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Discards the initial position of the stream prior to the current stream position. Equivalent to</color>
<color=#75715e>     * {@code flushBefore(getStreamPosition())}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @throws IOException if an I/O error occurs.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>void</color> <color=#a6e22e>flush</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the earliest position in the stream to which seeking may be performed. The returned</color>
<color=#75715e>     * value will be the maximum of all values passed into previous calls to {@code flushBefore}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the earliest legal position for seeking, as a {@code long}.</color>
<color=#75715e>     * @throws IOException if an I/O error occurs.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>long</color> <color=#a6e22e>getFlushedPosition</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns true if this {@code Seekable} stream caches data itself in order to allow seeking</color>
<color=#75715e>     * backwards. Applications may consult this in order to decide how frequently, or whether, to</color>
<color=#75715e>     * flush in order to conserve cache resources.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return {@code true} if this {@code Seekable} caches data.</color>
<color=#75715e>     * @see #isCachedMemory()</color>
<color=#75715e>     * @see #isCachedFile()</color>
<color=#75715e>     */</color>
    <color=#66d9ef>boolean</color> <color=#a6e22e>isCached</color><color=#f8f8f2>();</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns true if this {@code Seekable} stream caches data itself in order to allow seeking</color>
<color=#75715e>     * backwards, and the cache is kept in main memory. Applications may consult this in order to</color>
<color=#75715e>     * decide how frequently, or whether, to flush in order to conserve cache resources.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return {@code true} if this {@code Seekable} caches data in main memory.</color>
<color=#75715e>     * @see #isCached()</color>
<color=#75715e>     * @see #isCachedFile()</color>
<color=#75715e>     */</color>
    <color=#66d9ef>boolean</color> <color=#a6e22e>isCachedMemory</color><color=#f8f8f2>();</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns true if this {@code Seekable} stream caches data itself in order to allow seeking</color>
<color=#75715e>     * backwards, and the cache is kept in a temporary file. Applications may consult this in order to</color>
<color=#75715e>     * decide how frequently, or whether, to flush in order to conserve cache resources.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return {@code true} if this {@code Seekable} caches data in a temporary file.</color>
<color=#75715e>     * @see #isCached</color>
<color=#75715e>     * @see #isCachedMemory</color>
<color=#75715e>     */</color>
    <color=#66d9ef>boolean</color> <color=#a6e22e>isCachedFile</color><color=#f8f8f2>();</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Closes the stream.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @throws IOException if the stream can't be closed.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>
<color=#f8f8f2>}</color>