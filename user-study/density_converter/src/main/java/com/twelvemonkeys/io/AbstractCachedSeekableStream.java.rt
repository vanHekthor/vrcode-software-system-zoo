<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.io</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.lang.Validate</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.InputStream</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Represents a cached seekable stream, that reads through a cache.</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haku $</color>
<color=#75715e> * @version $Id:</color>
<color=#75715e> * //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/io/AbstractCachedSeekableStream.java#2</color>
<color=#75715e> * $</color>
<color=#75715e> */</color>
<color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>AbstractCachedSeekableStream</color> <color=#66d9ef>extends</color> <color=#f8f8f2>SeekableInputStream</color> <color=#f8f8f2>{</color>
    <color=#75715e>/**</color>
<color=#75715e>     * The backing stream</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#f8f8f2>InputStream</color> <color=#f8f8f2>stream</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The stream positon in the backing stream (stream)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>long</color> <color=#f8f8f2>streamPosition</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>StreamCache</color> <color=#f8f8f2>cache</color><color=#f8f8f2>;</color>

    <color=#66d9ef>protected</color> <color=#a6e22e>AbstractCachedSeekableStream</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>InputStream</color> <color=#f8f8f2>pStream</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>StreamCache</color> <color=#f8f8f2>pCache</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Validate</color><color=#f8f8f2>.</color><color=#a6e22e>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>pStream</color><color=#f8f8f2>,</color> <color=#e6db74>"stream"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>Validate</color><color=#f8f8f2>.</color><color=#a6e22e>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>pCache</color><color=#f8f8f2>,</color> <color=#e6db74>"cache"</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>stream</color> <color=#f92672>=</color> <color=#f8f8f2>pStream</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>cache</color> <color=#f92672>=</color> <color=#f8f8f2>pCache</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#f8f8f2>StreamCache</color> <color=#a6e22e>getCache</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>cache</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>available</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>avail</color> <color=#f92672>=</color> <color=#f8f8f2>streamPosition</color> <color=#f92672>-</color> <color=#f8f8f2>position</color> <color=#f92672>+</color> <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>available</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>avail</color> <color=#f92672>></color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color> <color=#f92672>?</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>avail</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>read</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>position</color> <color=#f92672>==</color> <color=#f8f8f2>streamPosition</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// TODO: Read more bytes here!</color>
            <color=#75715e>// TODO: Use buffer if not in-memory cache? (See FileCacheSeekableStream overrides).</color>
            <color=#75715e>// Read a byte from the stream</color>
            <color=#f8f8f2>read</color> <color=#f92672>=</color> <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>read</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>streamPosition</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>cache</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>read</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#75715e>// ..or read byte from the cache</color>
            <color=#f8f8f2>syncPosition</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>read</color> <color=#f92672>=</color> <color=#f8f8f2>cache</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// TODO: This field is not REALLY considered accessible.. :-P</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>read</color> <color=#f92672>!=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>position</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>read</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pBytes</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>checkOpen</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>position</color> <color=#f92672>==</color> <color=#f8f8f2>streamPosition</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Read bytes from the stream</color>
            <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>pBytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>);</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>length</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>streamPosition</color> <color=#f92672>+=</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>cache</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>pBytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>length</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#75715e>// ...or read bytes from the cache</color>
            <color=#f8f8f2>syncPosition</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>cache</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>pBytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// TODO: This field is not REALLY considered accessible.. :-P</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>length</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>position</color> <color=#f92672>+=</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>syncPosition</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cache</color><color=#f8f8f2>.</color><color=#a6e22e>getPosition</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>position</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>cache</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>position</color><color=#f8f8f2>);</color> <color=#75715e>// Assure EOF is correctly thrown</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isCached</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isCachedMemory</color><color=#f8f8f2>();</color>

    <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isCachedFile</color><color=#f8f8f2>();</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>seekImpl</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>pPosition</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>streamPosition</color> <color=#f92672><</color> <color=#f8f8f2>pPosition</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Make sure we append at end of cache</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cache</color><color=#f8f8f2>.</color><color=#a6e22e>getPosition</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>streamPosition</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>cache</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>streamPosition</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Read diff from stream into cache</color>
            <color=#66d9ef>long</color> <color=#f8f8f2>left</color> <color=#f92672>=</color> <color=#f8f8f2>pPosition</color> <color=#f92672>-</color> <color=#f8f8f2>streamPosition</color><color=#f8f8f2>;</color>

            <color=#75715e>// TODO: Use fixed buffer, instead of allocating here...</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>bufferLen</color> <color=#f92672>=</color> <color=#f8f8f2>left</color> <color=#f92672>></color> <color=#ae81ff>1024</color> <color=#f92672>?</color> <color=#ae81ff>1024</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>left</color><color=#f8f8f2>;</color>
            <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buffer</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>bufferLen</color><color=#f92672>]</color><color=#f8f8f2>;</color>

            <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>left</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672><</color> <color=#f8f8f2>left</color> <color=#f92672>?</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>left</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>read</color> <color=#f92672>=</color> <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>length</color><color=#f8f8f2>);</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>read</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>cache</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>read</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>streamPosition</color> <color=#f92672>+=</color> <color=#f8f8f2>read</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>left</color> <color=#f92672>-=</color> <color=#f8f8f2>read</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>read</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#75715e>/*if (streamPosition >= pPosition) */</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Seek backwards into the cache</color>
            <color=#f8f8f2>cache</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>pPosition</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>//        System.out.println("pPosition:        " + pPosition);</color>
        <color=#75715e>//        System.out.println("position:        " + position);</color>
        <color=#75715e>//        System.out.println("streamPosition:  " + streamPosition);</color>
        <color=#75715e>//        System.out.println("cache.position: " + cache.getPosition());</color>

        <color=#75715e>// NOTE: If position == pPosition then we're good to go</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>flushBeforeImpl</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>pPosition</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cache</color><color=#f8f8f2>.</color><color=#a6e22e>flush</color><color=#f8f8f2>(</color><color=#f8f8f2>pPosition</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>closeImpl</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>cache</color><color=#f8f8f2>.</color><color=#a6e22e>flush</color><color=#f8f8f2>(</color><color=#f8f8f2>position</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>cache</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * An abstract stream cache.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e>     * @author last modified by $Author: haku $</color>
<color=#75715e>     * @version $Id:</color>
<color=#75715e>     * //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/io/AbstractCachedSeekableStream.java#2</color>
<color=#75715e>     * $</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>StreamCache</color> <color=#f8f8f2>{</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Creates a {@code StreamCache}.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>protected</color> <color=#a6e22e>StreamCache</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Writes a single byte at the current read/write position. The read/write position will be</color>
<color=#75715e>         * increased by one.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param pByte the byte value to write.</color>
<color=#75715e>         * @throws IOException if an I/O exception occurs in the cache backing mechanism.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>abstract</color> <color=#66d9ef>void</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pByte</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Writes a series of bytes at the current read/write position. The read/write position will be</color>
<color=#75715e>         * increased by {@code pLength}.</color>
<color=#75715e>         *</color>
<color=#75715e>         * <p>This implementation invokes {@link #write(int)} {@code pLength} times. Subclasses may</color>
<color=#75715e>         * override this method for performance.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param pBuffer the bytes to write.</color>
<color=#75715e>         * @param pOffset the starting offset into the buffer.</color>
<color=#75715e>         * @param pLength the number of bytes to write from the buffer.</color>
<color=#75715e>         * @throws IOException if an I/O exception occurs in the cache backing mechanism.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>void</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pBuffer</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>write</color><color=#f8f8f2>(</color><color=#f8f8f2>pBuffer</color><color=#f92672>[</color><color=#f8f8f2>pOffset</color> <color=#f92672>+</color> <color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Reads a single byte a the current read/write position. The read/write position will be</color>
<color=#75715e>         * increased by one.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @return the value read, or {@code -1} to indicate EOF.</color>
<color=#75715e>         * @throws IOException if an I/O exception occurs in the cache backing mechanism.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>abstract</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Writes a series of bytes at the current read/write position. The read/write position will be</color>
<color=#75715e>         * increased by {@code pLength}.</color>
<color=#75715e>         *</color>
<color=#75715e>         * <p>This implementation invokes {@link #read()} {@code pLength} times. Subclasses may override</color>
<color=#75715e>         * this method for performance.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param pBuffer the bytes to write</color>
<color=#75715e>         * @param pOffset the starting offset into the buffer.</color>
<color=#75715e>         * @param pLength the number of bytes to write from the buffer.</color>
<color=#75715e>         * @return the number of bytes read, or {@code -1} to indicate EOF.</color>
<color=#75715e>         * @throws IOException if an I/O exception occurs in the cache backing mechanism.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pBuffer</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>read</color> <color=#f92672>=</color> <color=#f8f8f2>read</color><color=#f8f8f2>();</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>read</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>pBuffer</color><color=#f92672>[</color><color=#f8f8f2>pOffset</color> <color=#f92672>+</color> <color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>read</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>count</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Repositions the current cache read/write position to the given position.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param pPosition the new read/write position</color>
<color=#75715e>         * @throws IOException if an I/O exception occurs in the cache backing mechanism.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>abstract</color> <color=#66d9ef>void</color> <color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>pPosition</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Optionally flushes any data prior to the given position.</color>
<color=#75715e>         *</color>
<color=#75715e>         * <p>Attempting to perform a seek operation, and/or a read or write operation to a position</color>
<color=#75715e>         * equal to or before the flushed position may result in exceptions or undefined behaviour.</color>
<color=#75715e>         *</color>
<color=#75715e>         * <p>Subclasses should override this method for performance reasons, to avoid holding on to</color>
<color=#75715e>         * unnecessary resources. This implementation does nothing.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param pPosition the last position to flush.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>void</color> <color=#a6e22e>flush</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pPosition</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Returns the current cache read/write position.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @return the current cache read/write postion.</color>
<color=#75715e>         * @throws IOException if the position can't be determined because of a problem in the cache</color>
<color=#75715e>         *                     backing mechanism.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>abstract</color> <color=#66d9ef>long</color> <color=#a6e22e>getPosition</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>