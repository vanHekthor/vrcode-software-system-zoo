<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.io</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.lang.DateUtil</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteBuffer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.CharBuffer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.charset.Charset</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Wraps a {@code Writer} in an {@code OutputStream}.</color>
<color=#75715e> *</color>
<color=#75715e> * <p><em>Instances of this class are not thread-safe.</em></color>
<color=#75715e> *</color>
<color=#75715e> * <p><em>NOTE: This class is probably not the right way of solving your problem, however it might</color>
<color=#75715e> * prove useful in JSPs etc. If possible, it's always better to use the {@code Writer}'s underlying</color>
<color=#75715e> * {@code OutputStream}, or wrap it's native backing. </em></color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @version $Id:</color>
<color=#75715e> * //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/io/WriterOutputStream.java#2</color>
<color=#75715e> * $</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>WriterOutputStream</color> <color=#66d9ef>extends</color> <color=#f8f8f2>OutputStream</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>Writer</color> <color=#f8f8f2>writer</color><color=#f8f8f2>;</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#f8f8f2>Decoder</color> <color=#f8f8f2>decoder</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#f8f8f2>ByteArrayOutputStream</color> <color=#f8f8f2>bufferStream</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FastByteArrayOutputStream</color><color=#f8f8f2>(</color><color=#ae81ff>1024</color><color=#f8f8f2>);</color>

    <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isFlushing</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color> <color=#75715e>// Ugly but critical...</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>NIO_AVAILABLE</color> <color=#f92672>=</color> <color=#f8f8f2>isNIOAvailable</color><color=#f8f8f2>();</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isNIOAvailable</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Class</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#e6db74>"java.nio.charset.Charset"</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Throwable</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Ignore</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>WriterOutputStream</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Writer</color> <color=#f8f8f2>pWriter</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pCharset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>writer</color> <color=#f92672>=</color> <color=#f8f8f2>pWriter</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>decoder</color> <color=#f92672>=</color> <color=#f8f8f2>getDecoder</color><color=#f8f8f2>(</color><color=#f8f8f2>pCharset</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>WriterOutputStream</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Writer</color> <color=#f8f8f2>pWriter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>pWriter</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Decoder</color> <color=#a6e22e>getDecoder</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pCharset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// NOTE: The CharsetDecoder is typically 10-20% faster than</color>
        <color=#75715e>// StringDecoder according to my tests</color>
        <color=#75715e>// StringEncoder is horribly slow on 1.2 systems, but there's no</color>
        <color=#75715e>// alternative...</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>NIO_AVAILABLE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>CharsetDecoder</color><color=#f8f8f2>(</color><color=#f8f8f2>pCharset</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringDecoder</color><color=#f8f8f2>(</color><color=#f8f8f2>pCharset</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>flush</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>writer</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>writer</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>flush</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>flushBuffer</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>writer</color><color=#f8f8f2>.</color><color=#a6e22e>flush</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pBytes</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pBytes</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"bytes == null"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>write</color><color=#f8f8f2>(</color><color=#f8f8f2>pBytes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>pBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pBytes</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>flushBuffer</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>decoder</color><color=#f8f8f2>.</color><color=#a6e22e>decodeTo</color><color=#f8f8f2>(</color><color=#f8f8f2>writer</color><color=#f8f8f2>,</color> <color=#f8f8f2>pBytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pByte</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// TODO: Is it possible to know if this is a good place in the stream to</color>
        <color=#75715e>// flush? It might be in the middle of a multi-byte encoded character..</color>
        <color=#f8f8f2>bufferStream</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>pByte</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>flushBuffer</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isFlushing</color> <color=#f92672>&&</color> <color=#f8f8f2>bufferStream</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>isFlushing</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>bufferStream</color><color=#f8f8f2>.</color><color=#a6e22e>writeTo</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color> <color=#75715e>// NOTE: Avoids cloning buffer array</color>
            <color=#f8f8f2>bufferStream</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>isFlushing</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>///////////////////////////////////////////////////////////////////////////</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>main</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>pArgs</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>iterations</color> <color=#f92672>=</color> <color=#ae81ff>1000000</color><color=#f8f8f2>;</color>

        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes</color> <color=#f92672>=</color> <color=#e6db74>"������ klashf lkash ljah lhaaklhghdfgu ksd"</color><color=#f8f8f2>.</color><color=#a6e22e>getBytes</color><color=#f8f8f2>(</color><color=#e6db74>"UTF-8"</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>Decoder</color> <color=#f8f8f2>d</color><color=#f8f8f2>;</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>start</color><color=#f8f8f2>;</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>time</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>Writer</color> <color=#f8f8f2>sink</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>PrintWriter</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>NullOutputStream</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>StringWriter</color> <color=#f8f8f2>writer</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>str</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>d</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringDecoder</color><color=#f8f8f2>(</color><color=#e6db74>"UTF-8"</color><color=#f8f8f2>);</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#ae81ff>10000</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>d</color><color=#f8f8f2>.</color><color=#a6e22e>decodeTo</color><color=#f8f8f2>(</color><color=#f8f8f2>sink</color><color=#f8f8f2>,</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>start</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>();</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>iterations</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>d</color><color=#f8f8f2>.</color><color=#a6e22e>decodeTo</color><color=#f8f8f2>(</color><color=#f8f8f2>sink</color><color=#f8f8f2>,</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>time</color> <color=#f92672>=</color> <color=#f8f8f2>DateUtil</color><color=#f8f8f2>.</color><color=#a6e22e>delta</color><color=#f8f8f2>(</color><color=#f8f8f2>start</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"StringDecoder"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"time: "</color> <color=#f92672>+</color> <color=#f8f8f2>time</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>writer</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringWriter</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>d</color><color=#f8f8f2>.</color><color=#a6e22e>decodeTo</color><color=#f8f8f2>(</color><color=#f8f8f2>writer</color><color=#f8f8f2>,</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>str</color> <color=#f92672>=</color> <color=#f8f8f2>writer</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"str: \""</color> <color=#f92672>+</color> <color=#f8f8f2>str</color> <color=#f92672>+</color> <color=#e6db74>"\""</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"chars.length: "</color> <color=#f92672>+</color> <color=#f8f8f2>str</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>NIO_AVAILABLE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>d</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CharsetDecoder</color><color=#f8f8f2>(</color><color=#e6db74>"UTF-8"</color><color=#f8f8f2>);</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#ae81ff>10000</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>d</color><color=#f8f8f2>.</color><color=#a6e22e>decodeTo</color><color=#f8f8f2>(</color><color=#f8f8f2>sink</color><color=#f8f8f2>,</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>start</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>();</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>iterations</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>d</color><color=#f8f8f2>.</color><color=#a6e22e>decodeTo</color><color=#f8f8f2>(</color><color=#f8f8f2>sink</color><color=#f8f8f2>,</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>time</color> <color=#f92672>=</color> <color=#f8f8f2>DateUtil</color><color=#f8f8f2>.</color><color=#a6e22e>delta</color><color=#f8f8f2>(</color><color=#f8f8f2>start</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"CharsetDecoder"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"time: "</color> <color=#f92672>+</color> <color=#f8f8f2>time</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>writer</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringWriter</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>d</color><color=#f8f8f2>.</color><color=#a6e22e>decodeTo</color><color=#f8f8f2>(</color><color=#f8f8f2>writer</color><color=#f8f8f2>,</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>str</color> <color=#f92672>=</color> <color=#f8f8f2>writer</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"str: \""</color> <color=#f92672>+</color> <color=#f8f8f2>str</color> <color=#f92672>+</color> <color=#e6db74>"\""</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"chars.length: "</color> <color=#f92672>+</color> <color=#f8f8f2>str</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>OutputStream</color> <color=#f8f8f2>os</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>WriterOutputStream</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>PrintWriter</color><color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>),</color> <color=#e6db74>"UTF-8"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>os</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>os</color><color=#f8f8f2>.</color><color=#a6e22e>flush</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>();</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color> <color=#f8f8f2>b</color> <color=#f8f8f2>:</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>os</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>os</color><color=#f8f8f2>.</color><color=#a6e22e>flush</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>///////////////////////////////////////////////////////////////////////////</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>interface</color> <color=#a6e22e>Decoder</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>void</color> <color=#a6e22e>decodeTo</color><color=#f8f8f2>(</color><color=#f8f8f2>Writer</color> <color=#f8f8f2>pWriter</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pBytes</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>CharsetDecoder</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Decoder</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>Charset</color> <color=#f8f8f2>mCharset</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>CharsetDecoder</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pCharset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Handle null-case, to get default charset</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>charset</color> <color=#f92672>=</color>
                    <color=#f8f8f2>pCharset</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>pCharset</color> <color=#f8f8f2>:</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#e6db74>"file.encoding"</color><color=#f8f8f2>,</color> <color=#e6db74>"ISO-8859-1"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>mCharset</color> <color=#f92672>=</color> <color=#f8f8f2>Charset</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#f8f8f2>charset</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>decodeTo</color><color=#f8f8f2>(</color><color=#f8f8f2>Writer</color> <color=#f8f8f2>pWriter</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pBytes</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color>
                <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>CharBuffer</color> <color=#f8f8f2>cb</color> <color=#f92672>=</color> <color=#f8f8f2>mCharset</color><color=#f8f8f2>.</color><color=#a6e22e>decode</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>wrap</color><color=#f8f8f2>(</color><color=#f8f8f2>pBytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>pWriter</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>cb</color><color=#f8f8f2>.</color><color=#a6e22e>array</color><color=#f8f8f2>(),</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>cb</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>StringDecoder</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Decoder</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>mCharset</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>StringDecoder</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pCharset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>mCharset</color> <color=#f92672>=</color> <color=#f8f8f2>pCharset</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>decodeTo</color><color=#f8f8f2>(</color><color=#f8f8f2>Writer</color> <color=#f8f8f2>pWriter</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pBytes</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color>
                <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>str</color> <color=#f92672>=</color>
                    <color=#f8f8f2>mCharset</color> <color=#f92672>==</color> <color=#66d9ef>null</color>
                            <color=#f92672>?</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f8f8f2>(</color><color=#f8f8f2>pBytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color>
                            <color=#f8f8f2>:</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f8f8f2>(</color><color=#f8f8f2>pBytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>,</color> <color=#f8f8f2>mCharset</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>pWriter</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>str</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>