<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.io</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.channels.FileChannel</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A replacement for {@link RandomAccessFile} that is capable of reading and writing data in little</color>
<color=#75715e> * endian byte order.</color>
<color=#75715e> *</color>
<color=#75715e> * <p><em>Warning:</color>
<color=#75715e> * <!-- Beware of little indians! --></color>
<color=#75715e> * The {@code DataInput} and {@code DataOutput} interfaces specifies big endian byte order in their</color>
<color=#75715e> * documentation. This means that this class is, strictly speaking, not a proper implementation.</color>
<color=#75715e> * However, I don't see a reason for the these interfaces to specify the byte order of their</color>
<color=#75715e> * underlying representations. </em></color>
<color=#75715e> *</color>
<color=#75715e> * @author Elliotte Rusty Harold</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.no">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haku $</color>
<color=#75715e> * @version $Id:</color>
<color=#75715e> * //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/io/LittleEndianRandomAccessFile.java#1</color>
<color=#75715e> * $</color>
<color=#75715e> * @see LittleEndianDataInputStream</color>
<color=#75715e> * @see LittleEndianDataOutputStream</color>
<color=#75715e> * @see RandomAccessFile</color>
<color=#75715e> * @see DataInput</color>
<color=#75715e> * @see DataOutput</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>LittleEndianRandomAccessFile</color> <color=#66d9ef>implements</color> <color=#f8f8f2>DataInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>DataOutput</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>RandomAccessFile</color> <color=#f8f8f2>file</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>LittleEndianRandomAccessFile</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pName</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pMode</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>FileUtil</color><color=#f8f8f2>.</color><color=#a6e22e>resolve</color><color=#f8f8f2>(</color><color=#f8f8f2>pName</color><color=#f8f8f2>),</color> <color=#f8f8f2>pMode</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>LittleEndianRandomAccessFile</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>pFile</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pMode</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>file</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RandomAccessFile</color><color=#f8f8f2>(</color><color=#f8f8f2>pFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>pMode</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>FileChannel</color> <color=#a6e22e>getChannel</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>getChannel</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>FileDescriptor</color> <color=#a6e22e>getFD</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>getFD</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getFilePointer</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>getFilePointer</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>readFully</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>readFully</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>readFully</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>readFully</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>readLine</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>readLine</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Reads a {@code boolean} from the underlying input stream by reading a single byte. If the byte</color>
<color=#75715e>     * is zero, false is returned. If the byte is positive, true is returned.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the {@code boolean} value read.</color>
<color=#75715e>     * @throws EOFException if the end of the underlying input stream has been reached</color>
<color=#75715e>     * @throws IOException  if the underlying stream throws an IOException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>readBoolean</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EOFException</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>b</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Reads a signed {@code byte} from the underlying input stream with value between -128 and 127</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the {@code byte} value read.</color>
<color=#75715e>     * @throws EOFException if the end of the underlying input stream has been reached</color>
<color=#75715e>     * @throws IOException  if the underlying stream throws an IOException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>byte</color> <color=#a6e22e>readByte</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EOFException</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Reads an unsigned {@code byte} from the underlying input stream with value between 0 and 255</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the {@code byte} value read.</color>
<color=#75715e>     * @throws EOFException if the end of the underlying input stream has been reached</color>
<color=#75715e>     * @throws IOException  if the underlying stream throws an IOException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>readUnsignedByte</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EOFException</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Reads a two byte signed {@code short} from the underlying input stream in little endian order,</color>
<color=#75715e>     * low byte first.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the {@code short} read.</color>
<color=#75715e>     * @throws EOFException if the end of the underlying input stream has been reached</color>
<color=#75715e>     * @throws IOException  if the underlying stream throws an IOException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>short</color> <color=#a6e22e>readShort</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>byte1</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>byte2</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>

        <color=#75715e>// only need to test last byte read</color>
        <color=#75715e>// if byte1 is -1 so is byte2</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byte2</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EOFException</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>short</color><color=#f8f8f2>)</color> <color=#f8f8f2>(((</color><color=#f8f8f2>byte2</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>byte1</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>>>></color> <color=#ae81ff>24</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Reads a two byte unsigned {@code short} from the underlying input stream in little endian</color>
<color=#75715e>     * order, low byte first.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the int value of the unsigned short read.</color>
<color=#75715e>     * @throws EOFException if the end of the underlying input stream has been reached</color>
<color=#75715e>     * @throws IOException  if the underlying stream throws an IOException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>readUnsignedShort</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>byte1</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>byte2</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byte2</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EOFException</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// return ((byte2 << 24) >> 16) + ((byte1 << 24) >> 24);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>byte2</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>byte1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Reads a two byte Unicode {@code char} from the underlying input stream in little endian order,</color>
<color=#75715e>     * low byte first.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the int value of the unsigned short read.</color>
<color=#75715e>     * @throws EOFException if the end of the underlying input stream has been reached</color>
<color=#75715e>     * @throws IOException  if the underlying stream throws an IOException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>char</color> <color=#a6e22e>readChar</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>byte1</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>byte2</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byte2</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EOFException</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>char</color><color=#f8f8f2>)</color> <color=#f8f8f2>(((</color><color=#f8f8f2>byte2</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>byte1</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>>>></color> <color=#ae81ff>24</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Reads a four byte signed {@code int} from the underlying input stream in little endian order,</color>
<color=#75715e>     * low byte first.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the {@code int} read.</color>
<color=#75715e>     * @throws EOFException if the end of the underlying input stream has been reached</color>
<color=#75715e>     * @throws IOException  if the underlying stream throws an IOException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>readInt</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>byte1</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>byte2</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>byte3</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>byte4</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byte4</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EOFException</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>byte4</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>byte3</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>byte2</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>byte1</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>>>></color> <color=#ae81ff>24</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Reads an eight byte signed {@code int} from the underlying input stream in little endian order,</color>
<color=#75715e>     * low byte first.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the {@code int} read.</color>
<color=#75715e>     * @throws EOFException if the end of the underlying input stream has been reached</color>
<color=#75715e>     * @throws IOException  if the underlying stream throws an IOException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>readLong</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>byte1</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>byte2</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>byte3</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>byte4</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>byte5</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>byte6</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>byte7</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>byte8</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byte8</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EOFException</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>byte8</color> <color=#f92672><<</color> <color=#ae81ff>56</color><color=#f8f8f2>)</color>
                <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>byte7</color> <color=#f92672><<</color> <color=#ae81ff>56</color><color=#f8f8f2>)</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color>
                <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>byte6</color> <color=#f92672><<</color> <color=#ae81ff>56</color><color=#f8f8f2>)</color> <color=#f92672>>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color>
                <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>byte5</color> <color=#f92672><<</color> <color=#ae81ff>56</color><color=#f8f8f2>)</color> <color=#f92672>>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color>
                <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>byte4</color> <color=#f92672><<</color> <color=#ae81ff>56</color><color=#f8f8f2>)</color> <color=#f92672>>>></color> <color=#ae81ff>32</color><color=#f8f8f2>)</color>
                <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>byte3</color> <color=#f92672><<</color> <color=#ae81ff>56</color><color=#f8f8f2>)</color> <color=#f92672>>>></color> <color=#ae81ff>40</color><color=#f8f8f2>)</color>
                <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>byte2</color> <color=#f92672><<</color> <color=#ae81ff>56</color><color=#f8f8f2>)</color> <color=#f92672>>>></color> <color=#ae81ff>48</color><color=#f8f8f2>)</color>
                <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>byte1</color> <color=#f92672><<</color> <color=#ae81ff>56</color><color=#f8f8f2>)</color> <color=#f92672>>>></color> <color=#ae81ff>56</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Reads a string of no more than 65,535 characters from the underlying input stream using UTF-8</color>
<color=#75715e>     * encoding. This method first reads a two byte short in <b>big</b> endian order as required by</color>
<color=#75715e>     * the UTF-8 specification. This gives the number of bytes in the UTF-8 encoded version of the</color>
<color=#75715e>     * string. Next this many bytes are read and decoded as UTF-8 encoded characters.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the decoded string</color>
<color=#75715e>     * @throws UTFDataFormatException if the string cannot be decoded</color>
<color=#75715e>     * @throws IOException            if the underlying stream throws an IOException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>readUTF</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>byte1</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>byte2</color> <color=#f92672>=</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byte2</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>EOFException</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>numbytes</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>byte1</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>byte2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>char</color> <color=#f8f8f2>result</color><color=#f92672>[]</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>char</color><color=#f92672>[</color><color=#f8f8f2>numbytes</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>numread</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>numchars</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>numread</color> <color=#f92672><</color> <color=#f8f8f2>numbytes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

            <color=#66d9ef>int</color> <color=#f8f8f2>c1</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedByte</color><color=#f8f8f2>();</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>c2</color><color=#f8f8f2>,</color> <color=#f8f8f2>c3</color><color=#f8f8f2>;</color>

            <color=#75715e>// The first four bits of c1 determine how many bytes are in this char</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>test</color> <color=#f92672>=</color> <color=#f8f8f2>c1</color> <color=#f92672>>></color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>test</color> <color=#f92672><</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color> <color=#75715e>// one byte</color>
                <color=#f8f8f2>numread</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>result</color><color=#f92672>[</color><color=#f8f8f2>numchars</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>char</color><color=#f8f8f2>)</color> <color=#f8f8f2>c1</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>test</color> <color=#f92672>==</color> <color=#ae81ff>12</color> <color=#f92672>||</color> <color=#f8f8f2>test</color> <color=#f92672>==</color> <color=#ae81ff>13</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color> <color=#75715e>// two bytes</color>
                <color=#f8f8f2>numread</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>numread</color> <color=#f92672>></color> <color=#f8f8f2>numbytes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UTFDataFormatException</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>c2</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedByte</color><color=#f8f8f2>();</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>c2</color> <color=#f92672>&</color> <color=#ae81ff>0xC0</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0x80</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UTFDataFormatException</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>result</color><color=#f92672>[</color><color=#f8f8f2>numchars</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>char</color><color=#f8f8f2>)</color> <color=#f8f8f2>(((</color><color=#f8f8f2>c1</color> <color=#f92672>&</color> <color=#ae81ff>0x1F</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>6</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>c2</color> <color=#f92672>&</color> <color=#ae81ff>0x3F</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>test</color> <color=#f92672>==</color> <color=#ae81ff>14</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color> <color=#75715e>// three bytes</color>
                <color=#f8f8f2>numread</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>numread</color> <color=#f92672>></color> <color=#f8f8f2>numbytes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UTFDataFormatException</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>c2</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedByte</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>c3</color> <color=#f92672>=</color> <color=#f8f8f2>readUnsignedByte</color><color=#f8f8f2>();</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(((</color><color=#f8f8f2>c2</color> <color=#f92672>&</color> <color=#ae81ff>0xC0</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0x80</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>((</color><color=#f8f8f2>c3</color> <color=#f92672>&</color> <color=#ae81ff>0xC0</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0x80</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UTFDataFormatException</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>result</color><color=#f92672>[</color><color=#f8f8f2>numchars</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>char</color><color=#f8f8f2>)</color> <color=#f8f8f2>(((</color><color=#f8f8f2>c1</color> <color=#f92672>&</color> <color=#ae81ff>0x0F</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>12</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>c2</color> <color=#f92672>&</color> <color=#ae81ff>0x3F</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>6</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>c3</color> <color=#f92672>&</color> <color=#ae81ff>0x3F</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color> <color=#75715e>// malformed</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UTFDataFormatException</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#75715e>// end while</color>

        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>numchars</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * @return the next eight bytes of this input stream, interpreted as a little endian {@code</color>
<color=#75715e>     * double}.</color>
<color=#75715e>     * @throws EOFException if end of stream occurs before eight bytes have been read.</color>
<color=#75715e>     * @throws IOException  if an I/O error occurs.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>readDouble</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>longBitsToDouble</color><color=#f8f8f2>(</color><color=#f8f8f2>readLong</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * @return the next four bytes of this input stream, interpreted as a little endian {@code int}.</color>
<color=#75715e>     * @throws EOFException if end of stream occurs before four bytes have been read.</color>
<color=#75715e>     * @throws IOException  if an I/O error occurs.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#a6e22e>readFloat</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>intBitsToFloat</color><color=#f8f8f2>(</color><color=#f8f8f2>readInt</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Sets the file-pointer offset, measured from the beginning of this file, at which the next read</color>
<color=#75715e>     * or write occurs. The offset may be set beyond the end of the file. Setting the offset beyond</color>
<color=#75715e>     * the end of the file does not change the file length. The file length will change only by</color>
<color=#75715e>     * writing after the offset has been set beyond the end of the file.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pos the offset position, measured in bytes from the beginning of the file, at which to</color>
<color=#75715e>     *            set the file pointer.</color>
<color=#75715e>     * @throws IOException if {@code pos} is less than {@code 0} or if an I/O error occurs.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pos</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>pos</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setLength</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>newLength</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>setLength</color><color=#f8f8f2>(</color><color=#f8f8f2>newLength</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>skipBytes</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>skipBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>n</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes a {@code boolean} to the underlying output stream as a single byte. If the argument is</color>
<color=#75715e>     * true, the byte value 1 is written. If the argument is false, the byte value {@code 0} in</color>
<color=#75715e>     * written.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pBoolean the {@code boolean} value to be written.</color>
<color=#75715e>     * @throws IOException if the underlying stream throws an IOException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeBoolean</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>pBoolean</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pBoolean</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>write</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>write</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes out a {@code byte} to the underlying output stream</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pByte the {@code byte} value to be written.</color>
<color=#75715e>     * @throws IOException if the underlying stream throws an IOException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeByte</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pByte</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>pByte</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes a two byte {@code short} to the underlying output stream in little endian order, low</color>
<color=#75715e>     * byte first.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pShort the {@code short} to be written.</color>
<color=#75715e>     * @throws IOException if the underlying stream throws an IOException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeShort</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pShort</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>pShort</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#f8f8f2>pShort</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes a two byte {@code char} to the underlying output stream in little endian order, low byte</color>
<color=#75715e>     * first.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pChar the {@code char} value to be written.</color>
<color=#75715e>     * @throws IOException if the underlying stream throws an IOException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeChar</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pChar</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>pChar</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#f8f8f2>pChar</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes a four-byte {@code int} to the underlying output stream in little endian order, low byte</color>
<color=#75715e>     * first, high byte last</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pInt the {@code int} to be written.</color>
<color=#75715e>     * @throws IOException if the underlying stream throws an IOException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeInt</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pInt</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>pInt</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#f8f8f2>pInt</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#f8f8f2>pInt</color> <color=#f92672>>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#f8f8f2>pInt</color> <color=#f92672>>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes an eight-byte {@code long} to the underlying output stream in little endian order, low</color>
<color=#75715e>     * byte first, high byte last</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pLong the {@code long} to be written.</color>
<color=#75715e>     * @throws IOException if the underlying stream throws an IOException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeLong</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>pLong</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>pLong</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLong</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLong</color> <color=#f92672>>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLong</color> <color=#f92672>>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLong</color> <color=#f92672>>>></color> <color=#ae81ff>32</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLong</color> <color=#f92672>>>></color> <color=#ae81ff>40</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLong</color> <color=#f92672>>>></color> <color=#ae81ff>48</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLong</color> <color=#f92672>>>></color> <color=#ae81ff>56</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes a 4 byte Java float to the underlying output stream in little endian order.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param f the {@code float} value to be written.</color>
<color=#75715e>     * @throws IOException if an I/O error occurs.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>writeFloat</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>f</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>writeInt</color><color=#f8f8f2>(</color><color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>floatToIntBits</color><color=#f8f8f2>(</color><color=#f8f8f2>f</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes an 8 byte Java double to the underlying output stream in little endian order.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param d the {@code double} value to be written.</color>
<color=#75715e>     * @throws IOException if an I/O error occurs.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>writeDouble</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>d</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>writeLong</color><color=#f8f8f2>(</color><color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>doubleToLongBits</color><color=#f8f8f2>(</color><color=#f8f8f2>d</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes a string to the underlying output stream as a sequence of bytes. Each character is</color>
<color=#75715e>     * written to the data output stream as if by the {@code writeByte()} method.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString the {@code String} value to be written.</color>
<color=#75715e>     * @throws IOException if the underlying stream throws an IOException.</color>
<color=#75715e>     * @see #writeByte(int)</color>
<color=#75715e>     * @see #file</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes a string to the underlying output stream as a sequence of characters. Each character is</color>
<color=#75715e>     * written to the data output stream as if by the {@code writeChar} method.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString a {@code String} value to be written.</color>
<color=#75715e>     * @throws IOException if the underlying stream throws an IOException.</color>
<color=#75715e>     * @see #writeChar(int)</color>
<color=#75715e>     * @see #file</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeChars</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#f8f8f2>c</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes a string of no more than 65,535 characters to the underlying output stream using UTF-8</color>
<color=#75715e>     * encoding. This method first writes a two byte short in <b>big</b> endian order as required by</color>
<color=#75715e>     * the UTF-8 specification. This gives the number of bytes in the UTF-8 encoded version of the</color>
<color=#75715e>     * string, not the number of characters in the string. Next each character of the string is</color>
<color=#75715e>     * written using the UTF-8 encoding for the character.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString the string to be written.</color>
<color=#75715e>     * @throws UTFDataFormatException if the string is longer than 65,535 characters.</color>
<color=#75715e>     * @throws IOException            if the underlying stream throws an IOException.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeUTF</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>numchars</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>numbytes</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>numchars</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>c</color> <color=#f92672>>=</color> <color=#ae81ff>0x0001</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672><=</color> <color=#ae81ff>0x007F</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>numbytes</color><color=#f92672>++</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>></color> <color=#ae81ff>0x07FF</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>numbytes</color> <color=#f92672>+=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>numbytes</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>numbytes</color> <color=#f92672>></color> <color=#ae81ff>65535</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UTFDataFormatException</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#f8f8f2>numbytes</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>numbytes</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>numchars</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>c</color> <color=#f92672>>=</color> <color=#ae81ff>0x0001</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672><=</color> <color=#ae81ff>0x007F</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>></color> <color=#ae81ff>0x07FF</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#ae81ff>0xE0</color> <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>c</color> <color=#f92672>>></color> <color=#ae81ff>12</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0x0F</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#ae81ff>0x80</color> <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>c</color> <color=#f92672>>></color> <color=#ae81ff>6</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0x3F</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#ae81ff>0x80</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>&</color> <color=#ae81ff>0x3F</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#ae81ff>0xC0</color> <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>c</color> <color=#f92672>>></color> <color=#ae81ff>6</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0x1F</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>file</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#ae81ff>0x80</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>&</color> <color=#ae81ff>0x3F</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>