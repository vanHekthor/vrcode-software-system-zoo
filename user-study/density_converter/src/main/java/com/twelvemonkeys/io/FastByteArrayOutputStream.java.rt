<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.io</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.ByteArrayInputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.ByteArrayOutputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.OutputStream</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * An unsynchronized {@code ByteArrayOutputStream} implementation. This version also has a</color>
<color=#75715e> * constructor that lets you create a stream with initial content.</color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @version $Id: FastByteArrayOutputStream.java#2 $</color>
<color=#75715e> */</color>
<color=#75715e>// TODO: Performance test of a stream impl that uses list of fixed size blocks, rather than</color>
<color=#75715e>// contiguous block</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>FastByteArrayOutputStream</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ByteArrayOutputStream</color> <color=#f8f8f2>{</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Max grow size (unless if writing more than this amount of bytes)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxGrowSize</color> <color=#f92672>=</color> <color=#ae81ff>1024</color> <color=#f92672>*</color> <color=#ae81ff>1024</color><color=#f8f8f2>;</color> <color=#75715e>// 1 MB</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@code ByteArrayOutputStream} with the given initial buffer size.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSize initial buffer size</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>FastByteArrayOutputStream</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>pSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@code ByteArrayOutputStream} with the given initial content.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>Note that the buffer is not cloned, for maximum performance.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pBuffer initial buffer</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>FastByteArrayOutputStream</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pBuffer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color> <color=#75715e>// Don't allocate array</color>
        <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#f8f8f2>pBuffer</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>pBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color> <color=#f8f8f2>pBytes</color><color=#f92672>[]</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pOffset</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color>
                <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>pOffset</color> <color=#f92672>></color> <color=#f8f8f2>pBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color>
                <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLength</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color>
                <color=#f92672>||</color> <color=#f8f8f2>((</color><color=#f8f8f2>pOffset</color> <color=#f92672>+</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#f92672>></color> <color=#f8f8f2>pBytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color>
                <color=#f92672>||</color> <color=#f8f8f2>((</color><color=#f8f8f2>pOffset</color> <color=#f92672>+</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLength</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>newCount</color> <color=#f92672>=</color> <color=#f8f8f2>count</color> <color=#f92672>+</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>growIfNeeded</color><color=#f8f8f2>(</color><color=#f8f8f2>newCount</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>pBytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#f8f8f2>count</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>newCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pByte</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>newCount</color> <color=#f92672>=</color> <color=#f8f8f2>count</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>growIfNeeded</color><color=#f8f8f2>(</color><color=#f8f8f2>newCount</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>buf</color><color=#f92672>[</color><color=#f8f8f2>count</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>pByte</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>newCount</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>growIfNeeded</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pNewCount</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pNewCount</color> <color=#f92672>></color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>newSize</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672><<</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#f8f8f2>maxGrowSize</color><color=#f8f8f2>),</color> <color=#f8f8f2>pNewCount</color><color=#f8f8f2>);</color>
            <color=#66d9ef>byte</color> <color=#f8f8f2>newBuf</color><color=#f92672>[]</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>newSize</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>newBuf</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>count</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#f8f8f2>newBuf</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// Non-synchronized version of writeTo</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeTo</color><color=#f8f8f2>(</color><color=#f8f8f2>OutputStream</color> <color=#f8f8f2>pOut</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>count</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// Non-synchronized version of toByteArray</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>toByteArray</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>byte</color> <color=#f8f8f2>newBuf</color><color=#f92672>[]</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>count</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>newBuf</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>count</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>newBuf</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@code ByteArrayInputStream} that reads directly from this {@code</color>
<color=#75715e>     * FastByteArrayOutputStream}'s byte buffer. The buffer is not cloned, for maximum performance.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>Note that care needs to be taken to avoid writes to this output stream after the input</color>
<color=#75715e>     * stream is created. Failing to do so, may result in unpredictable behaviour.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return a new {@code ByteArrayInputStream}, reading from this stream's buffer.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>ByteArrayInputStream</color> <color=#a6e22e>createInputStream</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteArrayInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>buf</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>count</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>