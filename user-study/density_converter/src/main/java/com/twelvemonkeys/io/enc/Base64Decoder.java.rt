<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.io.enc</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.InputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteBuffer</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * {@code Decoder} implementation for standard base64 encoding.</color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @version $Id:</color>
<color=#75715e> * //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/io/enc/Base64Decoder.java#2</color>
<color=#75715e> * $</color>
<color=#75715e> * @see <a href="http://tools.ietf.org/html/rfc1421">RFC 1421</a></color>
<color=#75715e> * @see <a href="http://tools.ietf.org/html/rfc2045"RFC 2045</a></color>
<color=#75715e> * @see Base64Encoder</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>Base64Decoder</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Decoder</color> <color=#f8f8f2>{</color>
    <color=#75715e>/**</color>
<color=#75715e>     * This array maps the characters to their 6 bit values</color>
<color=#75715e>     */</color>
    <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>PEM_ARRAY</color> <color=#f92672>=</color> <color=#f8f8f2>{</color>
            <color=#75715e>// 0   1    2    3    4    5    6    7</color>
            <color=#e6db74>'A'</color><color=#f8f8f2>,</color> <color=#e6db74>'B'</color><color=#f8f8f2>,</color> <color=#e6db74>'C'</color><color=#f8f8f2>,</color> <color=#e6db74>'D'</color><color=#f8f8f2>,</color> <color=#e6db74>'E'</color><color=#f8f8f2>,</color> <color=#e6db74>'F'</color><color=#f8f8f2>,</color> <color=#e6db74>'G'</color><color=#f8f8f2>,</color> <color=#e6db74>'H'</color><color=#f8f8f2>,</color> <color=#75715e>// 0</color>
            <color=#e6db74>'I'</color><color=#f8f8f2>,</color> <color=#e6db74>'J'</color><color=#f8f8f2>,</color> <color=#e6db74>'K'</color><color=#f8f8f2>,</color> <color=#e6db74>'L'</color><color=#f8f8f2>,</color> <color=#e6db74>'M'</color><color=#f8f8f2>,</color> <color=#e6db74>'N'</color><color=#f8f8f2>,</color> <color=#e6db74>'O'</color><color=#f8f8f2>,</color> <color=#e6db74>'P'</color><color=#f8f8f2>,</color> <color=#75715e>// 1</color>
            <color=#e6db74>'Q'</color><color=#f8f8f2>,</color> <color=#e6db74>'R'</color><color=#f8f8f2>,</color> <color=#e6db74>'S'</color><color=#f8f8f2>,</color> <color=#e6db74>'T'</color><color=#f8f8f2>,</color> <color=#e6db74>'U'</color><color=#f8f8f2>,</color> <color=#e6db74>'V'</color><color=#f8f8f2>,</color> <color=#e6db74>'W'</color><color=#f8f8f2>,</color> <color=#e6db74>'X'</color><color=#f8f8f2>,</color> <color=#75715e>// 2</color>
            <color=#e6db74>'Y'</color><color=#f8f8f2>,</color> <color=#e6db74>'Z'</color><color=#f8f8f2>,</color> <color=#e6db74>'a'</color><color=#f8f8f2>,</color> <color=#e6db74>'b'</color><color=#f8f8f2>,</color> <color=#e6db74>'c'</color><color=#f8f8f2>,</color> <color=#e6db74>'d'</color><color=#f8f8f2>,</color> <color=#e6db74>'e'</color><color=#f8f8f2>,</color> <color=#e6db74>'f'</color><color=#f8f8f2>,</color> <color=#75715e>// 3</color>
            <color=#e6db74>'g'</color><color=#f8f8f2>,</color> <color=#e6db74>'h'</color><color=#f8f8f2>,</color> <color=#e6db74>'i'</color><color=#f8f8f2>,</color> <color=#e6db74>'j'</color><color=#f8f8f2>,</color> <color=#e6db74>'k'</color><color=#f8f8f2>,</color> <color=#e6db74>'l'</color><color=#f8f8f2>,</color> <color=#e6db74>'m'</color><color=#f8f8f2>,</color> <color=#e6db74>'n'</color><color=#f8f8f2>,</color> <color=#75715e>// 4</color>
            <color=#e6db74>'o'</color><color=#f8f8f2>,</color> <color=#e6db74>'p'</color><color=#f8f8f2>,</color> <color=#e6db74>'q'</color><color=#f8f8f2>,</color> <color=#e6db74>'r'</color><color=#f8f8f2>,</color> <color=#e6db74>'s'</color><color=#f8f8f2>,</color> <color=#e6db74>'t'</color><color=#f8f8f2>,</color> <color=#e6db74>'u'</color><color=#f8f8f2>,</color> <color=#e6db74>'v'</color><color=#f8f8f2>,</color> <color=#75715e>// 5</color>
            <color=#e6db74>'w'</color><color=#f8f8f2>,</color> <color=#e6db74>'x'</color><color=#f8f8f2>,</color> <color=#e6db74>'y'</color><color=#f8f8f2>,</color> <color=#e6db74>'z'</color><color=#f8f8f2>,</color> <color=#e6db74>'0'</color><color=#f8f8f2>,</color> <color=#e6db74>'1'</color><color=#f8f8f2>,</color> <color=#e6db74>'2'</color><color=#f8f8f2>,</color> <color=#e6db74>'3'</color><color=#f8f8f2>,</color> <color=#75715e>// 6</color>
            <color=#e6db74>'4'</color><color=#f8f8f2>,</color> <color=#e6db74>'5'</color><color=#f8f8f2>,</color> <color=#e6db74>'6'</color><color=#f8f8f2>,</color> <color=#e6db74>'7'</color><color=#f8f8f2>,</color> <color=#e6db74>'8'</color><color=#f8f8f2>,</color> <color=#e6db74>'9'</color><color=#f8f8f2>,</color> <color=#e6db74>'+'</color><color=#f8f8f2>,</color> <color=#e6db74>'/'</color> <color=#75715e>// 7</color>
    <color=#f8f8f2>};</color>

    <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>PEM_CONVERT_ARRAY</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>decodeBuffer</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>4</color><color=#f92672>]</color><color=#f8f8f2>;</color>

    <color=#66d9ef>static</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>PEM_CONVERT_ARRAY</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>256</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#ae81ff>255</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>PEM_CONVERT_ARRAY</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>PEM_ARRAY</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>PEM_CONVERT_ARRAY</color><color=#f92672>[</color><color=#f8f8f2>PEM_ARRAY</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>readFully</color><color=#f8f8f2>(</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>InputStream</color> <color=#f8f8f2>pStream</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color> <color=#f8f8f2>pBytes</color><color=#f92672>[]</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>read</color> <color=#f92672>=</color> <color=#f8f8f2>pStream</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>read</color> <color=#f92672>==</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>i</color> <color=#f92672>!=</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f8f8f2>i</color> <color=#f8f8f2>:</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>pBytes</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#f8f8f2>pOffset</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>read</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#a6e22e>decodeAtom</color><color=#f8f8f2>(</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>InputStream</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>pOutput</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>byte</color> <color=#f8f8f2>byte0</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>byte</color> <color=#f8f8f2>byte1</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>byte</color> <color=#f8f8f2>byte2</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>byte</color> <color=#f8f8f2>byte3</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLength</color> <color=#f92672><</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"BASE64Decoder: Not enough bytes for an atom."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>read</color><color=#f8f8f2>;</color>

        <color=#75715e>// Skip line feeds</color>
        <color=#66d9ef>do</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>read</color> <color=#f92672>=</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>read</color> <color=#f92672>==</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>read</color> <color=#f92672>==</color> <color=#ae81ff>10</color> <color=#f92672>||</color> <color=#f8f8f2>read</color> <color=#f92672>==</color> <color=#ae81ff>13</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>decodeBuffer</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>read</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>read</color> <color=#f92672>=</color> <color=#f8f8f2>readFully</color><color=#f8f8f2>(</color><color=#f8f8f2>pInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>decodeBuffer</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>read</color> <color=#f92672>==</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>length</color> <color=#f92672>></color> <color=#ae81ff>3</color> <color=#f92672>&&</color> <color=#f8f8f2>decodeBuffer</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#ae81ff>61</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>length</color> <color=#f92672>></color> <color=#ae81ff>2</color> <color=#f92672>&&</color> <color=#f8f8f2>decodeBuffer</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#ae81ff>61</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>case</color> <color=#ae81ff>4</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>byte3</color> <color=#f92672>=</color> <color=#f8f8f2>PEM_CONVERT_ARRAY</color><color=#f92672>[</color><color=#f8f8f2>decodeBuffer</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>255</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#75715e>// fall through</color>
            <color=#66d9ef>case</color> <color=#ae81ff>3</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>byte2</color> <color=#f92672>=</color> <color=#f8f8f2>PEM_CONVERT_ARRAY</color><color=#f92672>[</color><color=#f8f8f2>decodeBuffer</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>255</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#75715e>// fall through</color>
            <color=#66d9ef>case</color> <color=#ae81ff>2</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>byte1</color> <color=#f92672>=</color> <color=#f8f8f2>PEM_CONVERT_ARRAY</color><color=#f92672>[</color><color=#f8f8f2>decodeBuffer</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>255</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>byte0</color> <color=#f92672>=</color> <color=#f8f8f2>PEM_CONVERT_ARRAY</color><color=#f92672>[</color><color=#f8f8f2>decodeBuffer</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>255</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#75715e>// fall through</color>
            <color=#66d9ef>default</color><color=#f8f8f2>:</color>
                <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>case</color> <color=#ae81ff>2</color><color=#f8f8f2>:</color>
                        <color=#f8f8f2>pOutput</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>byte0</color> <color=#f92672><<</color> <color=#ae81ff>2</color> <color=#f92672>&</color> <color=#ae81ff>252</color> <color=#f92672>|</color> <color=#f8f8f2>byte1</color> <color=#f92672>>>></color> <color=#ae81ff>4</color> <color=#f92672>&</color> <color=#ae81ff>3</color><color=#f8f8f2>));</color>
                        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>case</color> <color=#ae81ff>3</color><color=#f8f8f2>:</color>
                        <color=#f8f8f2>pOutput</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>byte0</color> <color=#f92672><<</color> <color=#ae81ff>2</color> <color=#f92672>&</color> <color=#ae81ff>252</color> <color=#f92672>|</color> <color=#f8f8f2>byte1</color> <color=#f92672>>>></color> <color=#ae81ff>4</color> <color=#f92672>&</color> <color=#ae81ff>3</color><color=#f8f8f2>));</color>
                        <color=#f8f8f2>pOutput</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>byte1</color> <color=#f92672><<</color> <color=#ae81ff>4</color> <color=#f92672>&</color> <color=#ae81ff>240</color> <color=#f92672>|</color> <color=#f8f8f2>byte2</color> <color=#f92672>>>></color> <color=#ae81ff>2</color> <color=#f92672>&</color> <color=#ae81ff>15</color><color=#f8f8f2>));</color>
                        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>case</color> <color=#ae81ff>4</color><color=#f8f8f2>:</color>
                        <color=#f8f8f2>pOutput</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>byte0</color> <color=#f92672><<</color> <color=#ae81ff>2</color> <color=#f92672>&</color> <color=#ae81ff>252</color> <color=#f92672>|</color> <color=#f8f8f2>byte1</color> <color=#f92672>>>></color> <color=#ae81ff>4</color> <color=#f92672>&</color> <color=#ae81ff>3</color><color=#f8f8f2>));</color>
                        <color=#f8f8f2>pOutput</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>byte1</color> <color=#f92672><<</color> <color=#ae81ff>4</color> <color=#f92672>&</color> <color=#ae81ff>240</color> <color=#f92672>|</color> <color=#f8f8f2>byte2</color> <color=#f92672>>>></color> <color=#ae81ff>2</color> <color=#f92672>&</color> <color=#ae81ff>15</color><color=#f8f8f2>));</color>
                        <color=#f8f8f2>pOutput</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>byte2</color> <color=#f92672><<</color> <color=#ae81ff>6</color> <color=#f92672>&</color> <color=#ae81ff>192</color> <color=#f92672>|</color> <color=#f8f8f2>byte3</color> <color=#f92672>&</color> <color=#ae81ff>63</color><color=#f8f8f2>));</color>
                        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>decode</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>InputStream</color> <color=#f8f8f2>stream</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>do</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#ae81ff>72</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>

            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>4</color> <color=#f92672><</color> <color=#f8f8f2>k</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>decodeAtom</color><color=#f8f8f2>(</color><color=#f8f8f2>stream</color><color=#f8f8f2>,</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#ae81ff>4</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>decodeAtom</color><color=#f8f8f2>(</color><color=#f8f8f2>stream</color><color=#f8f8f2>,</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>k</color> <color=#f92672>-</color> <color=#f8f8f2>i</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>remaining</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>54</color><color=#f8f8f2>);</color> <color=#75715e>// 72 char lines should produce no more than 54 bytes</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>