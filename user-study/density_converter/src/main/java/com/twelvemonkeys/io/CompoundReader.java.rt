<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.io</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.lang.Validate</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.Reader</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.ArrayList</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Iterator</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.List</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A Reader implementation that can read from multiple sources.</color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haku $</color>
<color=#75715e> * @version $Id:</color>
<color=#75715e> * //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/io/CompoundReader.java#2</color>
<color=#75715e> * $</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>CompoundReader</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Reader</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>Reader</color> <color=#f8f8f2>current</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Reader</color><color=#f92672>></color> <color=#f8f8f2>readers</color><color=#f8f8f2>;</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>finalLock</color><color=#f8f8f2>;</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>markSupported</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>currentReader</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>markedReader</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>mark</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>mNext</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Create a new compound reader.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pReaders {@code Iterator} containting {@code Reader}s, providing the character stream.</color>
<color=#75715e>     * @throws NullPointerException if {@code pReaders} is {@code null}, or any of the elements in the</color>
<color=#75715e>     *                              iterator is {@code null}.</color>
<color=#75715e>     * @throws ClassCastException   if any element of the iterator is not a {@code java.io.Reader}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>CompoundReader</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>Reader</color><color=#f92672>></color> <color=#f8f8f2>pReaders</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>Validate</color><color=#f8f8f2>.</color><color=#a6e22e>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>pReaders</color><color=#f8f8f2>,</color> <color=#e6db74>"readers"</color><color=#f8f8f2>));</color>

        <color=#f8f8f2>finalLock</color> <color=#f92672>=</color> <color=#f8f8f2>pReaders</color><color=#f8f8f2>;</color> <color=#75715e>// NOTE: It's ok to sync on pReaders, as the</color>
        <color=#75715e>// reference can't change, only it's elements</color>

        <color=#f8f8f2>readers</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>Reader</color><color=#f92672>></color><color=#f8f8f2>();</color>

        <color=#66d9ef>boolean</color> <color=#f8f8f2>markSupported</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>pReaders</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Reader</color> <color=#f8f8f2>reader</color> <color=#f92672>=</color> <color=#f8f8f2>pReaders</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>reader</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"readers cannot contain null-elements"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>readers</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>reader</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>markSupported</color> <color=#f92672>=</color> <color=#f8f8f2>markSupported</color> <color=#f92672>&&</color> <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>markSupported</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>markSupported</color> <color=#f92672>=</color> <color=#f8f8f2>markSupported</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>current</color> <color=#f92672>=</color> <color=#f8f8f2>nextReader</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#f8f8f2>Reader</color> <color=#a6e22e>nextReader</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentReader</color> <color=#f92672>>=</color> <color=#f8f8f2>readers</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>current</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>EmptyReader</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>current</color> <color=#f92672>=</color> <color=#f8f8f2>readers</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>currentReader</color><color=#f92672>++</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// NOTE: Reset mNext for every reader, and record marked reader in mark/reset methods!</color>
        <color=#f8f8f2>mNext</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>current</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Check to make sure that the stream has not been closed</color>
<color=#75715e>     *</color>
<color=#75715e>     * @throws IOException if the stream is closed</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>ensureOpen</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>readers</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"Stream closed"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>close</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Close all readers</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Reader</color> <color=#f8f8f2>reader</color> <color=#f8f8f2>:</color> <color=#f8f8f2>readers</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>readers</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>mark</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pReadLimit</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pReadLimit</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Read limit < 0"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// TODO: It would be nice if we could actually close some readers now</color>

        <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>finalLock</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>ensureOpen</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>mark</color> <color=#f92672>=</color> <color=#f8f8f2>mNext</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>markedReader</color> <color=#f92672>=</color> <color=#f8f8f2>currentReader</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>current</color><color=#f8f8f2>.</color><color=#a6e22e>mark</color><color=#f8f8f2>(</color><color=#f8f8f2>pReadLimit</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>reset</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>finalLock</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>ensureOpen</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentReader</color> <color=#f92672>!=</color> <color=#f8f8f2>markedReader</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Reset any reader before this</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>currentReader</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>>=</color> <color=#f8f8f2>markedReader</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>readers</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>).</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>currentReader</color> <color=#f92672>=</color> <color=#f8f8f2>markedReader</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>nextReader</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>current</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>

            <color=#f8f8f2>mNext</color> <color=#f92672>=</color> <color=#f8f8f2>mark</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>markSupported</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>markSupported</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>finalLock</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>read</color> <color=#f92672>=</color> <color=#f8f8f2>current</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>read</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>currentReader</color> <color=#f92672><</color> <color=#f8f8f2>readers</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>nextReader</color><color=#f8f8f2>();</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>read</color><color=#f8f8f2>();</color> <color=#75715e>// In case of 0-length readers</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>mNext</color><color=#f92672>++</color><color=#f8f8f2>;</color>

            <color=#66d9ef>return</color> <color=#f8f8f2>read</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>char</color> <color=#f8f8f2>pBuffer</color><color=#f92672>[]</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>finalLock</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>read</color> <color=#f92672>=</color> <color=#f8f8f2>current</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>pBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>);</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>read</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>currentReader</color> <color=#f92672><</color> <color=#f8f8f2>readers</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>nextReader</color><color=#f8f8f2>();</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>read</color><color=#f8f8f2>(</color><color=#f8f8f2>pBuffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>);</color> <color=#75715e>// In case of 0-length readers</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>mNext</color> <color=#f92672>+=</color> <color=#f8f8f2>read</color><color=#f8f8f2>;</color>

            <color=#66d9ef>return</color> <color=#f8f8f2>read</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>ready</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>current</color><color=#f8f8f2>.</color><color=#a6e22e>ready</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>skip</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>pChars</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>finalLock</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>long</color> <color=#f8f8f2>skipped</color> <color=#f92672>=</color> <color=#f8f8f2>current</color><color=#f8f8f2>.</color><color=#a6e22e>skip</color><color=#f8f8f2>(</color><color=#f8f8f2>pChars</color><color=#f8f8f2>);</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>skipped</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>currentReader</color> <color=#f92672><</color> <color=#f8f8f2>readers</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>nextReader</color><color=#f8f8f2>();</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>skip</color><color=#f8f8f2>(</color><color=#f8f8f2>pChars</color><color=#f8f8f2>);</color> <color=#75715e>// In case of 0-length readers</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>mNext</color> <color=#f92672>+=</color> <color=#f8f8f2>skipped</color><color=#f8f8f2>;</color>

            <color=#66d9ef>return</color> <color=#f8f8f2>skipped</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>