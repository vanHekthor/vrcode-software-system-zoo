<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2014, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.imageio.util</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.imageio.color.DiscreteAlphaIndexColorModel</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.ImageTypeSpecifier</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.color.ColorSpace</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.*</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.twelvemonkeys.lang.Validate.isTrue</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>com.twelvemonkeys.lang.Validate.notNull</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Factory class for creating {@code ImageTypeSpecifier}s.</color>
<color=#75715e> * Fixes some subtle bugs in {@code ImageTypeSpecifier}'s factory methods, but</color>
<color=#75715e> * in most cases, this class will delegate to the corresponding methods in {@link ImageTypeSpecifier}.</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haraldk$</color>
<color=#75715e> * @version $Id: ImageTypeSpecifiers.java,v 1.0 24.01.11 17.51 haraldk Exp$</color>
<color=#75715e> * @see ImageTypeSpecifier</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>ImageTypeSpecifiers</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#a6e22e>ImageTypeSpecifiers</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>ImageTypeSpecifier</color> <color=#a6e22e>createFromBufferedImageType</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>bufferedImageType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>ImageTypeSpecifier</color><color=#f8f8f2>.</color><color=#a6e22e>createFromBufferedImageType</color><color=#f8f8f2>(</color><color=#f8f8f2>bufferedImageType</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>ImageTypeSpecifier</color> <color=#a6e22e>createPacked</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ColorSpace</color> <color=#f8f8f2>colorSpace</color><color=#f8f8f2>,</color>
                                                  <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>redMask</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>greenMask</color><color=#f8f8f2>,</color>
                                                  <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>blueMask</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>alphaMask</color><color=#f8f8f2>,</color>
                                                  <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>transferType</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isAlphaPremultiplied</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>transferType</color> <color=#f92672>==</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BYTE</color> <color=#f92672>||</color> <color=#f8f8f2>transferType</color> <color=#f92672>==</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_USHORT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// ImageTypeSpecifier unconditionally uses bits == 32, we'll use a workaround for BYTE/USHORT types</color>
            <color=#f8f8f2>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>colorSpace</color><color=#f8f8f2>,</color> <color=#e6db74>"colorSpace"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>isTrue</color><color=#f8f8f2>(</color><color=#f8f8f2>colorSpace</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>ColorSpace</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_RGB</color><color=#f8f8f2>,</color> <color=#f8f8f2>colorSpace</color><color=#f8f8f2>,</color> <color=#e6db74>"ColorSpace must be TYPE_RGB"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>isTrue</color><color=#f8f8f2>(</color><color=#f8f8f2>redMask</color> <color=#f92672>!=</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>greenMask</color> <color=#f92672>!=</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>blueMask</color> <color=#f92672>!=</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>alphaMask</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#e6db74>"No mask has at least 1 bit set"</color><color=#f8f8f2>);</color>

            <color=#66d9ef>int</color> <color=#f8f8f2>bits</color> <color=#f92672>=</color> <color=#f8f8f2>transferType</color> <color=#f92672>==</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BYTE</color> <color=#f92672>?</color> <color=#ae81ff>8</color> <color=#f8f8f2>:</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>colorModel</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DirectColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>colorSpace</color><color=#f8f8f2>,</color> <color=#f8f8f2>bits</color><color=#f8f8f2>,</color> <color=#f8f8f2>redMask</color><color=#f8f8f2>,</color> <color=#f8f8f2>greenMask</color><color=#f8f8f2>,</color> <color=#f8f8f2>blueMask</color><color=#f8f8f2>,</color> <color=#f8f8f2>alphaMask</color><color=#f8f8f2>,</color>
                    <color=#f8f8f2>isAlphaPremultiplied</color><color=#f8f8f2>,</color> <color=#f8f8f2>transferType</color><color=#f8f8f2>);</color>

            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ImageTypeSpecifier</color><color=#f8f8f2>(</color><color=#f8f8f2>colorModel</color><color=#f8f8f2>,</color> <color=#f8f8f2>colorModel</color><color=#f8f8f2>.</color><color=#a6e22e>createCompatibleSampleModel</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>ImageTypeSpecifier</color><color=#f8f8f2>.</color><color=#a6e22e>createPacked</color><color=#f8f8f2>(</color><color=#f8f8f2>colorSpace</color><color=#f8f8f2>,</color> <color=#f8f8f2>redMask</color><color=#f8f8f2>,</color> <color=#f8f8f2>greenMask</color><color=#f8f8f2>,</color> <color=#f8f8f2>blueMask</color><color=#f8f8f2>,</color> <color=#f8f8f2>alphaMask</color><color=#f8f8f2>,</color> <color=#f8f8f2>transferType</color><color=#f8f8f2>,</color> <color=#f8f8f2>isAlphaPremultiplied</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>ImageTypeSpecifier</color> <color=#a6e22e>createInterleaved</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ColorSpace</color> <color=#f8f8f2>colorSpace</color><color=#f8f8f2>,</color>
                                                       <color=#66d9ef>final</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>bandOffsets</color><color=#f8f8f2>,</color>
                                                       <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>dataType</color><color=#f8f8f2>,</color>
                                                       <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>hasAlpha</color><color=#f8f8f2>,</color>
                                                       <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isAlphaPremultiplied</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// As the ComponentColorModel is broken for 32 bit unsigned int, we'll use our own version</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dataType</color> <color=#f92672>==</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>UInt32ImageTypeSpecifier</color><color=#f8f8f2>.</color><color=#a6e22e>createInterleaved</color><color=#f8f8f2>(</color><color=#f8f8f2>colorSpace</color><color=#f8f8f2>,</color> <color=#f8f8f2>bandOffsets</color><color=#f8f8f2>,</color> <color=#f8f8f2>hasAlpha</color><color=#f8f8f2>,</color> <color=#f8f8f2>isAlphaPremultiplied</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// ...or fall back to default for anything else</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>ImageTypeSpecifier</color><color=#f8f8f2>.</color><color=#a6e22e>createInterleaved</color><color=#f8f8f2>(</color><color=#f8f8f2>colorSpace</color><color=#f8f8f2>,</color> <color=#f8f8f2>bandOffsets</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataType</color><color=#f8f8f2>,</color> <color=#f8f8f2>hasAlpha</color><color=#f8f8f2>,</color> <color=#f8f8f2>isAlphaPremultiplied</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>ImageTypeSpecifier</color> <color=#a6e22e>createBanded</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ColorSpace</color> <color=#f8f8f2>colorSpace</color><color=#f8f8f2>,</color>
                                                  <color=#66d9ef>final</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>bankIndices</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>bandOffsets</color><color=#f8f8f2>,</color>
                                                  <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>dataType</color><color=#f8f8f2>,</color>
                                                  <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>hasAlpha</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isAlphaPremultiplied</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// As the ComponentColorModel is broken for 32 bit unsigned int, we'll use our own version</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dataType</color> <color=#f92672>==</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>UInt32ImageTypeSpecifier</color><color=#f8f8f2>.</color><color=#a6e22e>createBanded</color><color=#f8f8f2>(</color><color=#f8f8f2>colorSpace</color><color=#f8f8f2>,</color> <color=#f8f8f2>bankIndices</color><color=#f8f8f2>,</color> <color=#f8f8f2>bandOffsets</color><color=#f8f8f2>,</color> <color=#f8f8f2>hasAlpha</color><color=#f8f8f2>,</color> <color=#f8f8f2>isAlphaPremultiplied</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// ...or fall back to default for anything else</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>ImageTypeSpecifier</color><color=#f8f8f2>.</color><color=#a6e22e>createBanded</color><color=#f8f8f2>(</color><color=#f8f8f2>colorSpace</color><color=#f8f8f2>,</color> <color=#f8f8f2>bankIndices</color><color=#f8f8f2>,</color> <color=#f8f8f2>bandOffsets</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataType</color><color=#f8f8f2>,</color> <color=#f8f8f2>hasAlpha</color><color=#f8f8f2>,</color> <color=#f8f8f2>isAlphaPremultiplied</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>ImageTypeSpecifier</color> <color=#a6e22e>createGrayscale</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>bits</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>dataType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bits</color> <color=#f92672>==</color> <color=#ae81ff>16</color> <color=#f92672>&&</color> <color=#f8f8f2>dataType</color> <color=#f92672>==</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_SHORT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// As the ComponentColorModel is broken for 16 bit signed int, we'll use our own version</color>
            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Int16ImageTypeSpecifier</color><color=#f8f8f2>(</color><color=#f8f8f2>ColorSpace</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>ColorSpace</color><color=#f8f8f2>.</color><color=#a6e22e>CS_GRAY</color><color=#f8f8f2>),</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>{</color><color=#ae81ff>0</color><color=#f8f8f2>},</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bits</color> <color=#f92672>==</color> <color=#ae81ff>32</color> <color=#f92672>&&</color> <color=#f8f8f2>dataType</color> <color=#f92672>==</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// As the ComponentColorModel is broken for 32 bit unsigned int, we'll use our own version</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>UInt32ImageTypeSpecifier</color><color=#f8f8f2>.</color><color=#a6e22e>createInterleaved</color><color=#f8f8f2>(</color><color=#f8f8f2>ColorSpace</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>ColorSpace</color><color=#f8f8f2>.</color><color=#a6e22e>CS_GRAY</color><color=#f8f8f2>),</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>{</color><color=#ae81ff>0</color><color=#f8f8f2>},</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dataType</color> <color=#f92672>==</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_FLOAT</color> <color=#f92672>||</color> <color=#f8f8f2>dataType</color> <color=#f92672>==</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_DOUBLE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>ImageTypeSpecifier</color><color=#f8f8f2>.</color><color=#a6e22e>createInterleaved</color><color=#f8f8f2>(</color><color=#f8f8f2>ColorSpace</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>ColorSpace</color><color=#f8f8f2>.</color><color=#a6e22e>CS_GRAY</color><color=#f8f8f2>),</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>{</color><color=#ae81ff>0</color><color=#f8f8f2>},</color> <color=#f8f8f2>dataType</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// NOTE: The isSigned boolean is stored but *not used for anything* in the Grayscale ImageTypeSpecifier...</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>ImageTypeSpecifier</color><color=#f8f8f2>.</color><color=#a6e22e>createGrayscale</color><color=#f8f8f2>(</color><color=#f8f8f2>bits</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataType</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>ImageTypeSpecifier</color> <color=#a6e22e>createGrayscale</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>bits</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>dataType</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isAlphaPremultiplied</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bits</color> <color=#f92672>==</color> <color=#ae81ff>16</color> <color=#f92672>&&</color> <color=#f8f8f2>dataType</color> <color=#f92672>==</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_SHORT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// As the ComponentColorModel is broken for 16 bit signed int, we'll use our own version</color>
            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Int16ImageTypeSpecifier</color><color=#f8f8f2>(</color><color=#f8f8f2>ColorSpace</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>ColorSpace</color><color=#f8f8f2>.</color><color=#a6e22e>CS_GRAY</color><color=#f8f8f2>),</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>{</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>},</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>isAlphaPremultiplied</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bits</color> <color=#f92672>==</color> <color=#ae81ff>32</color> <color=#f92672>&&</color> <color=#f8f8f2>dataType</color> <color=#f92672>==</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// As the ComponentColorModel is broken for 32 bit unsigned int, we'll use our own version</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>UInt32ImageTypeSpecifier</color><color=#f8f8f2>.</color><color=#a6e22e>createInterleaved</color><color=#f8f8f2>(</color><color=#f8f8f2>ColorSpace</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>ColorSpace</color><color=#f8f8f2>.</color><color=#a6e22e>CS_GRAY</color><color=#f8f8f2>),</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>{</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>},</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>isAlphaPremultiplied</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dataType</color> <color=#f92672>==</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_FLOAT</color> <color=#f92672>||</color> <color=#f8f8f2>dataType</color> <color=#f92672>==</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_DOUBLE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>ImageTypeSpecifier</color><color=#f8f8f2>.</color><color=#a6e22e>createInterleaved</color><color=#f8f8f2>(</color><color=#f8f8f2>ColorSpace</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>ColorSpace</color><color=#f8f8f2>.</color><color=#a6e22e>CS_GRAY</color><color=#f8f8f2>),</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>{</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>},</color> <color=#f8f8f2>dataType</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>isAlphaPremultiplied</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// NOTE: The isSigned boolean is stored but *not used for anything* in the Grayscale ImageTypeSpecifier...</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>ImageTypeSpecifier</color><color=#f8f8f2>.</color><color=#a6e22e>createGrayscale</color><color=#f8f8f2>(</color><color=#f8f8f2>bits</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataType</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#f8f8f2>isAlphaPremultiplied</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>ImageTypeSpecifier</color> <color=#a6e22e>createPackedGrayscale</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ColorSpace</color> <color=#f8f8f2>colorSpace</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>bits</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>dataType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>colorSpace</color><color=#f8f8f2>,</color> <color=#e6db74>"colorSpace"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>isTrue</color><color=#f8f8f2>(</color><color=#f8f8f2>colorSpace</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>ColorSpace</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_GRAY</color><color=#f8f8f2>,</color> <color=#f8f8f2>colorSpace</color><color=#f8f8f2>,</color> <color=#e6db74>"ColorSpace must be TYPE_GRAY"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>isTrue</color><color=#f8f8f2>(</color><color=#f8f8f2>bits</color> <color=#f92672>==</color> <color=#ae81ff>1</color> <color=#f92672>||</color> <color=#f8f8f2>bits</color> <color=#f92672>==</color> <color=#ae81ff>2</color> <color=#f92672>||</color> <color=#f8f8f2>bits</color> <color=#f92672>==</color> <color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#f8f8f2>bits</color><color=#f8f8f2>,</color> <color=#e6db74>"bits must be 1, 2, or 4: %s"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>isTrue</color><color=#f8f8f2>(</color><color=#f8f8f2>dataType</color> <color=#f92672>==</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BYTE</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataType</color><color=#f8f8f2>,</color> <color=#e6db74>"dataType must be TYPE_BYTE: %s"</color><color=#f8f8f2>);</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>numEntries</color> <color=#f92672>=</color> <color=#ae81ff>1</color> <color=#f92672><<</color> <color=#f8f8f2>bits</color><color=#f8f8f2>;</color>

        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>arr</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>numEntries</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>arg</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>numEntries</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>arb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>numEntries</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#75715e>// Scale array values according to color profile..</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>numEntries</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>gray</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>float</color><color=#f92672>[]</color><color=#f8f8f2>{</color><color=#f8f8f2>i</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>numEntries</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)};</color>
            <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>colorSpace</color><color=#f8f8f2>.</color><color=#a6e22e>toRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>gray</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>arr</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>*</color> <color=#ae81ff>255</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>arg</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>*</color> <color=#ae81ff>255</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>arb</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>*</color> <color=#ae81ff>255</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>colorModel</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>bits</color><color=#f8f8f2>,</color> <color=#f8f8f2>numEntries</color><color=#f8f8f2>,</color> <color=#f8f8f2>arr</color><color=#f8f8f2>,</color> <color=#f8f8f2>arg</color><color=#f8f8f2>,</color> <color=#f8f8f2>arb</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>SampleModel</color> <color=#f8f8f2>sampleModel</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>MultiPixelPackedSampleModel</color><color=#f8f8f2>(</color><color=#f8f8f2>dataType</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>bits</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ImageTypeSpecifier</color><color=#f8f8f2>(</color><color=#f8f8f2>colorModel</color><color=#f8f8f2>,</color> <color=#f8f8f2>sampleModel</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>ImageTypeSpecifier</color> <color=#a6e22e>createIndexed</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>redLUT</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>greenLUT</color><color=#f8f8f2>,</color>
                                                   <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>blueLUT</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>alphaLUT</color><color=#f8f8f2>,</color>
                                                   <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>bits</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>dataType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>ImageTypeSpecifier</color><color=#f8f8f2>.</color><color=#a6e22e>createIndexed</color><color=#f8f8f2>(</color><color=#f8f8f2>redLUT</color><color=#f8f8f2>,</color> <color=#f8f8f2>greenLUT</color><color=#f8f8f2>,</color> <color=#f8f8f2>blueLUT</color><color=#f8f8f2>,</color> <color=#f8f8f2>alphaLUT</color><color=#f8f8f2>,</color> <color=#f8f8f2>bits</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataType</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>ImageTypeSpecifier</color> <color=#a6e22e>createIndexed</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>colors</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>hasAlpha</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>transIndex</color><color=#f8f8f2>,</color>
                                                   <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>bits</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>dataType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>createFromIndexColorModel</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>IndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>bits</color><color=#f8f8f2>,</color> <color=#f8f8f2>colors</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>colors</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>hasAlpha</color><color=#f8f8f2>,</color> <color=#f8f8f2>transIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataType</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>ImageTypeSpecifier</color> <color=#a6e22e>createFromIndexColorModel</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>IndexColorModel</color> <color=#f8f8f2>pColorModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>IndexedImageTypeSpecifier</color><color=#f8f8f2>.</color><color=#a6e22e>createFromIndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>pColorModel</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>ImageTypeSpecifier</color> <color=#a6e22e>createDiscreteAlphaIndexedFromIndexColorModel</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>IndexColorModel</color> <color=#f8f8f2>pColorModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>colorModel</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DiscreteAlphaIndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>pColorModel</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ImageTypeSpecifier</color><color=#f8f8f2>(</color><color=#f8f8f2>colorModel</color><color=#f8f8f2>,</color> <color=#f8f8f2>colorModel</color><color=#f8f8f2>.</color><color=#a6e22e>createCompatibleSampleModel</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>