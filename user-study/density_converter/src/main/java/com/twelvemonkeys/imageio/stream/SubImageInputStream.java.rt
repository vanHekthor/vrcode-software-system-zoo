<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2009, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.imageio.stream</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.lang.Validate</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.stream.ImageInputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.stream.ImageInputStreamImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A wrapper for {@link ImageInputStream} to limit the number of bytes that can be read.</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haraldk$</color>
<color=#75715e> * @version $Id: SubImageInputStream.java,v 1.0 Nov 8, 2009 2:50:58 PM haraldk Exp$</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>SubImageInputStream</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ImageInputStreamImpl</color> <color=#f8f8f2>{</color>
    <color=#75715e>// NOTE: This class is based on com.sun.imageio.plugins.common.SubImageInputStream, but fixes some of its bugs.</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>stream</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>startPos</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@link ImageInputStream}, reading up to a maximum number of bytes from the underlying stream.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pStream the underlying stream</color>
<color=#75715e>     * @param pLength the maximum length to read from the stream.</color>
<color=#75715e>     *                Note that {@code pStream} may contain less than this maximum number of bytes.</color>
<color=#75715e>     * @throws IOException              if {@code pStream}'s position can't be determined.</color>
<color=#75715e>     * @throws IllegalArgumentException if {@code pStream == null} or {@code pLength < 0}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>SubImageInputStream</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>pStream</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Validate</color><color=#f8f8f2>.</color><color=#a6e22e>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>pStream</color><color=#f8f8f2>,</color> <color=#e6db74>"stream"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>Validate</color><color=#f8f8f2>.</color><color=#a6e22e>isTrue</color><color=#f8f8f2>(</color><color=#f8f8f2>pLength</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>,</color> <color=#e6db74>"length < 0: %d"</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>stream</color> <color=#f92672>=</color> <color=#f8f8f2>pStream</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>startPos</color> <color=#f92672>=</color> <color=#f8f8f2>pStream</color><color=#f8f8f2>.</color><color=#a6e22e>getStreamPosition</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>streamPos</color> <color=#f92672>>=</color> <color=#f8f8f2>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color> <color=#75715e>// Local EOF</color>
            <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>read</color> <color=#f92672>=</color> <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>read</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>streamPos</color><color=#f92672>++</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>return</color> <color=#f8f8f2>read</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pBytes</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>streamPos</color> <color=#f92672>>=</color> <color=#f8f8f2>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color> <color=#75715e>// Local EOF</color>
            <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Safe cast, as pLength can never cause int overflow</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>pLength</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#f8f8f2>streamPos</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>pBytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>length</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>count</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>streamPos</color> <color=#f92672>+=</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>long</color> <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>length</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f92672>-</color><color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>length</color> <color=#f92672>-</color> <color=#f8f8f2>startPos</color><color=#f8f8f2>,</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pPosition</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pPosition</color> <color=#f92672><</color> <color=#f8f8f2>getFlushedPosition</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>(</color><color=#e6db74>"pos < flushedPosition"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>startPos</color> <color=#f92672>+</color> <color=#f8f8f2>pPosition</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>streamPos</color> <color=#f92672>=</color> <color=#f8f8f2>pPosition</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>({</color><color=#e6db74>"FinalizeDoesntCallSuperFinalize"</color><color=#f8f8f2>})</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>finalize</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>Throwable</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Empty finalizer (for improved performance; no need to call super.finalize() in this case)</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>