<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.imageio</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.image.BufferedImageIcon</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.image.ImageUtil</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.imageio.util.IIOUtil</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.metadata.IIOMetadata</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.spi.ImageReaderSpi</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.stream.ImageInputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.swing.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.datatransfer.DataFlavor</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.datatransfer.Transferable</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.datatransfer.UnsupportedFlavorException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.event.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.IndexColorModel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.File</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.InvocationTargetException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Arrays</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Iterator</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Abstract base class for image readers.</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haraldk$</color>
<color=#75715e> * @version $Id: ImageReaderBase.java,v 1.0 Sep 20, 2007 5:28:37 PM haraldk Exp$</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>ImageReaderBase</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ImageReader</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Point</color> <color=#f8f8f2>ORIGIN</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Point</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>

    <color=#75715e>/**</color>
<color=#75715e>     * For convenience. Only set if the input is an {@code ImageInputStream}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @see #setInput(Object, boolean, boolean)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>imageInput</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Constructs an {@code ImageReader} and sets its</color>
<color=#75715e>     * {@code originatingProvider} field to the supplied value.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * <p> Subclasses that make use of extensions should provide a</color>
<color=#75715e>     * constructor with signature {@code (ImageReaderSpi,</color>
<color=#75715e>     * Object)} in order to retrieve the extension object.  If</color>
<color=#75715e>     * the extension object is unsuitable, an</color>
<color=#75715e>     * {@code IllegalArgumentException} should be thrown.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param provider the {@code ImageReaderSpi} that is invoking this constructor, or {@code null}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#a6e22e>ImageReaderBase</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageReaderSpi</color> <color=#f8f8f2>provider</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>provider</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Overrides {@code setInput}, to allow easy access to the input, in case</color>
<color=#75715e>     * it is an {@code ImageInputStream}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param input           the {@code ImageInputStream} or other</color>
<color=#75715e>     *                        {@code Object} to use for future decoding.</color>
<color=#75715e>     * @param seekForwardOnly if {@code true}, images and metadata</color>
<color=#75715e>     *                        may only be read in ascending order from this input source.</color>
<color=#75715e>     * @param ignoreMetadata  if {@code true}, metadata</color>
<color=#75715e>     *                        may be ignored during reads.</color>
<color=#75715e>     * @throws IllegalArgumentException if {@code input} is</color>
<color=#75715e>     *                                  not an instance of one of the classes returned by the</color>
<color=#75715e>     *                                  originating service provider's {@code getInputTypes}</color>
<color=#75715e>     *                                  method, or is not an {@code ImageInputStream}.</color>
<color=#75715e>     * @see ImageInputStream</color>
<color=#75715e>     */</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setInput</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>seekForwardOnly</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>ignoreMetadata</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>resetMembers</color><color=#f8f8f2>();</color>
        <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>setInput</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>seekForwardOnly</color><color=#f8f8f2>,</color> <color=#f8f8f2>ignoreMetadata</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>input</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>ImageInputStream</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>imageInput</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ImageInputStream</color><color=#f8f8f2>)</color> <color=#f8f8f2>input</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>imageInput</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>dispose</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>resetMembers</color><color=#f8f8f2>();</color>
        <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>reset</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>resetMembers</color><color=#f8f8f2>();</color>
        <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Resets all member variables. This method is by default invoked from:</color>
<color=#75715e>     * <ul></color>
<color=#75715e>     *  <li>{@link #setInput(Object, boolean, boolean)}</li></color>
<color=#75715e>     *  <li>{@link #dispose()}</li></color>
<color=#75715e>     *  <li>{@link #reset()}</li></color>
<color=#75715e>     * </ul></color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>abstract</color> <color=#66d9ef>void</color> <color=#a6e22e>resetMembers</color><color=#f8f8f2>();</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Default implementation that always returns {@code null}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param imageIndex ignored, unless overridden</color>
<color=#75715e>     * @return {@code null}, unless overridden</color>
<color=#75715e>     * @throws IOException never, unless overridden.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>IIOMetadata</color> <color=#a6e22e>getImageMetadata</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>imageIndex</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Default implementation that always returns {@code null}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return {@code null}, unless overridden</color>
<color=#75715e>     * @throws IOException never, unless overridden.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>IIOMetadata</color> <color=#a6e22e>getStreamMetadata</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Default implementation that always returns {@code 1}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param allowSearch ignored, unless overridden</color>
<color=#75715e>     * @return {@code 1}, unless overridden</color>
<color=#75715e>     * @throws IOException never, unless overridden</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getNumImages</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>allowSearch</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>assertInput</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Convenience method to make sure image index is within bounds.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param index the image index</color>
<color=#75715e>     * @throws IOException               if an error occurs during reading</color>
<color=#75715e>     * @throws IndexOutOfBoundsException if not {@code minIndex <= index < numImages}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>checkBounds</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>assertInput</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672><</color> <color=#f8f8f2>getMinIndex</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>(</color><color=#e6db74>"index < minIndex"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>numImages</color> <color=#f92672>=</color> <color=#f8f8f2>getNumImages</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>numImages</color> <color=#f92672>!=</color> <color=#f92672>-</color><color=#ae81ff>1</color> <color=#f92672>&&</color> <color=#f8f8f2>index</color> <color=#f92672>>=</color> <color=#f8f8f2>numImages</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>(</color><color=#e6db74>"index >= numImages ("</color> <color=#f92672>+</color> <color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#e6db74>" >= "</color> <color=#f92672>+</color> <color=#f8f8f2>numImages</color> <color=#f92672>+</color> <color=#e6db74>")"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Makes sure input is set.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @throws IllegalStateException if {@code getInput() == null}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>assertInput</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getInput</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"getInput() == null"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the {@code BufferedImage} to which decoded pixel data should be written.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * As {@link ImageReader#getDestination} but tests if the explicit destination</color>
<color=#75715e>     * image (if set) is valid according to the {@code ImageTypeSpecifier}s given in {@code types}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param param  an {@code ImageReadParam} to be used to get</color>
<color=#75715e>     *               the destination image or image type, or {@code null}.</color>
<color=#75715e>     * @param types  an {@code Iterator} of</color>
<color=#75715e>     *               {@code ImageTypeSpecifier}s indicating the legal image</color>
<color=#75715e>     *               types, with the default first.</color>
<color=#75715e>     * @param width  the true width of the image or tile begin decoded.</color>
<color=#75715e>     * @param height the true width of the image or tile being decoded.</color>
<color=#75715e>     * @return the {@code BufferedImage} to which decoded pixel</color>
<color=#75715e>     * data should be written.</color>
<color=#75715e>     * @throws IIOException             if the {@code ImageTypeSpecifier} or {@code BufferedImage}</color>
<color=#75715e>     *                                  specified by {@code param} does not match any of the legal</color>
<color=#75715e>     *                                  ones from {@code types}.</color>
<color=#75715e>     * @throws IllegalArgumentException if {@code types}</color>
<color=#75715e>     *                                  is {@code null} or empty, or if an object not of type</color>
<color=#75715e>     *                                  {@code ImageTypeSpecifier} is retrieved from it.</color>
<color=#75715e>     *                                  Or, if the resulting image would have a width or height less than 1,</color>
<color=#75715e>     *                                  or if the product of {@code width} and {@code height} of the resulting image is greater than</color>
<color=#75715e>     *                                  {@code Integer.MAX_VALUE}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>getDestination</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageReadParam</color> <color=#f8f8f2>param</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>ImageTypeSpecifier</color><color=#f92672>></color> <color=#f8f8f2>types</color><color=#f8f8f2>,</color>
                                               <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IIOException</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Adapted from http://java.net/jira/secure/attachment/29712/TIFFImageReader.java.patch,</color>
        <color=#75715e>// to allow reading parts/tiles of huge images.</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>types</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>types</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"imageTypes null or empty!"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>ImageTypeSpecifier</color> <color=#f8f8f2>imageType</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#75715e>// If param is non-null, use it</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>param</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Try to get the explicit destination image</color>
            <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dest</color> <color=#f92672>=</color> <color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getDestination</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dest</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>boolean</color> <color=#f8f8f2>found</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

                <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>types</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>ImageTypeSpecifier</color> <color=#f8f8f2>specifier</color> <color=#f92672>=</color> <color=#f8f8f2>types</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>bufferedImageType</color> <color=#f92672>=</color> <color=#f8f8f2>specifier</color><color=#f8f8f2>.</color><color=#a6e22e>getBufferedImageType</color><color=#f8f8f2>();</color>

                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bufferedImageType</color> <color=#f92672>!=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>bufferedImageType</color> <color=#f92672>==</color> <color=#f8f8f2>dest</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                        <color=#75715e>// Known types equal, perfect match</color>
                        <color=#f8f8f2>found</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                        <color=#75715e>// If types are different, or TYPE_CUSTOM, test if</color>
                        <color=#75715e>// - transferType is ok</color>
                        <color=#75715e>// - bands are ok</color>
                        <color=#75715e>// TODO: Test if color model is ok?</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>specifier</color><color=#f8f8f2>.</color><color=#a6e22e>getSampleModel</color><color=#f8f8f2>().</color><color=#a6e22e>getTransferType</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>dest</color><color=#f8f8f2>.</color><color=#a6e22e>getSampleModel</color><color=#f8f8f2>().</color><color=#a6e22e>getTransferType</color><color=#f8f8f2>()</color> <color=#f92672>&&</color>
                                <color=#f8f8f2>specifier</color><color=#f8f8f2>.</color><color=#a6e22e>getNumBands</color><color=#f8f8f2>()</color> <color=#f92672><=</color> <color=#f8f8f2>dest</color><color=#f8f8f2>.</color><color=#a6e22e>getSampleModel</color><color=#f8f8f2>().</color><color=#a6e22e>getNumBands</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>found</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>found</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IIOException</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#e6db74>"Destination image from ImageReadParam does not match legal imageTypes from reader: %s"</color><color=#f8f8f2>,</color> <color=#f8f8f2>dest</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>}</color>

                <color=#66d9ef>return</color> <color=#f8f8f2>dest</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// No image, get the image type</color>
            <color=#f8f8f2>imageType</color> <color=#f92672>=</color> <color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getDestinationType</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// No info from param, use fallback image type</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>imageType</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>imageType</color> <color=#f92672>=</color> <color=#f8f8f2>types</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>boolean</color> <color=#f8f8f2>foundIt</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

            <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>types</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>ImageTypeSpecifier</color> <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>types</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>imageType</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>foundIt</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>foundIt</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IIOException</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#e6db74>"Destination type from ImageReadParam does not match legal imageTypes from reader: %s"</color><color=#f8f8f2>,</color> <color=#f8f8f2>imageType</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>Rectangle</color> <color=#f8f8f2>srcRegion</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rectangle</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>Rectangle</color> <color=#f8f8f2>destRegion</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rectangle</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>computeRegions</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcRegion</color><color=#f8f8f2>,</color> <color=#f8f8f2>destRegion</color><color=#f8f8f2>);</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>destWidth</color> <color=#f92672>=</color> <color=#f8f8f2>destRegion</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>+</color> <color=#f8f8f2>destRegion</color><color=#f8f8f2>.</color><color=#a6e22e>width</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>destHeight</color> <color=#f92672>=</color> <color=#f8f8f2>destRegion</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>+</color> <color=#f8f8f2>destRegion</color><color=#f8f8f2>.</color><color=#a6e22e>height</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>destWidth</color> <color=#f92672>*</color> <color=#f8f8f2>destHeight</color> <color=#f92672>></color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#e6db74>"destination width * height > Integer.MAX_VALUE: %d"</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>destWidth</color> <color=#f92672>*</color> <color=#f8f8f2>destHeight</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Create a new image based on the type specifier</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>imageType</color><color=#f8f8f2>.</color><color=#a6e22e>createBufferedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>destWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>destHeight</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Utility method for getting the area of interest (AOI) of an image.</color>
<color=#75715e>     * The AOI is defined by the {@link IIOParam#setSourceRegion(Rectangle)}</color>
<color=#75715e>     * method.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * Note: If it is possible for the reader to read the AOI directly, such a</color>
<color=#75715e>     * method should be used instead, for efficiency.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pImage the image to get AOI from</color>
<color=#75715e>     * @param pParam the param optionally specifying the AOI</color>
<color=#75715e>     * @return a {@code BufferedImage} containing the area of interest (source</color>
<color=#75715e>     * region), or the original image, if no source region was set, or</color>
<color=#75715e>     * {@code pParam} was {@code null}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>static</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>fakeAOI</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>ImageReadParam</color> <color=#f8f8f2>pParam</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>IIOUtil</color><color=#f8f8f2>.</color><color=#a6e22e>fakeAOI</color><color=#f8f8f2>(</color><color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>getSourceRegion</color><color=#f8f8f2>(</color><color=#f8f8f2>pParam</color><color=#f8f8f2>,</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>()));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Utility method for getting the subsampled image.</color>
<color=#75715e>     * The subsampling is defined by the</color>
<color=#75715e>     * {@link IIOParam#setSourceSubsampling(int, int, int, int)}</color>
<color=#75715e>     * method.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * NOTE: This method does not take the subsampling offsets into</color>
<color=#75715e>     * consideration.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * Note: If it is possible for the reader to subsample directly, such a</color>
<color=#75715e>     * method should be used instead, for efficiency.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pImage the image to subsample</color>
<color=#75715e>     * @param pParam the param optionally specifying subsampling</color>
<color=#75715e>     * @return an {@code Image} containing the subsampled image, or the</color>
<color=#75715e>     * original image, if no subsampling was specified, or</color>
<color=#75715e>     * {@code pParam} was {@code null}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>static</color> <color=#f8f8f2>Image</color> <color=#a6e22e>fakeSubsampling</color><color=#f8f8f2>(</color><color=#f8f8f2>Image</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>ImageReadParam</color> <color=#f8f8f2>pParam</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>IIOUtil</color><color=#f8f8f2>.</color><color=#a6e22e>fakeSubsampling</color><color=#f8f8f2>(</color><color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>pParam</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Tests if param has explicit destination.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pParam the image read parameter, or {@code null}</color>
<color=#75715e>     * @return true if {@code pParam} is non-{@code null} and either its {@code getDestination},</color>
<color=#75715e>     * {@code getDestinationType} returns a non-{@code null} value,</color>
<color=#75715e>     * or {@code getDestinationOffset} returns a {@link Point} that is not the upper left corner {@code (0, 0)}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasExplicitDestination</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageReadParam</color> <color=#f8f8f2>pParam</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pParam</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color>
                <color=#f8f8f2>(</color>
                        <color=#f8f8f2>pParam</color><color=#f8f8f2>.</color><color=#a6e22e>getDestination</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>pParam</color><color=#f8f8f2>.</color><color=#a6e22e>getDestinationType</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>||</color>
                                <color=#f92672>!</color><color=#f8f8f2>ORIGIN</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>pParam</color><color=#f8f8f2>.</color><color=#a6e22e>getDestinationOffset</color><color=#f8f8f2>())</color>
                <color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>main</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>pArgs</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>image</color> <color=#f92672>=</color> <color=#f8f8f2>ImageIO</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>));</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>image</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Supported formats: "</color> <color=#f92672>+</color> <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>IIOUtil</color><color=#f8f8f2>.</color><color=#a6e22e>getNormalizedReaderFormatNames</color><color=#f8f8f2>()));</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>exit</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>showIt</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>showIt</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pTitle</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>SwingUtilities</color><color=#f8f8f2>.</color><color=#a6e22e>invokeAndWait</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Runnable</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>run</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>JFrame</color> <color=#f8f8f2>frame</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>JFrame</color><color=#f8f8f2>(</color><color=#f8f8f2>pTitle</color><color=#f8f8f2>);</color>

                    <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>getRootPane</color><color=#f8f8f2>().</color><color=#a6e22e>getActionMap</color><color=#f8f8f2>().</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#e6db74>"window-close"</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>AbstractAction</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>actionPerformed</color><color=#f8f8f2>(</color><color=#f8f8f2>ActionEvent</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>Window</color> <color=#f8f8f2>window</color> <color=#f92672>=</color> <color=#f8f8f2>SwingUtilities</color><color=#f8f8f2>.</color><color=#a6e22e>getWindowAncestor</color><color=#f8f8f2>((</color><color=#f8f8f2>Component</color><color=#f8f8f2>)</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getSource</color><color=#f8f8f2>());</color>
                            <color=#f8f8f2>window</color><color=#f8f8f2>.</color><color=#a6e22e>setVisible</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
                            <color=#f8f8f2>window</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>
                        <color=#f8f8f2>}</color>
                    <color=#f8f8f2>});</color>
                    <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>getRootPane</color><color=#f8f8f2>().</color><color=#a6e22e>getInputMap</color><color=#f8f8f2>().</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>KeyStroke</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyStroke</color><color=#f8f8f2>(</color><color=#f8f8f2>KeyEvent</color><color=#f8f8f2>.</color><color=#a6e22e>VK_W</color><color=#f8f8f2>,</color> <color=#f8f8f2>Toolkit</color><color=#f8f8f2>.</color><color=#a6e22e>getDefaultToolkit</color><color=#f8f8f2>().</color><color=#a6e22e>getMenuShortcutKeyMask</color><color=#f8f8f2>()),</color> <color=#e6db74>"window-close"</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>addWindowListener</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>ExitIfNoWindowPresentHandler</color><color=#f8f8f2>());</color>
                    <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>setDefaultCloseOperation</color><color=#f8f8f2>(</color><color=#f8f8f2>JFrame</color><color=#f8f8f2>.</color><color=#a6e22e>DISPOSE_ON_CLOSE</color><color=#f8f8f2>);</color>

                    <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>setLocationByPlatform</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>JPanel</color> <color=#f8f8f2>pane</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>JPanel</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>BorderLayout</color><color=#f8f8f2>());</color>
                    <color=#f8f8f2>JScrollPane</color> <color=#f8f8f2>scroll</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>JScrollPane</color><color=#f8f8f2>(</color><color=#f8f8f2>pImage</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#66d9ef>new</color> <color=#f8f8f2>ImageLabel</color><color=#f8f8f2>(</color><color=#f8f8f2>pImage</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#66d9ef>new</color> <color=#f8f8f2>JLabel</color><color=#f8f8f2>(</color><color=#e6db74>"(no image data)"</color><color=#f8f8f2>,</color> <color=#f8f8f2>JLabel</color><color=#f8f8f2>.</color><color=#a6e22e>CENTER</color><color=#f8f8f2>));</color>
                    <color=#f8f8f2>scroll</color><color=#f8f8f2>.</color><color=#a6e22e>setBorder</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>pane</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>scroll</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>setContentPane</color><color=#f8f8f2>(</color><color=#f8f8f2>pane</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>pack</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>setVisible</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>});</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>interrupt</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InvocationTargetException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getCause</color><color=#f8f8f2>()</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>RuntimeException</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color><color=#f8f8f2>)</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getCause</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>RuntimeException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ImageLabel</color> <color=#66d9ef>extends</color> <color=#f8f8f2>JLabel</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ZOOM_IN</color> <color=#f92672>=</color> <color=#e6db74>"zoom-in"</color><color=#f8f8f2>;</color>
        <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ZOOM_OUT</color> <color=#f92672>=</color> <color=#e6db74>"zoom-out"</color><color=#f8f8f2>;</color>
        <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>ZOOM_ACTUAL</color> <color=#f92672>=</color> <color=#e6db74>"zoom-actual"</color><color=#f8f8f2>;</color>

        <color=#66d9ef>private</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>image</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>Paint</color> <color=#f8f8f2>backgroundPaint</color><color=#f8f8f2>;</color>

        <color=#66d9ef>final</color> <color=#f8f8f2>Paint</color> <color=#f8f8f2>checkeredBG</color><color=#f8f8f2>;</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>Color</color> <color=#f8f8f2>defaultBG</color><color=#f8f8f2>;</color>

        <color=#66d9ef>public</color> <color=#a6e22e>ImageLabel</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>BufferedImageIcon</color><color=#f8f8f2>(</color><color=#f8f8f2>pImage</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>setOpaque</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>setCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>Cursor</color><color=#f8f8f2>.</color><color=#a6e22e>getPredefinedCursor</color><color=#f8f8f2>(</color><color=#f8f8f2>Cursor</color><color=#f8f8f2>.</color><color=#a6e22e>CROSSHAIR_CURSOR</color><color=#f8f8f2>));</color>

            <color=#f8f8f2>image</color> <color=#f92672>=</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>checkeredBG</color> <color=#f92672>=</color> <color=#f8f8f2>createTexture</color><color=#f8f8f2>();</color>

            <color=#75715e>// For indexed color, default to the color of the transparent pixel, if any </color>
            <color=#f8f8f2>defaultBG</color> <color=#f92672>=</color> <color=#f8f8f2>getDefaultBackground</color><color=#f8f8f2>(</color><color=#f8f8f2>pImage</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>backgroundPaint</color> <color=#f92672>=</color> <color=#f8f8f2>defaultBG</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>defaultBG</color> <color=#f8f8f2>:</color> <color=#f8f8f2>checkeredBG</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>setupActions</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>setComponentPopupMenu</color><color=#f8f8f2>(</color><color=#f8f8f2>createPopupMenu</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>addMouseListener</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>MouseAdapter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                <color=#a6e22e>@Override</color>
                <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>mouseClicked</color><color=#f8f8f2>(</color><color=#f8f8f2>MouseEvent</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>isPopupTrigger</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>getComponentPopupMenu</color><color=#f8f8f2>().</color><color=#a6e22e>show</color><color=#f8f8f2>(</color><color=#f8f8f2>ImageLabel</color><color=#f8f8f2>.</color><color=#a6e22e>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getX</color><color=#f8f8f2>(),</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getY</color><color=#f8f8f2>());</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>});</color>

            <color=#f8f8f2>setTransferHandler</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>TransferHandler</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                <color=#a6e22e>@Override</color>
                <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getSourceActions</color><color=#f8f8f2>(</color><color=#f8f8f2>JComponent</color> <color=#f8f8f2>c</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>COPY</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#a6e22e>@Override</color>
                <color=#66d9ef>protected</color> <color=#f8f8f2>Transferable</color> <color=#a6e22e>createTransferable</color><color=#f8f8f2>(</color><color=#f8f8f2>JComponent</color> <color=#f8f8f2>c</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ImageTransferable</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>

                <color=#a6e22e>@Override</color>
                <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>importData</color><color=#f8f8f2>(</color><color=#f8f8f2>JComponent</color> <color=#f8f8f2>comp</color><color=#f8f8f2>,</color> <color=#f8f8f2>Transferable</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>canImport</color><color=#f8f8f2>(</color><color=#f8f8f2>comp</color><color=#f8f8f2>,</color> <color=#f8f8f2>t</color><color=#f8f8f2>.</color><color=#a6e22e>getTransferDataFlavors</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>Image</color> <color=#f8f8f2>transferData</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Image</color><color=#f8f8f2>)</color> <color=#f8f8f2>t</color><color=#f8f8f2>.</color><color=#a6e22e>getTransferData</color><color=#f8f8f2>(</color><color=#f8f8f2>DataFlavor</color><color=#f8f8f2>.</color><color=#a6e22e>imageFlavor</color><color=#f8f8f2>);</color>
                            <color=#f8f8f2>image</color> <color=#f92672>=</color> <color=#f8f8f2>ImageUtil</color><color=#f8f8f2>.</color><color=#a6e22e>toBuffered</color><color=#f8f8f2>(</color><color=#f8f8f2>transferData</color><color=#f8f8f2>);</color>
                            <color=#f8f8f2>setIcon</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>BufferedImageIcon</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>));</color>

                            <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>UnsupportedFlavorException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>}</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#a6e22e>@Override</color>
                <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>canImport</color><color=#f8f8f2>(</color><color=#f8f8f2>JComponent</color> <color=#f8f8f2>comp</color><color=#f8f8f2>,</color> <color=#f8f8f2>DataFlavor</color><color=#f92672>[]</color> <color=#f8f8f2>transferFlavors</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>DataFlavor</color> <color=#f8f8f2>flavor</color> <color=#f8f8f2>:</color> <color=#f8f8f2>transferFlavors</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>flavor</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>DataFlavor</color><color=#f8f8f2>.</color><color=#a6e22e>imageFlavor</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                            <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>});</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setupActions</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Mac weirdness... VK_MINUS/VK_PLUS seems to map to english key map always...</color>
            <color=#f8f8f2>bindAction</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>ZoomAction</color><color=#f8f8f2>(</color><color=#e6db74>"Zoom in"</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>),</color> <color=#f8f8f2>ZOOM_IN</color><color=#f8f8f2>,</color> <color=#f8f8f2>KeyStroke</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyStroke</color><color=#f8f8f2>(</color><color=#e6db74>'+'</color><color=#f8f8f2>),</color> <color=#f8f8f2>KeyStroke</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyStroke</color><color=#f8f8f2>(</color><color=#f8f8f2>KeyEvent</color><color=#f8f8f2>.</color><color=#a6e22e>VK_ADD</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>bindAction</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>ZoomAction</color><color=#f8f8f2>(</color><color=#e6db74>"Zoom out"</color><color=#f8f8f2>,</color> <color=#ae81ff>.5</color><color=#f8f8f2>),</color> <color=#f8f8f2>ZOOM_OUT</color><color=#f8f8f2>,</color> <color=#f8f8f2>KeyStroke</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyStroke</color><color=#f8f8f2>(</color><color=#e6db74>'-'</color><color=#f8f8f2>),</color> <color=#f8f8f2>KeyStroke</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyStroke</color><color=#f8f8f2>(</color><color=#f8f8f2>KeyEvent</color><color=#f8f8f2>.</color><color=#a6e22e>VK_SUBTRACT</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>bindAction</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>ZoomAction</color><color=#f8f8f2>(</color><color=#e6db74>"Zoom actual"</color><color=#f8f8f2>),</color> <color=#f8f8f2>ZOOM_ACTUAL</color><color=#f8f8f2>,</color> <color=#f8f8f2>KeyStroke</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyStroke</color><color=#f8f8f2>(</color><color=#e6db74>'0'</color><color=#f8f8f2>),</color> <color=#f8f8f2>KeyStroke</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyStroke</color><color=#f8f8f2>(</color><color=#f8f8f2>KeyEvent</color><color=#f8f8f2>.</color><color=#a6e22e>VK_0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>

            <color=#f8f8f2>bindAction</color><color=#f8f8f2>(</color><color=#f8f8f2>TransferHandler</color><color=#f8f8f2>.</color><color=#a6e22e>getCopyAction</color><color=#f8f8f2>(),</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>TransferHandler</color><color=#f8f8f2>.</color><color=#a6e22e>getCopyAction</color><color=#f8f8f2>().</color><color=#a6e22e>getValue</color><color=#f8f8f2>(</color><color=#f8f8f2>Action</color><color=#f8f8f2>.</color><color=#a6e22e>NAME</color><color=#f8f8f2>),</color> <color=#f8f8f2>KeyStroke</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyStroke</color><color=#f8f8f2>(</color><color=#f8f8f2>KeyEvent</color><color=#f8f8f2>.</color><color=#a6e22e>VK_C</color><color=#f8f8f2>,</color> <color=#f8f8f2>Toolkit</color><color=#f8f8f2>.</color><color=#a6e22e>getDefaultToolkit</color><color=#f8f8f2>().</color><color=#a6e22e>getMenuShortcutKeyMask</color><color=#f8f8f2>()));</color>
            <color=#f8f8f2>bindAction</color><color=#f8f8f2>(</color><color=#f8f8f2>TransferHandler</color><color=#f8f8f2>.</color><color=#a6e22e>getPasteAction</color><color=#f8f8f2>(),</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>TransferHandler</color><color=#f8f8f2>.</color><color=#a6e22e>getPasteAction</color><color=#f8f8f2>().</color><color=#a6e22e>getValue</color><color=#f8f8f2>(</color><color=#f8f8f2>Action</color><color=#f8f8f2>.</color><color=#a6e22e>NAME</color><color=#f8f8f2>),</color> <color=#f8f8f2>KeyStroke</color><color=#f8f8f2>.</color><color=#a6e22e>getKeyStroke</color><color=#f8f8f2>(</color><color=#f8f8f2>KeyEvent</color><color=#f8f8f2>.</color><color=#a6e22e>VK_V</color><color=#f8f8f2>,</color> <color=#f8f8f2>Toolkit</color><color=#f8f8f2>.</color><color=#a6e22e>getDefaultToolkit</color><color=#f8f8f2>().</color><color=#a6e22e>getMenuShortcutKeyMask</color><color=#f8f8f2>()));</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>bindAction</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Action</color> <color=#f8f8f2>action</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>KeyStroke</color><color=#f8f8f2>...</color> <color=#f8f8f2>keyStrokes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>KeyStroke</color> <color=#f8f8f2>keyStroke</color> <color=#f8f8f2>:</color> <color=#f8f8f2>keyStrokes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>getInputMap</color><color=#f8f8f2>(</color><color=#f8f8f2>WHEN_IN_FOCUSED_WINDOW</color><color=#f8f8f2>).</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>keyStroke</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>getActionMap</color><color=#f8f8f2>().</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>action</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#f8f8f2>JPopupMenu</color> <color=#a6e22e>createPopupMenu</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>JPopupMenu</color> <color=#f8f8f2>popup</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>JPopupMenu</color><color=#f8f8f2>();</color>

            <color=#f8f8f2>popup</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>getActionMap</color><color=#f8f8f2>().</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>ZOOM_ACTUAL</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>popup</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>getActionMap</color><color=#f8f8f2>().</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>ZOOM_IN</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>popup</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>getActionMap</color><color=#f8f8f2>().</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>ZOOM_OUT</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>popup</color><color=#f8f8f2>.</color><color=#a6e22e>addSeparator</color><color=#f8f8f2>();</color>

            <color=#f8f8f2>ButtonGroup</color> <color=#f8f8f2>group</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ButtonGroup</color><color=#f8f8f2>();</color>

            <color=#f8f8f2>JMenu</color> <color=#f8f8f2>background</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>JMenu</color><color=#f8f8f2>(</color><color=#e6db74>"Background"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>popup</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>background</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>ChangeBackgroundAction</color> <color=#f8f8f2>checkered</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ChangeBackgroundAction</color><color=#f8f8f2>(</color><color=#e6db74>"Checkered"</color><color=#f8f8f2>,</color> <color=#f8f8f2>checkeredBG</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>checkered</color><color=#f8f8f2>.</color><color=#a6e22e>putValue</color><color=#f8f8f2>(</color><color=#f8f8f2>Action</color><color=#f8f8f2>.</color><color=#a6e22e>SELECTED_KEY</color><color=#f8f8f2>,</color> <color=#f8f8f2>backgroundPaint</color> <color=#f92672>==</color> <color=#f8f8f2>checkeredBG</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>addCheckBoxItem</color><color=#f8f8f2>(</color><color=#f8f8f2>checkered</color><color=#f8f8f2>,</color> <color=#f8f8f2>background</color><color=#f8f8f2>,</color> <color=#f8f8f2>group</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>background</color><color=#f8f8f2>.</color><color=#a6e22e>addSeparator</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>addCheckBoxItem</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>ChangeBackgroundAction</color><color=#f8f8f2>(</color><color=#e6db74>"White"</color><color=#f8f8f2>,</color> <color=#f8f8f2>Color</color><color=#f8f8f2>.</color><color=#a6e22e>WHITE</color><color=#f8f8f2>),</color> <color=#f8f8f2>background</color><color=#f8f8f2>,</color> <color=#f8f8f2>group</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>addCheckBoxItem</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>ChangeBackgroundAction</color><color=#f8f8f2>(</color><color=#e6db74>"Light"</color><color=#f8f8f2>,</color> <color=#f8f8f2>Color</color><color=#f8f8f2>.</color><color=#a6e22e>LIGHT_GRAY</color><color=#f8f8f2>),</color> <color=#f8f8f2>background</color><color=#f8f8f2>,</color> <color=#f8f8f2>group</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>addCheckBoxItem</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>ChangeBackgroundAction</color><color=#f8f8f2>(</color><color=#e6db74>"Gray"</color><color=#f8f8f2>,</color> <color=#f8f8f2>Color</color><color=#f8f8f2>.</color><color=#a6e22e>GRAY</color><color=#f8f8f2>),</color> <color=#f8f8f2>background</color><color=#f8f8f2>,</color> <color=#f8f8f2>group</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>addCheckBoxItem</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>ChangeBackgroundAction</color><color=#f8f8f2>(</color><color=#e6db74>"Dark"</color><color=#f8f8f2>,</color> <color=#f8f8f2>Color</color><color=#f8f8f2>.</color><color=#a6e22e>DARK_GRAY</color><color=#f8f8f2>),</color> <color=#f8f8f2>background</color><color=#f8f8f2>,</color> <color=#f8f8f2>group</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>addCheckBoxItem</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>ChangeBackgroundAction</color><color=#f8f8f2>(</color><color=#e6db74>"Black"</color><color=#f8f8f2>,</color> <color=#f8f8f2>Color</color><color=#f8f8f2>.</color><color=#a6e22e>BLACK</color><color=#f8f8f2>),</color> <color=#f8f8f2>background</color><color=#f8f8f2>,</color> <color=#f8f8f2>group</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>background</color><color=#f8f8f2>.</color><color=#a6e22e>addSeparator</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>ChooseBackgroundAction</color> <color=#f8f8f2>chooseBackgroundAction</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ChooseBackgroundAction</color><color=#f8f8f2>(</color><color=#e6db74>"Choose..."</color><color=#f8f8f2>,</color> <color=#f8f8f2>defaultBG</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>defaultBG</color> <color=#f8f8f2>:</color> <color=#f8f8f2>Color</color><color=#f8f8f2>.</color><color=#a6e22e>BLUE</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>chooseBackgroundAction</color><color=#f8f8f2>.</color><color=#a6e22e>putValue</color><color=#f8f8f2>(</color><color=#f8f8f2>Action</color><color=#f8f8f2>.</color><color=#a6e22e>SELECTED_KEY</color><color=#f8f8f2>,</color> <color=#f8f8f2>backgroundPaint</color> <color=#f92672>==</color> <color=#f8f8f2>defaultBG</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>addCheckBoxItem</color><color=#f8f8f2>(</color><color=#f8f8f2>chooseBackgroundAction</color><color=#f8f8f2>,</color> <color=#f8f8f2>background</color><color=#f8f8f2>,</color> <color=#f8f8f2>group</color><color=#f8f8f2>);</color>

            <color=#66d9ef>return</color> <color=#f8f8f2>popup</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>addCheckBoxItem</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Action</color> <color=#f8f8f2>pAction</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>JMenu</color> <color=#f8f8f2>pPopup</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ButtonGroup</color> <color=#f8f8f2>pGroup</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>JCheckBoxMenuItem</color> <color=#f8f8f2>item</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>JCheckBoxMenuItem</color><color=#f8f8f2>(</color><color=#f8f8f2>pAction</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>pGroup</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>item</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>pPopup</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>item</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Color</color> <color=#a6e22e>getDefaultBackground</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pImage</color><color=#f8f8f2>.</color><color=#a6e22e>getColorModel</color><color=#f8f8f2>()</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>IndexColorModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>IndexColorModel</color> <color=#f8f8f2>cm</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>IndexColorModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>.</color><color=#a6e22e>getColorModel</color><color=#f8f8f2>();</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>transparent</color> <color=#f92672>=</color> <color=#f8f8f2>cm</color><color=#f8f8f2>.</color><color=#a6e22e>getTransparentPixel</color><color=#f8f8f2>();</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>transparent</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Color</color><color=#f8f8f2>(</color><color=#f8f8f2>cm</color><color=#f8f8f2>.</color><color=#a6e22e>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>transparent</color><color=#f8f8f2>),</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Paint</color> <color=#a6e22e>createTexture</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>GraphicsConfiguration</color> <color=#f8f8f2>graphicsConfiguration</color> <color=#f92672>=</color> <color=#f8f8f2>GraphicsEnvironment</color><color=#f8f8f2>.</color><color=#a6e22e>getLocalGraphicsEnvironment</color><color=#f8f8f2>().</color><color=#a6e22e>getDefaultScreenDevice</color><color=#f8f8f2>().</color><color=#a6e22e>getDefaultConfiguration</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pattern</color> <color=#f92672>=</color> <color=#f8f8f2>graphicsConfiguration</color><color=#f8f8f2>.</color><color=#a6e22e>createCompatibleImage</color><color=#f8f8f2>(</color><color=#ae81ff>20</color><color=#f8f8f2>,</color> <color=#ae81ff>20</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>Graphics2D</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>pattern</color><color=#f8f8f2>.</color><color=#a6e22e>createGraphics</color><color=#f8f8f2>();</color>
            <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>setColor</color><color=#f8f8f2>(</color><color=#f8f8f2>Color</color><color=#f8f8f2>.</color><color=#a6e22e>LIGHT_GRAY</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>fillRect</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>pattern</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pattern</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>());</color>
                <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>setColor</color><color=#f8f8f2>(</color><color=#f8f8f2>Color</color><color=#f8f8f2>.</color><color=#a6e22e>GRAY</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>fillRect</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>pattern</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>()</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>pattern</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>()</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>fillRect</color><color=#f8f8f2>(</color><color=#f8f8f2>pattern</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>()</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>pattern</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>()</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>pattern</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>()</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>pattern</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>()</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>TexturePaint</color><color=#f8f8f2>(</color><color=#f8f8f2>pattern</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rectangle</color><color=#f8f8f2>(</color><color=#f8f8f2>pattern</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pattern</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>()));</color>
        <color=#f8f8f2>}</color>

        <color=#a6e22e>@Override</color>
        <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>paintComponent</color><color=#f8f8f2>(</color><color=#f8f8f2>Graphics</color> <color=#f8f8f2>g</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Graphics2D</color> <color=#f8f8f2>gr</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Graphics2D</color><color=#f8f8f2>)</color> <color=#f8f8f2>g</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>gr</color><color=#f8f8f2>.</color><color=#a6e22e>setPaint</color><color=#f8f8f2>(</color><color=#f8f8f2>backgroundPaint</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>gr</color><color=#f8f8f2>.</color><color=#a6e22e>fillRect</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>getHeight</color><color=#f8f8f2>());</color>
            <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>paintComponent</color><color=#f8f8f2>(</color><color=#f8f8f2>g</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>ChangeBackgroundAction</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractAction</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>protected</color> <color=#f8f8f2>Paint</color> <color=#f8f8f2>paint</color><color=#f8f8f2>;</color>

            <color=#66d9ef>public</color> <color=#a6e22e>ChangeBackgroundAction</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pName</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Paint</color> <color=#f8f8f2>pPaint</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>pName</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>paint</color> <color=#f92672>=</color> <color=#f8f8f2>pPaint</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>actionPerformed</color><color=#f8f8f2>(</color><color=#f8f8f2>ActionEvent</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>backgroundPaint</color> <color=#f92672>=</color> <color=#f8f8f2>paint</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>repaint</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>ChooseBackgroundAction</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ChangeBackgroundAction</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>public</color> <color=#a6e22e>ChooseBackgroundAction</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pName</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Color</color> <color=#f8f8f2>pColor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>pName</color><color=#f8f8f2>,</color> <color=#f8f8f2>pColor</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>putValue</color><color=#f8f8f2>(</color><color=#f8f8f2>Action</color><color=#f8f8f2>.</color><color=#a6e22e>SMALL_ICON</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>Icon</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>paintIcon</color><color=#f8f8f2>(</color><color=#f8f8f2>Component</color> <color=#f8f8f2>c</color><color=#f8f8f2>,</color> <color=#f8f8f2>Graphics</color> <color=#f8f8f2>pGraphics</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>y</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>Graphics</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>pGraphics</color><color=#f8f8f2>.</color><color=#a6e22e>create</color><color=#f8f8f2>();</color>
                        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>setColor</color><color=#f8f8f2>((</color><color=#f8f8f2>Color</color><color=#f8f8f2>)</color> <color=#f8f8f2>paint</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>fillRect</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#ae81ff>16</color><color=#f8f8f2>,</color> <color=#ae81ff>16</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getIconWidth</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>return</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getIconHeight</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>return</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>});</color>
            <color=#f8f8f2>}</color>

            <color=#a6e22e>@Override</color>
            <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>actionPerformed</color><color=#f8f8f2>(</color><color=#f8f8f2>ActionEvent</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>Color</color> <color=#f8f8f2>selected</color> <color=#f92672>=</color> <color=#f8f8f2>JColorChooser</color><color=#f8f8f2>.</color><color=#a6e22e>showDialog</color><color=#f8f8f2>(</color><color=#f8f8f2>ImageLabel</color><color=#f8f8f2>.</color><color=#a6e22e>this</color><color=#f8f8f2>,</color> <color=#e6db74>"Choose background"</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>Color</color><color=#f8f8f2>)</color> <color=#f8f8f2>paint</color><color=#f8f8f2>);</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>selected</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>paint</color> <color=#f92672>=</color> <color=#f8f8f2>selected</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>actionPerformed</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>ZoomAction</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractAction</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>zoomFactor</color><color=#f8f8f2>;</color>

            <color=#66d9ef>public</color> <color=#a6e22e>ZoomAction</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>zoomFactor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>);</color>
                <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>zoomFactor</color> <color=#f92672>=</color> <color=#f8f8f2>zoomFactor</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>public</color> <color=#a6e22e>ZoomAction</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>actionPerformed</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ActionEvent</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>zoomFactor</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>setIcon</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>BufferedImageIcon</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>Icon</color> <color=#f8f8f2>current</color> <color=#f92672>=</color> <color=#f8f8f2>getIcon</color><color=#f8f8f2>();</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>w</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>current</color><color=#f8f8f2>.</color><color=#a6e22e>getIconWidth</color><color=#f8f8f2>()</color> <color=#f92672>*</color> <color=#f8f8f2>zoomFactor</color><color=#f8f8f2>,</color> <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>()</color> <color=#f92672>*</color> <color=#ae81ff>16</color><color=#f8f8f2>),</color> <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>()</color> <color=#f92672>/</color> <color=#ae81ff>16</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>h</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>current</color><color=#f8f8f2>.</color><color=#a6e22e>getIconHeight</color><color=#f8f8f2>()</color> <color=#f92672>*</color> <color=#f8f8f2>zoomFactor</color><color=#f8f8f2>,</color> <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>()</color> <color=#f92672>*</color> <color=#ae81ff>16</color><color=#f8f8f2>),</color> <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>()</color> <color=#f92672>/</color> <color=#ae81ff>16</color><color=#f8f8f2>);</color>

                    <color=#f8f8f2>setIcon</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>BufferedImageIcon</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>),</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>),</color> <color=#f8f8f2>w</color> <color=#f92672>></color> <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>h</color> <color=#f92672>></color> <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>()));</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ImageTransferable</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Transferable</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>image</color><color=#f8f8f2>;</color>

            <color=#66d9ef>public</color> <color=#a6e22e>ImageTransferable</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>image</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>image</color> <color=#f92672>=</color> <color=#f8f8f2>image</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#a6e22e>@Override</color>
            <color=#66d9ef>public</color> <color=#f8f8f2>DataFlavor</color><color=#f92672>[]</color> <color=#a6e22e>getTransferDataFlavors</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>DataFlavor</color><color=#f92672>[]</color><color=#f8f8f2>{</color><color=#f8f8f2>DataFlavor</color><color=#f8f8f2>.</color><color=#a6e22e>imageFlavor</color><color=#f8f8f2>};</color>
            <color=#f8f8f2>}</color>

            <color=#a6e22e>@Override</color>
            <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isDataFlavorSupported</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DataFlavor</color> <color=#f8f8f2>flavor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>DataFlavor</color><color=#f8f8f2>.</color><color=#a6e22e>imageFlavor</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>flavor</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#a6e22e>@Override</color>
            <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>getTransferData</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>DataFlavor</color> <color=#f8f8f2>flavor</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>UnsupportedFlavorException</color><color=#f8f8f2>,</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isDataFlavorSupported</color><color=#f8f8f2>(</color><color=#f8f8f2>flavor</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>image</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedFlavorException</color><color=#f8f8f2>(</color><color=#f8f8f2>flavor</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ExitIfNoWindowPresentHandler</color> <color=#66d9ef>extends</color> <color=#f8f8f2>WindowAdapter</color> <color=#f8f8f2>{</color>
        <color=#a6e22e>@Override</color>
        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>windowClosed</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>WindowEvent</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Window</color><color=#f92672>[]</color> <color=#f8f8f2>windows</color> <color=#f92672>=</color> <color=#f8f8f2>Window</color><color=#f8f8f2>.</color><color=#a6e22e>getWindows</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>windows</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>windows</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>exit</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>