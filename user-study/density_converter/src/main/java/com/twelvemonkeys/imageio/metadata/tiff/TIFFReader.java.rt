<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2009, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.imageio.metadata.tiff</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.imageio.metadata.Directory</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.imageio.metadata.Entry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.imageio.metadata.MetadataReader</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.lang.StringUtil</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.lang.Validate</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.IIOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.ImageIO</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.stream.ImageInputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.EOFException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.File</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteOrder</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.charset.Charset</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.twelvemonkeys.imageio.metadata.tiff.TIFFEntry.getValueLength</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * TIFFReader</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haraldk$</color>
<color=#75715e> * @version $Id: TIFFReader.java,v 1.0 Nov 13, 2009 5:42:51 PM haraldk Exp$</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>TIFFReader</color> <color=#66d9ef>extends</color> <color=#f8f8f2>MetadataReader</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>DEBUG</color> <color=#f92672>=</color> <color=#e6db74>"true"</color><color=#f8f8f2>.</color><color=#a6e22e>equalsIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>getProperty</color><color=#f8f8f2>(</color><color=#e6db74>"com.twelvemonkeys.imageio.metadata.exif.debug"</color><color=#f8f8f2>));</color>

    <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>Integer</color><color=#f92672>></color> <color=#f8f8f2>KNOWN_IFDS</color> <color=#f92672>=</color> <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>unmodifiableCollection</color><color=#f8f8f2>(</color><color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>asList</color><color=#f8f8f2>(</color><color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TAG_EXIF_IFD</color><color=#f8f8f2>,</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TAG_GPS_IFD</color><color=#f8f8f2>,</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TAG_INTEROP_IFD</color><color=#f8f8f2>,</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TAG_SUB_IFD</color><color=#f8f8f2>));</color>
    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>longOffsets</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>offsetSize</color><color=#f8f8f2>;</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Directory</color> <color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>input</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Validate</color><color=#f8f8f2>.</color><color=#a6e22e>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#e6db74>"input"</color><color=#f8f8f2>);</color>

        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bom</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readFully</color><color=#f8f8f2>(</color><color=#f8f8f2>bom</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bom</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#e6db74>'I'</color> <color=#f92672>&&</color> <color=#f8f8f2>bom</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#e6db74>'I'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>setByteOrder</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteOrder</color><color=#f8f8f2>.</color><color=#a6e22e>LITTLE_ENDIAN</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bom</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#e6db74>'M'</color> <color=#f92672>&&</color> <color=#f8f8f2>bom</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#e6db74>'M'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>setByteOrder</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteOrder</color><color=#f8f8f2>.</color><color=#a6e22e>BIG_ENDIAN</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IIOException</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#e6db74>"Invalid TIFF byte order mark '%s', expected: 'II' or 'MM'"</color><color=#f8f8f2>,</color> <color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>decode</color><color=#f8f8f2>(</color><color=#f8f8f2>bom</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>bom</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>,</color> <color=#e6db74>"ASCII"</color><color=#f8f8f2>)));</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// BigTiff uses version 43 instead of TIFF's 42, and header is slightly different, see</color>
        <color=#75715e>// http://www.awaresystems.be/imaging/tiff/bigtiff.html</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>magic</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readUnsignedShort</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>magic</color> <color=#f92672>==</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TIFF_MAGIC</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>longOffsets</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>offsetSize</color> <color=#f92672>=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>magic</color> <color=#f92672>==</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>BIGTIFF_MAGIC</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>longOffsets</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>offsetSize</color> <color=#f92672>=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>

            <color=#75715e>// Just validate we're ok</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>offsetSize</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readUnsignedShort</color><color=#f8f8f2>();</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>offsetSize</color> <color=#f92672>!=</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IIOException</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#e6db74>"Unexpected BigTIFF offset size: %04x, expected: %04x"</color><color=#f8f8f2>,</color> <color=#f8f8f2>offsetSize</color><color=#f8f8f2>,</color> <color=#ae81ff>8</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>int</color> <color=#f8f8f2>padding</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readUnsignedShort</color><color=#f8f8f2>();</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>padding</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IIOException</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#e6db74>"Unexpected BigTIFF padding: %04x, expected: %04x"</color><color=#f8f8f2>,</color> <color=#f8f8f2>padding</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IIOException</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#e6db74>"Wrong TIFF magic in input data: %04x, expected: %04x"</color><color=#f8f8f2>,</color> <color=#f8f8f2>magic</color><color=#f8f8f2>,</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TIFF_MAGIC</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>readLinkedIFDs</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>TIFFDirectory</color> <color=#a6e22e>readLinkedIFDs</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>input</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>nextOffset</color> <color=#f92672>=</color> <color=#f8f8f2>readOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>IFD</color><color=#f92672>></color> <color=#f8f8f2>ifds</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>IFD</color><color=#f92672>></color><color=#f8f8f2>();</color>

        <color=#75715e>// Read linked IFDs</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>nextOffset</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>ifds</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>readIFD</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>nextOffset</color><color=#f8f8f2>));</color>

                <color=#f8f8f2>nextOffset</color> <color=#f92672>=</color> <color=#f8f8f2>readOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>EOFException</color> <color=#f8f8f2>eof</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// catch EOF here as missing EOF marker</color>
                <color=#f8f8f2>nextOffset</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>TIFFDirectory</color><color=#f8f8f2>(</color><color=#f8f8f2>ifds</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>readOffset</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>input</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>longOffsets</color> <color=#f92672>?</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readLong</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readUnsignedInt</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>IFD</color> <color=#a6e22e>readIFD</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>pOffset</color><color=#f8f8f2>);</color>

        <color=#66d9ef>long</color> <color=#f8f8f2>entryCount</color> <color=#f92672>=</color> <color=#f8f8f2>readEntryCount</color><color=#f8f8f2>(</color><color=#f8f8f2>pInput</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>TIFFEntry</color><color=#f92672>></color> <color=#f8f8f2>entries</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>TIFFEntry</color><color=#f92672>></color><color=#f8f8f2>();</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>entryCount</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>TIFFEntry</color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>readEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>pInput</color><color=#f8f8f2>);</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entry</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IIOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// TODO: Consider leaving to client code what sub-IFDs to parse (but always parse TAG_SUB_IFD).</color>
        <color=#f8f8f2>readSubIFDs</color><color=#f8f8f2>(</color><color=#f8f8f2>pInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>entries</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>asList</color><color=#f8f8f2>(</color><color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TAG_EXIF_IFD</color><color=#f8f8f2>,</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TAG_GPS_IFD</color><color=#f8f8f2>,</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TAG_INTEROP_IFD</color><color=#f8f8f2>,</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TAG_SUB_IFD</color><color=#f8f8f2>)</color>
        <color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>IFD</color><color=#f8f8f2>(</color><color=#f8f8f2>entries</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>readEntryCount</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>longOffsets</color> <color=#f92672>?</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readLong</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readUnsignedShort</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>readSubIFDs</color><color=#f8f8f2>(</color><color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>TIFFEntry</color><color=#f92672>></color> <color=#f8f8f2>entries</color><color=#f8f8f2>,</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Integer</color><color=#f92672>></color> <color=#f8f8f2>subIFDIds</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>subIFDIds</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>subIFDIds</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>long</color> <color=#f8f8f2>initialPosition</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>getStreamPosition</color><color=#f8f8f2>();</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>entriesSize</color> <color=#f92672>=</color> <color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>entriesSize</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>TIFFEntry</color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>tagId</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Integer</color><color=#f8f8f2>)</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getIdentifier</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>subIFDIds</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>tagId</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>KNOWN_IFDS</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>tagId</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>pointerOffsets</color> <color=#f92672>=</color> <color=#f8f8f2>getPointerOffsets</color><color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>IFD</color><color=#f92672>></color> <color=#f8f8f2>subIFDs</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>IFD</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>pointerOffsets</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>

                        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>pointerOffset</color> <color=#f8f8f2>:</color> <color=#f8f8f2>pointerOffsets</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                                <color=#f8f8f2>subIFDs</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>readIFD</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>pointerOffset</color><color=#f8f8f2>));</color>
                            <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>EOFException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                <color=#75715e>// TODO: Issue warning</color>
                                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>DEBUG</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                    <color=#f8f8f2>ignore</color><color=#f8f8f2>.</color><color=#a6e22e>printStackTrace</color><color=#f8f8f2>();</color>
                                <color=#f8f8f2>}</color>
                            <color=#f8f8f2>}</color>
                        <color=#f8f8f2>}</color>

                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>subIFDs</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#75715e>// Replace the entry with parsed data</color>
                            <color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>TIFFEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>tagId</color><color=#f8f8f2>,</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>(),</color> <color=#f8f8f2>subIFDs</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>)));</color>
                        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>subIFDs</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                            <color=#75715e>// Replace the entry with parsed data</color>
                            <color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>TIFFEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>tagId</color><color=#f8f8f2>,</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>(),</color> <color=#f8f8f2>subIFDs</color><color=#f8f8f2>.</color><color=#a6e22e>toArray</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>IFD</color><color=#f92672>[</color><color=#f8f8f2>subIFDs</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color><color=#f92672>]</color><color=#f8f8f2>)));</color>
                        <color=#f8f8f2>}</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IIOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>DEBUG</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#75715e>// TODO: Issue warning without crashing...?</color>
                        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Error parsing sub-IFD: "</color> <color=#f92672>+</color> <color=#f8f8f2>tagId</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>printStackTrace</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Restore initial position</color>
        <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>initialPosition</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#a6e22e>getPointerOffsets</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Entry</color> <color=#f8f8f2>entry</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IIOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>offsets</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>Object</color> <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>offsets</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[]</color><color=#f8f8f2>{(</color><color=#f8f8f2>Byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>};</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Short</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>offsets</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[]</color><color=#f8f8f2>{(</color><color=#f8f8f2>Short</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xffff</color><color=#f8f8f2>};</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>offsets</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[]</color><color=#f8f8f2>{(</color><color=#f8f8f2>Integer</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color> <color=#f92672>&</color> <color=#ae81ff>0xffffffffL</color><color=#f8f8f2>};</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Long</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>offsets</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[]</color><color=#f8f8f2>{(</color><color=#f8f8f2>Long</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>};</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#66d9ef>long</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>offsets</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>long</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IIOException</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#e6db74>"Unknown pointer type: %s"</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>value</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>offsets</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>TIFFEntry</color> <color=#a6e22e>readEntry</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>tagId</color> <color=#f92672>=</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readUnsignedShort</color><color=#f8f8f2>();</color>
        <color=#66d9ef>short</color> <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readShort</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>readValueCount</color><color=#f8f8f2>(</color><color=#f8f8f2>pInput</color><color=#f8f8f2>);</color> <color=#75715e>// Number of values</color>

        <color=#75715e>// It's probably a spec violation to have count 0, but we'll be lenient about it</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>count</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IIOException</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#e6db74>"Illegal count %d for tag %s type %s @%08x"</color><color=#f8f8f2>,</color> <color=#f8f8f2>count</color><color=#f8f8f2>,</color> <color=#f8f8f2>tagId</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>getStreamPosition</color><color=#f8f8f2>()));</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isValidType</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>skipBytes</color><color=#f8f8f2>(</color><color=#ae81ff>4</color><color=#f8f8f2>);</color> <color=#75715e>// read Value</color>

            <color=#75715e>// Invalid tag, this is just for debugging</color>
            <color=#66d9ef>long</color> <color=#f8f8f2>offset</color> <color=#f92672>=</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>getStreamPosition</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>12L</color><color=#f8f8f2>;</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>DEBUG</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>printf</color><color=#f8f8f2>(</color><color=#e6db74>"Bad EXIF data @%08x\n"</color><color=#f8f8f2>,</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>getStreamPosition</color><color=#f8f8f2>());</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"tagId: "</color> <color=#f92672>+</color> <color=#f8f8f2>tagId</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>tagId</color> <color=#f92672><=</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#e6db74>" (INVALID)"</color> <color=#f8f8f2>:</color> <color=#e6db74>""</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"type: "</color> <color=#f92672>+</color> <color=#f8f8f2>type</color> <color=#f92672>+</color> <color=#e6db74>" (INVALID)"</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"count: "</color> <color=#f92672>+</color> <color=#f8f8f2>count</color><color=#f8f8f2>);</color>

                <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>mark</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color><color=#f8f8f2>);</color>

                <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>8</color> <color=#f92672>+</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#ae81ff>120</color><color=#f8f8f2>,</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#ae81ff>24</color><color=#f8f8f2>,</color> <color=#f8f8f2>count</color><color=#f8f8f2>))</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes</color><color=#f8f8f2>);</color>

                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>DEBUG</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#f8f8f2>HexDump</color><color=#f8f8f2>.</color><color=#a6e22e>dump</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>));</color>
                        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>len</color> <color=#f92672><</color> <color=#f8f8f2>count</color> <color=#f92672>?</color> <color=#e6db74>"[...]"</color> <color=#f8f8f2>:</color> <color=#e6db74>""</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>long</color> <color=#f8f8f2>valueLength</color> <color=#f92672>=</color> <color=#f8f8f2>getValueLength</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>count</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>Object</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>valueLength</color> <color=#f92672>></color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>valueLength</color> <color=#f92672><=</color> <color=#f8f8f2>offsetSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>readValueInLine</color><color=#f8f8f2>(</color><color=#f8f8f2>pInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>count</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>skipBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>offsetSize</color> <color=#f92672>-</color> <color=#f8f8f2>valueLength</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>long</color> <color=#f8f8f2>valueOffset</color> <color=#f92672>=</color> <color=#f8f8f2>readOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>pInput</color><color=#f8f8f2>);</color> <color=#75715e>// This is the *value* iff the value size is <= 4 bytes</color>
            <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>readValueAt</color><color=#f8f8f2>(</color><color=#f8f8f2>pInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>valueOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>count</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>TIFFEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>tagId</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isValidType</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>short</color> <color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>type</color> <color=#f92672>></color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>type</color> <color=#f92672><</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_LENGTHS</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>&&</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_LENGTHS</color><color=#f92672>[</color><color=#f8f8f2>type</color><color=#f92672>]</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>readValueCount</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>assertIntCount</color><color=#f8f8f2>(</color><color=#f8f8f2>longOffsets</color> <color=#f92672>?</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readLong</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readUnsignedInt</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>assertIntCount</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>count</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>count</color> <color=#f92672>></color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IIOException</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#e6db74>"Unsupported TIFF value count value: %s > Integer.MAX_VALUE"</color><color=#f8f8f2>,</color> <color=#f8f8f2>count</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>Object</color> <color=#a6e22e>readValueAt</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>short</color> <color=#f8f8f2>pType</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pCount</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>pos</color> <color=#f92672>=</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>getStreamPosition</color><color=#f8f8f2>();</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>pOffset</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>readValue</color><color=#f8f8f2>(</color><color=#f8f8f2>pInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>pType</color><color=#f8f8f2>,</color> <color=#f8f8f2>pCount</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>EOFException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// TODO: Add warning listener API and report problem to client code</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>pos</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>Object</color> <color=#a6e22e>readValueInLine</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>short</color> <color=#f8f8f2>pType</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pCount</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>readValue</color><color=#f8f8f2>(</color><color=#f8f8f2>pInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>pType</color><color=#f8f8f2>,</color> <color=#f8f8f2>pCount</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#a6e22e>readValue</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>short</color> <color=#f8f8f2>pType</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pCount</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#75715e>// TODO: Review value "widening" for the unsigned types. Right now it's inconsistent. Should we leave it to client code?</color>
        <color=#75715e>// TODO: New strategy: Leave data as is, instead perform the widening in TIFFEntry.getValue.</color>
        <color=#75715e>// TODO: Add getValueByte/getValueUnsignedByte/getValueShort/getValueUnsignedShort/getValueInt/etc... in API.</color>

        <color=#66d9ef>long</color> <color=#f8f8f2>pos</color> <color=#f92672>=</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>getStreamPosition</color><color=#f8f8f2>();</color>

        <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>pType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_ASCII</color><color=#f8f8f2>:</color>
                <color=#75715e>// TODO: This might be UTF-8 or ISO-8859-x, even though spec says NULL-terminated 7 bit ASCII</color>
                <color=#75715e>// TODO: Fail if unknown chars, try parsing with ISO-8859-1 or file.encoding</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pCount</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#e6db74>""</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>ascii</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>pCount</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readFully</color><color=#f8f8f2>(</color><color=#f8f8f2>ascii</color><color=#f8f8f2>);</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>ascii</color><color=#f92672>[</color><color=#f8f8f2>ascii</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f8f8f2>ascii</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#f8f8f2>ascii</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>decode</color><color=#f8f8f2>(</color><color=#f8f8f2>ascii</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>,</color> <color=#e6db74>"UTF-8"</color><color=#f8f8f2>);</color> <color=#75715e>// UTF-8 is ASCII compatible</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BYTE</color><color=#f8f8f2>:</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pCount</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readUnsignedByte</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color>
                <color=#75715e>// else fall through</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_SBYTE</color><color=#f8f8f2>:</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pCount</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readByte</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color>
                <color=#75715e>// else fall through</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_UNDEFINED</color><color=#f8f8f2>:</color>
                <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>pCount</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readFully</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes</color><color=#f8f8f2>);</color>

                <color=#75715e>// NOTE: We don't change (unsigned) BYTE array wider Java type, as most often BYTE array means</color>
                <color=#75715e>// binary data and we want to keep that as a byte array for clients to parse further</color>

                <color=#66d9ef>return</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_SHORT</color><color=#f8f8f2>:</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pCount</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readUnsignedShort</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_SSHORT</color><color=#f8f8f2>:</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pCount</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readShort</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color>

                <color=#66d9ef>short</color><color=#f92672>[]</color> <color=#f8f8f2>shorts</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>short</color><color=#f92672>[</color><color=#f8f8f2>pCount</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readFully</color><color=#f8f8f2>(</color><color=#f8f8f2>shorts</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>shorts</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pType</color> <color=#f92672>==</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_SHORT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>ints</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>pCount</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>pCount</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>ints</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>shorts</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xffff</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>return</color> <color=#f8f8f2>ints</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#66d9ef>return</color> <color=#f8f8f2>shorts</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_IFD</color><color=#f8f8f2>:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_LONG</color><color=#f8f8f2>:</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pCount</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readUnsignedInt</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_SLONG</color><color=#f8f8f2>:</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pCount</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color>

                <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>ints</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>pCount</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readFully</color><color=#f8f8f2>(</color><color=#f8f8f2>ints</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>ints</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pType</color> <color=#f92672>==</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_LONG</color> <color=#f92672>||</color> <color=#f8f8f2>pType</color> <color=#f92672>==</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_IFD</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>longs</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[</color><color=#f8f8f2>pCount</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>pCount</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>longs</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>ints</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xffffffffL</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>return</color> <color=#f8f8f2>longs</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#66d9ef>return</color> <color=#f8f8f2>ints</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_FLOAT</color><color=#f8f8f2>:</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pCount</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readFloat</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color>

                <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>floats</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>float</color><color=#f92672>[</color><color=#f8f8f2>pCount</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readFully</color><color=#f8f8f2>(</color><color=#f8f8f2>floats</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>floats</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>floats</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_DOUBLE</color><color=#f8f8f2>:</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pCount</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readDouble</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color>

                <color=#66d9ef>double</color><color=#f92672>[]</color> <color=#f8f8f2>doubles</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>double</color><color=#f92672>[</color><color=#f8f8f2>pCount</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readFully</color><color=#f8f8f2>(</color><color=#f8f8f2>doubles</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>doubles</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>doubles</color><color=#f8f8f2>;</color>

            <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_RATIONAL</color><color=#f8f8f2>:</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pCount</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>createSafeRational</color><color=#f8f8f2>(</color><color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readUnsignedInt</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readUnsignedInt</color><color=#f8f8f2>());</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>Rational</color><color=#f92672>[]</color> <color=#f8f8f2>rationals</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rational</color><color=#f92672>[</color><color=#f8f8f2>pCount</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>rationals</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>rationals</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>createSafeRational</color><color=#f8f8f2>(</color><color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readUnsignedInt</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readUnsignedInt</color><color=#f8f8f2>());</color>
                <color=#f8f8f2>}</color>

                <color=#66d9ef>return</color> <color=#f8f8f2>rationals</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_SRATIONAL</color><color=#f8f8f2>:</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pCount</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>createSafeRational</color><color=#f8f8f2>(</color><color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>());</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>Rational</color><color=#f92672>[]</color> <color=#f8f8f2>srationals</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rational</color><color=#f92672>[</color><color=#f8f8f2>pCount</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>srationals</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>srationals</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>createSafeRational</color><color=#f8f8f2>(</color><color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readInt</color><color=#f8f8f2>());</color>
                <color=#f8f8f2>}</color>

                <color=#66d9ef>return</color> <color=#f8f8f2>srationals</color><color=#f8f8f2>;</color>

            <color=#75715e>// BigTiff:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_LONG8</color><color=#f8f8f2>:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_SLONG8</color><color=#f8f8f2>:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_IFD8</color><color=#f8f8f2>:</color>
                <color=#75715e>// TODO: Assert BigTiff (version == 43)</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pCount</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>long</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readLong</color><color=#f8f8f2>();</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pType</color> <color=#f92672>!=</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_SLONG8</color> <color=#f92672>&&</color> <color=#f8f8f2>val</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IIOException</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#e6db74>"Value > %s"</color><color=#f8f8f2>,</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>));</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>return</color> <color=#f8f8f2>val</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>longs</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[</color><color=#f8f8f2>pCount</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>pCount</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>longs</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readLong</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color>

                <color=#66d9ef>return</color> <color=#f8f8f2>longs</color><color=#f8f8f2>;</color>

            <color=#66d9ef>default</color><color=#f8f8f2>:</color>
                <color=#75715e>// Spec says skip unknown values</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Unknown</color><color=#f8f8f2>(</color><color=#f8f8f2>pType</color><color=#f8f8f2>,</color> <color=#f8f8f2>pCount</color><color=#f8f8f2>,</color> <color=#f8f8f2>pos</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Rational</color> <color=#a6e22e>createSafeRational</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>numerator</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>denominator</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>denominator</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Bad data.</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>Rational</color><color=#f8f8f2>.</color><color=#a6e22e>NaN</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rational</color><color=#f8f8f2>(</color><color=#f8f8f2>numerator</color><color=#f8f8f2>,</color> <color=#f8f8f2>denominator</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>main</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>args</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
<color=#75715e>//        if (true) {</color>
<color=#75715e>//            ImageInputStream stream = ImageIO.createImageInputStream(new File(args[0]));</color>
<color=#75715e>//</color>
<color=#75715e>//            byte[] b = new byte[Math.min((int) stream.length(), 1024)];</color>
<color=#75715e>//            stream.readFully(b);</color>
<color=#75715e>//</color>
<color=#75715e>//            System.err.println(HexDump.dump(b));</color>
<color=#75715e>//</color>
<color=#75715e>//            return;</color>
<color=#75715e>//        }</color>
<color=#75715e>//</color>
        <color=#f8f8f2>TIFFReader</color> <color=#f8f8f2>reader</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>TIFFReader</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>stream</color> <color=#f92672>=</color> <color=#f8f8f2>ImageIO</color><color=#f8f8f2>.</color><color=#a6e22e>createImageInputStream</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>args</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>));</color>

        <color=#66d9ef>long</color> <color=#f8f8f2>pos</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>args</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>args</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>startsWith</color><color=#f8f8f2>(</color><color=#e6db74>"0x"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>pos</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>args</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#ae81ff>2</color><color=#f8f8f2>),</color> <color=#ae81ff>16</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>pos</color> <color=#f92672>=</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>parseLong</color><color=#f8f8f2>(</color><color=#f8f8f2>args</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>setByteOrder</color><color=#f8f8f2>(</color><color=#f8f8f2>pos</color> <color=#f92672><</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f8f8f2>ByteOrder</color><color=#f8f8f2>.</color><color=#a6e22e>LITTLE_ENDIAN</color> <color=#f8f8f2>:</color> <color=#f8f8f2>ByteOrder</color><color=#f8f8f2>.</color><color=#a6e22e>BIG_ENDIAN</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>pos</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>abs</color><color=#f8f8f2>(</color><color=#f8f8f2>pos</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>pos</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Directory</color> <color=#f8f8f2>directory</color><color=#f8f8f2>;</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>args</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>directory</color> <color=#f92672>=</color> <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>readIFD</color><color=#f8f8f2>(</color><color=#f8f8f2>stream</color><color=#f8f8f2>,</color> <color=#f8f8f2>pos</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>directory</color> <color=#f92672>=</color> <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>stream</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Entry</color> <color=#f8f8f2>entry</color> <color=#f8f8f2>:</color> <color=#f8f8f2>directory</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>);</color>

                <color=#f8f8f2>Object</color> <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>();</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#66d9ef>byte</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>HexDump</color><color=#f8f8f2>.</color><color=#a6e22e>dump</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>,</color> <color=#ae81ff>128</color><color=#f8f8f2>)));</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>//////////////////////</color>
    <color=#75715e>// TODO: Stream based hex dump util?</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>HexDump</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>private</color> <color=#a6e22e>HexDump</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>WIDTH</color> <color=#f92672>=</color> <color=#ae81ff>32</color><color=#f8f8f2>;</color>

        <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>dump</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>dump</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>dump</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>builder</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>

            <color=#66d9ef>int</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>%</color> <color=#f8f8f2>WIDTH</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>builder</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>}</color>
                    <color=#f8f8f2>builder</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#e6db74>"%08x: "</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#f8f8f2>off</color> <color=#f92672>+</color> <color=#f8f8f2>offset</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>i</color> <color=#f92672>%</color> <color=#ae81ff>2</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>builder</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" "</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>builder</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#e6db74>"%02x"</color><color=#f8f8f2>,</color> <color=#f8f8f2>bytes</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#f8f8f2>off</color><color=#f92672>]</color><color=#f8f8f2>));</color>

                <color=#66d9ef>int</color> <color=#f8f8f2>next</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>next</color> <color=#f92672>%</color> <color=#f8f8f2>WIDTH</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>next</color> <color=#f92672>==</color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>leftOver</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>WIDTH</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>next</color> <color=#f92672>%</color> <color=#f8f8f2>WIDTH</color><color=#f8f8f2>))</color> <color=#f92672>%</color> <color=#f8f8f2>WIDTH</color><color=#f8f8f2>;</color>

                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>leftOver</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#75715e>// Pad: 5 spaces for every 2 bytes... Special care if padding is non-even.</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>pad</color> <color=#f92672>=</color> <color=#f8f8f2>leftOver</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>len</color> <color=#f92672>%</color> <color=#ae81ff>2</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>builder</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"  "</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>}</color>

                        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#f8f8f2>pad</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>builder</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"     "</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>}</color>
                    <color=#f8f8f2>}</color>

                    <color=#f8f8f2>builder</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"  "</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>builder</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>toAsciiString</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>next</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>WIDTH</color> <color=#f92672>-</color> <color=#f8f8f2>leftOver</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>off</color><color=#f8f8f2>,</color> <color=#f8f8f2>next</color> <color=#f92672>+</color> <color=#f8f8f2>off</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>return</color> <color=#f8f8f2>builder</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>toAsciiString</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>from</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>to</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>range</color> <color=#f92672>=</color> <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>copyOfRange</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#f8f8f2>from</color><color=#f8f8f2>,</color> <color=#f8f8f2>to</color><color=#f8f8f2>);</color>

            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>range</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>range</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672><</color> <color=#ae81ff>32</color> <color=#f92672>||</color> <color=#f8f8f2>range</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>></color> <color=#ae81ff>126</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>range</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#e6db74>'.'</color><color=#f8f8f2>;</color> <color=#75715e>// Unreadable char</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f8f8f2>(</color><color=#f8f8f2>range</color><color=#f8f8f2>,</color> <color=#f8f8f2>Charset</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#e6db74>"ascii"</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>