<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2009, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.imageio.metadata.iptc</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.imageio.metadata.Directory</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.imageio.metadata.Entry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.imageio.metadata.MetadataReader</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.lang.StringUtil</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.lang.Validate</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.IIOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.stream.ImageInputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteBuffer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.CharBuffer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.charset.CharacterCodingException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.charset.Charset</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.charset.CharsetDecoder</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.charset.CodingErrorAction</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Arrays</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.LinkedHashMap</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Map</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * IPTCReader</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haraldk$</color>
<color=#75715e> * @version $Id: IPTCReader.java,v 1.0 Nov 13, 2009 8:37:23 PM haraldk Exp$</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>IPTCReader</color> <color=#66d9ef>extends</color> <color=#f8f8f2>MetadataReader</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ENCODING_UNKNOWN</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ENCODING_UNSPECIFIED</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ENCODING_UTF_8</color> <color=#f92672>=</color> <color=#ae81ff>0x1b2547</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>encoding</color> <color=#f92672>=</color> <color=#f8f8f2>ENCODING_UNSPECIFIED</color><color=#f8f8f2>;</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Directory</color> <color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>input</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Validate</color><color=#f8f8f2>.</color><color=#a6e22e>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#e6db74>"input"</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Short</color><color=#f8f8f2>,</color> <color=#f8f8f2>Entry</color><color=#f92672>></color> <color=#f8f8f2>entries</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LinkedHashMap</color><color=#f92672><</color><color=#f8f8f2>Short</color><color=#f8f8f2>,</color> <color=#f8f8f2>Entry</color><color=#f92672>></color><color=#f8f8f2>();</color>

        <color=#75715e>// 0x1c identifies start of a tag</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0x1c</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>short</color> <color=#f8f8f2>tagId</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readShort</color><color=#f8f8f2>();</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>tagByteCount</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>readUnsignedShort</color><color=#f8f8f2>();</color>

            <color=#66d9ef>boolean</color> <color=#f8f8f2>array</color> <color=#f92672>=</color> <color=#f8f8f2>IPTC</color><color=#f8f8f2>.</color><color=#a6e22e>Tags</color><color=#f8f8f2>.</color><color=#a6e22e>isArray</color><color=#f8f8f2>(</color><color=#f8f8f2>tagId</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>Entry</color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>readEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>tagId</color><color=#f8f8f2>,</color> <color=#f8f8f2>tagByteCount</color><color=#f8f8f2>,</color> <color=#f8f8f2>array</color><color=#f8f8f2>,</color> <color=#f8f8f2>array</color> <color=#f92672>?</color> <color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>tagId</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entry</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>tagId</color><color=#f8f8f2>,</color> <color=#f8f8f2>entry</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>IPTCDirectory</color><color=#f8f8f2>(</color><color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>IPTCEntry</color> <color=#a6e22e>mergeEntries</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>short</color> <color=#f8f8f2>tagId</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>newValue</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Entry</color> <color=#f8f8f2>oldEntry</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Object</color><color=#f92672>[]</color> <color=#f8f8f2>oldValue</color> <color=#f92672>=</color> <color=#f8f8f2>oldEntry</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#f8f8f2>Object</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>oldEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>Object</color><color=#f92672>[]</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newValue</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldValue</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[]</color><color=#f8f8f2>{(</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>newValue</color><color=#f8f8f2>};</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>array</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>oldValue</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>copyOf</color><color=#f8f8f2>(</color><color=#f8f8f2>array</color><color=#f8f8f2>,</color> <color=#f8f8f2>array</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>value</color><color=#f92672>[</color><color=#f8f8f2>value</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>newValue</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>oldValue</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Object</color><color=#f92672>[]</color><color=#f8f8f2>{</color><color=#f8f8f2>newValue</color><color=#f8f8f2>};</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>copyOf</color><color=#f8f8f2>(</color><color=#f8f8f2>oldValue</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldValue</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>value</color><color=#f92672>[</color><color=#f8f8f2>value</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>newValue</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>IPTCEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>tagId</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>IPTCEntry</color> <color=#a6e22e>readEntry</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>short</color> <color=#f8f8f2>pTagId</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>array</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Entry</color> <color=#f8f8f2>oldEntry</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Object</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>

        <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>pTagId</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>IPTC</color><color=#f8f8f2>.</color><color=#a6e22e>TAG_CODED_CHARACTER_SET</color><color=#f8f8f2>:</color>
                <color=#75715e>// TODO: Mapping from ISO 646 to Java supported character sets?</color>
                <color=#f8f8f2>encoding</color> <color=#f92672>=</color> <color=#f8f8f2>parseEncoding</color><color=#f8f8f2>(</color><color=#f8f8f2>pInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>);</color>
                <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>IPTC</color><color=#f8f8f2>.</color><color=#a6e22e>TAG_RECORD_VERSION</color><color=#f8f8f2>:</color>
                <color=#75715e>// TODO: Assert length == 2?</color>
                <color=#75715e>// A single unsigned short value</color>
                <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readUnsignedShort</color><color=#f8f8f2>();</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>default</color><color=#f8f8f2>:</color>
                <color=#75715e>// TODO: Create Tags.getType(tag), to allow for more flexible types</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pTagId</color> <color=#f92672>&</color> <color=#ae81ff>0xff00</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f8f8f2>IPTC</color><color=#f8f8f2>.</color><color=#a6e22e>APPLICATION_RECORD</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// Treat Application records as Strings</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLength</color> <color=#f92672><</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>parseString</color><color=#f8f8f2>(</color><color=#f8f8f2>pInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// Non-Application fields, typically not human readable</color>
                    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>pLength</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readFully</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>data</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>array</color> <color=#f92672>?</color> <color=#f8f8f2>mergeEntries</color><color=#f8f8f2>(</color><color=#f8f8f2>pTagId</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>,</color> <color=#f8f8f2>oldEntry</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#66d9ef>new</color> <color=#f8f8f2>IPTCEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>pTagId</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>parseEncoding</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>tagByteCount</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>tagByteCount</color> <color=#f92672>==</color> <color=#ae81ff>3</color>
                <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readUnsignedByte</color><color=#f8f8f2>()</color> <color=#f92672><<</color> <color=#ae81ff>16</color> <color=#f92672>|</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readUnsignedByte</color><color=#f8f8f2>()</color> <color=#f92672><<</color> <color=#ae81ff>8</color> <color=#f92672>|</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readUnsignedByte</color><color=#f8f8f2>())</color> <color=#f92672>==</color> <color=#f8f8f2>ENCODING_UTF_8</color>
                <color=#f92672>?</color> <color=#f8f8f2>ENCODING_UTF_8</color> <color=#f8f8f2>:</color> <color=#f8f8f2>ENCODING_UNKNOWN</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// TODO: Pass encoding as parameter? Use if specified</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#a6e22e>parseString</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>pLength</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>readFully</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>);</color>

        <color=#75715e>// NOTE: The IPTC specification says character data should use ISO 646 or ISO 2022 encoding.</color>
        <color=#75715e>// UTF-8 contains all 646 characters, but not 2022.</color>
        <color=#75715e>// This is however close to what libiptcdata does, see: http://libiptcdata.sourceforge.net/docs/iptc-i18n.html</color>
        <color=#f8f8f2>Charset</color> <color=#f8f8f2>charset</color> <color=#f92672>=</color> <color=#f8f8f2>Charset</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#e6db74>"UTF-8"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>CharsetDecoder</color> <color=#f8f8f2>decoder</color> <color=#f92672>=</color> <color=#f8f8f2>charset</color><color=#f8f8f2>.</color><color=#a6e22e>newDecoder</color><color=#f8f8f2>();</color>

        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#75715e>// First try to decode using UTF-8 (which seems to be the de-facto standard)</color>
            <color=#75715e>// Will fail fast on illegal UTF-8-sequences</color>
            <color=#f8f8f2>CharBuffer</color> <color=#f8f8f2>chars</color> <color=#f92672>=</color> <color=#f8f8f2>decoder</color><color=#f8f8f2>.</color><color=#a6e22e>onMalformedInput</color><color=#f8f8f2>(</color><color=#f8f8f2>CodingErrorAction</color><color=#f8f8f2>.</color><color=#a6e22e>REPORT</color><color=#f8f8f2>)</color>
                    <color=#f8f8f2>.</color><color=#a6e22e>onUnmappableCharacter</color><color=#f8f8f2>(</color><color=#f8f8f2>CodingErrorAction</color><color=#f8f8f2>.</color><color=#a6e22e>REPORT</color><color=#f8f8f2>)</color>
                    <color=#f8f8f2>.</color><color=#a6e22e>decode</color><color=#f8f8f2>(</color><color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>wrap</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>));</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>chars</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>CharacterCodingException</color> <color=#f8f8f2>notUTF8</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>encoding</color> <color=#f92672>==</color> <color=#f8f8f2>ENCODING_UTF_8</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IIOException</color><color=#f8f8f2>(</color><color=#e6db74>"Wrong encoding of IPTC data, explicitly set to UTF-8 in DataSet 1:90"</color><color=#f8f8f2>,</color> <color=#f8f8f2>notUTF8</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Fall back to use ISO-8859-1</color>
            <color=#75715e>// This will not fail, but may create wrong fallback-characters</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>decode</color><color=#f8f8f2>(</color><color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>,</color> <color=#e6db74>"ISO8859_1"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

<color=#f8f8f2>}</color>