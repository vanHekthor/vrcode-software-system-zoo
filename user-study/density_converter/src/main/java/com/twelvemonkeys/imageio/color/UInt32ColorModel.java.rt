<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2014, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.imageio.color</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.color.ColorSpace</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.ComponentColorModel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.DataBuffer</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * ComponentColorModel subclass that correctly handles full 32 bit {@code TYPE_INT} unsigned integral samples.</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haraldk$</color>
<color=#75715e> * @version $Id: UInt32ColorModel.java,v 1.0 24.01.11 17.51 haraldk Exp$</color>
<color=#75715e> * @see <a href="https://bugs.openjdk.java.net/browse/JDK-6193686"></color>
<color=#75715e> * ComponentColorModel.getNormalizedComponents() does not handle 32-bit TYPE_INT</a></color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>UInt32ColorModel</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ComponentColorModel</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>public</color> <color=#a6e22e>UInt32ColorModel</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ColorSpace</color> <color=#f8f8f2>cs</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>hasAlpha</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isAlphaPremultiplied</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>cs</color><color=#f8f8f2>,</color> <color=#f8f8f2>hasAlpha</color><color=#f8f8f2>,</color> <color=#f8f8f2>isAlphaPremultiplied</color><color=#f8f8f2>,</color> <color=#f8f8f2>hasAlpha</color> <color=#f92672>?</color> <color=#f8f8f2>TRANSLUCENT</color> <color=#f8f8f2>:</color> <color=#f8f8f2>OPAQUE</color><color=#f8f8f2>,</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#a6e22e>getNormalizedComponents</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>pixel</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>normComponents</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>normOffset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Implementation borrowed from super class, with modifications to allow 32 bit shifts and unsigned values.</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>numComponents</color> <color=#f92672>=</color> <color=#f8f8f2>getNumComponents</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>normComponents</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>normComponents</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>float</color><color=#f92672>[</color><color=#f8f8f2>numComponents</color> <color=#f92672>+</color> <color=#f8f8f2>normOffset</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// This class only supports DataBuffer.TYPE_INT, cast is safe</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>ipixel</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>pixel</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>nc</color> <color=#f92672>=</color> <color=#f8f8f2>normOffset</color><color=#f8f8f2>;</color> <color=#f8f8f2>c</color> <color=#f92672><</color> <color=#f8f8f2>numComponents</color><color=#f8f8f2>;</color> <color=#f8f8f2>c</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>nc</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>normComponents</color><color=#f92672>[</color><color=#f8f8f2>nc</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>ipixel</color><color=#f92672>[</color><color=#f8f8f2>c</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xffffffffl</color><color=#f8f8f2>))</color> <color=#f92672>/</color> <color=#f8f8f2>((</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#ae81ff>1l</color> <color=#f92672><<</color> <color=#f8f8f2>getComponentSize</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>))</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>numColorComponents</color> <color=#f92672>=</color> <color=#f8f8f2>getNumColorComponents</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasAlpha</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>isAlphaPremultiplied</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>alpha</color> <color=#f92672>=</color> <color=#f8f8f2>normComponents</color><color=#f92672>[</color><color=#f8f8f2>numColorComponents</color> <color=#f92672>+</color> <color=#f8f8f2>normOffset</color><color=#f92672>]</color><color=#f8f8f2>;</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>alpha</color> <color=#f92672>!=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>float</color> <color=#f8f8f2>invAlpha</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color> <color=#f92672>/</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>;</color>

                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>normOffset</color><color=#f8f8f2>;</color> <color=#f8f8f2>c</color> <color=#f92672><</color> <color=#f8f8f2>numColorComponents</color> <color=#f92672>+</color> <color=#f8f8f2>normOffset</color><color=#f8f8f2>;</color> <color=#f8f8f2>c</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>normComponents</color><color=#f92672>[</color><color=#f8f8f2>c</color><color=#f92672>]</color> <color=#f92672>*=</color> <color=#f8f8f2>invAlpha</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// TODO: We don't currently support color spaces that has min and max other than 0.0f and 1.0f respectively.</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>normComponents</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>