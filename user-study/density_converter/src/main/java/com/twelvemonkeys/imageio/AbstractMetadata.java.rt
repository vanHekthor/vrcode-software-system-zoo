<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2014, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.imageio</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>org.w3c.dom.Node</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.metadata.IIOInvalidTreeException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.metadata.IIOMetadata</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.metadata.IIOMetadataFormatImpl</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Arrays</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * AbstractMetadata</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haraldk$</color>
<color=#75715e> * @version $Id: AbstractMetadata.java,v 1.0 Nov 13, 2009 1:02:12 AM haraldk Exp$</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>AbstractMetadata</color> <color=#66d9ef>extends</color> <color=#f8f8f2>IIOMetadata</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Cloneable</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>protected</color> <color=#a6e22e>AbstractMetadata</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>standardFormatSupported</color><color=#f8f8f2>,</color>
                               <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>nativeFormatName</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>nativeFormatClassName</color><color=#f8f8f2>,</color>
                               <color=#66d9ef>final</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>extraFormatNames</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>extraFormatClassNames</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>standardFormatSupported</color><color=#f8f8f2>,</color> <color=#f8f8f2>nativeFormatName</color><color=#f8f8f2>,</color> <color=#f8f8f2>nativeFormatClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>extraFormatNames</color><color=#f8f8f2>,</color> <color=#f8f8f2>extraFormatClassNames</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#a6e22e>AbstractMetadata</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Default implementation returns {@code true}.</color>
<color=#75715e>     * Mutable subclasses should override this method.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return {@code true}.</color>
<color=#75715e>     */</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isReadOnly</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Node</color> <color=#a6e22e>getAsTree</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>formatName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>validateFormatName</color><color=#f8f8f2>(</color><color=#f8f8f2>formatName</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>formatName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>nativeMetadataFormatName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>getNativeTree</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>formatName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>IIOMetadataFormatImpl</color><color=#f8f8f2>.</color><color=#a6e22e>standardMetadataFormatName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>getStandardTree</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Subclasses that supports extra formats need to check for these formats themselves...</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Default implementation that throws {@code UnsupportedOperationException}.</color>
<color=#75715e>     * Subclasses that supports formats other than standard metadata should override this method.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @throws UnsupportedOperationException</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>Node</color> <color=#a6e22e>getNativeTree</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color><color=#e6db74>"getNativeTree"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>mergeTree</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>formatName</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Node</color> <color=#f8f8f2>root</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IIOInvalidTreeException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>assertMutable</color><color=#f8f8f2>();</color>

        <color=#f8f8f2>validateFormatName</color><color=#f8f8f2>(</color><color=#f8f8f2>formatName</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>root</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>formatName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IIOInvalidTreeException</color><color=#f8f8f2>(</color><color=#e6db74>"Root must be "</color> <color=#f92672>+</color> <color=#f8f8f2>formatName</color><color=#f8f8f2>,</color> <color=#f8f8f2>root</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>reset</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>assertMutable</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Asserts that this meta data is mutable.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @throws IllegalStateException if {@link #isReadOnly()} returns {@code true}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>assertMutable</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isReadOnly</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Metadata is read-only"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>validateFormatName</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>formatName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>metadataFormatNames</color> <color=#f92672>=</color> <color=#f8f8f2>getMetadataFormatNames</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>metadataFormatNames</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>metadataFormatName</color> <color=#f8f8f2>:</color> <color=#f8f8f2>metadataFormatNames</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>metadataFormatName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>formatName</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color><color=#f8f8f2>;</color> <color=#75715e>// Found, we're ok!</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#e6db74>"Unsupported format name: \"%s\". Expected one of %s"</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatName</color><color=#f8f8f2>,</color> <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>metadataFormatNames</color><color=#f8f8f2>))</color>
        <color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>toListString</color><color=#f8f8f2>(</color><color=#66d9ef>short</color><color=#f92672>[]</color> <color=#f8f8f2>values</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>string</color> <color=#f92672>=</color> <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>values</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>string</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>string</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>