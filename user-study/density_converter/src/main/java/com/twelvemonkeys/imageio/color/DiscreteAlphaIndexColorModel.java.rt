<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2016, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.imageio.color</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.*</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.twelvemonkeys.lang.Validate.notNull</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * This class represents a hybrid between an {@link IndexColorModel} and a {@link ComponentColorModel},</color>
<color=#75715e> * having both a color map and a full, discrete alpha channel.</color>
<color=#75715e> * The color map entries are assumed to be fully opaque and should have no transparent index.</color>
<color=#75715e> * <p></color>
<color=#75715e> * ColorSpace will always be the default sRGB color space (as with {@code IndexColorModel}).</color>
<color=#75715e> * <p></color>
<color=#75715e> * Component order is always P, A, where P is a palette index, and A is the alpha value.</color>
<color=#75715e> *</color>
<color=#75715e> * @see IndexColorModel</color>
<color=#75715e> * @see ComponentColorModel</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>DiscreteAlphaIndexColorModel</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>{</color>
    <color=#75715e>// Our IndexColorModel delegate</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>IndexColorModel</color> <color=#f8f8f2>icm</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@code DiscreteAlphaIndexColorModel}, delegating color map look-ups</color>
<color=#75715e>     * to the given {@code IndexColorModel}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param icm The {@code IndexColorModel} delegate. Color map entries are assumed to be</color>
<color=#75715e>     *            fully opaque, any transparency or transparent index will be ignored.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>DiscreteAlphaIndexColorModel</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>IndexColorModel</color> <color=#f8f8f2>icm</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>icm</color><color=#f8f8f2>,</color> <color=#e6db74>"IndexColorModel"</color><color=#f8f8f2>).</color><color=#a6e22e>getPixelSize</color><color=#f8f8f2>()</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color>
                <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>{</color><color=#f8f8f2>icm</color><color=#f8f8f2>.</color><color=#a6e22e>getPixelSize</color><color=#f8f8f2>(),</color> <color=#f8f8f2>icm</color><color=#f8f8f2>.</color><color=#a6e22e>getPixelSize</color><color=#f8f8f2>(),</color> <color=#f8f8f2>icm</color><color=#f8f8f2>.</color><color=#a6e22e>getPixelSize</color><color=#f8f8f2>(),</color> <color=#f8f8f2>icm</color><color=#f8f8f2>.</color><color=#a6e22e>getPixelSize</color><color=#f8f8f2>()},</color>
                <color=#f8f8f2>icm</color><color=#f8f8f2>.</color><color=#a6e22e>getColorSpace</color><color=#f8f8f2>(),</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#f8f8f2>Transparency</color><color=#f8f8f2>.</color><color=#a6e22e>TRANSLUCENT</color><color=#f8f8f2>,</color> <color=#f8f8f2>icm</color><color=#f8f8f2>.</color><color=#a6e22e>getTransferType</color><color=#f8f8f2>()</color>
        <color=#f8f8f2>);</color>

        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>icm</color> <color=#f92672>=</color> <color=#f8f8f2>icm</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getRed</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pixel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>icm</color><color=#f8f8f2>.</color><color=#a6e22e>getRed</color><color=#f8f8f2>(</color><color=#f8f8f2>pixel</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getGreen</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pixel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>icm</color><color=#f8f8f2>.</color><color=#a6e22e>getGreen</color><color=#f8f8f2>(</color><color=#f8f8f2>pixel</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getBlue</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pixel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>icm</color><color=#f8f8f2>.</color><color=#a6e22e>getBlue</color><color=#f8f8f2>(</color><color=#f8f8f2>pixel</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getAlpha</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pixel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>((((</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>pixel</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>((</color><color=#ae81ff>1</color> <color=#f92672><<</color> <color=#f8f8f2>getComponentSize</color><color=#f8f8f2>(</color><color=#ae81ff>3</color><color=#f8f8f2>))</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>))</color> <color=#f92672>*</color> <color=#ae81ff>255.0f</color> <color=#f92672>+</color> <color=#ae81ff>0.5f</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>getSample</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>inData</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>pixel</color><color=#f8f8f2>;</color>

        <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>transferType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BYTE</color><color=#f8f8f2>:</color>
                <color=#66d9ef>byte</color> <color=#f8f8f2>bdata</color><color=#f92672>[]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>inData</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>pixel</color> <color=#f92672>=</color> <color=#f8f8f2>bdata</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_USHORT</color><color=#f8f8f2>:</color>
                <color=#66d9ef>short</color> <color=#f8f8f2>sdata</color><color=#f92672>[]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>short</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>inData</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>pixel</color> <color=#f92672>=</color> <color=#f8f8f2>sdata</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xffff</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT</color><color=#f8f8f2>:</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>idata</color><color=#f92672>[]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>inData</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>pixel</color> <color=#f92672>=</color> <color=#f8f8f2>idata</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>default</color><color=#f8f8f2>:</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color><color=#e6db74>"This method has not been implemented for transferType "</color> <color=#f92672>+</color> <color=#f8f8f2>transferType</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>pixel</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getRed</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>inData</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>getRed</color><color=#f8f8f2>(</color><color=#f8f8f2>getSample</color><color=#f8f8f2>(</color><color=#f8f8f2>inData</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getGreen</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>inData</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>getGreen</color><color=#f8f8f2>(</color><color=#f8f8f2>getSample</color><color=#f8f8f2>(</color><color=#f8f8f2>inData</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getBlue</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>inData</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>getBlue</color><color=#f8f8f2>(</color><color=#f8f8f2>getSample</color><color=#f8f8f2>(</color><color=#f8f8f2>inData</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getAlpha</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>inData</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>getAlpha</color><color=#f8f8f2>(</color><color=#f8f8f2>getSample</color><color=#f8f8f2>(</color><color=#f8f8f2>inData</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>SampleModel</color> <color=#a6e22e>createCompatibleSampleModel</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>h</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>PixelInterleavedSampleModel</color><color=#f8f8f2>(</color><color=#f8f8f2>transferType</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>{</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>});</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isCompatibleSampleModel</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>SampleModel</color> <color=#f8f8f2>sm</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>sm</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>PixelInterleavedSampleModel</color> <color=#f92672>&&</color> <color=#f8f8f2>sm</color><color=#f8f8f2>.</color><color=#a6e22e>getNumBands</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>WritableRaster</color> <color=#a6e22e>createCompatibleWritableRaster</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>h</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Raster</color><color=#f8f8f2>.</color><color=#a6e22e>createWritableRaster</color><color=#f8f8f2>(</color><color=#f8f8f2>createCompatibleSampleModel</color><color=#f8f8f2>(</color><color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>),</color> <color=#66d9ef>new</color> <color=#f8f8f2>Point</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isCompatibleRaster</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Raster</color> <color=#f8f8f2>raster</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>size</color> <color=#f92672>=</color> <color=#f8f8f2>raster</color><color=#f8f8f2>.</color><color=#a6e22e>getSampleModel</color><color=#f8f8f2>().</color><color=#a6e22e>getSampleSize</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>raster</color><color=#f8f8f2>.</color><color=#a6e22e>getTransferType</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>transferType</color><color=#f8f8f2>)</color> <color=#f92672>&&</color>
                <color=#f8f8f2>(</color><color=#f8f8f2>raster</color><color=#f8f8f2>.</color><color=#a6e22e>getNumBands</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>((</color><color=#ae81ff>1</color> <color=#f92672><<</color> <color=#f8f8f2>size</color><color=#f8f8f2>)</color> <color=#f92672>>=</color> <color=#f8f8f2>icm</color><color=#f8f8f2>.</color><color=#a6e22e>getMapSize</color><color=#f8f8f2>()));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#e6db74>"DiscreteAlphaIndexColorModel: #pixelBits = "</color> <color=#f92672>+</color> <color=#f8f8f2>pixel_bits</color>
                <color=#f92672>+</color> <color=#e6db74>" numComponents = "</color> <color=#f92672>+</color> <color=#f8f8f2>getNumComponents</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" color space = "</color> <color=#f92672>+</color> <color=#f8f8f2>getColorSpace</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" transparency = "</color> <color=#f92672>+</color> <color=#f8f8f2>getTransparency</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" has alpha = "</color> <color=#f92672>+</color> <color=#f8f8f2>hasAlpha</color><color=#f8f8f2>()</color>
                <color=#f92672>+</color> <color=#e6db74>" isAlphaPre = "</color> <color=#f92672>+</color> <color=#f8f8f2>isAlphaPremultiplied</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>