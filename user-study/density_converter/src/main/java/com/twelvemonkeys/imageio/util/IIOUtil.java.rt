<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2009, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.imageio.util</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.image.ImageUtil</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.IIOParam</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.ImageIO</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.spi.IIOServiceProvider</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.spi.ServiceRegistry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.stream.ImageInputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.stream.ImageOutputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.BufferedInputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.BufferedOutputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.InputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.OutputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.SortedSet</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.TreeSet</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * IIOUtil</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haraldk$</color>
<color=#75715e> * @version $Id: IIOUtil.java,v 1.0 May 8, 2008 3:04:54 PM haraldk Exp$</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>IIOUtil</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#a6e22e>IIOUtil</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates an {@code InputStream} adapter that reads from an underlying {@code ImageInputStream}.</color>
<color=#75715e>     * The input stream will read until the end of {@code pStream}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pStream the stream to read from.</color>
<color=#75715e>     * @return an {@code InputStream} reading from {@code pStream}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>InputStream</color> <color=#a6e22e>createStreamAdapter</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>pStream</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// TODO: Include stream start pos?</color>
        <color=#75715e>// TODO: Skip buffering for known in-memory implementations?</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedInputStream</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>IIOInputStreamAdapter</color><color=#f8f8f2>(</color><color=#f8f8f2>pStream</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates an {@code InputStream} adapter that reads from an underlying {@code ImageInputStream}.</color>
<color=#75715e>     * The input stream will read until the end of {@code pStream}, or at most {@code pLength} bytes has been read.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pStream the stream to read from.</color>
<color=#75715e>     * @param pLength the maximum number of bytes that can be read from {@code pStream}.</color>
<color=#75715e>     * @return an {@code InputStream} reading from {@code pStream}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>InputStream</color> <color=#a6e22e>createStreamAdapter</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>pStream</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// TODO: Include stream start pos?</color>
        <color=#75715e>// TODO: Skip buffering for known in-memory implementations?</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedInputStream</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>IIOInputStreamAdapter</color><color=#f8f8f2>(</color><color=#f8f8f2>pStream</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates an {@code OutputStream} adapter that writes to an underlying {@code ImageOutputStream}.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * Note: The adapter is buffered, and <em>MUST</em> be properly flushed/closed after use,</color>
<color=#75715e>     * otherwise data may be lost.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pStream the stream to write to.</color>
<color=#75715e>     * @return an {@code OutputSteam} writing to {@code pStream}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>OutputStream</color> <color=#a6e22e>createStreamAdapter</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageOutputStream</color> <color=#f8f8f2>pStream</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedOutputStream</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>IIOOutputStreamAdapter</color><color=#f8f8f2>(</color><color=#f8f8f2>pStream</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Image</color> <color=#a6e22e>fakeSubsampling</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Image</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>IIOParam</color> <color=#f8f8f2>pParam</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pImage</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pParam</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>pParam</color><color=#f8f8f2>.</color><color=#a6e22e>getSourceXSubsampling</color><color=#f8f8f2>();</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#f8f8f2>pParam</color><color=#f8f8f2>.</color><color=#a6e22e>getSourceYSubsampling</color><color=#f8f8f2>();</color>

            <color=#75715e>// 1 is default</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>></color> <color=#ae81ff>1</color> <color=#f92672>||</color> <color=#f8f8f2>y</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>w</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ImageUtil</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(</color><color=#f8f8f2>pImage</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>x</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>h</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ImageUtil</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>(</color><color=#f8f8f2>pImage</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>y</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>

                <color=#75715e>// Fake subsampling by scaling fast</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>.</color><color=#a6e22e>getScaledInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#f8f8f2>Image</color><color=#f8f8f2>.</color><color=#a6e22e>SCALE_FAST</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Rectangle</color> <color=#a6e22e>getSourceRegion</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>IIOParam</color> <color=#f8f8f2>pParam</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pSrcWidth</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pSrcHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Rectangle</color> <color=#f8f8f2>sourceRegion</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rectangle</color><color=#f8f8f2>(</color><color=#f8f8f2>pSrcWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>pSrcHeight</color><color=#f8f8f2>);</color>

        <color=#75715e>// If param is present, calculate region</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pParam</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Get intersection with source region</color>
            <color=#f8f8f2>Rectangle</color> <color=#f8f8f2>region</color> <color=#f92672>=</color> <color=#f8f8f2>pParam</color><color=#f8f8f2>.</color><color=#a6e22e>getSourceRegion</color><color=#f8f8f2>();</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>region</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>sourceRegion</color> <color=#f92672>=</color> <color=#f8f8f2>sourceRegion</color><color=#f8f8f2>.</color><color=#a6e22e>intersection</color><color=#f8f8f2>(</color><color=#f8f8f2>region</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Scale according to subsampling offsets</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>subsampleXOffset</color> <color=#f92672>=</color> <color=#f8f8f2>pParam</color><color=#f8f8f2>.</color><color=#a6e22e>getSubsamplingXOffset</color><color=#f8f8f2>();</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>subsampleYOffset</color> <color=#f92672>=</color> <color=#f8f8f2>pParam</color><color=#f8f8f2>.</color><color=#a6e22e>getSubsamplingYOffset</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>sourceRegion</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>+=</color> <color=#f8f8f2>subsampleXOffset</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>sourceRegion</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>+=</color> <color=#f8f8f2>subsampleYOffset</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>sourceRegion</color><color=#f8f8f2>.</color><color=#a6e22e>width</color> <color=#f92672>-=</color> <color=#f8f8f2>subsampleXOffset</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>sourceRegion</color><color=#f8f8f2>.</color><color=#a6e22e>height</color> <color=#f92672>-=</color> <color=#f8f8f2>subsampleYOffset</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>sourceRegion</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>fakeAOI</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Rectangle</color> <color=#f8f8f2>pSourceRegion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pImage</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pSourceRegion</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pSourceRegion</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>!=</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>pSourceRegion</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>!=</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>pSourceRegion</color><color=#f8f8f2>.</color><color=#a6e22e>width</color> <color=#f92672>!=</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>pSourceRegion</color><color=#f8f8f2>.</color><color=#a6e22e>height</color> <color=#f92672>!=</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>.</color><color=#a6e22e>getSubimage</color><color=#f8f8f2>(</color><color=#f8f8f2>pSourceRegion</color><color=#f8f8f2>.</color><color=#a6e22e>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>pSourceRegion</color><color=#f8f8f2>.</color><color=#a6e22e>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>pSourceRegion</color><color=#f8f8f2>.</color><color=#a6e22e>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>pSourceRegion</color><color=#f8f8f2>.</color><color=#a6e22e>height</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * THIS METHOD WILL ME MOVED/RENAMED, DO NOT USE.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param registry the registry to unregister from.</color>
<color=#75715e>     * @param provider the provider to unregister.</color>
<color=#75715e>     * @param category the category to unregister from.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#66d9ef>void</color> <color=#a6e22e>deregisterProvider</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ServiceRegistry</color> <color=#f8f8f2>registry</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>IIOServiceProvider</color> <color=#f8f8f2>provider</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Class</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>category</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// http://www.ibm.com/developerworks/java/library/j-jtp04298.html</color>
        <color=#f8f8f2>registry</color><color=#f8f8f2>.</color><color=#a6e22e>deregisterServiceProvider</color><color=#f8f8f2>(</color><color=#f8f8f2>category</color><color=#f8f8f2>.</color><color=#a6e22e>cast</color><color=#f8f8f2>(</color><color=#f8f8f2>provider</color><color=#f8f8f2>),</color> <color=#f8f8f2>category</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * THIS METHOD WILL ME MOVED/RENAMED, DO NOT USE.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param registry          the registry to lookup from.</color>
<color=#75715e>     * @param providerClassName name of the provider class.</color>
<color=#75715e>     * @param category          provider category</color>
<color=#75715e>     * @return the provider instance, or {@code null}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>T</color> <color=#a6e22e>lookupProviderByName</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ServiceRegistry</color> <color=#f8f8f2>registry</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>providerClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>Class</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>category</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>category</color><color=#f8f8f2>.</color><color=#a6e22e>cast</color><color=#f8f8f2>(</color><color=#f8f8f2>registry</color><color=#f8f8f2>.</color><color=#a6e22e>getServiceProviderByClass</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#f8f8f2>providerClassName</color><color=#f8f8f2>)));</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns a sorted array of format names, that can be read by ImageIO.</color>
<color=#75715e>     * The names are all upper-case, and contains no duplicates.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return a normalized array of {@code String}s.</color>
<color=#75715e>     * @see ImageIO#getReaderFormatNames()</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#a6e22e>getNormalizedReaderFormatNames</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>normalizeNames</color><color=#f8f8f2>(</color><color=#f8f8f2>ImageIO</color><color=#f8f8f2>.</color><color=#a6e22e>getReaderFormatNames</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns a sorted array of format names, that can be written by ImageIO.</color>
<color=#75715e>     * The names are all upper-case, and contains no duplicates.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return a normalized array of {@code String}s.</color>
<color=#75715e>     * @see ImageIO#getWriterFormatNames()</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#a6e22e>getNormalizedWriterFormatNames</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>normalizeNames</color><color=#f8f8f2>(</color><color=#f8f8f2>ImageIO</color><color=#f8f8f2>.</color><color=#a6e22e>getWriterFormatNames</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#a6e22e>normalizeNames</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>names</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>SortedSet</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>normalizedNames</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>TreeSet</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>();</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>name</color> <color=#f8f8f2>:</color> <color=#f8f8f2>names</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>normalizedNames</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>toUpperCase</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>normalizedNames</color><color=#f8f8f2>.</color><color=#a6e22e>toArray</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[</color><color=#f8f8f2>normalizedNames</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color><color=#f92672>]</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>