<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.imageio</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.imageio.util.IIOUtil</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.ImageWriteParam</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.ImageWriter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.metadata.IIOMetadata</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.spi.ImageWriterSpi</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.stream.ImageOutputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Abstract base class for image writers.</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haraldk$</color>
<color=#75715e> * @version $Id: ImageWriterBase.java,v 1.0 Sep 24, 2007 12:22:28 AM haraldk Exp$</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>ImageWriterBase</color> <color=#66d9ef>extends</color> <color=#f8f8f2>ImageWriter</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * For convenience. Only set if the output is an {@code ImageInputStream}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @see #setOutput(Object)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>ImageOutputStream</color> <color=#f8f8f2>imageOutput</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Constructs an {@code ImageWriter} and sets its</color>
<color=#75715e>     * {@code originatingProvider} instance variable to the</color>
<color=#75715e>     * supplied value.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * <p> Subclasses that make use of extensions should provide a</color>
<color=#75715e>     * constructor with signature {@code (ImageWriterSpi,</color>
<color=#75715e>     * Object)} in order to retrieve the extension object.  If</color>
<color=#75715e>     * the extension object is unsuitable, an</color>
<color=#75715e>     * {@code IllegalArgumentException} should be thrown.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param provider the {@code ImageWriterSpi} that is constructing this object, or {@code null}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#a6e22e>ImageWriterBase</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageWriterSpi</color> <color=#f8f8f2>provider</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>provider</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getFormatName</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>getOriginatingProvider</color><color=#f8f8f2>().</color><color=#a6e22e>getFormatNames</color><color=#f8f8f2>()</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setOutput</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>output</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>resetMembers</color><color=#f8f8f2>();</color>
        <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>setOutput</color><color=#f8f8f2>(</color><color=#f8f8f2>output</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>output</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>ImageOutputStream</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>imageOutput</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ImageOutputStream</color><color=#f8f8f2>)</color> <color=#f8f8f2>output</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>imageOutput</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Makes sure output is set.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @throws IllegalStateException if {@code getOutput() == null}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>assertOutput</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getOutput</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"getOutput() == null"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>dispose</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>resetMembers</color><color=#f8f8f2>();</color>
        <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>reset</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>resetMembers</color><color=#f8f8f2>();</color>
        <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>resetMembers</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns {@code null}</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param param ignored.</color>
<color=#75715e>     * @return {@code null}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>IIOMetadata</color> <color=#a6e22e>getDefaultStreamMetadata</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageWriteParam</color> <color=#f8f8f2>param</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns {@code null}</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param inData ignored.</color>
<color=#75715e>     * @param param  ignored.</color>
<color=#75715e>     * @return {@code null}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>IIOMetadata</color> <color=#a6e22e>convertStreamMetadata</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>IIOMetadata</color> <color=#f8f8f2>inData</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ImageWriteParam</color> <color=#f8f8f2>param</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>static</color> <color=#f8f8f2>Rectangle</color> <color=#a6e22e>getSourceRegion</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageWriteParam</color> <color=#f8f8f2>pParam</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pWidth</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>IIOUtil</color><color=#f8f8f2>.</color><color=#a6e22e>getSourceRegion</color><color=#f8f8f2>(</color><color=#f8f8f2>pParam</color><color=#f8f8f2>,</color> <color=#f8f8f2>pWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>pHeight</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Utility method for getting the area of interest (AOI) of an image.</color>
<color=#75715e>     * The AOI is defined by the {@link javax.imageio.IIOParam#setSourceRegion(Rectangle)}</color>
<color=#75715e>     * method.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * Note: If it is possible for the writer to write the AOI directly, such a</color>
<color=#75715e>     * method should be used instead, for efficiency.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pImage the image to get AOI from</color>
<color=#75715e>     * @param pParam the param optionally specifying the AOI</color>
<color=#75715e>     * @return a {@code BufferedImage} containing the area of interest (source</color>
<color=#75715e>     * region), or the original image, if no source region was set, or</color>
<color=#75715e>     * {@code pParam} was {@code null}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>static</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>fakeAOI</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ImageWriteParam</color> <color=#f8f8f2>pParam</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>IIOUtil</color><color=#f8f8f2>.</color><color=#a6e22e>fakeAOI</color><color=#f8f8f2>(</color><color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>getSourceRegion</color><color=#f8f8f2>(</color><color=#f8f8f2>pParam</color><color=#f8f8f2>,</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>()));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Utility method for getting the subsampled image.</color>
<color=#75715e>     * The subsampling is defined by the</color>
<color=#75715e>     * {@link javax.imageio.IIOParam#setSourceSubsampling(int, int, int, int)}</color>
<color=#75715e>     * method.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * NOTE: This method does not take the subsampling offsets into</color>
<color=#75715e>     * consideration.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * Note: If it is possible for the writer to subsample directly, such a</color>
<color=#75715e>     * method should be used instead, for efficiency.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pImage the image to subsample</color>
<color=#75715e>     * @param pParam the param optionally specifying subsampling</color>
<color=#75715e>     * @return an {@code Image} containing the subsampled image, or the</color>
<color=#75715e>     * original image, if no subsampling was specified, or</color>
<color=#75715e>     * {@code pParam} was {@code null}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>static</color> <color=#f8f8f2>Image</color> <color=#a6e22e>fakeSubsampling</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Image</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ImageWriteParam</color> <color=#f8f8f2>pParam</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>IIOUtil</color><color=#f8f8f2>.</color><color=#a6e22e>fakeSubsampling</color><color=#f8f8f2>(</color><color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>pParam</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>