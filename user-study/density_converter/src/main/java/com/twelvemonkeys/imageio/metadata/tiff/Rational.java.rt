<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2009, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#75715e>/*</color>
<color=#75715e> * Adapted from sample code featured in</color>
<color=#75715e> * "Intro to Programming in Java: An Interdisciplinary Approach" (Addison Wesley)</color>
<color=#75715e> * by Robert Sedgewick and Kevin Wayne. Permission granted to redistribute under BSD license.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.imageio.metadata.tiff</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Represents a rational number with a {@code long} numerator and {@code long} denominator.</color>
<color=#75715e> * Rational numbers are stored in reduced form with the sign stored with the numerator.</color>
<color=#75715e> * Rationals are immutable.</color>
<color=#75715e> * <p/></color>
<color=#75715e> * Adapted from sample code featured in</color>
<color=#75715e> * <a href="http://www.cs.princeton.edu/introcs/home/">"Intro to Programming in Java: An Interdisciplinary Approach" (Addison Wesley)</a></color>
<color=#75715e> * by Robert Sedgewick and Kevin Wayne. Permission granted to redistribute under BSD license.</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author <a href="http://www.cs.princeton.edu/introcs/92symbolic/Rational.java.html">Robert Sedgewick and Kevin Wayne (original version)</a></color>
<color=#75715e> * @author last modified by $Author: haraldk$</color>
<color=#75715e> * @version $Id: Rational.java,v 1.0 Nov 18, 2009 1:12:00 AM haraldk Exp$</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>Rational</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Number</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Comparable</color><color=#f92672><</color><color=#f8f8f2>Rational</color><color=#f92672>></color> <color=#f8f8f2>{</color>
    <color=#75715e>// TODO: Document public API</color>
    <color=#75715e>// TODO: Move to com.tm.lang?</color>
    <color=#75715e>// Inspired by http://www.cs.princeton.edu/introcs/92symbolic/Rational.java.html and java.lang.Integer</color>
    <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Rational</color> <color=#f8f8f2>ZERO</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rational</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Rational</color> <color=#f8f8f2>NaN</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rational</color><color=#f8f8f2>();</color> <color=#75715e>// TODO: This field needs thoughts/tests/spec/consistency check, see Float.NaN</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>numerator</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>denominator</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#a6e22e>Rational</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>numerator</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>denominator</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>Rational</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pNumber</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>pNumber</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>Rational</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pNumerator</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pDenominator</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pDenominator</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"denominator == 0"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pNumerator</color> <color=#f92672>==</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>MIN_VALUE</color> <color=#f92672>||</color> <color=#f8f8f2>pDenominator</color> <color=#f92672>==</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>MIN_VALUE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"value == Long.MIN_VALUE"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Reduce fractions</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>gcd</color> <color=#f92672>=</color> <color=#f8f8f2>gcd</color><color=#f8f8f2>(</color><color=#f8f8f2>pNumerator</color><color=#f8f8f2>,</color> <color=#f8f8f2>pDenominator</color><color=#f8f8f2>);</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>num</color> <color=#f92672>=</color> <color=#f8f8f2>pNumerator</color> <color=#f92672>/</color> <color=#f8f8f2>gcd</color><color=#f8f8f2>;</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>den</color> <color=#f92672>=</color> <color=#f8f8f2>pDenominator</color> <color=#f92672>/</color> <color=#f8f8f2>gcd</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>numerator</color> <color=#f92672>=</color> <color=#f8f8f2>pDenominator</color> <color=#f92672>>=</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f8f8f2>num</color> <color=#f8f8f2>:</color> <color=#f92672>-</color><color=#f8f8f2>num</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>denominator</color> <color=#f92672>=</color> <color=#f8f8f2>pDenominator</color> <color=#f92672>>=</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f8f8f2>den</color> <color=#f8f8f2>:</color> <color=#f92672>-</color><color=#f8f8f2>den</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>gcd</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>m</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>n</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>m</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>gcd</color><color=#f8f8f2>(</color><color=#f8f8f2>n</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#f8f8f2>m</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>n</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f8f8f2>m</color> <color=#f8f8f2>:</color> <color=#f8f8f2>gcd</color><color=#f8f8f2>(</color><color=#f8f8f2>n</color><color=#f8f8f2>,</color> <color=#f8f8f2>m</color> <color=#f92672>%</color> <color=#f8f8f2>n</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>lcm</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>m</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>n</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>m</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>lcm</color><color=#f8f8f2>(</color><color=#f8f8f2>n</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#f8f8f2>m</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>m</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672>/</color> <color=#f8f8f2>gcd</color><color=#f8f8f2>(</color><color=#f8f8f2>m</color><color=#f8f8f2>,</color> <color=#f8f8f2>n</color><color=#f8f8f2>));</color>    <color=#75715e>// parentheses important to avoid overflow</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>numerator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>numerator</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>denominator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>denominator</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/// Number implementation</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>intValue</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>doubleValue</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>longValue</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>doubleValue</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>floatValue</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>doubleValue</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>double</color> <color=#a6e22e>doubleValue</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color> <color=#f92672>==</color> <color=#f8f8f2>NaN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>NaN</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>numerator</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>denominator</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/// Comparable implementation</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>compareTo</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Rational</color> <color=#f8f8f2>pOther</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>double</color> <color=#f8f8f2>thisVal</color> <color=#f92672>=</color> <color=#f8f8f2>doubleValue</color><color=#f8f8f2>();</color>
        <color=#66d9ef>double</color> <color=#f8f8f2>otherVal</color> <color=#f92672>=</color> <color=#f8f8f2>pOther</color><color=#f8f8f2>.</color><color=#a6e22e>doubleValue</color><color=#f8f8f2>();</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>thisVal</color> <color=#f92672><</color> <color=#f8f8f2>otherVal</color> <color=#f92672>?</color> <color=#f92672>-</color><color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#f8f8f2>thisVal</color> <color=#f92672>==</color> <color=#f8f8f2>otherVal</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/// Object overrides</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>hashCode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>floatToIntBits</color><color=#f8f8f2>(</color><color=#f8f8f2>floatValue</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>pOther</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pOther</color> <color=#f92672>==</color> <color=#66d9ef>this</color> <color=#f92672>||</color> <color=#f8f8f2>pOther</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Rational</color> <color=#f92672>&&</color> <color=#f8f8f2>compareTo</color><color=#f8f8f2>((</color><color=#f8f8f2>Rational</color><color=#f8f8f2>)</color> <color=#f8f8f2>pOther</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color> <color=#f92672>==</color> <color=#f8f8f2>NaN</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#e6db74>"NaN"</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>denominator</color> <color=#f92672>==</color> <color=#ae81ff>1</color> <color=#f92672>?</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>numerator</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#e6db74>"%s/%s"</color><color=#f8f8f2>,</color> <color=#f8f8f2>numerator</color><color=#f8f8f2>,</color> <color=#f8f8f2>denominator</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/// Operations (adapted from http://www.cs.princeton.edu/introcs/92symbolic/Rational.java.html)</color>
    <color=#75715e>// TODO: Naming! multiply/divide/add/subtract or times/divides/plus/minus</color>

    <color=#75715e>// return a * b, staving off overflow as much as possible by cross-cancellation</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Rational</color> <color=#a6e22e>times</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Rational</color> <color=#f8f8f2>pOther</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// special cases</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>ZERO</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>pOther</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>ZERO</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>ZERO</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// reduce p1/q2 and p2/q1, then multiply, where a = p1/q1 and b = p2/q2</color>
        <color=#f8f8f2>Rational</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rational</color><color=#f8f8f2>(</color><color=#f8f8f2>numerator</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOther</color><color=#f8f8f2>.</color><color=#a6e22e>denominator</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>Rational</color> <color=#f8f8f2>d</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rational</color><color=#f8f8f2>(</color><color=#f8f8f2>pOther</color><color=#f8f8f2>.</color><color=#a6e22e>numerator</color><color=#f8f8f2>,</color> <color=#f8f8f2>denominator</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rational</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>numerator</color> <color=#f92672>*</color> <color=#f8f8f2>d</color><color=#f8f8f2>.</color><color=#a6e22e>numerator</color><color=#f8f8f2>,</color> <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>denominator</color> <color=#f92672>*</color> <color=#f8f8f2>d</color><color=#f8f8f2>.</color><color=#a6e22e>denominator</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// return a + b, staving off overflow</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Rational</color> <color=#a6e22e>plus</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Rational</color> <color=#f8f8f2>pOther</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// special cases</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>ZERO</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pOther</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pOther</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>ZERO</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Find gcd of numerators and denominators</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#f8f8f2>gcd</color><color=#f8f8f2>(</color><color=#f8f8f2>numerator</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOther</color><color=#f8f8f2>.</color><color=#a6e22e>numerator</color><color=#f8f8f2>);</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>gcd</color><color=#f8f8f2>(</color><color=#f8f8f2>denominator</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOther</color><color=#f8f8f2>.</color><color=#a6e22e>denominator</color><color=#f8f8f2>);</color>

        <color=#75715e>// add cross-product terms for numerator</color>
        <color=#75715e>// multiply back in</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rational</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>((</color><color=#f8f8f2>numerator</color> <color=#f92672>/</color> <color=#f8f8f2>f</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>pOther</color><color=#f8f8f2>.</color><color=#a6e22e>denominator</color> <color=#f92672>/</color> <color=#f8f8f2>g</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>pOther</color><color=#f8f8f2>.</color><color=#a6e22e>numerator</color> <color=#f92672>/</color> <color=#f8f8f2>f</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>denominator</color> <color=#f92672>/</color> <color=#f8f8f2>g</color><color=#f8f8f2>))</color> <color=#f92672>*</color> <color=#f8f8f2>f</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>lcm</color><color=#f8f8f2>(</color><color=#f8f8f2>denominator</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOther</color><color=#f8f8f2>.</color><color=#a6e22e>denominator</color><color=#f8f8f2>)</color>
        <color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// return -a</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Rational</color> <color=#a6e22e>negate</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rational</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#f8f8f2>numerator</color><color=#f8f8f2>,</color> <color=#f8f8f2>denominator</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// return a - b</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Rational</color> <color=#a6e22e>minus</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Rational</color> <color=#f8f8f2>pOther</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>plus</color><color=#f8f8f2>(</color><color=#f8f8f2>pOther</color><color=#f8f8f2>.</color><color=#a6e22e>negate</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Rational</color> <color=#a6e22e>reciprocal</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rational</color><color=#f8f8f2>(</color><color=#f8f8f2>denominator</color><color=#f8f8f2>,</color> <color=#f8f8f2>numerator</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// return a / b</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Rational</color> <color=#a6e22e>divides</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Rational</color> <color=#f8f8f2>pOther</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pOther</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>ZERO</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArithmeticException</color><color=#f8f8f2>(</color><color=#e6db74>"/ by zero"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>times</color><color=#f8f8f2>(</color><color=#f8f8f2>pOther</color><color=#f8f8f2>.</color><color=#a6e22e>reciprocal</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>