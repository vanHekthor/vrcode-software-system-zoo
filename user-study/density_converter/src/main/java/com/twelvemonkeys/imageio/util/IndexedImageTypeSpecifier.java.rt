<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.imageio.util</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.ImageTypeSpecifier</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.IndexColorModel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.WritableRaster</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Hashtable</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.twelvemonkeys.lang.Validate.notNull</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * IndexedImageTypeSpecifier</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haraldk$</color>
<color=#75715e> * @version $Id: IndexedImageTypeSpecifier.java,v 1.0 May 19, 2008 11:04:28 AM haraldk Exp$</color>
<color=#75715e> */</color>
<color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>IndexedImageTypeSpecifier</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#a6e22e>IndexedImageTypeSpecifier</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#f8f8f2>ImageTypeSpecifier</color> <color=#a6e22e>createFromIndexColorModel</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>IndexColorModel</color> <color=#f8f8f2>pColorModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// For some reason, we need a sample model</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ImageTypeSpecifier</color><color=#f8f8f2>(</color><color=#f8f8f2>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>pColorModel</color><color=#f8f8f2>,</color> <color=#e6db74>"colorModel"</color><color=#f8f8f2>),</color> <color=#f8f8f2>pColorModel</color><color=#f8f8f2>.</color><color=#a6e22e>createCompatibleSampleModel</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

            <color=#a6e22e>@Override</color>
            <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>createBufferedImage</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pWidth</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// This is a fix for the super-method, that first creates a sample model, and then</color>
                    <color=#75715e>// creates a raster from it, using Raster.createWritableRaster. The problem with</color>
                    <color=#75715e>// that approach, is that it always creates a TYPE_CUSTOM BufferedImage for indexed images.</color>
                    <color=#f8f8f2>WritableRaster</color> <color=#f8f8f2>raster</color> <color=#f92672>=</color> <color=#f8f8f2>colorModel</color><color=#f8f8f2>.</color><color=#a6e22e>createCompatibleWritableRaster</color><color=#f8f8f2>(</color><color=#f8f8f2>pWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>pHeight</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>colorModel</color><color=#f8f8f2>,</color> <color=#f8f8f2>raster</color><color=#f8f8f2>,</color> <color=#f8f8f2>colorModel</color><color=#f8f8f2>.</color><color=#a6e22e>isAlphaPremultiplied</color><color=#f8f8f2>(),</color> <color=#66d9ef>new</color> <color=#f8f8f2>Hashtable</color><color=#f8f8f2>());</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NegativeArraySizeException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// Exception most likely thrown from a DataBuffer constructor</color>
                    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Array size > Integer.MAX_VALUE!"</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>};</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>