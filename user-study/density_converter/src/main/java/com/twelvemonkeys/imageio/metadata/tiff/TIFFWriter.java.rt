<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2013, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.imageio.metadata.tiff</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.imageio.metadata.CompoundDirectory</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.imageio.metadata.Directory</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.imageio.metadata.Entry</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.imageio.metadata.MetadataWriter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.lang.Validate</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.IIOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.stream.ImageOutputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteOrder</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.charset.Charset</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.charset.StandardCharsets</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.twelvemonkeys.imageio.metadata.tiff.TIFFEntry.getType</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>com.twelvemonkeys.imageio.metadata.tiff.TIFFEntry.getValueLength</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * TIFFWriter</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haraldk$</color>
<color=#75715e> * @version $Id: TIFFWriter.java,v 1.0 17.07.13 10:20 haraldk Exp$</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>TIFFWriter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>MetadataWriter</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>WORD_LENGTH</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>LONGWORD_LENGTH</color> <color=#f92672>=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>ENTRY_LENGTH</color> <color=#f92672>=</color> <color=#ae81ff>12</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>Entry</color><color=#f92672>></color> <color=#f8f8f2>entries</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ImageOutputStream</color> <color=#f8f8f2>stream</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>write</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>IFD</color><color=#f8f8f2>(</color><color=#f8f8f2>entries</color><color=#f8f8f2>),</color> <color=#f8f8f2>stream</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Directory</color> <color=#f8f8f2>directory</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ImageOutputStream</color> <color=#f8f8f2>stream</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Validate</color><color=#f8f8f2>.</color><color=#a6e22e>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>directory</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>Validate</color><color=#f8f8f2>.</color><color=#a6e22e>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>stream</color><color=#f8f8f2>);</color>

        <color=#75715e>// TODO: Should probably validate that the directory contains only valid TIFF entries...</color>
        <color=#75715e>// the writer will crash on non-Integer ids and unsupported types</color>
        <color=#75715e>// TODO: Implement the above validation in IFD constructor?</color>

        <color=#f8f8f2>writeTIFFHeader</color><color=#f8f8f2>(</color><color=#f8f8f2>stream</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>directory</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>CompoundDirectory</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>CompoundDirectory</color> <color=#f8f8f2>compoundDirectory</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>CompoundDirectory</color><color=#f8f8f2>)</color> <color=#f8f8f2>directory</color><color=#f8f8f2>;</color>

            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>compoundDirectory</color><color=#f8f8f2>.</color><color=#a6e22e>directoryCount</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>writeIFD</color><color=#f8f8f2>(</color><color=#f8f8f2>compoundDirectory</color><color=#f8f8f2>.</color><color=#a6e22e>getDirectory</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>),</color> <color=#f8f8f2>stream</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>writeIFD</color><color=#f8f8f2>(</color><color=#f8f8f2>directory</color><color=#f8f8f2>,</color> <color=#f8f8f2>stream</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Offset to next IFD (EOF)</color>
        <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>writeInt</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>writeTIFFHeader</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageOutputStream</color> <color=#f8f8f2>stream</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Header</color>
        <color=#f8f8f2>ByteOrder</color> <color=#f8f8f2>byteOrder</color> <color=#f92672>=</color> <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>getByteOrder</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>writeShort</color><color=#f8f8f2>(</color><color=#f8f8f2>byteOrder</color> <color=#f92672>==</color> <color=#f8f8f2>ByteOrder</color><color=#f8f8f2>.</color><color=#a6e22e>BIG_ENDIAN</color> <color=#f92672>?</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>BYTE_ORDER_MARK_BIG_ENDIAN</color> <color=#f8f8f2>:</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>BYTE_ORDER_MARK_LITTLE_ENDIAN</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>writeShort</color><color=#f8f8f2>(</color><color=#ae81ff>42</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>writeIFD</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>Entry</color><color=#f92672>></color> <color=#f8f8f2>entries</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ImageOutputStream</color> <color=#f8f8f2>stream</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Validate</color><color=#f8f8f2>.</color><color=#a6e22e>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>entries</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>Validate</color><color=#f8f8f2>.</color><color=#a6e22e>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>stream</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>writeIFD</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>IFD</color><color=#f8f8f2>(</color><color=#f8f8f2>entries</color><color=#f8f8f2>),</color> <color=#f8f8f2>stream</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>writeIFD</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Directory</color> <color=#f8f8f2>original</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ImageOutputStream</color> <color=#f8f8f2>stream</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>isSubIFD</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#75715e>// TIFF spec says tags should be in increasing order, enforce that when writing</color>
        <color=#f8f8f2>Directory</color> <color=#f8f8f2>ordered</color> <color=#f92672>=</color> <color=#f8f8f2>ensureOrderedDirectory</color><color=#f8f8f2>(</color><color=#f8f8f2>original</color><color=#f8f8f2>);</color>

        <color=#75715e>// Compute space needed for extra storage first, then write the offset to the IFD, so that the layout is:</color>
        <color=#75715e>// IFD offset</color>
        <color=#75715e>// <data including sub-IFDs></color>
        <color=#75715e>// IFD entries (values/offsets)</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>dataOffset</color> <color=#f92672>=</color> <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>getStreamPosition</color><color=#f8f8f2>();</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>dataSize</color> <color=#f92672>=</color> <color=#f8f8f2>computeDataSize</color><color=#f8f8f2>(</color><color=#f8f8f2>ordered</color><color=#f8f8f2>);</color>

        <color=#75715e>// Offset to this IFD</color>
        <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>ifdOffset</color> <color=#f92672>=</color> <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>getStreamPosition</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#f8f8f2>dataSize</color> <color=#f92672>+</color> <color=#f8f8f2>LONGWORD_LENGTH</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isSubIFD</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>writeInt</color><color=#f8f8f2>(</color><color=#f8f8f2>assertIntegerOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>ifdOffset</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>dataOffset</color> <color=#f92672>+=</color> <color=#f8f8f2>LONGWORD_LENGTH</color><color=#f8f8f2>;</color>

            <color=#75715e>// Seek to offset</color>
            <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>ifdOffset</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>dataOffset</color> <color=#f92672>+=</color> <color=#f8f8f2>WORD_LENGTH</color> <color=#f92672>+</color> <color=#f8f8f2>ordered</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>*</color> <color=#f8f8f2>ENTRY_LENGTH</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Write directory</color>
        <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>writeShort</color><color=#f8f8f2>(</color><color=#f8f8f2>ordered</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>());</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Entry</color> <color=#f8f8f2>entry</color> <color=#f8f8f2>:</color> <color=#f8f8f2>ordered</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Write tag id</color>
            <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>writeShort</color><color=#f8f8f2>((</color><color=#f8f8f2>Integer</color><color=#f8f8f2>)</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getIdentifier</color><color=#f8f8f2>());</color>
            <color=#75715e>// Write tag type</color>
            <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>writeShort</color><color=#f8f8f2>(</color><color=#f8f8f2>getType</color><color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>));</color>
            <color=#75715e>// Write value count</color>
            <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>writeInt</color><color=#f8f8f2>(</color><color=#f8f8f2>getCount</color><color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>));</color>

            <color=#75715e>// Write value</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>()</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Directory</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// TODO: This could possibly be a compound directory, in which case the count should be > 1</color>
                <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>writeInt</color><color=#f8f8f2>(</color><color=#f8f8f2>assertIntegerOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>dataOffset</color><color=#f8f8f2>));</color>
                <color=#66d9ef>long</color> <color=#f8f8f2>streamPosition</color> <color=#f92672>=</color> <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>getStreamPosition</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>dataOffset</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>Directory</color> <color=#f8f8f2>subIFD</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Directory</color><color=#f8f8f2>)</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>writeIFD</color><color=#f8f8f2>(</color><color=#f8f8f2>subIFD</color><color=#f8f8f2>,</color> <color=#f8f8f2>stream</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>dataOffset</color> <color=#f92672>+=</color> <color=#f8f8f2>computeDataSize</color><color=#f8f8f2>(</color><color=#f8f8f2>subIFD</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>streamPosition</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>dataOffset</color> <color=#f92672>+=</color> <color=#f8f8f2>writeValue</color><color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>,</color> <color=#f8f8f2>dataOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>stream</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>ifdOffset</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>computeIFDSize</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>Entry</color><color=#f92672>></color> <color=#f8f8f2>directory</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>WORD_LENGTH</color> <color=#f92672>+</color> <color=#f8f8f2>computeDataSize</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>IFD</color><color=#f8f8f2>(</color><color=#f8f8f2>directory</color><color=#f8f8f2>))</color> <color=#f92672>+</color> <color=#f8f8f2>directory</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>*</color> <color=#f8f8f2>ENTRY_LENGTH</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>computeDataSize</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Directory</color> <color=#f8f8f2>directory</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>dataSize</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Entry</color> <color=#f8f8f2>entry</color> <color=#f8f8f2>:</color> <color=#f8f8f2>directory</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>long</color> <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>getValueLength</color><color=#f8f8f2>(</color><color=#f8f8f2>getType</color><color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>),</color> <color=#f8f8f2>getCount</color><color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>));</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>length</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#e6db74>"Unknown size for entry %s"</color><color=#f8f8f2>,</color> <color=#f8f8f2>entry</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>length</color> <color=#f92672>></color> <color=#f8f8f2>LONGWORD_LENGTH</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>dataSize</color> <color=#f92672>+=</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>()</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Directory</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>Directory</color> <color=#f8f8f2>subIFD</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Directory</color><color=#f8f8f2>)</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>();</color>
                <color=#66d9ef>long</color> <color=#f8f8f2>subIFDSize</color> <color=#f92672>=</color> <color=#f8f8f2>WORD_LENGTH</color> <color=#f92672>+</color> <color=#f8f8f2>subIFD</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f92672>*</color> <color=#f8f8f2>ENTRY_LENGTH</color> <color=#f92672>+</color> <color=#f8f8f2>computeDataSize</color><color=#f8f8f2>(</color><color=#f8f8f2>subIFD</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>dataSize</color> <color=#f92672>+=</color> <color=#f8f8f2>subIFDSize</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>dataSize</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>Directory</color> <color=#a6e22e>ensureOrderedDirectory</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Directory</color> <color=#f8f8f2>directory</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isSorted</color><color=#f8f8f2>(</color><color=#f8f8f2>directory</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Entry</color><color=#f92672>></color> <color=#f8f8f2>entries</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>Entry</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>directory</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>());</color>

            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Entry</color> <color=#f8f8f2>entry</color> <color=#f8f8f2>:</color> <color=#f8f8f2>directory</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>sort</color><color=#f8f8f2>(</color><color=#f8f8f2>entries</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#f8f8f2>Entry</color><color=#f92672>></color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>compare</color><color=#f8f8f2>(</color><color=#f8f8f2>Entry</color> <color=#f8f8f2>left</color><color=#f8f8f2>,</color> <color=#f8f8f2>Entry</color> <color=#f8f8f2>right</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>Integer</color><color=#f8f8f2>)</color> <color=#f8f8f2>left</color><color=#f8f8f2>.</color><color=#a6e22e>getIdentifier</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>Integer</color><color=#f8f8f2>)</color> <color=#f8f8f2>right</color><color=#f8f8f2>.</color><color=#a6e22e>getIdentifier</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>});</color>

            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>IFD</color><color=#f8f8f2>(</color><color=#f8f8f2>entries</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>directory</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isSorted</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Directory</color> <color=#f8f8f2>directory</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>lastTag</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Entry</color> <color=#f8f8f2>entry</color> <color=#f8f8f2>:</color> <color=#f8f8f2>directory</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>tag</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>Integer</color><color=#f8f8f2>)</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getIdentifier</color><color=#f8f8f2>())</color> <color=#f92672>&</color> <color=#ae81ff>0xffff</color><color=#f8f8f2>;</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tag</color> <color=#f92672><</color> <color=#f8f8f2>lastTag</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>lastTag</color> <color=#f92672>=</color> <color=#f8f8f2>tag</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>writeValue</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Entry</color> <color=#f8f8f2>entry</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>dataOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ImageOutputStream</color> <color=#f8f8f2>stream</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>short</color> <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>getType</color><color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>);</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>valueLength</color> <color=#f92672>=</color> <color=#f8f8f2>getValueLength</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>getCount</color><color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>));</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>valueLength</color> <color=#f92672><=</color> <color=#f8f8f2>LONGWORD_LENGTH</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>writeValueInline</color><color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>(),</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>stream</color><color=#f8f8f2>);</color>

            <color=#75715e>// Pad</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>valueLength</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>LONGWORD_LENGTH</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>writeValueAt</color><color=#f8f8f2>(</color><color=#f8f8f2>dataOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>(),</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>stream</color><color=#f8f8f2>);</color>

            <color=#66d9ef>return</color> <color=#f8f8f2>valueLength</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>getCount</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Entry</color> <color=#f8f8f2>entry</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Object</color> <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>String</color> <color=#f92672>?</color> <color=#f8f8f2>((</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>).</color><color=#a6e22e>getBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>Charset</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#e6db74>"UTF-8"</color><color=#f8f8f2>)).</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>valueCount</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>writeValueInline</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>value</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>short</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ImageOutputStream</color> <color=#f8f8f2>stream</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>isArray</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_UNDEFINED</color><color=#f8f8f2>:</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BYTE</color><color=#f8f8f2>:</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_SBYTE</color><color=#f8f8f2>:</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>((</color><color=#66d9ef>byte</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>

                <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_SHORT</color><color=#f8f8f2>:</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_SSHORT</color><color=#f8f8f2>:</color>
                    <color=#66d9ef>short</color><color=#f92672>[]</color> <color=#f8f8f2>shorts</color><color=#f8f8f2>;</color>

                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#66d9ef>short</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>shorts</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>short</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>ints</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>shorts</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>short</color><color=#f92672>[</color><color=#f8f8f2>ints</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>

                        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>ints</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>shorts</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>short</color><color=#f8f8f2>)</color> <color=#f8f8f2>ints</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color>

                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#66d9ef>long</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>longs</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>long</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>shorts</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>short</color><color=#f92672>[</color><color=#f8f8f2>longs</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>

                        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>longs</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>shorts</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>short</color><color=#f8f8f2>)</color> <color=#f8f8f2>longs</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Unsupported type for TIFF SHORT: "</color> <color=#f92672>+</color> <color=#f8f8f2>value</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>());</color>
                    <color=#f8f8f2>}</color>

                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>writeShorts</color><color=#f8f8f2>(</color><color=#f8f8f2>shorts</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>shorts</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>

                <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_LONG</color><color=#f8f8f2>:</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_SLONG</color><color=#f8f8f2>:</color>
                    <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>ints</color><color=#f8f8f2>;</color>

                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>ints</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#66d9ef>long</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>longs</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>long</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>ints</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>longs</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>

                        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>longs</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>ints</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>longs</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Unsupported type for TIFF LONG: "</color> <color=#f92672>+</color> <color=#f8f8f2>value</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>());</color>
                    <color=#f8f8f2>}</color>

                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>writeInts</color><color=#f8f8f2>(</color><color=#f8f8f2>ints</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>ints</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>

                <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_RATIONAL</color><color=#f8f8f2>:</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_SRATIONAL</color><color=#f8f8f2>:</color>
                    <color=#f8f8f2>Rational</color><color=#f92672>[]</color> <color=#f8f8f2>rationals</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Rational</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Rational</color> <color=#f8f8f2>rational</color> <color=#f8f8f2>:</color> <color=#f8f8f2>rationals</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>writeInt</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>rational</color><color=#f8f8f2>.</color><color=#a6e22e>numerator</color><color=#f8f8f2>());</color>
                        <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>writeInt</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>rational</color><color=#f8f8f2>.</color><color=#a6e22e>denominator</color><color=#f8f8f2>());</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>

                <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_FLOAT</color><color=#f8f8f2>:</color>
                    <color=#66d9ef>float</color><color=#f92672>[]</color> <color=#f8f8f2>floats</color><color=#f8f8f2>;</color>

                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#66d9ef>float</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>floats</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Unsupported type for TIFF FLOAT: "</color> <color=#f92672>+</color> <color=#f8f8f2>value</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>());</color>
                    <color=#f8f8f2>}</color>

                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>writeFloats</color><color=#f8f8f2>(</color><color=#f8f8f2>floats</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>floats</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>

                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>

                <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_DOUBLE</color><color=#f8f8f2>:</color>
                    <color=#66d9ef>double</color><color=#f92672>[]</color> <color=#f8f8f2>doubles</color><color=#f8f8f2>;</color>

                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#66d9ef>instanceof</color> <color=#66d9ef>double</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>doubles</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Unsupported type for TIFF FLOAT: "</color> <color=#f92672>+</color> <color=#f8f8f2>value</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>());</color>
                    <color=#f8f8f2>}</color>

                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>writeDoubles</color><color=#f8f8f2>(</color><color=#f8f8f2>doubles</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>doubles</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>

                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>

                <color=#66d9ef>default</color><color=#f8f8f2>:</color>
                    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Unsupported TIFF type: "</color> <color=#f92672>+</color> <color=#f8f8f2>type</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BYTE</color><color=#f8f8f2>:</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_SBYTE</color><color=#f8f8f2>:</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_UNDEFINED</color><color=#f8f8f2>:</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>writeByte</color><color=#f8f8f2>(((</color><color=#f8f8f2>Number</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>).</color><color=#a6e22e>intValue</color><color=#f8f8f2>());</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_ASCII</color><color=#f8f8f2>:</color>
                    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>).</color><color=#a6e22e>getBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>StandardCharsets</color><color=#f8f8f2>.</color><color=#a6e22e>UTF_8</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_SHORT</color><color=#f8f8f2>:</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_SSHORT</color><color=#f8f8f2>:</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>writeShort</color><color=#f8f8f2>(((</color><color=#f8f8f2>Number</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>).</color><color=#a6e22e>intValue</color><color=#f8f8f2>());</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_LONG</color><color=#f8f8f2>:</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_SLONG</color><color=#f8f8f2>:</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>writeInt</color><color=#f8f8f2>(((</color><color=#f8f8f2>Number</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>).</color><color=#a6e22e>intValue</color><color=#f8f8f2>());</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_RATIONAL</color><color=#f8f8f2>:</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_SRATIONAL</color><color=#f8f8f2>:</color>
                    <color=#f8f8f2>Rational</color> <color=#f8f8f2>rational</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Rational</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>writeInt</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>rational</color><color=#f8f8f2>.</color><color=#a6e22e>numerator</color><color=#f8f8f2>());</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>writeInt</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>rational</color><color=#f8f8f2>.</color><color=#a6e22e>denominator</color><color=#f8f8f2>());</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_FLOAT</color><color=#f8f8f2>:</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>writeFloat</color><color=#f8f8f2>(((</color><color=#f8f8f2>Number</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>).</color><color=#a6e22e>floatValue</color><color=#f8f8f2>());</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>TIFF</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_DOUBLE</color><color=#f8f8f2>:</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>writeDouble</color><color=#f8f8f2>(((</color><color=#f8f8f2>Number</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>).</color><color=#a6e22e>doubleValue</color><color=#f8f8f2>());</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>

                <color=#66d9ef>default</color><color=#f8f8f2>:</color>
                    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Unsupported TIFF type: "</color> <color=#f92672>+</color> <color=#f8f8f2>type</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>writeValueAt</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>dataOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>value</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>short</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ImageOutputStream</color> <color=#f8f8f2>stream</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>writeInt</color><color=#f8f8f2>(</color><color=#f8f8f2>assertIntegerOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>dataOffset</color><color=#f8f8f2>));</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>position</color> <color=#f92672>=</color> <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>getStreamPosition</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>dataOffset</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>writeValueInline</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>stream</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>seek</color><color=#f8f8f2>(</color><color=#f8f8f2>position</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>assertIntegerOffset</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IIOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>offset</color> <color=#f92672>></color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MIN_VALUE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IIOException</color><color=#f8f8f2>(</color><color=#e6db74>"Integer overflow for TIFF stream"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>