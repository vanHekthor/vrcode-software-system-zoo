<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2015, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.imageio.color</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Fast YCbCr to RGB conversion.</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author Original code by Werner Randelshofer (used by permission).</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>YCbCrConverter</color> <color=#f8f8f2>{</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Define tables for YCC->RGB color space conversion.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>SCALEBITS</color> <color=#f92672>=</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAXJSAMPLE</color> <color=#f92672>=</color> <color=#ae81ff>255</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>CENTERJSAMPLE</color> <color=#f92672>=</color> <color=#ae81ff>128</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>ONE_HALF</color> <color=#f92672>=</color> <color=#ae81ff>1</color> <color=#f92672><<</color> <color=#f8f8f2>(</color><color=#f8f8f2>SCALEBITS</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>Cr_R_LUT</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>MAXJSAMPLE</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>Cb_B_LUT</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>MAXJSAMPLE</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>Cr_G_LUT</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>MAXJSAMPLE</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>Cb_G_LUT</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>MAXJSAMPLE</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Initializes tables for YCC->RGB color space conversion.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>buildYCCtoRGBtable</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ColorSpaces</color><color=#f8f8f2>.</color><color=#a6e22e>DEBUG</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Building YCC conversion table"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>CENTERJSAMPLE</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><=</color> <color=#f8f8f2>MAXJSAMPLE</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>,</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// i is the actual input pixel value, in the range 0..MAXJSAMPLE</color>
            <color=#75715e>// The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE</color>
            <color=#75715e>// Cr=>R value is nearest int to 1.40200 * x</color>
            <color=#f8f8f2>Cr_R_LUT</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#ae81ff>1.40200</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>1</color> <color=#f92672><<</color> <color=#f8f8f2>SCALEBITS</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>ONE_HALF</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#f8f8f2>SCALEBITS</color><color=#f8f8f2>;</color>
            <color=#75715e>// Cb=>B value is nearest int to 1.77200 * x</color>
            <color=#f8f8f2>Cb_B_LUT</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#ae81ff>1.77200</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>1</color> <color=#f92672><<</color> <color=#f8f8f2>SCALEBITS</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>ONE_HALF</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#f8f8f2>SCALEBITS</color><color=#f8f8f2>;</color>
            <color=#75715e>// Cr=>G value is scaled-up -0.71414 * x</color>
            <color=#f8f8f2>Cr_G_LUT</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>0.71414</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>1</color> <color=#f92672><<</color> <color=#f8f8f2>SCALEBITS</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
            <color=#75715e>// Cb=>G value is scaled-up -0.34414 * x</color>
            <color=#75715e>// We also add in ONE_HALF so that need not do it in inner loop</color>
            <color=#f8f8f2>Cb_G_LUT</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#ae81ff>0.34414</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>1</color> <color=#f92672><<</color> <color=#f8f8f2>SCALEBITS</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>ONE_HALF</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buildYCCtoRGBtable</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>convertYCbCr2RGB</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>yCbCr</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>rgb</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color><color=#f92672>[]</color> <color=#f8f8f2>coefficients</color><color=#f8f8f2>,</color> <color=#66d9ef>double</color><color=#f92672>[]</color> <color=#f8f8f2>referenceBW</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>double</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>
        <color=#66d9ef>double</color> <color=#f8f8f2>cb</color><color=#f8f8f2>;</color>
        <color=#66d9ef>double</color> <color=#f8f8f2>cr</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>referenceBW</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Default case</color>
            <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>yCbCr</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>cb</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>yCbCr</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#ae81ff>128</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>cr</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>yCbCr</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#ae81ff>128</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Custom values</color>
            <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>yCbCr</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>referenceBW</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#ae81ff>255.0</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#f8f8f2>referenceBW</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>-</color> <color=#f8f8f2>referenceBW</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>cb</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>yCbCr</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>referenceBW</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#ae81ff>127.0</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#f8f8f2>referenceBW</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>-</color> <color=#f8f8f2>referenceBW</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>cr</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>yCbCr</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>referenceBW</color><color=#f92672>[</color><color=#ae81ff>4</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#ae81ff>127.0</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#f8f8f2>referenceBW</color><color=#f92672>[</color><color=#ae81ff>5</color><color=#f92672>]</color> <color=#f92672>-</color> <color=#f8f8f2>referenceBW</color><color=#f92672>[</color><color=#ae81ff>4</color><color=#f92672>]</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>double</color> <color=#f8f8f2>lumaRed</color> <color=#f92672>=</color> <color=#f8f8f2>coefficients</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>double</color> <color=#f8f8f2>lumaGreen</color> <color=#f92672>=</color> <color=#f8f8f2>coefficients</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>double</color> <color=#f8f8f2>lumaBlue</color> <color=#f92672>=</color> <color=#f8f8f2>coefficients</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>red</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>round</color><color=#f8f8f2>(</color><color=#f8f8f2>cr</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>2.0</color> <color=#f92672>-</color> <color=#ae81ff>2.0</color> <color=#f92672>*</color> <color=#f8f8f2>lumaRed</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>y</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>blue</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>round</color><color=#f8f8f2>(</color><color=#f8f8f2>cb</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>2.0</color> <color=#f92672>-</color> <color=#ae81ff>2.0</color> <color=#f92672>*</color> <color=#f8f8f2>lumaBlue</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>y</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>green</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>round</color><color=#f8f8f2>((</color><color=#f8f8f2>y</color> <color=#f92672>-</color> <color=#f8f8f2>lumaRed</color> <color=#f92672>*</color> <color=#f8f8f2>red</color> <color=#f92672>-</color> <color=#f8f8f2>lumaBlue</color> <color=#f92672>*</color> <color=#f8f8f2>blue</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>lumaGreen</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>rgb</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>clamp</color><color=#f8f8f2>(</color><color=#f8f8f2>red</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>rgb</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>clamp</color><color=#f8f8f2>(</color><color=#f8f8f2>blue</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>rgb</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>clamp</color><color=#f8f8f2>(</color><color=#f8f8f2>green</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>convertYCbCr2RGB</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>yCbCr</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>rgb</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#f8f8f2>yCbCr</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>cr</color> <color=#f92672>=</color> <color=#f8f8f2>yCbCr</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>cb</color> <color=#f92672>=</color> <color=#f8f8f2>yCbCr</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>rgb</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>clamp</color><color=#f8f8f2>(</color><color=#f8f8f2>y</color> <color=#f92672>+</color> <color=#f8f8f2>Cr_R_LUT</color><color=#f92672>[</color><color=#f8f8f2>cr</color><color=#f92672>]</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>rgb</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>clamp</color><color=#f8f8f2>(</color><color=#f8f8f2>y</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>Cb_G_LUT</color><color=#f92672>[</color><color=#f8f8f2>cb</color><color=#f92672>]</color> <color=#f92672>+</color> <color=#f8f8f2>Cr_G_LUT</color><color=#f92672>[</color><color=#f8f8f2>cr</color><color=#f92672>]</color> <color=#f92672>>></color> <color=#f8f8f2>SCALEBITS</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>rgb</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>clamp</color><color=#f8f8f2>(</color><color=#f8f8f2>y</color> <color=#f92672>+</color> <color=#f8f8f2>Cb_B_LUT</color><color=#f92672>[</color><color=#f8f8f2>cb</color><color=#f92672>]</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>byte</color> <color=#a6e22e>clamp</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#ae81ff>255</color><color=#f8f8f2>,</color> <color=#f8f8f2>val</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>