<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2009, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *     * Redistributions of source code must retain the above copyright</color>
<color=#75715e> *       notice, this list of conditions and the following disclaimer.</color>
<color=#75715e> *     * Redistributions in binary form must reproduce the above copyright</color>
<color=#75715e> *       notice, this list of conditions and the following disclaimer in the</color>
<color=#75715e> *       documentation and/or other materials provided with the distribution.</color>
<color=#75715e> *     * Neither the name "TwelveMonkeys" nor the</color>
<color=#75715e> *       names of its contributors may be used to endorse or promote products</color>
<color=#75715e> *       derived from this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</color>
<color=#75715e> * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</color>
<color=#75715e> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</color>
<color=#75715e> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR</color>
<color=#75715e> * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,</color>
<color=#75715e> * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,</color>
<color=#75715e> * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR</color>
<color=#75715e> * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF</color>
<color=#75715e> * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING</color>
<color=#75715e> * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS</color>
<color=#75715e> * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.imageio.metadata.xmp</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.imageio.stream.BufferedImageInputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.imageio.util.IIOUtil</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.ImageIO</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.stream.ImageInputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.charset.Charset</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * XMPScanner</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haraldk$</color>
<color=#75715e> * @version $Id: XMPScanner.java,v 1.0 Nov 11, 2009 4:49:00 PM haraldk Exp$</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>XMPScanner</color> <color=#f8f8f2>{</color>
    <color=#75715e>/**</color>
<color=#75715e>     * {@code &lt;?xpacket begin=}</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * <ul></color>
<color=#75715e>     * <li></color>
<color=#75715e>     * 8-bit (UTF-8):</color>
<color=#75715e>     * 0x3C 0x3F 0x78 0x70 0x61 0x63 0x6B 0x65 0x74 0x20</color>
<color=#75715e>     * 0x62 0x65 0x67 0x69 0x6E 0x3D</color>
<color=#75715e>     * </li></color>
<color=#75715e>     * <li>16-bit encoding (UCS-2, UTF-16): (either big- or little-endian order)</color>
<color=#75715e>     * 0x3C 0x00 0x3F 0x00 0x78 0x00 0x70 0x00 0x61 0x00</color>
<color=#75715e>     * 0x63 0x00 0x6B 0x00 0x65 0x00 0x74 0x00 0x20 0x00 0x62 0x00</color>
<color=#75715e>     * 0x65 0x00 0x67 0x00 0x69 0x00 0x6E 0x00 0x3D [0x00]</color>
<color=#75715e>     * </li></color>
<color=#75715e>     * <li>32-bit encoding (UCS-4):</color>
<color=#75715e>     * As 16 bit UCS2, with three 0x00 instead of one.</li></color>
<color=#75715e>     * </ul></color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>XMP_PACKET_BEGIN</color> <color=#f92672>=</color> <color=#f8f8f2>{</color>
            <color=#ae81ff>0x3C</color><color=#f8f8f2>,</color> <color=#ae81ff>0x3F</color><color=#f8f8f2>,</color> <color=#ae81ff>0x78</color><color=#f8f8f2>,</color> <color=#ae81ff>0x70</color><color=#f8f8f2>,</color> <color=#ae81ff>0x61</color><color=#f8f8f2>,</color> <color=#ae81ff>0x63</color><color=#f8f8f2>,</color> <color=#ae81ff>0x6B</color><color=#f8f8f2>,</color> <color=#ae81ff>0x65</color><color=#f8f8f2>,</color> <color=#ae81ff>0x74</color><color=#f8f8f2>,</color> <color=#ae81ff>0x20</color><color=#f8f8f2>,</color>
            <color=#ae81ff>0x62</color><color=#f8f8f2>,</color> <color=#ae81ff>0x65</color><color=#f8f8f2>,</color> <color=#ae81ff>0x67</color><color=#f8f8f2>,</color> <color=#ae81ff>0x69</color><color=#f8f8f2>,</color> <color=#ae81ff>0x6E</color><color=#f8f8f2>,</color> <color=#ae81ff>0x3D</color>
    <color=#f8f8f2>};</color>

    <color=#75715e>/**</color>
<color=#75715e>     * {@code &lt;?xpacket end=}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>XMP_PACKET_END</color> <color=#f92672>=</color> <color=#f8f8f2>{</color>
            <color=#ae81ff>0x3C</color><color=#f8f8f2>,</color> <color=#ae81ff>0x3F</color><color=#f8f8f2>,</color> <color=#ae81ff>0x78</color><color=#f8f8f2>,</color> <color=#ae81ff>0x70</color><color=#f8f8f2>,</color> <color=#ae81ff>0x61</color><color=#f8f8f2>,</color> <color=#ae81ff>0x63</color><color=#f8f8f2>,</color> <color=#ae81ff>0x6B</color><color=#f8f8f2>,</color> <color=#ae81ff>0x65</color><color=#f8f8f2>,</color> <color=#ae81ff>0x74</color><color=#f8f8f2>,</color> <color=#ae81ff>0x20</color><color=#f8f8f2>,</color>
            <color=#ae81ff>0x65</color><color=#f8f8f2>,</color> <color=#ae81ff>0x6E</color><color=#f8f8f2>,</color> <color=#ae81ff>0x64</color><color=#f8f8f2>,</color> <color=#ae81ff>0x3D</color>
    <color=#f8f8f2>};</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Scans the given input for an XML metadata packet.</color>
<color=#75715e>     * The scanning process involves reading every byte in the file, while searching for an XMP packet.</color>
<color=#75715e>     * This process is very inefficient, compared to reading a known file format.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * <em>NOTE: The XMP Specification says this method of reading an XMP packet</color>
<color=#75715e>     * should be considered a last resort.</em><br/></color>
<color=#75715e>     * This is because files may contain multiple XMP packets, some which may be related to embedded resources,</color>
<color=#75715e>     * some which may be obsolete (or even incomplete).</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pInput the input to scan. The input may be an {@link ImageInputStream} or</color>
<color=#75715e>     *               any object that can be passed to {@link ImageIO#createImageInputStream(Object)}.</color>
<color=#75715e>     *               Typically this may be a {@link File}, {@link InputStream} or {@link RandomAccessFile}.</color>
<color=#75715e>     * @return a character Reader</color>
<color=#75715e>     * @throws java.nio.charset.UnsupportedCharsetException if the encoding specified within the BOM is not supported</color>
<color=#75715e>     *                                                      by the JRE.</color>
<color=#75715e>     * @throws IOException                                  if an I/O exception occurs reading from {@code pInput}.</color>
<color=#75715e>     * @see ImageIO#createImageInputStream(Object)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>static</color> <color=#66d9ef>public</color> <color=#f8f8f2>Reader</color> <color=#a6e22e>scanForXMPPacket</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>stream</color> <color=#f92672>=</color> <color=#f8f8f2>pInput</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>ImageInputStream</color> <color=#f92672>?</color> <color=#f8f8f2>(</color><color=#f8f8f2>ImageInputStream</color><color=#f8f8f2>)</color> <color=#f8f8f2>pInput</color> <color=#f8f8f2>:</color> <color=#f8f8f2>ImageIO</color><color=#f8f8f2>.</color><color=#a6e22e>createImageInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>pInput</color><color=#f8f8f2>);</color>

        <color=#75715e>// TODO: Consider if BufferedIIS is a good idea</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>stream</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>BufferedImageInputStream</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>stream</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImageInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>stream</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// TODO: Might be more than one XMP block per file (it's possible to re-start for now)..</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>pos</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>pos</color> <color=#f92672>=</color> <color=#f8f8f2>scanForSequence</color><color=#f8f8f2>(</color><color=#f8f8f2>stream</color><color=#f8f8f2>,</color> <color=#f8f8f2>XMP_PACKET_BEGIN</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pos</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Skip ' OR " (plus possible nulls for 16/32 bit)</color>
            <color=#66d9ef>byte</color> <color=#f8f8f2>quote</color> <color=#f92672>=</color> <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>readByte</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>quote</color> <color=#f92672>==</color> <color=#e6db74>'\''</color> <color=#f92672>||</color> <color=#f8f8f2>quote</color> <color=#f92672>==</color> <color=#e6db74>'"'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>Charset</color> <color=#f8f8f2>cs</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

                <color=#75715e>// Read BOM</color>
                <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bom</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>4</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>readFully</color><color=#f8f8f2>(</color><color=#f8f8f2>bom</color><color=#f8f8f2>);</color>

                <color=#75715e>// NOTE: Empty string should be treated as UTF-8 for backwards compatibility</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bom</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0xEF</color> <color=#f92672>&&</color> <color=#f8f8f2>bom</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0xBB</color> <color=#f92672>&&</color> <color=#f8f8f2>bom</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0xBF</color> <color=#f92672>&&</color> <color=#f8f8f2>bom</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>quote</color> <color=#f92672>||</color>
                        <color=#f8f8f2>bom</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>quote</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// UTF-8</color>
                    <color=#f8f8f2>cs</color> <color=#f92672>=</color> <color=#f8f8f2>Charset</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#e6db74>"UTF-8"</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bom</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0xFE</color> <color=#f92672>&&</color> <color=#f8f8f2>bom</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0xFF</color> <color=#f92672>&&</color> <color=#f8f8f2>bom</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#ae81ff>0x00</color> <color=#f92672>&&</color> <color=#f8f8f2>bom</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>quote</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// UTF-16 BIG endian</color>
                    <color=#f8f8f2>cs</color> <color=#f92672>=</color> <color=#f8f8f2>Charset</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#e6db74>"UTF-16BE"</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bom</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#ae81ff>0x00</color> <color=#f92672>&&</color> <color=#f8f8f2>bom</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0xFF</color> <color=#f92672>&&</color> <color=#f8f8f2>bom</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0xFE</color> <color=#f92672>&&</color> <color=#f8f8f2>bom</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>quote</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>skipBytes</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>);</color> <color=#75715e>// Alignment</color>

                    <color=#75715e>// UTF-16 little endian</color>
                    <color=#f8f8f2>cs</color> <color=#f92672>=</color> <color=#f8f8f2>Charset</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#e6db74>"UTF-16LE"</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bom</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#ae81ff>0x00</color> <color=#f92672>&&</color> <color=#f8f8f2>bom</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#ae81ff>0x00</color> <color=#f92672>&&</color> <color=#f8f8f2>bom</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0xFE</color> <color=#f92672>&&</color> <color=#f8f8f2>bom</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// NOTE: 32-bit character set not supported by default</color>
                    <color=#75715e>// UTF 32 BIG endian</color>
                    <color=#f8f8f2>cs</color> <color=#f92672>=</color> <color=#f8f8f2>Charset</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#e6db74>"UTF-32BE"</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bom</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#ae81ff>0x00</color> <color=#f92672>&&</color> <color=#f8f8f2>bom</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#ae81ff>0x00</color> <color=#f92672>&&</color> <color=#f8f8f2>bom</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#ae81ff>0x00</color> <color=#f92672>&&</color> <color=#f8f8f2>bom</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0xFF</color> <color=#f92672>&&</color> <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0xFE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>skipBytes</color><color=#f8f8f2>(</color><color=#ae81ff>2</color><color=#f8f8f2>);</color> <color=#75715e>// Alignment</color>
                    <color=#75715e>// NOTE: 32-bit character set not supported by default</color>
                    <color=#75715e>// UTF 32 little endian</color>
                    <color=#f8f8f2>cs</color> <color=#f92672>=</color> <color=#f8f8f2>Charset</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#e6db74>"UTF-32LE"</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cs</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// Read all bytes until <?xpacket end= up-front or filter stream</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>mark</color><color=#f8f8f2>();</color>
                    <color=#66d9ef>long</color> <color=#f8f8f2>end</color> <color=#f92672>=</color> <color=#f8f8f2>scanForSequence</color><color=#f8f8f2>(</color><color=#f8f8f2>stream</color><color=#f8f8f2>,</color> <color=#f8f8f2>XMP_PACKET_END</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>

                    <color=#66d9ef>long</color> <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>end</color> <color=#f92672>-</color> <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>getStreamPosition</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>Reader</color> <color=#f8f8f2>reader</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>InputStreamReader</color><color=#f8f8f2>(</color><color=#f8f8f2>IIOUtil</color><color=#f8f8f2>.</color><color=#a6e22e>createStreamAdapter</color><color=#f8f8f2>(</color><color=#f8f8f2>stream</color><color=#f8f8f2>,</color> <color=#f8f8f2>length</color><color=#f8f8f2>),</color> <color=#f8f8f2>cs</color><color=#f8f8f2>);</color>

                    <color=#75715e>// Skip until ?></color>
                    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#e6db74>'>'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>}</color>

                    <color=#75715e>// Return reader?</color>
                    <color=#75715e>// How to decide between w or r?!</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>reader</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Scans for a given ASCII sequence.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pStream   the stream to scan</color>
<color=#75715e>     * @param pSequence the byte sequence to search for</color>
<color=#75715e>     * @return the start position of the given sequence.</color>
<color=#75715e>     * @throws IOException if an I/O exception occurs during scanning</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>scanForSequence</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>pStream</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pSequence</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>start</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1l</color><color=#f8f8f2>;</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>nullBytes</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>read</color><color=#f8f8f2>;</color> <color=#f8f8f2>(</color><color=#f8f8f2>read</color> <color=#f92672>=</color> <color=#f8f8f2>pStream</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>())</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pSequence</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>read</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// If this is the first byte in the sequence, store position</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>start</color> <color=#f92672>==</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>start</color> <color=#f92672>=</color> <color=#f8f8f2>pStream</color><color=#f8f8f2>.</color><color=#a6e22e>getStreamPosition</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#75715e>// Inside the sequence, there might be 1 or 3 null bytes, depending on 16/32 byte encoding</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nullBytes</color> <color=#f92672>==</color> <color=#ae81ff>1</color> <color=#f92672>||</color> <color=#f8f8f2>nullBytes</color> <color=#f92672>==</color> <color=#ae81ff>3</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>pStream</color><color=#f8f8f2>.</color><color=#a6e22e>skipBytes</color><color=#f8f8f2>(</color><color=#f8f8f2>nullBytes</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>index</color><color=#f92672>++</color><color=#f8f8f2>;</color>

                <color=#75715e>// If we found the entire sequence, we're done, return start position</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>==</color> <color=#f8f8f2>pSequence</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>start</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>==</color> <color=#ae81ff>1</color> <color=#f92672>&&</color> <color=#f8f8f2>read</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>nullBytes</color> <color=#f92672><</color> <color=#ae81ff>3</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Skip 1 or 3 null bytes for 16/32 bit encoding</color>
                <color=#f8f8f2>nullBytes</color><color=#f92672>++</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Start over</color>
                <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>start</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>nullBytes</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1l</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>main</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>pArgs</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ImageInputStream</color> <color=#f8f8f2>stream</color> <color=#f92672>=</color> <color=#f8f8f2>ImageIO</color><color=#f8f8f2>.</color><color=#a6e22e>createImageInputStream</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>));</color>

        <color=#f8f8f2>Reader</color> <color=#f8f8f2>xmp</color><color=#f8f8f2>;</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>((</color><color=#f8f8f2>xmp</color> <color=#f92672>=</color> <color=#f8f8f2>scanForXMPPacket</color><color=#f8f8f2>(</color><color=#f8f8f2>stream</color><color=#f8f8f2>))</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>BufferedReader</color> <color=#f8f8f2>reader</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedReader</color><color=#f8f8f2>(</color><color=#f8f8f2>xmp</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>line</color><color=#f8f8f2>;</color>

            <color=#66d9ef>while</color> <color=#f8f8f2>((</color><color=#f8f8f2>line</color> <color=#f92672>=</color> <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>readLine</color><color=#f8f8f2>())</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>line</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>stream</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>