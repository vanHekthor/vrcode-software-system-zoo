<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.xml</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.lang.StringUtil</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>org.w3c.dom.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>org.xml.sax.SAXException</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>javax.xml.parsers.DocumentBuilder</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.xml.parsers.DocumentBuilderFactory</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.xml.parsers.ParserConfigurationException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.charset.Charset</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Date</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * XMLSerializer</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haku $</color>
<color=#75715e> * @version $Id:</color>
<color=#75715e> * //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/xml/XMLSerializer.java#1</color>
<color=#75715e> * $</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>XMLSerializer</color> <color=#f8f8f2>{</color>
    <color=#75715e>// TODO: Replace with DOMSerializer? Test performance, pretty printing etc...</color>
    <color=#75715e>// Main problem: Sun's Java 5 does not have LS 3.0 support</color>
    <color=#75715e>// This class has no dependencies, which probably makes it more useful</color>

    <color=#75715e>// TODO: Don't insert initial and ending line-break for text-nodes</color>
    <color=#75715e>// TODO: Support not inserting line-breaks, to preserve space</color>
    <color=#75715e>// TODO: Support line breaking (at configurable width)</color>
    <color=#75715e>// TODO: Support standalone?</color>
    <color=#75715e>// TODO: Support more than version 1.0?</color>
    <color=#75715e>// TODO: Consider using IOException to communicate trouble, rather than RTE,</color>
    <color=#75715e>// to be more compatible...</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>OutputStream</color> <color=#f8f8f2>output</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Charset</color> <color=#f8f8f2>encoding</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>SerializationContext</color> <color=#f8f8f2>context</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>XMLSerializer</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>OutputStream</color> <color=#f8f8f2>pOutput</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pEncoding</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>output</color> <color=#f92672>=</color> <color=#f8f8f2>pOutput</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>encoding</color> <color=#f92672>=</color> <color=#f8f8f2>Charset</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#f8f8f2>pEncoding</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>context</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>SerializationContext</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>XMLSerializer</color> <color=#a6e22e>indentation</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pIndent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// TODO: Verify that indent value is only whitespace?</color>
        <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>indent</color> <color=#f92672>=</color> <color=#f8f8f2>pIndent</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>pIndent</color> <color=#f8f8f2>:</color> <color=#e6db74>"\t"</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>XMLSerializer</color> <color=#a6e22e>stripComments</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>pStrip</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>stripComments</color> <color=#f92672>=</color> <color=#f8f8f2>pStrip</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Serializes the entire document, along with the XML declaration ({@code &lt;?xml version="1.0"</color>
<color=#75715e>     * encoding="..."?&gt;}).</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pDocument the document to serialize.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>serialize</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Document</color> <color=#f8f8f2>pDocument</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>serialize</color><color=#f8f8f2>(</color><color=#f8f8f2>pDocument</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Serializes the entire sub tree starting at {@code pRootNode}, along with an optional XML</color>
<color=#75715e>     * declaration ({@code &lt;?xml version="1.0" encoding="..."?&gt;}).</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pRootNode            the root node to serialize.</color>
<color=#75715e>     * @param pWriteXMLDeclaration {@code true} if the XML declaration should be included, otherwise</color>
<color=#75715e>     *                             {@code false}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>serialize</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Node</color> <color=#f8f8f2>pRootNode</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pWriteXMLDeclaration</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>PrintWriter</color> <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>PrintWriter</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>OutputStreamWriter</color><color=#f8f8f2>(</color><color=#f8f8f2>output</color><color=#f8f8f2>,</color> <color=#f8f8f2>encoding</color><color=#f8f8f2>));</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pWriteXMLDeclaration</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>writeXMLDeclaration</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>writeXML</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#f8f8f2>pRootNode</color><color=#f8f8f2>,</color> <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>copy</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>flush</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>writeXMLDeclaration</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>PrintWriter</color> <color=#f8f8f2>pOut</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>"<?xml version=\"1.0\" encoding=\""</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#f8f8f2>encoding</color><color=#f8f8f2>.</color><color=#a6e22e>name</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"\"?>"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>writeXML</color><color=#f8f8f2>(</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>PrintWriter</color> <color=#f8f8f2>pOut</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Node</color> <color=#f8f8f2>pDocument</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>SerializationContext</color> <color=#f8f8f2>pContext</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>writeNodeRecursive</color><color=#f8f8f2>(</color><color=#f8f8f2>pOut</color><color=#f8f8f2>,</color> <color=#f8f8f2>pDocument</color><color=#f8f8f2>,</color> <color=#f8f8f2>pContext</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>writeNodeRecursive</color><color=#f8f8f2>(</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>PrintWriter</color> <color=#f8f8f2>pOut</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Node</color> <color=#f8f8f2>pNode</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>SerializationContext</color> <color=#f8f8f2>pContext</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pNode</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeType</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>Node</color><color=#f8f8f2>.</color><color=#a6e22e>TEXT_NODE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>indentToLevel</color><color=#f8f8f2>(</color><color=#f8f8f2>pOut</color><color=#f8f8f2>,</color> <color=#f8f8f2>pContext</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>pNode</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeType</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>Node</color><color=#f8f8f2>.</color><color=#a6e22e>DOCUMENT_NODE</color><color=#f8f8f2>:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>Node</color><color=#f8f8f2>.</color><color=#a6e22e>DOCUMENT_FRAGMENT_NODE</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>writeDocument</color><color=#f8f8f2>(</color><color=#f8f8f2>pOut</color><color=#f8f8f2>,</color> <color=#f8f8f2>pNode</color><color=#f8f8f2>,</color> <color=#f8f8f2>pContext</color><color=#f8f8f2>);</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>Node</color><color=#f8f8f2>.</color><color=#a6e22e>DOCUMENT_TYPE_NODE</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>writeDoctype</color><color=#f8f8f2>(</color><color=#f8f8f2>pOut</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>DocumentType</color><color=#f8f8f2>)</color> <color=#f8f8f2>pNode</color><color=#f8f8f2>);</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>Node</color><color=#f8f8f2>.</color><color=#a6e22e>ELEMENT_NODE</color><color=#f8f8f2>:</color>
                <color=#66d9ef>boolean</color> <color=#f8f8f2>preserveSpace</color> <color=#f92672>=</color> <color=#f8f8f2>pContext</color><color=#f8f8f2>.</color><color=#a6e22e>preserveSpace</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>updatePreserveSpace</color><color=#f8f8f2>(</color><color=#f8f8f2>pNode</color><color=#f8f8f2>,</color> <color=#f8f8f2>pContext</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>writeElement</color><color=#f8f8f2>(</color><color=#f8f8f2>pOut</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>Element</color><color=#f8f8f2>)</color> <color=#f8f8f2>pNode</color><color=#f8f8f2>,</color> <color=#f8f8f2>pContext</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>pContext</color><color=#f8f8f2>.</color><color=#a6e22e>preserveSpace</color> <color=#f92672>=</color> <color=#f8f8f2>preserveSpace</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>Node</color><color=#f8f8f2>.</color><color=#a6e22e>CDATA_SECTION_NODE</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>writeCData</color><color=#f8f8f2>(</color><color=#f8f8f2>pOut</color><color=#f8f8f2>,</color> <color=#f8f8f2>pNode</color><color=#f8f8f2>);</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>Node</color><color=#f8f8f2>.</color><color=#a6e22e>TEXT_NODE</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>writeText</color><color=#f8f8f2>(</color><color=#f8f8f2>pOut</color><color=#f8f8f2>,</color> <color=#f8f8f2>pNode</color><color=#f8f8f2>,</color> <color=#f8f8f2>pContext</color><color=#f8f8f2>);</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>Node</color><color=#f8f8f2>.</color><color=#a6e22e>COMMENT_NODE</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>writeComment</color><color=#f8f8f2>(</color><color=#f8f8f2>pOut</color><color=#f8f8f2>,</color> <color=#f8f8f2>pNode</color><color=#f8f8f2>,</color> <color=#f8f8f2>pContext</color><color=#f8f8f2>);</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>Node</color><color=#f8f8f2>.</color><color=#a6e22e>PROCESSING_INSTRUCTION_NODE</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>writeProcessingInstruction</color><color=#f8f8f2>(</color><color=#f8f8f2>pOut</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>ProcessingInstruction</color><color=#f8f8f2>)</color> <color=#f8f8f2>pNode</color><color=#f8f8f2>);</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>Node</color><color=#f8f8f2>.</color><color=#a6e22e>ATTRIBUTE_NODE</color><color=#f8f8f2>:</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                        <color=#e6db74>"Malformed input Document: Attribute nodes should only occur inside Element nodes"</color><color=#f8f8f2>);</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>Node</color><color=#f8f8f2>.</color><color=#a6e22e>ENTITY_NODE</color><color=#f8f8f2>:</color>
                <color=#75715e>// '<!ENTITY ' + getNodeName + ... + '>'</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>Node</color><color=#f8f8f2>.</color><color=#a6e22e>ENTITY_REFERENCE_NODE</color><color=#f8f8f2>:</color>
                <color=#75715e>// ( '&' | '%' ) + getNodeName + ';'</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>Node</color><color=#f8f8f2>.</color><color=#a6e22e>NOTATION_NODE</color><color=#f8f8f2>:</color>
                <color=#75715e>// '<!NOTATION ' + getNodeName + ( ExternalID | PublicID ) + '>'</color>
            <color=#66d9ef>default</color><color=#f8f8f2>:</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>InternalError</color><color=#f8f8f2>(</color>
                        <color=#e6db74>"Lazy programmer never implemented serialization of "</color> <color=#f92672>+</color> <color=#f8f8f2>pNode</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>writeProcessingInstruction</color><color=#f8f8f2>(</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>PrintWriter</color> <color=#f8f8f2>pOut</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ProcessingInstruction</color> <color=#f8f8f2>pNode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>"\n<?"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#f8f8f2>pNode</color><color=#f8f8f2>.</color><color=#a6e22e>getTarget</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>pNode</color><color=#f8f8f2>.</color><color=#a6e22e>getData</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>" "</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"?>"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>writeText</color><color=#f8f8f2>(</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>PrintWriter</color> <color=#f8f8f2>pOut</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Node</color> <color=#f8f8f2>pNode</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>SerializationContext</color> <color=#f8f8f2>pContext</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// TODO: Is this really as specified?</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>pNode</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeValue</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pContext</color><color=#f8f8f2>.</color><color=#a6e22e>preserveSpace</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#f8f8f2>maybeEscapeElementValue</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>escapedValue</color> <color=#f92672>=</color> <color=#f8f8f2>maybeEscapeElementValue</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>.</color><color=#a6e22e>trim</color><color=#f8f8f2>());</color>
            <color=#75715e>// if (escapedValue.length() + (pContext.level * pContext.indent.length()) > 78) {</color>
            <color=#f8f8f2>indentToLevel</color><color=#f8f8f2>(</color><color=#f8f8f2>pOut</color><color=#f8f8f2>,</color> <color=#f8f8f2>pContext</color><color=#f8f8f2>);</color>
            <color=#75715e>// }</color>
            <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>escapedValue</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>writeCData</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>PrintWriter</color> <color=#f8f8f2>pOut</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Node</color> <color=#f8f8f2>pNode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>"<![CDATA["</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#f8f8f2>validateCDataValue</color><color=#f8f8f2>(</color><color=#f8f8f2>pNode</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeValue</color><color=#f8f8f2>()));</color>
        <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"]]>"</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>updatePreserveSpace</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Node</color> <color=#f8f8f2>pNode</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>SerializationContext</color> <color=#f8f8f2>pContext</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>NamedNodeMap</color> <color=#f8f8f2>attributes</color> <color=#f92672>=</color> <color=#f8f8f2>pNode</color><color=#f8f8f2>.</color><color=#a6e22e>getAttributes</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>attributes</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Node</color> <color=#f8f8f2>space</color> <color=#f92672>=</color> <color=#f8f8f2>attributes</color><color=#f8f8f2>.</color><color=#a6e22e>getNamedItem</color><color=#f8f8f2>(</color><color=#e6db74>"xml:space"</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>space</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"preserve"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>space</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeValue</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>pContext</color><color=#f8f8f2>.</color><color=#a6e22e>preserveSpace</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"default"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>space</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeValue</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>pContext</color><color=#f8f8f2>.</color><color=#a6e22e>preserveSpace</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#75715e>// No other values are allowed per spec, ignore</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>indentToLevel</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>PrintWriter</color> <color=#f8f8f2>pOut</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>SerializationContext</color> <color=#f8f8f2>pContext</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>pContext</color><color=#f8f8f2>.</color><color=#a6e22e>level</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#f8f8f2>pContext</color><color=#f8f8f2>.</color><color=#a6e22e>indent</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>writeComment</color><color=#f8f8f2>(</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>PrintWriter</color> <color=#f8f8f2>pOut</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Node</color> <color=#f8f8f2>pNode</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>SerializationContext</color> <color=#f8f8f2>pContext</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pContext</color><color=#f8f8f2>.</color><color=#a6e22e>stripComments</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>String</color> <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>pNode</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeValue</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>validateCommentValue</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>.</color><color=#a6e22e>startsWith</color><color=#f8f8f2>(</color><color=#e6db74>" "</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>"<!--"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>"<!-- "</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>.</color><color=#a6e22e>endsWith</color><color=#f8f8f2>(</color><color=#e6db74>" "</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"-->"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>" -->"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns an escaped version of the input string. The string is guaranteed to not contain illegal</color>
<color=#75715e>     * XML characters ({@code &<>}). If no escaping is needed, the input string is returned as is.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pValue the input string that might need escaping.</color>
<color=#75715e>     * @return an escaped version of the input string.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>maybeEscapeElementValue</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>startEscape</color> <color=#f92672>=</color> <color=#f8f8f2>needsEscapeElement</color><color=#f8f8f2>(</color><color=#f8f8f2>pValue</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>startEscape</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// If no escaping is needed, simply return original</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Otherwise, start replacing</color>
            <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>builder</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>(</color><color=#f8f8f2>pValue</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>startEscape</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>builder</color><color=#f8f8f2>.</color><color=#a6e22e>ensureCapacity</color><color=#f8f8f2>(</color><color=#f8f8f2>pValue</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#ae81ff>30</color><color=#f8f8f2>);</color>

            <color=#66d9ef>int</color> <color=#f8f8f2>pos</color> <color=#f92672>=</color> <color=#f8f8f2>startEscape</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>pos</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>pValue</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>case</color> <color=#e6db74>'&'</color><color=#f8f8f2>:</color>
                        <color=#f8f8f2>pos</color> <color=#f92672>=</color> <color=#f8f8f2>appendAndEscape</color><color=#f8f8f2>(</color><color=#f8f8f2>pValue</color><color=#f8f8f2>,</color> <color=#f8f8f2>pos</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>builder</color><color=#f8f8f2>,</color> <color=#e6db74>"&amp;"</color><color=#f8f8f2>);</color>
                        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>case</color> <color=#e6db74>'<'</color><color=#f8f8f2>:</color>
                        <color=#f8f8f2>pos</color> <color=#f92672>=</color> <color=#f8f8f2>appendAndEscape</color><color=#f8f8f2>(</color><color=#f8f8f2>pValue</color><color=#f8f8f2>,</color> <color=#f8f8f2>pos</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>builder</color><color=#f8f8f2>,</color> <color=#e6db74>"&lt;"</color><color=#f8f8f2>);</color>
                        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>case</color> <color=#e6db74>'>'</color><color=#f8f8f2>:</color>
                        <color=#f8f8f2>pos</color> <color=#f92672>=</color> <color=#f8f8f2>appendAndEscape</color><color=#f8f8f2>(</color><color=#f8f8f2>pValue</color><color=#f8f8f2>,</color> <color=#f8f8f2>pos</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>builder</color><color=#f8f8f2>,</color> <color=#e6db74>"&gt;"</color><color=#f8f8f2>);</color>
                        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                    <color=#75715e>// case '\'':</color>
                    <color=#75715e>// case '"':</color>
                    <color=#66d9ef>default</color><color=#f8f8f2>:</color>
                        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>builder</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pValue</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>pos</color><color=#f8f8f2>));</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>builder</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>appendAndEscape</color><color=#f8f8f2>(</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>pStart</color><color=#f8f8f2>,</color>
            <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pEnd</color><color=#f8f8f2>,</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>pBuilder</color><color=#f8f8f2>,</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pEntity</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>pBuilder</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>pStart</color><color=#f8f8f2>,</color> <color=#f8f8f2>pEnd</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>pBuilder</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pEntity</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pEnd</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns an the first index from the input string that should be escaped if escaping is needed,</color>
<color=#75715e>     * otherwise {@code -1}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString the input string that might need escaping.</color>
<color=#75715e>     * @return the first index from the input string that should be escaped, or {@code -1}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>needsEscapeElement</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>case</color> <color=#e6db74>'&'</color><color=#f8f8f2>:</color>
                <color=#66d9ef>case</color> <color=#e6db74>'<'</color><color=#f8f8f2>:</color>
                <color=#66d9ef>case</color> <color=#e6db74>'>'</color><color=#f8f8f2>:</color>
                    <color=#75715e>// case '\'':</color>
                    <color=#75715e>// case '"':</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
                <color=#66d9ef>default</color><color=#f8f8f2>:</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>maybeEscapeAttributeValue</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>startEscape</color> <color=#f92672>=</color> <color=#f8f8f2>needsEscapeAttribute</color><color=#f8f8f2>(</color><color=#f8f8f2>pValue</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>startEscape</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>builder</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>(</color><color=#f8f8f2>pValue</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>startEscape</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>builder</color><color=#f8f8f2>.</color><color=#a6e22e>ensureCapacity</color><color=#f8f8f2>(</color><color=#f8f8f2>pValue</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#ae81ff>16</color><color=#f8f8f2>);</color>

            <color=#66d9ef>int</color> <color=#f8f8f2>pos</color> <color=#f92672>=</color> <color=#f8f8f2>startEscape</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>pos</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>pValue</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>case</color> <color=#e6db74>'&'</color><color=#f8f8f2>:</color>
                        <color=#f8f8f2>pos</color> <color=#f92672>=</color> <color=#f8f8f2>appendAndEscape</color><color=#f8f8f2>(</color><color=#f8f8f2>pValue</color><color=#f8f8f2>,</color> <color=#f8f8f2>pos</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>builder</color><color=#f8f8f2>,</color> <color=#e6db74>"&amp;"</color><color=#f8f8f2>);</color>
                        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>case</color> <color=#e6db74>'"'</color><color=#f8f8f2>:</color>
                        <color=#f8f8f2>pos</color> <color=#f92672>=</color> <color=#f8f8f2>appendAndEscape</color><color=#f8f8f2>(</color><color=#f8f8f2>pValue</color><color=#f8f8f2>,</color> <color=#f8f8f2>pos</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>builder</color><color=#f8f8f2>,</color> <color=#e6db74>"&quot;"</color><color=#f8f8f2>);</color>
                        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>default</color><color=#f8f8f2>:</color>
                        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>builder</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pValue</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>pos</color><color=#f8f8f2>));</color>

            <color=#66d9ef>return</color> <color=#f8f8f2>builder</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns an the first index from the input string that should be escaped if escaping is needed,</color>
<color=#75715e>     * otherwise {@code -1}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString the input string that might need escaping.</color>
<color=#75715e>     * @return the first index from the input string that should be escaped, or {@code -1}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>needsEscapeAttribute</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>case</color> <color=#e6db74>'&'</color><color=#f8f8f2>:</color>
                    <color=#75715e>// case '<':</color>
                    <color=#75715e>// case '>':</color>
                    <color=#75715e>// case '\'':</color>
                <color=#66d9ef>case</color> <color=#e6db74>'"'</color><color=#f8f8f2>:</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
                <color=#66d9ef>default</color><color=#f8f8f2>:</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>validateCDataValue</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pValue</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#e6db74>"]]>"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                    <color=#e6db74>"Malformed input document: CDATA block may not contain the string ']]>'"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>validateCommentValue</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pValue</color><color=#f8f8f2>.</color><color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#e6db74>"--"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                    <color=#e6db74>"Malformed input document: Comment may not contain the string '--'"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>writeDocument</color><color=#f8f8f2>(</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>PrintWriter</color> <color=#f8f8f2>pOut</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Node</color> <color=#f8f8f2>pNode</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>SerializationContext</color> <color=#f8f8f2>pContext</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Document fragments might not have child nodes...</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pNode</color><color=#f8f8f2>.</color><color=#a6e22e>hasChildNodes</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>NodeList</color> <color=#f8f8f2>nodes</color> <color=#f92672>=</color> <color=#f8f8f2>pNode</color><color=#f8f8f2>.</color><color=#a6e22e>getChildNodes</color><color=#f8f8f2>();</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nodes</color><color=#f8f8f2>.</color><color=#a6e22e>getLength</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>writeNodeRecursive</color><color=#f8f8f2>(</color><color=#f8f8f2>pOut</color><color=#f8f8f2>,</color> <color=#f8f8f2>nodes</color><color=#f8f8f2>.</color><color=#a6e22e>item</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>),</color> <color=#f8f8f2>pContext</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>writeElement</color><color=#f8f8f2>(</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>PrintWriter</color> <color=#f8f8f2>pOut</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Element</color> <color=#f8f8f2>pNode</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>SerializationContext</color> <color=#f8f8f2>pContext</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>"<"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#f8f8f2>pNode</color><color=#f8f8f2>.</color><color=#a6e22e>getTagName</color><color=#f8f8f2>());</color>

        <color=#75715e>// TODO: Attributes should probably include namespaces, so that it works</color>
        <color=#75715e>// even if the document was created using attributes instead of namespaces...</color>
        <color=#75715e>// In that case, prefix will be null...</color>

        <color=#75715e>// Handle namespace</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>namespace</color> <color=#f92672>=</color> <color=#f8f8f2>pNode</color><color=#f8f8f2>.</color><color=#a6e22e>getNamespaceURI</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>namespace</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>namespace</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>pContext</color><color=#f8f8f2>.</color><color=#a6e22e>defaultNamespace</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>prefix</color> <color=#f92672>=</color> <color=#f8f8f2>pNode</color><color=#f8f8f2>.</color><color=#a6e22e>getPrefix</color><color=#f8f8f2>();</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>prefix</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>pContext</color><color=#f8f8f2>.</color><color=#a6e22e>defaultNamespace</color> <color=#f92672>=</color> <color=#f8f8f2>namespace</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>" xmlns"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>" xmlns:"</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#f8f8f2>prefix</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>"=\""</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#f8f8f2>namespace</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>"\""</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Iterate attributes if any</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pNode</color><color=#f8f8f2>.</color><color=#a6e22e>hasAttributes</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>NamedNodeMap</color> <color=#f8f8f2>attributes</color> <color=#f92672>=</color> <color=#f8f8f2>pNode</color><color=#f8f8f2>.</color><color=#a6e22e>getAttributes</color><color=#f8f8f2>();</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>attributes</color><color=#f8f8f2>.</color><color=#a6e22e>getLength</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>Attr</color> <color=#f8f8f2>attribute</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Attr</color><color=#f8f8f2>)</color> <color=#f8f8f2>attributes</color><color=#f8f8f2>.</color><color=#a6e22e>item</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>String</color> <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>attribute</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>startsWith</color><color=#f8f8f2>(</color><color=#e6db74>"xmlns"</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>5</color> <color=#f92672>||</color> <color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>5</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#e6db74>':'</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>" "</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>"=\""</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#f8f8f2>maybeEscapeAttributeValue</color><color=#f8f8f2>(</color><color=#f8f8f2>attribute</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>()));</color>
                    <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>"\""</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
                <color=#75715e>// else {</color>
                <color=#75715e>//    System.err.println("attribute.getName(): " + name);</color>
                <color=#75715e>// }</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// TODO: Consider not indenting/newline if the first child is a text node</color>
        <color=#75715e>// Iterate children if any</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pNode</color><color=#f8f8f2>.</color><color=#a6e22e>hasChildNodes</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>">"</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>pContext</color><color=#f8f8f2>.</color><color=#a6e22e>preserveSpace</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>NodeList</color> <color=#f8f8f2>children</color> <color=#f92672>=</color> <color=#f8f8f2>pNode</color><color=#f8f8f2>.</color><color=#a6e22e>getChildNodes</color><color=#f8f8f2>();</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>children</color><color=#f8f8f2>.</color><color=#a6e22e>getLength</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>writeNodeRecursive</color><color=#f8f8f2>(</color><color=#f8f8f2>pOut</color><color=#f8f8f2>,</color> <color=#f8f8f2>children</color><color=#f8f8f2>.</color><color=#a6e22e>item</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>),</color> <color=#f8f8f2>pContext</color><color=#f8f8f2>.</color><color=#a6e22e>push</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>pContext</color><color=#f8f8f2>.</color><color=#a6e22e>preserveSpace</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>indentToLevel</color><color=#f8f8f2>(</color><color=#f8f8f2>pOut</color><color=#f8f8f2>,</color> <color=#f8f8f2>pContext</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>"</"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#f8f8f2>pNode</color><color=#f8f8f2>.</color><color=#a6e22e>getTagName</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>">"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pNode</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeValue</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// NOTE: This is NOT AS SPECIFIED, but we do this to support</color>
            <color=#75715e>// the weirdness that is the javax.imageio.metadata.IIOMetadataNode.</color>
            <color=#75715e>// According to the spec, the nodeValue of an Element is null.</color>
            <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>">"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#f8f8f2>pNode</color><color=#f8f8f2>.</color><color=#a6e22e>getNodeValue</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>"</"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#f8f8f2>pNode</color><color=#f8f8f2>.</color><color=#a6e22e>getTagName</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>">"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"/>"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>writeDoctype</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>PrintWriter</color> <color=#f8f8f2>pOut</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DocumentType</color> <color=#f8f8f2>pDoctype</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// NOTE: The DOMImplementationLS LSSerializer actually inserts SYSTEM or</color>
        <color=#75715e>// PUBLIC identifiers even if they are empty strings. The result is, it</color>
        <color=#75715e>// will create invalid documents.</color>
        <color=#75715e>// Testing for empty strings seems to be more compatible.</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pDoctype</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>"<!DOCTYPE "</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#f8f8f2>pDoctype</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>

            <color=#f8f8f2>String</color> <color=#f8f8f2>publicId</color> <color=#f92672>=</color> <color=#f8f8f2>pDoctype</color><color=#f8f8f2>.</color><color=#a6e22e>getPublicId</color><color=#f8f8f2>();</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>publicId</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>" PUBLIC "</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#f8f8f2>publicId</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>String</color> <color=#f8f8f2>systemId</color> <color=#f92672>=</color> <color=#f8f8f2>pDoctype</color><color=#f8f8f2>.</color><color=#a6e22e>getSystemId</color><color=#f8f8f2>();</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>systemId</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>publicId</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>" SYSTEM \""</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>" \""</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
                <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#f8f8f2>systemId</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>"\""</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>String</color> <color=#f8f8f2>internalSubset</color> <color=#f92672>=</color> <color=#f8f8f2>pDoctype</color><color=#f8f8f2>.</color><color=#a6e22e>getInternalSubset</color><color=#f8f8f2>();</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>internalSubset</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>" [ "</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#f8f8f2>internalSubset</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>" ]"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>pOut</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>">"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>main</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>pArgs</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>,</color> <color=#f8f8f2>SAXException</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Build XML tree (Document) and write</color>
        <color=#75715e>// Find the implementation</color>
        <color=#f8f8f2>DocumentBuilderFactory</color> <color=#f8f8f2>factory</color> <color=#f92672>=</color> <color=#f8f8f2>DocumentBuilderFactory</color><color=#f8f8f2>.</color><color=#a6e22e>newInstance</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>factory</color><color=#f8f8f2>.</color><color=#a6e22e>setNamespaceAware</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>DocumentBuilder</color> <color=#f8f8f2>builder</color><color=#f8f8f2>;</color>

        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>builder</color> <color=#f92672>=</color> <color=#f8f8f2>factory</color><color=#f8f8f2>.</color><color=#a6e22e>newDocumentBuilder</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ParserConfigurationException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>//noinspection ThrowableInstanceNeverThrown BOGUS</color>
            <color=#66d9ef>throw</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color><color=#f8f8f2>)</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>()).</color><color=#a6e22e>initCause</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>DOMImplementation</color> <color=#f8f8f2>dom</color> <color=#f92672>=</color> <color=#f8f8f2>builder</color><color=#f8f8f2>.</color><color=#a6e22e>getDOMImplementation</color><color=#f8f8f2>();</color>

        <color=#f8f8f2>Document</color> <color=#f8f8f2>document</color> <color=#f92672>=</color>
                <color=#f8f8f2>dom</color><color=#f8f8f2>.</color><color=#a6e22e>createDocument</color><color=#f8f8f2>(</color>
                        <color=#e6db74>"http://www.twelvemonkeys.com/xml/test"</color><color=#f8f8f2>,</color>
                        <color=#e6db74>"test"</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>dom</color><color=#f8f8f2>.</color><color=#a6e22e>createDocumentType</color><color=#f8f8f2>(</color><color=#e6db74>"test"</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>));</color>

        <color=#f8f8f2>Element</color> <color=#f8f8f2>root</color> <color=#f92672>=</color> <color=#f8f8f2>document</color><color=#f8f8f2>.</color><color=#a6e22e>getDocumentElement</color><color=#f8f8f2>();</color>

        <color=#75715e>// This is probably not the correct way of setting a default namespace</color>
        <color=#75715e>// root.setAttribute("xmlns", "http://www.twelvemonkeys.com/xml/test");</color>

        <color=#75715e>// Create and insert the normal Properties headers as XML comments</color>
        <color=#f8f8f2>document</color><color=#f8f8f2>.</color><color=#a6e22e>insertBefore</color><color=#f8f8f2>(</color><color=#f8f8f2>document</color><color=#f8f8f2>.</color><color=#a6e22e>createComment</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Date</color><color=#f8f8f2>().</color><color=#a6e22e>toString</color><color=#f8f8f2>()),</color> <color=#f8f8f2>root</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>Element</color> <color=#f8f8f2>test</color> <color=#f92672>=</color> <color=#f8f8f2>document</color><color=#f8f8f2>.</color><color=#a6e22e>createElement</color><color=#f8f8f2>(</color><color=#e6db74>"sub"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>root</color><color=#f8f8f2>.</color><color=#a6e22e>appendChild</color><color=#f8f8f2>(</color><color=#f8f8f2>test</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>Element</color> <color=#f8f8f2>more</color> <color=#f92672>=</color> <color=#f8f8f2>document</color><color=#f8f8f2>.</color><color=#a6e22e>createElementNS</color><color=#f8f8f2>(</color><color=#e6db74>"http://more.com/1999/namespace"</color><color=#f8f8f2>,</color> <color=#e6db74>"more:more"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>more</color><color=#f8f8f2>.</color><color=#a6e22e>setAttribute</color><color=#f8f8f2>(</color><color=#e6db74>"foo"</color><color=#f8f8f2>,</color> <color=#e6db74>"test"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>more</color><color=#f8f8f2>.</color><color=#a6e22e>setAttribute</color><color=#f8f8f2>(</color><color=#e6db74>"bar"</color><color=#f8f8f2>,</color> <color=#e6db74>"'really' \"legal\" & ok"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>test</color><color=#f8f8f2>.</color><color=#a6e22e>appendChild</color><color=#f8f8f2>(</color><color=#f8f8f2>more</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>more</color><color=#f8f8f2>.</color><color=#a6e22e>appendChild</color><color=#f8f8f2>(</color><color=#f8f8f2>document</color><color=#f8f8f2>.</color><color=#a6e22e>createTextNode</color><color=#f8f8f2>(</color><color=#e6db74>"Simply some text."</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>more</color><color=#f8f8f2>.</color><color=#a6e22e>appendChild</color><color=#f8f8f2>(</color><color=#f8f8f2>document</color><color=#f8f8f2>.</color><color=#a6e22e>createCDATASection</color><color=#f8f8f2>(</color><color=#e6db74>"&something escaped;"</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>more</color><color=#f8f8f2>.</color><color=#a6e22e>appendChild</color><color=#f8f8f2>(</color><color=#f8f8f2>document</color><color=#f8f8f2>.</color><color=#a6e22e>createTextNode</color><color=#f8f8f2>(</color><color=#e6db74>"More & <more>!"</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>more</color><color=#f8f8f2>.</color><color=#a6e22e>appendChild</color><color=#f8f8f2>(</color><color=#f8f8f2>document</color><color=#f8f8f2>.</color><color=#a6e22e>createTextNode</color><color=#f8f8f2>(</color><color=#e6db74>"\"<<'&'>>\""</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>Element</color> <color=#f8f8f2>another</color> <color=#f92672>=</color> <color=#f8f8f2>document</color><color=#f8f8f2>.</color><color=#a6e22e>createElement</color><color=#f8f8f2>(</color><color=#e6db74>"another"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>test</color><color=#f8f8f2>.</color><color=#a6e22e>appendChild</color><color=#f8f8f2>(</color><color=#f8f8f2>another</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>Element</color> <color=#f8f8f2>yet</color> <color=#f92672>=</color> <color=#f8f8f2>document</color><color=#f8f8f2>.</color><color=#a6e22e>createElement</color><color=#f8f8f2>(</color><color=#e6db74>"yet-another"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>yet</color><color=#f8f8f2>.</color><color=#a6e22e>setAttribute</color><color=#f8f8f2>(</color><color=#e6db74>"this-one"</color><color=#f8f8f2>,</color> <color=#e6db74>"with-params"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>test</color><color=#f8f8f2>.</color><color=#a6e22e>appendChild</color><color=#f8f8f2>(</color><color=#f8f8f2>yet</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>Element</color> <color=#f8f8f2>pre</color> <color=#f92672>=</color> <color=#f8f8f2>document</color><color=#f8f8f2>.</color><color=#a6e22e>createElementNS</color><color=#f8f8f2>(</color><color=#e6db74>"http://www.twelvemonkeys.com/xml/test"</color><color=#f8f8f2>,</color> <color=#e6db74>"pre"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>pre</color><color=#f8f8f2>.</color><color=#a6e22e>setAttributeNS</color><color=#f8f8f2>(</color><color=#e6db74>"http://www.w3.org/XML/1998/namespace"</color><color=#f8f8f2>,</color> <color=#e6db74>"xml:space"</color><color=#f8f8f2>,</color> <color=#e6db74>"preserve"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>pre</color><color=#f8f8f2>.</color><color=#a6e22e>appendChild</color><color=#f8f8f2>(</color><color=#f8f8f2>document</color><color=#f8f8f2>.</color><color=#a6e22e>createTextNode</color><color=#f8f8f2>(</color><color=#e6db74>" \t \n\r some text & white ' '   \n   "</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>test</color><color=#f8f8f2>.</color><color=#a6e22e>appendChild</color><color=#f8f8f2>(</color><color=#f8f8f2>pre</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>Element</color> <color=#f8f8f2>pre2</color> <color=#f92672>=</color> <color=#f8f8f2>document</color><color=#f8f8f2>.</color><color=#a6e22e>createElementNS</color><color=#f8f8f2>(</color><color=#e6db74>"http://www.twelvemonkeys.com/xml/test"</color><color=#f8f8f2>,</color> <color=#e6db74>"tight"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>pre2</color><color=#f8f8f2>.</color><color=#a6e22e>setAttributeNS</color><color=#f8f8f2>(</color><color=#e6db74>"http://www.w3.org/XML/1998/namespace"</color><color=#f8f8f2>,</color> <color=#e6db74>"xml:space"</color><color=#f8f8f2>,</color> <color=#e6db74>"preserve"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>pre2</color><color=#f8f8f2>.</color><color=#a6e22e>appendChild</color><color=#f8f8f2>(</color><color=#f8f8f2>document</color><color=#f8f8f2>.</color><color=#a6e22e>createTextNode</color><color=#f8f8f2>(</color><color=#e6db74>"no-space-around-me"</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>test</color><color=#f8f8f2>.</color><color=#a6e22e>appendChild</color><color=#f8f8f2>(</color><color=#f8f8f2>pre2</color><color=#f8f8f2>);</color>

        <color=#75715e>// Create serializer and output document</color>
        <color=#75715e>// XMLSerializer serializer = new XMLSerializer(pOutput, new OutputFormat(document,</color>
        <color=#75715e>// UTF_8_ENCODING, true));</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"XMLSerializer:"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>XMLSerializer</color> <color=#f8f8f2>serializer</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>XMLSerializer</color><color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>,</color> <color=#e6db74>"UTF-8"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>serializer</color><color=#f8f8f2>.</color><color=#a6e22e>serialize</color><color=#f8f8f2>(</color><color=#f8f8f2>document</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>();</color>

        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"DOMSerializer:"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>DOMSerializer</color> <color=#f8f8f2>serializerD</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DOMSerializer</color><color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>,</color> <color=#e6db74>"UTF-8"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>serializerD</color><color=#f8f8f2>.</color><color=#a6e22e>setPrettyPrint</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>serializerD</color><color=#f8f8f2>.</color><color=#a6e22e>serialize</color><color=#f8f8f2>(</color><color=#f8f8f2>document</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>();</color>

        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>ByteArrayOutputStream</color> <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteArrayOutputStream</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>XMLSerializer</color> <color=#f8f8f2>serializer2</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>XMLSerializer</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#e6db74>"UTF-8"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>serializer2</color><color=#f8f8f2>.</color><color=#a6e22e>serialize</color><color=#f8f8f2>(</color><color=#f8f8f2>document</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>ByteArrayOutputStream</color> <color=#f8f8f2>outD</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteArrayOutputStream</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>DOMSerializer</color> <color=#f8f8f2>serializer2D</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DOMSerializer</color><color=#f8f8f2>(</color><color=#f8f8f2>outD</color><color=#f8f8f2>,</color> <color=#e6db74>"UTF-8"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>serializer2D</color><color=#f8f8f2>.</color><color=#a6e22e>serialize</color><color=#f8f8f2>(</color><color=#f8f8f2>document</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>Document</color> <color=#f8f8f2>document2</color> <color=#f92672>=</color> <color=#f8f8f2>builder</color><color=#f8f8f2>.</color><color=#a6e22e>parse</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>ByteArrayInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>toByteArray</color><color=#f8f8f2>()));</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"XMLSerializer reparsed XMLSerializer:"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>serializer</color><color=#f8f8f2>.</color><color=#a6e22e>serialize</color><color=#f8f8f2>(</color><color=#f8f8f2>document2</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"DOMSerializer reparsed XMLSerializer:"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>serializerD</color><color=#f8f8f2>.</color><color=#a6e22e>serialize</color><color=#f8f8f2>(</color><color=#f8f8f2>document2</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>();</color>

        <color=#f8f8f2>Document</color> <color=#f8f8f2>documentD</color> <color=#f92672>=</color> <color=#f8f8f2>builder</color><color=#f8f8f2>.</color><color=#a6e22e>parse</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>ByteArrayInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>outD</color><color=#f8f8f2>.</color><color=#a6e22e>toByteArray</color><color=#f8f8f2>()));</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"XMLSerializer reparsed DOMSerializer:"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>serializer</color><color=#f8f8f2>.</color><color=#a6e22e>serialize</color><color=#f8f8f2>(</color><color=#f8f8f2>documentD</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"DOMSerializer reparsed DOMSerializer:"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>serializerD</color><color=#f8f8f2>.</color><color=#a6e22e>serialize</color><color=#f8f8f2>(</color><color=#f8f8f2>documentD</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>SerializationContext</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Cloneable</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>indent</color> <color=#f92672>=</color> <color=#e6db74>"\t"</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>level</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>preserveSpace</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>stripComments</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>defaultNamespace</color><color=#f8f8f2>;</color>

        <color=#66d9ef>public</color> <color=#f8f8f2>SerializationContext</color> <color=#a6e22e>copy</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>SerializationContext</color><color=#f8f8f2>)</color> <color=#f8f8f2>clone</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>CloneNotSupportedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>Error</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#f8f8f2>SerializationContext</color> <color=#a6e22e>push</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>SerializationContext</color> <color=#f8f8f2>context</color> <color=#f92672>=</color> <color=#f8f8f2>copy</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>context</color><color=#f8f8f2>.</color><color=#a6e22e>level</color><color=#f92672>++</color><color=#f8f8f2>;</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>context</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>