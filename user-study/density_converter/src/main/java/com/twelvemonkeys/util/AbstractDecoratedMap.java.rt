<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.util</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.Serializable</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * AbstractDecoratedMap</color>
<color=#75715e> * <p/></color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @version $Id: //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/util/AbstractDecoratedMap.java#2 $</color>
<color=#75715e> */</color>
<color=#75715e>// TODO: The generics in this class looks suspicious..</color>
<color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>AbstractDecoratedMap</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractMap</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#66d9ef>implements</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color><color=#f8f8f2>,</color> <color=#f8f8f2>Serializable</color><color=#f8f8f2>,</color> <color=#f8f8f2>Cloneable</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>>></color> <color=#f8f8f2>entries</color><color=#f8f8f2>;</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>transient</color> <color=#66d9ef>volatile</color> <color=#66d9ef>int</color> <color=#f8f8f2>modCount</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>>></color> <color=#f8f8f2>entrySet</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f92672>></color> <color=#f8f8f2>keySet</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#66d9ef>volatile</color> <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>values</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@code Map} backed by a {@code HashMap}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>AbstractDecoratedMap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>>></color><color=#f8f8f2>(),</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@code Map} backed by a {@code HashMap}, containing all</color>
<color=#75715e>     * key/value mappings from the given {@code Map}.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * <small>This is constructor is here to comply with the reccomendations for</color>
<color=#75715e>     * "standard" constructors in the {@code Map} interface.</small></color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pContents the map whose mappings are to be placed in this map.</color>
<color=#75715e>     *                  May be {@code null}.</color>
<color=#75715e>     * @see #AbstractDecoratedMap(Map, Map)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>AbstractDecoratedMap</color><color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f92672>?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>pContents</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>>></color><color=#f8f8f2>(),</color> <color=#f8f8f2>pContents</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@code Map} backed by the given backing-{@code Map},</color>
<color=#75715e>     * containing all key/value mappings from the given contents-{@code Map}.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * NOTE: The backing map is structuraly cahnged, and it should NOT be</color>
<color=#75715e>     * accessed directly, after the wrapped map is created.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pBacking  the backing map of this map. Must be either empty, or</color>
<color=#75715e>     *                  the same map as {@code pContents}.</color>
<color=#75715e>     * @param pContents the map whose mappings are to be placed in this map.</color>
<color=#75715e>     *                  May be {@code null}.</color>
<color=#75715e>     * @throws IllegalArgumentException if {@code pBacking} is {@code null}</color>
<color=#75715e>     *                                  or if {@code pBacking} differs from {@code pContent} and is not empty.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>AbstractDecoratedMap</color><color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>>></color> <color=#f8f8f2>pBacking</color><color=#f8f8f2>,</color> <color=#f8f8f2>Map</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f92672>?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>pContents</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pBacking</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"backing == null"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>Entry</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f92672>?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>V</color><color=#f92672>>[]</color> <color=#f8f8f2>entries</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pBacking</color> <color=#f92672>==</color> <color=#f8f8f2>pContents</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// NOTE: Special treatment to avoid ClassCastExceptions</color>
            <color=#f8f8f2>Set</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Entry</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f92672>?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>V</color><color=#f92672>>></color> <color=#f8f8f2>es</color> <color=#f92672>=</color> <color=#f8f8f2>pContents</color><color=#f8f8f2>.</color><color=#a6e22e>entrySet</color><color=#f8f8f2>();</color>
            <color=#75715e>//noinspection unchecked</color>
            <color=#f8f8f2>entries</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Entry</color><color=#f92672>[</color><color=#f8f8f2>es</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>entries</color> <color=#f92672>=</color> <color=#f8f8f2>es</color><color=#f8f8f2>.</color><color=#a6e22e>toArray</color><color=#f8f8f2>(</color><color=#f8f8f2>entries</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>pContents</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>pBacking</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>pBacking</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"backing must be empty"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>entries</color> <color=#f92672>=</color> <color=#f8f8f2>pBacking</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>init</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pContents</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>putAll</color><color=#f8f8f2>(</color><color=#f8f8f2>pContents</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entries</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Reinsert entries, this time wrapped</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Entry</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f92672>?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>entry</color> <color=#f8f8f2>:</color> <color=#f8f8f2>entries</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>put</color><color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>(),</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Default implementation, does nothing.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>init</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>clear</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>modCount</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>init</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isEmpty</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>pKey</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns {@code true} if this map maps one or more keys to the</color>
<color=#75715e>     * specified pValue.  More formally, returns {@code true} if and only if</color>
<color=#75715e>     * this map contains at least one mapping to a pValue {@code v} such that</color>
<color=#75715e>     * {@code (pValue==null ? v==null : pValue.equals(v))}.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * This implementation requires time linear in the map size for this</color>
<color=#75715e>     * operation.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pValue pValue whose presence in this map is to be tested.</color>
<color=#75715e>     * @return {@code true} if this map maps one or more keys to the</color>
<color=#75715e>     * specified pValue.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>containsValue</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>V</color> <color=#f8f8f2>value</color> <color=#f8f8f2>:</color> <color=#f8f8f2>values</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>==</color> <color=#f8f8f2>pValue</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>value</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>pValue</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>></color> <color=#a6e22e>values</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>values</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>values</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>values</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>values</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Values</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>>></color> <color=#a6e22e>entrySet</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>>></color> <color=#f8f8f2>es</color> <color=#f92672>=</color> <color=#f8f8f2>entrySet</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>es</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>es</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#f8f8f2>entrySet</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>EntrySet</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f92672>></color> <color=#a6e22e>keySet</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f92672>></color> <color=#f8f8f2>ks</color> <color=#f92672>=</color> <color=#f8f8f2>keySet</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>ks</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>ks</color> <color=#f8f8f2>:</color> <color=#f8f8f2>(</color><color=#f8f8f2>keySet</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>KeySet</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns a shallow copy of this {@code AbstractMap} instance: the keys</color>
<color=#75715e>     * and values themselves are not cloned.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return a shallow copy of this map.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>Object</color> <color=#a6e22e>clone</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>CloneNotSupportedException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>AbstractDecoratedMap</color> <color=#f8f8f2>map</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>AbstractDecoratedMap</color><color=#f8f8f2>)</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>

        <color=#f8f8f2>map</color><color=#f8f8f2>.</color><color=#a6e22e>values</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>map</color><color=#f8f8f2>.</color><color=#a6e22e>entrySet</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>map</color><color=#f8f8f2>.</color><color=#a6e22e>keySet</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#75715e>// TODO: Implement: Need to clone the backing map...</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>map</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// Subclass overrides these to alter behavior of views' iterator() method</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f92672>></color> <color=#a6e22e>newKeyIterator</color><color=#f8f8f2>();</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>></color> <color=#a6e22e>newValueIterator</color><color=#f8f8f2>();</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>>></color> <color=#a6e22e>newEntryIterator</color><color=#f8f8f2>();</color>

    <color=#75715e>// TODO: Implement these (get/put/remove)?</color>
    <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>V</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>);</color>

    <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>V</color> <color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>);</color>

    <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>V</color> <color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>K</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>);</color>

    <color=#75715e>/*protected*/</color> <color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#a6e22e>createEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>K</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BasicEntry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*protected*/</color>  <color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#a6e22e>getEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>K</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>pKey</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Removes the given entry from the Map.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pEntry the entry to be removed</color>
<color=#75715e>     * @return the removed entry, or {@code null} if nothing was removed.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#a6e22e>removeEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>pEntry</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pEntry</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Find candidate entry for this key</color>
        <color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>candidate</color> <color=#f92672>=</color> <color=#f8f8f2>getEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>pEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>());</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>candidate</color> <color=#f92672>==</color> <color=#f8f8f2>pEntry</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>candidate</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>candidate</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>pEntry</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Remove</color>
            <color=#f8f8f2>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>pEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>());</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pEntry</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>class</color> <color=#a6e22e>Values</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractCollection</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>{</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>></color> <color=#a6e22e>iterator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>newValueIterator</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>AbstractDecoratedMap</color><color=#f8f8f2>.</color><color=#a6e22e>this</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>containsValue</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>clear</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>AbstractDecoratedMap</color><color=#f8f8f2>.</color><color=#a6e22e>this</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>class</color> <color=#a6e22e>EntrySet</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractSet</color><color=#f92672><</color><color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>>></color> <color=#f8f8f2>{</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>>></color> <color=#a6e22e>iterator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>newEntryIterator</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Entry</color><color=#f8f8f2>))</color>
                <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>Entry</color> <color=#f8f8f2>e</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Entry</color><color=#f8f8f2>)</color> <color=#f8f8f2>o</color><color=#f8f8f2>;</color>

            <color=#75715e>//noinspection SuspiciousMethodCalls</color>
            <color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>candidate</color> <color=#f92672>=</color> <color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>());</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>candidate</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>candidate</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Entry</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>/*</color>
<color=#75715e>            // NOTE: Extra cautions is taken, to only remove the entry if it</color>
<color=#75715e>            // equals the entry in the map</color>
<color=#75715e>            Object key = ((Entry) o).getKey();</color>
<color=#75715e>            Entry entry = (Entry) entries.get(key);</color>

<color=#75715e>            // Same entry?</color>
<color=#75715e>            if (entry != null && entry.equals(o)) {</color>
<color=#75715e>                return AbstractWrappedMap.this.remove(key) != null;</color>
<color=#75715e>            }</color>

<color=#75715e>            return false;</color>
<color=#75715e>            */</color>

            <color=#75715e>//noinspection unchecked</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>AbstractDecoratedMap</color><color=#f8f8f2>.</color><color=#a6e22e>this</color><color=#f8f8f2>.</color><color=#a6e22e>removeEntry</color><color=#f8f8f2>((</color><color=#f8f8f2>Entry</color><color=#f8f8f2>)</color> <color=#f8f8f2>o</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>AbstractDecoratedMap</color><color=#f8f8f2>.</color><color=#a6e22e>this</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>clear</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>AbstractDecoratedMap</color><color=#f8f8f2>.</color><color=#a6e22e>this</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>class</color> <color=#a6e22e>KeySet</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractSet</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f92672>></color> <color=#f8f8f2>{</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f92672>></color> <color=#a6e22e>iterator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>newKeyIterator</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>AbstractDecoratedMap</color><color=#f8f8f2>.</color><color=#a6e22e>this</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>AbstractDecoratedMap</color><color=#f8f8f2>.</color><color=#a6e22e>this</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>clear</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>AbstractDecoratedMap</color><color=#f8f8f2>.</color><color=#a6e22e>this</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * A simple Map.Entry implementaton.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>BasicEntry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#66d9ef>implements</color> <color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color><color=#f8f8f2>,</color> <color=#f8f8f2>Serializable</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>K</color> <color=#f8f8f2>mKey</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>V</color> <color=#f8f8f2>mValue</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>BasicEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>K</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>mKey</color> <color=#f92672>=</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>mValue</color> <color=#f92672>=</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Default implementation does nothing.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param pMap the map that is accessed</color>
<color=#75715e>         */</color>
        <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>recordAccess</color><color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>pMap</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Default implementation does nothing.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param pMap the map that is removed from</color>
<color=#75715e>         */</color>
        <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>recordRemoval</color><color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>pMap</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#f8f8f2>V</color> <color=#a6e22e>getValue</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>mValue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#f8f8f2>V</color> <color=#a6e22e>setValue</color><color=#f8f8f2>(</color><color=#f8f8f2>V</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>V</color> <color=#f8f8f2>oldValue</color> <color=#f92672>=</color> <color=#f8f8f2>mValue</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>mValue</color> <color=#f92672>=</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>;</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>oldValue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#f8f8f2>K</color> <color=#a6e22e>getKey</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>mKey</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pOther</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>pOther</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>Entry</color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Entry</color><color=#f8f8f2>)</color> <color=#f8f8f2>pOther</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>Object</color> <color=#f8f8f2>k1</color> <color=#f92672>=</color> <color=#f8f8f2>mKey</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>Object</color> <color=#f8f8f2>k2</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>k1</color> <color=#f92672>==</color> <color=#f8f8f2>k2</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>k1</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>k1</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>k2</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>Object</color> <color=#f8f8f2>v1</color> <color=#f92672>=</color> <color=#f8f8f2>mValue</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>Object</color> <color=#f8f8f2>v2</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>();</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>v1</color> <color=#f92672>==</color> <color=#f8f8f2>v2</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>v1</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>v1</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>v2</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>hashCode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>mKey</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>mKey</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color><color=#f8f8f2>())</color> <color=#f92672>^</color>
                    <color=#f8f8f2>(</color><color=#f8f8f2>mValue</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>mValue</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>getKey</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>"="</color> <color=#f92672>+</color> <color=#f8f8f2>getValue</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>