<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.util.regex</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.PrintStream</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * This class parses arbitrary strings against a wildcard string mask provided. The wildcard</color>
<color=#75715e> * characters are '*' and '?'.</color>
<color=#75715e> *</color>
<color=#75715e> * <p>The string masks provided are treated as case sensitive.<br></color>
<color=#75715e> * Null-valued string masks as well as null valued strings to be parsed, will lead to rejection.</color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * <p><i>This class is custom designed for wildcard string parsing and is several times faster than</color>
<color=#75715e> * the implementation based on the Jakarta Regexp package.</i></color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * <p><hr style="height=1"></color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * <p>This task is performed based on regular expression techniques. The possibilities of string</color>
<color=#75715e> * generation with the well-known wildcard characters stated above, represent a subset of the</color>
<color=#75715e> * possibilities of string generation with regular expressions.<br></color>
<color=#75715e> * The '*' corresponds to ([Union of all characters in the alphabet])*<br></color>
<color=#75715e> * The '?' corresponds to ([Union of all characters in the alphabet])<br></color>
<color=#75715e> * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<small>These expressions are not suited for textual</color>
<color=#75715e> * representation at all, I must say. Is there any math tags included in HTML?</small></color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * <p>The complete meta-language for regular expressions are much larger. This fact makes it fairly</color>
<color=#75715e> * straightforward to build data structures for parsing because the amount of rules of building</color>
<color=#75715e> * these structures are quite limited, as stated below.</color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * <p>To bring this over to mathematical terms: The parser ia a <b>nondeterministic finite</color>
<color=#75715e> * automaton</b> (latin) representing the <b>grammar</b> which is stated by the string mask. The</color>
<color=#75715e> * <b>language</b> accepted by this automaton is the set of all strings accepted by this automaton.</color>
<color=#75715e> * <br></color>
<color=#75715e> * The formal automaton quintuple consists of:</color>
<color=#75715e> *</color>
<color=#75715e> * <ol></color>
<color=#75715e> *   <li>A finite set of <b>states</b>, depending on the wildcard string mask. For each character in</color>
<color=#75715e> *       the mask a state representing that character is created. The number of states therefore</color>
<color=#75715e> *       coincides with the length of the mask.</color>
<color=#75715e> *   <li>An <b>alphabet</b> consisting of all legal filename characters - included the two wildcard</color>
<color=#75715e> *       characters '*' and '?'. This alphabet is hard-coded in this class. It contains {a .. �}, {A</color>
<color=#75715e> *       .. �}, {0 .. 9}, {.}, {_}, {-}, {*} and {?}.</color>
<color=#75715e> *   <li>A finite set of <b>initial states</b>, here only consisting of the state corresponding to</color>
<color=#75715e> *       the first character in the mask.</color>
<color=#75715e> *   <li>A finite set of <b>final states</b>, here only consisting of the state corresponding to the</color>
<color=#75715e> *       last character in the mask.</color>
<color=#75715e> *   <li>A <b>transition relation</b> that is a finite set of transitions satisfying some formal</color>
<color=#75715e> *       rules.<br></color>
<color=#75715e> *       This implementation on the other hand, only uses ad-hoc rules which start with an initial</color>
<color=#75715e> *       setup of the states as a sequence according to the string mask.<br></color>
<color=#75715e> *       Additionally, the following rules completes the building of the automaton:</color>
<color=#75715e> *       <ol></color>
<color=#75715e> *         <li>If the next state represents the same character as the next character in the string</color>
<color=#75715e> *             to test - go to this next state.</color>
<color=#75715e> *         <li>If the next state represents '*' - go to this next state.</color>
<color=#75715e> *         <li>If the next state represents '?' - go to this next state.</color>
<color=#75715e> *         <li>If a '*' is followed by one or more '?', the last of these '?' state counts as a '*'</color>
<color=#75715e> *             state. Some extra checks regarding the number of characters read must be imposed if</color>
<color=#75715e> *             this is the case...</color>
<color=#75715e> *         <li>If the next character in the string to test does not coincide with the next state -</color>
<color=#75715e> *             go to the last state representing '*'. If there are none - rejection.</color>
<color=#75715e> *         <li>If there are no subsequent state (final state) and the state represents '*' -</color>
<color=#75715e> *             acceptance.</color>
<color=#75715e> *         <li>If there are no subsequent state (final state) and the end of the string to test is</color>
<color=#75715e> *             reached - acceptance.</color>
<color=#75715e> *       </ol></color>
<color=#75715e> *       <br></color>
<color=#75715e> *       <small> Disclaimer: This class does not build a finite automaton according to formal</color>
<color=#75715e> *       mathematical rules. The proper way of implementation should be finding the complete set of</color>
<color=#75715e> *       transition relations, decomposing these into rules accepted by a <i>deterministic</i></color>
<color=#75715e> *       finite automaton and finally build this automaton to be used for string parsing. Instead,</color>
<color=#75715e> *       this class is ad-hoc implemented based on the informal transition rules stated above.</color>
<color=#75715e> *       Therefore the correctness cannot be guaranteed before extensive testing has been imposed on</color>
<color=#75715e> *       this class... anyway, I think I have succeeded. Parsing faults must be reported to the</color>
<color=#75715e> *       author. </small></color>
<color=#75715e> * </ol></color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * <p><hr style="height=1"></color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Examples of usage:<br></color>
<color=#75715e> * This example will return "Accepted!".</color>
<color=#75715e> *</color>
<color=#75715e> * <pre></color>
<color=#75715e> * WildcardStringParser parser = new WildcardStringParser("*_28????.jp*");</color>
<color=#75715e> * if (parser.parseString("gupu_280915.jpg")) {</color>
<color=#75715e> *     System.out.println("Accepted!");</color>
<color=#75715e> * } else {</color>
<color=#75715e> *     System.out.println("Not accepted!");</color>
<color=#75715e> * }</color>
<color=#75715e> * </pre></color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * <p><hr style="height=1"></color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * <p>Theories and concepts are based on the book <i>Elements of the Theory of Computation</i>, by</color>
<color=#75715e> * Harry l. Lewis and Christos H. Papadimitriou, (c) 1981 by Prentice Hall.</color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:eirik.torske@iconmedialab.no">Eirik Torske</a></color>
<color=#75715e> * @deprecated Will probably be removed in the near future</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>WildcardStringParser</color> <color=#f8f8f2>{</color>
    <color=#75715e>// TODO: Get rid of this class</color>

    <color=#75715e>// Constants</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Field ALPHABET</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>ALPHABET</color> <color=#f92672>=</color> <color=#f8f8f2>{</color>
            <color=#e6db74>'a'</color><color=#f8f8f2>,</color> <color=#e6db74>'b'</color><color=#f8f8f2>,</color> <color=#e6db74>'c'</color><color=#f8f8f2>,</color> <color=#e6db74>'d'</color><color=#f8f8f2>,</color> <color=#e6db74>'e'</color><color=#f8f8f2>,</color> <color=#e6db74>'f'</color><color=#f8f8f2>,</color> <color=#e6db74>'g'</color><color=#f8f8f2>,</color> <color=#e6db74>'h'</color><color=#f8f8f2>,</color> <color=#e6db74>'i'</color><color=#f8f8f2>,</color> <color=#e6db74>'j'</color><color=#f8f8f2>,</color> <color=#e6db74>'k'</color><color=#f8f8f2>,</color> <color=#e6db74>'l'</color><color=#f8f8f2>,</color> <color=#e6db74>'m'</color><color=#f8f8f2>,</color> <color=#e6db74>'n'</color><color=#f8f8f2>,</color> <color=#e6db74>'o'</color><color=#f8f8f2>,</color> <color=#e6db74>'p'</color><color=#f8f8f2>,</color> <color=#e6db74>'q'</color><color=#f8f8f2>,</color> <color=#e6db74>'r'</color><color=#f8f8f2>,</color> <color=#e6db74>'s'</color><color=#f8f8f2>,</color>
            <color=#e6db74>'t'</color><color=#f8f8f2>,</color> <color=#e6db74>'u'</color><color=#f8f8f2>,</color> <color=#e6db74>'v'</color><color=#f8f8f2>,</color> <color=#e6db74>'w'</color><color=#f8f8f2>,</color> <color=#e6db74>'x'</color><color=#f8f8f2>,</color> <color=#e6db74>'y'</color><color=#f8f8f2>,</color> <color=#e6db74>'z'</color><color=#f8f8f2>,</color> <color=#e6db74>'\u00e6'</color><color=#f8f8f2>,</color>
            <color=#e6db74>'\u00f8'</color><color=#f8f8f2>,</color> <color=#e6db74>'\u00e5'</color><color=#f8f8f2>,</color> <color=#e6db74>'A'</color><color=#f8f8f2>,</color> <color=#e6db74>'B'</color><color=#f8f8f2>,</color> <color=#e6db74>'C'</color><color=#f8f8f2>,</color> <color=#e6db74>'D'</color><color=#f8f8f2>,</color> <color=#e6db74>'E'</color><color=#f8f8f2>,</color> <color=#e6db74>'F'</color><color=#f8f8f2>,</color> <color=#e6db74>'G'</color><color=#f8f8f2>,</color> <color=#e6db74>'H'</color><color=#f8f8f2>,</color> <color=#e6db74>'I'</color><color=#f8f8f2>,</color> <color=#e6db74>'J'</color><color=#f8f8f2>,</color> <color=#e6db74>'K'</color><color=#f8f8f2>,</color> <color=#e6db74>'L'</color><color=#f8f8f2>,</color> <color=#e6db74>'N'</color><color=#f8f8f2>,</color> <color=#e6db74>'M'</color><color=#f8f8f2>,</color> <color=#e6db74>'O'</color><color=#f8f8f2>,</color>
            <color=#e6db74>'P'</color><color=#f8f8f2>,</color> <color=#e6db74>'Q'</color><color=#f8f8f2>,</color> <color=#e6db74>'R'</color><color=#f8f8f2>,</color> <color=#e6db74>'S'</color><color=#f8f8f2>,</color> <color=#e6db74>'T'</color><color=#f8f8f2>,</color> <color=#e6db74>'U'</color><color=#f8f8f2>,</color> <color=#e6db74>'V'</color><color=#f8f8f2>,</color> <color=#e6db74>'W'</color><color=#f8f8f2>,</color> <color=#e6db74>'X'</color><color=#f8f8f2>,</color> <color=#e6db74>'Y'</color><color=#f8f8f2>,</color>
            <color=#e6db74>'Z'</color><color=#f8f8f2>,</color> <color=#e6db74>'\u00c6'</color><color=#f8f8f2>,</color> <color=#e6db74>'\u00d8'</color><color=#f8f8f2>,</color> <color=#e6db74>'\u00c5'</color><color=#f8f8f2>,</color> <color=#e6db74>'0'</color><color=#f8f8f2>,</color> <color=#e6db74>'1'</color><color=#f8f8f2>,</color> <color=#e6db74>'2'</color><color=#f8f8f2>,</color> <color=#e6db74>'3'</color><color=#f8f8f2>,</color> <color=#e6db74>'4'</color><color=#f8f8f2>,</color> <color=#e6db74>'5'</color><color=#f8f8f2>,</color> <color=#e6db74>'6'</color><color=#f8f8f2>,</color> <color=#e6db74>'7'</color><color=#f8f8f2>,</color> <color=#e6db74>'8'</color><color=#f8f8f2>,</color> <color=#e6db74>'9'</color><color=#f8f8f2>,</color> <color=#e6db74>'.'</color><color=#f8f8f2>,</color> <color=#e6db74>'_'</color><color=#f8f8f2>,</color>
            <color=#e6db74>'-'</color>
    <color=#f8f8f2>};</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Field FREE_RANGE_CHARACTER</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>char</color> <color=#f8f8f2>FREE_RANGE_CHARACTER</color> <color=#f92672>=</color> <color=#e6db74>'*'</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Field FREE_PASS_CHARACTER</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>char</color> <color=#f8f8f2>FREE_PASS_CHARACTER</color> <color=#f92672>=</color> <color=#e6db74>'?'</color><color=#f8f8f2>;</color>

    <color=#75715e>// Members</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>initialized</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>String</color> <color=#f8f8f2>stringMask</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>WildcardStringParserState</color> <color=#f8f8f2>initialState</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>totalNumberOfStringsParsed</color><color=#f8f8f2>;</color>
    <color=#66d9ef>boolean</color> <color=#f8f8f2>debugging</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>PrintStream</color> <color=#f8f8f2>out</color><color=#f8f8f2>;</color>

    <color=#75715e>// Properties</color>
    <color=#75715e>// Constructors</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a wildcard string parser.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p></color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pStringMask the wildcard string mask.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>WildcardStringParser</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pStringMask</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>pStringMask</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a wildcard string parser.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p></color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pStringMask the wildcard string mask.</color>
<color=#75715e>     * @param pDebugging  {@code true} will cause debug messages to be emitted to {@code System.out}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>WildcardStringParser</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pStringMask</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pDebugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>pStringMask</color><color=#f8f8f2>,</color> <color=#f8f8f2>pDebugging</color><color=#f8f8f2>,</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a wildcard string parser.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p></color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pStringMask           the wildcard string mask.</color>
<color=#75715e>     * @param pDebugging            {@code true} will cause debug messages to be emitted.</color>
<color=#75715e>     * @param pDebuggingPrintStream the {@code java.io.PrintStream} to which the debug messages will</color>
<color=#75715e>     *                              be emitted.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>WildcardStringParser</color><color=#f8f8f2>(</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pStringMask</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pDebugging</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>PrintStream</color> <color=#f8f8f2>pDebuggingPrintStream</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>stringMask</color> <color=#f92672>=</color> <color=#f8f8f2>pStringMask</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>debugging</color> <color=#f92672>=</color> <color=#f8f8f2>pDebugging</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>out</color> <color=#f92672>=</color> <color=#f8f8f2>pDebuggingPrintStream</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>initialized</color> <color=#f92672>=</color> <color=#f8f8f2>buildAutomaton</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// Methods</color>
    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>checkIfStateInWildcardRange</color><color=#f8f8f2>(</color><color=#f8f8f2>WildcardStringParserState</color> <color=#f8f8f2>pState</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>WildcardStringParserState</color> <color=#f8f8f2>runnerState</color> <color=#f92672>=</color> <color=#f8f8f2>pState</color><color=#f8f8f2>;</color>

        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>previousState</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>runnerState</color> <color=#f92672>=</color> <color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>previousState</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isFreeRangeCharacter</color><color=#f8f8f2>(</color><color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>character</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isFreePassCharacter</color><color=#f8f8f2>(</color><color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>character</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#75715e>// If free-pass char '?' - move on</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>checkIfLastFreeRangeState</color><color=#f8f8f2>(</color><color=#f8f8f2>WildcardStringParserState</color> <color=#f8f8f2>pState</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isFreeRangeCharacter</color><color=#f8f8f2>(</color><color=#f8f8f2>pState</color><color=#f8f8f2>.</color><color=#a6e22e>character</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isFreePassCharacter</color><color=#f8f8f2>(</color><color=#f8f8f2>pState</color><color=#f8f8f2>.</color><color=#a6e22e>character</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>checkIfStateInWildcardRange</color><color=#f8f8f2>(</color><color=#f8f8f2>pState</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * @return {@code true} if and only if the string mask only consists of free-range wildcard</color>
<color=#75715e>     * character(s).</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isTrivialAutomaton</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>stringMask</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isFreeRangeCharacter</color><color=#f8f8f2>(</color><color=#f8f8f2>stringMask</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>buildAutomaton</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>char</color> <color=#f8f8f2>activeChar</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>WildcardStringParserState</color> <color=#f8f8f2>runnerState</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>WildcardStringParserState</color> <color=#f8f8f2>newState</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>WildcardStringParserState</color> <color=#f8f8f2>lastFreeRangeState</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#75715e>// Create the initial state of the automaton</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>stringMask</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>stringMask</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>newState</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>WildcardStringParserState</color><color=#f8f8f2>(</color><color=#f8f8f2>stringMask</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>newState</color><color=#f8f8f2>.</color><color=#a6e22e>automatonStateNumber</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>newState</color><color=#f8f8f2>.</color><color=#a6e22e>previousState</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>checkIfLastFreeRangeState</color><color=#f8f8f2>(</color><color=#f8f8f2>newState</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>lastFreeRangeState</color> <color=#f92672>=</color> <color=#f8f8f2>newState</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>runnerState</color> <color=#f92672>=</color> <color=#f8f8f2>newState</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>initialState</color> <color=#f92672>=</color> <color=#f8f8f2>runnerState</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>initialState</color><color=#f8f8f2>.</color><color=#a6e22e>automatonStateNumber</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"string mask provided are null or empty - aborting!"</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Create the rest of the automaton</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>stringMask</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>activeChar</color> <color=#f92672>=</color> <color=#f8f8f2>stringMask</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>

            <color=#75715e>// Check if the char is an element in the alphabet or is a wildcard character</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>((</color><color=#f8f8f2>isInAlphabet</color><color=#f8f8f2>(</color><color=#f8f8f2>activeChar</color><color=#f8f8f2>))</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>isWildcardCharacter</color><color=#f8f8f2>(</color><color=#f8f8f2>activeChar</color><color=#f8f8f2>))))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                        <color=#e6db74>"one or more characters in string mask are not legal characters - aborting!"</color><color=#f8f8f2>);</color>
                <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Set last free-range state before creating/checking the next state</color>
            <color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>lastFreeRangeState</color> <color=#f92672>=</color> <color=#f8f8f2>lastFreeRangeState</color><color=#f8f8f2>;</color>

            <color=#75715e>// Create next state, check if free-range state, set the state number and preceeding state</color>
            <color=#f8f8f2>newState</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>WildcardStringParserState</color><color=#f8f8f2>(</color><color=#f8f8f2>activeChar</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>newState</color><color=#f8f8f2>.</color><color=#a6e22e>automatonStateNumber</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>newState</color><color=#f8f8f2>.</color><color=#a6e22e>previousState</color> <color=#f92672>=</color> <color=#f8f8f2>runnerState</color><color=#f8f8f2>;</color>

            <color=#75715e>// Special check if the state represents an '*' or '?' with only preceeding states</color>
            <color=#75715e>// representing '?' and '*'</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>checkIfLastFreeRangeState</color><color=#f8f8f2>(</color><color=#f8f8f2>newState</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>lastFreeRangeState</color> <color=#f92672>=</color> <color=#f8f8f2>newState</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Set the succeding state before moving to the next state</color>
            <color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>nextState</color> <color=#f92672>=</color> <color=#f8f8f2>newState</color><color=#f8f8f2>;</color>

            <color=#75715e>// Move to the next state</color>
            <color=#f8f8f2>runnerState</color> <color=#f92672>=</color> <color=#f8f8f2>newState</color><color=#f8f8f2>;</color>

            <color=#75715e>// Special setting of the last free-range state for the last element</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>automatonStateNumber</color> <color=#f92672>==</color> <color=#f8f8f2>stringMask</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>lastFreeRangeState</color> <color=#f92672>=</color> <color=#f8f8f2>lastFreeRangeState</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Initiate some statistics</color>
        <color=#f8f8f2>totalNumberOfStringsParsed</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Tests if a certain character is a valid character in the alphabet that is applying for this</color>
<color=#75715e>     * automaton.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isInAlphabet</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>char</color> <color=#f8f8f2>pCharToCheck</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>ALPHABET</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pCharToCheck</color> <color=#f92672>==</color> <color=#f8f8f2>ALPHABET</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Tests if a certain character is the designated "free-range" character ('*').</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isFreeRangeCharacter</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>char</color> <color=#f8f8f2>pCharToCheck</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pCharToCheck</color> <color=#f92672>==</color> <color=#f8f8f2>FREE_RANGE_CHARACTER</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Tests if a certain character is the designated "free-pass" character ('?').</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isFreePassCharacter</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>char</color> <color=#f8f8f2>pCharToCheck</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pCharToCheck</color> <color=#f92672>==</color> <color=#f8f8f2>FREE_PASS_CHARACTER</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Tests if a certain character is a wildcard character ('*' or '?').</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isWildcardCharacter</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>char</color> <color=#f8f8f2>pCharToCheck</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>isFreeRangeCharacter</color><color=#f8f8f2>(</color><color=#f8f8f2>pCharToCheck</color><color=#f8f8f2>))</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>isFreePassCharacter</color><color=#f8f8f2>(</color><color=#f8f8f2>pCharToCheck</color><color=#f8f8f2>)));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the string mask that was used when building the parser atomaton.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p></color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the string mask used for building the parser automaton.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getStringMask</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>stringMask</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Parses a string according to the rules stated above.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p></color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pStringToParse the string to parse.</color>
<color=#75715e>     * @return {@code true} if and only if the string are accepted by the automaton.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>parseString</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pStringToParse</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"parsing \""</color> <color=#f92672>+</color> <color=#f8f8f2>pStringToParse</color> <color=#f92672>+</color> <color=#e6db74>"\"..."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Update statistics</color>
        <color=#f8f8f2>totalNumberOfStringsParsed</color><color=#f92672>++</color><color=#f8f8f2>;</color>

        <color=#75715e>// Check string to be parsed for nullness</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pStringToParse</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"string to be parsed is null - rejection!"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Create parsable string</color>
        <color=#f8f8f2>ParsableString</color> <color=#f8f8f2>parsableString</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ParsableString</color><color=#f8f8f2>(</color><color=#f8f8f2>pStringToParse</color><color=#f8f8f2>);</color>

        <color=#75715e>// Check string to be parsed</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>parsableString</color><color=#f8f8f2>.</color><color=#a6e22e>checkString</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                        <color=#e6db74>"one or more characters in string to be parsed are not legal characters - rejection!"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Check if automaton is correctly initialized</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>initialized</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"automaton is not initialized - rejection!"</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Check if automaton is trivial (accepts all strings)</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isTrivialAutomaton</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                        <color=#e6db74>"automaton represents a trivial string mask (accepts all strings) - acceptance!"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Check if string to be parsed is empty</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>parsableString</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"string to be parsed is empty and not trivial automaton - rejection!"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Flag and more to indicate that state skipping due to sequence of '?' succeeding a '*' has</color>
        <color=#75715e>// been performed</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>hasPerformedFreeRangeMovement</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>numberOfFreePassCharactersRead_SinceLastFreePassState</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>numberOfParsedCharactersRead_SinceLastFreePassState</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>WildcardStringParserState</color> <color=#f8f8f2>runnerState</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#75715e>// Accepted by the first state?</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>parsableString</color><color=#f8f8f2>.</color><color=#a6e22e>charArray</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>initialState</color><color=#f8f8f2>.</color><color=#a6e22e>character</color><color=#f8f8f2>)</color>
                <color=#f92672>||</color> <color=#f8f8f2>isWildcardCharacter</color><color=#f8f8f2>(</color><color=#f8f8f2>initialState</color><color=#f8f8f2>.</color><color=#a6e22e>character</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>runnerState</color> <color=#f92672>=</color> <color=#f8f8f2>initialState</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>parsableString</color><color=#f8f8f2>.</color><color=#a6e22e>index</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"cannot enter first automaton state - rejection!"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Initialize the free-pass character state visited count</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isFreePassCharacter</color><color=#f8f8f2>(</color><color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>character</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>numberOfFreePassCharactersRead_SinceLastFreePassState</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Perform parsing according to the rules above</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>parsableString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                        <color=#e6db74>"parsing - index number "</color>
                                <color=#f92672>+</color> <color=#f8f8f2>i</color>
                                <color=#f92672>+</color> <color=#e6db74>", active char: '"</color>
                                <color=#f92672>+</color> <color=#f8f8f2>parsableString</color><color=#f8f8f2>.</color><color=#a6e22e>getActiveChar</color><color=#f8f8f2>()</color>
                                <color=#f92672>+</color> <color=#e6db74>"' char string index: "</color>
                                <color=#f92672>+</color> <color=#f8f8f2>parsableString</color><color=#f8f8f2>.</color><color=#a6e22e>index</color>
                                <color=#f92672>+</color> <color=#e6db74>" number of chars since last free-range state: "</color>
                                <color=#f92672>+</color> <color=#f8f8f2>numberOfParsedCharactersRead_SinceLastFreePassState</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                        <color=#e6db74>"parsing - state: "</color>
                                <color=#f92672>+</color> <color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>automatonStateNumber</color>
                                <color=#f92672>+</color> <color=#e6db74>" '"</color>
                                <color=#f92672>+</color> <color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>character</color>
                                <color=#f92672>+</color> <color=#e6db74>"' - no of free-pass chars read: "</color>
                                <color=#f92672>+</color> <color=#f8f8f2>numberOfFreePassCharactersRead_SinceLastFreePassState</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"parsing - hasPerformedFreeRangeMovement: "</color> <color=#f92672>+</color> <color=#f8f8f2>hasPerformedFreeRangeMovement</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>nextState</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"parsing - runnerState.nextState == null"</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>

                <color=#75715e>// If there are no subsequent state (final state) and the state represents '*' - acceptance!</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isFreeRangeCharacter</color><color=#f8f8f2>(</color><color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>character</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>

                    <color=#75715e>// Special free-range skipping check</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>hasPerformedFreeRangeMovement</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>parsableString</color><color=#f8f8f2>.</color><color=#a6e22e>reachedEndOfString</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>numberOfFreePassCharactersRead_SinceLastFreePassState</color>
                                    <color=#f92672>></color> <color=#f8f8f2>numberOfParsedCharactersRead_SinceLastFreePassState</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                                            <color=#e6db74>"no subsequent state (final state) and the state represents '*' - end of parsing string, but not enough characters read - rejection!"</color><color=#f8f8f2>);</color>
                                <color=#f8f8f2>}</color>
                                <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                                            <color=#e6db74>"no subsequent state (final state) and the state represents '*' - end of parsing string and enough characters read - acceptance!"</color><color=#f8f8f2>);</color>
                                <color=#f8f8f2>}</color>
                                <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>}</color>
                        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>numberOfFreePassCharactersRead_SinceLastFreePassState</color>
                                    <color=#f92672>></color> <color=#f8f8f2>numberOfParsedCharactersRead_SinceLastFreePassState</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                                            <color=#e6db74>"no subsequent state (final state) and the state represents '*' - not the end of parsing string and not enough characters read - read next character"</color><color=#f8f8f2>);</color>
                                <color=#f8f8f2>}</color>
                                <color=#f8f8f2>parsableString</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                                <color=#f8f8f2>numberOfParsedCharactersRead_SinceLastFreePassState</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                                            <color=#e6db74>"no subsequent state (final state) and the state represents '*' - not the end of parsing string, but enough characters read - acceptance!"</color><color=#f8f8f2>);</color>
                                <color=#f8f8f2>}</color>
                                <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>}</color>
                        <color=#f8f8f2>}</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                                    <color=#e6db74>"no subsequent state (final state) and the state represents '*' - no skipping performed - acceptance!"</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>}</color>
                        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>

                <color=#75715e>// If there are no subsequent state (final state) and no skipping has been performed and the</color>
                <color=#75715e>// end of the string to test is reached - acceptance!</color>
                <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>parsableString</color><color=#f8f8f2>.</color><color=#a6e22e>reachedEndOfString</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

                    <color=#75715e>// Special free-range skipping check</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>hasPerformedFreeRangeMovement</color><color=#f8f8f2>)</color>
                            <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>numberOfFreePassCharactersRead_SinceLastFreePassState</color>
                            <color=#f92672>></color> <color=#f8f8f2>numberOfParsedCharactersRead_SinceLastFreePassState</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                                    <color=#e6db74>"no subsequent state (final state) and skipping has been performed and end of parsing string, but not enough characters read - rejection!"</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>}</color>
                        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                                <color=#e6db74>"no subsequent state (final state) and the end of the string to test is reached - acceptance!"</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>}</color>
                    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"parsing - escaping process..."</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"parsing - runnerState.nextState != null"</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>

                <color=#75715e>// Special Case:</color>
                <color=#75715e>// If this state represents '*' - go to the rightmost state representing '?'.</color>
                <color=#75715e>//    This state will act as an '*' - except that you only can go to the next state or</color>
                <color=#75715e>// accept the string, if and only if the number of '?' read are equal or less than the</color>
                <color=#75715e>// number of character read from the parsing string.</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isFreeRangeCharacter</color><color=#f8f8f2>(</color><color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>character</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>numberOfFreePassCharactersRead_SinceLastFreePassState</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>numberOfParsedCharactersRead_SinceLastFreePassState</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>WildcardStringParserState</color> <color=#f8f8f2>freeRangeRunnerState</color> <color=#f92672>=</color> <color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>nextState</color><color=#f8f8f2>;</color>

                    <color=#66d9ef>while</color> <color=#f8f8f2>((</color><color=#f8f8f2>freeRangeRunnerState</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
                            <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>isFreePassCharacter</color><color=#f8f8f2>(</color><color=#f8f8f2>freeRangeRunnerState</color><color=#f8f8f2>.</color><color=#a6e22e>character</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>runnerState</color> <color=#f92672>=</color> <color=#f8f8f2>freeRangeRunnerState</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>hasPerformedFreeRangeMovement</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>numberOfFreePassCharactersRead_SinceLastFreePassState</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>freeRangeRunnerState</color> <color=#f92672>=</color> <color=#f8f8f2>freeRangeRunnerState</color><color=#f8f8f2>.</color><color=#a6e22e>nextState</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>

                    <color=#75715e>// Special Case: if the mask is at the end</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>nextState</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>();</color>
                        <color=#f8f8f2>}</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                                    <color=#e6db74>"parsing - index number "</color>
                                            <color=#f92672>+</color> <color=#f8f8f2>i</color>
                                            <color=#f92672>+</color> <color=#e6db74>", active char: '"</color>
                                            <color=#f92672>+</color> <color=#f8f8f2>parsableString</color><color=#f8f8f2>.</color><color=#a6e22e>getActiveChar</color><color=#f8f8f2>()</color>
                                            <color=#f92672>+</color> <color=#e6db74>"' char string index: "</color>
                                            <color=#f92672>+</color> <color=#f8f8f2>parsableString</color><color=#f8f8f2>.</color><color=#a6e22e>index</color>
                                            <color=#f92672>+</color> <color=#e6db74>" number of chars since last free-range state: "</color>
                                            <color=#f92672>+</color> <color=#f8f8f2>numberOfParsedCharactersRead_SinceLastFreePassState</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>}</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                                    <color=#e6db74>"parsing - state: "</color>
                                            <color=#f92672>+</color> <color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>automatonStateNumber</color>
                                            <color=#f92672>+</color> <color=#e6db74>" '"</color>
                                            <color=#f92672>+</color> <color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>character</color>
                                            <color=#f92672>+</color> <color=#e6db74>"' - no of free-pass chars read: "</color>
                                            <color=#f92672>+</color> <color=#f8f8f2>numberOfFreePassCharactersRead_SinceLastFreePassState</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>}</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                                    <color=#e6db74>"parsing - hasPerformedFreeRangeMovement: "</color> <color=#f92672>+</color> <color=#f8f8f2>hasPerformedFreeRangeMovement</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>}</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>hasPerformedFreeRangeMovement</color><color=#f8f8f2>)</color>
                                <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>numberOfFreePassCharactersRead_SinceLastFreePassState</color>
                                <color=#f92672>>=</color> <color=#f8f8f2>numberOfParsedCharactersRead_SinceLastFreePassState</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                            <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                            <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>

                <color=#75715e>// If the next state represents '*' - go to this next state</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isFreeRangeCharacter</color><color=#f8f8f2>(</color><color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>nextState</color><color=#f8f8f2>.</color><color=#a6e22e>character</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>runnerState</color> <color=#f92672>=</color> <color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>nextState</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>parsableString</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>numberOfParsedCharactersRead_SinceLastFreePassState</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#75715e>// If the next state represents '?' - go to this next state</color>
                <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isFreePassCharacter</color><color=#f8f8f2>(</color><color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>nextState</color><color=#f8f8f2>.</color><color=#a6e22e>character</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>runnerState</color> <color=#f92672>=</color> <color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>nextState</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>parsableString</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>numberOfFreePassCharactersRead_SinceLastFreePassState</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>numberOfParsedCharactersRead_SinceLastFreePassState</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#75715e>// If the next state represents the same character as the next character in the string to</color>
                <color=#75715e>// test - go to this next state</color>
                <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f92672>!</color><color=#f8f8f2>parsableString</color><color=#f8f8f2>.</color><color=#a6e22e>reachedEndOfString</color><color=#f8f8f2>())</color>
                        <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>nextState</color><color=#f8f8f2>.</color><color=#a6e22e>character</color> <color=#f92672>==</color> <color=#f8f8f2>parsableString</color><color=#f8f8f2>.</color><color=#a6e22e>getSubsequentChar</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>runnerState</color> <color=#f92672>=</color> <color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>nextState</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>parsableString</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>numberOfParsedCharactersRead_SinceLastFreePassState</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#75715e>// If the next character in the string to test does not coincide with the next state - go to</color>
                <color=#75715e>// the last state representing '*'. If there are none - rejection!</color>
                <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>lastFreeRangeState</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>runnerState</color> <color=#f92672>=</color> <color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>lastFreeRangeState</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>parsableString</color><color=#f8f8f2>.</color><color=#a6e22e>index</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>numberOfParsedCharactersRead_SinceLastFreePassState</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                                <color=#e6db74>"the next state does not represent the same character as the next character in the string to test, and there are no last-free-range-state - rejection!"</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>}</color>
                    <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>debugging</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"finished reading parsing string and not at any final state - rejection!"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Overriding mandatory methods from EntityObject's.</color>
<color=#75715e>     */</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Method toString</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>buffer</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>initialized</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>":  Not initialized properly!"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>WildcardStringParserState</color> <color=#f8f8f2>runnerState</color> <color=#f92672>=</color> <color=#f8f8f2>initialState</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>":  String mask "</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>stringMask</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"      Automaton: "</color><color=#f8f8f2>);</color>
            <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>runnerState</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>automatonStateNumber</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>": "</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>character</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" ("</color><color=#f8f8f2>);</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>lastFreeRangeState</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>lastFreeRangeState</color><color=#f8f8f2>.</color><color=#a6e22e>automatonStateNumber</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"-"</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
                <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>")"</color><color=#f8f8f2>);</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>nextState</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"   -->   "</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
                <color=#f8f8f2>runnerState</color> <color=#f92672>=</color> <color=#f8f8f2>runnerState</color><color=#f8f8f2>.</color><color=#a6e22e>nextState</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"      Format: <state index>: <character> (<last free state>)"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"      Number of strings parsed: "</color> <color=#f92672>+</color> <color=#f8f8f2>totalNumberOfStringsParsed</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"\n"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Method equals</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pObject</color>
<color=#75715e>     * @return</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pObject</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>WildcardStringParser</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>WildcardStringParser</color> <color=#f8f8f2>externalParser</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>WildcardStringParser</color><color=#f8f8f2>)</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>;</color>

            <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>externalParser</color><color=#f8f8f2>.</color><color=#a6e22e>initialized</color> <color=#f92672>==</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>initialized</color><color=#f8f8f2>)</color>
                    <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>externalParser</color><color=#f8f8f2>.</color><color=#a6e22e>stringMask</color> <color=#f92672>==</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>stringMask</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>pObject</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// Just taking the lazy, easy and dangerous way out</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Method hashCode</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>hashCode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#f8f8f2>Object</color> <color=#a6e22e>clone</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>CloneNotSupportedException</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>initialized</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>WildcardStringParser</color><color=#f8f8f2>(</color><color=#f8f8f2>stringMask</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// Just taking the lazy, easy and dangerous way out</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>finalize</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>Throwable</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * A simple holder class for an automaton state.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>class</color> <color=#a6e22e>WildcardStringParserState</color> <color=#f8f8f2>{</color>

        <color=#75715e>// Constants</color>
        <color=#75715e>// Members</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>automatonStateNumber</color><color=#f8f8f2>;</color>
        <color=#66d9ef>char</color> <color=#f8f8f2>character</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>WildcardStringParserState</color> <color=#f8f8f2>previousState</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>WildcardStringParserState</color> <color=#f8f8f2>nextState</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>WildcardStringParserState</color> <color=#f8f8f2>lastFreeRangeState</color><color=#f8f8f2>;</color>

        <color=#75715e>// Constructors</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Constructor WildcardStringParserState</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param pChar</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#a6e22e>WildcardStringParserState</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>char</color> <color=#f8f8f2>pChar</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>character</color> <color=#f92672>=</color> <color=#f8f8f2>pChar</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Methods</color>
        <color=#75715e>// Debug</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * A simple holder class for a string to be parsed.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>class</color> <color=#a6e22e>ParsableString</color> <color=#f8f8f2>{</color>

        <color=#75715e>// Constants</color>
        <color=#75715e>// Members</color>
        <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>charArray</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>index</color><color=#f8f8f2>;</color>

        <color=#75715e>// Constructors</color>
        <color=#f8f8f2>ParsableString</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pStringToParse</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pStringToParse</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>charArray</color> <color=#f92672>=</color> <color=#f8f8f2>pStringToParse</color><color=#f8f8f2>.</color><color=#a6e22e>toCharArray</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Methods</color>
        <color=#66d9ef>boolean</color> <color=#a6e22e>reachedEndOfString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

            <color=#75715e>// System.out.println(DebugUtil.DEBUG + DebugUtil.getClassName(this) + ": index            :"</color>
            <color=#75715e>// + index);</color>
            <color=#75715e>// System.out.println(DebugUtil.DEBUG + DebugUtil.getClassName(this) + ": charArray.length :"</color>
            <color=#75715e>// + charArray.length);</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>index</color> <color=#f92672>==</color> <color=#f8f8f2>charArray</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>int</color> <color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>charArray</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>char</color> <color=#a6e22e>getActiveChar</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>index</color> <color=#f92672>></color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672><</color> <color=#f8f8f2>charArray</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>charArray</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                    <color=#f8f8f2>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>": trying to access character outside character array!"</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color> <color=#e6db74>' '</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>char</color> <color=#a6e22e>getSubsequentChar</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>index</color> <color=#f92672>></color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>1</color> <color=#f92672><</color> <color=#f8f8f2>charArray</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>charArray</color><color=#f92672>[</color><color=#f8f8f2>index</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                    <color=#f8f8f2>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>": trying to access character outside character array!"</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color> <color=#e6db74>' '</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>boolean</color> <color=#a6e22e>checkString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>

                <color=#75715e>// Check if the string only contains chars that are elements in the alphabet</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>charArray</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>WildcardStringParser</color><color=#f8f8f2>.</color><color=#a6e22e>isInAlphabet</color><color=#f8f8f2>(</color><color=#f8f8f2>charArray</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>boolean</color> <color=#a6e22e>isEmpty</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>charArray</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>charArray</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Method toString</color>
<color=#75715e>         *</color>
<color=#75715e>         * @return</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f8f8f2>(</color><color=#f8f8f2>charArray</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>

<color=#75715e>/*--- Formatted in Sun Java Convention Style on ma, des 1, '03 ---*/</color>

<color=#75715e>/*------ Formatted by Jindent 3.23 Basic 1.0 --- http://www.jindent.de ------*/</color>