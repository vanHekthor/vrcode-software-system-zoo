<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.util</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.Serializable</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Iterator</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Map</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A {@code Map} decorator that makes the mappings in the backing map</color>
<color=#75715e> * case insensitive</color>
<color=#75715e> * (this is implemented by converting all keys to uppercase),</color>
<color=#75715e> * if the keys used are {@code Strings}. If the keys</color>
<color=#75715e> * used are not {@code String}s, it wil work as a normal</color>
<color=#75715e> * {@code java.util.Map}.</color>
<color=#75715e> * <p/></color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @see Map</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>IgnoreCaseMap</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>></color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractDecoratedMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#66d9ef>implements</color> <color=#f8f8f2>Serializable</color><color=#f8f8f2>,</color> <color=#f8f8f2>Cloneable</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Constructs a new empty {@code Map}.</color>
<color=#75715e>     * The backing map will be a {@link java.util.HashMap}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>IgnoreCaseMap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Constructs a new {@code Map} with the same key-value mappings as the</color>
<color=#75715e>     * given {@code Map}.</color>
<color=#75715e>     * The backing map will be a {@link java.util.HashMap}</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * NOTE: As the keys in the given map parameter will be converted to</color>
<color=#75715e>     * uppercase (if they are strings), any duplicate key/value pair where</color>
<color=#75715e>     * {@code key instanceof String && key.equalsIgnoreCase(otherKey)}</color>
<color=#75715e>     * is true, will be lost.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pMap the map whose mappings are to be placed in this map.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>IgnoreCaseMap</color><color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f92672>?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>pMap</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>pMap</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Constructs a new {@code Map} with the same key-value mappings as the</color>
<color=#75715e>     * given {@code Map}.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * NOTE: The backing map is structuraly cahnged, and it should NOT be</color>
<color=#75715e>     * accessed directly, after the wrapped map is created.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * NOTE: As the keys in the given map parameter will be converted to</color>
<color=#75715e>     * uppercase (if they are strings), any duplicate key/value pair where</color>
<color=#75715e>     * {@code key instanceof String && key.equalsIgnoreCase(otherKey)}</color>
<color=#75715e>     * is true, will be lost.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pBacking  the backing map of this map. Must be either empty, or</color>
<color=#75715e>     *                  the same map as {@code pContents}.</color>
<color=#75715e>     * @param pContents the map whose mappings are to be placed in this map.</color>
<color=#75715e>     *                  May be {@code null}</color>
<color=#75715e>     * @throws IllegalArgumentException if {@code pBacking} is {@code null}</color>
<color=#75715e>     * @throws IllegalArgumentException if {@code pBacking} differs from</color>
<color=#75715e>     *                                  {@code pContent} and is not empty.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>IgnoreCaseMap</color><color=#f8f8f2>(</color><color=#f8f8f2>Map</color> <color=#f8f8f2>pBacking</color><color=#f8f8f2>,</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f92672>?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>pContents</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>pBacking</color><color=#f8f8f2>,</color> <color=#f8f8f2>pContents</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Maps the specified key to the specified value in this map.</color>
<color=#75715e>     * Note: If the key used is a string, the key will not be case-sensitive.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pKey   the map key.</color>
<color=#75715e>     * @param pValue the value.</color>
<color=#75715e>     * @return the previous value of the specified key in this map,</color>
<color=#75715e>     * or null if it did not have one.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>V</color> <color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>toUpper</color><color=#f8f8f2>(</color><color=#f8f8f2>pKey</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>unwrap</color><color=#f8f8f2>(</color><color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>BasicEntry</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>)));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>V</color> <color=#a6e22e>unwrap</color><color=#f8f8f2>(</color><color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>pEntry</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pEntry</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>pEntry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the value to which the specified key is mapped in this</color>
<color=#75715e>     * map.</color>
<color=#75715e>     * Note: If the key used is a string, the key will not be case-sensitive.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pKey a key in the map</color>
<color=#75715e>     * @return the value to which the key is mapped in this map; null if</color>
<color=#75715e>     * the key is not mapped to any value in this map.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>V</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>unwrap</color><color=#f8f8f2>(</color><color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>toUpper</color><color=#f8f8f2>(</color><color=#f8f8f2>pKey</color><color=#f8f8f2>)));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Removes the key (and its corresponding value) from this map. This</color>
<color=#75715e>     * method does nothing if the key is not in the map.</color>
<color=#75715e>     * Note: If the key used is a string, the key will not be case-sensitive.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pKey the key that needs to be removed.</color>
<color=#75715e>     * @return the value to which the key had been mapped in this map,</color>
<color=#75715e>     * or null if the key did not have a mapping.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>V</color> <color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>unwrap</color><color=#f8f8f2>(</color><color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>toUpper</color><color=#f8f8f2>(</color><color=#f8f8f2>pKey</color><color=#f8f8f2>)));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Tests if the specified object is a key in this map.</color>
<color=#75715e>     * Note: If the key used is a string, the key will not be case-sensitive.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pKey possible key.</color>
<color=#75715e>     * @return true if and only if the specified object is a key in this</color>
<color=#75715e>     * map, as determined by the equals method; false otherwise.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>toUpper</color><color=#f8f8f2>(</color><color=#f8f8f2>pKey</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts the parameter to uppercase, if it's a String.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#a6e22e>toUpper</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pObject</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>).</color><color=#a6e22e>toUpperCase</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>>></color> <color=#a6e22e>newEntryIterator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>Iterator</color><color=#f8f8f2>)</color> <color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>entrySet</color><color=#f8f8f2>().</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#a6e22e>newKeyIterator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>keySet</color><color=#f8f8f2>().</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>></color> <color=#a6e22e>newValueIterator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>></color><color=#f8f8f2>)</color> <color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>values</color><color=#f8f8f2>().</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>