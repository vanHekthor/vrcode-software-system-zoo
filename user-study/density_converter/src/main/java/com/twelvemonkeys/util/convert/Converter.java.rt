<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.util.convert</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.util.Time</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.Date</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Hashtable</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Map</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * The converter (singleton). Converts strings to objects and back.</color>
<color=#75715e> * This is the entry point to the converter framework.</color>
<color=#75715e> * <p/></color>
<color=#75715e> * By default, converters for {@link Time}, {@link Date}</color>
<color=#75715e> * and {@link Object}</color>
<color=#75715e> * (the {@link DefaultConverter}) are registered by this class' static</color>
<color=#75715e> * initializer. You might remove them using the</color>
<color=#75715e> * {@code unregisterConverter} method.</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haku $</color>
<color=#75715e> * @version $Id: //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/util/convert/Converter.java#1 $</color>
<color=#75715e> * @see #registerConverter(Class, PropertyConverter)</color>
<color=#75715e> * @see #unregisterConverter(Class)</color>
<color=#75715e> */</color>
<color=#75715e>// TODO: Get rid of singleton stuff</color>
<color=#75715e>// Can probably be a pure static class, but is that a good idea?</color>
<color=#75715e>// Maybe have BeanUtil act as a "proxy", and hide this class all together?</color>
<color=#75715e>// TODO: ServiceRegistry for registering 3rd party converters</color>
<color=#75715e>// TODO: URI scheme, for implicit typing? Is that a good idea?</color>
<color=#75715e>// TODO: Array converters?</color>
<color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>Converter</color> <color=#66d9ef>implements</color> <color=#f8f8f2>PropertyConverter</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Our singleton instance</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Converter</color> <color=#f8f8f2>sInstance</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ConverterImpl</color><color=#f8f8f2>();</color> <color=#75715e>// Thread safe & EASY</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The converters Map</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Class</color><color=#f8f8f2>,</color> <color=#f8f8f2>PropertyConverter</color><color=#f92672>></color> <color=#f8f8f2>converters</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Hashtable</color><color=#f92672><</color><color=#f8f8f2>Class</color><color=#f8f8f2>,</color> <color=#f8f8f2>PropertyConverter</color><color=#f92672>></color><color=#f8f8f2>();</color>

    <color=#75715e>// Register our predefined converters</color>
    <color=#66d9ef>static</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>PropertyConverter</color> <color=#f8f8f2>defaultConverter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DefaultConverter</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>registerConverter</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>,</color> <color=#f8f8f2>defaultConverter</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>registerConverter</color><color=#f8f8f2>(</color><color=#f8f8f2>Boolean</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>defaultConverter</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>PropertyConverter</color> <color=#f8f8f2>numberConverter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>NumberConverter</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>registerConverter</color><color=#f8f8f2>(</color><color=#f8f8f2>Number</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>,</color> <color=#f8f8f2>numberConverter</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>registerConverter</color><color=#f8f8f2>(</color><color=#f8f8f2>Byte</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>numberConverter</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>registerConverter</color><color=#f8f8f2>(</color><color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>numberConverter</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>registerConverter</color><color=#f8f8f2>(</color><color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>numberConverter</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>registerConverter</color><color=#f8f8f2>(</color><color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>numberConverter</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>registerConverter</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>numberConverter</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>registerConverter</color><color=#f8f8f2>(</color><color=#f8f8f2>Short</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>numberConverter</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>registerConverter</color><color=#f8f8f2>(</color><color=#f8f8f2>Date</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>DateConverter</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>registerConverter</color><color=#f8f8f2>(</color><color=#f8f8f2>Time</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>TimeConverter</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a Converter.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#a6e22e>Converter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the Converter instance.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the converter instance</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Converter</color> <color=#a6e22e>getInstance</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>sInstance</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Registers a converter for a given type.</color>
<color=#75715e>     * This converter will also be used for all subclasses, unless a more</color>
<color=#75715e>     * specific version is registered.</color>
<color=#75715e>     * </p></color>
<color=#75715e>     * By default, converters for {@link Time}, {@link Date}</color>
<color=#75715e>     * and {@link Object}</color>
<color=#75715e>     * (the {@link DefaultConverter}) are registered by this class' static</color>
<color=#75715e>     * initializer. You might remove them using the</color>
<color=#75715e>     * {@code unregisterConverter} method.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pType      the (super) type to register a converter for</color>
<color=#75715e>     * @param pConverter the converter</color>
<color=#75715e>     * @see #unregisterConverter(Class)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>registerConverter</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Class</color><color=#f92672><?></color> <color=#f8f8f2>pType</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>PropertyConverter</color> <color=#f8f8f2>pConverter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>getInstance</color><color=#f8f8f2>().</color><color=#a6e22e>converters</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>pType</color><color=#f8f8f2>,</color> <color=#f8f8f2>pConverter</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Un-registers a converter for a given type. That is, making it unavailable</color>
<color=#75715e>     * for the converter framework, and making it (potentially) available for</color>
<color=#75715e>     * garbage collection.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pType the (super) type to remove converter for</color>
<color=#75715e>     * @see #registerConverter(Class, PropertyConverter)</color>
<color=#75715e>     */</color>
    <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"UnusedDeclaration"</color><color=#f8f8f2>)</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>unregisterConverter</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Class</color><color=#f92672><?></color> <color=#f8f8f2>pType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>getInstance</color><color=#f8f8f2>().</color><color=#a6e22e>converters</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>pType</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts the string to an object of the given type.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString the string to convert</color>
<color=#75715e>     * @param pType   the type to convert to</color>
<color=#75715e>     * @return the object created from the given string.</color>
<color=#75715e>     * @throws ConversionException if the string cannot be converted for any</color>
<color=#75715e>     *                             reason.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>toObject</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Class</color> <color=#f8f8f2>pType</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>ConversionException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>toObject</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>pType</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts the string to an object of the given type, parsing after the</color>
<color=#75715e>     * given format.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString the string to convert</color>
<color=#75715e>     * @param pType   the type to convert to</color>
<color=#75715e>     * @param pFormat the (optional) conversion format</color>
<color=#75715e>     * @return the object created from the given string.</color>
<color=#75715e>     * @throws ConversionException if the string cannot be converted for any</color>
<color=#75715e>     *                             reason.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>Object</color> <color=#a6e22e>toObject</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>Class</color> <color=#f8f8f2>pType</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pFormat</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>ConversionException</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts the object to a string, using {@code object.toString()}</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pObject the object to convert.</color>
<color=#75715e>     * @return the string representation of the object, on the correct format.</color>
<color=#75715e>     * @throws ConversionException if the object cannot be converted to a</color>
<color=#75715e>     *                             string for any reason.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>ConversionException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>pObject</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts the object to a string, using {@code object.toString()}</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pObject the object to convert.</color>
<color=#75715e>     * @param pFormat the (optional) conversion format</color>
<color=#75715e>     * @return the string representation of the object, on the correct format.</color>
<color=#75715e>     * @throws ConversionException if the object cannot be converted to a</color>
<color=#75715e>     *                             string for any reason.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pFormat</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>ConversionException</color><color=#f8f8f2>;</color>
<color=#f8f8f2>}</color>