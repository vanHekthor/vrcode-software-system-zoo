<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.util.convert</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.lang.BeanUtil</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.lang.StringUtil</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.InvocationTargetException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.text.DateFormat</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.text.SimpleDateFormat</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Date</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Locale</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Converts strings to dates and back.</color>
<color=#75715e> * <p/></color>
<color=#75715e> * <small>This class has a static cache of {@code DateFormats}, to avoid</color>
<color=#75715e> * creation and  parsing of date formats every time one is used.</small></color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haku $</color>
<color=#75715e> * @version $Id: //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/util/convert/DateConverter.java#2 $</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>DateConverter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>NumberConverter</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@code DateConverter}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>DateConverter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts the string to a date, using the given format for parsing.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString the string to convert.</color>
<color=#75715e>     * @param pType   the type to convert to. {@code java.util.Date} and</color>
<color=#75715e>     *                subclasses allowed.</color>
<color=#75715e>     * @param pFormat the format used for parsing. Must be a legal</color>
<color=#75715e>     *                {@code SimpleDateFormat} format, or {@code null} which will use the</color>
<color=#75715e>     *                default format.</color>
<color=#75715e>     * @return the object created from the given string. May safely be typecast</color>
<color=#75715e>     * to {@code java.util.Date}</color>
<color=#75715e>     * @throws ConversionException</color>
<color=#75715e>     * @see Date</color>
<color=#75715e>     * @see DateFormat</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>toObject</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>Class</color> <color=#f8f8f2>pType</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pFormat</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>ConversionException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>))</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>DateFormat</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pFormat</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Use system default format, using default locale</color>
                <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>DateFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getDateTimeInstance</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Get format from cache</color>
                <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>getDateFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>pFormat</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>Date</color> <color=#f8f8f2>date</color> <color=#f92672>=</color> <color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>toDate</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>format</color><color=#f8f8f2>);</color>

            <color=#75715e>// Allow for conversion to Date subclasses (ie. java.sql.*)</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pType</color> <color=#f92672>!=</color> <color=#f8f8f2>Date</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>date</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Date</color><color=#f8f8f2>)</color> <color=#f8f8f2>BeanUtil</color><color=#f8f8f2>.</color><color=#a6e22e>createInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>pType</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>Long</color><color=#f8f8f2>(</color><color=#f8f8f2>date</color><color=#f8f8f2>.</color><color=#a6e22e>getTime</color><color=#f8f8f2>()));</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassCastException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>TypeMismathException</color><color=#f8f8f2>(</color><color=#f8f8f2>pType</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InvocationTargetException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ConversionException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>return</color> <color=#f8f8f2>date</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>rte</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ConversionException</color><color=#f8f8f2>(</color><color=#f8f8f2>rte</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts the object to a string, using the given format</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pObject the object to convert.</color>
<color=#75715e>     * @param pFormat the format used for conversion. Must be a legal</color>
<color=#75715e>     *                {@code SimpleDateFormat} format, or {@code null} which will use the</color>
<color=#75715e>     *                default format.</color>
<color=#75715e>     * @return the string representation of the object, on the correct format.</color>
<color=#75715e>     * @throws ConversionException if the object is not a subclass of</color>
<color=#75715e>     *                             {@code java.util.Date}</color>
<color=#75715e>     * @see Date</color>
<color=#75715e>     * @see DateFormat</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pFormat</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>ConversionException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pObject</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>pObject</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Date</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>TypeMismathException</color><color=#f8f8f2>(</color><color=#f8f8f2>pObject</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Convert to string, default way</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>pFormat</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>DateFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getDateTimeInstance</color><color=#f8f8f2>().</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>pObject</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Convert to string, using format</color>
            <color=#f8f8f2>DateFormat</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>getDateFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>pFormat</color><color=#f8f8f2>);</color>

            <color=#66d9ef>return</color> <color=#f8f8f2>format</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>pObject</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color> <color=#f8f8f2>rte</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ConversionException</color><color=#f8f8f2>(</color><color=#f8f8f2>rte</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>DateFormat</color> <color=#a6e22e>getDateFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>DateFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>getFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>SimpleDateFormat</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>,</color> <color=#f8f8f2>pFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>Locale</color><color=#f8f8f2>.</color><color=#a6e22e>US</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>