<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.util.convert</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * The converter (singleton). Converts strings to objects and back.</color>
<color=#75715e> * This is the entrypoint to the converter framework.</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haku $</color>
<color=#75715e> * @version $Id: //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/util/convert/ConverterImpl.java#1 $</color>
<color=#75715e> * @see #registerConverter(Class, PropertyConverter)</color>
<color=#75715e> */</color>
<color=#66d9ef>class</color> <color=#a6e22e>ConverterImpl</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Converter</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a Converter.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>ConverterImpl</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the registered converter for the given type.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pType the type to convert to</color>
<color=#75715e>     * @return an instance of a {@code PropertyConverter} or {@code null}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>PropertyConverter</color> <color=#a6e22e>getConverterForType</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color> <color=#f8f8f2>pType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Object</color> <color=#f8f8f2>converter</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>Class</color> <color=#f8f8f2>cl</color> <color=#f92672>=</color> <color=#f8f8f2>pType</color><color=#f8f8f2>;</color>

        <color=#75715e>// Loop until we find a suitable converter</color>
        <color=#66d9ef>do</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Have a match, return converter</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>converter</color> <color=#f92672>=</color> <color=#f8f8f2>getInstance</color><color=#f8f8f2>().</color><color=#a6e22e>converters</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>cl</color><color=#f8f8f2>))</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>PropertyConverter</color><color=#f8f8f2>)</color> <color=#f8f8f2>converter</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

        <color=#f8f8f2>}</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>((</color><color=#f8f8f2>cl</color> <color=#f92672>=</color> <color=#f8f8f2>cl</color><color=#f8f8f2>.</color><color=#a6e22e>getSuperclass</color><color=#f8f8f2>())</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

        <color=#75715e>// No converter found, return null</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts the string to an object of the given type, parsing after the</color>
<color=#75715e>     * given format.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString the string to convert</color>
<color=#75715e>     * @param pType   the type to convert to</color>
<color=#75715e>     * @param pFormat the vonversion format</color>
<color=#75715e>     * @return the object created from the given string.</color>
<color=#75715e>     * @throws ConversionException if the string cannot be converted for any</color>
<color=#75715e>     *                             reason.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>toObject</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>Class</color> <color=#f8f8f2>pType</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pFormat</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>ConversionException</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pType</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>MissingTypeException</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Get converter</color>
        <color=#f8f8f2>PropertyConverter</color> <color=#f8f8f2>converter</color> <color=#f92672>=</color> <color=#f8f8f2>getConverterForType</color><color=#f8f8f2>(</color><color=#f8f8f2>pType</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>converter</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NoAvailableConverterException</color><color=#f8f8f2>(</color><color=#e6db74>"Cannot convert to object, no converter available for type \""</color> <color=#f92672>+</color> <color=#f8f8f2>pType</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>"\""</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Convert and return </color>
        <color=#66d9ef>return</color> <color=#f8f8f2>converter</color><color=#f8f8f2>.</color><color=#a6e22e>toObject</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>pType</color><color=#f8f8f2>,</color> <color=#f8f8f2>pFormat</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts the object to a string, using {@code object.toString()}</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pBean   the object to convert</color>
<color=#75715e>     * @param pFormat the conversion format</color>
<color=#75715e>     * @return the string representation of the object, on the correct format.</color>
<color=#75715e>     * @throws ConversionException if the object cannot be converted to a</color>
<color=#75715e>     *                             string for any reason.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pBean</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pFormat</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>ConversionException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pBean</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Get converter</color>
        <color=#f8f8f2>PropertyConverter</color> <color=#f8f8f2>converter</color> <color=#f92672>=</color> <color=#f8f8f2>getConverterForType</color><color=#f8f8f2>(</color><color=#f8f8f2>pBean</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>());</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>converter</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NoAvailableConverterException</color><color=#f8f8f2>(</color><color=#e6db74>"Cannot object to string, no converter available for type \""</color> <color=#f92672>+</color> <color=#f8f8f2>pBean</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>"\""</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Convert and return string</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>converter</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>pBean</color><color=#f8f8f2>,</color> <color=#f8f8f2>pFormat</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>