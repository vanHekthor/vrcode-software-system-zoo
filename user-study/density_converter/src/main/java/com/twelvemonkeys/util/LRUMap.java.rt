<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.util</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.Map</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Map implementation with size limit, that keeps its entries in LRU</color>
<color=#75715e> * (least recently used) order, also known as <em>access-order</em>.</color>
<color=#75715e> * When the size limit is reached, the least recently accessed mappings are</color>
<color=#75715e> * removed. The number of mappings to be removed from the map, is</color>
<color=#75715e> * controlled by the trim factor.</color>
<color=#75715e> * <p></color>
<color=#75715e> * <ul></color>
<color=#75715e> *  <li>Default size limit is 1000 elements.</color>
<color=#75715e> *      See {@link #setMaxSize(int)}/{@link #getMaxSize()}.</li></color>
<color=#75715e> *  <li>Default trim factor is 1% ({@code 0.01f}).</color>
<color=#75715e> *      See {@link #setTrimFactor(float)}/{@link #getTrimFactor()}.</li></color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @version $Id: com/twelvemonkeys/util/LRUMap.java#1 $</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>LRUMap</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#66d9ef>extends</color> <color=#f8f8f2>LinkedMap</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#66d9ef>implements</color> <color=#f8f8f2>ExpiringMap</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxSize</color> <color=#f92672>=</color> <color=#ae81ff>1000</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>trimFactor</color> <color=#f92672>=</color> <color=#ae81ff>0.01f</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates an LRUMap with default max size (1000 entries).</color>
<color=#75715e>     *</color>
<color=#75715e>     * <small>This is constructor is here to comply with the reccomendations for</color>
<color=#75715e>     * "standard" constructors in the {@code Map} interface.</small></color>
<color=#75715e>     *</color>
<color=#75715e>     * @see #LRUMap(int)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>LRUMap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates an LRUMap with the given max size.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pMaxSize size limit</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>LRUMap</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pMaxSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>setMaxSize</color><color=#f8f8f2>(</color><color=#f8f8f2>pMaxSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates an LRUMap with initial mappings from the given map,</color>
<color=#75715e>     * and default max size (1000 entries).</color>
<color=#75715e>     *</color>
<color=#75715e>     * <small>This is constructor is here to comply with the reccomendations for</color>
<color=#75715e>     * "standard" constructors in the {@code Map} interface.</small></color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pContents the map whose mappings are to be placed in this map.</color>
<color=#75715e>     *                  May be {@code null}.</color>
<color=#75715e>     * @see #LRUMap(Map, int)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>LRUMap</color><color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f92672>?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>pContents</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>pContents</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates an LRUMap with initial mappings from the given map,</color>
<color=#75715e>     * and the given max size.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pContents the map whose mappings are to be placed in this map.</color>
<color=#75715e>     *                  May be {@code null}.</color>
<color=#75715e>     * @param pMaxSize  size limit</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>LRUMap</color><color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f92672>?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>pContents</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pMaxSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>pContents</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>setMaxSize</color><color=#f8f8f2>(</color><color=#f8f8f2>pMaxSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates an LRUMap with initial mappings from the given map,</color>
<color=#75715e>     * and the given max size.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pBacking  the backing map of this map. Must be either empty, or</color>
<color=#75715e>     *                  the same map as {@code pContents}.</color>
<color=#75715e>     * @param pContents the map whose mappings are to be placed in this map.</color>
<color=#75715e>     *                  May be {@code null}.</color>
<color=#75715e>     * @param pMaxSize  max size</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>LRUMap</color><color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>>></color> <color=#f8f8f2>pBacking</color><color=#f8f8f2>,</color> <color=#f8f8f2>Map</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f92672>?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>pContents</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pMaxSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>pBacking</color><color=#f8f8f2>,</color> <color=#f8f8f2>pContents</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>setMaxSize</color><color=#f8f8f2>(</color><color=#f8f8f2>pMaxSize</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the maximum number of mappings in this map.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the size limit</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getMaxSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>maxSize</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Sets the maximum number of elements in this map.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * If the current size is greater than the new max size, the map will be</color>
<color=#75715e>     * trimmed to fit the new max size constraint.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pMaxSize new size limit</color>
<color=#75715e>     * @see #removeLRU()</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setMaxSize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pMaxSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pMaxSize</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"max size must be positive"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>maxSize</color> <color=#f92672>=</color> <color=#f8f8f2>pMaxSize</color><color=#f8f8f2>;</color>

        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#f8f8f2>maxSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>removeLRU</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the current trim factor.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * The trim factor controls how many percent of the maps current size is</color>
<color=#75715e>     * reclaimed, when performing an {@code removeLRU} operation.</color>
<color=#75715e>     * Defaults to 1% ({@code 0.01f}).</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the current trim factor</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getTrimFactor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>trimFactor</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Sets the trim factor.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * The trim factor controls how many percent of the maps current size is</color>
<color=#75715e>     * reclaimed, when performing an {@code removeLRU} operation.</color>
<color=#75715e>     * Defaults to 1% ({@code 0.01f}).</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pTrimFactor the new trim factor. Acceptable values are between</color>
<color=#75715e>     *                    0 (inclusive) and 1 (exclusive).</color>
<color=#75715e>     * @see #removeLRU()</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setTrimFactor</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>pTrimFactor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pTrimFactor</color> <color=#f92672><</color> <color=#ae81ff>0f</color> <color=#f92672>||</color> <color=#f8f8f2>pTrimFactor</color> <color=#f92672>>=</color> <color=#ae81ff>1f</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"trim factor must be between 0 and 1"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>trimFactor</color> <color=#f92672>=</color> <color=#f8f8f2>pTrimFactor</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * always returns {@code false}, and instead invokes {@code removeLRU()}</color>
<color=#75715e>     * if {@code size >= maxSize}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#a6e22e>removeEldestEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>Entry</color> <color=#f8f8f2>pEldest</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// NOTE: As removeLRU() may remove more than one entry, this is better</color>
        <color=#75715e>// than simply removing the eldest entry.</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color><color=#f8f8f2>()</color> <color=#f92672>>=</color> <color=#f8f8f2>maxSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>removeLRU</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#a6e22e>removeEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>pEntry</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>removeEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>pEntry</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>processRemoved</color><color=#f8f8f2>(</color><color=#f8f8f2>pEntry</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>entry</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Default implementation does nothing.</color>
<color=#75715e>     * May be used by clients as a call-back to notify when mappings expire from</color>
<color=#75715e>     * the map.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pRemoved the removed mapping</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>processRemoved</color><color=#f8f8f2>(</color><color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>pRemoved</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Removes the least recently used mapping(s) from this map.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * How many mappings are removed from the map, is controlled by the</color>
<color=#75715e>     * trim factor.</color>
<color=#75715e>     * In any case, at least one mapping will be removed.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @see #getTrimFactor()</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>removeLRU</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>removeCount</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>((</color><color=#f8f8f2>size</color><color=#f8f8f2>()</color> <color=#f92672>*</color> <color=#f8f8f2>trimFactor</color><color=#f8f8f2>),</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>

        <color=#66d9ef>while</color> <color=#f8f8f2>((</color><color=#f8f8f2>removeCount</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>removeEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>head</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>