<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.util</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.NoSuchElementException</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * StringTokenIterator, a drop-in replacement for {@code StringTokenizer}.</color>
<color=#75715e> * StringTokenIterator has the following features:</color>
<color=#75715e> * <ul></color>
<color=#75715e> * <li>Iterates over a strings, 20-50% faster than {@code StringTokenizer}</color>
<color=#75715e> *     (and magnitudes faster than {@code String.split(..)} or</color>
<color=#75715e> *     {@code Pattern.split(..)})</li></color>
<color=#75715e> * <li>Implements the {@code Iterator} interface</li></color>
<color=#75715e> * <li>Optionally returns delimiters</li></color>
<color=#75715e> * <li>Optionally returns empty elements</li></color>
<color=#75715e> * <li>Optionally iterates in reverse</li></color>
<color=#75715e> * <li>Resettable</li></color>
<color=#75715e> * </ul></color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haku $</color>
<color=#75715e> * @version $Id: //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/util/StringTokenIterator.java#1 $</color>
<color=#75715e> * @see java.util.StringTokenizer</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>StringTokenIterator</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractTokenIterator</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>string</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>delimiters</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>position</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>maxPosition</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#f8f8f2>next</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#f8f8f2>nextDelimiter</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>includeDelimiters</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>includeEmpty</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>reverse</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>FORWARD</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>REVERSE</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Stores the value of the delimiter character with the highest value.</color>
<color=#75715e>     * It is used to optimize the detection of delimiter characters.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>char</color> <color=#f8f8f2>maxDelimiter</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a StringTokenIterator</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString the string to be parsed.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>StringTokenIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#e6db74>" \t\n\r\f"</color><color=#f8f8f2>.</color><color=#a6e22e>toCharArray</color><color=#f8f8f2>(),</color> <color=#f8f8f2>FORWARD</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a StringTokenIterator</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString     the string to be parsed.</color>
<color=#75715e>     * @param pDelimiters the delimiters.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>StringTokenIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pDelimiters</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>toCharArray</color><color=#f8f8f2>(</color><color=#f8f8f2>pDelimiters</color><color=#f8f8f2>),</color> <color=#f8f8f2>FORWARD</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a StringTokenIterator</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString     the string to be parsed.</color>
<color=#75715e>     * @param pDelimiters the delimiters.</color>
<color=#75715e>     * @param pDirection  iteration direction.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>StringTokenIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pDelimiters</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pDirection</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>toCharArray</color><color=#f8f8f2>(</color><color=#f8f8f2>pDelimiters</color><color=#f8f8f2>),</color> <color=#f8f8f2>pDirection</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a StringTokenIterator</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString            the string to be parsed.</color>
<color=#75715e>     * @param pDelimiters        the delimiters.</color>
<color=#75715e>     * @param pIncludeDelimiters flag indicating whether to return delimiters as tokens.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>StringTokenIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pDelimiters</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pIncludeDelimiters</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>toCharArray</color><color=#f8f8f2>(</color><color=#f8f8f2>pDelimiters</color><color=#f8f8f2>),</color> <color=#f8f8f2>FORWARD</color><color=#f8f8f2>,</color> <color=#f8f8f2>pIncludeDelimiters</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a StringTokenIterator</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString            the string to be parsed.</color>
<color=#75715e>     * @param pDelimiters        the delimiters.</color>
<color=#75715e>     * @param pDirection         iteration direction.</color>
<color=#75715e>     * @param pIncludeDelimiters flag indicating whether to return delimiters as tokens.</color>
<color=#75715e>     * @param pIncludeEmpty      flag indicating whether to return empty tokens</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>StringTokenIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pDelimiters</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pDirection</color><color=#f8f8f2>,</color>
                               <color=#66d9ef>boolean</color> <color=#f8f8f2>pIncludeDelimiters</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pIncludeEmpty</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>toCharArray</color><color=#f8f8f2>(</color><color=#f8f8f2>pDelimiters</color><color=#f8f8f2>),</color> <color=#f8f8f2>pDirection</color><color=#f8f8f2>,</color> <color=#f8f8f2>pIncludeDelimiters</color><color=#f8f8f2>,</color> <color=#f8f8f2>pIncludeEmpty</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Implementation.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString            the string to be parsed.</color>
<color=#75715e>     * @param pDelimiters        the delimiters.</color>
<color=#75715e>     * @param pDirection         iteration direction.</color>
<color=#75715e>     * @param pIncludeDelimiters flag indicating whether to return delimiters as tokens.</color>
<color=#75715e>     * @param pIncludeEmpty      flag indicating whether to return empty tokens</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#a6e22e>StringTokenIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>pDelimiters</color><color=#f8f8f2>,</color>
                                <color=#66d9ef>int</color> <color=#f8f8f2>pDirection</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pIncludeDelimiters</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pIncludeEmpty</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"string == null"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>string</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>maxPosition</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>delimiters</color> <color=#f92672>=</color> <color=#f8f8f2>pDelimiters</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>includeDelimiters</color> <color=#f92672>=</color> <color=#f8f8f2>pIncludeDelimiters</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>reverse</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>pDirection</color> <color=#f92672>==</color> <color=#f8f8f2>REVERSE</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>includeEmpty</color> <color=#f92672>=</color> <color=#f8f8f2>pIncludeEmpty</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>maxDelimiter</color> <color=#f92672>=</color> <color=#f8f8f2>initMaxDelimiter</color><color=#f8f8f2>(</color><color=#f8f8f2>pDelimiters</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>reset</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#a6e22e>toCharArray</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pDelimiters</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pDelimiters</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"delimiters == null"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pDelimiters</color><color=#f8f8f2>.</color><color=#a6e22e>toCharArray</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the highest char in the delimiter set.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pDelimiters the delimiter set</color>
<color=#75715e>     * @return the highest char</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>char</color> <color=#a6e22e>initMaxDelimiter</color><color=#f8f8f2>(</color><color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>pDelimiters</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pDelimiters</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>char</color> <color=#f8f8f2>max</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>char</color> <color=#f8f8f2>c</color> <color=#f8f8f2>:</color> <color=#f8f8f2>pDelimiters</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>max</color> <color=#f92672><</color> <color=#f8f8f2>c</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>max</color> <color=#f92672>=</color> <color=#f8f8f2>c</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>max</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Resets this iterator.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>reset</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>position</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>next</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>nextDelimiter</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns {@code true} if the iteration has more elements. (In other</color>
<color=#75715e>     * words, returns {@code true} if {@code next} would return an element</color>
<color=#75715e>     * rather than throwing an exception.)</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return {@code true} if the iterator has more elements.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasNext</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>next</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>fetchNext</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#a6e22e>fetchNext</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#75715e>// If next is delimiter, return fast</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>nextDelimiter</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>next</color> <color=#f92672>=</color> <color=#f8f8f2>nextDelimiter</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>nextDelimiter</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>next</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// If no more chars, return null</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>position</color> <color=#f92672>>=</color> <color=#f8f8f2>maxPosition</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>reverse</color> <color=#f92672>?</color> <color=#f8f8f2>fetchReverse</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>fetchForward</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#a6e22e>fetchReverse</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Get previous position</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>prevPos</color> <color=#f92672>=</color> <color=#f8f8f2>scanForPrev</color><color=#f8f8f2>();</color>

        <color=#75715e>// Store next string</color>
        <color=#f8f8f2>next</color> <color=#f92672>=</color> <color=#f8f8f2>string</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>prevPos</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxPosition</color> <color=#f92672>-</color> <color=#f8f8f2>position</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>includeDelimiters</color> <color=#f92672>&&</color> <color=#f8f8f2>prevPos</color> <color=#f92672>>=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>prevPos</color> <color=#f92672><</color> <color=#f8f8f2>maxPosition</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>nextDelimiter</color> <color=#f92672>=</color> <color=#f8f8f2>string</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>prevPos</color><color=#f8f8f2>,</color> <color=#f8f8f2>prevPos</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>position</color> <color=#f92672>=</color> <color=#f8f8f2>maxPosition</color> <color=#f92672>-</color> <color=#f8f8f2>prevPos</color><color=#f8f8f2>;</color>

        <color=#75715e>// Skip empty</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>next</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>includeEmpty</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>fetchNext</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>next</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#a6e22e>fetchForward</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Get next position</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>nextPos</color> <color=#f92672>=</color> <color=#f8f8f2>scanForNext</color><color=#f8f8f2>();</color>

        <color=#75715e>// Store next string</color>
        <color=#f8f8f2>next</color> <color=#f92672>=</color> <color=#f8f8f2>string</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>position</color><color=#f8f8f2>,</color> <color=#f8f8f2>nextPos</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>includeDelimiters</color> <color=#f92672>&&</color> <color=#f8f8f2>nextPos</color> <color=#f92672>>=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>nextPos</color> <color=#f92672><</color> <color=#f8f8f2>maxPosition</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>nextDelimiter</color> <color=#f92672>=</color> <color=#f8f8f2>string</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>nextPos</color><color=#f8f8f2>,</color> <color=#f8f8f2>nextPos</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>position</color> <color=#f92672>=</color> <color=#f92672>++</color><color=#f8f8f2>nextPos</color><color=#f8f8f2>;</color>

        <color=#75715e>// Skip empty</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>next</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>includeEmpty</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>fetchNext</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>next</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>scanForNext</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>position</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>;</color>

        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>position</color> <color=#f92672><</color> <color=#f8f8f2>maxPosition</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Find next match, using all delimiters</color>
            <color=#66d9ef>char</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>string</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>position</color><color=#f8f8f2>);</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672><=</color> <color=#f8f8f2>maxDelimiter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

                <color=#75715e>// Find first delimiter match</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>char</color> <color=#f8f8f2>delimiter</color> <color=#f8f8f2>:</color> <color=#f8f8f2>delimiters</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#f8f8f2>delimiter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>return</color> <color=#f8f8f2>position</color><color=#f8f8f2>;</color><color=#75715e>// Return if match</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Next...</color>
            <color=#f8f8f2>position</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Return last position, if no match</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>position</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>scanForPrev</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>position</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>maxPosition</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>position</color><color=#f8f8f2>;</color>

        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>position</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Find next match, using all delimiters</color>
            <color=#66d9ef>char</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>string</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>position</color><color=#f8f8f2>);</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672><=</color> <color=#f8f8f2>maxDelimiter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

                <color=#75715e>// Find first delimiter match</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>char</color> <color=#f8f8f2>delimiter</color> <color=#f8f8f2>:</color> <color=#f8f8f2>delimiters</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#f8f8f2>delimiter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>return</color> <color=#f8f8f2>position</color><color=#f8f8f2>;</color><color=#75715e>// Return if match</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Next...</color>
            <color=#f8f8f2>position</color><color=#f92672>--</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Return first position, if no match</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>position</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the next element in the iteration.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the next element in the iteration.</color>
<color=#75715e>     * @throws NoSuchElementException iteration has no more elements.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>next</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NoSuchElementException</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>String</color> <color=#f8f8f2>next</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>fetchNext</color><color=#f8f8f2>();</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>next</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

<color=#f8f8f2>}</color>