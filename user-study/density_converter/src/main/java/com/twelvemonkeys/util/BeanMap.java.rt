<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.util</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.beans.IndexedPropertyDescriptor</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.beans.IntrospectionException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.beans.Introspector</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.beans.PropertyDescriptor</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.Serializable</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.InvocationTargetException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Method</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A {@code Map} adapter for a Java Bean.</color>
<color=#75715e> * <p/></color>
<color=#75715e> * Ruthlessly stolen from</color>
<color=#75715e> * <a href="http://binkley.blogspot.com/2006/08/mapping-java-bean.html>Binkley's Blog</a></color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>BeanMap</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>></color> <color=#66d9ef>implements</color> <color=#f8f8f2>Serializable</color><color=#f8f8f2>,</color> <color=#f8f8f2>Cloneable</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>bean</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>transient</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>PropertyDescriptor</color><color=#f92672>></color> <color=#f8f8f2>descriptors</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>BeanMap</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pBean</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IntrospectionException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pBean</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"bean == null"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>bean</color> <color=#f92672>=</color> <color=#f8f8f2>pBean</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>descriptors</color> <color=#f92672>=</color> <color=#f8f8f2>initDescriptors</color><color=#f8f8f2>(</color><color=#f8f8f2>pBean</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>PropertyDescriptor</color><color=#f92672>></color> <color=#a6e22e>initDescriptors</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pBean</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IntrospectionException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>PropertyDescriptor</color><color=#f92672>></color> <color=#f8f8f2>descriptors</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashSet</color><color=#f92672><</color><color=#f8f8f2>PropertyDescriptor</color><color=#f92672>></color><color=#f8f8f2>();</color>

        <color=#f8f8f2>PropertyDescriptor</color><color=#f92672>[]</color> <color=#f8f8f2>propertyDescriptors</color> <color=#f92672>=</color> <color=#f8f8f2>Introspector</color><color=#f8f8f2>.</color><color=#a6e22e>getBeanInfo</color><color=#f8f8f2>(</color><color=#f8f8f2>pBean</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>()).</color><color=#a6e22e>getPropertyDescriptors</color><color=#f8f8f2>();</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>PropertyDescriptor</color> <color=#f8f8f2>descriptor</color> <color=#f8f8f2>:</color> <color=#f8f8f2>propertyDescriptors</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Skip Object.getClass(), as you probably never want it</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"class"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>descriptor</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>())</color> <color=#f92672>&&</color> <color=#f8f8f2>descriptor</color><color=#f8f8f2>.</color><color=#a6e22e>getPropertyType</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>Class</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Only support simple setter/getters.</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>descriptor</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>IndexedPropertyDescriptor</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>descriptors</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>descriptor</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>unmodifiableSet</color><color=#f8f8f2>(</color><color=#f8f8f2>descriptors</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>>></color> <color=#a6e22e>entrySet</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BeanSet</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>pKey</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>checkKey</color><color=#f8f8f2>(</color><color=#f8f8f2>pKey</color><color=#f8f8f2>);</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>></color> <color=#f8f8f2>entry</color> <color=#f8f8f2>:</color> <color=#f8f8f2>entrySet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>pKey</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>setValue</color><color=#f8f8f2>(</color><color=#f8f8f2>pValue</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>checkKey</color><color=#f8f8f2>(</color><color=#f8f8f2>pKey</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>descriptors</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#a6e22e>checkKey</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pKey</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"key == null"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>// NB - the cast forces CCE if key is the wrong type.</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Bad key: "</color> <color=#f92672>+</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>Object</color> <color=#a6e22e>readResolve</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IntrospectionException</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Initialize the property descriptors</color>
        <color=#f8f8f2>descriptors</color> <color=#f92672>=</color> <color=#f8f8f2>initDescriptors</color><color=#f8f8f2>(</color><color=#f8f8f2>bean</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>BeanSet</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractSet</color><color=#f92672><</color><color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>>></color> <color=#f8f8f2>{</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>>></color> <color=#a6e22e>iterator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BeanIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>descriptors</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>size</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>descriptors</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>BeanIterator</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>>></color> <color=#f8f8f2>{</color>
        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>PropertyDescriptor</color><color=#f92672>></color> <color=#f8f8f2>mIterator</color><color=#f8f8f2>;</color>

        <color=#66d9ef>public</color> <color=#a6e22e>BeanIterator</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>PropertyDescriptor</color><color=#f92672>></color> <color=#f8f8f2>pIterator</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>mIterator</color> <color=#f92672>=</color> <color=#f8f8f2>pIterator</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasNext</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>mIterator</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#f8f8f2>BeanEntry</color> <color=#a6e22e>next</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BeanEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>mIterator</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>remove</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>mIterator</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>BeanEntry</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>></color> <color=#f8f8f2>{</color>
        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>PropertyDescriptor</color> <color=#f8f8f2>mDescriptor</color><color=#f8f8f2>;</color>

        <color=#66d9ef>public</color> <color=#a6e22e>BeanEntry</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>PropertyDescriptor</color> <color=#f8f8f2>pDescriptor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>mDescriptor</color> <color=#f92672>=</color> <color=#f8f8f2>pDescriptor</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getKey</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>mDescriptor</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>getValue</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>unwrap</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Wrapped</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>run</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalAccessException</color><color=#f8f8f2>,</color> <color=#f8f8f2>InvocationTargetException</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>final</color> <color=#f8f8f2>Method</color> <color=#f8f8f2>method</color> <color=#f92672>=</color> <color=#f8f8f2>mDescriptor</color><color=#f8f8f2>.</color><color=#a6e22e>getReadMethod</color><color=#f8f8f2>();</color>
                    <color=#75715e>// A write-only bean.</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>method</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color><color=#e6db74>"No getter: "</color> <color=#f92672>+</color> <color=#f8f8f2>mDescriptor</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>return</color> <color=#f8f8f2>method</color><color=#f8f8f2>.</color><color=#a6e22e>invoke</color><color=#f8f8f2>(</color><color=#f8f8f2>bean</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>});</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>setValue</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>unwrap</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Wrapped</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>run</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalAccessException</color><color=#f8f8f2>,</color> <color=#f8f8f2>InvocationTargetException</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>final</color> <color=#f8f8f2>Method</color> <color=#f8f8f2>method</color> <color=#f92672>=</color> <color=#f8f8f2>mDescriptor</color><color=#f8f8f2>.</color><color=#a6e22e>getWriteMethod</color><color=#f8f8f2>();</color>
                    <color=#75715e>// A read-only bean.</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>method</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color><color=#e6db74>"No write method for property: "</color> <color=#f92672>+</color> <color=#f8f8f2>mDescriptor</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>old</color> <color=#f92672>=</color> <color=#f8f8f2>getValue</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>method</color><color=#f8f8f2>.</color><color=#a6e22e>invoke</color><color=#f8f8f2>(</color><color=#f8f8f2>bean</color><color=#f8f8f2>,</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>old</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>});</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pOther</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>pOther</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>Entry</color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Entry</color><color=#f8f8f2>)</color> <color=#f8f8f2>pOther</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>Object</color> <color=#f8f8f2>k1</color> <color=#f92672>=</color> <color=#f8f8f2>getKey</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>Object</color> <color=#f8f8f2>k2</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>k1</color> <color=#f92672>==</color> <color=#f8f8f2>k2</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>k1</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>k1</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>k2</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>Object</color> <color=#f8f8f2>v1</color> <color=#f92672>=</color> <color=#f8f8f2>getValue</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>Object</color> <color=#f8f8f2>v2</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>();</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>v1</color> <color=#f92672>==</color> <color=#f8f8f2>v2</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>v1</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>v1</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>v2</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>hashCode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>getKey</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>getKey</color><color=#f8f8f2>().</color><color=#a6e22e>hashCode</color><color=#f8f8f2>())</color> <color=#f92672>^</color>
                    <color=#f8f8f2>(</color><color=#f8f8f2>getValue</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>getValue</color><color=#f8f8f2>().</color><color=#a6e22e>hashCode</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>getKey</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>"="</color> <color=#f92672>+</color> <color=#f8f8f2>getValue</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>interface</color> <color=#a6e22e>Wrapped</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Object</color> <color=#a6e22e>run</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalAccessException</color><color=#f8f8f2>,</color> <color=#f8f8f2>InvocationTargetException</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#a6e22e>unwrap</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Wrapped</color> <color=#f8f8f2>wrapped</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>wrapped</color><color=#f8f8f2>.</color><color=#a6e22e>run</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalAccessException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>RuntimeException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>InvocationTargetException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Javadocs for setValue indicate cast is ok.</color>
            <color=#66d9ef>throw</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color><color=#f8f8f2>)</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getCause</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>