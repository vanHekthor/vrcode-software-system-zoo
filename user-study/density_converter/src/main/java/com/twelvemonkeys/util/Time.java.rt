<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.util</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Utility class for storing times in a simple way. The internal time is stored</color>
<color=#75715e> * as an int, counting seconds.</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @todo Milliseconds!</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Time</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>time</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>SECONDS_IN_MINUTE</color> <color=#f92672>=</color> <color=#ae81ff>60</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a new time with 0 seconds, 0 minutes.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>Time</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a new time with the given time (in seconds).</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>Time</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pTime</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>setTime</color><color=#f8f8f2>(</color><color=#f8f8f2>pTime</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Sets the full time in seconds</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setTime</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pTime</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pTime</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Time argument must be 0 or positive!"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>time</color> <color=#f92672>=</color> <color=#f8f8f2>pTime</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the full time in seconds.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getTime</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>time</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the full time in milliseconds, for use in creating dates or</color>
<color=#75715e>     * similar.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @see java.util.Date#setTime(long)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getTimeInMillis</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>time</color> <color=#f92672>*</color> <color=#ae81ff>1000L</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Sets the seconds part of the time. Note, if the seconds argument is 60</color>
<color=#75715e>     * or greater, the value will "wrap", and increase the minutes also.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSeconds an integer that should be between 0 and 59.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setSeconds</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pSeconds</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>time</color> <color=#f92672>=</color> <color=#f8f8f2>getMinutes</color><color=#f8f8f2>()</color> <color=#f92672>*</color> <color=#f8f8f2>SECONDS_IN_MINUTE</color> <color=#f92672>+</color> <color=#f8f8f2>pSeconds</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the seconds part of the time.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return an integer between 0 and 59</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getSeconds</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>time</color> <color=#f92672>%</color> <color=#f8f8f2>SECONDS_IN_MINUTE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Sets the minutes part of the time.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pMinutes an integer</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setMinutes</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pMinutes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>time</color> <color=#f92672>=</color> <color=#f8f8f2>pMinutes</color> <color=#f92672>*</color> <color=#f8f8f2>SECONDS_IN_MINUTE</color> <color=#f92672>+</color> <color=#f8f8f2>getSeconds</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the minutes part of the time.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return an integer</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getMinutes</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>time</color> <color=#f92672>/</color> <color=#f8f8f2>SECONDS_IN_MINUTE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a string representation of the time object.</color>
<color=#75715e>     * The string is returned on the form m:ss,</color>
<color=#75715e>     * where m is variable digits minutes and ss is two digits seconds.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return a string representation of the time object</color>
<color=#75715e>     * @see #toString(String)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#e6db74>""</color> <color=#f92672>+</color> <color=#f8f8f2>getMinutes</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>":"</color>
                <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>getSeconds</color><color=#f8f8f2>()</color> <color=#f92672><</color> <color=#ae81ff>10</color> <color=#f92672>?</color> <color=#e6db74>"0"</color> <color=#f8f8f2>:</color> <color=#e6db74>""</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>getSeconds</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a string representation of the time object.</color>
<color=#75715e>     * The string returned is on the format of the formatstring.</color>
<color=#75715e>     * <DL></color>
<color=#75715e>     * <DD>m (or any multiple of m's)</color>
<color=#75715e>     * <DT>the minutes part (padded with 0's, if number has less digits than</color>
<color=#75715e>     * the number of m's)</color>
<color=#75715e>     * m -> 0,1,...,59,60,61,...</color>
<color=#75715e>     * mm -> 00,01,...,59,60,61,...</color>
<color=#75715e>     * <DD>s or ss</color>
<color=#75715e>     * <DT>the seconds part (padded with 0's, if number has less digits than</color>
<color=#75715e>     * the number of s's)</color>
<color=#75715e>     * s -> 0,1,...,59</color>
<color=#75715e>     * ss -> 00,01,...,59</color>
<color=#75715e>     * <DD>S</color>
<color=#75715e>     * <DT>all seconds (including the ones above 59)</color>
<color=#75715e>     * </DL></color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pFormatStr the format where</color>
<color=#75715e>     * @return a string representation of the time object</color>
<color=#75715e>     * @throws NumberFormatException</color>
<color=#75715e>     * @see TimeFormat#format(Time)</color>
<color=#75715e>     * @see #parseTime(String)</color>
<color=#75715e>     * @deprecated</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pFormatStr</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>TimeFormat</color> <color=#f8f8f2>tf</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>TimeFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>pFormatStr</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>tf</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a string representation of the time object.</color>
<color=#75715e>     * The string is returned on the form m:ss,</color>
<color=#75715e>     * where m is variable digits minutes and ss is two digits seconds.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return a string representation of the time object</color>
<color=#75715e>     * @throws NumberFormatException</color>
<color=#75715e>     * @see TimeFormat#parse(String)</color>
<color=#75715e>     * @see #toString(String)</color>
<color=#75715e>     * @deprecated</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Time</color> <color=#a6e22e>parseTime</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pStr</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>TimeFormat</color> <color=#f8f8f2>tf</color> <color=#f92672>=</color> <color=#f8f8f2>TimeFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>();</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>tf</color><color=#f8f8f2>.</color><color=#a6e22e>parse</color><color=#f8f8f2>(</color><color=#f8f8f2>pStr</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>