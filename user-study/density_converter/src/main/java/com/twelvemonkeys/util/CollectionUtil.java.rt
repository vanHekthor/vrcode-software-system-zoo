<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.util</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.lang.Validate</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Array</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>

<color=#f92672>import static</color> <color=#f8f8f2>com.twelvemonkeys.lang.Validate.isTrue</color><color=#f8f8f2>;</color>
<color=#f92672>import static</color> <color=#f8f8f2>com.twelvemonkeys.lang.Validate.notNull</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A utility class with some useful collection-related functions.</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author <A href="mailto:eirik.torske@twelvemonkeys.no">Eirik Torske</A></color>
<color=#75715e> * @author last modified by $Author: haku $</color>
<color=#75715e> * @version $Id: com/twelvemonkeys/util/CollectionUtil.java#3 $</color>
<color=#75715e> * @see Collections</color>
<color=#75715e> * @see Arrays</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>CollectionUtil</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Testing only.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pArgs command line arguents</color>
<color=#75715e>     */</color>
    <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>({</color><color=#e6db74>"UnusedDeclaration"</color><color=#f8f8f2>,</color> <color=#e6db74>"UnusedAssignment"</color><color=#f8f8f2>,</color> <color=#e6db74>"unchecked"</color><color=#f8f8f2>})</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>main</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>pArgs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>howMany</color> <color=#f92672>=</color> <color=#ae81ff>1000</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pArgs</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>howMany</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>start</color><color=#f8f8f2>;</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>end</color><color=#f8f8f2>;</color>

        <color=#75715e>/*</color>
<color=#75715e>      int[] intArr1 = new int[] {</color>
<color=#75715e>        0, 1, 2, 3, 4, 5, 6, 7, 8, 9</color>
<color=#75715e>      };</color>
<color=#75715e>      int[] intArr2 = new int[] {</color>
<color=#75715e>        10, 11, 12, 13, 14, 15, 16, 17, 18, 19</color>
<color=#75715e>      };</color>
<color=#75715e>      start = System.currentTimeMillis();</color>

<color=#75715e>      for (int i = 0; i < howMany; i++) {</color>
<color=#75715e>        intArr1 = (int[]) mergeArrays(intArr1, 0, intArr1.length, intArr2, 0, intArr2.length);</color>

<color=#75715e>      }</color>
<color=#75715e>      end = System.currentTimeMillis();</color>

<color=#75715e>      System.out.println("mergeArrays: " + howMany + " * " + intArr2.length + "  ints took " + (end - start) + " milliseconds (" + intArr1.length</color>
<color=#75715e>                         + ")");</color>
<color=#75715e>    */</color>

        <color=#75715e>////////////////////////////////</color>
        <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>stringArr1</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[]</color><color=#f8f8f2>{</color>
                <color=#e6db74>"zero"</color><color=#f8f8f2>,</color> <color=#e6db74>"one"</color><color=#f8f8f2>,</color> <color=#e6db74>"two"</color><color=#f8f8f2>,</color> <color=#e6db74>"three"</color><color=#f8f8f2>,</color> <color=#e6db74>"four"</color><color=#f8f8f2>,</color> <color=#e6db74>"five"</color><color=#f8f8f2>,</color> <color=#e6db74>"six"</color><color=#f8f8f2>,</color> <color=#e6db74>"seven"</color><color=#f8f8f2>,</color> <color=#e6db74>"eight"</color><color=#f8f8f2>,</color> <color=#e6db74>"nine"</color>
        <color=#f8f8f2>};</color>

        <color=#75715e>/*</color>
<color=#75715e>        String[] stringArr2 = new String[] {</color>
<color=#75715e>          "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"</color>
<color=#75715e>        };</color>

<color=#75715e>        start = System.currentTimeMillis();</color>
<color=#75715e>        for (int i = 0; i < howMany; i++) {</color>
<color=#75715e>          stringArr1 = (String[]) mergeArrays(stringArr1, 0, stringArr1.length, stringArr2, 0, stringArr2.length);</color>

<color=#75715e>        }</color>
<color=#75715e>        end = System.currentTimeMillis();</color>
<color=#75715e>        System.out.println("mergeArrays: " + howMany + " * " + stringArr2.length + "  Strings took " + (end - start) + " milliseconds ("</color>
<color=#75715e>                           + stringArr1.length + ")");</color>


<color=#75715e>          start   = System.currentTimeMillis();</color>
<color=#75715e>          while (intArr1.length > stringArr2.length) {</color>
<color=#75715e>            intArr1 = (int[]) subArray(intArr1, 0, intArr1.length - stringArr2.length);</color>

<color=#75715e>          }</color>
<color=#75715e>          end = System.currentTimeMillis();</color>

<color=#75715e>          System.out.println("subArray: " + howMany + " * " + intArr2.length + "  ints took " + (end - start) + " milliseconds (" + intArr1.length</color>
<color=#75715e>                             + ")");</color>

<color=#75715e>          start = System.currentTimeMillis();</color>
<color=#75715e>          while (stringArr1.length > stringArr2.length) {</color>
<color=#75715e>            stringArr1 = (String[]) subArray(stringArr1, stringArr2.length);</color>

<color=#75715e>          }</color>
<color=#75715e>          end = System.currentTimeMillis();</color>
<color=#75715e>          System.out.println("subArray: " + howMany + " * " + stringArr2.length + "  Strings took " + (end - start) + " milliseconds ("</color>
<color=#75715e>                             + stringArr1.length + ")");</color>

<color=#75715e>    */</color>
        <color=#f8f8f2>stringArr1</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[]</color><color=#f8f8f2>{</color>
                <color=#e6db74>"zero"</color><color=#f8f8f2>,</color> <color=#e6db74>"one"</color><color=#f8f8f2>,</color> <color=#e6db74>"two"</color><color=#f8f8f2>,</color> <color=#e6db74>"three"</color><color=#f8f8f2>,</color> <color=#e6db74>"four"</color><color=#f8f8f2>,</color> <color=#e6db74>"five"</color><color=#f8f8f2>,</color> <color=#e6db74>"six"</color><color=#f8f8f2>,</color> <color=#e6db74>"seven"</color><color=#f8f8f2>,</color> <color=#e6db74>"eight"</color><color=#f8f8f2>,</color> <color=#e6db74>"nine"</color><color=#f8f8f2>,</color> <color=#e6db74>"ten"</color><color=#f8f8f2>,</color> <color=#e6db74>"eleven"</color><color=#f8f8f2>,</color> <color=#e6db74>"twelve"</color><color=#f8f8f2>,</color> <color=#e6db74>"thirteen"</color><color=#f8f8f2>,</color> <color=#e6db74>"fourteen"</color><color=#f8f8f2>,</color>
                <color=#e6db74>"fifteen"</color><color=#f8f8f2>,</color> <color=#e6db74>"sixteen"</color><color=#f8f8f2>,</color> <color=#e6db74>"seventeen"</color><color=#f8f8f2>,</color> <color=#e6db74>"eighteen"</color><color=#f8f8f2>,</color> <color=#e6db74>"nineteen"</color>
        <color=#f8f8f2>};</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"\nFilterIterators:\n"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>List</color> <color=#f8f8f2>list</color> <color=#f92672>=</color> <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>asList</color><color=#f8f8f2>(</color><color=#f8f8f2>stringArr1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>Iterator</color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FilterIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>list</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>(),</color> <color=#66d9ef>new</color> <color=#f8f8f2>FilterIterator</color><color=#f8f8f2>.</color><color=#a6e22e>Filter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

            <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>accept</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pElement</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>pElement</color><color=#f8f8f2>).</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>});</color>

        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>str</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>

            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>str</color> <color=#f92672>+</color> <color=#e6db74>" has more than 5 letters!"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FilterIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>list</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>(),</color> <color=#66d9ef>new</color> <color=#f8f8f2>FilterIterator</color><color=#f8f8f2>.</color><color=#a6e22e>Filter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

            <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>accept</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pElement</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>pElement</color><color=#f8f8f2>).</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672><=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>});</color>

        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>str</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>

            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#f8f8f2>str</color> <color=#f92672>+</color> <color=#e6db74>" has less than, or exactly 5 letters!"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>start</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>();</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>howMany</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FilterIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>list</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>(),</color> <color=#66d9ef>new</color> <color=#f8f8f2>FilterIterator</color><color=#f8f8f2>.</color><color=#a6e22e>Filter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

                <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>accept</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pElement</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>pElement</color><color=#f8f8f2>).</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672><=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>});</color>
            <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>""</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

<color=#75715e>//        end = System.currentTimeMillis();</color>
<color=#75715e>//        System.out.println("Time: " + (end - start) + " ms");</color>
<color=#75715e>//        System.out.println("\nClosureCollection:\n");</color>
<color=#75715e>//        forEach(list, new Closure() {</color>
<color=#75715e>//</color>
<color=#75715e>//            public void execute(Object pElement) {</color>
<color=#75715e>//</color>
<color=#75715e>//                String str = (String) pElement;</color>
<color=#75715e>//</color>
<color=#75715e>//                if (str.length() > 5) {</color>
<color=#75715e>//                    System.out.println(str + " has more than 5 letters!");</color>
<color=#75715e>//                }</color>
<color=#75715e>//                else {</color>
<color=#75715e>//                    System.out.println(str + " has less than, or exactly 5 letters!");</color>
<color=#75715e>//                }</color>
<color=#75715e>//            }</color>
<color=#75715e>//        });</color>
<color=#75715e>//        start = System.currentTimeMillis();</color>
<color=#75715e>//        for (int i = 0; i < howMany; i++) {</color>
<color=#75715e>//            forEach(list, new Closure() {</color>
<color=#75715e>//</color>
<color=#75715e>//                public void execute(Object pElement) {</color>
<color=#75715e>//</color>
<color=#75715e>//                    String str = (String) pElement;</color>
<color=#75715e>//</color>
<color=#75715e>//                    if (str.length() <= 5) {</color>
<color=#75715e>//                        System.out.print("");</color>
<color=#75715e>//                    }</color>
<color=#75715e>//                }</color>
<color=#75715e>//            });</color>
<color=#75715e>//        }</color>
<color=#75715e>//        end = System.currentTimeMillis();</color>
<color=#75715e>//        System.out.println("Time: " + (end - start) + " ms");</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// Disallow creating objects of this type</color>
    <color=#66d9ef>private</color> <color=#a6e22e>CollectionUtil</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Merges two arrays into a new array. Elements from array1 and array2 will</color>
<color=#75715e>     * be copied into a new array, that has array1.length + array2.length</color>
<color=#75715e>     * elements.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pArray1 First array</color>
<color=#75715e>     * @param pArray2 Second array, must be compatible with (assignable from)</color>
<color=#75715e>     *                the first array</color>
<color=#75715e>     * @return A new array, containing the values of array1 and array2. The</color>
<color=#75715e>     * array (wrapped as an object), will have the length of array1 +</color>
<color=#75715e>     * array2, and can be safely cast to the type of the array1</color>
<color=#75715e>     * parameter.</color>
<color=#75715e>     * @see #mergeArrays(Object, int, int, Object, int, int)</color>
<color=#75715e>     * @see System#arraycopy(Object, int, Object, int, int)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#a6e22e>mergeArrays</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pArray1</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>pArray2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>mergeArrays</color><color=#f8f8f2>(</color><color=#f8f8f2>pArray1</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>Array</color><color=#f8f8f2>.</color><color=#a6e22e>getLength</color><color=#f8f8f2>(</color><color=#f8f8f2>pArray1</color><color=#f8f8f2>),</color> <color=#f8f8f2>pArray2</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>Array</color><color=#f8f8f2>.</color><color=#a6e22e>getLength</color><color=#f8f8f2>(</color><color=#f8f8f2>pArray2</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Merges two arrays into a new array. Elements from pArray1 and pArray2 will</color>
<color=#75715e>     * be copied into a new array, that has pLength1 + pLength2 elements.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pArray1  First array</color>
<color=#75715e>     * @param pOffset1 the offset into the first array</color>
<color=#75715e>     * @param pLength1 the number of elements to copy from the first array</color>
<color=#75715e>     * @param pArray2  Second array, must be compatible with (assignable from)</color>
<color=#75715e>     *                 the first array</color>
<color=#75715e>     * @param pOffset2 the offset into the second array</color>
<color=#75715e>     * @param pLength2 the number of elements to copy from the second array</color>
<color=#75715e>     * @return A new array, containing the values of pArray1 and pArray2. The</color>
<color=#75715e>     * array (wrapped as an object), will have the length of pArray1 +</color>
<color=#75715e>     * pArray2, and can be safely cast to the type of the pArray1</color>
<color=#75715e>     * parameter.</color>
<color=#75715e>     * @see System#arraycopy(Object, int, Object, int, int)</color>
<color=#75715e>     */</color>
    <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>({</color><color=#e6db74>"SuspiciousSystemArraycopy"</color><color=#f8f8f2>})</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#a6e22e>mergeArrays</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pArray1</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pOffset1</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength1</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>pArray2</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pOffset2</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Class</color> <color=#f8f8f2>class1</color> <color=#f92672>=</color> <color=#f8f8f2>pArray1</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>Class</color> <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>class1</color><color=#f8f8f2>.</color><color=#a6e22e>getComponentType</color><color=#f8f8f2>();</color>

        <color=#75715e>// Create new array of the new length</color>
        <color=#f8f8f2>Object</color> <color=#f8f8f2>array</color> <color=#f92672>=</color> <color=#f8f8f2>Array</color><color=#f8f8f2>.</color><color=#a6e22e>newInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength1</color> <color=#f92672>+</color> <color=#f8f8f2>pLength2</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>pArray1</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOffset1</color><color=#f8f8f2>,</color> <color=#f8f8f2>array</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>pArray2</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOffset2</color><color=#f8f8f2>,</color> <color=#f8f8f2>array</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength1</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength2</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>array</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates an array containing a subset of the original array.</color>
<color=#75715e>     * If the sub array is same length as the original</color>
<color=#75715e>     * ({@code pStart == 0}), the original array will be returned.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pArray the original array</color>
<color=#75715e>     * @param pStart the start index of the original array</color>
<color=#75715e>     * @return a subset of the original array, or the original array itself,</color>
<color=#75715e>     * if {@code pStart} is 0.</color>
<color=#75715e>     * @throws IllegalArgumentException       if {@code pArray} is {@code null} or</color>
<color=#75715e>     *                                        if {@code pArray} is not an array.</color>
<color=#75715e>     * @throws ArrayIndexOutOfBoundsException if {@code pStart} < 0</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#a6e22e>subArray</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pArray</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pStart</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>subArray</color><color=#f8f8f2>(</color><color=#f8f8f2>pArray</color><color=#f8f8f2>,</color> <color=#f8f8f2>pStart</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates an array containing a subset of the original array.</color>
<color=#75715e>     * If the sub array is same length as the original</color>
<color=#75715e>     * ({@code pStart == 0}), the original array will be returned.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pArray the original array</color>
<color=#75715e>     * @param pStart the start index of the original array</color>
<color=#75715e>     * @return a subset of the original array, or the original array itself,</color>
<color=#75715e>     * if {@code pStart} is 0.</color>
<color=#75715e>     * @throws IllegalArgumentException       if {@code pArray} is {@code null}</color>
<color=#75715e>     * @throws ArrayIndexOutOfBoundsException if {@code pStart} < 0</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>T</color><color=#f92672>[]</color> <color=#a6e22e>subArray</color><color=#f8f8f2>(</color><color=#f8f8f2>T</color><color=#f92672>[]</color> <color=#f8f8f2>pArray</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pStart</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>subArray</color><color=#f8f8f2>(</color><color=#f8f8f2>pArray</color><color=#f8f8f2>,</color> <color=#f8f8f2>pStart</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates an array containing a subset of the original array.</color>
<color=#75715e>     * If the {@code pLength} parameter is negative, it will be ignored.</color>
<color=#75715e>     * If there are not {@code pLength} elements in the original array</color>
<color=#75715e>     * after {@code pStart}, the {@code pLength} parameter will be</color>
<color=#75715e>     * ignored.</color>
<color=#75715e>     * If the sub array is same length as the original, the original array will</color>
<color=#75715e>     * be returned.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pArray  the original array</color>
<color=#75715e>     * @param pStart  the start index of the original array</color>
<color=#75715e>     * @param pLength the length of the new array</color>
<color=#75715e>     * @return a subset of the original array, or the original array itself,</color>
<color=#75715e>     * if {@code pStart} is 0 and {@code pLength} is either</color>
<color=#75715e>     * negative, or greater or equal to {@code pArray.length}.</color>
<color=#75715e>     * @throws IllegalArgumentException       if {@code pArray} is {@code null} or</color>
<color=#75715e>     *                                        if {@code pArray} is not an array.</color>
<color=#75715e>     * @throws ArrayIndexOutOfBoundsException if {@code pStart} < 0</color>
<color=#75715e>     */</color>
    <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>({</color><color=#e6db74>"SuspiciousSystemArraycopy"</color><color=#f8f8f2>})</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#a6e22e>subArray</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pArray</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pStart</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Validate</color><color=#f8f8f2>.</color><color=#a6e22e>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>pArray</color><color=#f8f8f2>,</color> <color=#e6db74>"array"</color><color=#f8f8f2>);</color>

        <color=#75715e>// Get component type</color>
        <color=#f8f8f2>Class</color> <color=#f8f8f2>type</color><color=#f8f8f2>;</color>

        <color=#75715e>// Sanity check start index</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pStart</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayIndexOutOfBoundsException</color><color=#f8f8f2>(</color><color=#f8f8f2>pStart</color> <color=#f92672>+</color> <color=#e6db74>" < 0"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>// Check if argument is array</color>
        <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>pArray</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getComponentType</color><color=#f8f8f2>())</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// NOTE: No need to test class.isArray(), really</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Not an array: "</color> <color=#f92672>+</color> <color=#f8f8f2>pArray</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Store original length</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>originalLength</color> <color=#f92672>=</color> <color=#f8f8f2>Array</color><color=#f8f8f2>.</color><color=#a6e22e>getLength</color><color=#f8f8f2>(</color><color=#f8f8f2>pArray</color><color=#f8f8f2>);</color>

        <color=#75715e>// Find new length, stay within bounds</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>newLength</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLength</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color>
                <color=#f92672>?</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>originalLength</color> <color=#f92672>-</color> <color=#f8f8f2>pStart</color><color=#f8f8f2>)</color>
                <color=#f8f8f2>:</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>pLength</color><color=#f8f8f2>,</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>originalLength</color> <color=#f92672>-</color> <color=#f8f8f2>pStart</color><color=#f8f8f2>));</color>

        <color=#75715e>// Store result</color>
        <color=#f8f8f2>Object</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newLength</color> <color=#f92672><</color> <color=#f8f8f2>originalLength</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Create sub array & copy into</color>
            <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>Array</color><color=#f8f8f2>.</color><color=#a6e22e>newInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>newLength</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>pArray</color><color=#f8f8f2>,</color> <color=#f8f8f2>pStart</color><color=#f8f8f2>,</color> <color=#f8f8f2>result</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>newLength</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Just return original array</color>
            <color=#75715e>// NOTE: This can ONLY happen if pStart == 0</color>
            <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>pArray</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Return</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates an array containing a subset of the original array.</color>
<color=#75715e>     * If the {@code pLength} parameter is negative, it will be ignored.</color>
<color=#75715e>     * If there are not {@code pLength} elements in the original array</color>
<color=#75715e>     * after {@code pStart}, the {@code pLength} parameter will be</color>
<color=#75715e>     * ignored.</color>
<color=#75715e>     * If the sub array is same length as the original, the original array will</color>
<color=#75715e>     * be returned.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pArray  the original array</color>
<color=#75715e>     * @param pStart  the start index of the original array</color>
<color=#75715e>     * @param pLength the length of the new array</color>
<color=#75715e>     * @return a subset of the original array, or the original array itself,</color>
<color=#75715e>     * if {@code pStart} is 0 and {@code pLength} is either</color>
<color=#75715e>     * negative, or greater or equal to {@code pArray.length}.</color>
<color=#75715e>     * @throws IllegalArgumentException       if {@code pArray} is {@code null}</color>
<color=#75715e>     * @throws ArrayIndexOutOfBoundsException if {@code pStart} < 0</color>
<color=#75715e>     */</color>
    <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unchecked"</color><color=#f8f8f2>)</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>T</color><color=#f92672>[]</color> <color=#a6e22e>subArray</color><color=#f8f8f2>(</color><color=#f8f8f2>T</color><color=#f92672>[]</color> <color=#f8f8f2>pArray</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pStart</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>T</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>subArray</color><color=#f8f8f2>((</color><color=#f8f8f2>Object</color><color=#f8f8f2>)</color> <color=#f8f8f2>pArray</color><color=#f8f8f2>,</color> <color=#f8f8f2>pStart</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>iterator</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Enumeration</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>pEnum</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>pEnum</color><color=#f8f8f2>,</color> <color=#e6db74>"enumeration"</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasNext</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>pEnum</color><color=#f8f8f2>.</color><color=#a6e22e>hasMoreElements</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>public</color> <color=#f8f8f2>T</color> <color=#a6e22e>next</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>pEnum</color><color=#f8f8f2>.</color><color=#a6e22e>nextElement</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>remove</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>};</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Adds all elements of the iterator to the collection.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pCollection the collection</color>
<color=#75715e>     * @param pIterator   the elements to add</color>
<color=#75715e>     * @throws UnsupportedOperationException if {@code add} is not supported by</color>
<color=#75715e>     *                                       the given collection.</color>
<color=#75715e>     * @throws ClassCastException            class of the specified element prevents it</color>
<color=#75715e>     *                                       from being added to this collection.</color>
<color=#75715e>     * @throws NullPointerException          if the specified element is {@code null} and this</color>
<color=#75715e>     *                                       collection does not support {@code null} elements.</color>
<color=#75715e>     * @throws IllegalArgumentException      some aspect of this element prevents</color>
<color=#75715e>     *                                       it from being added to this collection.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#66d9ef>void</color> <color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>pCollection</color><color=#f8f8f2>,</color> <color=#f8f8f2>Iterator</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>pIterator</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>pIterator</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pCollection</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>pIterator</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// Is there a use case where Arrays.asList(pArray).iterator() can't ne used?</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a thin {@link Iterator} wrapper around an array.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pArray the array to iterate</color>
<color=#75715e>     * @return a new {@link ListIterator}</color>
<color=#75715e>     * @throws IllegalArgumentException if {@code pArray} is {@code null},</color>
<color=#75715e>     *                                  {@code pStart < 0}, or</color>
<color=#75715e>     *                                  {@code pLength > pArray.length - pStart}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>ListIterator</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#a6e22e>iterator</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>E</color><color=#f92672>[]</color> <color=#f8f8f2>pArray</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>iterator</color><color=#f8f8f2>(</color><color=#f8f8f2>pArray</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>pArray</color><color=#f8f8f2>).</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a thin {@link Iterator} wrapper around an array.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pArray  the array to iterate</color>
<color=#75715e>     * @param pStart  the offset into the array</color>
<color=#75715e>     * @param pLength the number of elements to include in the iterator</color>
<color=#75715e>     * @return a new {@link ListIterator}</color>
<color=#75715e>     * @throws IllegalArgumentException if {@code pArray} is {@code null},</color>
<color=#75715e>     *                                  {@code pStart < 0}, or</color>
<color=#75715e>     *                                  {@code pLength > pArray.length - pStart}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>ListIterator</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#a6e22e>iterator</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>E</color><color=#f92672>[]</color> <color=#f8f8f2>pArray</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pStart</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayIterator</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>pArray</color><color=#f8f8f2>,</color> <color=#f8f8f2>pStart</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates an inverted mapping of the key/value pairs in the given map.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSource the source map</color>
<color=#75715e>     * @return a new {@code Map} of same type as {@code pSource}</color>
<color=#75715e>     * @throws IllegalArgumentException if {@code pSource == null},</color>
<color=#75715e>     *                                  or if a new map can't be instantiated,</color>
<color=#75715e>     *                                  or if source map contains duplicates.</color>
<color=#75715e>     * @see #invert(Map, Map, DuplicateHandler)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f8f8f2>,</color> <color=#f8f8f2>K</color><color=#f92672>></color> <color=#a6e22e>invert</color><color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>pSource</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>invert</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates an inverted mapping of the key/value pairs in the given map.</color>
<color=#75715e>     * Optionally, a duplicate handler may be specified, to resolve duplicate keys in the result map.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSource  the source map</color>
<color=#75715e>     * @param pResult  the map used to contain the result, may be {@code null},</color>
<color=#75715e>     *                 in that case a new {@code Map} of same type as {@code pSource} is created.</color>
<color=#75715e>     *                 The result map <em>should</em> be empty, otherwise duplicate values will need to be resolved.</color>
<color=#75715e>     * @param pHandler duplicate handler, may be {@code null} if source map don't contain duplicate values</color>
<color=#75715e>     * @return {@code pResult}, or a new {@code Map} if {@code pResult == null}</color>
<color=#75715e>     * @throws IllegalArgumentException if {@code pSource == null},</color>
<color=#75715e>     *                                  or if result map is {@code null} and a new map can't be instantiated,</color>
<color=#75715e>     *                                  or if source map contains duplicate values and {@code pHandler == null}.</color>
<color=#75715e>     */</color>
    <color=#75715e>// TODO: Create a better duplicate handler, that takes Entries as parameters and returns an Entry</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f8f8f2>,</color> <color=#f8f8f2>K</color><color=#f92672>></color> <color=#a6e22e>invert</color><color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f8f8f2>,</color> <color=#f8f8f2>K</color><color=#f92672>></color> <color=#f8f8f2>pResult</color><color=#f8f8f2>,</color> <color=#f8f8f2>DuplicateHandler</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f92672>></color> <color=#f8f8f2>pHandler</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pSource</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"source == null"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f8f8f2>,</color> <color=#f8f8f2>K</color><color=#f92672>></color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>pResult</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                <color=#75715e>//noinspection unchecked</color>
                <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>newInstance</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InstantiationException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Handled below</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalAccessException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Handled below</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"result == null and source class "</color> <color=#f92672>+</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" cannot be instantiated."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Copy entries into result map, inversed</color>
        <color=#f8f8f2>Set</color><color=#f92672><</color><color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>>></color> <color=#f8f8f2>entries</color> <color=#f92672>=</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>entrySet</color><color=#f8f8f2>();</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>entry</color> <color=#f8f8f2>:</color> <color=#f8f8f2>entries</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>V</color> <color=#f8f8f2>newKey</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>K</color> <color=#f8f8f2>newValue</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>();</color>

            <color=#75715e>// Handle dupliates</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>newKey</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pHandler</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>newValue</color> <color=#f92672>=</color> <color=#f8f8f2>pHandler</color><color=#f8f8f2>.</color><color=#a6e22e>resolve</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>newKey</color><color=#f8f8f2>),</color> <color=#f8f8f2>newValue</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Result would include duplicate keys, but no DuplicateHandler specified."</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>newKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>newValue</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>reverseOrder</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>pOriginal</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ReverseComparator</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>pOriginal</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ReverseComparator</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#66d9ef>implements</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>{</color>
        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>comparator</color><color=#f8f8f2>;</color>

        <color=#66d9ef>public</color> <color=#a6e22e>ReverseComparator</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Comparator</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>pComparator</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>comparator</color> <color=#f92672>=</color> <color=#f8f8f2>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>pComparator</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>


        <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>compare</color><color=#f8f8f2>(</color><color=#f8f8f2>T</color> <color=#f8f8f2>pLeft</color><color=#f8f8f2>,</color> <color=#f8f8f2>T</color> <color=#f8f8f2>pRight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>comparator</color><color=#f8f8f2>.</color><color=#a6e22e>compare</color><color=#f8f8f2>(</color><color=#f8f8f2>pLeft</color><color=#f8f8f2>,</color> <color=#f8f8f2>pRight</color><color=#f8f8f2>);</color>

            <color=#75715e>// We can't simply return -result, as -Integer.MIN_VALUE == Integer.MIN_VALUE.</color>
            <color=#66d9ef>return</color> <color=#f92672>-</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>>>></color> <color=#ae81ff>1</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>({</color><color=#e6db74>"unchecked"</color><color=#f8f8f2>,</color> <color=#e6db74>"UnusedDeclaration"</color><color=#f8f8f2>})</color>
    <color=#66d9ef>static</color> <color=#f92672><</color><color=#f8f8f2>T</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Iterator</color><color=#f92672><?</color> <color=#66d9ef>super</color> <color=#f8f8f2>E</color><color=#f92672>></color><color=#f8f8f2>,</color> <color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>T</color> <color=#a6e22e>generify</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Iterator</color><color=#f92672><?></color> <color=#f8f8f2>pIterator</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Class</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>pElementType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>T</color><color=#f8f8f2>)</color> <color=#f8f8f2>pIterator</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>({</color><color=#e6db74>"unchecked"</color><color=#f8f8f2>,</color> <color=#e6db74>"UnusedDeclaration"</color><color=#f8f8f2>})</color>
    <color=#66d9ef>static</color> <color=#f92672><</color><color=#f8f8f2>T</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Collection</color><color=#f92672><?</color> <color=#66d9ef>super</color> <color=#f8f8f2>E</color><color=#f92672>></color><color=#f8f8f2>,</color> <color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>T</color> <color=#a6e22e>generify</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Collection</color><color=#f92672><?></color> <color=#f8f8f2>pCollection</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Class</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>pElementType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>T</color><color=#f8f8f2>)</color> <color=#f8f8f2>pCollection</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>({</color><color=#e6db74>"unchecked"</color><color=#f8f8f2>,</color> <color=#e6db74>"UnusedDeclaration"</color><color=#f8f8f2>})</color>
    <color=#66d9ef>static</color> <color=#f92672><</color><color=#f8f8f2>T</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Map</color><color=#f92672><?</color> <color=#66d9ef>super</color> <color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f92672>?</color> <color=#66d9ef>super</color> <color=#f8f8f2>V</color><color=#f92672>></color><color=#f8f8f2>,</color> <color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>T</color> <color=#a6e22e>generify</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><?</color><color=#f8f8f2>,</color> <color=#f92672>?></color> <color=#f8f8f2>pMap</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Class</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f92672>></color> <color=#f8f8f2>pKeyType</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Class</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>pValueType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>T</color><color=#f8f8f2>)</color> <color=#f8f8f2>pMap</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>({</color><color=#e6db74>"unchecked"</color><color=#f8f8f2>})</color>
    <color=#66d9ef>static</color> <color=#f92672><</color><color=#f8f8f2>T</color> <color=#66d9ef>extends</color> <color=#f8f8f2>Collection</color><color=#f92672><?</color> <color=#66d9ef>super</color> <color=#f8f8f2>E</color><color=#f92672>></color><color=#f8f8f2>,</color> <color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>T</color> <color=#a6e22e>generify2</color><color=#f8f8f2>(</color><color=#f8f8f2>Collection</color><color=#f92672><?></color> <color=#f8f8f2>pCollection</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>T</color><color=#f8f8f2>)</color> <color=#f8f8f2>pCollection</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ArrayIterator</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#66d9ef>implements</color> <color=#f8f8f2>ListIterator</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>{</color>
        <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>next</color><color=#f8f8f2>;</color>
        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>start</color><color=#f8f8f2>;</color>
        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>length</color><color=#f8f8f2>;</color>
        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>E</color><color=#f92672>[]</color> <color=#f8f8f2>array</color><color=#f8f8f2>;</color>

        <color=#66d9ef>public</color> <color=#a6e22e>ArrayIterator</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>E</color><color=#f92672>[]</color> <color=#f8f8f2>pArray</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pStart</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>array</color> <color=#f92672>=</color> <color=#f8f8f2>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>pArray</color><color=#f8f8f2>,</color> <color=#e6db74>"array"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>start</color> <color=#f92672>=</color> <color=#f8f8f2>isTrue</color><color=#f8f8f2>(</color><color=#f8f8f2>pStart</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>pStart</color><color=#f8f8f2>,</color> <color=#e6db74>"start < 0: %d"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>length</color> <color=#f92672>=</color> <color=#f8f8f2>isTrue</color><color=#f8f8f2>(</color><color=#f8f8f2>pLength</color> <color=#f92672><=</color> <color=#f8f8f2>pArray</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#f8f8f2>pStart</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>,</color> <color=#e6db74>"length > array.length - start: %d"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>next</color> <color=#f92672>=</color> <color=#f8f8f2>start</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasNext</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>next</color> <color=#f92672><</color> <color=#f8f8f2>length</color> <color=#f92672>+</color> <color=#f8f8f2>start</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#f8f8f2>E</color> <color=#a6e22e>next</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NoSuchElementException</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>array</color><color=#f92672>[</color><color=#f8f8f2>next</color><color=#f92672>++]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ArrayIndexOutOfBoundsException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>NoSuchElementException</color> <color=#f8f8f2>nse</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>NoSuchElementException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
                <color=#f8f8f2>nse</color><color=#f8f8f2>.</color><color=#a6e22e>initCause</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
                <color=#66d9ef>throw</color> <color=#f8f8f2>nse</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>remove</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color> <color=#f8f8f2>pElement</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasPrevious</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>next</color> <color=#f92672>></color> <color=#f8f8f2>start</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>nextIndex</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>next</color> <color=#f92672>-</color> <color=#f8f8f2>start</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#f8f8f2>E</color> <color=#a6e22e>previous</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>hasPrevious</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NoSuchElementException</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>array</color><color=#f92672>[--</color><color=#f8f8f2>next</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ArrayIndexOutOfBoundsException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>NoSuchElementException</color> <color=#f8f8f2>nse</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>NoSuchElementException</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
                <color=#f8f8f2>nse</color><color=#f8f8f2>.</color><color=#a6e22e>initCause</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
                <color=#66d9ef>throw</color> <color=#f8f8f2>nse</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>previousIndex</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>nextIndex</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>set</color><color=#f8f8f2>(</color><color=#f8f8f2>E</color> <color=#f8f8f2>pElement</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>array</color><color=#f92672>[</color><color=#f8f8f2>next</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>pElement</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>