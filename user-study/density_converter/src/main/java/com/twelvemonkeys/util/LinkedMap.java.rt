<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.util</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.Serializable</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Generic map and linked list implementation of the {@code Map} interface,</color>
<color=#75715e> * with predictable iteration order.</color>
<color=#75715e> * <p></color>
<color=#75715e> * Resembles {@code LinkedHashMap} from JDK 1.4+, but is backed by a generic</color>
<color=#75715e> * {@code Map}, rather than implementing a particular algoritm.</color>
<color=#75715e> * <p></color>
<color=#75715e> * This linked list defines the iteration ordering, which is normally the order</color>
<color=#75715e> * in which keys were inserted into the map (<em>insertion-order</em>).</color>
<color=#75715e> * Note that insertion order is not affected if a key is <em>re-inserted</em></color>
<color=#75715e> * into the map (a key {@code k} is reinserted into a map {@code m} if</color>
<color=#75715e> * {@code m.put(k, v)} is invoked when {@code m.containsKey(k)} would return</color>
<color=#75715e> * {@code true} immediately prior to the invocation).</color>
<color=#75715e> * <p></color>
<color=#75715e> * A special {@link #LinkedMap(boolean) constructor} is provided to create a</color>
<color=#75715e> * linked hash map whose order of iteration is the order in which its entries</color>
<color=#75715e> * were last accessed, from least-recently accessed to most-recently</color>
<color=#75715e> * (<em>access-order</em>).</color>
<color=#75715e> * This kind of map is well-suited to building LRU caches.</color>
<color=#75715e> * Invoking the {@code put} or {@code get} method results in an access to the</color>
<color=#75715e> * corresponding entry (assuming it exists after the invocation completes).</color>
<color=#75715e> * The {@code putAll} method generates one entry access for each mapping in</color>
<color=#75715e> * the specified map, in the order that key-value mappings are provided by the</color>
<color=#75715e> * specified map's entry set iterator.</color>
<color=#75715e> * <em>No other methods generate entry accesses.</em></color>
<color=#75715e> * In particular, operations on collection-views do not affect the order of</color>
<color=#75715e> * iteration of the backing map.</color>
<color=#75715e> * <p></color>
<color=#75715e> * The {@link #removeEldestEntry(Entry)} method may be overridden to impose</color>
<color=#75715e> * a policy for removing stale mappings automatically when new mappings are</color>
<color=#75715e> * added to the map.</color>
<color=#75715e> *</color>
<color=#75715e> * @author inspired by LinkedHashMap from JDK 1.4+, by Josh Bloch</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @version $Id: //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/util/LinkedMap.java#1 $</color>
<color=#75715e> * @see LinkedHashMap</color>
<color=#75715e> * @see LRUMap</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>LinkedMap</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractDecoratedMap</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#66d9ef>implements</color> <color=#f8f8f2>Serializable</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>transient</color> <color=#f8f8f2>LinkedEntry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>head</color><color=#f8f8f2>;</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>accessOrder</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@code LinkedMap} backed by a {@code HashMap}, with default</color>
<color=#75715e>     * (insertion) order.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>LinkedMap</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@code LinkedMap} backed by a {@code HashMap}, with the</color>
<color=#75715e>     * given order.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pAccessOrder if {@code true}, ordering will be "least recently</color>
<color=#75715e>     *                     accessed item" to "latest accessed item", otherwise "first inserted item"</color>
<color=#75715e>     *                     to "latest inserted item".</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>LinkedMap</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>pAccessOrder</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>pAccessOrder</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@code LinkedMap} backed by a {@code HashMap}, with key/value</color>
<color=#75715e>     * pairs copied from {@code pContents} and default (insertion) order.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pContents the map whose mappings are to be placed in this map.</color>
<color=#75715e>     *                  May be {@code null}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>LinkedMap</color><color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f92672>?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>pContents</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>pContents</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@code LinkedMap} backed by a {@code HashMap}, with key/value</color>
<color=#75715e>     * pairs copied from {@code pContents} and the given order.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pContents    the map whose mappings are to be placed in this map.</color>
<color=#75715e>     *                     May be {@code null}.</color>
<color=#75715e>     * @param pAccessOrder if {@code true}, ordering will be "least recently</color>
<color=#75715e>     *                     accessed item" to "latest accessed item", otherwise "first inserted item"</color>
<color=#75715e>     *                     to "latest inserted item".</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>LinkedMap</color><color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f92672>?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>pContents</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pAccessOrder</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>pContents</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>accessOrder</color> <color=#f92672>=</color> <color=#f8f8f2>pAccessOrder</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@code LinkedMap} backed by the given map, with key/value</color>
<color=#75715e>     * pairs copied from {@code pContents} and default (insertion) order.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pBacking  the backing map of this map. Must be either empty, or</color>
<color=#75715e>     *                  the same map as {@code pContents}.</color>
<color=#75715e>     * @param pContents the map whose mappings are to be placed in this map.</color>
<color=#75715e>     *                  May be {@code null}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>LinkedMap</color><color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>>></color> <color=#f8f8f2>pBacking</color><color=#f8f8f2>,</color> <color=#f8f8f2>Map</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f92672>?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>pContents</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>pBacking</color><color=#f8f8f2>,</color> <color=#f8f8f2>pContents</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@code LinkedMap} backed by the given map, with key/value</color>
<color=#75715e>     * pairs copied from {@code pContents} and the given order.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pBacking     the backing map of this map. Must be either empty, or</color>
<color=#75715e>     *                     the same map as {@code pContents}.</color>
<color=#75715e>     * @param pContents    the map whose mappings are to be placed in this map.</color>
<color=#75715e>     *                     May be {@code null}.</color>
<color=#75715e>     * @param pAccessOrder if {@code true}, ordering will be "least recently</color>
<color=#75715e>     *                     accessed item" to "latest accessed item", otherwise "first inserted item"</color>
<color=#75715e>     *                     to "latest inserted item".</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>LinkedMap</color><color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>>></color> <color=#f8f8f2>pBacking</color><color=#f8f8f2>,</color> <color=#f8f8f2>Map</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f92672>?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>pContents</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pAccessOrder</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>pBacking</color><color=#f8f8f2>,</color> <color=#f8f8f2>pContents</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>accessOrder</color> <color=#f92672>=</color> <color=#f8f8f2>pAccessOrder</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>init</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>head</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>LinkedEntry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>void</color> <color=#a6e22e>addBefore</color><color=#f8f8f2>(</color><color=#f8f8f2>LinkedEntry</color> <color=#f8f8f2>pExisting</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>Error</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>void</color> <color=#a6e22e>remove</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>Error</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>recordAccess</color><color=#f8f8f2>(</color><color=#f8f8f2>Map</color> <color=#f8f8f2>pMap</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>Error</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>recordRemoval</color><color=#f8f8f2>(</color><color=#f8f8f2>Map</color> <color=#f8f8f2>pMap</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>Error</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>recordRemoval</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>Error</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>public</color> <color=#f8f8f2>V</color> <color=#a6e22e>getValue</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>Error</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>public</color> <color=#f8f8f2>V</color> <color=#a6e22e>setValue</color><color=#f8f8f2>(</color><color=#f8f8f2>V</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>Error</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>public</color> <color=#f8f8f2>K</color> <color=#a6e22e>getKey</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>Error</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#e6db74>"head"</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>};</color>
        <color=#f8f8f2>head</color><color=#f8f8f2>.</color><color=#a6e22e>previous</color> <color=#f92672>=</color> <color=#f8f8f2>head</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>head</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>containsValue</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Overridden to take advantage of faster iterator</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pValue</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>LinkedEntry</color> <color=#f8f8f2>e</color> <color=#f92672>=</color> <color=#f8f8f2>head</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color> <color=#f8f8f2>e</color> <color=#f92672>!=</color> <color=#f8f8f2>head</color><color=#f8f8f2>;</color> <color=#f8f8f2>e</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>mValue</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>LinkedEntry</color> <color=#f8f8f2>e</color> <color=#f92672>=</color> <color=#f8f8f2>head</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color> <color=#f8f8f2>e</color> <color=#f92672>!=</color> <color=#f8f8f2>head</color><color=#f8f8f2>;</color> <color=#f8f8f2>e</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pValue</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>mValue</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f92672>></color> <color=#a6e22e>newKeyIterator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>KeyIterator</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>></color> <color=#a6e22e>newValueIterator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ValueIterator</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>protected</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>>></color> <color=#a6e22e>newEntryIterator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>EntryIterator</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>LinkedMapIterator</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#66d9ef>implements</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>E</color><color=#f92672>></color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LinkedEntry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>mNextEntry</color> <color=#f92672>=</color> <color=#f8f8f2>head</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>LinkedEntry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>mLastReturned</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#75715e>/**</color>
<color=#75715e>         * The modCount value that the iterator believes that the backing</color>
<color=#75715e>         * List should have.  If this expectation is violated, the iterator</color>
<color=#75715e>         * has detected concurrent modification.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>mExpectedModCount</color> <color=#f92672>=</color> <color=#f8f8f2>modCount</color><color=#f8f8f2>;</color>

        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasNext</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>mNextEntry</color> <color=#f92672>!=</color> <color=#f8f8f2>head</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>remove</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mLastReturned</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>modCount</color> <color=#f92672>!=</color> <color=#f8f8f2>mExpectedModCount</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ConcurrentModificationException</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>LinkedMap</color><color=#f8f8f2>.</color><color=#a6e22e>this</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>mLastReturned</color><color=#f8f8f2>.</color><color=#a6e22e>mKey</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>mLastReturned</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>mExpectedModCount</color> <color=#f92672>=</color> <color=#f8f8f2>modCount</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>LinkedEntry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#a6e22e>nextEntry</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>modCount</color> <color=#f92672>!=</color> <color=#f8f8f2>mExpectedModCount</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ConcurrentModificationException</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mNextEntry</color> <color=#f92672>==</color> <color=#f8f8f2>head</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NoSuchElementException</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>LinkedEntry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>e</color> <color=#f92672>=</color> <color=#f8f8f2>mLastReturned</color> <color=#f92672>=</color> <color=#f8f8f2>mNextEntry</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>mNextEntry</color> <color=#f92672>=</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>

            <color=#66d9ef>return</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>KeyIterator</color> <color=#66d9ef>extends</color> <color=#f8f8f2>LinkedMapIterator</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f92672>></color> <color=#f8f8f2>{</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>K</color> <color=#a6e22e>next</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>nextEntry</color><color=#f8f8f2>().</color><color=#a6e22e>mKey</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>ValueIterator</color> <color=#66d9ef>extends</color> <color=#f8f8f2>LinkedMapIterator</color><color=#f92672><</color><color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>{</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>V</color> <color=#a6e22e>next</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>nextEntry</color><color=#f8f8f2>().</color><color=#a6e22e>mValue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>EntryIterator</color> <color=#66d9ef>extends</color> <color=#f8f8f2>LinkedMapIterator</color><color=#f92672><</color><color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>>></color> <color=#f8f8f2>{</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#a6e22e>next</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>nextEntry</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>V</color> <color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LinkedEntry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>LinkedEntry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color><color=#f8f8f2>)</color> <color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>pKey</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entry</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>recordAccess</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>mValue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>V</color> <color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LinkedEntry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>LinkedEntry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color><color=#f8f8f2>)</color> <color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>pKey</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entry</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>modCount</color><color=#f92672>++</color><color=#f8f8f2>;</color>

            <color=#66d9ef>return</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>mValue</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>V</color> <color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>K</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LinkedEntry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>LinkedEntry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color><color=#f8f8f2>)</color> <color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>pKey</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>V</color> <color=#f8f8f2>oldValue</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>entry</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>oldValue</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

            <color=#75715e>// Remove eldest entry if instructed, else grow capacity if appropriate</color>
            <color=#f8f8f2>LinkedEntry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>eldest</color> <color=#f92672>=</color> <color=#f8f8f2>head</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>removeEldestEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>eldest</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>removeEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>eldest</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>entry</color> <color=#f92672>=</color> <color=#f8f8f2>createEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>addBefore</color><color=#f8f8f2>(</color><color=#f8f8f2>head</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>entries</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>entry</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>oldValue</color> <color=#f92672>=</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>mValue</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>mValue</color> <color=#f92672>=</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>recordAccess</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>modCount</color><color=#f92672>++</color><color=#f8f8f2>;</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>oldValue</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a new {@code LinkedEntry}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pKey   the key</color>
<color=#75715e>     * @param pValue the value</color>
<color=#75715e>     * @return a new LinkedEntry</color>
<color=#75715e>     */</color>
    <color=#75715e>/*protected*/</color> <color=#f8f8f2>LinkedEntry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#a6e22e>createEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>K</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>LinkedEntry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * @return a copy of this map, with the same order and same key/value pairs.</color>
<color=#75715e>     * @todo</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>clone</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>CloneNotSupportedException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LinkedMap</color> <color=#f8f8f2>map</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>map</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>LinkedMap</color><color=#f8f8f2>)</color> <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>

        <color=#75715e>// TODO: The rest of the work is PROBABLY handled by</color>
        <color=#75715e>// AbstractDecoratedMap, but need to verify that.</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>map</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns {@code true} if this map should remove its eldest entry.</color>
<color=#75715e>     * This method is invoked by {@code put} and {@code putAll} after</color>
<color=#75715e>     * inserting a new entry into the map.  It provides the implementer</color>
<color=#75715e>     * with the opportunity to remove the eldest entry each time a new one</color>
<color=#75715e>     * is added.  This is useful if the map represents a cache: it allows</color>
<color=#75715e>     * the map to reduce memory consumption by deleting stale entries.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>Sample use: this override will allow the map to grow up to 100</color>
<color=#75715e>     * entries and then delete the eldest entry each time a new entry is</color>
<color=#75715e>     * added, maintaining a steady state of 100 entries.</color>
<color=#75715e>     * <pre></color>
<color=#75715e>     *     private static final int MAX_ENTRIES = 100;</color>
<color=#75715e>     *</color>
<color=#75715e>     *     protected boolean removeEldestEntry(Map.Entry eldest) {</color>
<color=#75715e>     *        return size() > MAX_ENTRIES;</color>
<color=#75715e>     *     }</color>
<color=#75715e>     * </pre></color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>This method typically does not modify the map in any way,</color>
<color=#75715e>     * instead allowing the map to modify itself as directed by its</color>
<color=#75715e>     * return value.  It <i>is</i> permitted for this method to modify</color>
<color=#75715e>     * the map directly, but if it does so, it <i>must</i> return</color>
<color=#75715e>     * {@code false} (indicating that the map should not attempt any</color>
<color=#75715e>     * further modification).  The effects of returning {@code true}</color>
<color=#75715e>     * after modifying the map from within this method are unspecified.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>This implementation merely returns {@code false} (so that this</color>
<color=#75715e>     * map acts like a normal map - the eldest element is never removed).</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pEldest The least recently inserted entry in the map, or if</color>
<color=#75715e>     *                this is an access-ordered map, the least recently accessed</color>
<color=#75715e>     *                entry.  This is the entry that will be removed it this</color>
<color=#75715e>     *                method returns {@code true}.  If the map was empty prior</color>
<color=#75715e>     *                to the {@code put} or {@code putAll} invocation resulting</color>
<color=#75715e>     *                in this invocation, this will be the entry that was just</color>
<color=#75715e>     *                inserted; in other words, if the map contains a single</color>
<color=#75715e>     *                entry, the eldest entry is also the newest.</color>
<color=#75715e>     * @return {@code true} if the eldest entry should be removed</color>
<color=#75715e>     * from the map; {@code false} if it should be retained.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>boolean</color> <color=#a6e22e>removeEldestEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>Entry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>pEldest</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Linked list implementation of {@code Map.Entry}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>LinkedEntry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#66d9ef>extends</color> <color=#f8f8f2>BasicEntry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#66d9ef>implements</color> <color=#f8f8f2>Serializable</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LinkedEntry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>previous</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>LinkedEntry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>next</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>LinkedEntry</color><color=#f8f8f2>(</color><color=#f8f8f2>K</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>,</color> <color=#f8f8f2>LinkedEntry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>pNext</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>next</color> <color=#f92672>=</color> <color=#f8f8f2>pNext</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Adds this entry before the given entry (which must be an existing</color>
<color=#75715e>         * entry) in the list.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param pExisting the entry to add before</color>
<color=#75715e>         */</color>
        <color=#66d9ef>void</color> <color=#a6e22e>addBefore</color><color=#f8f8f2>(</color><color=#f8f8f2>LinkedEntry</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>pExisting</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>next</color> <color=#f92672>=</color> <color=#f8f8f2>pExisting</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>previous</color> <color=#f92672>=</color> <color=#f8f8f2>pExisting</color><color=#f8f8f2>.</color><color=#a6e22e>previous</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>previous</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>next</color><color=#f8f8f2>.</color><color=#a6e22e>previous</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Removes this entry from the linked list.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>void</color> <color=#a6e22e>remove</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>previous</color><color=#f8f8f2>.</color><color=#a6e22e>next</color> <color=#f92672>=</color> <color=#f8f8f2>next</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>next</color><color=#f8f8f2>.</color><color=#a6e22e>previous</color> <color=#f92672>=</color> <color=#f8f8f2>previous</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * If the entry is part of an access ordered list, moves the entry to</color>
<color=#75715e>         * the end of the list.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param pMap the map to record access for</color>
<color=#75715e>         */</color>
        <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>recordAccess</color><color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>pMap</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>LinkedMap</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>linkedMap</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>LinkedMap</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color><color=#f8f8f2>)</color> <color=#f8f8f2>pMap</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>linkedMap</color><color=#f8f8f2>.</color><color=#a6e22e>accessOrder</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>linkedMap</color><color=#f8f8f2>.</color><color=#a6e22e>modCount</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>remove</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>addBefore</color><color=#f8f8f2>(</color><color=#f8f8f2>linkedMap</color><color=#f8f8f2>.</color><color=#a6e22e>head</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Removes this entry from the linked list.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param pMap the map to record removal from</color>
<color=#75715e>         */</color>
        <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>recordRemoval</color><color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>K</color><color=#f8f8f2>,</color> <color=#f8f8f2>V</color><color=#f92672>></color> <color=#f8f8f2>pMap</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// TODO: Is this REALLY correct?</color>
            <color=#f8f8f2>remove</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>