<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.lang</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.util.StringTokenIterator</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.UnsupportedEncodingException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Array</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Field</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Method</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Modifier</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.charset.UnsupportedCharsetException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.sql.Timestamp</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.text.DateFormat</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.text.ParseException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.text.SimpleDateFormat</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.ArrayList</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Date</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.List</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.regex.Pattern</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.regex.PatternSyntaxException</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A utility class with some useful string manipulation methods.</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author <A href="mailto:eirik.torske@twelvemonkeys.com">Eirik Torske</A></color>
<color=#75715e> * @author last modified by $Author: haku $</color>
<color=#75715e> * @version $Id:</color>
<color=#75715e> * //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/lang/StringUtil.java#2</color>
<color=#75715e> * $</color>
<color=#75715e> * @todo Consistency check: Method names, parameter sequence, Exceptions, return values, null-value</color>
<color=#75715e> * handling and parameter names (cosmetics).</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>StringUtil</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The default delimiter string, used by the {@code toXXXArray()} methods. Its value is {@code</color>
<color=#75715e>     * ",&nbsp;\t\n\r\f"}.</color>
<color=#75715e>     * <!-- No, it IS actually ", \t\b\r\f", but &nbsp; looks better in a browser --></color>
<color=#75715e>     *</color>
<color=#75715e>     * @see #toStringArray(String)</color>
<color=#75715e>     * @see #toIntArray(String)</color>
<color=#75715e>     * @see #toLongArray(String)</color>
<color=#75715e>     * @see #toDoubleArray(String)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>DELIMITER_STRING</color> <color=#f92672>=</color> <color=#e6db74>", \t\n\r\f"</color><color=#f8f8f2>;</color>

    <color=#75715e>// Avoid constructor showing up in API doc</color>
    <color=#66d9ef>private</color> <color=#a6e22e>StringUtil</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Constructs a new {@link String} by decoding the specified sub array of bytes using the</color>
<color=#75715e>     * specified charset. Replacement for {@link String#String(byte[], int, int, String) new</color>
<color=#75715e>     * String(byte[], int, int, String)}, that does not throw the checked {@link</color>
<color=#75715e>     * UnsupportedEncodingException}, but instead the unchecked {@link UnsupportedCharsetException} if</color>
<color=#75715e>     * the character set is not supported.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pData    the bytes to be decoded to characters</color>
<color=#75715e>     * @param pOffset  the index of the first byte to decode</color>
<color=#75715e>     * @param pLength  the number of bytes to decode</color>
<color=#75715e>     * @param pCharset the name of a supported character set</color>
<color=#75715e>     * @return a newly created string.</color>
<color=#75715e>     * @throws UnsupportedCharsetException</color>
<color=#75715e>     * @see String#String(byte[], int, int, String)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>decode</color><color=#f8f8f2>(</color>
            <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pData</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pCharset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f8f8f2>(</color><color=#f8f8f2>pData</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLength</color><color=#f8f8f2>,</color> <color=#f8f8f2>pCharset</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>UnsupportedEncodingException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedCharsetException</color><color=#f8f8f2>(</color><color=#f8f8f2>pCharset</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the value of the given {@code Object}, as a {@code String}. Unlike String.valueOf, this</color>
<color=#75715e>     * method returns {@code null} instead of the {@code String} "null", if {@code null} is given as</color>
<color=#75715e>     * the argument.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pObj the Object to find the {@code String} value of.</color>
<color=#75715e>     * @return the String value of the given object, or {@code null} if the {@code pObj} == {@code</color>
<color=#75715e>     * null}.</color>
<color=#75715e>     * @see String#valueOf(Object)</color>
<color=#75715e>     * @see String#toString()</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pObj</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>pObj</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>pObj</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts a string to uppercase.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString the string to convert</color>
<color=#75715e>     * @return the string converted to uppercase, or null if the argument was null.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>toUpperCase</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>toUpperCase</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts a string to lowercase.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString the string to convert</color>
<color=#75715e>     * @return the string converted to lowercase, or null if the argument was null.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>toLowerCase</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Tests if a String is null, or contains nothing but white-space.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString The string to test</color>
<color=#75715e>     * @return true if the string is null or contains only whitespace, otherwise false.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>pString</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>trim</color><color=#f8f8f2>().</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Tests a string array, to see if all items are null or an empty string.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pStringArray The string array to check.</color>
<color=#75715e>     * @return true if the string array is null or only contains string items that are null or contain</color>
<color=#75715e>     * only whitespace, otherwise false.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>pStringArray</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// No elements to test</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pStringArray</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Test all the elements</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>string</color> <color=#f8f8f2>:</color> <color=#f8f8f2>pStringArray</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>string</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// All elements are empty</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Tests if a string contains another string.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pContainer The string to test</color>
<color=#75715e>     * @param pLookFor   The string to look for</color>
<color=#75715e>     * @return {@code true} if the container string is contains the string, and both parameters are</color>
<color=#75715e>     * non-{@code null}, otherwise {@code false}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pContainer</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pLookFor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>pContainer</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLookFor</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>pContainer</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>pLookFor</color><color=#f8f8f2>)</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Tests if a string contains another string, ignoring case.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pContainer The string to test</color>
<color=#75715e>     * @param pLookFor   The string to look for</color>
<color=#75715e>     * @return {@code true} if the container string is contains the string, and both parameters are</color>
<color=#75715e>     * non-{@code null}, otherwise {@code false}.</color>
<color=#75715e>     * @see #contains(String, String)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>containsIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pContainer</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pLookFor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>indexOfIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>pContainer</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLookFor</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Tests if a string contains a specific character.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString The string to check.</color>
<color=#75715e>     * @param pChar   The character to search for.</color>
<color=#75715e>     * @return true if the string contains the specific character.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>contains</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pChar</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>pString</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>pChar</color><color=#f8f8f2>)</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Tests if a string contains a specific character, ignoring case.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString The string to check.</color>
<color=#75715e>     * @param pChar   The character to search for.</color>
<color=#75715e>     * @return true if the string contains the specific character.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>containsIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pChar</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>pString</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color>
                <color=#f92672>&&</color> <color=#f8f8f2>((</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>((</color><color=#66d9ef>char</color><color=#f8f8f2>)</color> <color=#f8f8f2>pChar</color><color=#f8f8f2>))</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color>
                <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>toUpperCase</color><color=#f8f8f2>((</color><color=#66d9ef>char</color><color=#f8f8f2>)</color> <color=#f8f8f2>pChar</color><color=#f8f8f2>))</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)));</color>

        <color=#75715e>// NOTE: I don't convert the  string to uppercase, but instead test</color>
        <color=#75715e>// the string (potentially) two times, as this is more efficient for</color>
        <color=#75715e>// long strings (in most cases).</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the index within this string of the first occurrence of the specified substring.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString  The string to test</color>
<color=#75715e>     * @param pLookFor The string to look for</color>
<color=#75715e>     * @return if the string argument occurs as a substring within this object, then the index of the</color>
<color=#75715e>     * first character of the first such substring is returned; if it does not occur as a</color>
<color=#75715e>     * substring, -1 is returned.</color>
<color=#75715e>     * @see String#indexOf(String)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>indexOfIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pLookFor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>indexOfIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLookFor</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the index within this string of the first occurrence of the specified substring,</color>
<color=#75715e>     * starting at the specified index.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString  The string to test</color>
<color=#75715e>     * @param pLookFor The string to look for</color>
<color=#75715e>     * @param pPos     The first index to test</color>
<color=#75715e>     * @return if the string argument occurs as a substring within this object, then the index of the</color>
<color=#75715e>     * first character of the first such substring is returned; if it does not occur as a</color>
<color=#75715e>     * substring, -1 is returned.</color>
<color=#75715e>     * @see String#indexOf(String, int)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>indexOfIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pLookFor</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pPos</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pString</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLookFor</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pPos</color><color=#f8f8f2>;</color> <color=#75715e>// All strings "contains" the empty string</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#75715e>// Cannot contain string longer than itself</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Get first char</color>
        <color=#66d9ef>char</color> <color=#f8f8f2>firstL</color> <color=#f92672>=</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>(</color><color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>));</color>
        <color=#66d9ef>char</color> <color=#f8f8f2>firstU</color> <color=#f92672>=</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>toUpperCase</color><color=#f8f8f2>(</color><color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>));</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>indexLower</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>indexUpper</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>pPos</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><=</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>());</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

            <color=#75715e>// Peek for first char</color>
            <color=#f8f8f2>indexLower</color> <color=#f92672>=</color>
                    <color=#f8f8f2>((</color><color=#f8f8f2>indexLower</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>indexLower</color> <color=#f92672><=</color> <color=#f8f8f2>i</color><color=#f8f8f2>))</color> <color=#f92672>?</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>firstL</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#f8f8f2>indexLower</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>indexUpper</color> <color=#f92672>=</color>
                    <color=#f8f8f2>((</color><color=#f8f8f2>indexUpper</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>indexUpper</color> <color=#f92672><=</color> <color=#f8f8f2>i</color><color=#f8f8f2>))</color> <color=#f92672>?</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>firstU</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#f8f8f2>indexUpper</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>indexLower</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>indexUpper</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#75715e>// First char not found</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>indexUpper</color><color=#f8f8f2>;</color> <color=#75715e>// Only upper</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>indexUpper</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>indexLower</color><color=#f8f8f2>;</color> <color=#75715e>// Only lower</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

                <color=#75715e>// Both found, select first occurence</color>
                <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>indexLower</color> <color=#f92672><</color> <color=#f8f8f2>indexUpper</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>indexLower</color> <color=#f8f8f2>:</color> <color=#f8f8f2>indexUpper</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Only one?</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color> <color=#75715e>// The only char found!</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Test if we still have enough chars</color>
            <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>></color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Test if last char equals! (regionMatches is expensive)</color>
            <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color>
                    <color=#f92672>!=</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>(</color><color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)))</color>
                    <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color>
                    <color=#f92672>!=</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>toUpperCase</color><color=#f8f8f2>(</color><color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>))))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>continue</color><color=#f8f8f2>;</color> <color=#75715e>// Nope, try next</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Test from second char, until second-last char</color>
            <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672><=</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color>
                    <color=#f92672>||</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>regionMatches</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLookFor</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>2</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the index within this string of the rightmost occurrence of the specified substring.</color>
<color=#75715e>     * The rightmost empty string "" is considered to occur at the index value {@code pString.length()</color>
<color=#75715e>     * - 1}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString  The string to test</color>
<color=#75715e>     * @param pLookFor The string to look for</color>
<color=#75715e>     * @return If the string argument occurs one or more times as a substring within this object at a</color>
<color=#75715e>     * starting index no greater than fromIndex, then the index of the first character of the last</color>
<color=#75715e>     * such substring is returned. If it does not occur as a substring starting at fromIndex or</color>
<color=#75715e>     * earlier, -1 is returned.</color>
<color=#75715e>     * @see String#lastIndexOf(String)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>lastIndexOfIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pLookFor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>lastIndexOfIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLookFor</color><color=#f8f8f2>,</color> <color=#f8f8f2>pString</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the index within this string of the rightmost occurrence of the specified substring.</color>
<color=#75715e>     * The rightmost empty string "" is considered to occur at the index value {@code pPos}</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString  The string to test</color>
<color=#75715e>     * @param pLookFor The string to look for</color>
<color=#75715e>     * @param pPos     The last index to test</color>
<color=#75715e>     * @return If the string argument occurs one or more times as a substring within this object at a</color>
<color=#75715e>     * starting index no greater than fromIndex, then the index of the first character of the last</color>
<color=#75715e>     * such substring is returned. If it does not occur as a substring starting at fromIndex or</color>
<color=#75715e>     * earlier, -1 is returned.</color>
<color=#75715e>     * @see String#lastIndexOf(String, int)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>lastIndexOfIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pLookFor</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pPos</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pString</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLookFor</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pPos</color><color=#f8f8f2>;</color> <color=#75715e>// All strings "contains" the empty string</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#75715e>// Cannot contain string longer than itself</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Get first char</color>
        <color=#66d9ef>char</color> <color=#f8f8f2>firstL</color> <color=#f92672>=</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>(</color><color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>));</color>
        <color=#66d9ef>char</color> <color=#f8f8f2>firstU</color> <color=#f92672>=</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>toUpperCase</color><color=#f8f8f2>(</color><color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>));</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>indexLower</color> <color=#f92672>=</color> <color=#f8f8f2>pPos</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>indexUpper</color> <color=#f92672>=</color> <color=#f8f8f2>pPos</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>pPos</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

            <color=#75715e>// Peek for first char</color>
            <color=#f8f8f2>indexLower</color> <color=#f92672>=</color>
                    <color=#f8f8f2>((</color><color=#f8f8f2>indexLower</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>indexLower</color> <color=#f92672>>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>))</color> <color=#f92672>?</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>lastIndexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>firstL</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#f8f8f2>indexLower</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>indexUpper</color> <color=#f92672>=</color>
                    <color=#f8f8f2>((</color><color=#f8f8f2>indexUpper</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>indexUpper</color> <color=#f92672>>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>))</color> <color=#f92672>?</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>lastIndexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>firstU</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#f8f8f2>indexUpper</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>indexLower</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>indexUpper</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#75715e>// First char not found</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>indexUpper</color><color=#f8f8f2>;</color> <color=#75715e>// Only upper</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>indexUpper</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>indexLower</color><color=#f8f8f2>;</color> <color=#75715e>// Only lower</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

                <color=#75715e>// Both found, select last occurence</color>
                <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>indexLower</color> <color=#f92672>></color> <color=#f8f8f2>indexUpper</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>indexLower</color> <color=#f8f8f2>:</color> <color=#f8f8f2>indexUpper</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Only one?</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color> <color=#75715e>// The only char found!</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Test if we still have enough chars</color>
            <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>></color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
                <color=#75715e>// return -1;</color>
                <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Test if last char equals! (regionMatches is expensive)</color>
            <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color>
                    <color=#f92672>!=</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>(</color><color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)))</color>
                    <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color>
                    <color=#f92672>!=</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>toUpperCase</color><color=#f8f8f2>(</color><color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>))))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>continue</color><color=#f8f8f2>;</color> <color=#75715e>// Nope, try next</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Test from second char, until second-last char</color>
            <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672><=</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color>
                    <color=#f92672>||</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>regionMatches</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLookFor</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLookFor</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>2</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the index within this string of the first occurrence of the specified character.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString The string to test</color>
<color=#75715e>     * @param pChar   The character to look for</color>
<color=#75715e>     * @return if the string argument occurs as a substring within this object, then the index of the</color>
<color=#75715e>     * first character of the first such substring is returned; if it does not occur as a</color>
<color=#75715e>     * substring, -1 is returned.</color>
<color=#75715e>     * @see String#indexOf(int)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>indexOfIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pChar</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>indexOfIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>pChar</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the index within this string of the first occurrence of the specified character,</color>
<color=#75715e>     * starting at the specified index.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString The string to test</color>
<color=#75715e>     * @param pChar   The character to look for</color>
<color=#75715e>     * @param pPos    The first index to test</color>
<color=#75715e>     * @return if the string argument occurs as a substring within this object, then the index of the</color>
<color=#75715e>     * first character of the first such substring is returned; if it does not occur as a</color>
<color=#75715e>     * substring, -1 is returned.</color>
<color=#75715e>     * @see String#indexOf(int, int)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>indexOfIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pChar</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pPos</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pString</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Get first char</color>
        <color=#66d9ef>char</color> <color=#f8f8f2>lower</color> <color=#f92672>=</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>((</color><color=#66d9ef>char</color><color=#f8f8f2>)</color> <color=#f8f8f2>pChar</color><color=#f8f8f2>);</color>
        <color=#66d9ef>char</color> <color=#f8f8f2>upper</color> <color=#f92672>=</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>toUpperCase</color><color=#f8f8f2>((</color><color=#66d9ef>char</color><color=#f8f8f2>)</color> <color=#f8f8f2>pChar</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>indexLower</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>indexUpper</color><color=#f8f8f2>;</color>

        <color=#75715e>// Test for char</color>
        <color=#f8f8f2>indexLower</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>lower</color><color=#f8f8f2>,</color> <color=#f8f8f2>pPos</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>indexUpper</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>upper</color><color=#f8f8f2>,</color> <color=#f8f8f2>pPos</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>indexLower</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*      if (indexUpper < 0)</color>
<color=#75715e>      return -1; // First char not found</color>
<color=#75715e>      else */</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>indexUpper</color><color=#f8f8f2>;</color> <color=#75715e>// Only upper</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>indexUpper</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>indexLower</color><color=#f8f8f2>;</color> <color=#75715e>// Only lower</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

            <color=#75715e>// Both found, select first occurence</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>indexLower</color> <color=#f92672><</color> <color=#f8f8f2>indexUpper</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>indexLower</color> <color=#f8f8f2>:</color> <color=#f8f8f2>indexUpper</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the index within this string of the last occurrence of the specified character.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString The string to test</color>
<color=#75715e>     * @param pChar   The character to look for</color>
<color=#75715e>     * @return if the string argument occurs as a substring within this object, then the index of the</color>
<color=#75715e>     * first character of the first such substring is returned; if it does not occur as a</color>
<color=#75715e>     * substring, -1 is returned.</color>
<color=#75715e>     * @see String#lastIndexOf(int)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>lastIndexOfIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pChar</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>lastIndexOfIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>pChar</color><color=#f8f8f2>,</color> <color=#f8f8f2>pString</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the index within this string of the last occurrence of the specified character,</color>
<color=#75715e>     * searching backward starting at the specified index.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString The string to test</color>
<color=#75715e>     * @param pChar   The character to look for</color>
<color=#75715e>     * @param pPos    The last index to test</color>
<color=#75715e>     * @return if the string argument occurs as a substring within this object, then the index of the</color>
<color=#75715e>     * first character of the first such substring is returned; if it does not occur as a</color>
<color=#75715e>     * substring, -1 is returned.</color>
<color=#75715e>     * @see String#lastIndexOf(int, int)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>lastIndexOfIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pChar</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pPos</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pString</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Get first char</color>
        <color=#66d9ef>char</color> <color=#f8f8f2>lower</color> <color=#f92672>=</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>((</color><color=#66d9ef>char</color><color=#f8f8f2>)</color> <color=#f8f8f2>pChar</color><color=#f8f8f2>);</color>
        <color=#66d9ef>char</color> <color=#f8f8f2>upper</color> <color=#f92672>=</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>toUpperCase</color><color=#f8f8f2>((</color><color=#66d9ef>char</color><color=#f8f8f2>)</color> <color=#f8f8f2>pChar</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>indexLower</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>indexUpper</color><color=#f8f8f2>;</color>

        <color=#75715e>// Test for char</color>
        <color=#f8f8f2>indexLower</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>lastIndexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>lower</color><color=#f8f8f2>,</color> <color=#f8f8f2>pPos</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>indexUpper</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>lastIndexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>upper</color><color=#f8f8f2>,</color> <color=#f8f8f2>pPos</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>indexLower</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

      <color=#75715e>/*      if (indexUpper < 0)</color>
<color=#75715e>      return -1; // First char not found</color>
<color=#75715e>      else */</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>indexUpper</color><color=#f8f8f2>;</color> <color=#75715e>// Only upper</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>indexUpper</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>indexLower</color><color=#f8f8f2>;</color> <color=#75715e>// Only lower</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

            <color=#75715e>// Both found, select last occurence</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>indexLower</color> <color=#f92672>></color> <color=#f8f8f2>indexUpper</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>indexLower</color> <color=#f8f8f2>:</color> <color=#f8f8f2>indexUpper</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Trims the argument string for whitespace on the left side only.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString the string to trim</color>
<color=#75715e>     * @return the string with no whitespace on the left, or {@code null} if the string argument is</color>
<color=#75715e>     * {@code null}.</color>
<color=#75715e>     * @see #rtrim</color>
<color=#75715e>     * @see String#trim()</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>ltrim</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pString</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pString</color><color=#f8f8f2>;</color> <color=#75715e>// Null or empty string</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>isWhitespace</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>pString</color><color=#f8f8f2>;</color> <color=#75715e>// First char is not whitespace</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color> <color=#75715e>// Return rest after whitespace</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// If all whitespace, return empty string</color>
        <color=#66d9ef>return</color> <color=#e6db74>""</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Trims the argument string for whitespace on the right side only.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString the string to trim</color>
<color=#75715e>     * @return the string with no whitespace on the right, or {@code null} if the string argument is</color>
<color=#75715e>     * {@code null}.</color>
<color=#75715e>     * @see #ltrim</color>
<color=#75715e>     * @see String#trim()</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>rtrim</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pString</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pString</color><color=#f8f8f2>;</color> <color=#75715e>// Null or empty string</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>isWhitespace</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>==</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>pString</color><color=#f8f8f2>;</color> <color=#75715e>// First char is not whitespace</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>);</color> <color=#75715e>// Return before whitespace</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// If all whitespace, return empty string</color>
        <color=#66d9ef>return</color> <color=#e6db74>""</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Replaces a substring of a string with another string. All matches are replaced.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSource  The source String</color>
<color=#75715e>     * @param pPattern The pattern to replace</color>
<color=#75715e>     * @param pReplace The new String to be inserted instead of the replace String</color>
<color=#75715e>     * @return The new String with the pattern replaced</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>replace</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pPattern</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pReplace</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pPattern</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>;</color> <color=#75715e>// Special case: No pattern to replace</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>match</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>offset</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>

        <color=#75715e>// Loop string, until last occurence of pattern, and replace</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>((</color><color=#f8f8f2>match</color> <color=#f92672>=</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>pPattern</color><color=#f8f8f2>,</color> <color=#f8f8f2>offset</color><color=#f8f8f2>))</color> <color=#f92672>!=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Append everything until pattern</color>
            <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>match</color><color=#f8f8f2>));</color>
            <color=#75715e>// Append the replace string</color>
            <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pReplace</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>offset</color> <color=#f92672>=</color> <color=#f8f8f2>match</color> <color=#f92672>+</color> <color=#f8f8f2>pPattern</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Append rest of string and return</color>
        <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color><color=#f8f8f2>));</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Replaces a substring of a string with another string, ignoring case. All matches are replaced.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSource  The source String</color>
<color=#75715e>     * @param pPattern The pattern to replace</color>
<color=#75715e>     * @param pReplace The new String to be inserted instead of the replace String</color>
<color=#75715e>     * @return The new String with the pattern replaced</color>
<color=#75715e>     * @see #replace(String, String, String)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>replaceIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pPattern</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pReplace</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pPattern</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>;</color> <color=#75715e>// Special case: No pattern to replace</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>match</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>offset</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>

        <color=#66d9ef>while</color> <color=#f8f8f2>((</color><color=#f8f8f2>match</color> <color=#f92672>=</color> <color=#f8f8f2>indexOfIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#f8f8f2>pPattern</color><color=#f8f8f2>,</color> <color=#f8f8f2>offset</color><color=#f8f8f2>))</color> <color=#f92672>!=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>match</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pReplace</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>offset</color> <color=#f92672>=</color> <color=#f8f8f2>match</color> <color=#f92672>+</color> <color=#f8f8f2>pPattern</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>offset</color><color=#f8f8f2>));</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Cuts a string between two words, before a sepcified length, if the string is longer than the</color>
<color=#75715e>     * maxium lenght. The string is optionally padded with the pad argument. The method assumes words</color>
<color=#75715e>     * to be separated by the space character (" "). Note that the maximum length argument is</color>
<color=#75715e>     * absolute, and will also include the length of the padding.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString The string to cut</color>
<color=#75715e>     * @param pMaxLen The maximum length before cutting</color>
<color=#75715e>     * @param pPad    The string to append at the end, aftrer cutting</color>
<color=#75715e>     * @return The cutted string with padding, or the original string, if it was shorter than the max</color>
<color=#75715e>     * length.</color>
<color=#75715e>     * @see #pad(String, int, String, boolean)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>cut</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pMaxLen</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pPad</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pPad</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pPad</color> <color=#f92672>=</color> <color=#e6db74>""</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>len</color> <color=#f92672>></color> <color=#f8f8f2>pMaxLen</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>lastIndexOf</color><color=#f8f8f2>(</color><color=#e6db74>' '</color><color=#f8f8f2>,</color> <color=#f8f8f2>pMaxLen</color> <color=#f92672>-</color> <color=#f8f8f2>pPad</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pString</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>pPad</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Makes the Nth letter of a String uppercase. If the index is outside the the length of the</color>
<color=#75715e>     * argument string, the argument is simply returned.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString The string to capitalize</color>
<color=#75715e>     * @param pIndex  The base-0 index of the char to capitalize.</color>
<color=#75715e>     * @return The capitalized string, or null, if a null argument was given.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>capitalize</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pIndex</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>(</color><color=#e6db74>"Negative index not allowed: "</color> <color=#f92672>+</color> <color=#f8f8f2>pIndex</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672><=</color> <color=#f8f8f2>pIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pString</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// This is the fastest method, according to my tests</color>

        <color=#75715e>// Skip array duplication if allready capitalized</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>isUpperCase</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>pIndex</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pString</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Convert to char array, capitalize and create new String</color>
        <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>charArray</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>toCharArray</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>charArray</color><color=#f92672>[</color><color=#f8f8f2>pIndex</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>toUpperCase</color><color=#f8f8f2>(</color><color=#f8f8f2>charArray</color><color=#f92672>[</color><color=#f8f8f2>pIndex</color><color=#f92672>]</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f8f8f2>(</color><color=#f8f8f2>charArray</color><color=#f8f8f2>);</color>

        <color=#75715e>/**</color>
<color=#75715e>         * StringBuilder buf = new StringBuilder(pString); buf.setCharAt(pIndex,</color>
<color=#75715e>         * Character.toUpperCase(buf.charAt(pIndex))); return buf.toString(); //</color>
<color=#75715e>         */</color>

        <color=#75715e>/**</color>
<color=#75715e>         * return pString.substring(0, pIndex) + Character.toUpperCase(pString.charAt(pIndex)) +</color>
<color=#75715e>         * pString.substring(pIndex + 1); //</color>
<color=#75715e>         */</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Makes the first letter of a String uppercase.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString The string to capitalize</color>
<color=#75715e>     * @return The capitalized string, or null, if a null argument was given.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>capitalize</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>capitalize</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Formats a number with leading zeroes, to a specified length.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pNum The number to format</color>
<color=#75715e>     * @param pLen The number of digits</color>
<color=#75715e>     * @return A string containing the formatted number</color>
<color=#75715e>     * @throws IllegalArgumentException Thrown, if the number contains more digits than allowed by the</color>
<color=#75715e>     *                                  length argument.</color>
<color=#75715e>     * @see #pad(String, int, String, boolean)</color>
<color=#75715e>     * @deprecated Use StringUtil.pad instead!</color>
<color=#75715e>     */</color>

    <color=#75715e>/*public*/</color>
    <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>formatNumber</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>pNum</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLen</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pNum</color> <color=#f92672>>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>pow</color><color=#f8f8f2>(</color><color=#ae81ff>10</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLen</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                    <color=#e6db74>"The number to format cannot contain more digits than the length argument specifies!"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>pLen</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pNum</color> <color=#f92672><</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>pow</color><color=#f8f8f2>(</color><color=#ae81ff>10</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'0'</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pNum</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * String length check with simple concatenation of selected pad-string. E.g. a zip number from</color>
<color=#75715e>     * 123 to the correct 0123.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSource         The source string.</color>
<color=#75715e>     * @param pRequiredLength The accurate length of the resulting string.</color>
<color=#75715e>     * @param pPadString      The string for concatenation.</color>
<color=#75715e>     * @param pPrepend        The location of fill-ins, prepend (true), or append (false)</color>
<color=#75715e>     * @return a concatenated string.</color>
<color=#75715e>     * @todo What if source is allready longer than required length?</color>
<color=#75715e>     * @todo Consistency with cut</color>
<color=#75715e>     * @see #cut(String, int, String)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>pad</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pRequiredLength</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pPadString</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pPrepend</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pPadString</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>pPadString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Pad string: \""</color> <color=#f92672>+</color> <color=#f8f8f2>pPadString</color> <color=#f92672>+</color> <color=#e6db74>"\""</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>>=</color> <color=#f8f8f2>pRequiredLength</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// TODO: Benchmark the new version against the old one, to see if it's really faster</color>
        <color=#75715e>// Rewrite to first create pad</color>
        <color=#75715e>// - pad += pad; - until length is >= gap</color>
        <color=#75715e>// then append the pad and cut if too long</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>gap</color> <color=#f92672>=</color> <color=#f8f8f2>pRequiredLength</color> <color=#f92672>-</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>(</color><color=#f8f8f2>pPadString</color><color=#f8f8f2>);</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672><</color> <color=#f8f8f2>gap</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#f8f8f2>gap</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>delete</color><color=#f8f8f2>(</color><color=#f8f8f2>gap</color><color=#f8f8f2>,</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>pPrepend</color> <color=#f92672>?</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>).</color><color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>insert</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>).</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>

    <color=#75715e>/*</color>
<color=#75715e>    StringBuilder result = new StringBuilder(pSource);</color>

<color=#75715e>    // Concatenation until proper string length</color>
<color=#75715e>    while (result.length() < pRequiredLength) {</color>
<color=#75715e>        // Prepend or append</color>
<color=#75715e>        if (pPrepend) {  // Front</color>
<color=#75715e>            result.insert(0, pPadString);</color>
<color=#75715e>        }</color>
<color=#75715e>        else {         // Back</color>
<color=#75715e>            result.append(pPadString);</color>
<color=#75715e>        }</color>
<color=#75715e>    }</color>

<color=#75715e>    // Truncate</color>
<color=#75715e>    if (result.length() > pRequiredLength) {</color>
<color=#75715e>        if (pPrepend) {</color>
<color=#75715e>            result.delete(0, result.length() - pRequiredLength);</color>
<color=#75715e>        }</color>
<color=#75715e>        else {</color>
<color=#75715e>            result.delete(pRequiredLength, result.length());</color>
<color=#75715e>        }</color>
<color=#75715e>    }</color>
<color=#75715e>    return result.toString();</color>
<color=#75715e>    */</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts the string to a date, using the default date format.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString the string to convert</color>
<color=#75715e>     * @return the date</color>
<color=#75715e>     * @see DateFormat</color>
<color=#75715e>     * @see DateFormat#getInstance()</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Date</color> <color=#a6e22e>toDate</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Default</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>toDate</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>DateFormat</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts the string to a date, using the given format.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString the string to convert</color>
<color=#75715e>     * @param pFormat the date format</color>
<color=#75715e>     * @return the date</color>
<color=#75715e>     * @todo cache formats?</color>
<color=#75715e>     * @see SimpleDateFormat</color>
<color=#75715e>     * @see SimpleDateFormat#SimpleDateFormat(String)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Date</color> <color=#a6e22e>toDate</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Get the format from cache, or create new and insert</color>
        <color=#75715e>// Return new date</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>toDate</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>SimpleDateFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>pFormat</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts the string to a date, using the given format.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString the string to convert</color>
<color=#75715e>     * @param pFormat the date format</color>
<color=#75715e>     * @return the date</color>
<color=#75715e>     * @see SimpleDateFormat</color>
<color=#75715e>     * @see SimpleDateFormat#SimpleDateFormat(String)</color>
<color=#75715e>     * @see DateFormat</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Date</color> <color=#a6e22e>toDate</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>DateFormat</color> <color=#f8f8f2>pFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>pFormat</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Parse date using given format</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>pFormat</color><color=#f8f8f2>.</color><color=#a6e22e>parse</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ParseException</color> <color=#f8f8f2>pe</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Wrap in RuntimeException</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#f8f8f2>pe</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts the string to a jdbc Timestamp, using the standard Timestamp escape format.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pValue the value</color>
<color=#75715e>     * @return a new {@code Timestamp}</color>
<color=#75715e>     * @see Timestamp</color>
<color=#75715e>     * @see Timestamp#valueOf(String)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Timestamp</color> <color=#a6e22e>toTimestamp</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Parse date using default format</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Timestamp</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>pValue</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts a delimiter separated String to an array of Strings.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString     The comma-separated string</color>
<color=#75715e>     * @param pDelimiters The delimiter string</color>
<color=#75715e>     * @return a {@code String} array containing the delimiter separated elements</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#a6e22e>toStringArray</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pDelimiters</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>StringTokenIterator</color> <color=#f8f8f2>st</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringTokenIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>pDelimiters</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>();</color>

        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>st</color><color=#f8f8f2>.</color><color=#a6e22e>hasMoreElements</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>st</color><color=#f8f8f2>.</color><color=#a6e22e>nextToken</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>toArray</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f92672>[</color><color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>()</color><color=#f92672>]</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts a comma-separated String to an array of Strings.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString The comma-separated string</color>
<color=#75715e>     * @return a {@code String} array containing the comma-separated elements</color>
<color=#75715e>     * @see #toStringArray(String, String)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#a6e22e>toStringArray</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>toStringArray</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>DELIMITER_STRING</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts a comma-separated String to an array of ints.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString     The comma-separated string</color>
<color=#75715e>     * @param pDelimiters The delimiter string</color>
<color=#75715e>     * @param pBase       The radix</color>
<color=#75715e>     * @return an {@code int} array</color>
<color=#75715e>     * @throws NumberFormatException if any of the elements are not parseable as an int</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#a6e22e>toIntArray</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pDelimiters</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pBase</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Some room for improvement here...</color>
        <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>temp</color> <color=#f92672>=</color> <color=#f8f8f2>toStringArray</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>pDelimiters</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>array</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>temp</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>array</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>array</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>temp</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>pBase</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>array</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts a comma-separated String to an array of ints.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString The comma-separated string</color>
<color=#75715e>     * @return an {@code int} array</color>
<color=#75715e>     * @throws NumberFormatException if any of the elements are not parseable as an int</color>
<color=#75715e>     * @see #toStringArray(String, String)</color>
<color=#75715e>     * @see #DELIMITER_STRING</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#a6e22e>toIntArray</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>toIntArray</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>DELIMITER_STRING</color><color=#f8f8f2>,</color> <color=#ae81ff>10</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts a comma-separated String to an array of ints.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString     The comma-separated string</color>
<color=#75715e>     * @param pDelimiters The delimiter string</color>
<color=#75715e>     * @return an {@code int} array</color>
<color=#75715e>     * @throws NumberFormatException if any of the elements are not parseable as an int</color>
<color=#75715e>     * @see #toIntArray(String, String)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#a6e22e>toIntArray</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pDelimiters</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>toIntArray</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>pDelimiters</color><color=#f8f8f2>,</color> <color=#ae81ff>10</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts a comma-separated String to an array of longs.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString     The comma-separated string</color>
<color=#75715e>     * @param pDelimiters The delimiter string</color>
<color=#75715e>     * @return a {@code long} array</color>
<color=#75715e>     * @throws NumberFormatException if any of the elements are not parseable as a long</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#a6e22e>toLongArray</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pDelimiters</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Some room for improvement here...</color>
        <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>temp</color> <color=#f92672>=</color> <color=#f8f8f2>toStringArray</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>pDelimiters</color><color=#f8f8f2>);</color>
        <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>array</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[</color><color=#f8f8f2>temp</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>array</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>array</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>parseLong</color><color=#f8f8f2>(</color><color=#f8f8f2>temp</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>array</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts a comma-separated String to an array of longs.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString The comma-separated string</color>
<color=#75715e>     * @return a {@code long} array</color>
<color=#75715e>     * @throws NumberFormatException if any of the elements are not parseable as a long</color>
<color=#75715e>     * @see #toStringArray(String, String)</color>
<color=#75715e>     * @see #DELIMITER_STRING</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#a6e22e>toLongArray</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>toLongArray</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>DELIMITER_STRING</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts a comma-separated String to an array of doubles.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString     The comma-separated string</color>
<color=#75715e>     * @param pDelimiters The delimiter string</color>
<color=#75715e>     * @return a {@code double} array</color>
<color=#75715e>     * @throws NumberFormatException if any of the elements are not parseable as a double</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>double</color><color=#f92672>[]</color> <color=#a6e22e>toDoubleArray</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pDelimiters</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#66d9ef>double</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Some room for improvement here...</color>
        <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>temp</color> <color=#f92672>=</color> <color=#f8f8f2>toStringArray</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>pDelimiters</color><color=#f8f8f2>);</color>
        <color=#66d9ef>double</color><color=#f92672>[]</color> <color=#f8f8f2>array</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>double</color><color=#f92672>[</color><color=#f8f8f2>temp</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>array</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>array</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>temp</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>

            <color=#75715e>// Double.parseDouble() is 1.2...</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>array</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts a comma-separated String to an array of doubles.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString The comma-separated string</color>
<color=#75715e>     * @return a {@code double} array</color>
<color=#75715e>     * @throws NumberFormatException if any of the elements are not parseable as a double</color>
<color=#75715e>     * @see #toDoubleArray(String, String)</color>
<color=#75715e>     * @see #DELIMITER_STRING</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>double</color><color=#f92672>[]</color> <color=#a6e22e>toDoubleArray</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>toDoubleArray</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>DELIMITER_STRING</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Parses a string to a Color. The argument can be a color constant (static constant from {@link</color>
<color=#75715e>     * Color java.awt.Color}), like {@code black} or {@code red}, or it can be HTML/CSS-style, on the</color>
<color=#75715e>     * format:</color>
<color=#75715e>     *</color>
<color=#75715e>     * <UL></color>
<color=#75715e>     * <LI>{@code #RRGGBB}, where RR, GG and BB means two digit hexadecimal for red, green and blue</color>
<color=#75715e>     * values respectively.</color>
<color=#75715e>     * <LI>{@code #AARRGGBB}, as above, with AA as alpha component.</color>
<color=#75715e>     * <LI>{@code #RGB}, where R, G and B means one digit hexadecimal for red, green and blue values</color>
<color=#75715e>     * respectively.</color>
<color=#75715e>     * <LI>{@code #ARGB}, as above, with A as alpha component.</color>
<color=#75715e>     * </UL></color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString the string representation of the color</color>
<color=#75715e>     * @return the {@code Color} object, or {@code null} if the argument is {@code null}</color>
<color=#75715e>     * @throws IllegalArgumentException if the string does not map to a color.</color>
<color=#75715e>     * @see Color</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Color</color> <color=#a6e22e>toColor</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// No string, no color</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// #RRGGBB format</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#e6db74>'#'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#75715e>// alpha</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>>=</color> <color=#ae81ff>7</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>idx</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

                <color=#75715e>// AA</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>>=</color> <color=#ae81ff>9</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>),</color> <color=#ae81ff>0x10</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>idx</color> <color=#f92672>+=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#75715e>// RR GG BB</color>
                <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>),</color> <color=#ae81ff>0x10</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>),</color> <color=#ae81ff>0x10</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color> <color=#f92672>+</color> <color=#ae81ff>6</color><color=#f8f8f2>),</color> <color=#ae81ff>0x10</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>>=</color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>idx</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

                <color=#75715e>// A</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>>=</color> <color=#ae81ff>5</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>a</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f92672>++</color><color=#f8f8f2>idx</color><color=#f8f8f2>),</color> <color=#ae81ff>0x10</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#ae81ff>0x10</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#75715e>// R G B</color>
                <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f92672>++</color><color=#f8f8f2>idx</color><color=#f8f8f2>),</color> <color=#ae81ff>0x10</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#ae81ff>0x10</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f92672>++</color><color=#f8f8f2>idx</color><color=#f8f8f2>),</color> <color=#ae81ff>0x10</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#ae81ff>0x10</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f92672>++</color><color=#f8f8f2>idx</color><color=#f8f8f2>),</color> <color=#ae81ff>0x10</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#ae81ff>0x10</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>a</color> <color=#f92672>!=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// With alpha</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Color</color><color=#f8f8f2>(</color><color=#f8f8f2>r</color><color=#f8f8f2>,</color> <color=#f8f8f2>g</color><color=#f8f8f2>,</color> <color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>a</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// No alpha</color>
            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Color</color><color=#f8f8f2>(</color><color=#f8f8f2>r</color><color=#f8f8f2>,</color> <color=#f8f8f2>g</color><color=#f8f8f2>,</color> <color=#f8f8f2>b</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Get color by name</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Class</color> <color=#f8f8f2>colorClass</color> <color=#f92672>=</color> <color=#f8f8f2>Color</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>Field</color> <color=#f8f8f2>field</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

            <color=#75715e>// Workaround for stupidity in Color class constant field names</color>
            <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>field</color> <color=#f92672>=</color> <color=#f8f8f2>colorClass</color><color=#f8f8f2>.</color><color=#a6e22e>getField</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Don't care, this is just a workaround...</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>field</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// NOTE: The toLowerCase() on the next line will lose darkGray</color>
                <color=#75715e>// and lightGray...</color>
                <color=#f8f8f2>field</color> <color=#f92672>=</color> <color=#f8f8f2>colorClass</color><color=#f8f8f2>.</color><color=#a6e22e>getField</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Only try to get public final fields</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>mod</color> <color=#f92672>=</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>getModifiers</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>Modifier</color><color=#f8f8f2>.</color><color=#a6e22e>isPublic</color><color=#f8f8f2>(</color><color=#f8f8f2>mod</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>Modifier</color><color=#f8f8f2>.</color><color=#a6e22e>isStatic</color><color=#f8f8f2>(</color><color=#f8f8f2>mod</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>Color</color><color=#f8f8f2>)</color> <color=#f8f8f2>field</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NoSuchFieldException</color> <color=#f8f8f2>nsfe</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// No such color, throw illegal argument?</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"No such color: "</color> <color=#f92672>+</color> <color=#f8f8f2>pString</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>SecurityException</color> <color=#f8f8f2>se</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Can't access field, return null</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalAccessException</color> <color=#f8f8f2>iae</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Can't happen, as the field must be public static</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>iar</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Can't happen, as the field must be static</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// This should never be reached, but you never know... ;-)</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a HTML/CSS String representation of the given color. The HTML/CSS color format is</color>
<color=#75715e>     * defined as:</color>
<color=#75715e>     *</color>
<color=#75715e>     * <UL></color>
<color=#75715e>     * <LI>{@code #RRGGBB}, where RR, GG and BB means two digit hexadecimal for red, green and blue</color>
<color=#75715e>     * values respectively.</color>
<color=#75715e>     * <LI>{@code #AARRGGBB}, as above, with AA as alpha component.</color>
<color=#75715e>     * </UL></color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>Examlples: {@code toColorString(Color.red) == "#ff0000"}, {@code toColorString(new</color>
<color=#75715e>     * Color(0xcc, 0xcc, 0xcc)) == "#cccccc"}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pColor the color</color>
<color=#75715e>     * @return A String representation of the color on HTML/CSS form</color>
<color=#75715e>     * @todo Consider moving to ImageUtil?</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>toColorString</color><color=#f8f8f2>(</color><color=#f8f8f2>Color</color> <color=#f8f8f2>pColor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Not a color...</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pColor</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>str</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>(</color><color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>toHexString</color><color=#f8f8f2>(</color><color=#f8f8f2>pColor</color><color=#f8f8f2>.</color><color=#a6e22e>getRGB</color><color=#f8f8f2>()));</color>

        <color=#75715e>// Make sure string is 8 chars</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>str</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>str</color><color=#f8f8f2>.</color><color=#a6e22e>insert</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#e6db74>'0'</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// All opaque is default</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>str</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#e6db74>'f'</color> <color=#f92672>&&</color> <color=#f8f8f2>str</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#e6db74>'f'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>str</color><color=#f8f8f2>.</color><color=#a6e22e>delete</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Prepend hash</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>str</color><color=#f8f8f2>.</color><color=#a6e22e>insert</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#e6db74>'#'</color><color=#f8f8f2>).</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Tests a string, to see if it is an number (element of <b>Z</b>). Valid integers are positive</color>
<color=#75715e>     * natural numbers (1, 2, 3, ...), their negatives (?1, ?2, ?3, ...) and the number zero.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>Note that there is no guarantees made, that this number can be represented as either an int</color>
<color=#75715e>     * or a long.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString The string to check.</color>
<color=#75715e>     * @return true if the String is a natural number.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isNumber</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Special case for first char, may be minus sign ('-')</color>
        <color=#66d9ef>char</color> <color=#f8f8f2>ch</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>ch</color> <color=#f92672>==</color> <color=#e6db74>'-'</color> <color=#f92672>||</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>isDigit</color><color=#f8f8f2>(</color><color=#f8f8f2>ch</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Test every char</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>isDigit</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// All digits must be a natural number</color>
        <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * This version is benchmarked against toStringArray and found to be</color>
<color=#75715e>     * increasingly slower, the more elements the string contains.</color>
<color=#75715e>     * Kept here</color>
<color=#75715e>     */</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Removes all occurences of a specific character in a string. <i>This method is not design for</color>
<color=#75715e>     * efficiency!</i></color>
<color=#75715e>     *</color>
<color=#75715e>     * <p></color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSource</color>
<color=#75715e>     * @param pSubstring</color>
<color=#75715e>     * @param pPosition</color>
<color=#75715e>     * @return the modified string.</color>
<color=#75715e>     */</color>

  <color=#75715e>/*</color>
<color=#75715e>    public static String removeChar(String pSourceString, final char pBadChar) {</color>

<color=#75715e>    char[] sourceCharArray = pSourceString.toCharArray();</color>
<color=#75715e>    List modifiedCharList = new Vector(sourceCharArray.length, 1);</color>

<color=#75715e>    // Filter the string</color>
<color=#75715e>    for (int i = 0; i < sourceCharArray.length; i++) {</color>
<color=#75715e>    if (sourceCharArray[i] != pBadChar) {</color>
<color=#75715e>    modifiedCharList.add(new Character(sourceCharArray[i]));</color>
<color=#75715e>    }</color>
<color=#75715e>    }</color>

<color=#75715e>    // Clean the character list</color>
<color=#75715e>    modifiedCharList = (List) CollectionUtil.purifyCollection((Collection) modifiedCharList);</color>

<color=#75715e>    // Create new modified String</color>
<color=#75715e>    char[] modifiedCharArray = new char[modifiedCharList.size()];</color>
<color=#75715e>    for (int i = 0; i < modifiedCharArray.length; i++) {</color>
<color=#75715e>    modifiedCharArray[i] = ((Character) modifiedCharList.get(i)).charValue();</color>
<color=#75715e>    }</color>

<color=#75715e>    return new String(modifiedCharArray);</color>
<color=#75715e>    }</color>
<color=#75715e>  */</color>

    <color=#75715e>/**</color>
<color=#75715e>     * <i>This method is not design for efficiency!</i></color>
<color=#75715e>     *</color>
<color=#75715e>     * <p></color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSourceString The String for modification.</color>
<color=#75715e>     * @param pBadChars The char array containing the characters to remove from the source string.</color>
<color=#75715e>     * @return the modified string. @-deprecated Not tested yet!</color>
<color=#75715e>     */</color>

  <color=#75715e>/*</color>
<color=#75715e>    public static String removeChars(String pSourceString, final char[] pBadChars) {</color>

<color=#75715e>    char[] sourceCharArray = pSourceString.toCharArray();</color>
<color=#75715e>    List modifiedCharList = new Vector(sourceCharArray.length, 1);</color>

<color=#75715e>    Map badCharMap = new Hashtable();</color>
<color=#75715e>    Character dummyChar = new Character('*');</color>
<color=#75715e>    for (int i = 0; i < pBadChars.length; i++) {</color>
<color=#75715e>    badCharMap.put(new Character(pBadChars[i]), dummyChar);</color>
<color=#75715e>    }</color>

<color=#75715e>    // Filter the string</color>
<color=#75715e>    for (int i = 0; i < sourceCharArray.length; i++) {</color>
<color=#75715e>    Character arrayChar = new Character(sourceCharArray[i]);</color>
<color=#75715e>    if (!badCharMap.containsKey(arrayChar)) {</color>
<color=#75715e>    modifiedCharList.add(new Character(sourceCharArray[i]));</color>
<color=#75715e>    }</color>
<color=#75715e>    }</color>

<color=#75715e>    // Clean the character list</color>
<color=#75715e>    modifiedCharList = (List) CollectionUtil.purifyCollection((Collection) modifiedCharList);</color>

<color=#75715e>    // Create new modified String</color>
<color=#75715e>    char[] modifiedCharArray = new char[modifiedCharList.size()];</color>
<color=#75715e>    for (int i = 0; i < modifiedCharArray.length; i++) {</color>
<color=#75715e>    modifiedCharArray[i] = ((Character) modifiedCharList.get(i)).charValue();</color>
<color=#75715e>    }</color>

<color=#75715e>    return new String(modifiedCharArray);</color>

<color=#75715e>    }</color>
<color=#75715e>  */</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Ensures that a string includes a given substring at a given position.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>Extends the string with a given string if it is not already there. E.g an URL "www.vg.no",</color>
<color=#75715e>     * to "http://www.vg.no".</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSource    The source string.</color>
<color=#75715e>     * @param pSubstring The substring to include.</color>
<color=#75715e>     * @param pPosition  The location of the fill-in, the index starts with 0.</color>
<color=#75715e>     * @return the string, with the substring at the given location.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>ensureIncludesAt</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pSubstring</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pPosition</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>newString</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>);</color>

        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>existingSubstring</color> <color=#f92672>=</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>pPosition</color><color=#f8f8f2>,</color> <color=#f8f8f2>pPosition</color> <color=#f92672>+</color> <color=#f8f8f2>pSubstring</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>());</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>existingSubstring</color><color=#f8f8f2>.</color><color=#a6e22e>equalsIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>pSubstring</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>newString</color><color=#f8f8f2>.</color><color=#a6e22e>insert</color><color=#f8f8f2>(</color><color=#f8f8f2>pPosition</color><color=#f8f8f2>,</color> <color=#f8f8f2>pSubstring</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Do something!?</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>newString</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Ensures that a string does not include a given substring at a given position.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>Removes a given substring from a string if it is there. E.g an URL "http://www.vg.no", to</color>
<color=#75715e>     * "www.vg.no".</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSource    The source string.</color>
<color=#75715e>     * @param pSubstring The substring to check and possibly remove.</color>
<color=#75715e>     * @param pPosition  The location of possible substring removal, the index starts with 0.</color>
<color=#75715e>     * @return the string, without the substring at the given location.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>ensureExcludesAt</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pSubstring</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pPosition</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>newString</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>);</color>

        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>existingString</color> <color=#f92672>=</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>pPosition</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>pPosition</color> <color=#f92672>+</color> <color=#f8f8f2>pSubstring</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>existingString</color><color=#f8f8f2>.</color><color=#a6e22e>equalsIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>pSubstring</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>newString</color><color=#f8f8f2>.</color><color=#a6e22e>delete</color><color=#f8f8f2>(</color><color=#f8f8f2>pPosition</color><color=#f8f8f2>,</color> <color=#f8f8f2>pPosition</color> <color=#f92672>+</color> <color=#f8f8f2>pSubstring</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Do something!?</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>newString</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the first substring between the given string boundaries.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p></color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSource              The source string.</color>
<color=#75715e>     * @param pBeginBoundaryString The string that marks the beginning.</color>
<color=#75715e>     * @param pEndBoundaryString   The string that marks the end.</color>
<color=#75715e>     * @param pOffset              The index to start searching in the source string. If it is less than 0, the</color>
<color=#75715e>     *                             index will be set to 0.</color>
<color=#75715e>     * @return the substring demarcated by the given string boundaries or null if not both string</color>
<color=#75715e>     * boundaries are found.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>substring</color><color=#f8f8f2>(</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>,</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pBeginBoundaryString</color><color=#f8f8f2>,</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pEndBoundaryString</color><color=#f8f8f2>,</color>
            <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Check offset</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>offset</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>pOffset</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#ae81ff>0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>;</color>

        <color=#75715e>// Find the start index</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>startIndex</color> <color=#f92672>=</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>pBeginBoundaryString</color><color=#f8f8f2>,</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>pBeginBoundaryString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>startIndex</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Find the end index</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>endIndex</color> <color=#f92672>=</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>pEndBoundaryString</color><color=#f8f8f2>,</color> <color=#f8f8f2>startIndex</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>endIndex</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>startIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>endIndex</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Removes the first substring demarcated by the given string boundaries.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p></color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSource            The source string.</color>
<color=#75715e>     * @param pBeginBoundaryChar The character that marks the beginning of the unwanted substring.</color>
<color=#75715e>     * @param pEndBoundaryChar   The character that marks the end of the unwanted substring.</color>
<color=#75715e>     * @param pOffset            The index to start searching in the source string. If it is less than 0, the</color>
<color=#75715e>     *                           index will be set to 0.</color>
<color=#75715e>     * @return the source string with all the demarcated substrings removed, included the demarcation</color>
<color=#75715e>     * characters.</color>
<color=#75715e>     * @deprecated this method actually removes all demarcated substring.. doesn't it?</color>
<color=#75715e>     */</color>

    <color=#75715e>/*public*/</color>
    <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>removeSubstring</color><color=#f8f8f2>(</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>,</color>
            <color=#66d9ef>final</color> <color=#66d9ef>char</color> <color=#f8f8f2>pBeginBoundaryChar</color><color=#f8f8f2>,</color>
            <color=#66d9ef>final</color> <color=#66d9ef>char</color> <color=#f8f8f2>pEndBoundaryChar</color><color=#f8f8f2>,</color>
            <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>filteredString</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>insideDemarcatedArea</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>charArray</color> <color=#f92672>=</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>toCharArray</color><color=#f8f8f2>();</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>char</color> <color=#f8f8f2>c</color> <color=#f8f8f2>:</color> <color=#f8f8f2>charArray</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>insideDemarcatedArea</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#f8f8f2>pBeginBoundaryChar</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>insideDemarcatedArea</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>filteredString</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#f8f8f2>pEndBoundaryChar</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>insideDemarcatedArea</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>filteredString</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Removes all substrings demarcated by the given string boundaries.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p></color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSource            The source string.</color>
<color=#75715e>     * @param pBeginBoundaryChar The character that marks the beginning of the unwanted substring.</color>
<color=#75715e>     * @param pEndBoundaryChar   The character that marks the end of the unwanted substring.</color>
<color=#75715e>     * @return the source string with all the demarcated substrings removed, included the demarcation</color>
<color=#75715e>     * characters.</color>
<color=#75715e>     */</color>
    <color=#75715e>/*public*/</color>
    <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>removeSubstrings</color><color=#f8f8f2>(</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>char</color> <color=#f8f8f2>pBeginBoundaryChar</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>char</color> <color=#f8f8f2>pEndBoundaryChar</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>filteredString</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>insideDemarcatedArea</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>charArray</color> <color=#f92672>=</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>toCharArray</color><color=#f8f8f2>();</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>char</color> <color=#f8f8f2>c</color> <color=#f8f8f2>:</color> <color=#f8f8f2>charArray</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>insideDemarcatedArea</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#f8f8f2>pBeginBoundaryChar</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>insideDemarcatedArea</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>filteredString</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#f8f8f2>pEndBoundaryChar</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>insideDemarcatedArea</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>filteredString</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the first element of a {@code String} containing string elements delimited by a given</color>
<color=#75715e>     * delimiter. <i>NB - Straightforward implementation!</i></color>
<color=#75715e>     *</color>
<color=#75715e>     * <p></color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSource    The source string.</color>
<color=#75715e>     * @param pDelimiter The delimiter used in the source string.</color>
<color=#75715e>     * @return The last string element.</color>
<color=#75715e>     * @todo This method should be re-implemented for more efficient execution.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getFirstElement</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pDelimiter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pDelimiter</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"delimiter == null"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>idx</color> <color=#f92672>=</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>pDelimiter</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>idx</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the last element of a {@code String} containing string elements delimited by a given</color>
<color=#75715e>     * delimiter. <i>NB - Straightforward implementation!</i></color>
<color=#75715e>     *</color>
<color=#75715e>     * <p></color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSource    The source string.</color>
<color=#75715e>     * @param pDelimiter The delimiter used in the source string.</color>
<color=#75715e>     * @return The last string element.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getLastElement</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pDelimiter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pDelimiter</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"delimiter == null"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>idx</color> <color=#f92672>=</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>lastIndexOf</color><color=#f8f8f2>(</color><color=#f8f8f2>pDelimiter</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>idx</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts a string array to a string of comma-separated values.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pStringArray the string array</color>
<color=#75715e>     * @return A string of comma-separated values</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>toCSVString</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color><color=#f92672>[]</color> <color=#f8f8f2>pStringArray</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>toCSVString</color><color=#f8f8f2>(</color><color=#f8f8f2>pStringArray</color><color=#f8f8f2>,</color> <color=#e6db74>", "</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts a string array to a string separated by the given delimiter.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pStringArray     the string array</color>
<color=#75715e>     * @param pDelimiterString the delimiter string</color>
<color=#75715e>     * @return string of delimiter separated values</color>
<color=#75715e>     * @throws IllegalArgumentException if {@code pDelimiterString == null}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>toCSVString</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color><color=#f92672>[]</color> <color=#f8f8f2>pStringArray</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pDelimiterString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pStringArray</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#e6db74>""</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pDelimiterString</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"delimiter == null"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>buffer</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>pStringArray</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pDelimiterString</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pStringArray</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * @param pObject the object</color>
<color=#75715e>     * @return a deep string representation of the given object</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>deepToString</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>deepToString</color><color=#f8f8f2>(</color><color=#f8f8f2>pObject</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * @param pObject    the object</color>
<color=#75715e>     * @param pDepth     the maximum depth</color>
<color=#75715e>     * @param pForceDeep {@code true} to force deep {@code toString}, even if object overrides</color>
<color=#75715e>     *                   toString</color>
<color=#75715e>     * @return a deep string representation of the given object</color>
<color=#75715e>     * @todo Array handling (print full type and length)</color>
<color=#75715e>     * @todo Register handlers for specific toDebugString handling? :-)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>deepToString</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pForceDeep</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pDepth</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Null is null</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pObject</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Implements toString, use it as-is unless pForceDeep</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>pForceDeep</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>isIdentityToString</color><color=#f8f8f2>(</color><color=#f8f8f2>pObject</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>buffer</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pObject</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>isArray</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Special array handling</color>
            <color=#f8f8f2>Class</color> <color=#f8f8f2>componentClass</color> <color=#f92672>=</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>();</color>
            <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>componentClass</color><color=#f8f8f2>.</color><color=#a6e22e>isArray</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'['</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>Array</color><color=#f8f8f2>.</color><color=#a6e22e>getLength</color><color=#f8f8f2>(</color><color=#f8f8f2>pObject</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>']'</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>componentClass</color> <color=#f92672>=</color> <color=#f8f8f2>componentClass</color><color=#f8f8f2>.</color><color=#a6e22e>getComponentType</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>insert</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>componentClass</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" {hashCode="</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>toHexString</color><color=#f8f8f2>(</color><color=#f8f8f2>pObject</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color><color=#f8f8f2>()));</color>
            <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"}"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Append toString value only if overridden</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isIdentityToString</color><color=#f8f8f2>(</color><color=#f8f8f2>pObject</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" {"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>" {toString="</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pObject</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>());</color>
                <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>", "</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>"hashCode="</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>toHexString</color><color=#f8f8f2>(</color><color=#f8f8f2>pObject</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color><color=#f8f8f2>()));</color>
            <color=#75715e>// Loop through, and filter out any getters</color>
            <color=#f8f8f2>Method</color><color=#f92672>[]</color> <color=#f8f8f2>methods</color> <color=#f92672>=</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getMethods</color><color=#f8f8f2>();</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Method</color> <color=#f8f8f2>method</color> <color=#f8f8f2>:</color> <color=#f8f8f2>methods</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Filter only public methods</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>Modifier</color><color=#f8f8f2>.</color><color=#a6e22e>isPublic</color><color=#f8f8f2>(</color><color=#f8f8f2>method</color><color=#f8f8f2>.</color><color=#a6e22e>getModifiers</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>String</color> <color=#f8f8f2>methodName</color> <color=#f92672>=</color> <color=#f8f8f2>method</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>

                    <color=#75715e>// Find name of property</color>
                    <color=#f8f8f2>String</color> <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>methodName</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"getClass"</color><color=#f8f8f2>)</color>
                            <color=#f92672>&&</color> <color=#f8f8f2>methodName</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>3</color>
                            <color=#f92672>&&</color> <color=#f8f8f2>methodName</color><color=#f8f8f2>.</color><color=#a6e22e>startsWith</color><color=#f8f8f2>(</color><color=#e6db74>"get"</color><color=#f8f8f2>)</color>
                            <color=#f92672>&&</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>isUpperCase</color><color=#f8f8f2>(</color><color=#f8f8f2>methodName</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>3</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>methodName</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#ae81ff>3</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>methodName</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>2</color>
                            <color=#f92672>&&</color> <color=#f8f8f2>methodName</color><color=#f8f8f2>.</color><color=#a6e22e>startsWith</color><color=#f8f8f2>(</color><color=#e6db74>"is"</color><color=#f8f8f2>)</color>
                            <color=#f92672>&&</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>isUpperCase</color><color=#f8f8f2>(</color><color=#f8f8f2>methodName</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>2</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>methodName</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#ae81ff>2</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>name</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#75715e>// If lowercase name, convert, else keep case</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>1</color> <color=#f92672>&&</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>isLowerCase</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>))</color> <color=#f92672>+</color> <color=#f8f8f2>name</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>}</color>

                        <color=#f8f8f2>Class</color><color=#f92672>[]</color> <color=#f8f8f2>paramTypes</color> <color=#f92672>=</color> <color=#f8f8f2>method</color><color=#f8f8f2>.</color><color=#a6e22e>getParameterTypes</color><color=#f8f8f2>();</color> <color=#75715e>// involves array copying...</color>
                        <color=#66d9ef>boolean</color> <color=#f8f8f2>hasParams</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>paramTypes</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>paramTypes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
                        <color=#66d9ef>boolean</color> <color=#f8f8f2>isVoid</color> <color=#f92672>=</color> <color=#f8f8f2>Void</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>method</color><color=#f8f8f2>.</color><color=#a6e22e>getReturnType</color><color=#f8f8f2>());</color>

                        <color=#75715e>// Filter return type & parameters</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>isVoid</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>hasParams</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                                <color=#f8f8f2>Object</color> <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>method</color><color=#f8f8f2>.</color><color=#a6e22e>invoke</color><color=#f8f8f2>(</color><color=#f8f8f2>pObject</color><color=#f8f8f2>);</color>
                                <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>", "</color><color=#f8f8f2>);</color>
                                <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>);</color>
                                <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'='</color><color=#f8f8f2>);</color>
                                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pDepth</color> <color=#f92672>!=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>value</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>isIdentityToString</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                                    <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>deepToString</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>,</color> <color=#f8f8f2>pForceDeep</color><color=#f8f8f2>,</color> <color=#f8f8f2>pDepth</color> <color=#f92672>></color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f8f8f2>pDepth</color> <color=#f92672>-</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>));</color>
                                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                                    <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>);</color>
                                <color=#f8f8f2>}</color>
                            <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                <color=#75715e>// Next..!</color>
                            <color=#f8f8f2>}</color>
                        <color=#f8f8f2>}</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'}'</color><color=#f8f8f2>);</color>

            <color=#75715e>// Get toString from original object</color>
            <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>insert</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Tests if the {@code toString} method of the given object is inherited from {@code Object}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pObject the object</color>
<color=#75715e>     * @return {@code true} if toString of class Object</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isIdentityToString</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Method</color> <color=#f8f8f2>toString</color> <color=#f92672>=</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getMethod</color><color=#f8f8f2>(</color><color=#e6db74>"toString"</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>toString</color><color=#f8f8f2>.</color><color=#a6e22e>getDeclaringClass</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>Object</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Ignore</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns a string on the same format as {@code Object.toString()}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pObject the object</color>
<color=#75715e>     * @return the object as a {@code String} on the format of {@code Object.toString()}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>identityToString</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pObject</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                    <color=#f92672>+</color> <color=#e6db74>'@'</color>
                    <color=#f92672>+</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>toHexString</color><color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>identityHashCode</color><color=#f8f8f2>(</color><color=#f8f8f2>pObject</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Tells whether or not the given string string matches the given regular expression.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>An invocation of this method of the form <tt>matches(<i>str</i>, <i>regex</i>)</tt> yields</color>
<color=#75715e>     * exactly the same result as the expression</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p></color>
<color=#75715e>     *</color>
<color=#75715e>     * <blockquote></color>
<color=#75715e>     *</color>
<color=#75715e>     * <tt> {@link Pattern}. {@link Pattern#matches(String, CharSequence) matches} (<i>regex</i>,</color>
<color=#75715e>     * <i>str</i>)</tt></color>
<color=#75715e>     *</color>
<color=#75715e>     * </blockquote></color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString the string</color>
<color=#75715e>     * @param pRegex  the regular expression to which this string is to be matched</color>
<color=#75715e>     * @return {@code true} if, and only if, this string matches the given regular expression</color>
<color=#75715e>     * @throws PatternSyntaxException if the regular expression's syntax is invalid</color>
<color=#75715e>     * @see Pattern</color>
<color=#75715e>     * @see String#matches(String)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>matches</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pRegex</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>PatternSyntaxException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Pattern</color><color=#f8f8f2>.</color><color=#a6e22e>matches</color><color=#f8f8f2>(</color><color=#f8f8f2>pRegex</color><color=#f8f8f2>,</color> <color=#f8f8f2>pString</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Replaces the first substring of the given string that matches the given regular expression with</color>
<color=#75715e>     * the given pReplacement.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>An invocation of this method of the form <tt>replaceFirst(<i>str</i>, </tt><i>regex</i>,</color>
<color=#75715e>     * <i>repl</i>)</tt> yields exactly the same result as the expression</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p></color>
<color=#75715e>     *</color>
<color=#75715e>     * <blockquote></color>
<color=#75715e>     *</color>
<color=#75715e>     * <tt> {@link Pattern}.{@link Pattern#compile compile}(<i>regex</i>). {@link Pattern#matcher</color>
<color=#75715e>     * matcher}(<i>str</i>). {@link java.util.regex.Matcher#replaceFirst</color>
<color=#75715e>     * replaceFirst}(<i>repl</i>)</tt></color>
<color=#75715e>     *</color>
<color=#75715e>     * </blockquote></color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString      the string</color>
<color=#75715e>     * @param pRegex       the regular expression to which this string is to be matched</color>
<color=#75715e>     * @param pReplacement the replacement text</color>
<color=#75715e>     * @return The resulting {@code String}</color>
<color=#75715e>     * @throws PatternSyntaxException if the regular expression's syntax is invalid</color>
<color=#75715e>     * @see Pattern</color>
<color=#75715e>     * @see java.util.regex.Matcher#replaceFirst(String)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>replaceFirst</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pRegex</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pReplacement</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Pattern</color><color=#f8f8f2>.</color><color=#a6e22e>compile</color><color=#f8f8f2>(</color><color=#f8f8f2>pRegex</color><color=#f8f8f2>).</color><color=#a6e22e>matcher</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>).</color><color=#a6e22e>replaceFirst</color><color=#f8f8f2>(</color><color=#f8f8f2>pReplacement</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Replaces each substring of this string that matches the given regular expression with the given</color>
<color=#75715e>     * pReplacement.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>An invocation of this method of the form <tt>replaceAll(<i>str</i>, <i>pRegex</i>,</color>
<color=#75715e>     * <i>repl</i><)</tt> yields exactly the same result as the expression</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p></color>
<color=#75715e>     *</color>
<color=#75715e>     * <blockquote></color>
<color=#75715e>     *</color>
<color=#75715e>     * <tt> {@link Pattern}.{@link Pattern#compile compile}(<i>pRegex</i>). {@link Pattern#matcher</color>
<color=#75715e>     * matcher}(</tt><i>str</i>{@code ). {@link java.util.regex.Matcher#replaceAll</color>
<color=#75715e>     * replaceAll}(}<i>repl</i>{@code )}</color>
<color=#75715e>     *</color>
<color=#75715e>     * </blockquote></color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString      the string</color>
<color=#75715e>     * @param pRegex       the regular expression to which this string is to be matched</color>
<color=#75715e>     * @param pReplacement the replacement string</color>
<color=#75715e>     * @return The resulting {@code String}</color>
<color=#75715e>     * @throws PatternSyntaxException if the regular expression's syntax is invalid</color>
<color=#75715e>     * @see Pattern</color>
<color=#75715e>     * @see String#replaceAll(String, String)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>replaceAll</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pRegex</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pReplacement</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Pattern</color><color=#f8f8f2>.</color><color=#a6e22e>compile</color><color=#f8f8f2>(</color><color=#f8f8f2>pRegex</color><color=#f8f8f2>).</color><color=#a6e22e>matcher</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>).</color><color=#a6e22e>replaceAll</color><color=#f8f8f2>(</color><color=#f8f8f2>pReplacement</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Splits this string around matches of the given regular expression.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>The array returned by this method contains each substring of this string that is terminated</color>
<color=#75715e>     * by another substring that matches the given expression or is terminated by the end of the</color>
<color=#75715e>     * string. The substrings in the array are in the order in which they occur in this string. If the</color>
<color=#75715e>     * expression does not match any part of the input then the resulting array has just one element,</color>
<color=#75715e>     * namely this string.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>The {@code pLimit} parameter controls the number of times the pattern is applied and</color>
<color=#75715e>     * therefore affects the length of the resulting array. If the pLimit <i>n</i> is greater than</color>
<color=#75715e>     * zero then the pattern will be applied at most <i>n</i>&nbsp;-&nbsp;1 times, the array's length</color>
<color=#75715e>     * will be no greater than <i>n</i>, and the array's last entry will contain all input beyond the</color>
<color=#75715e>     * last matched delimiter. If <i>n</i> is non-positive then the pattern will be applied as many</color>
<color=#75715e>     * times as possible and the array can have any length. If <i>n</i> is zero then the pattern will</color>
<color=#75715e>     * be applied as many times as possible, the array can have any length, and trailing empty strings</color>
<color=#75715e>     * will be discarded.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>An invocation of this method of the form <tt>split(<i>str</i>, <i>regex</i>, <i>n</i>)</tt></color>
<color=#75715e>     * yields the same result as the expression</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p></color>
<color=#75715e>     *</color>
<color=#75715e>     * <blockquote></color>
<color=#75715e>     * <p></color>
<color=#75715e>     * {@link Pattern}. {@link Pattern#compile compile}<tt>(<i>regex</i>). {@link</color>
<color=#75715e>     * Pattern#split(CharSequence, int) split}(<i>str</i>, <i>n</i>)</tt></color>
<color=#75715e>     *</color>
<color=#75715e>     * </blockquote></color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString the string</color>
<color=#75715e>     * @param pRegex  the delimiting regular expression</color>
<color=#75715e>     * @param pLimit  the result threshold, as described above</color>
<color=#75715e>     * @return the array of strings computed by splitting this string around matches of the given</color>
<color=#75715e>     * regular expression</color>
<color=#75715e>     * @throws PatternSyntaxException if the regular expression's syntax is invalid</color>
<color=#75715e>     * @see Pattern</color>
<color=#75715e>     * @see String#split(String, int)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#a6e22e>split</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pRegex</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pLimit</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Pattern</color><color=#f8f8f2>.</color><color=#a6e22e>compile</color><color=#f8f8f2>(</color><color=#f8f8f2>pRegex</color><color=#f8f8f2>).</color><color=#a6e22e>split</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLimit</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Splits this string around matches of the given regular expression.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>This method works as if by invoking the two-argument {@link #split(String, String, int) split}</color>
<color=#75715e>     * method with the given expression and a limit argument of zero. Trailing empty strings are</color>
<color=#75715e>     * therefore not included in the resulting array.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString the string</color>
<color=#75715e>     * @param pRegex  the delimiting regular expression</color>
<color=#75715e>     * @return the array of strings computed by splitting this string around matches of the given</color>
<color=#75715e>     * regular expression</color>
<color=#75715e>     * @throws PatternSyntaxException if the regular expression's syntax is invalid</color>
<color=#75715e>     * @see Pattern</color>
<color=#75715e>     * @see String#split(String)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#a6e22e>split</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pRegex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>split</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#f8f8f2>pRegex</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts the input string from camel-style (Java in-fix) naming convention to Lisp-style naming</color>
<color=#75715e>     * convention (hyphen delimitted, all lower case). Other characters in the string are left</color>
<color=#75715e>     * untouched.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>Eg. {@code "foo" => "foo"}, {@code "fooBar" => "foo-bar"}, {@code "myURL" => "my-url"},</color>
<color=#75715e>     * {@code "HttpRequestWrapper" => "http-request-wrapper"} {@code "HttpURLConnection" =></color>
<color=#75715e>     * "http-url-connection"} {@code "my45Caliber" => "my-45-caliber"} {@code "allready-lisp" =></color>
<color=#75715e>     * "allready-lisp"}</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString the camel-style input string</color>
<color=#75715e>     * @return the string converted to lisp-style naming convention</color>
<color=#75715e>     * @throws IllegalArgumentException if {@code pString == null}</color>
<color=#75715e>     * @see #lispToCamel(String)</color>
<color=#75715e>     */</color>
    <color=#75715e>// TODO: RefactorMe!</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>camelToLisp</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"string == null"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pString</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>lastPos</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>inCharSequence</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>inNumberSequence</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

        <color=#75715e>// NOTE: Start at index 1, as first letter should never be hyphen</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>char</color> <color=#f8f8f2>current</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>isUpperCase</color><color=#f8f8f2>(</color><color=#f8f8f2>current</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Init buffer if necessary</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color> <color=#75715e>// Allow for some growth</color>
                <color=#f8f8f2>}</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>inNumberSequence</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// Sequence end</color>
                    <color=#f8f8f2>inNumberSequence</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

                    <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>lastPos</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>));</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>current</color> <color=#f92672>!=</color> <color=#e6db74>'-'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'-'</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>}</color>
                    <color=#f8f8f2>lastPos</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#75715e>// Treat multiple uppercase chars as single word</color>
                <color=#66d9ef>char</color> <color=#f8f8f2>previous</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>==</color> <color=#f8f8f2>lastPos</color> <color=#f92672>||</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>isUpperCase</color><color=#f8f8f2>(</color><color=#f8f8f2>previous</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>inCharSequence</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#75715e>// Append word</color>
                <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>lastPos</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>).</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>());</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>previous</color> <color=#f92672>!=</color> <color=#e6db74>'-'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'-'</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
                <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>(</color><color=#f8f8f2>current</color><color=#f8f8f2>));</color>

                <color=#f8f8f2>lastPos</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>isDigit</color><color=#f8f8f2>(</color><color=#f8f8f2>current</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Init buffer if necessary</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#ae81ff>3</color><color=#f8f8f2>);</color> <color=#75715e>// Allow for some growth</color>
                <color=#f8f8f2>}</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>inCharSequence</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// Sequence end</color>
                    <color=#f8f8f2>inCharSequence</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

                    <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>lastPos</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>).</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>());</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>current</color> <color=#f92672>!=</color> <color=#e6db74>'-'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'-'</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>}</color>
                    <color=#f8f8f2>lastPos</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#75715e>// Treat multiple digits as single word</color>
                <color=#66d9ef>char</color> <color=#f8f8f2>previous</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>==</color> <color=#f8f8f2>lastPos</color> <color=#f92672>||</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>isDigit</color><color=#f8f8f2>(</color><color=#f8f8f2>previous</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>inNumberSequence</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#75715e>// Append word</color>
                <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>lastPos</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>).</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>());</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>previous</color> <color=#f92672>!=</color> <color=#e6db74>'-'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'-'</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
                <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>(</color><color=#f8f8f2>current</color><color=#f8f8f2>));</color>

                <color=#f8f8f2>lastPos</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>inNumberSequence</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Sequence end</color>
                <color=#f8f8f2>inNumberSequence</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

                <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>lastPos</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>));</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>current</color> <color=#f92672>!=</color> <color=#e6db74>'-'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'-'</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
                <color=#f8f8f2>lastPos</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>inCharSequence</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Sequence end</color>
                <color=#f8f8f2>inCharSequence</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

                <color=#75715e>// NOTE: Special treatment! Last upper case, is first char in</color>
                <color=#75715e>// next word, not last char in this word</color>
                <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>lastPos</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>).</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>());</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>current</color> <color=#f92672>!=</color> <color=#e6db74>'-'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#e6db74>'-'</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
                <color=#f8f8f2>lastPos</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Append the rest</color>
            <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>lastPos</color><color=#f8f8f2>).</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>());</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>isUpperCase</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>))</color> <color=#f92672>?</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>pString</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts the input string from Lisp-style naming convention (hyphen delimitted, all lower case)</color>
<color=#75715e>     * to camel-style (Java in-fix) naming convention. Other characters in the string are left</color>
<color=#75715e>     * untouched.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>Eg. {@code "foo" => "foo"}, {@code "foo-bar" => "fooBar"}, {@code "http-request-wrapper" =></color>
<color=#75715e>     * "httpRequestWrapper"} {@code "my-45-caliber" => "my45Caliber"} {@code "allreadyCamel" =></color>
<color=#75715e>     * "allreadyCamel"}</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p></color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString the lisp-style input string</color>
<color=#75715e>     * @return the string converted to camel-style</color>
<color=#75715e>     * @throws IllegalArgumentException if {@code pString == null}</color>
<color=#75715e>     * @see #lispToCamel(String, boolean)</color>
<color=#75715e>     * @see #camelToLisp(String)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>lispToCamel</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>lispToCamel</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts the input string from Lisp-style naming convention (hyphen delimitted, all lower case)</color>
<color=#75715e>     * to camel-style (Java in-fix) naming convention. Other characters in the string are left</color>
<color=#75715e>     * untouched.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>To create a string starting with a lower case letter (like Java variable names, etc),</color>
<color=#75715e>     * specify the {@code pFirstUpperCase} paramter to be {@code false}. Eg. {@code "foo" => "foo"},</color>
<color=#75715e>     * {@code "foo-bar" => "fooBar"}, {@code "allreadyCamel" => "allreadyCamel"}</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>To create a string starting with an upper case letter (like Java class name, etc), specify</color>
<color=#75715e>     * the {@code pFirstUpperCase} paramter to be {@code true}. Eg. {@code "http-request-wrapper" =></color>
<color=#75715e>     * "HttpRequestWrapper"} {@code "my-45-caliber" => "My45Caliber"}</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p></color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pString         the lisp-style input string</color>
<color=#75715e>     * @param pFirstUpperCase {@code true} if the first char should be upper case</color>
<color=#75715e>     * @return the string converted to camel-style</color>
<color=#75715e>     * @throws IllegalArgumentException if {@code pString == null}</color>
<color=#75715e>     * @see #camelToLisp(String)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>lispToCamel</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pFirstUpperCase</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"string == null"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pString</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>StringBuilder</color> <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>lastPos</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>char</color> <color=#f8f8f2>current</color> <color=#f92672>=</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>current</color> <color=#f92672>==</color> <color=#e6db74>'-'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

                <color=#75715e>// Init buffer if necessary</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>buf</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringBuilder</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color> <color=#75715e>// Can't be larger</color>
                <color=#f8f8f2>}</color>

                <color=#75715e>// Append with upper case</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lastPos</color> <color=#f92672>!=</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>pFirstUpperCase</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>toUpperCase</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>lastPos</color><color=#f8f8f2>)));</color>
                    <color=#f8f8f2>lastPos</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>lastPos</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>).</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>());</color>
                <color=#f8f8f2>lastPos</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>buf</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>toUpperCase</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>lastPos</color><color=#f8f8f2>)));</color>
            <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>append</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>lastPos</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>).</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>());</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>buf</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pFirstUpperCase</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>isUpperCase</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>capitalize</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>pFirstUpperCase</color> <color=#f92672>&&</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>isUpperCase</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>(</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>))</color> <color=#f92672>+</color> <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>return</color> <color=#f8f8f2>pString</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>reverse</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>chars</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>char</color><color=#f92672>[</color><color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>pString</color><color=#f8f8f2>.</color><color=#a6e22e>getChars</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>chars</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>chars</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>chars</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>char</color> <color=#f8f8f2>temp</color> <color=#f92672>=</color> <color=#f8f8f2>chars</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>chars</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>chars</color><color=#f92672>[</color><color=#f8f8f2>chars</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>1</color> <color=#f92672>-</color> <color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>chars</color><color=#f92672>[</color><color=#f8f8f2>chars</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>1</color> <color=#f92672>-</color> <color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>temp</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f8f8f2>(</color><color=#f8f8f2>chars</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>