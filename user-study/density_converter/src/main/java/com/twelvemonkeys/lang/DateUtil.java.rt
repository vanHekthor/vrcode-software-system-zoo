<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.lang</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.Date</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.TimeZone</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A utility class with useful date manipulation methods and constants.</color>
<color=#75715e> *</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @version $Id:</color>
<color=#75715e> * //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/lang/DateUtil.java#1</color>
<color=#75715e> * $</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>DateUtil</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * One second: 1000 milliseconds.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>SECOND</color> <color=#f92672>=</color> <color=#ae81ff>1000l</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * One minute: 60 seconds (60 000 milliseconds).</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>MINUTE</color> <color=#f92672>=</color> <color=#ae81ff>60l</color> <color=#f92672>*</color> <color=#f8f8f2>SECOND</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * One hour: 60 minutes (3 600 000 milliseconds). 60 minutes = 3 600 seconds = 3 600 000</color>
<color=#75715e>     * milliseconds</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>HOUR</color> <color=#f92672>=</color> <color=#ae81ff>60l</color> <color=#f92672>*</color> <color=#f8f8f2>MINUTE</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * One day: 24 hours (86 400 000 milliseconds). 24 hours = 1 440 minutes = 86 400 seconds = 86 400</color>
<color=#75715e>     * 000 milliseconds.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>DAY</color> <color=#f92672>=</color> <color=#ae81ff>24l</color> <color=#f92672>*</color> <color=#f8f8f2>HOUR</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * One calendar year: 365.2425 days (31556952000 milliseconds). 365.2425 days = 8765.82 hours =</color>
<color=#75715e>     * 525949.2 minutes = 31556952 seconds = 31556952000 milliseconds.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>CALENDAR_YEAR</color> <color=#f92672>=</color> <color=#ae81ff>3652425l</color> <color=#f92672>*</color> <color=#ae81ff>24l</color> <color=#f92672>*</color> <color=#ae81ff>60l</color> <color=#f92672>*</color> <color=#ae81ff>6l</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#a6e22e>DateUtil</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the time between the given start time and now (as defined by {@link</color>
<color=#75715e>     * System#currentTimeMillis()}).</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pStart the start time</color>
<color=#75715e>     * @return the time between the given start time and now.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>delta</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>pStart</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>pStart</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the time between the given start time and now (as defined by {@link</color>
<color=#75715e>     * System#currentTimeMillis()}).</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pStart the start time</color>
<color=#75715e>     * @return the time between the given start time and now.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>delta</color><color=#f8f8f2>(</color><color=#f8f8f2>Date</color> <color=#f8f8f2>pStart</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>pStart</color><color=#f8f8f2>.</color><color=#a6e22e>getTime</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the current time, rounded down to the closest second. Equivalent to invoking {@code</color>
<color=#75715e>     * roundToSecond(System.currentTimeMillis())}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the current time, rounded to the closest second.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>currentTimeSecond</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>roundToSecond</color><color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the current time, rounded down to the closest minute. Equivalent to invoking {@code</color>
<color=#75715e>     * roundToMinute(System.currentTimeMillis())}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the current time, rounded to the closest minute.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>currentTimeMinute</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>roundToMinute</color><color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the current time, rounded down to the closest hour. Equivalent to invoking {@code</color>
<color=#75715e>     * roundToHour(System.currentTimeMillis())}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the current time, rounded to the closest hour.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>currentTimeHour</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>roundToHour</color><color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the current time, rounded down to the closest day. Equivalent to invoking {@code</color>
<color=#75715e>     * roundToDay(System.currentTimeMillis())}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the current time, rounded to the closest day.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>currentTimeDay</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>roundToDay</color><color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Rounds the given time down to the closest second.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pTime time</color>
<color=#75715e>     * @return the time rounded to the closest second.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>roundToSecond</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pTime</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>pTime</color> <color=#f92672>/</color> <color=#f8f8f2>SECOND</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>SECOND</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Rounds the given time down to the closest minute.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pTime time</color>
<color=#75715e>     * @return the time rounded to the closest minute.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>roundToMinute</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pTime</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>pTime</color> <color=#f92672>/</color> <color=#f8f8f2>MINUTE</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>MINUTE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Rounds the given time down to the closest hour, using the default timezone.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pTime time</color>
<color=#75715e>     * @return the time rounded to the closest hour.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>roundToHour</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pTime</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>roundToHour</color><color=#f8f8f2>(</color><color=#f8f8f2>pTime</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeZone</color><color=#f8f8f2>.</color><color=#a6e22e>getDefault</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Rounds the given time down to the closest hour, using the given timezone.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pTime     time</color>
<color=#75715e>     * @param pTimeZone the timezone to use when rounding</color>
<color=#75715e>     * @return the time rounded to the closest hour.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>roundToHour</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pTime</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>TimeZone</color> <color=#f8f8f2>pTimeZone</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>offset</color> <color=#f92672>=</color> <color=#f8f8f2>pTimeZone</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>pTime</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>pTime</color> <color=#f92672>/</color> <color=#f8f8f2>HOUR</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>HOUR</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Rounds the given time down to the closest day, using the default timezone.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pTime time</color>
<color=#75715e>     * @return the time rounded to the closest day.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>roundToDay</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pTime</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>roundToDay</color><color=#f8f8f2>(</color><color=#f8f8f2>pTime</color><color=#f8f8f2>,</color> <color=#f8f8f2>TimeZone</color><color=#f8f8f2>.</color><color=#a6e22e>getDefault</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Rounds the given time down to the closest day, using the given timezone.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pTime     time</color>
<color=#75715e>     * @param pTimeZone the timezone to use when rounding</color>
<color=#75715e>     * @return the time rounded to the closest day.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>roundToDay</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>long</color> <color=#f8f8f2>pTime</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>TimeZone</color> <color=#f8f8f2>pTimeZone</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>offset</color> <color=#f92672>=</color> <color=#f8f8f2>pTimeZone</color><color=#f8f8f2>.</color><color=#a6e22e>getOffset</color><color=#f8f8f2>(</color><color=#f8f8f2>pTime</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(((</color><color=#f8f8f2>pTime</color> <color=#f92672>+</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>DAY</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>DAY</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>