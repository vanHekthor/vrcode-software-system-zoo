<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.lang</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Array</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Field</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.InvocationTargetException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Method</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.security.AccessController</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.security.PrivilegedAction</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.HashMap</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Map</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Properties</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A utility class with some useful system-related functions.</color>
<color=#75715e> *</color>
<color=#75715e> * <p><em>NOTE: This class is not considered part of the public API and may be changed without</color>
<color=#75715e> * notice</em></color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haku $</color>
<color=#75715e> * @version $Id:</color>
<color=#75715e> * //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/lang/SystemUtil.java#3</color>
<color=#75715e> * $</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>SystemUtil</color> <color=#f8f8f2>{</color>
    <color=#75715e>/**</color>
<color=#75715e>     * {@code ".xml"}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#f8f8f2>XML_PROPERTIES</color> <color=#f92672>=</color> <color=#e6db74>".xml"</color><color=#f8f8f2>;</color>
    <color=#75715e>/**</color>
<color=#75715e>     * {@code ".properties"}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#f8f8f2>STD_PROPERTIES</color> <color=#f92672>=</color> <color=#e6db74>".properties"</color><color=#f8f8f2>;</color>

    <color=#75715e>// Disallow creating objects of this type</color>
    <color=#66d9ef>private</color> <color=#a6e22e>SystemUtil</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * This class marks an inputstream as containing XML, does nothing</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>XMLPropertiesInputStream</color> <color=#66d9ef>extends</color> <color=#f8f8f2>FilterInputStream</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>public</color> <color=#a6e22e>XMLPropertiesInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>InputStream</color> <color=#f8f8f2>pIS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>pIS</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the named resource as a stream from the given Class' Classoader. If the pGuessSuffix</color>
<color=#75715e>     * parameter is true, the method will try to append typical properties file suffixes, such as</color>
<color=#75715e>     * ".properties" or ".xml".</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pClassLoader the class loader to use</color>
<color=#75715e>     * @param pName        name of the resource</color>
<color=#75715e>     * @param pGuessSuffix guess suffix</color>
<color=#75715e>     * @return an input stream reading from the resource</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>InputStream</color> <color=#a6e22e>getResourceAsStream</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>pClassLoader</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pName</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pGuessSuffix</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>InputStream</color> <color=#f8f8f2>is</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>pGuessSuffix</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>is</color> <color=#f92672>=</color> <color=#f8f8f2>pClassLoader</color><color=#f8f8f2>.</color><color=#a6e22e>getResourceAsStream</color><color=#f8f8f2>(</color><color=#f8f8f2>pName</color><color=#f8f8f2>);</color>

            <color=#75715e>// If XML, wrap stream</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>is</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>pName</color><color=#f8f8f2>.</color><color=#a6e22e>endsWith</color><color=#f8f8f2>(</color><color=#f8f8f2>XML_PROPERTIES</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>is</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>XMLPropertiesInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>is</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Try normal properties</color>
            <color=#f8f8f2>is</color> <color=#f92672>=</color> <color=#f8f8f2>pClassLoader</color><color=#f8f8f2>.</color><color=#a6e22e>getResourceAsStream</color><color=#f8f8f2>(</color><color=#f8f8f2>pName</color> <color=#f92672>+</color> <color=#f8f8f2>STD_PROPERTIES</color><color=#f8f8f2>);</color>

            <color=#75715e>// Try XML</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>is</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>is</color> <color=#f92672>=</color> <color=#f8f8f2>pClassLoader</color><color=#f8f8f2>.</color><color=#a6e22e>getResourceAsStream</color><color=#f8f8f2>(</color><color=#f8f8f2>pName</color> <color=#f92672>+</color> <color=#f8f8f2>XML_PROPERTIES</color><color=#f8f8f2>);</color>

                <color=#75715e>// Wrap stream</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>is</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>is</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>XMLPropertiesInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>is</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Return stream</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>is</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the named file as a stream from the current directory. If the pGuessSuffix parameter is</color>
<color=#75715e>     * true, the method will try to append typical properties file suffixes, such as ".properties" or</color>
<color=#75715e>     * ".xml".</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pName        name of the resource</color>
<color=#75715e>     * @param pGuessSuffix guess suffix</color>
<color=#75715e>     * @return an input stream reading from the resource</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>InputStream</color> <color=#a6e22e>getFileAsStream</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pName</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pGuessSuffix</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>InputStream</color> <color=#f8f8f2>is</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>File</color> <color=#f8f8f2>propertiesFile</color><color=#f8f8f2>;</color>

        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>pGuessSuffix</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Get file</color>
                <color=#f8f8f2>propertiesFile</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pName</color><color=#f8f8f2>);</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>propertiesFile</color><color=#f8f8f2>.</color><color=#a6e22e>exists</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>is</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>propertiesFile</color><color=#f8f8f2>);</color>

                    <color=#75715e>// If XML, wrap stream</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pName</color><color=#f8f8f2>.</color><color=#a6e22e>endsWith</color><color=#f8f8f2>(</color><color=#f8f8f2>XML_PROPERTIES</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>is</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>XMLPropertiesInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>is</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Try normal properties</color>
                <color=#f8f8f2>propertiesFile</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pName</color> <color=#f92672>+</color> <color=#f8f8f2>STD_PROPERTIES</color><color=#f8f8f2>);</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>propertiesFile</color><color=#f8f8f2>.</color><color=#a6e22e>exists</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>is</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>propertiesFile</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// Try XML</color>
                    <color=#f8f8f2>propertiesFile</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pName</color> <color=#f92672>+</color> <color=#f8f8f2>XML_PROPERTIES</color><color=#f8f8f2>);</color>

                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>propertiesFile</color><color=#f8f8f2>.</color><color=#a6e22e>exists</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                        <color=#75715e>// Wrap stream</color>
                        <color=#f8f8f2>is</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>XMLPropertiesInputStream</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>FileInputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>propertiesFile</color><color=#f8f8f2>));</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>FileNotFoundException</color> <color=#f8f8f2>fnf</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Should not happen, as we always test that the file .exists()</color>
            <color=#75715e>// before creating InputStream</color>
            <color=#75715e>// assert false;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>is</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Utility method for loading a named properties-file for a class.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>The properties-file is loaded through either:</color>
<color=#75715e>     *</color>
<color=#75715e>     * <OL></color>
<color=#75715e>     * <LI>The given class' class loader (from classpath)</color>
<color=#75715e>     * <LI>Or, the system class loader (from classpath)</color>
<color=#75715e>     * <LI>Or, if it cannot be found in the classpath, an attempt to read from the current directory</color>
<color=#75715e>     * (or full path if given).</color>
<color=#75715e>     * </OL></color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>Both normal java.util.Properties and com.twelvemonkeys.util.XMLProperties are supported</color>
<color=#75715e>     * (XML-properties must have ".xml" as its file extension).</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pClass The class to load properties for. If this parameter is {@code null}, the method</color>
<color=#75715e>     *               will work exactly as {@link #loadProperties(String)}</color>
<color=#75715e>     * @param pName  The name of the properties-file. If this parameter is {@code null}, the method</color>
<color=#75715e>     *               will work exactly as {@link #loadProperties(Class)}</color>
<color=#75715e>     * @return A Properties mapping read from the given file or for the given class.</color>
<color=#75715e>     * <!--If no properties-file was found, an empty Properties object is</color>
<color=#75715e>     * returned.--></color>
<color=#75715e>     * @throws NullPointerException  if both {@code pName} and {@code pClass} paramters are {@code</color>
<color=#75715e>     *                               null}</color>
<color=#75715e>     * @throws IOException           if an error occurs during load.</color>
<color=#75715e>     * @throws FileNotFoundException if no properties-file could be found.</color>
<color=#75715e>     * @todo Reconsider ever using the System ClassLoader:</color>
<color=#75715e>     * http://www.javaworld.com/javaworld/javaqa/2003-06/01-qa-0606-load.html</color>
<color=#75715e>     * @todo Consider using Context Classloader instead?</color>
<color=#75715e>     * @see #loadProperties(String)</color>
<color=#75715e>     * @see #loadProperties(Class)</color>
<color=#75715e>     * @see ClassLoader#getResourceAsStream</color>
<color=#75715e>     * @see ClassLoader#getSystemResourceAsStream</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Properties</color> <color=#a6e22e>loadProperties</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color> <color=#f8f8f2>pClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pName</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Convert to name the classloader understands</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f92672>!</color><color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>pName</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>pName</color> <color=#f8f8f2>:</color> <color=#f8f8f2>pClass</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>replace</color><color=#f8f8f2>(</color><color=#e6db74>'.'</color><color=#f8f8f2>,</color> <color=#e6db74>'/'</color><color=#f8f8f2>);</color>

        <color=#75715e>// Should we try to guess suffix?</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>guessSuffix</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>pName</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>pName</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#e6db74>'.'</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>InputStream</color> <color=#f8f8f2>is</color><color=#f8f8f2>;</color>

        <color=#75715e>// TODO: WHAT IF MULTIPLE RESOURCES EXISTS?!</color>
        <color=#75715e>// Try loading resource through the current class' classloader</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pClass</color> <color=#f92672>!=</color> <color=#66d9ef>null</color>
                <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>is</color> <color=#f92672>=</color> <color=#f8f8f2>getResourceAsStream</color><color=#f8f8f2>(</color><color=#f8f8f2>pClass</color><color=#f8f8f2>.</color><color=#a6e22e>getClassLoader</color><color=#f8f8f2>(),</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>guessSuffix</color><color=#f8f8f2>))</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// && (is = getResourceAsStream(pClass, name, guessSuffix)) != null) {</color>
            <color=#75715e>// Nothing to do</color>
            <color=#75715e>// System.out.println(((is instanceof XMLPropertiesInputStream) ?</color>
            <color=#75715e>//                    "XML-properties" : "Normal .properties")</color>
            <color=#75715e>//                   + " from Class' ClassLoader");</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>// If that fails, try the system classloader</color>
        <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>is</color> <color=#f92672>=</color> <color=#f8f8f2>getResourceAsStream</color><color=#f8f8f2>(</color><color=#f8f8f2>ClassLoader</color><color=#f8f8f2>.</color><color=#a6e22e>getSystemClassLoader</color><color=#f8f8f2>(),</color> <color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>guessSuffix</color><color=#f8f8f2>))</color>
                <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// else if ((is = getSystemResourceAsStream(name, guessSuffix)) != null) {</color>
            <color=#75715e>// Nothing to do</color>
            <color=#75715e>// System.out.println(((is instanceof XMLPropertiesInputStream) ?</color>
            <color=#75715e>//                    "XML-properties" : "Normal .properties")</color>
            <color=#75715e>//                   + " from System ClassLoader");</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>// All failed, try loading from file</color>
        <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>is</color> <color=#f92672>=</color> <color=#f8f8f2>getFileAsStream</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>,</color> <color=#f8f8f2>guessSuffix</color><color=#f8f8f2>))</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// System.out.println(((is instanceof XMLPropertiesInputStream) ?</color>
            <color=#75715e>//                    "XML-properties" : "Normal .properties")</color>
            <color=#75715e>//                   + " from System ClassLoader");</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>guessSuffix</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// TODO: file extension iterator or something...</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileNotFoundException</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color> <color=#f92672>+</color> <color=#e6db74>".properties or "</color> <color=#f92672>+</color> <color=#f8f8f2>name</color> <color=#f92672>+</color> <color=#e6db74>".xml"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileNotFoundException</color><color=#f8f8f2>(</color><color=#f8f8f2>name</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// We have inputstream now, load...</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>loadProperties</color><color=#f8f8f2>(</color><color=#f8f8f2>is</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
            <color=#75715e>// NOTE: If is == null, a FileNotFoundException must have been thrown above</color>
            <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>is</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>ioe</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Not critical...</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Utility method for loading a properties-file for a given class. The properties are searched for</color>
<color=#75715e>     * on the form "com/package/ClassName.properties" or "com/package/ClassName.xml".</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>The properties-file is loaded through either:</color>
<color=#75715e>     *</color>
<color=#75715e>     * <OL></color>
<color=#75715e>     * <LI>The given class' class loader (from classpath)</color>
<color=#75715e>     * <LI>Or, the system class loader (from classpath)</color>
<color=#75715e>     * <LI>Or, if it cannot be found in the classpath, an attempt to read from the current directory</color>
<color=#75715e>     * (or full path if given).</color>
<color=#75715e>     * </OL></color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>Both normal java.util.Properties and com.twelvemonkeys.util.XMLProperties are supported</color>
<color=#75715e>     * (XML-properties must have ".xml" as its file extension).</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pClass The class to load properties for</color>
<color=#75715e>     * @return A Properties mapping for the given class.</color>
<color=#75715e>     * <!--If no properties-</color>
<color=#75715e>     * file was found, an empty Properties object is returned.--></color>
<color=#75715e>     * @throws NullPointerException  if the {@code pClass} paramters is {@code null}</color>
<color=#75715e>     * @throws IOException           if an error occurs during load.</color>
<color=#75715e>     * @throws FileNotFoundException if no properties-file could be found.</color>
<color=#75715e>     * @see #loadProperties(String)</color>
<color=#75715e>     * @see #loadProperties(Class, String)</color>
<color=#75715e>     * @see ClassLoader#getResourceAsStream</color>
<color=#75715e>     * @see ClassLoader#getSystemResourceAsStream</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Properties</color> <color=#a6e22e>loadProperties</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color> <color=#f8f8f2>pClass</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>loadProperties</color><color=#f8f8f2>(</color><color=#f8f8f2>pClass</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Utility method for loading a named properties-file.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>The properties-file is loaded through either:</color>
<color=#75715e>     *</color>
<color=#75715e>     * <OL></color>
<color=#75715e>     * <LI>The system class loader (from classpath)</color>
<color=#75715e>     * <LI>Or, if it cannot be found in the classpath, an attempt to read from the current</color>
<color=#75715e>     * directory.</color>
<color=#75715e>     * </OL></color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>Both normal java.util.Properties and com.twelvemonkeys.util.XMLProperties are supported</color>
<color=#75715e>     * (XML-properties must have ".xml" as its file extension).</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pName The name of the properties-file.</color>
<color=#75715e>     * @return A Properties mapping read from the given file.</color>
<color=#75715e>     * <!--If no properties-</color>
<color=#75715e>     * file was found, an empty Properties object is returned.--></color>
<color=#75715e>     * @throws NullPointerException  if the {@code pName} paramters is {@code null}</color>
<color=#75715e>     * @throws IOException           if an error occurs during load.</color>
<color=#75715e>     * @throws FileNotFoundException if no properties-file could be found.</color>
<color=#75715e>     * @see #loadProperties(Class)</color>
<color=#75715e>     * @see #loadProperties(Class, String)</color>
<color=#75715e>     * @see ClassLoader#getSystemResourceAsStream</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Properties</color> <color=#a6e22e>loadProperties</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pName</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>loadProperties</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>pName</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * Utility method for loading a properties-file.</color>
<color=#75715e>     * <P></color>
<color=#75715e>     * The properties files may also be contained in a zip/jar-file named</color>
<color=#75715e>     * by the {@code com.twelvemonkeys.util.Config} system property (use "java -D"</color>
<color=#75715e>     * to override). Default is "config.zip" in the current directory.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pName The name of the file to loaded</color>
<color=#75715e>     * @return A Properties mapping for the given class. If no properties-</color>
<color=#75715e>     *         file was found, an empty Properties object is returned.</color>
<color=#75715e>     *</color>
<color=#75715e>     */</color>
  <color=#75715e>/*</color>
<color=#75715e>  public static Properties loadProperties(String pName) throws IOException {</color>
<color=#75715e>      // Use XML?</color>
<color=#75715e>      boolean useXML = pName.endsWith(XML_PROPERTIES) ? true : false;</color>

<color=#75715e>      InputStream is = null;</color>

<color=#75715e>      File file = new File(pName);</color>

<color=#75715e>      String configName = System.getProperty("com.twelvemonkeys.util.Config");</color>
<color=#75715e>      File configArchive = new File(!StringUtil.isEmpty(configName)</color>
<color=#75715e>                                    ? configName : DEFAULT_CONFIG);</color>

<color=#75715e>      // Get input stream to the file containing the properties</color>
<color=#75715e>      if (file.exists()) {</color>
<color=#75715e>          // Try reading from file, normal way</color>
<color=#75715e>          is = new FileInputStream(file);</color>
<color=#75715e>      }</color>
<color=#75715e>      else if (configArchive.exists()) {</color>
<color=#75715e>          // Try reading properties from zip-file</color>
<color=#75715e>          ZipFile zip = new ZipFile(configArchive);</color>
<color=#75715e>          ZipEntry ze = zip.getEntry(pName);</color>
<color=#75715e>          if (ze != null) {</color>
<color=#75715e>              is = zip.getInputStream(ze);</color>
<color=#75715e>          }</color>

<color=#75715e>      }</color>

<color=#75715e>      // Do the loading</color>
<color=#75715e>      try {</color>
<color=#75715e>          // Load the properties</color>
<color=#75715e>          return loadProperties(is, useXML);</color>
<color=#75715e>      }</color>
<color=#75715e>      finally {</color>
<color=#75715e>          // Try closing the archive to free resources</color>
<color=#75715e>          if (is != null) {</color>
<color=#75715e>              try {</color>
<color=#75715e>                  is.close();</color>
<color=#75715e>              }</color>
<color=#75715e>              catch (IOException ioe) {</color>
<color=#75715e>                  // Not critical...</color>
<color=#75715e>              }</color>
<color=#75715e>          }</color>
<color=#75715e>      }</color>

<color=#75715e>  }</color>
<color=#75715e>  */</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns a Properties, loaded from the given inputstream. If the given inputstream is null, then</color>
<color=#75715e>     * an empty Properties object is returned.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pInput the inputstream to read from</color>
<color=#75715e>     * @return a Properties object read from the given stream, or an empty Properties mapping, if the</color>
<color=#75715e>     * stream is null.</color>
<color=#75715e>     * @throws IOException if an error occurred when reading from the input stream.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Properties</color> <color=#a6e22e>loadProperties</color><color=#f8f8f2>(</color><color=#f8f8f2>InputStream</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pInput</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"InputStream == null!"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>Properties</color> <color=#f8f8f2>mapping</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Properties</color><color=#f8f8f2>();</color>
    <color=#75715e>/*if (pInput instanceof  XMLPropertiesInputStream) {</color>
<color=#75715e>        mapping = new XMLProperties();</color>
<color=#75715e>    }</color>
<color=#75715e>    else {</color>
<color=#75715e>        mapping = new Properties();</color>
<color=#75715e>    }*/</color>

        <color=#75715e>// Load the properties</color>
        <color=#f8f8f2>mapping</color><color=#f8f8f2>.</color><color=#a6e22e>load</color><color=#f8f8f2>(</color><color=#f8f8f2>pInput</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>mapping</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>({</color><color=#e6db74>"SuspiciousSystemArraycopy"</color><color=#f8f8f2>})</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#a6e22e>clone</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Cloneable</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>CloneNotSupportedException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pObject</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color> <color=#75715e>// Null is clonable.. Easy. ;-)</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// All arrays does have a clone method, but it's invisible for reflection...</color>
        <color=#75715e>// By luck, multi-dimensional primitive arrays are instances of Object[]</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pObject</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Object</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>((</color><color=#f8f8f2>Object</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>).</color><color=#a6e22e>clone</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pObject</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>isArray</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#75715e>// One-dimensional primitive array, cloned manually</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>lenght</color> <color=#f92672>=</color> <color=#f8f8f2>Array</color><color=#f8f8f2>.</color><color=#a6e22e>getLength</color><color=#f8f8f2>(</color><color=#f8f8f2>pObject</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>Object</color> <color=#f8f8f2>clone</color> <color=#f92672>=</color> <color=#f8f8f2>Array</color><color=#f8f8f2>.</color><color=#a6e22e>newInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>pObject</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getComponentType</color><color=#f8f8f2>(),</color> <color=#f8f8f2>lenght</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>pObject</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>clone</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>lenght</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>clone</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Find the clone method</color>
            <color=#f8f8f2>Method</color> <color=#f8f8f2>clone</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>Class</color> <color=#f8f8f2>clazz</color> <color=#f92672>=</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>();</color>
            <color=#66d9ef>do</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>clone</color> <color=#f92672>=</color> <color=#f8f8f2>clazz</color><color=#f8f8f2>.</color><color=#a6e22e>getDeclaredMethod</color><color=#f8f8f2>(</color><color=#e6db74>"clone"</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color> <color=#75715e>// Found, or throws exception above</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NoSuchMethodException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// Ignore</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>while</color> <color=#f8f8f2>((</color><color=#f8f8f2>clazz</color> <color=#f92672>=</color> <color=#f8f8f2>clazz</color><color=#f8f8f2>.</color><color=#a6e22e>getSuperclass</color><color=#f8f8f2>())</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

            <color=#75715e>// NOTE: This should never happen</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>clone</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>CloneNotSupportedException</color><color=#f8f8f2>(</color><color=#f8f8f2>pObject</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Override access if needed</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>clone</color><color=#f8f8f2>.</color><color=#a6e22e>isAccessible</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>clone</color><color=#f8f8f2>.</color><color=#a6e22e>setAccessible</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Invoke clone method on original object</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>clone</color><color=#f8f8f2>.</color><color=#a6e22e>invoke</color><color=#f8f8f2>(</color><color=#f8f8f2>pObject</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>SecurityException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>CloneNotSupportedException</color> <color=#f8f8f2>cns</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CloneNotSupportedException</color><color=#f8f8f2>(</color><color=#f8f8f2>pObject</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>cns</color><color=#f8f8f2>.</color><color=#a6e22e>initCause</color><color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>);</color>
            <color=#66d9ef>throw</color> <color=#f8f8f2>cns</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalAccessException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>CloneNotSupportedException</color><color=#f8f8f2>(</color><color=#f8f8f2>pObject</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InvocationTargetException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getTargetException</color><color=#f8f8f2>()</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>CloneNotSupportedException</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#f8f8f2>(</color><color=#f8f8f2>CloneNotSupportedException</color><color=#f8f8f2>)</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getTargetException</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getTargetException</color><color=#f8f8f2>()</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>RuntimeException</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#f8f8f2>(</color><color=#f8f8f2>RuntimeException</color><color=#f8f8f2>)</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getTargetException</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getTargetException</color><color=#f8f8f2>()</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Error</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#f8f8f2>(</color><color=#f8f8f2>Error</color><color=#f8f8f2>)</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getTargetException</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>CloneNotSupportedException</color><color=#f8f8f2>(</color><color=#f8f8f2>pObject</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>//    public static void loadLibrary(String pLibrary) {</color>
    <color=#75715e>//        NativeLoader.loadLibrary(pLibrary);</color>
    <color=#75715e>//    }</color>
    <color=#75715e>//</color>
    <color=#75715e>//    public static void loadLibrary(String pLibrary, ClassLoader pLoader) {</color>
    <color=#75715e>//        NativeLoader.loadLibrary(pLibrary, pLoader);</color>
    <color=#75715e>//    }</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>main</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>args</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>CloneNotSupportedException</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"clone: "</color> <color=#f92672>+</color> <color=#f8f8f2>args</color><color=#f8f8f2>.</color><color=#a6e22e>clone</color><color=#f8f8f2>().</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#e6db74>" ("</color> <color=#f92672>+</color> <color=#f8f8f2>args</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#e6db74>")"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"copy: "</color> <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>String</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>clone</color><color=#f8f8f2>(</color><color=#f8f8f2>args</color><color=#f8f8f2>)).</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#e6db74>" ("</color> <color=#f92672>+</color> <color=#f8f8f2>args</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#e6db74>")"</color><color=#f8f8f2>);</color>

        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>ints</color> <color=#f92672>=</color> <color=#f8f8f2>{</color><color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color><color=#f8f8f2>};</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>copies</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>clone</color><color=#f8f8f2>(</color><color=#f8f8f2>ints</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Copies: "</color> <color=#f92672>+</color> <color=#f8f8f2>copies</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#e6db74>" ("</color> <color=#f92672>+</color> <color=#f8f8f2>ints</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#e6db74>")"</color><color=#f8f8f2>);</color>

        <color=#66d9ef>int</color><color=#f92672>[][]</color> <color=#f8f8f2>intsToo</color> <color=#f92672>=</color> <color=#f8f8f2>{{</color><color=#ae81ff>1</color><color=#f8f8f2>},</color> <color=#f8f8f2>{</color><color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color><color=#f8f8f2>},</color> <color=#f8f8f2>{</color><color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#ae81ff>5</color><color=#f8f8f2>,</color> <color=#ae81ff>6</color><color=#f8f8f2>}};</color>
        <color=#66d9ef>int</color><color=#f92672>[][]</color> <color=#f8f8f2>copiesToo</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[][]</color><color=#f8f8f2>)</color> <color=#f8f8f2>clone</color><color=#f8f8f2>(</color><color=#f8f8f2>intsToo</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Copies: "</color> <color=#f92672>+</color> <color=#f8f8f2>copiesToo</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#e6db74>" ("</color> <color=#f92672>+</color> <color=#f8f8f2>intsToo</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#e6db74>")"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Copies0: "</color> <color=#f92672>+</color> <color=#f8f8f2>copiesToo</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#e6db74>" ("</color> <color=#f92672>+</color> <color=#f8f8f2>intsToo</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#e6db74>")"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Copies1: "</color> <color=#f92672>+</color> <color=#f8f8f2>copiesToo</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#e6db74>" ("</color> <color=#f92672>+</color> <color=#f8f8f2>intsToo</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#e6db74>")"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Copies2: "</color> <color=#f92672>+</color> <color=#f8f8f2>copiesToo</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#e6db74>" ("</color> <color=#f92672>+</color> <color=#f8f8f2>intsToo</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>+</color> <color=#e6db74>")"</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>map</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f92672>></color><color=#f8f8f2>();</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>arg</color> <color=#f8f8f2>:</color> <color=#f8f8f2>args</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>map</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>arg</color><color=#f8f8f2>,</color> <color=#f8f8f2>arg</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>Map</color> <color=#f8f8f2>copy</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f8f8f2>)</color> <color=#f8f8f2>clone</color><color=#f8f8f2>((</color><color=#f8f8f2>Cloneable</color><color=#f8f8f2>)</color> <color=#f8f8f2>map</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Map : "</color> <color=#f92672>+</color> <color=#f8f8f2>map</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Copy: "</color> <color=#f92672>+</color> <color=#f8f8f2>copy</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>    SecurityManager sm = System.getSecurityManager();</color>

<color=#75715e>    try {</color>
<color=#75715e>        System.setSecurityManager(new SecurityManager() {</color>
<color=#75715e>            public void checkPermission(Permission perm) {</color>
<color=#75715e>                if (perm.getName().equals("suppressAccessChecks")) {</color>
<color=#75715e>                    throw new SecurityException();</color>
<color=#75715e>                }</color>
<color=#75715e>                //super.checkPermission(perm);</color>
<color=#75715e>            }</color>
<color=#75715e>    });</color>
<color=#75715e>    */</color>

        <color=#f8f8f2>Cloneable</color> <color=#f8f8f2>cloneable</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Cloneable</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>};</color> <color=#75715e>// No public clone method</color>
        <color=#f8f8f2>Cloneable</color> <color=#f8f8f2>clone</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Cloneable</color><color=#f8f8f2>)</color> <color=#f8f8f2>clone</color><color=#f8f8f2>(</color><color=#f8f8f2>cloneable</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"cloneable: "</color> <color=#f92672>+</color> <color=#f8f8f2>cloneable</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"clone: "</color> <color=#f92672>+</color> <color=#f8f8f2>clone</color><color=#f8f8f2>);</color>

    <color=#75715e>/*</color>
<color=#75715e>    }</color>
<color=#75715e>    finally {</color>
<color=#75715e>        System.setSecurityManager(sm);</color>
<color=#75715e>    }</color>
<color=#75715e>    */</color>

        <color=#f8f8f2>AccessController</color><color=#f8f8f2>.</color><color=#a6e22e>doPrivileged</color><color=#f8f8f2>(</color>
                <color=#66d9ef>new</color> <color=#f8f8f2>PrivilegedAction</color><color=#f92672><</color><color=#f8f8f2>Void</color><color=#f92672>></color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>public</color> <color=#f8f8f2>Void</color> <color=#a6e22e>run</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>},</color>
                <color=#f8f8f2>AccessController</color><color=#f8f8f2>.</color><color=#a6e22e>getContext</color><color=#f8f8f2>());</color>

        <color=#75715e>// String string = args.length > 0 ? args[0] : "jaffa";</color>
        <color=#75715e>// clone(string);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Tests if a named class is generally available. If a class is considered available, a call to</color>
<color=#75715e>     * {@code Class.forName(pClassName)} will not result in an exception.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pClassName the class name to test</color>
<color=#75715e>     * @return {@code true} if available</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isClassAvailable</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pClassName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>isClassAvailable</color><color=#f8f8f2>(</color><color=#f8f8f2>pClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassLoader</color><color=#f8f8f2>)</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Tests if a named class is available from another class. If a class is considered available, a</color>
<color=#75715e>     * call to {@code Class.forName(pClassName, true, pFromClass.getClassLoader())} will not result in</color>
<color=#75715e>     * an exception.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pClassName the class name to test</color>
<color=#75715e>     * @param pFromClass the class to test from</color>
<color=#75715e>     * @return {@code true} if available</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isClassAvailable</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>Class</color> <color=#f8f8f2>pFromClass</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>loader</color> <color=#f92672>=</color> <color=#f8f8f2>pFromClass</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>pFromClass</color><color=#f8f8f2>.</color><color=#a6e22e>getClassLoader</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>isClassAvailable</color><color=#f8f8f2>(</color><color=#f8f8f2>pClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>loader</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isClassAvailable</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>pLoader</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#75715e>// TODO: Sometimes init is not needed, but need to find a way to know...</color>
            <color=#f8f8f2>getClass</color><color=#f8f8f2>(</color><color=#f8f8f2>pClassName</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLoader</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>SecurityException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Ignore</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Ignore</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>LinkageError</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Ignore</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isFieldAvailable</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pClassName</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pFieldName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>isFieldAvailable</color><color=#f8f8f2>(</color><color=#f8f8f2>pClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>pFieldName</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassLoader</color><color=#f8f8f2>)</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isFieldAvailable</color><color=#f8f8f2>(</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pClassName</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pFieldName</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Class</color> <color=#f8f8f2>pFromClass</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>loader</color> <color=#f92672>=</color> <color=#f8f8f2>pFromClass</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>pFromClass</color><color=#f8f8f2>.</color><color=#a6e22e>getClassLoader</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>isFieldAvailable</color><color=#f8f8f2>(</color><color=#f8f8f2>pClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>pFieldName</color><color=#f8f8f2>,</color> <color=#f8f8f2>loader</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isFieldAvailable</color><color=#f8f8f2>(</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pClassName</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pFieldName</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>pLoader</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Class</color> <color=#f8f8f2>cl</color> <color=#f92672>=</color> <color=#f8f8f2>getClass</color><color=#f8f8f2>(</color><color=#f8f8f2>pClassName</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLoader</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>Field</color> <color=#f8f8f2>field</color> <color=#f92672>=</color> <color=#f8f8f2>cl</color><color=#f8f8f2>.</color><color=#a6e22e>getField</color><color=#f8f8f2>(</color><color=#f8f8f2>pFieldName</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>field</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Ignore</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>LinkageError</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Ignore</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NoSuchFieldException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Ignore</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isMethodAvailable</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pMethodName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Finds void only</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>isMethodAvailable</color><color=#f8f8f2>(</color><color=#f8f8f2>pClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>pMethodName</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassLoader</color><color=#f8f8f2>)</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isMethodAvailable</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pMethodName</color><color=#f8f8f2>,</color> <color=#f8f8f2>Class</color><color=#f92672>[]</color> <color=#f8f8f2>pParams</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>isMethodAvailable</color><color=#f8f8f2>(</color><color=#f8f8f2>pClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>pMethodName</color><color=#f8f8f2>,</color> <color=#f8f8f2>pParams</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassLoader</color><color=#f8f8f2>)</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isMethodAvailable</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>pClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pMethodName</color><color=#f8f8f2>,</color> <color=#f8f8f2>Class</color><color=#f92672>[]</color> <color=#f8f8f2>pParams</color><color=#f8f8f2>,</color> <color=#f8f8f2>Class</color> <color=#f8f8f2>pFromClass</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>loader</color> <color=#f92672>=</color> <color=#f8f8f2>pFromClass</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>pFromClass</color><color=#f8f8f2>.</color><color=#a6e22e>getClassLoader</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>isMethodAvailable</color><color=#f8f8f2>(</color><color=#f8f8f2>pClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>pMethodName</color><color=#f8f8f2>,</color> <color=#f8f8f2>pParams</color><color=#f8f8f2>,</color> <color=#f8f8f2>loader</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isMethodAvailable</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>pClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pMethodName</color><color=#f8f8f2>,</color> <color=#f8f8f2>Class</color><color=#f92672>[]</color> <color=#f8f8f2>pParams</color><color=#f8f8f2>,</color> <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>pLoader</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Class</color> <color=#f8f8f2>cl</color> <color=#f92672>=</color> <color=#f8f8f2>getClass</color><color=#f8f8f2>(</color><color=#f8f8f2>pClassName</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#f8f8f2>pLoader</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>Method</color> <color=#f8f8f2>method</color> <color=#f92672>=</color> <color=#f8f8f2>cl</color><color=#f8f8f2>.</color><color=#a6e22e>getMethod</color><color=#f8f8f2>(</color><color=#f8f8f2>pMethodName</color><color=#f8f8f2>,</color> <color=#f8f8f2>pParams</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>method</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Ignore</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>LinkageError</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Ignore</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NoSuchMethodException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Ignore</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Class</color> <color=#a6e22e>getClass</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pClassName</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pInitialize</color><color=#f8f8f2>,</color> <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>pLoader</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>ClassNotFoundException</color> <color=#f8f8f2>{</color>
        <color=#75715e>// NOTE: We need the context class loader, as SystemUtil's</color>
        <color=#75715e>// class loader may have a totally different class loader than</color>
        <color=#75715e>// the original caller class (as in Class.forName(cn, false, null)).</color>
        <color=#f8f8f2>ClassLoader</color> <color=#f8f8f2>loader</color> <color=#f92672>=</color> <color=#f8f8f2>pLoader</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>pLoader</color> <color=#f8f8f2>:</color> <color=#f8f8f2>Thread</color><color=#f8f8f2>.</color><color=#a6e22e>currentThread</color><color=#f8f8f2>().</color><color=#a6e22e>getContextClassLoader</color><color=#f8f8f2>();</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>Class</color><color=#f8f8f2>.</color><color=#a6e22e>forName</color><color=#f8f8f2>(</color><color=#f8f8f2>pClassName</color><color=#f8f8f2>,</color> <color=#f8f8f2>pInitialize</color><color=#f8f8f2>,</color> <color=#f8f8f2>loader</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>