<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.lang</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.util.convert.ConversionException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.util.convert.Converter</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Constructor</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.InvocationTargetException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Method</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Modifier</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Arrays</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Map</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A utility class with some useful bean-related functions.</color>
<color=#75715e> *</color>
<color=#75715e> * <p><em>NOTE: This class is not considered part of the public API and may be changed without</color>
<color=#75715e> * notice</em></color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haku $</color>
<color=#75715e> * @version $Id:</color>
<color=#75715e> * //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/lang/BeanUtil.java#2</color>
<color=#75715e> * $</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>BeanUtil</color> <color=#f8f8f2>{</color>

    <color=#75715e>// Disallow creating objects of this type</color>
    <color=#66d9ef>private</color> <color=#a6e22e>BeanUtil</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets a property value from the given object, using reflection. Now supports getting values from</color>
<color=#75715e>     * properties of properties (recursive).</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pObject   The object to get the property from</color>
<color=#75715e>     * @param pProperty The name of the property</color>
<color=#75715e>     * @return A string containing the value of the given property, or {@code null} if it can not be</color>
<color=#75715e>     * found.</color>
<color=#75715e>     * @todo Remove System.err's... Create new Exception? Hmm..</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#a6e22e>getPropertyValue</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pProperty</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>//</color>
        <color=#75715e>// TODO: Support get(Object) method of Collections!</color>
        <color=#75715e>//       Handle lists and arrays with [] (index) operator</color>
        <color=#75715e>//</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pObject</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>pProperty</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>pProperty</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672><</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>Class</color><color=#f92672><?></color> <color=#f8f8f2>objClass</color> <color=#f92672>=</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>();</color>

        <color=#f8f8f2>Object</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>;</color>

        <color=#75715e>// Method for method...</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>subProp</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>begIdx</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>endIdx</color> <color=#f92672>=</color> <color=#f8f8f2>begIdx</color><color=#f8f8f2>;</color>

        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>begIdx</color> <color=#f92672><</color> <color=#f8f8f2>pProperty</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>begIdx</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

            <color=#f8f8f2>endIdx</color> <color=#f92672>=</color> <color=#f8f8f2>pProperty</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#e6db74>"."</color><color=#f8f8f2>,</color> <color=#f8f8f2>endIdx</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>endIdx</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>subProp</color> <color=#f92672>=</color> <color=#f8f8f2>pProperty</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>begIdx</color><color=#f8f8f2>,</color> <color=#f8f8f2>endIdx</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>begIdx</color> <color=#f92672>=</color> <color=#f8f8f2>endIdx</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#75715e>// The final property!</color>
                <color=#75715e>// If there's just the first-level property, subProp will be</color>
                <color=#75715e>// equal to property</color>
                <color=#f8f8f2>subProp</color> <color=#f92672>=</color> <color=#f8f8f2>pProperty</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>begIdx</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>begIdx</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Check for "[" and "]"</color>
            <color=#f8f8f2>Object</color><color=#f92672>[]</color> <color=#f8f8f2>param</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>Class</color><color=#f92672>[]</color> <color=#f8f8f2>paramClass</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Class</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>

            <color=#66d9ef>int</color> <color=#f8f8f2>begBracket</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>begBracket</color> <color=#f92672>=</color> <color=#f8f8f2>subProp</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#e6db74>"["</color><color=#f8f8f2>))</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// An error if there is no matching bracket</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>subProp</color><color=#f8f8f2>.</color><color=#a6e22e>endsWith</color><color=#f8f8f2>(</color><color=#e6db74>"]"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>String</color> <color=#f8f8f2>between</color> <color=#f92672>=</color> <color=#f8f8f2>subProp</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>begBracket</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>subProp</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>subProp</color> <color=#f92672>=</color> <color=#f8f8f2>subProp</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>begBracket</color><color=#f8f8f2>);</color>

                <color=#75715e>// If brackets exist, check type of argument between brackets</color>
                <color=#f8f8f2>param</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Object</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>paramClass</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Class</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>

                <color=#75715e>// try {</color>
                <color=#75715e>// TODO: isNumber returns true, even if too big for integer...</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>isNumber</color><color=#f8f8f2>(</color><color=#f8f8f2>between</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// We have a number</color>
                    <color=#75715e>// Integer -> array subscript -> getXXX(int i)</color>
                    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                        <color=#75715e>// Insert param and it's Class</color>
                        <color=#f8f8f2>param</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>between</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>paramClass</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color><color=#f8f8f2>;</color> <color=#75715e>// int.class</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NumberFormatException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#75715e>// ??</color>
                        <color=#75715e>// Probably too small or too large value..</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// catch (NumberFormatException e) {</color>
                    <color=#75715e>// Not a number... Try String</color>
                    <color=#75715e>// String -> Hashtable key -> getXXX(String str)</color>
                    <color=#75715e>// Insert param and it's Class</color>
                    <color=#f8f8f2>param</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>between</color><color=#f8f8f2>.</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>paramClass</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>Method</color> <color=#f8f8f2>method</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>methodName</color> <color=#f92672>=</color> <color=#e6db74>"get"</color> <color=#f92672>+</color> <color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>capitalize</color><color=#f8f8f2>(</color><color=#f8f8f2>subProp</color><color=#f8f8f2>);</color>
            <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Try to get the "get" method for the given property</color>
                <color=#f8f8f2>method</color> <color=#f92672>=</color> <color=#f8f8f2>objClass</color><color=#f8f8f2>.</color><color=#a6e22e>getMethod</color><color=#f8f8f2>(</color><color=#f8f8f2>methodName</color><color=#f8f8f2>,</color> <color=#f8f8f2>paramClass</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NoSuchMethodException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>"No method named \""</color> <color=#f92672>+</color> <color=#f8f8f2>methodName</color> <color=#f92672>+</color> <color=#e6db74>"()\""</color><color=#f8f8f2>);</color>
                <color=#75715e>// The array might be of size 0...</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>paramClass</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>paramClass</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>" with the parameter "</color> <color=#f92672>+</color> <color=#f8f8f2>paramClass</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>" in class "</color> <color=#f92672>+</color> <color=#f8f8f2>objClass</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>"!"</color><color=#f8f8f2>);</color>
                <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// If method for some reason should be null, give up</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>method</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                <color=#75715e>// We have a method, try to invoke it</color>
                <color=#75715e>// The resutling object will be either the property we are</color>
                <color=#75715e>// Looking for, or the parent</color>

                <color=#75715e>//		System.err.println("Trying " + objClass.getName() + "." + method.getName() + "(" +</color>
                <color=#75715e>// ((param != null && param.length > 0) ? param[0] : "") + ")");</color>
                <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>method</color><color=#f8f8f2>.</color><color=#a6e22e>invoke</color><color=#f8f8f2>(</color><color=#f8f8f2>result</color><color=#f8f8f2>,</color> <color=#f8f8f2>param</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InvocationTargetException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                        <color=#e6db74>"property="</color> <color=#f92672>+</color> <color=#f8f8f2>pProperty</color> <color=#f92672>+</color> <color=#e6db74>" & result="</color> <color=#f92672>+</color> <color=#f8f8f2>result</color> <color=#f92672>+</color> <color=#e6db74>" & param="</color> <color=#f92672>+</color> <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getTargetException</color><color=#f8f8f2>().</color><color=#a6e22e>printStackTrace</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>printStackTrace</color><color=#f8f8f2>();</color>
                <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalAccessException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>printStackTrace</color><color=#f8f8f2>();</color>
                <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NullPointerException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color>
                        <color=#f8f8f2>objClass</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                                <color=#f92672>+</color> <color=#e6db74>"."</color>
                                <color=#f92672>+</color> <color=#f8f8f2>method</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color>
                                <color=#f92672>+</color> <color=#e6db74>"("</color>
                                <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>paramClass</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>paramClass</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>?</color> <color=#f8f8f2>paramClass</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#e6db74>""</color><color=#f8f8f2>)</color>
                                <color=#f92672>+</color> <color=#e6db74>")"</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>printStackTrace</color><color=#f8f8f2>();</color>
                <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Get the class of the reulting object</color>
                <color=#f8f8f2>objClass</color> <color=#f92672>=</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#75715e>// while</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Sets the property value to an object using reflection. Supports setting values of properties</color>
<color=#75715e>     * that are properties of properties (recursive).</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pObject   The object to get a property from</color>
<color=#75715e>     * @param pProperty The name of the property</color>
<color=#75715e>     * @param pValue    The property value</color>
<color=#75715e>     * @throws NoSuchMethodException     if there's no write method for the given property</color>
<color=#75715e>     * @throws InvocationTargetException if invoking the write method failed</color>
<color=#75715e>     * @throws IllegalAccessException    if the caller class has no access to the write method</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>setPropertyValue</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pProperty</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>NoSuchMethodException</color><color=#f8f8f2>,</color> <color=#f8f8f2>InvocationTargetException</color><color=#f8f8f2>,</color> <color=#f8f8f2>IllegalAccessException</color> <color=#f8f8f2>{</color>

        <color=#75715e>//</color>
        <color=#75715e>// TODO: Support set(Object, Object)/put(Object, Object) methods</color>
        <color=#75715e>//       of Collections!</color>
        <color=#75715e>//       Handle lists and arrays with [] (index) operator</color>

        <color=#f8f8f2>Class</color> <color=#f8f8f2>paramType</color> <color=#f92672>=</color> <color=#f8f8f2>pValue</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>Object</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>;</color>

        <color=#75715e>// Preserve references</color>
        <color=#f8f8f2>Object</color> <color=#f8f8f2>obj</color> <color=#f92672>=</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>property</color> <color=#f92672>=</color> <color=#f8f8f2>pProperty</color><color=#f8f8f2>;</color>

        <color=#75715e>// Recurse and find real parent if property contains a '.'</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>dotIdx</color> <color=#f92672>=</color> <color=#f8f8f2>property</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#e6db74>'.'</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dotIdx</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Get real parent</color>
            <color=#f8f8f2>obj</color> <color=#f92672>=</color> <color=#f8f8f2>getPropertyValue</color><color=#f8f8f2>(</color><color=#f8f8f2>obj</color><color=#f8f8f2>,</color> <color=#f8f8f2>property</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>dotIdx</color><color=#f8f8f2>));</color>
            <color=#75715e>// Get the property of the parent</color>
            <color=#f8f8f2>property</color> <color=#f92672>=</color> <color=#f8f8f2>property</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>dotIdx</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Find method</color>
        <color=#f8f8f2>Object</color><color=#f92672>[]</color> <color=#f8f8f2>params</color> <color=#f92672>=</color> <color=#f8f8f2>{</color><color=#f8f8f2>pValue</color><color=#f8f8f2>};</color>
        <color=#f8f8f2>Method</color> <color=#f8f8f2>method</color> <color=#f92672>=</color>
                <color=#f8f8f2>getMethodMayModifyParams</color><color=#f8f8f2>(</color>
                        <color=#f8f8f2>obj</color><color=#f8f8f2>,</color> <color=#e6db74>"set"</color> <color=#f92672>+</color> <color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>capitalize</color><color=#f8f8f2>(</color><color=#f8f8f2>property</color><color=#f8f8f2>),</color> <color=#66d9ef>new</color> <color=#f8f8f2>Class</color><color=#f92672>[]</color><color=#f8f8f2>{</color><color=#f8f8f2>paramType</color><color=#f8f8f2>},</color> <color=#f8f8f2>params</color><color=#f8f8f2>);</color>

        <color=#75715e>// Invoke it</color>
        <color=#f8f8f2>method</color><color=#f8f8f2>.</color><color=#a6e22e>invoke</color><color=#f8f8f2>(</color><color=#f8f8f2>obj</color><color=#f8f8f2>,</color> <color=#f8f8f2>params</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Method</color> <color=#a6e22e>getMethodMayModifyParams</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>Object</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pName</color><color=#f8f8f2>,</color> <color=#f8f8f2>Class</color><color=#f92672>[]</color> <color=#f8f8f2>pParams</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>[]</color> <color=#f8f8f2>pValues</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>NoSuchMethodException</color> <color=#f8f8f2>{</color>
        <color=#75715e>// NOTE: This method assumes pParams.length == 1 && pValues.length == 1</color>

        <color=#f8f8f2>Method</color> <color=#f8f8f2>method</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>Class</color> <color=#f8f8f2>paramType</color> <color=#f92672>=</color> <color=#f8f8f2>pParams</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>method</color> <color=#f92672>=</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getMethod</color><color=#f8f8f2>(</color><color=#f8f8f2>pName</color><color=#f8f8f2>,</color> <color=#f8f8f2>pParams</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NoSuchMethodException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// No direct match</color>

            <color=#75715e>// 1: If primitive wrapper, try unwrap conversion first</color>
      <color=#75715e>/*if (paramType.isPrimitive()) { // NOTE: Can't be primitive type</color>
<color=#75715e>          params[0] = ReflectUtil.wrapType(paramType);</color>
<color=#75715e>      }</color>
<color=#75715e>      else*/</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ReflectUtil</color><color=#f8f8f2>.</color><color=#a6e22e>isPrimitiveWrapper</color><color=#f8f8f2>(</color><color=#f8f8f2>paramType</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>pParams</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>ReflectUtil</color><color=#f8f8f2>.</color><color=#a6e22e>unwrapType</color><color=#f8f8f2>(</color><color=#f8f8f2>paramType</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                <color=#75715e>// If this does not throw an exception, it works</color>
                <color=#f8f8f2>method</color> <color=#f92672>=</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getMethod</color><color=#f8f8f2>(</color><color=#f8f8f2>pName</color><color=#f8f8f2>,</color> <color=#f8f8f2>pParams</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Throwable</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Ignore</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// 2: Try any super-types of paramType, to see if we have a match</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>method</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>while</color> <color=#f8f8f2>((</color><color=#f8f8f2>paramType</color> <color=#f92672>=</color> <color=#f8f8f2>paramType</color><color=#f8f8f2>.</color><color=#a6e22e>getSuperclass</color><color=#f8f8f2>())</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>pParams</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>paramType</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                        <color=#75715e>// If this does not throw an exception, it works</color>
                        <color=#f8f8f2>method</color> <color=#f92672>=</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getMethod</color><color=#f8f8f2>(</color><color=#f8f8f2>pName</color><color=#f8f8f2>,</color> <color=#f8f8f2>pParams</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Throwable</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#75715e>// Ignore/Continue</color>
                        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// 3: Try to find a different method with the same name, that has</color>
            <color=#75715e>// a parameter type we can convert to...</color>
            <color=#75715e>// NOTE: There's no ordering here..</color>
            <color=#75715e>// TODO: Should we try to do that? What would the ordering be?</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>method</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>Method</color><color=#f92672>[]</color> <color=#f8f8f2>methods</color> <color=#f92672>=</color> <color=#f8f8f2>pObject</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getMethods</color><color=#f8f8f2>();</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Method</color> <color=#f8f8f2>candidate</color> <color=#f8f8f2>:</color> <color=#f8f8f2>methods</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>Modifier</color><color=#f8f8f2>.</color><color=#a6e22e>isPublic</color><color=#f8f8f2>(</color><color=#f8f8f2>candidate</color><color=#f8f8f2>.</color><color=#a6e22e>getModifiers</color><color=#f8f8f2>())</color>
                            <color=#f92672>&&</color> <color=#f8f8f2>candidate</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>().</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>pName</color><color=#f8f8f2>)</color>
                            <color=#f92672>&&</color> <color=#f8f8f2>candidate</color><color=#f8f8f2>.</color><color=#a6e22e>getReturnType</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>Void</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color>
                            <color=#f92672>&&</color> <color=#f8f8f2>candidate</color><color=#f8f8f2>.</color><color=#a6e22e>getParameterTypes</color><color=#f8f8f2>().</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#75715e>// NOTE: Assumes paramTypes.length == 1</color>

                        <color=#f8f8f2>Class</color> <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>candidate</color><color=#f8f8f2>.</color><color=#a6e22e>getParameterTypes</color><color=#f8f8f2>()</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>

                        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>pValues</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>convertValueToType</color><color=#f8f8f2>(</color><color=#f8f8f2>pValues</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Throwable</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color>

                        <color=#75715e>// We were able to convert the parameter, let's try</color>
                        <color=#f8f8f2>method</color> <color=#f92672>=</color> <color=#f8f8f2>candidate</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Give up...</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>method</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#f8f8f2>e</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>method</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#a6e22e>convertValueToType</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>,</color> <color=#f8f8f2>Class</color><color=#f92672><?></color> <color=#f8f8f2>pType</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>ConversionException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pType</color><color=#f8f8f2>.</color><color=#a6e22e>isPrimitive</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pType</color> <color=#f92672>==</color> <color=#f8f8f2>Boolean</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color> <color=#f92672>&&</color> <color=#f8f8f2>pValue</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Boolean</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pType</color> <color=#f92672>==</color> <color=#f8f8f2>Byte</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color> <color=#f92672>&&</color> <color=#f8f8f2>pValue</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pType</color> <color=#f92672>==</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color> <color=#f92672>&&</color> <color=#f8f8f2>pValue</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Character</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pType</color> <color=#f92672>==</color> <color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color> <color=#f92672>&&</color> <color=#f8f8f2>pValue</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Double</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pType</color> <color=#f92672>==</color> <color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color> <color=#f92672>&&</color> <color=#f8f8f2>pValue</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Float</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pType</color> <color=#f92672>==</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color> <color=#f92672>&&</color> <color=#f8f8f2>pValue</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pType</color> <color=#f92672>==</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color> <color=#f92672>&&</color> <color=#f8f8f2>pValue</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Long</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pType</color> <color=#f92672>==</color> <color=#f8f8f2>Short</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE</color> <color=#f92672>&&</color> <color=#f8f8f2>pValue</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Short</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// TODO: Convert value to single-value array if needed</color>
        <color=#75715e>// TODO: Convert CSV String to string array (or potentially any type of array)</color>

        <color=#75715e>// TODO: Convert other types</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pValue</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Converter</color> <color=#f8f8f2>converter</color> <color=#f92672>=</color> <color=#f8f8f2>Converter</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>();</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>converter</color><color=#f8f8f2>.</color><color=#a6e22e>toObject</color><color=#f8f8f2>((</color><color=#f8f8f2>String</color><color=#f8f8f2>)</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>,</color> <color=#f8f8f2>pType</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pType</color> <color=#f92672>==</color> <color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>class</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Converter</color> <color=#f8f8f2>converter</color> <color=#f92672>=</color> <color=#f8f8f2>Converter</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>();</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>converter</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(</color><color=#f8f8f2>pValue</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ConversionException</color><color=#f8f8f2>(</color>
                    <color=#e6db74>"Cannot convert "</color> <color=#f92672>+</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" to "</color> <color=#f92672>+</color> <color=#f8f8f2>pType</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates an object from the given class' single argument constructor.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pClass The class to create instance from</color>
<color=#75715e>     * @param pParam The parameters to the constructor</color>
<color=#75715e>     * @return The object created from the constructor. If the constructor could not be invoked for</color>
<color=#75715e>     * any reason, null is returned.</color>
<color=#75715e>     * @throws InvocationTargetException if the constructor failed</color>
<color=#75715e>     */</color>
    <color=#75715e>// TODO: Move to ReflectUtil</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>T</color> <color=#a6e22e>createInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>pClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>pParam</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>InvocationTargetException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>createInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>pClass</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>Object</color><color=#f92672>[]</color><color=#f8f8f2>{</color><color=#f8f8f2>pParam</color><color=#f8f8f2>});</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates an object from the given class' constructor that matches the given paramaters.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pClass  The class to create instance from</color>
<color=#75715e>     * @param pParams The parameters to the constructor</color>
<color=#75715e>     * @return The object created from the constructor. If the constructor could not be invoked for</color>
<color=#75715e>     * any reason, null is returned.</color>
<color=#75715e>     * @throws InvocationTargetException if the constructor failed</color>
<color=#75715e>     */</color>
    <color=#75715e>// TODO: Move to ReflectUtil</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>T</color> <color=#a6e22e>createInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>pClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f8f8f2>...</color> <color=#f8f8f2>pParams</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>InvocationTargetException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>T</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>

        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Create param and argument arrays</color>
            <color=#f8f8f2>Class</color><color=#f92672>[]</color> <color=#f8f8f2>paramTypes</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pParams</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>pParams</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>paramTypes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Class</color><color=#f92672>[</color><color=#f8f8f2>pParams</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>pParams</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>paramTypes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>pParams</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Get constructor</color>
            <color=#f8f8f2>Constructor</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>constructor</color> <color=#f92672>=</color> <color=#f8f8f2>pClass</color><color=#f8f8f2>.</color><color=#a6e22e>getConstructor</color><color=#f8f8f2>(</color><color=#f8f8f2>paramTypes</color><color=#f8f8f2>);</color>

            <color=#75715e>// Invoke and create instance</color>
            <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>constructor</color><color=#f8f8f2>.</color><color=#a6e22e>newInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>pParams</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>/* All this to let InvocationTargetException pass on */</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NoSuchMethodException</color> <color=#f8f8f2>nsme</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalAccessException</color> <color=#f8f8f2>iae</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>iarge</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InstantiationException</color> <color=#f8f8f2>ie</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ExceptionInInitializerError</color> <color=#f8f8f2>err</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets an object from any given static method, with the given parameter.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pClass  The class to invoke method on</color>
<color=#75715e>     * @param pMethod The name of the method to invoke</color>
<color=#75715e>     * @param pParam  The parameter to the method</color>
<color=#75715e>     * @return The object returned by the static method. If the return type of the method is a</color>
<color=#75715e>     * primitive type, it is wrapped in the corresponding wrapper object (int is wrapped in an</color>
<color=#75715e>     * Integer). If the return type of the method is void, null is returned. If the method could</color>
<color=#75715e>     * not be invoked for any reason, null is returned.</color>
<color=#75715e>     * @throws InvocationTargetException if the invocation failed</color>
<color=#75715e>     */</color>
    <color=#75715e>// TODO: Move to ReflectUtil</color>
    <color=#75715e>// TODO: Rename to invokeStatic?</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#a6e22e>invokeStaticMethod</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color><color=#f92672><?></color> <color=#f8f8f2>pClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pMethod</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>pParam</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>InvocationTargetException</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>invokeStaticMethod</color><color=#f8f8f2>(</color><color=#f8f8f2>pClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>pMethod</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>Object</color><color=#f92672>[]</color><color=#f8f8f2>{</color><color=#f8f8f2>pParam</color><color=#f8f8f2>});</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets an object from any given static method, with the given parameter.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pClass  The class to invoke method on</color>
<color=#75715e>     * @param pMethod The name of the method to invoke</color>
<color=#75715e>     * @param pParams The parameters to the method</color>
<color=#75715e>     * @return The object returned by the static method. If the return type of the method is a</color>
<color=#75715e>     * primitive type, it is wrapped in the corresponding wrapper object (int is wrapped in an</color>
<color=#75715e>     * Integer). If the return type of the method is void, null is returned. If the method could</color>
<color=#75715e>     * not be invoked for any reason, null is returned.</color>
<color=#75715e>     * @throws InvocationTargetException if the invocation failed</color>
<color=#75715e>     */</color>
    <color=#75715e>// TODO: Move to ReflectUtil</color>
    <color=#75715e>// TODO: Rename to invokeStatic?</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#a6e22e>invokeStaticMethod</color><color=#f8f8f2>(</color><color=#f8f8f2>Class</color><color=#f92672><?></color> <color=#f8f8f2>pClass</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pMethod</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f8f8f2>...</color> <color=#f8f8f2>pParams</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>InvocationTargetException</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>Object</color> <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Create param and argument arrays</color>
            <color=#f8f8f2>Class</color><color=#f92672>[]</color> <color=#f8f8f2>paramTypes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Class</color><color=#f92672>[</color><color=#f8f8f2>pParams</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>pParams</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>paramTypes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>pParams</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Get method</color>
            <color=#75715e>// *** If more than one such method is found in the class, and one</color>
            <color=#75715e>// of these methods has a RETURN TYPE that is more specific than</color>
            <color=#75715e>// any of the others, that method is reflected; otherwise one of</color>
            <color=#75715e>// the methods is chosen ARBITRARILY.</color>
            <color=#75715e>// java/lang/Class.html#getMethod(java.lang.String, java.lang.Class[])</color>
            <color=#f8f8f2>Method</color> <color=#f8f8f2>method</color> <color=#f92672>=</color> <color=#f8f8f2>pClass</color><color=#f8f8f2>.</color><color=#a6e22e>getMethod</color><color=#f8f8f2>(</color><color=#f8f8f2>pMethod</color><color=#f8f8f2>,</color> <color=#f8f8f2>paramTypes</color><color=#f8f8f2>);</color>

            <color=#75715e>// Invoke public static method</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>Modifier</color><color=#f8f8f2>.</color><color=#a6e22e>isPublic</color><color=#f8f8f2>(</color><color=#f8f8f2>method</color><color=#f8f8f2>.</color><color=#a6e22e>getModifiers</color><color=#f8f8f2>())</color> <color=#f92672>&&</color> <color=#f8f8f2>Modifier</color><color=#f8f8f2>.</color><color=#a6e22e>isStatic</color><color=#f8f8f2>(</color><color=#f8f8f2>method</color><color=#f8f8f2>.</color><color=#a6e22e>getModifiers</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>method</color><color=#f8f8f2>.</color><color=#a6e22e>invoke</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>pParams</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

        <color=#f8f8f2>}</color>
        <color=#75715e>/* All this to let InvocationTargetException pass on */</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NoSuchMethodException</color> <color=#f8f8f2>nsme</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalAccessException</color> <color=#f8f8f2>iae</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>iarge</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Configures the bean according to the given mapping. For each {@code Map.Entry} in {@code</color>
<color=#75715e>     * Map.values()}, a method named {@code set + capitalize(entry.getKey())} is called on the bean,</color>
<color=#75715e>     * with {@code entry.getValue()} as its argument.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>Properties that has no matching set-method in the bean, are simply discarded.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pBean    The bean to configure</color>
<color=#75715e>     * @param pMapping The mapping for the bean</color>
<color=#75715e>     * @throws NullPointerException      if any of the parameters are null.</color>
<color=#75715e>     * @throws InvocationTargetException if an error occurs when invoking the setter-method.</color>
<color=#75715e>     */</color>
    <color=#75715e>// TODO: Add a version that takes a ConfigurationErrorListener callback interface</color>
    <color=#75715e>// TODO: ...or a boolean pFailOnError parameter</color>
    <color=#75715e>// TODO: ...or return Exceptions as an array?!</color>
    <color=#75715e>// TODO: ...or something whatsoever that makes clients able to determine something's not right</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>configure</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>pBean</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f92672>?></color> <color=#f8f8f2>pMapping</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>InvocationTargetException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>configure</color><color=#f8f8f2>(</color><color=#f8f8f2>pBean</color><color=#f8f8f2>,</color> <color=#f8f8f2>pMapping</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Configures the bean according to the given mapping. For each {@code Map.Entry} in {@code</color>
<color=#75715e>     * Map.values()}, a method named {@code set + capitalize(entry.getKey())} is called on the bean,</color>
<color=#75715e>     * with {@code entry.getValue()} as its argument.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>Optionally, lisp-style names are allowed, and automatically converted to Java-style</color>
<color=#75715e>     * camel-case names.</color>
<color=#75715e>     *</color>
<color=#75715e>     * <p>Properties that has no matching set-method in the bean, are simply discarded.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pBean        The bean to configure</color>
<color=#75715e>     * @param pMapping     The mapping for the bean</color>
<color=#75715e>     * @param pLispToCamel Allow lisp-style names, and automatically convert them to Java-style</color>
<color=#75715e>     *                     camel-case.</color>
<color=#75715e>     * @throws NullPointerException      if any of the parameters are null.</color>
<color=#75715e>     * @throws InvocationTargetException if an error occurs when invoking the setter-method.</color>
<color=#75715e>     * @see StringUtil#lispToCamel(String)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>configure</color><color=#f8f8f2>(</color>
            <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>pBean</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f92672>?></color> <color=#f8f8f2>pMapping</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pLispToCamel</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>InvocationTargetException</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Loop over properties in mapping</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f8f8f2>,</color> <color=#f92672>?></color> <color=#f8f8f2>entry</color> <color=#f8f8f2>:</color> <color=#f8f8f2>pMapping</color><color=#f8f8f2>.</color><color=#a6e22e>entrySet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Configure each property in turn</color>
                <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>property</color> <color=#f92672>=</color> <color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>valueOf</color><color=#f8f8f2>(</color><color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>());</color>
                <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>setPropertyValue</color><color=#f8f8f2>(</color><color=#f8f8f2>pBean</color><color=#f8f8f2>,</color> <color=#f8f8f2>property</color><color=#f8f8f2>,</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>());</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NoSuchMethodException</color> <color=#f8f8f2>ignore</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// If invocation failed, convert lisp-style and try again</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLispToCamel</color> <color=#f92672>&&</color> <color=#f8f8f2>property</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#e6db74>'-'</color><color=#f8f8f2>)</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>setPropertyValue</color><color=#f8f8f2>(</color><color=#f8f8f2>pBean</color><color=#f8f8f2>,</color> <color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>lispToCamel</color><color=#f8f8f2>(</color><color=#f8f8f2>property</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>),</color> <color=#f8f8f2>entry</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>());</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NoSuchMethodException</color> <color=#f8f8f2>nsme</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// This property was not configured</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalAccessException</color> <color=#f8f8f2>iae</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// This property was not configured</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>