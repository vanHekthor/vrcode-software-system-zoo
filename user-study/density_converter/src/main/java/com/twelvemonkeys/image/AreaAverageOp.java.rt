<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.ImageIO</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.swing.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.AffineTransform</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.Point2D</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.Rectangle2D</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.File</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * AreaAverageOp</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.no">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haku $</color>
<color=#75715e> * @version $Id: //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/image/AreaAverageOp.java#2 $</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>AreaAverageOp</color> <color=#66d9ef>implements</color> <color=#f8f8f2>BufferedImageOp</color><color=#f8f8f2>,</color> <color=#f8f8f2>RasterOp</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
    <color=#66d9ef>final</color> <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>Rectangle</color> <color=#f8f8f2>sourceRegion</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>AreaAverageOp</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pWidth</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>pWidth</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>pHeight</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Rectangle</color> <color=#a6e22e>getSourceRegion</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sourceRegion</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rectangle</color><color=#f8f8f2>(</color><color=#f8f8f2>sourceRegion</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setSourceRegion</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Rectangle</color> <color=#f8f8f2>pSourceRegion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pSourceRegion</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>sourceRegion</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sourceRegion</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>sourceRegion</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rectangle</color><color=#f8f8f2>(</color><color=#f8f8f2>pSourceRegion</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>sourceRegion</color><color=#f8f8f2>.</color><color=#a6e22e>setBounds</color><color=#f8f8f2>(</color><color=#f8f8f2>pSourceRegion</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dest</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>dest</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>dest</color> <color=#f8f8f2>:</color> <color=#f8f8f2>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

        <color=#75715e>// TODO: src and dest can't be the same</color>

        <color=#75715e>// TODO: Do some type checking here..</color>
        <color=#75715e>// Should work with</color>
        <color=#75715e>// * all BYTE types, unless sub-byte packed rasters/IndexColorModel</color>
        <color=#75715e>// * all INT types (even custom, as long as they use 8bit/componnet)</color>
        <color=#75715e>// * all USHORT types (even custom)</color>

        <color=#75715e>// TODO: Also check if the images are really compatible!?</color>

        <color=#66d9ef>long</color> <color=#f8f8f2>start</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>();</color>
        <color=#75715e>// Straight-forward version</color>
        <color=#75715e>//Image scaled = src.getScaledInstance(width, height, Image.SCALE_AREA_AVERAGING);</color>
        <color=#75715e>//ImageUtil.drawOnto(result, scaled);</color>
        <color=#75715e>//result = new BufferedImageFactory(scaled).getBufferedImage();</color>

        <color=#75715e>/*</color>
<color=#75715e>        // Try: Use bilinear/bicubic and half the image down until it's less than</color>
<color=#75715e>        // twice as big, then use bicubic for the last step?</color>
<color=#75715e>        BufferedImage temp = null;</color>
<color=#75715e>        AffineTransform xform = null;</color>
<color=#75715e>        int w = src.getWidth();</color>
<color=#75715e>        int h = src.getHeight();</color>
<color=#75715e>        while (w / 2 > width && h / 2 > height) {</color>
<color=#75715e>            w /= 2;</color>
<color=#75715e>            h /= 2;</color>

<color=#75715e>            if (temp == null) {</color>
<color=#75715e>                xform = AffineTransform.getScaleInstance(.5, .5);</color>
<color=#75715e>                ColorModel cm = src.getColorModel();</color>
<color=#75715e>                temp = new BufferedImage(cm,</color>
<color=#75715e>                                         ImageUtil.createCompatibleWritableRaster(src, cm, w, h),</color>
<color=#75715e>                                         cm.isAlphaPremultiplied(), null);</color>

<color=#75715e>                resample(src, temp, xform);</color>
<color=#75715e>            }</color>
<color=#75715e>            else {</color>
<color=#75715e>                resample(temp, temp, xform);</color>
<color=#75715e>            }</color>

<color=#75715e>            System.out.println("w: " + w);</color>
<color=#75715e>            System.out.println("h: " + h);</color>
<color=#75715e>        }</color>

<color=#75715e>        if (temp != null) {</color>
<color=#75715e>            src = temp.getSubimage(0, 0, w, h);</color>
<color=#75715e>        }</color>

<color=#75715e>        resample(src, result, AffineTransform.getScaleInstance(width / (double) w, height / (double) h));</color>
<color=#75715e>        */</color>

        <color=#75715e>// The real version</color>
        <color=#f8f8f2>filterImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getRaster</color><color=#f8f8f2>(),</color> <color=#f8f8f2>result</color><color=#f8f8f2>.</color><color=#a6e22e>getRaster</color><color=#f8f8f2>());</color>

        <color=#66d9ef>long</color> <color=#f8f8f2>time</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>start</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"time: "</color> <color=#f92672>+</color> <color=#f8f8f2>time</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>resample</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pSrc</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pDest</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>AffineTransform</color> <color=#f8f8f2>pXform</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Graphics2D</color> <color=#f8f8f2>d</color> <color=#f92672>=</color> <color=#f8f8f2>pDest</color><color=#f8f8f2>.</color><color=#a6e22e>createGraphics</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>d</color><color=#f8f8f2>.</color><color=#a6e22e>setRenderingHint</color><color=#f8f8f2>(</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>KEY_INTERPOLATION</color><color=#f8f8f2>,</color> <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>VALUE_INTERPOLATION_BILINEAR</color><color=#f8f8f2>);</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>d</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pSrc</color><color=#f8f8f2>,</color> <color=#f8f8f2>pXform</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>d</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>WritableRaster</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>Raster</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>WritableRaster</color> <color=#f8f8f2>dest</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>WritableRaster</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>dest</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>dest</color> <color=#f8f8f2>:</color> <color=#f8f8f2>createCompatibleDestRaster</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>filterImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>result</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>WritableRaster</color> <color=#a6e22e>filterImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>Raster</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>WritableRaster</color> <color=#f8f8f2>dest</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>//System.out.println("src: " + src);</color>
        <color=#75715e>//System.out.println("dest: " + dest);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sourceRegion</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>cx</color> <color=#f92672>=</color> <color=#f8f8f2>sourceRegion</color><color=#f8f8f2>.</color><color=#a6e22e>x</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>cy</color> <color=#f92672>=</color> <color=#f8f8f2>sourceRegion</color><color=#f8f8f2>.</color><color=#a6e22e>y</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>cw</color> <color=#f92672>=</color> <color=#f8f8f2>sourceRegion</color><color=#f8f8f2>.</color><color=#a6e22e>width</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>ch</color> <color=#f92672>=</color> <color=#f8f8f2>sourceRegion</color><color=#f8f8f2>.</color><color=#a6e22e>height</color><color=#f8f8f2>;</color>

            <color=#66d9ef>boolean</color> <color=#f8f8f2>same</color> <color=#f92672>=</color> <color=#f8f8f2>src</color> <color=#f92672>==</color> <color=#f8f8f2>dest</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>dest</color> <color=#f92672>=</color> <color=#f8f8f2>dest</color><color=#f8f8f2>.</color><color=#a6e22e>createWritableChild</color><color=#f8f8f2>(</color><color=#f8f8f2>cx</color><color=#f8f8f2>,</color> <color=#f8f8f2>cy</color><color=#f8f8f2>,</color> <color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#f8f8f2>ch</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>src</color> <color=#f92672>=</color> <color=#f8f8f2>same</color> <color=#f92672>?</color> <color=#f8f8f2>dest</color> <color=#f8f8f2>:</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>createChild</color><color=#f8f8f2>(</color><color=#f8f8f2>cx</color><color=#f8f8f2>,</color> <color=#f8f8f2>cy</color><color=#f8f8f2>,</color> <color=#f8f8f2>cw</color><color=#f8f8f2>,</color> <color=#f8f8f2>ch</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
            <color=#75715e>//System.out.println("src: " + src);</color>
            <color=#75715e>//System.out.println("dest: " + dest);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#75715e>// TODO: This don't work too well..</color>
        <color=#75715e>// The thing is that the step length and the scan length will vary, for</color>
        <color=#75715e>// non-even (1/2, 1/4, 1/8 etc) resampling</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>widthSteps</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>width</color> <color=#f92672>+</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>width</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>width</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>heightSteps</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>height</color> <color=#f92672>+</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>height</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>height</color><color=#f8f8f2>;</color>

        <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>oddX</color> <color=#f92672>=</color> <color=#f8f8f2>width</color> <color=#f92672>%</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>width</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>oddY</color> <color=#f92672>=</color> <color=#f8f8f2>height</color> <color=#f92672>%</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>height</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>dataElements</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getNumDataElements</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>bands</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getNumBands</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>dataType</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getTransferType</color><color=#f8f8f2>();</color>

        <color=#f8f8f2>Object</color> <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>scanW</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>scanH</color><color=#f8f8f2>;</color>

        <color=#75715e>// TYPE_USHORT setup</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>bitMasks</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>bitOffsets</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getTransferType</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_USHORT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getSampleModel</color><color=#f8f8f2>()</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>SinglePixelPackedSampleModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// DIRECT</color>
                <color=#f8f8f2>SinglePixelPackedSampleModel</color> <color=#f8f8f2>sampleModel</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>SinglePixelPackedSampleModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getSampleModel</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>bitMasks</color> <color=#f92672>=</color> <color=#f8f8f2>sampleModel</color><color=#f8f8f2>.</color><color=#a6e22e>getBitMasks</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>bitOffsets</color> <color=#f92672>=</color> <color=#f8f8f2>sampleModel</color><color=#f8f8f2>.</color><color=#a6e22e>getBitOffsets</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#75715e>// GRAY</color>
                <color=#f8f8f2>bitMasks</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>{</color><color=#ae81ff>0xffff</color><color=#f8f8f2>};</color>
                <color=#f8f8f2>bitOffsets</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>{</color><color=#ae81ff>0</color><color=#f8f8f2>};</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>height</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>oddY</color> <color=#f92672>||</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>scanH</color> <color=#f92672>=</color> <color=#f8f8f2>heightSteps</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>scanH</color> <color=#f92672>=</color> <color=#f8f8f2>height</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>y</color> <color=#f92672>*</color> <color=#f8f8f2>heightSteps</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>width</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>oddX</color> <color=#f92672>||</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>width</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>scanW</color> <color=#f92672>=</color> <color=#f8f8f2>widthSteps</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>scanW</color> <color=#f92672>=</color> <color=#f8f8f2>width</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>*</color> <color=#f8f8f2>widthSteps</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
                <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pixelCount</color> <color=#f92672>=</color> <color=#f8f8f2>scanW</color> <color=#f92672>*</color> <color=#f8f8f2>scanH</color><color=#f8f8f2>;</color>
                <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pixelLength</color> <color=#f92672>=</color> <color=#f8f8f2>pixelCount</color> <color=#f92672>*</color> <color=#f8f8f2>dataElements</color><color=#f8f8f2>;</color>

                <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>data</color> <color=#f92672>=</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getDataElements</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>*</color> <color=#f8f8f2>widthSteps</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color> <color=#f92672>*</color> <color=#f8f8f2>heightSteps</color><color=#f8f8f2>,</color> <color=#f8f8f2>scanW</color><color=#f8f8f2>,</color> <color=#f8f8f2>scanH</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IndexOutOfBoundsException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// TODO: FixMe!</color>
                    <color=#75715e>// The bug is in the steps... </color>
                    <color=#75715e>//System.err.println("x: " + x);</color>
                    <color=#75715e>//System.err.println("y: " + y);</color>
                    <color=#75715e>//System.err.println("widthSteps: " + widthSteps);</color>
                    <color=#75715e>//System.err.println("heightSteps: " + heightSteps);</color>
                    <color=#75715e>//System.err.println("scanW: " + scanW);</color>
                    <color=#75715e>//System.err.println("scanH: " + scanH);</color>
                    <color=#75715e>//</color>
                    <color=#75715e>//System.err.println("width: " + width);</color>
                    <color=#75715e>//System.err.println("height: " + height);</color>
                    <color=#75715e>//System.err.println("width: " + width);</color>
                    <color=#75715e>//System.err.println("height: " + height);</color>
                    <color=#75715e>//</color>
                    <color=#75715e>//e.printStackTrace();</color>
                    <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#75715e>// TODO: Might need more channels... Use an array?</color>
                <color=#75715e>// NOTE: These are not neccessarily ARGB..</color>
                <color=#66d9ef>double</color> <color=#f8f8f2>valueA</color> <color=#f92672>=</color> <color=#ae81ff>0.0</color><color=#f8f8f2>;</color>
                <color=#66d9ef>double</color> <color=#f8f8f2>valueR</color> <color=#f92672>=</color> <color=#ae81ff>0.0</color><color=#f8f8f2>;</color>
                <color=#66d9ef>double</color> <color=#f8f8f2>valueG</color> <color=#f92672>=</color> <color=#ae81ff>0.0</color><color=#f8f8f2>;</color>
                <color=#66d9ef>double</color> <color=#f8f8f2>valueB</color> <color=#f92672>=</color> <color=#ae81ff>0.0</color><color=#f8f8f2>;</color>

                <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>dataType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>case</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BYTE</color><color=#f8f8f2>:</color>
                        <color=#75715e>// TODO: Doesn't hold for index color models...</color>
                        <color=#75715e>// For index color, the best bet is probably convert to</color>
                        <color=#75715e>// true color, then convert back to the same index color </color>
                        <color=#75715e>// model</color>
                        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytePixels</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>data</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>pixelLength</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#f8f8f2>dataElements</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>valueA</color> <color=#f92672>+=</color> <color=#f8f8f2>bytePixels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bands</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                <color=#f8f8f2>valueR</color> <color=#f92672>+=</color> <color=#f8f8f2>bytePixels</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                                <color=#f8f8f2>valueG</color> <color=#f92672>+=</color> <color=#f8f8f2>bytePixels</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bands</color> <color=#f92672>></color> <color=#ae81ff>3</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                    <color=#f8f8f2>valueB</color> <color=#f92672>+=</color> <color=#f8f8f2>bytePixels</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>;</color>
                                <color=#f8f8f2>}</color>
                            <color=#f8f8f2>}</color>
                        <color=#f8f8f2>}</color>

                        <color=#75715e>// Average</color>
                        <color=#f8f8f2>valueA</color> <color=#f92672>/=</color> <color=#f8f8f2>pixelCount</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bands</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>valueR</color> <color=#f92672>/=</color> <color=#f8f8f2>pixelCount</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>valueG</color> <color=#f92672>/=</color> <color=#f8f8f2>pixelCount</color><color=#f8f8f2>;</color>
                            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bands</color> <color=#f92672>></color> <color=#ae81ff>3</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                <color=#f8f8f2>valueB</color> <color=#f92672>/=</color> <color=#f8f8f2>pixelCount</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>}</color>
                        <color=#f8f8f2>}</color>

                        <color=#75715e>//for (int i = 0; i < pixelLength; i += dataElements) {</color>
                        <color=#f8f8f2>bytePixels</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>valueA</color><color=#f8f8f2>);</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bands</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>bytePixels</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>valueR</color><color=#f8f8f2>);</color>
                            <color=#f8f8f2>bytePixels</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>valueG</color><color=#f8f8f2>);</color>
                            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bands</color> <color=#f92672>></color> <color=#ae81ff>3</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                <color=#f8f8f2>bytePixels</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>valueB</color><color=#f8f8f2>);</color>
                            <color=#f8f8f2>}</color>
                        <color=#f8f8f2>}</color>
                        <color=#75715e>//}</color>
                        <color=#66d9ef>break</color><color=#f8f8f2>;</color>

                    <color=#66d9ef>case</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT</color><color=#f8f8f2>:</color>
                        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>intPixels</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>data</color><color=#f8f8f2>;</color>
                        <color=#75715e>// TODO: Rewrite to use bit offsets and masks from</color>
                        <color=#75715e>// color model (see TYPE_USHORT) in case of a non-</color>
                        <color=#75715e>// 888 or 8888 colormodel?</color>
                        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>pixelLength</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#f8f8f2>dataElements</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>valueA</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>intPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff000000</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>valueR</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>intPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff0000</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>valueG</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>intPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff00</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>valueB</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>intPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xff</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>}</color>

                        <color=#75715e>// Average</color>
                        <color=#f8f8f2>valueA</color> <color=#f92672>/=</color> <color=#f8f8f2>pixelCount</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>valueR</color> <color=#f92672>/=</color> <color=#f8f8f2>pixelCount</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>valueG</color> <color=#f92672>/=</color> <color=#f8f8f2>pixelCount</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>valueB</color> <color=#f92672>/=</color> <color=#f8f8f2>pixelCount</color><color=#f8f8f2>;</color>

                        <color=#75715e>//for (int i = 0; i < pixelLength; i += dataElements) {</color>
                        <color=#f8f8f2>intPixels</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>valueA</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>intPixels</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>|=</color> <color=#f8f8f2>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>valueR</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>intPixels</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>|=</color> <color=#f8f8f2>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>valueG</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>intPixels</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>|=</color> <color=#f8f8f2>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>valueB</color><color=#f8f8f2>);</color>
                        <color=#75715e>//}</color>
                        <color=#66d9ef>break</color><color=#f8f8f2>;</color>

                    <color=#66d9ef>case</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_USHORT</color><color=#f8f8f2>:</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bitMasks</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#66d9ef>short</color><color=#f92672>[]</color> <color=#f8f8f2>shortPixels</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>short</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>data</color><color=#f8f8f2>;</color>
                            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>pixelLength</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>+=</color> <color=#f8f8f2>dataElements</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                <color=#f8f8f2>valueA</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>shortPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#f8f8f2>bitMasks</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#f8f8f2>bitOffsets</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bitMasks</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                    <color=#f8f8f2>valueR</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>shortPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#f8f8f2>bitMasks</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#f8f8f2>bitOffsets</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                                    <color=#f8f8f2>valueG</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>shortPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#f8f8f2>bitMasks</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#f8f8f2>bitOffsets</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bitMasks</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#ae81ff>3</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                        <color=#f8f8f2>valueB</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>shortPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#f8f8f2>bitMasks</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#f8f8f2>bitOffsets</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                                    <color=#f8f8f2>}</color>
                                <color=#f8f8f2>}</color>
                            <color=#f8f8f2>}</color>

                            <color=#75715e>// Average</color>
                            <color=#f8f8f2>valueA</color> <color=#f92672>/=</color> <color=#f8f8f2>pixelCount</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>valueR</color> <color=#f92672>/=</color> <color=#f8f8f2>pixelCount</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>valueG</color> <color=#f92672>/=</color> <color=#f8f8f2>pixelCount</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>valueB</color> <color=#f92672>/=</color> <color=#f8f8f2>pixelCount</color><color=#f8f8f2>;</color>

                            <color=#75715e>//for (int i = 0; i < pixelLength; i += dataElements) {</color>
                            <color=#f8f8f2>shortPixels</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>short</color><color=#f8f8f2>)</color> <color=#f8f8f2>(((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>valueA</color> <color=#f92672><<</color> <color=#f8f8f2>bitOffsets</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#f8f8f2>bitMasks</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>);</color>
                            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bitMasks</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                <color=#f8f8f2>shortPixels</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>|=</color> <color=#f8f8f2>(</color><color=#66d9ef>short</color><color=#f8f8f2>)</color> <color=#f8f8f2>(((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>valueR</color> <color=#f92672><<</color> <color=#f8f8f2>bitOffsets</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#f8f8f2>bitMasks</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>);</color>
                                <color=#f8f8f2>shortPixels</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>|=</color> <color=#f8f8f2>(</color><color=#66d9ef>short</color><color=#f8f8f2>)</color> <color=#f8f8f2>(((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>valueG</color> <color=#f92672><<</color> <color=#f8f8f2>bitOffsets</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#f8f8f2>bitMasks</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>);</color>
                                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bitMasks</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#ae81ff>3</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                                    <color=#f8f8f2>shortPixels</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>|=</color> <color=#f8f8f2>(</color><color=#66d9ef>short</color><color=#f8f8f2>)</color> <color=#f8f8f2>(((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>valueB</color> <color=#f92672><<</color> <color=#f8f8f2>bitOffsets</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#f8f8f2>bitMasks</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>]</color><color=#f8f8f2>);</color>
                                <color=#f8f8f2>}</color>
                            <color=#f8f8f2>}</color>
                            <color=#75715e>//}</color>
                            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color>
                    <color=#66d9ef>default</color><color=#f8f8f2>:</color>
                        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"TransferType not supported: "</color> <color=#f92672>+</color> <color=#f8f8f2>dataType</color><color=#f8f8f2>);</color>

                <color=#f8f8f2>}</color>

                <color=#f8f8f2>dest</color><color=#f8f8f2>.</color><color=#a6e22e>setDataElements</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>data</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>dest</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>clamp</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pValue</color> <color=#f92672>></color> <color=#ae81ff>255</color> <color=#f92672>?</color> <color=#ae81ff>255</color> <color=#f8f8f2>:</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>RenderingHints</color> <color=#a6e22e>getRenderingHints</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// TODO: Refactor boilerplate to AbstractBufferedImageOp or use a delegate?</color>
    <color=#75715e>// Delegate is maybe better as we won't always implement both BIOp and RasterOP</color>
    <color=#75715e>// (but are there ever any time we want to implemnet RasterOp and not BIOp?)</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>destCM</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>cm</color> <color=#f92672>=</color> <color=#f8f8f2>destCM</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>destCM</color> <color=#f8f8f2>:</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getColorModel</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>cm</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>ImageUtil</color><color=#f8f8f2>.</color><color=#a6e22e>createCompatibleWritableRaster</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>cm</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>),</color>
                <color=#f8f8f2>cm</color><color=#f8f8f2>.</color><color=#a6e22e>isAlphaPremultiplied</color><color=#f8f8f2>(),</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>WritableRaster</color> <color=#a6e22e>createCompatibleDestRaster</color><color=#f8f8f2>(</color><color=#f8f8f2>Raster</color> <color=#f8f8f2>src</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>createCompatibleWritableRaster</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Rectangle2D</color> <color=#a6e22e>getBounds2D</color><color=#f8f8f2>(</color><color=#f8f8f2>Raster</color> <color=#f8f8f2>src</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rectangle</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Rectangle2D</color> <color=#a6e22e>getBounds2D</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rectangle</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Point2D</color> <color=#a6e22e>getPoint2D</color><color=#f8f8f2>(</color><color=#f8f8f2>Point2D</color> <color=#f8f8f2>srcPt</color><color=#f8f8f2>,</color> <color=#f8f8f2>Point2D</color> <color=#f8f8f2>dstPt</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// TODO: This is wrong!</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dstPt</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>srcPt</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Point2D</color><color=#f8f8f2>.</color><color=#a6e22e>Double</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>dstPt</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Point2D</color><color=#f8f8f2>.</color><color=#a6e22e>Double</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>dstPt</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Point2D</color><color=#f8f8f2>.</color><color=#a6e22e>Float</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>dstPt</color><color=#f8f8f2>.</color><color=#a6e22e>setLocation</color><color=#f8f8f2>(</color><color=#f8f8f2>srcPt</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>dstPt</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>main</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>pArgs</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>image</color> <color=#f92672>=</color> <color=#f8f8f2>ImageIO</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#e6db74>"2006-Lamborghini-Gallardo-Spyder-Y-T-1600x1200.png"</color><color=#f8f8f2>));</color>
        <color=#75715e>//BufferedImage image = ImageIO.read(new File("focus-rs.jpg"));</color>
        <color=#75715e>//BufferedImage image = ImageIO.read(new File("blauesglas_16_bitmask444.bmp"));</color>
        <color=#75715e>//image = ImageUtil.toBuffered(image, BufferedImage.TYPE_USHORT_GRAY);</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#ae81ff>100</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>//new PixelizeOp(10).filter(image, null);</color>
            <color=#75715e>//new AffineTransformOp(AffineTransform.getScaleInstance(.1, .1), AffineTransformOp.TYPE_NEAREST_NEIGHBOR).filter(image, null);</color>
            <color=#75715e>//ImageUtil.toBuffered(image.getScaledInstance(image.getWidth() / 4, image.getHeight() / 4, Image.SCALE_AREA_AVERAGING));</color>
            <color=#75715e>//new ResampleOp(image.getWidth() / 10, image.getHeight() / 10, ResampleOp.FILTER_BOX).filter(image, null);</color>
            <color=#75715e>//new ResampleOp(image.getWidth() / 10, image.getHeight() / 10, ResampleOp.FILTER_QUADRATIC).filter(image, null);</color>
            <color=#75715e>//new AreaAverageOp(image.getWidth() / 10, image.getHeight() / 10).filter(image, null);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>long</color> <color=#f8f8f2>start</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>();</color>
        <color=#75715e>//PixelizeOp pixelizer = new PixelizeOp(image.getWidth() / 10, 1);</color>
        <color=#75715e>//pixelizer.setSourceRegion(new Rectangle(0, 2 * image.getHeight() / 3, image.getWidth(), image.getHeight() / 4));</color>
        <color=#75715e>//PixelizeOp pixelizer = new PixelizeOp(4);</color>
        <color=#75715e>//image = pixelizer.filter(image, image); // Filter in place, that's cool</color>
        <color=#75715e>//image = new AffineTransformOp(AffineTransform.getScaleInstance(.25, .25), AffineTransformOp.TYPE_NEAREST_NEIGHBOR).filter(image, null);</color>
        <color=#75715e>//image = ImageUtil.toBuffered(image.getScaledInstance(image.getWidth() / 4, image.getHeight() / 4, Image.SCALE_AREA_AVERAGING));</color>
        <color=#75715e>//image = new ResampleOp(image.getWidth() / 4, image.getHeight() / 4, ResampleOp.FILTER_BOX).filter(image, null);</color>
        <color=#75715e>//image = new ResampleOp(image.getWidth() / 4, image.getHeight() / 4, ResampleOp.FILTER_QUADRATIC).filter(image, null);</color>
        <color=#75715e>//image = new AreaAverageOp(image.getWidth() / 7, image.getHeight() / 4).filter(image, null);</color>
        <color=#f8f8f2>image</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AreaAverageOp</color><color=#f8f8f2>(</color><color=#ae81ff>500</color><color=#f8f8f2>,</color> <color=#ae81ff>600</color><color=#f8f8f2>).</color><color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#75715e>//image = new ResampleOp(500, 600, ResampleOp.FILTER_BOX).filter(image, null);</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>time</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>start</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"time: "</color> <color=#f92672>+</color> <color=#f8f8f2>time</color> <color=#f92672>+</color> <color=#e6db74>" ms"</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>JFrame</color> <color=#f8f8f2>frame</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>JFrame</color><color=#f8f8f2>(</color><color=#e6db74>"Test"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>setDefaultCloseOperation</color><color=#f8f8f2>(</color><color=#f8f8f2>JFrame</color><color=#f8f8f2>.</color><color=#a6e22e>EXIT_ON_CLOSE</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>setContentPane</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>JScrollPane</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>JLabel</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>BufferedImageIcon</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>))));</color>
        <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>pack</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>frame</color><color=#f8f8f2>.</color><color=#a6e22e>setVisible</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>