<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2016, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.AffineTransform</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.Point2D</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.Rectangle2D</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * This is a drop-in replacement for {@link java.awt.image.AffineTransformOp}.</color>
<color=#75715e> * <p>Currently only a modification on {@link #filter(BufferedImage, BufferedImage)} is done, which does a Graphics2D fallback for the native lib.</p></color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:mail@schmidor.de">Oliver Schmidtmer</a></color>
<color=#75715e> * @author last modified by $Author$</color>
<color=#75715e> * @version $Id$</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>AffineTransformOp</color> <color=#66d9ef>implements</color> <color=#f8f8f2>BufferedImageOp</color><color=#f8f8f2>,</color> <color=#f8f8f2>RasterOp</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>final</color> <color=#f8f8f2>java</color><color=#f8f8f2>.</color><color=#a6e22e>awt</color><color=#f8f8f2>.</color><color=#a6e22e>image</color><color=#f8f8f2>.</color><color=#a6e22e>AffineTransformOp</color> <color=#f8f8f2>delegate</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TYPE_NEAREST_NEIGHBOR</color> <color=#f92672>=</color> <color=#f8f8f2>java</color><color=#f8f8f2>.</color><color=#a6e22e>awt</color><color=#f8f8f2>.</color><color=#a6e22e>image</color><color=#f8f8f2>.</color><color=#a6e22e>AffineTransformOp</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_NEAREST_NEIGHBOR</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TYPE_BILINEAR</color> <color=#f92672>=</color> <color=#f8f8f2>java</color><color=#f8f8f2>.</color><color=#a6e22e>awt</color><color=#f8f8f2>.</color><color=#a6e22e>image</color><color=#f8f8f2>.</color><color=#a6e22e>AffineTransformOp</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BILINEAR</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>TYPE_BICUBIC</color> <color=#f92672>=</color> <color=#f8f8f2>java</color><color=#f8f8f2>.</color><color=#a6e22e>awt</color><color=#f8f8f2>.</color><color=#a6e22e>image</color><color=#f8f8f2>.</color><color=#a6e22e>AffineTransformOp</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BICUBIC</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * @param xform The {@link AffineTransform} to use for the operation.</color>
<color=#75715e>     * @param hints The {@link RenderingHints} object used to specify the interpolation type for the operation.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>AffineTransformOp</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>AffineTransform</color> <color=#f8f8f2>xform</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>RenderingHints</color> <color=#f8f8f2>hints</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>delegate</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>java</color><color=#f8f8f2>.</color><color=#a6e22e>awt</color><color=#f8f8f2>.</color><color=#a6e22e>image</color><color=#f8f8f2>.</color><color=#a6e22e>AffineTransformOp</color><color=#f8f8f2>(</color><color=#f8f8f2>xform</color><color=#f8f8f2>,</color> <color=#f8f8f2>hints</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * @param xform             The {@link AffineTransform} to use for the operation.</color>
<color=#75715e>     * @param interpolationType One of the integer interpolation type constants defined by this class: {@link #TYPE_NEAREST_NEIGHBOR}, {@link #TYPE_BILINEAR}, {@link #TYPE_BICUBIC}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>AffineTransformOp</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>AffineTransform</color> <color=#f8f8f2>xform</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>interpolationType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>delegate</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>java</color><color=#f8f8f2>.</color><color=#a6e22e>awt</color><color=#f8f8f2>.</color><color=#a6e22e>image</color><color=#f8f8f2>.</color><color=#a6e22e>AffineTransformOp</color><color=#f8f8f2>(</color><color=#f8f8f2>xform</color><color=#f8f8f2>,</color> <color=#f8f8f2>interpolationType</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>dst</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>delegate</color><color=#f8f8f2>.</color><color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>dst</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>ImagingOpException</color> <color=#f8f8f2>ex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dst</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>dst</color> <color=#f92672>=</color> <color=#f8f8f2>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>src</color><color=#f8f8f2>.</color><color=#a6e22e>getColorModel</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>Graphics2D</color> <color=#f8f8f2>g2d</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

            <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>g2d</color> <color=#f92672>=</color> <color=#f8f8f2>dst</color><color=#f8f8f2>.</color><color=#a6e22e>createGraphics</color><color=#f8f8f2>();</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>interpolationType</color> <color=#f92672>=</color> <color=#f8f8f2>delegate</color><color=#f8f8f2>.</color><color=#a6e22e>getInterpolationType</color><color=#f8f8f2>();</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>interpolationType</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>Object</color> <color=#f8f8f2>interpolationValue</color> <color=#f92672>=</color> <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>VALUE_INTERPOLATION_NEAREST_NEIGHBOR</color><color=#f8f8f2>;</color>

                    <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>interpolationType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>case</color> <color=#f8f8f2>java</color><color=#f8f8f2>.</color><color=#a6e22e>awt</color><color=#f8f8f2>.</color><color=#a6e22e>image</color><color=#f8f8f2>.</color><color=#a6e22e>AffineTransformOp</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BILINEAR</color><color=#f8f8f2>:</color>
                            <color=#f8f8f2>interpolationValue</color> <color=#f92672>=</color> <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>VALUE_INTERPOLATION_BILINEAR</color><color=#f8f8f2>;</color>
                            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>case</color> <color=#f8f8f2>java</color><color=#f8f8f2>.</color><color=#a6e22e>awt</color><color=#f8f8f2>.</color><color=#a6e22e>image</color><color=#f8f8f2>.</color><color=#a6e22e>AffineTransformOp</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BICUBIC</color><color=#f8f8f2>:</color>
                            <color=#f8f8f2>interpolationValue</color> <color=#f92672>=</color> <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>VALUE_INTERPOLATION_BICUBIC</color><color=#f8f8f2>;</color>
                            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>

                    <color=#f8f8f2>g2d</color><color=#f8f8f2>.</color><color=#a6e22e>setRenderingHint</color><color=#f8f8f2>(</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>KEY_INTERPOLATION</color><color=#f8f8f2>,</color> <color=#f8f8f2>interpolationValue</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>getRenderingHints</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>g2d</color><color=#f8f8f2>.</color><color=#a6e22e>setRenderingHints</color><color=#f8f8f2>(</color><color=#f8f8f2>getRenderingHints</color><color=#f8f8f2>());</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>g2d</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>delegate</color><color=#f8f8f2>.</color><color=#a6e22e>getTransform</color><color=#f8f8f2>(),</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

                <color=#66d9ef>return</color> <color=#f8f8f2>dst</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>g2d</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>g2d</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Rectangle2D</color> <color=#a6e22e>getBounds2D</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>delegate</color><color=#f8f8f2>.</color><color=#a6e22e>getBounds2D</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>destCM</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>delegate</color><color=#f8f8f2>.</color><color=#a6e22e>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>destCM</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>WritableRaster</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Raster</color> <color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>WritableRaster</color> <color=#f8f8f2>dest</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>delegate</color><color=#f8f8f2>.</color><color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>,</color> <color=#f8f8f2>dest</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Rectangle2D</color> <color=#a6e22e>getBounds2D</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Raster</color> <color=#f8f8f2>src</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>delegate</color><color=#f8f8f2>.</color><color=#a6e22e>getBounds2D</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>WritableRaster</color> <color=#a6e22e>createCompatibleDestRaster</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Raster</color> <color=#f8f8f2>src</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>delegate</color><color=#f8f8f2>.</color><color=#a6e22e>createCompatibleDestRaster</color><color=#f8f8f2>(</color><color=#f8f8f2>src</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Point2D</color> <color=#a6e22e>getPoint2D</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Point2D</color> <color=#f8f8f2>srcPt</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Point2D</color> <color=#f8f8f2>dstPt</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>delegate</color><color=#f8f8f2>.</color><color=#a6e22e>getPoint2D</color><color=#f8f8f2>(</color><color=#f8f8f2>srcPt</color><color=#f8f8f2>,</color> <color=#f8f8f2>dstPt</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>RenderingHints</color> <color=#a6e22e>getRenderingHints</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>delegate</color><color=#f8f8f2>.</color><color=#a6e22e>getRenderingHints</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>