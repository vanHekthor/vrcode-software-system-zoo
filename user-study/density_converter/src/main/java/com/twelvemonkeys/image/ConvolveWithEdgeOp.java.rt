<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.Point2D</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.Rectangle2D</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * This class implements a convolution from the source</color>
<color=#75715e> * to the destination.</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haku $</color>
<color=#75715e> * @version $Id: //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/image/ConvolveWithEdgeOp.java#1 $</color>
<color=#75715e> * @see ConvolveOp</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ConvolveWithEdgeOp</color> <color=#66d9ef>implements</color> <color=#f8f8f2>BufferedImageOp</color><color=#f8f8f2>,</color> <color=#f8f8f2>RasterOp</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Alias for {@link ConvolveOp#EDGE_ZERO_FILL}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @see #EDGE_REFLECT</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>EDGE_ZERO_FILL</color> <color=#f92672>=</color> <color=#f8f8f2>ConvolveOp</color><color=#f8f8f2>.</color><color=#a6e22e>EDGE_ZERO_FILL</color><color=#f8f8f2>;</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Alias for {@link ConvolveOp#EDGE_NO_OP}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @see #EDGE_REFLECT</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>EDGE_NO_OP</color> <color=#f92672>=</color> <color=#f8f8f2>ConvolveOp</color><color=#f8f8f2>.</color><color=#a6e22e>EDGE_NO_OP</color><color=#f8f8f2>;</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Adds a border to the image while convolving. The border will reflect the</color>
<color=#75715e>     * edges of the original image. This is usually a good default.</color>
<color=#75715e>     * Note that while this mode typically provides better quality than the</color>
<color=#75715e>     * standard modes {@code EDGE_ZERO_FILL} and {@code EDGE_NO_OP}, it does so</color>
<color=#75715e>     * at the expense of higher memory consumption and considerable more computation.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>EDGE_REFLECT</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color> <color=#75715e>// as JAI BORDER_REFLECT</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Adds a border to the image while convolving. The border will wrap the</color>
<color=#75715e>     * edges of the original image. This is usually the best choice for tiles.</color>
<color=#75715e>     * Note that while this mode typically provides better quality than the</color>
<color=#75715e>     * standard modes {@code EDGE_ZERO_FILL} and {@code EDGE_NO_OP}, it does so</color>
<color=#75715e>     * at the expense of higher memory consumption and considerable more computation.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @see #EDGE_REFLECT</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>EDGE_WRAP</color> <color=#f92672>=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color> <color=#75715e>// as JAI BORDER_WRAP</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Kernel</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>edgeCondition</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>ConvolveOp</color> <color=#f8f8f2>convolve</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ConvolveWithEdgeOp</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Kernel</color> <color=#f8f8f2>pKernel</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pEdgeCondition</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>RenderingHints</color> <color=#f8f8f2>pHints</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Create convolution operation</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>edge</color><color=#f8f8f2>;</color>

        <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>pEdgeCondition</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>EDGE_REFLECT</color><color=#f8f8f2>:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>EDGE_WRAP</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>edge</color> <color=#f92672>=</color> <color=#f8f8f2>ConvolveOp</color><color=#f8f8f2>.</color><color=#a6e22e>EDGE_NO_OP</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>default</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>edge</color> <color=#f92672>=</color> <color=#f8f8f2>pEdgeCondition</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>kernel</color> <color=#f92672>=</color> <color=#f8f8f2>pKernel</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>edgeCondition</color> <color=#f92672>=</color> <color=#f8f8f2>pEdgeCondition</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>convolve</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ConvolveOp</color><color=#f8f8f2>(</color><color=#f8f8f2>pKernel</color><color=#f8f8f2>,</color> <color=#f8f8f2>edge</color><color=#f8f8f2>,</color> <color=#f8f8f2>pHints</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ConvolveWithEdgeOp</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Kernel</color> <color=#f8f8f2>pKernel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>pKernel</color><color=#f8f8f2>,</color> <color=#f8f8f2>EDGE_ZERO_FILL</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pDestination</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pSource</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"source image is null"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pSource</color> <color=#f92672>==</color> <color=#f8f8f2>pDestination</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"source image cannot be the same as the destination image"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>borderX</color> <color=#f92672>=</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>()</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>borderY</color> <color=#f92672>=</color> <color=#f8f8f2>kernel</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>()</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>original</color> <color=#f92672>=</color> <color=#f8f8f2>addBorder</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#f8f8f2>borderX</color><color=#f8f8f2>,</color> <color=#f8f8f2>borderY</color><color=#f8f8f2>);</color>

        <color=#75715e>// Workaround for what seems to be a Java2D bug:</color>
        <color=#75715e>// ConvolveOp needs explicit destination image type for some "uncommon"</color>
        <color=#75715e>// image types. However, TYPE_3BYTE_BGR is what javax.imageio.ImageIO</color>
        <color=#75715e>// normally returns for color JPEGs... :-/</color>
        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>destination</color> <color=#f92672>=</color> <color=#f8f8f2>pDestination</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>original</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_3BYTE_BGR</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>destination</color> <color=#f92672>=</color> <color=#f8f8f2>ImageUtil</color><color=#f8f8f2>.</color><color=#a6e22e>createBuffered</color><color=#f8f8f2>(</color>
                    <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>(),</color>
                    <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>getColorModel</color><color=#f8f8f2>().</color><color=#a6e22e>getTransparency</color><color=#f8f8f2>(),</color>
                    <color=#66d9ef>null</color>
            <color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Do the filtering (if destination is null, a new image will be created)</color>
        <color=#f8f8f2>destination</color> <color=#f92672>=</color> <color=#f8f8f2>convolve</color><color=#f8f8f2>.</color><color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>original</color><color=#f8f8f2>,</color> <color=#f8f8f2>destination</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pSource</color> <color=#f92672>!=</color> <color=#f8f8f2>original</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Remove the border</color>
            <color=#f8f8f2>destination</color> <color=#f92672>=</color> <color=#f8f8f2>destination</color><color=#f8f8f2>.</color><color=#a6e22e>getSubimage</color><color=#f8f8f2>(</color><color=#f8f8f2>borderX</color><color=#f8f8f2>,</color> <color=#f8f8f2>borderY</color><color=#f8f8f2>,</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>destination</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>addBorder</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pOriginal</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pBorderX</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pBorderY</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>edgeCondition</color> <color=#f92672>&</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pOriginal</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// TODO: Might be faster if we could clone raster and stretch it...</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>w</color> <color=#f92672>=</color> <color=#f8f8f2>pOriginal</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>h</color> <color=#f92672>=</color> <color=#f8f8f2>pOriginal</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>cm</color> <color=#f92672>=</color> <color=#f8f8f2>pOriginal</color><color=#f8f8f2>.</color><color=#a6e22e>getColorModel</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>WritableRaster</color> <color=#f8f8f2>raster</color> <color=#f92672>=</color> <color=#f8f8f2>cm</color><color=#f8f8f2>.</color><color=#a6e22e>createCompatibleWritableRaster</color><color=#f8f8f2>(</color><color=#f8f8f2>w</color> <color=#f92672>+</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>pBorderX</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color> <color=#f92672>+</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>pBorderY</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>bordered</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>cm</color><color=#f8f8f2>,</color> <color=#f8f8f2>raster</color><color=#f8f8f2>,</color> <color=#f8f8f2>cm</color><color=#f8f8f2>.</color><color=#a6e22e>isAlphaPremultiplied</color><color=#f8f8f2>(),</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>Graphics2D</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>bordered</color><color=#f8f8f2>.</color><color=#a6e22e>createGraphics</color><color=#f8f8f2>();</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>setComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>AlphaComposite</color><color=#f8f8f2>.</color><color=#a6e22e>Src</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>setRenderingHint</color><color=#f8f8f2>(</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>KEY_DITHERING</color><color=#f8f8f2>,</color> <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>VALUE_DITHER_DISABLE</color><color=#f8f8f2>);</color>

            <color=#75715e>// Draw original in center</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pOriginal</color><color=#f8f8f2>,</color> <color=#f8f8f2>pBorderX</color><color=#f8f8f2>,</color> <color=#f8f8f2>pBorderY</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

            <color=#75715e>// TODO: I guess we need the top/left etc, if the corner pixels are covered by the kernel</color>
            <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>edgeCondition</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>EDGE_REFLECT</color><color=#f8f8f2>:</color>
                    <color=#75715e>// Top/left (empty)</color>
                    <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pOriginal</color><color=#f8f8f2>,</color> <color=#f8f8f2>pBorderX</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>pBorderX</color> <color=#f92672>+</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#f8f8f2>pBorderY</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color> <color=#75715e>// Top/center</color>
                    <color=#75715e>// Top/right (empty)</color>

                    <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pOriginal</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#f8f8f2>w</color> <color=#f92672>+</color> <color=#f8f8f2>pBorderX</color><color=#f8f8f2>,</color> <color=#f8f8f2>pBorderY</color><color=#f8f8f2>,</color> <color=#f8f8f2>pBorderX</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color> <color=#f92672>+</color> <color=#f8f8f2>pBorderY</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color> <color=#75715e>// Center/left</color>
                    <color=#75715e>// Center/center (already drawn)</color>
                    <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pOriginal</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color> <color=#f92672>+</color> <color=#f8f8f2>pBorderX</color><color=#f8f8f2>,</color> <color=#f8f8f2>pBorderY</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>pBorderX</color> <color=#f92672>+</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color> <color=#f92672>+</color> <color=#f8f8f2>pBorderY</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color> <color=#75715e>// Center/right</color>

                    <color=#75715e>// Bottom/left (empty)</color>
                    <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pOriginal</color><color=#f8f8f2>,</color> <color=#f8f8f2>pBorderX</color><color=#f8f8f2>,</color> <color=#f8f8f2>pBorderY</color> <color=#f92672>+</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#f8f8f2>pBorderX</color> <color=#f92672>+</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>pBorderY</color> <color=#f92672>+</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color> <color=#75715e>// Bottom/center</color>
                    <color=#75715e>// Bottom/right (empty)</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>EDGE_WRAP</color><color=#f8f8f2>:</color>
                    <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pOriginal</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#f8f8f2>w</color> <color=#f92672>+</color> <color=#f8f8f2>pBorderX</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#f8f8f2>h</color> <color=#f92672>+</color> <color=#f8f8f2>pBorderY</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color> <color=#75715e>// Top/left</color>
                    <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pOriginal</color><color=#f8f8f2>,</color> <color=#f8f8f2>pBorderX</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#f8f8f2>h</color> <color=#f92672>+</color> <color=#f8f8f2>pBorderY</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color> <color=#75715e>// Top/center</color>
                    <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pOriginal</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color> <color=#f92672>+</color> <color=#f8f8f2>pBorderX</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#f8f8f2>h</color> <color=#f92672>+</color> <color=#f8f8f2>pBorderY</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color> <color=#75715e>// Top/right</color>

                    <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pOriginal</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#f8f8f2>w</color> <color=#f92672>+</color> <color=#f8f8f2>pBorderX</color><color=#f8f8f2>,</color> <color=#f8f8f2>pBorderY</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color> <color=#75715e>// Center/left</color>
                    <color=#75715e>// Center/center (already drawn)</color>
                    <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pOriginal</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color> <color=#f92672>+</color> <color=#f8f8f2>pBorderX</color><color=#f8f8f2>,</color> <color=#f8f8f2>pBorderY</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color> <color=#75715e>// Center/right</color>

                    <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pOriginal</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#f8f8f2>w</color> <color=#f92672>+</color> <color=#f8f8f2>pBorderX</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color> <color=#f92672>+</color> <color=#f8f8f2>pBorderY</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color> <color=#75715e>// Bottom/left</color>
                    <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pOriginal</color><color=#f8f8f2>,</color> <color=#f8f8f2>pBorderX</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color> <color=#f92672>+</color> <color=#f8f8f2>pBorderY</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color> <color=#75715e>// Bottom/center</color>
                    <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pOriginal</color><color=#f8f8f2>,</color> <color=#f8f8f2>w</color> <color=#f92672>+</color> <color=#f8f8f2>pBorderX</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color> <color=#f92672>+</color> <color=#f8f8f2>pBorderY</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color> <color=#75715e>// Bottom/right</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#66d9ef>default</color><color=#f8f8f2>:</color>
                    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Illegal edge operation "</color> <color=#f92672>+</color> <color=#f8f8f2>edgeCondition</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

        <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>bordered</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the edge condition.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the edge condition of this {@code ConvolveOp}.</color>
<color=#75715e>     * @see #EDGE_NO_OP</color>
<color=#75715e>     * @see #EDGE_ZERO_FILL</color>
<color=#75715e>     * @see #EDGE_REFLECT</color>
<color=#75715e>     * @see #EDGE_WRAP</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getEdgeCondition</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>edgeCondition</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>WritableRaster</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Raster</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>WritableRaster</color> <color=#f8f8f2>pDestination</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>convolve</color><color=#f8f8f2>.</color><color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#f8f8f2>pDestination</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>pDesinationColorModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>convolve</color><color=#f8f8f2>.</color><color=#a6e22e>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#f8f8f2>pDesinationColorModel</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>WritableRaster</color> <color=#a6e22e>createCompatibleDestRaster</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Raster</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>convolve</color><color=#f8f8f2>.</color><color=#a6e22e>createCompatibleDestRaster</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Rectangle2D</color> <color=#a6e22e>getBounds2D</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>convolve</color><color=#f8f8f2>.</color><color=#a6e22e>getBounds2D</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Rectangle2D</color> <color=#a6e22e>getBounds2D</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Raster</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>convolve</color><color=#f8f8f2>.</color><color=#a6e22e>getBounds2D</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Point2D</color> <color=#a6e22e>getPoint2D</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Point2D</color> <color=#f8f8f2>pSourcePoint</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>Point2D</color> <color=#f8f8f2>pDestinationPoint</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>convolve</color><color=#f8f8f2>.</color><color=#a6e22e>getPoint2D</color><color=#f8f8f2>(</color><color=#f8f8f2>pSourcePoint</color><color=#f8f8f2>,</color> <color=#f8f8f2>pDestinationPoint</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>RenderingHints</color> <color=#a6e22e>getRenderingHints</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>convolve</color><color=#f8f8f2>.</color><color=#a6e22e>getRenderingHints</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Kernel</color> <color=#a6e22e>getKernel</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>convolve</color><color=#f8f8f2>.</color><color=#a6e22e>getKernel</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

<color=#f8f8f2>}</color>