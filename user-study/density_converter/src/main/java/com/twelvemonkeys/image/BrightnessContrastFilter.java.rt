<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.RGBImageFilter</color><color=#f8f8f2>;</color>


<color=#75715e>/**</color>
<color=#75715e> * Adjusts the contrast and brightness of an image.</color>
<color=#75715e> * <p/></color>
<color=#75715e> * For brightness, the valid range is {@code -2.0,..,0.0,..,2.0}.</color>
<color=#75715e> * A value of {@code 0.0} means no change.</color>
<color=#75715e> * Negative values will make the pixels darker.</color>
<color=#75715e> * Maximum negative value ({@code -2}) will make all filtered pixels black.</color>
<color=#75715e> * Positive values will make the pixels brighter.</color>
<color=#75715e> * Maximum positive value ({@code 2}) will make all filtered pixels white.</color>
<color=#75715e> * <p/></color>
<color=#75715e> * For contrast, the valid range is {@code -1.0,..,0.0,..,1.0}.</color>
<color=#75715e> * A value of {@code 0.0} means no change.</color>
<color=#75715e> * Negative values will reduce contrast.</color>
<color=#75715e> * Maximum negative value ({@code -1}) will make all filtered pixels grey</color>
<color=#75715e> * (no contrast).</color>
<color=#75715e> * Positive values will increase contrast.</color>
<color=#75715e> * Maximum positive value ({@code 1}) will make all filtered pixels primary</color>
<color=#75715e> * colors (either black, white, cyan, magenta, yellow, red, blue or green).</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haku $</color>
<color=#75715e> * @version $Id: //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/image/BrightnessContrastFilter.java#1 $</color>
<color=#75715e> * @todo consider doing something similar to http://archives.java.sun.com/cgi-bin/wa?A2=ind0302&L=jai-interest&F=&S=&P=15947</color>
<color=#75715e> */</color>

<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>BrightnessContrastFilter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>RGBImageFilter</color> <color=#f8f8f2>{</color>

    <color=#75715e>// TODO: Replace with RescaleOp?</color>

    <color=#75715e>// This filter can filter IndexColorModel, as it is does not depend on</color>
    <color=#75715e>// the pixels' location</color>
    <color=#f8f8f2>{</color>
        <color=#f8f8f2>canFilterIndexColorModel</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// Use a pre-calculated lookup table for performance</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>LUT</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a BrightnessContrastFilter with default values</color>
<color=#75715e>     * ({@code brightness=0.3, contrast=0.3}).</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * This will slightly increase both brightness and contrast.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>BrightnessContrastFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#ae81ff>0.3f</color><color=#f8f8f2>,</color> <color=#ae81ff>0.3f</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a BrightnessContrastFilter with the given values for brightness</color>
<color=#75715e>     * and contrast.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * For brightness, the valid range is {@code -2.0,..,0.0,..,2.0}.</color>
<color=#75715e>     * A value of {@code 0.0} means no change.</color>
<color=#75715e>     * Negative values will make the pixels darker.</color>
<color=#75715e>     * Maximum negative value ({@code -2}) will make all filtered pixels black.</color>
<color=#75715e>     * Positive values will make the pixels brighter.</color>
<color=#75715e>     * Maximum positive value ({@code 2}) will make all filtered pixels white.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * For contrast, the valid range is {@code -1.0,..,0.0,..,1.0}.</color>
<color=#75715e>     * A value of {@code 0.0} means no change.</color>
<color=#75715e>     * Negative values will reduce contrast.</color>
<color=#75715e>     * Maximum negative value ({@code -1}) will make all filtered pixels grey</color>
<color=#75715e>     * (no contrast).</color>
<color=#75715e>     * Positive values will increase contrast.</color>
<color=#75715e>     * Maximum positive value ({@code 1}) will make all filtered pixels primary</color>
<color=#75715e>     * colors (either black, white, cyan, magenta, yellow, red, blue or green).</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pBrightness adjust the brightness of the image, in the range</color>
<color=#75715e>     *                    {@code -2.0,..,0.0,..,2.0}.</color>
<color=#75715e>     * @param pContrast   adjust the contrast of the image, in the range</color>
<color=#75715e>     *                    {@code -1.0,..,0.0,..,1.0}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>BrightnessContrastFilter</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>pBrightness</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>pContrast</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>LUT</color> <color=#f92672>=</color> <color=#f8f8f2>createLUT</color><color=#f8f8f2>(</color><color=#f8f8f2>pBrightness</color><color=#f8f8f2>,</color> <color=#f8f8f2>pContrast</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#a6e22e>createLUT</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>pBrightness</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>pContrast</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>lut</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#ae81ff>256</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#75715e>// Hmmm.. This approximates Photoshop values.. Not good though..</color>
        <color=#66d9ef>double</color> <color=#f8f8f2>contrast</color> <color=#f92672>=</color> <color=#f8f8f2>pContrast</color> <color=#f92672>></color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>pow</color><color=#f8f8f2>(</color><color=#f8f8f2>pContrast</color><color=#f8f8f2>,</color> <color=#ae81ff>7.0</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#ae81ff>127.0</color> <color=#f8f8f2>:</color> <color=#f8f8f2>pContrast</color><color=#f8f8f2>;</color>

        <color=#75715e>// Convert range [-1,..,0,..,1] -> [0,..,1,..,2]</color>
        <color=#66d9ef>double</color> <color=#f8f8f2>brightness</color> <color=#f92672>=</color> <color=#f8f8f2>pBrightness</color> <color=#f92672>+</color> <color=#ae81ff>1.0</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#ae81ff>256</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>lut</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>clamp</color><color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#ae81ff>127.5</color> <color=#f92672>*</color> <color=#f8f8f2>brightness</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>-</color> <color=#ae81ff>127</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>contrast</color> <color=#f92672>+</color> <color=#ae81ff>1.0</color><color=#f8f8f2>)));</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Special case, to ensure only primary colors for max contrast</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pContrast</color> <color=#f92672>==</color> <color=#ae81ff>1f</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>lut</color><color=#f92672>[</color><color=#ae81ff>127</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>lut</color><color=#f92672>[</color><color=#ae81ff>126</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>lut</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>clamp</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>255</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#ae81ff>255</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Filters one pixel, adjusting brightness and contrast according to this</color>
<color=#75715e>     * filter.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pX    x</color>
<color=#75715e>     * @param pY    y</color>
<color=#75715e>     * @param pARGB pixel value in default color space</color>
<color=#75715e>     * @return the filtered pixel value in the default color space</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>filterRGB</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pX</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pY</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pARGB</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Get color components</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>pARGB</color> <color=#f92672>>></color> <color=#ae81ff>16</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>pARGB</color> <color=#f92672>>></color> <color=#ae81ff>8</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>pARGB</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>

        <color=#75715e>// Scale to new contrast</color>
        <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>LUT</color><color=#f92672>[</color><color=#f8f8f2>r</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>LUT</color><color=#f92672>[</color><color=#f8f8f2>g</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>LUT</color><color=#f92672>[</color><color=#f8f8f2>b</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#75715e>// Return ARGB pixel, leave transparency as is</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>pARGB</color> <color=#f92672>&</color> <color=#ae81ff>0xFF000000</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>g</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>