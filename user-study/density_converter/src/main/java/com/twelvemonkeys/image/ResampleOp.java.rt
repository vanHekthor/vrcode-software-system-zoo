<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>
<color=#75715e>/*</color>
<color=#75715e> *******************************************************************************</color>
<color=#75715e> *</color>
<color=#75715e> *  Based on example code found in Graphics Gems III, Filtered Image Rescaling</color>
<color=#75715e> *  (filter_rcg.c), available from http://www.acm.org/tog/GraphicsGems/.</color>
<color=#75715e> *</color>
<color=#75715e> *  Public Domain 1991 by Dale Schumacher. Mods by Ray Gardener</color>
<color=#75715e> *</color>
<color=#75715e> *  Original by Dale Schumacher (fzoom)</color>
<color=#75715e> *</color>
<color=#75715e> *  Additional changes by Ray Gardener, Daylon Graphics Ltd.</color>
<color=#75715e> *  December 4, 1999</color>
<color=#75715e> *</color>
<color=#75715e> *******************************************************************************</color>
<color=#75715e> *</color>
<color=#75715e> *  Aditional changes inspired by ImageMagick's resize.c.</color>
<color=#75715e> *</color>
<color=#75715e> *******************************************************************************</color>
<color=#75715e> *</color>
<color=#75715e> *  Java port and additional changes/bugfixes by Harald Kuhr, Twelvemonkeys.</color>
<color=#75715e> *  February 20, 2006</color>
<color=#75715e> *</color>
<color=#75715e> *******************************************************************************</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.AffineTransform</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.Point2D</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.Rectangle2D</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Resamples (scales) a {@code BufferedImage} to a new width and height, using</color>
<color=#75715e> * high performance and high quality algorithms.</color>
<color=#75715e> * Several different interpolation algorithms may be specifed in the</color>
<color=#75715e> * constructor, either using the</color>
<color=#75715e> * <a href="#field_summary">filter type constants</a>, or one of the</color>
<color=#75715e> * {@code RendereingHints}.</color>
<color=#75715e> * <p/></color>
<color=#75715e> * For fastest results, use {@link #FILTER_POINT} or {@link #FILTER_BOX}.</color>
<color=#75715e> * In most cases, {@link #FILTER_TRIANGLE} will produce acceptable results, while</color>
<color=#75715e> * being relatively fast.</color>
<color=#75715e> * For higher quality output, use more sophisticated interpolation algorithms,</color>
<color=#75715e> * like {@link #FILTER_MITCHELL} or {@link #FILTER_LANCZOS}.</color>
<color=#75715e> * <p/></color>
<color=#75715e> * Example:</color>
<color=#75715e> * <blockquote><pre></color>
<color=#75715e> * BufferedImage image;</color>
<color=#75715e> * <p/></color>
<color=#75715e> * //...</color>
<color=#75715e> * <p/></color>
<color=#75715e> * ResampleOp resampler = new ResampleOp(100, 100, ResampleOp.FILTER_TRIANGLE);</color>
<color=#75715e> * BufferedImage thumbnail = resampler.filter(image, null);</color>
<color=#75715e> * </pre></blockquote></color>
<color=#75715e> * <p/></color>
<color=#75715e> * If your imput image is very large, it's possible to first resample using the</color>
<color=#75715e> * very fast {@code FILTER_POINT} algorithm, then resample to the wanted size,</color>
<color=#75715e> * using a higher quality algorithm:</color>
<color=#75715e> * <blockquote><pre></color>
<color=#75715e> * BufferedImage verylLarge;</color>
<color=#75715e> * <p/></color>
<color=#75715e> * //...</color>
<color=#75715e> * <p/></color>
<color=#75715e> * int w = 300;</color>
<color=#75715e> * int h = 200;</color>
<color=#75715e> * <p/></color>
<color=#75715e> * BufferedImage temp = new ResampleOp(w * 2, h * 2, FILTER_POINT).filter(verylLarge, null);</color>
<color=#75715e> * <p/></color>
<color=#75715e> * BufferedImage scaled = new ResampleOp(w, h).filter(temp, null);</color>
<color=#75715e> * </pre></blockquote></color>
<color=#75715e> * <p/></color>
<color=#75715e> * For maximum performance, this class will use native code, through</color>
<color=#75715e> * <a href="http://www.yeo.id.au/jmagick/">JMagick</a>, when available.</color>
<color=#75715e> * Otherwise, the class will silently fall back to pure Java mode.</color>
<color=#75715e> * Native code may be disabled globally, by setting the system property</color>
<color=#75715e> * {@code com.twelvemonkeys.image.accel} to {@code false}.</color>
<color=#75715e> * To allow debug of the native code, set the system property</color>
<color=#75715e> * {@code com.twelvemonkeys.image.magick.debug} to {@code true}.</color>
<color=#75715e> * <p/></color>
<color=#75715e> * This {@code BufferedImageOp} is based on C example code found in</color>
<color=#75715e> * <a href="http://www.acm.org/tog/GraphicsGems/">Graphics Gems III</a>,</color>
<color=#75715e> * Filtered Image Rescaling, by Dale Schumacher (with additional improvments by</color>
<color=#75715e> * Ray Gardener).</color>
<color=#75715e> * Additional changes are inspired by</color>
<color=#75715e> * <a href="http://www.imagemagick.org/">ImageMagick</a> and</color>
<color=#75715e> * Marco Schmidt's <a href="http://schmidt.devlib.org/jiu/">Java Imaging Utilities</a></color>
<color=#75715e> * (which are also adaptions of the same original code from Graphics Gems III).</color>
<color=#75715e> * <p/></color>
<color=#75715e> * For a description of the various interpolation algorithms, see</color>
<color=#75715e> * <em>General Filtered Image Rescaling</em> in <em>Graphics Gems III</em>,</color>
<color=#75715e> * Academic Press, 1994.</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haku $</color>
<color=#75715e> * @version $Id: //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/image/ResampleOp.java#1 $</color>
<color=#75715e> * @see #ResampleOp(int, int, int)</color>
<color=#75715e> * @see #ResampleOp(int, int, RenderingHints)</color>
<color=#75715e> * @see BufferedImage</color>
<color=#75715e> * @see RenderingHints</color>
<color=#75715e> * @see AffineTransformOp</color>
<color=#75715e> */</color>
<color=#75715e>// TODO: Consider using AffineTransformOp for more operations!?</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ResampleOp</color> <color=#66d9ef>implements</color> <color=#f8f8f2>BufferedImageOp</color><color=#75715e>/* TODO: RasterOp */</color> <color=#f8f8f2>{</color>

    <color=#75715e>// NOTE: These MUST correspond to ImageMagick filter types, for the</color>
    <color=#75715e>// MagickAccelerator to work consistently (see magick.FilterType).</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Undefined interpolation, filter method will use default filter.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>FILTER_UNDEFINED</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Point interpolation (also known as "nearest neighbour").</color>
<color=#75715e>     * Very fast, but low quality</color>
<color=#75715e>     * (similar to {@link RenderingHints#VALUE_INTERPOLATION_NEAREST_NEIGHBOR}</color>
<color=#75715e>     * and {@link Image#SCALE_REPLICATE}).</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>FILTER_POINT</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Box interpolation. Fast, but low quality.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>FILTER_BOX</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Triangle interpolation (also known as "linear" or "bilinear").</color>
<color=#75715e>     * Quite fast, with acceptable quality</color>
<color=#75715e>     * (similar to {@link RenderingHints#VALUE_INTERPOLATION_BILINEAR} and</color>
<color=#75715e>     * {@link Image#SCALE_AREA_AVERAGING}).</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>FILTER_TRIANGLE</color> <color=#f92672>=</color> <color=#ae81ff>3</color><color=#f8f8f2>;</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Hermite interpolation.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>FILTER_HERMITE</color> <color=#f92672>=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Hanning interpolation.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>FILTER_HANNING</color> <color=#f92672>=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Hamming interpolation.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>FILTER_HAMMING</color> <color=#f92672>=</color> <color=#ae81ff>6</color><color=#f8f8f2>;</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Blackman interpolation..</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>FILTER_BLACKMAN</color> <color=#f92672>=</color> <color=#ae81ff>7</color><color=#f8f8f2>;</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Gaussian interpolation.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>FILTER_GAUSSIAN</color> <color=#f92672>=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Quadratic interpolation.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>FILTER_QUADRATIC</color> <color=#f92672>=</color> <color=#ae81ff>9</color><color=#f8f8f2>;</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Cubic interpolation.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>FILTER_CUBIC</color> <color=#f92672>=</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Catrom interpolation.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>FILTER_CATROM</color> <color=#f92672>=</color> <color=#ae81ff>11</color><color=#f8f8f2>;</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Mitchell interpolation. High quality.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>FILTER_MITCHELL</color> <color=#f92672>=</color> <color=#ae81ff>12</color><color=#f8f8f2>;</color> <color=#75715e>// IM default scale with palette or alpha, or scale up</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Lanczos interpolation. High quality.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>FILTER_LANCZOS</color> <color=#f92672>=</color> <color=#ae81ff>13</color><color=#f8f8f2>;</color> <color=#75715e>// IM default</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Blackman-Bessel interpolation. High quality.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>FILTER_BLACKMAN_BESSEL</color> <color=#f92672>=</color> <color=#ae81ff>14</color><color=#f8f8f2>;</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Blackman-Sinc interpolation. High quality.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>FILTER_BLACKMAN_SINC</color> <color=#f92672>=</color> <color=#ae81ff>15</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * RenderingHints.Key specifying resampling interpolation algorithm.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>Key</color> <color=#f8f8f2>KEY_RESAMPLE_INTERPOLATION</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Key</color><color=#f8f8f2>(</color><color=#e6db74>"ResampleInterpolation"</color><color=#f8f8f2>);</color>

    <color=#75715e>/**</color>
<color=#75715e>     * @see #FILTER_POINT</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>VALUE_INTERPOLATION_POINT</color> <color=#f92672>=</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>Value</color><color=#f8f8f2>(</color><color=#f8f8f2>KEY_RESAMPLE_INTERPOLATION</color><color=#f8f8f2>,</color> <color=#e6db74>"Point"</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILTER_POINT</color><color=#f8f8f2>);</color>
    <color=#75715e>/**</color>
<color=#75715e>     * @see #FILTER_BOX</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>VALUE_INTERPOLATION_BOX</color> <color=#f92672>=</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>Value</color><color=#f8f8f2>(</color><color=#f8f8f2>KEY_RESAMPLE_INTERPOLATION</color><color=#f8f8f2>,</color> <color=#e6db74>"Box"</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILTER_BOX</color><color=#f8f8f2>);</color>
    <color=#75715e>/**</color>
<color=#75715e>     * @see #FILTER_TRIANGLE</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>VALUE_INTERPOLATION_TRIANGLE</color> <color=#f92672>=</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>Value</color><color=#f8f8f2>(</color><color=#f8f8f2>KEY_RESAMPLE_INTERPOLATION</color><color=#f8f8f2>,</color> <color=#e6db74>"Triangle"</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILTER_TRIANGLE</color><color=#f8f8f2>);</color>
    <color=#75715e>/**</color>
<color=#75715e>     * @see #FILTER_HERMITE</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>VALUE_INTERPOLATION_HERMITE</color> <color=#f92672>=</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>Value</color><color=#f8f8f2>(</color><color=#f8f8f2>KEY_RESAMPLE_INTERPOLATION</color><color=#f8f8f2>,</color> <color=#e6db74>"Hermite"</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILTER_HERMITE</color><color=#f8f8f2>);</color>
    <color=#75715e>/**</color>
<color=#75715e>     * @see #FILTER_HANNING</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>VALUE_INTERPOLATION_HANNING</color> <color=#f92672>=</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>Value</color><color=#f8f8f2>(</color><color=#f8f8f2>KEY_RESAMPLE_INTERPOLATION</color><color=#f8f8f2>,</color> <color=#e6db74>"Hanning"</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILTER_HANNING</color><color=#f8f8f2>);</color>
    <color=#75715e>/**</color>
<color=#75715e>     * @see #FILTER_HAMMING</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>VALUE_INTERPOLATION_HAMMING</color> <color=#f92672>=</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>Value</color><color=#f8f8f2>(</color><color=#f8f8f2>KEY_RESAMPLE_INTERPOLATION</color><color=#f8f8f2>,</color> <color=#e6db74>"Hamming"</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILTER_HAMMING</color><color=#f8f8f2>);</color>
    <color=#75715e>/**</color>
<color=#75715e>     * @see #FILTER_BLACKMAN</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>VALUE_INTERPOLATION_BLACKMAN</color> <color=#f92672>=</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>Value</color><color=#f8f8f2>(</color><color=#f8f8f2>KEY_RESAMPLE_INTERPOLATION</color><color=#f8f8f2>,</color> <color=#e6db74>"Blackman"</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILTER_BLACKMAN</color><color=#f8f8f2>);</color>
    <color=#75715e>/**</color>
<color=#75715e>     * @see #FILTER_GAUSSIAN</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>VALUE_INTERPOLATION_GAUSSIAN</color> <color=#f92672>=</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>Value</color><color=#f8f8f2>(</color><color=#f8f8f2>KEY_RESAMPLE_INTERPOLATION</color><color=#f8f8f2>,</color> <color=#e6db74>"Gaussian"</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILTER_GAUSSIAN</color><color=#f8f8f2>);</color>
    <color=#75715e>/**</color>
<color=#75715e>     * @see #FILTER_QUADRATIC</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>VALUE_INTERPOLATION_QUADRATIC</color> <color=#f92672>=</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>Value</color><color=#f8f8f2>(</color><color=#f8f8f2>KEY_RESAMPLE_INTERPOLATION</color><color=#f8f8f2>,</color> <color=#e6db74>"Quadratic"</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILTER_QUADRATIC</color><color=#f8f8f2>);</color>
    <color=#75715e>/**</color>
<color=#75715e>     * @see #FILTER_CUBIC</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>VALUE_INTERPOLATION_CUBIC</color> <color=#f92672>=</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>Value</color><color=#f8f8f2>(</color><color=#f8f8f2>KEY_RESAMPLE_INTERPOLATION</color><color=#f8f8f2>,</color> <color=#e6db74>"Cubic"</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILTER_CUBIC</color><color=#f8f8f2>);</color>
    <color=#75715e>/**</color>
<color=#75715e>     * @see #FILTER_CATROM</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>VALUE_INTERPOLATION_CATROM</color> <color=#f92672>=</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>Value</color><color=#f8f8f2>(</color><color=#f8f8f2>KEY_RESAMPLE_INTERPOLATION</color><color=#f8f8f2>,</color> <color=#e6db74>"Catrom"</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILTER_CATROM</color><color=#f8f8f2>);</color>
    <color=#75715e>/**</color>
<color=#75715e>     * @see #FILTER_MITCHELL</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>VALUE_INTERPOLATION_MITCHELL</color> <color=#f92672>=</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>Value</color><color=#f8f8f2>(</color><color=#f8f8f2>KEY_RESAMPLE_INTERPOLATION</color><color=#f8f8f2>,</color> <color=#e6db74>"Mitchell"</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILTER_MITCHELL</color><color=#f8f8f2>);</color>
    <color=#75715e>/**</color>
<color=#75715e>     * @see #FILTER_LANCZOS</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>VALUE_INTERPOLATION_LANCZOS</color> <color=#f92672>=</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>Value</color><color=#f8f8f2>(</color><color=#f8f8f2>KEY_RESAMPLE_INTERPOLATION</color><color=#f8f8f2>,</color> <color=#e6db74>"Lanczos"</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILTER_LANCZOS</color><color=#f8f8f2>);</color>
    <color=#75715e>/**</color>
<color=#75715e>     * @see #FILTER_BLACKMAN_BESSEL</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>VALUE_INTERPOLATION_BLACKMAN_BESSEL</color> <color=#f92672>=</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>Value</color><color=#f8f8f2>(</color><color=#f8f8f2>KEY_RESAMPLE_INTERPOLATION</color><color=#f8f8f2>,</color> <color=#e6db74>"Blackman-Bessel"</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILTER_BLACKMAN_BESSEL</color><color=#f8f8f2>);</color>
    <color=#75715e>/**</color>
<color=#75715e>     * @see #FILTER_BLACKMAN_SINC</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>VALUE_INTERPOLATION_BLACKMAN_SINC</color> <color=#f92672>=</color>
            <color=#66d9ef>new</color> <color=#f8f8f2>Value</color><color=#f8f8f2>(</color><color=#f8f8f2>KEY_RESAMPLE_INTERPOLATION</color><color=#f8f8f2>,</color> <color=#e6db74>"Blackman-Sinc"</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILTER_BLACKMAN_SINC</color><color=#f8f8f2>);</color>

    <color=#75715e>// Member variables</color>
    <color=#75715e>// Package access, to allow access from MagickAccelerator</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color>

    <color=#66d9ef>int</color> <color=#f8f8f2>filterType</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * RendereingHints.Key implementation, works only with Value values.</color>
<color=#75715e>     */</color>
    <color=#75715e>// TODO: Move to abstract class AbstractBufferedImageOp?</color>
    <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>Key</color> <color=#66d9ef>extends</color> <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>Key</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>sIndex</color> <color=#f92672>=</color> <color=#ae81ff>10000</color><color=#f8f8f2>;</color>

        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>

        <color=#66d9ef>public</color> <color=#a6e22e>Key</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pName</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>sIndex</color><color=#f92672>++</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>pName</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isCompatibleValue</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pValue</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Value</color> <color=#f92672>&&</color> <color=#f8f8f2>((</color><color=#f8f8f2>Value</color><color=#f8f8f2>)</color> <color=#f8f8f2>pValue</color><color=#f8f8f2>).</color><color=#a6e22e>isCompatibleKey</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * RenderingHints value implementation, works with Key keys.</color>
<color=#75715e>     */</color>
    <color=#75715e>// TODO: Extract abstract Value class, and move to AbstractBufferedImageOp</color>
    <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>Value</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#66d9ef>private</color> <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>Key</color> <color=#f8f8f2>key</color><color=#f8f8f2>;</color>
        <color=#66d9ef>final</color> <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>
        <color=#66d9ef>final</color> <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>type</color><color=#f8f8f2>;</color>

        <color=#66d9ef>public</color> <color=#a6e22e>Value</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>Key</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>pName</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>pType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>name</color> <color=#f92672>=</color> <color=#f8f8f2>pName</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>validateFilterType</color><color=#f8f8f2>(</color><color=#f8f8f2>pType</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isCompatibleKey</color><color=#f8f8f2>(</color><color=#f8f8f2>Key</color> <color=#f8f8f2>pKey</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>pKey</color> <color=#f92672>==</color> <color=#f8f8f2>key</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getFilterType</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>type</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@code ResampleOp} that will resample input images to the</color>
<color=#75715e>     * given width and height, using the default interpolation filter.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param width  width of the re-sampled image</color>
<color=#75715e>     * @param height height of the re-sampled image</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>ResampleOp</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>FILTER_UNDEFINED</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@code ResampleOp} that will resample input images to the</color>
<color=#75715e>     * given width and height, using the interpolation filter specified by</color>
<color=#75715e>     * the given hints.</color>
<color=#75715e>     * If using {@code RenderingHints}, the hints are mapped as follows:</color>
<color=#75715e>     * <ul></color>
<color=#75715e>     * <li>{@code KEY_RESAMPLE_INTERPOLATION} takes precedence over any</color>
<color=#75715e>     * standard {@code java.awt} hints, and dictates interpolation</color>
<color=#75715e>     * directly, see</color>
<color=#75715e>     * <a href="#field_summary">{@code RenderingHints} constants</a>.</li></color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * <li>{@code KEY_INTERPOLATION} takes precedence over other hints.</color>
<color=#75715e>     * <ul></color>
<color=#75715e>     * <li>{@link RenderingHints#VALUE_INTERPOLATION_NEAREST_NEIGHBOR} specifies</color>
<color=#75715e>     * {@code FILTER_POINT}</li></color>
<color=#75715e>     * <li>{@link RenderingHints#VALUE_INTERPOLATION_BILINEAR} specifies</color>
<color=#75715e>     * {@code FILTER_TRIANGLE}</li></color>
<color=#75715e>     * <li>{@link RenderingHints#VALUE_INTERPOLATION_BICUBIC} specifies</color>
<color=#75715e>     * {@code FILTER_QUADRATIC}</li></color>
<color=#75715e>     * </ul></color>
<color=#75715e>     * </li></color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * <li>{@code KEY_RENDERING} or {@code KEY_COLOR_RENDERING}</color>
<color=#75715e>     * <ul></color>
<color=#75715e>     * <li>{@link RenderingHints#VALUE_RENDER_SPEED} specifies</color>
<color=#75715e>     * {@code FILTER_POINT}</li></color>
<color=#75715e>     * <li>{@link RenderingHints#VALUE_RENDER_QUALITY} specifies</color>
<color=#75715e>     * {@code FILTER_MITCHELL}</li></color>
<color=#75715e>     * </ul></color>
<color=#75715e>     * </li></color>
<color=#75715e>     * </ul></color>
<color=#75715e>     * Other hints have no effect on this filter.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param width  width of the re-sampled image</color>
<color=#75715e>     * @param height height of the re-sampled image</color>
<color=#75715e>     * @param hints  rendering hints, affecting interpolation algorithm</color>
<color=#75715e>     * @see #KEY_RESAMPLE_INTERPOLATION</color>
<color=#75715e>     * @see RenderingHints#KEY_INTERPOLATION</color>
<color=#75715e>     * @see RenderingHints#KEY_RENDERING</color>
<color=#75715e>     * @see RenderingHints#KEY_COLOR_RENDERING</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>ResampleOp</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>RenderingHints</color> <color=#f8f8f2>hints</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>getFilterType</color><color=#f8f8f2>(</color><color=#f8f8f2>hints</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@code ResampleOp} that will resample input images to the</color>
<color=#75715e>     * given width and height, using the given interpolation filter.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param width      width of the re-sampled image</color>
<color=#75715e>     * @param height     height of the re-sampled image</color>
<color=#75715e>     * @param filterType interpolation filter algorithm</color>
<color=#75715e>     * @see <a href="#field_summary">filter type constants</a></color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>ResampleOp</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>filterType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>width</color> <color=#f92672><=</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>height</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// NOTE: w/h == 0 makes the Magick DLL crash and the JVM dies.. :-P</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"width and height must be positive"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>width</color> <color=#f92672>=</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>height</color> <color=#f92672>=</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color>

        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>filterType</color> <color=#f92672>=</color> <color=#f8f8f2>validateFilterType</color><color=#f8f8f2>(</color><color=#f8f8f2>filterType</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>validateFilterType</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pFilterType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>pFilterType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_UNDEFINED</color><color=#f8f8f2>:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_POINT</color><color=#f8f8f2>:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_BOX</color><color=#f8f8f2>:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_TRIANGLE</color><color=#f8f8f2>:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_HERMITE</color><color=#f8f8f2>:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_HANNING</color><color=#f8f8f2>:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_HAMMING</color><color=#f8f8f2>:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_BLACKMAN</color><color=#f8f8f2>:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_GAUSSIAN</color><color=#f8f8f2>:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_QUADRATIC</color><color=#f8f8f2>:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_CUBIC</color><color=#f8f8f2>:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_CATROM</color><color=#f8f8f2>:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_MITCHELL</color><color=#f8f8f2>:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_LANCZOS</color><color=#f8f8f2>:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_BLACKMAN_BESSEL</color><color=#f8f8f2>:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_BLACKMAN_SINC</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>pFilterType</color><color=#f8f8f2>;</color>
            <color=#66d9ef>default</color><color=#f8f8f2>:</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Unknown filter type: "</color> <color=#f92672>+</color> <color=#f8f8f2>pFilterType</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the filter type specified by the given hints.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pHints rendering hints</color>
<color=#75715e>     * @return a filter type constant</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>getFilterType</color><color=#f8f8f2>(</color><color=#f8f8f2>RenderingHints</color> <color=#f8f8f2>pHints</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pHints</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>FILTER_UNDEFINED</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pHints</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>KEY_RESAMPLE_INTERPOLATION</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Object</color> <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>pHints</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>KEY_RESAMPLE_INTERPOLATION</color><color=#f8f8f2>);</color>
            <color=#75715e>// NOTE: Workaround for a bug in RenderingHints constructor (Bug id# 5084832)</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>KEY_RESAMPLE_INTERPOLATION</color><color=#f8f8f2>.</color><color=#a6e22e>isCompatibleValue</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#f8f8f2>value</color> <color=#f92672>+</color> <color=#e6db74>" incompatible with key "</color> <color=#f92672>+</color> <color=#f8f8f2>KEY_RESAMPLE_INTERPOLATION</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>value</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>((</color><color=#f8f8f2>Value</color><color=#f8f8f2>)</color> <color=#f8f8f2>value</color><color=#f8f8f2>).</color><color=#a6e22e>getFilterType</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>FILTER_UNDEFINED</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>VALUE_INTERPOLATION_NEAREST_NEIGHBOR</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>pHints</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>KEY_INTERPOLATION</color><color=#f8f8f2>))</color>
                <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>pHints</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>KEY_INTERPOLATION</color><color=#f8f8f2>)</color>
                <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>VALUE_RENDER_SPEED</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>pHints</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>KEY_RENDERING</color><color=#f8f8f2>))</color>
                <color=#f92672>||</color> <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>VALUE_COLOR_RENDER_SPEED</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>pHints</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>KEY_COLOR_RENDERING</color><color=#f8f8f2>)))))</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Nearest neighbour, or prioritize speed</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>FILTER_POINT</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>VALUE_INTERPOLATION_BILINEAR</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>pHints</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>KEY_INTERPOLATION</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Triangle equals bi-linear interpolation</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>FILTER_TRIANGLE</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>VALUE_INTERPOLATION_BICUBIC</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>pHints</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>KEY_INTERPOLATION</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>FILTER_QUADRATIC</color><color=#f8f8f2>;</color><color=#75715e>// No idea if this is correct..?</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>VALUE_RENDER_QUALITY</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>pHints</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>KEY_RENDERING</color><color=#f8f8f2>))</color>
                <color=#f92672>||</color> <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>VALUE_COLOR_RENDER_QUALITY</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>pHints</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>KEY_COLOR_RENDERING</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Prioritize quality</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>FILTER_MITCHELL</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// NOTE: Other hints are ignored</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>FILTER_UNDEFINED</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Re-samples (scales) the image to the size, and using the algorithm</color>
<color=#75715e>     * specified in the constructor.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param input  The {@code BufferedImage} to be filtered</color>
<color=#75715e>     * @param output The {@code BufferedImage} in which to store the resampled</color>
<color=#75715e>     *               image</color>
<color=#75715e>     * @return The re-sampled {@code BufferedImage}.</color>
<color=#75715e>     * @throws NullPointerException     if {@code input} is {@code null}</color>
<color=#75715e>     * @throws IllegalArgumentException if {@code input == output}.</color>
<color=#75715e>     * @see #ResampleOp(int, int, int)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>output</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>input</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"Input == null"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>input</color> <color=#f92672>==</color> <color=#f8f8f2>output</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Output image cannot be the same as the input image"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>InterpolationFilter</color> <color=#f8f8f2>filter</color><color=#f8f8f2>;</color>

        <color=#75715e>// Special case for POINT, TRIANGLE and QUADRATIC filter, as standard</color>
        <color=#75715e>// Java implementation is very fast (possibly H/W accelerated)</color>
        <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>filterType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_POINT</color><color=#f8f8f2>:</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_CUSTOM</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>fastResample</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>output</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>AffineTransformOp</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_NEAREST_NEIGHBOR</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
                <color=#75715e>// Else fall through</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_TRIANGLE</color><color=#f8f8f2>:</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_CUSTOM</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>fastResample</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>output</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>AffineTransformOp</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BILINEAR</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
                <color=#75715e>// Else fall through</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_QUADRATIC</color><color=#f8f8f2>:</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_CUSTOM</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>fastResample</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>output</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>AffineTransformOp</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BICUBIC</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
                <color=#75715e>// Else fall through</color>
            <color=#66d9ef>default</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>filter</color> <color=#f92672>=</color> <color=#f8f8f2>createFilter</color><color=#f8f8f2>(</color><color=#f8f8f2>filterType</color><color=#f8f8f2>);</color>
                <color=#75715e>// NOTE: Workaround for filter throwing exceptions when input or output is less than support...</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>())</color> <color=#f92672><=</color> <color=#f8f8f2>filter</color><color=#f8f8f2>.</color><color=#a6e22e>support</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f92672><=</color> <color=#f8f8f2>filter</color><color=#f8f8f2>.</color><color=#a6e22e>support</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>fastResample</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>output</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>AffineTransformOp</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BILINEAR</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
                <color=#75715e>// Fall through</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Try to use native ImageMagick code</color>
        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>MagickAccelerator</color><color=#f8f8f2>.</color><color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>output</color><color=#f8f8f2>);</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>result</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Otherwise, continue in pure Java mode</color>

        <color=#75715e>// TODO: What if output != null and wrong size? Create new? Render on only a part? Document?</color>

        <color=#75715e>// If filter type != POINT or BOX and input has IndexColorModel, convert</color>
        <color=#75715e>// to true color, with alpha reflecting that of the original color model.</color>
        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>temp</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>cm</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>filterType</color> <color=#f92672>!=</color> <color=#f8f8f2>FILTER_POINT</color> <color=#f92672>&&</color> <color=#f8f8f2>filterType</color> <color=#f92672>!=</color> <color=#f8f8f2>FILTER_BOX</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>cm</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>getColorModel</color><color=#f8f8f2>())</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>IndexColorModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// TODO: OPTIMIZE: If color model has only b/w or gray, we could skip color info</color>
            <color=#f8f8f2>temp</color> <color=#f92672>=</color> <color=#f8f8f2>ImageUtil</color><color=#f8f8f2>.</color><color=#a6e22e>toBuffered</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#f8f8f2>cm</color><color=#f8f8f2>.</color><color=#a6e22e>hasAlpha</color><color=#f8f8f2>()</color> <color=#f92672>?</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_4BYTE_ABGR</color> <color=#f8f8f2>:</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_3BYTE_BGR</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>temp</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Create or convert output to a suitable image</color>
        <color=#75715e>// TODO: OPTIMIZE: Don't really need to convert all types to same as input</color>
        <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>output</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>temp</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_CUSTOM</color> <color=#f92672>?</color> <color=#75715e>/*output*/</color> <color=#f8f8f2>ImageUtil</color><color=#f8f8f2>.</color><color=#a6e22e>toBuffered</color><color=#f8f8f2>(</color><color=#f8f8f2>output</color><color=#f8f8f2>,</color> <color=#f8f8f2>temp</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>())</color> <color=#f8f8f2>:</color> <color=#f8f8f2>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#f8f8f2>temp</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>resample</color><color=#f8f8f2>(</color><color=#f8f8f2>temp</color><color=#f8f8f2>,</color> <color=#f8f8f2>result</color><color=#f8f8f2>,</color> <color=#f8f8f2>filter</color><color=#f8f8f2>);</color>

        <color=#75715e>// If output != null and needed to be converted, draw it back</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>output</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>output</color> <color=#f92672>!=</color> <color=#f8f8f2>result</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>//output.setData(output.getRaster());</color>
            <color=#f8f8f2>ImageUtil</color><color=#f8f8f2>.</color><color=#a6e22e>drawOnto</color><color=#f8f8f2>(</color><color=#f8f8f2>output</color><color=#f8f8f2>,</color> <color=#f8f8f2>result</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#f8f8f2>output</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>    private static BufferedImage pointResample(final BufferedImage pInput, final BufferedImage pOutput, final int pWidth, final int pHeight) {</color>
<color=#75715e>        double xScale = pWidth / (double) pInput.getWidth();</color>
<color=#75715e>        double yScale = pHeight / (double) pInput.getHeight();</color>

<color=#75715e>        // NOTE: This is extremely fast, native, possibly H/W accelerated code</color>
<color=#75715e>        AffineTransform transform = AffineTransform.getScaleInstance(xScale, yScale);</color>
<color=#75715e>        AffineTransformOp scale = new AffineTransformOp(transform, AffineTransformOp.TYPE_NEAREST_NEIGHBOR);</color>
<color=#75715e>        return scale.filter(pInput, pOutput);</color>
<color=#75715e>    }</color>
<color=#75715e>    */</color>

    <color=#75715e>/*</color>
<color=#75715e>    // TODO: This idea from Chet and Romain is actually not too bad..</color>
<color=#75715e>    // It reuses the image/raster/graphics...</color>
<color=#75715e>    // However, they don't end with a halve operation..</color>
<color=#75715e>    private static BufferedImage getFasterScaledInstance(BufferedImage img,</color>
<color=#75715e>            int targetWidth, int targetHeight, Object hint,</color>
<color=#75715e>            boolean progressiveBilinear) {</color>
<color=#75715e>        int type = (img.getTransparency() == Transparency.OPAQUE) ?</color>
<color=#75715e>            BufferedImage.TYPE_INT_RGB : BufferedImage.TYPE_INT_ARGB;</color>
<color=#75715e>        BufferedImage ret = img;</color>
<color=#75715e>        BufferedImage scratchImage = null;</color>
<color=#75715e>        Graphics2D g2 = null;</color>
<color=#75715e>        int w, h;</color>
<color=#75715e>        int prevW = ret.getWidth();</color>
<color=#75715e>        int prevH = ret.getHeight();</color>
<color=#75715e>        boolean isTranslucent = img.getTransparency() !=  Transparency.OPAQUE;</color>

<color=#75715e>        if (progressiveBilinear) {</color>
<color=#75715e>            // Use multi-step technique: start with original size, then</color>
<color=#75715e>            // scale down in multiple passes with drawImage()</color>
<color=#75715e>            // until the target size is reached</color>
<color=#75715e>            w = img.getWidth();</color>
<color=#75715e>            h = img.getHeight();</color>
<color=#75715e>        } else {</color>
<color=#75715e>            // Use one-step technique: scale directly from original</color>
<color=#75715e>            // size to target size with a single drawImage() call</color>
<color=#75715e>            w = targetWidth;</color>
<color=#75715e>            h = targetHeight;</color>
<color=#75715e>        }</color>

<color=#75715e>        do {</color>
<color=#75715e>            if (progressiveBilinear && w > targetWidth) {</color>
<color=#75715e>                w /= 2;</color>
<color=#75715e>                if (w < targetWidth) {</color>
<color=#75715e>                    w = targetWidth;</color>
<color=#75715e>                }</color>
<color=#75715e>            }</color>

<color=#75715e>            if (progressiveBilinear && h > targetHeight) {</color>
<color=#75715e>                h /= 2;</color>
<color=#75715e>                if (h < targetHeight) {</color>
<color=#75715e>                    h = targetHeight;</color>
<color=#75715e>                }</color>
<color=#75715e>            }</color>

<color=#75715e>            if (scratchImage == null || isTranslucent) {</color>
<color=#75715e>                // Use a single scratch buffer for all iterations</color>
<color=#75715e>                // and then copy to the final, correctly-sized image</color>
<color=#75715e>                // before returning</color>
<color=#75715e>                scratchImage = new BufferedImage(w, h, type);</color>
<color=#75715e>                g2 = scratchImage.createGraphics();</color>
<color=#75715e>            }</color>
<color=#75715e>            g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, hint);</color>
<color=#75715e>            g2.drawImage(ret, 0, 0, w, h, 0, 0, prevW, prevH, null);</color>
<color=#75715e>            prevW = w;</color>
<color=#75715e>            prevH = h;</color>

<color=#75715e>            ret = scratchImage;</color>
<color=#75715e>        } while (w != targetWidth || h != targetHeight);</color>

<color=#75715e>        if (g2 != null) {</color>
<color=#75715e>            g2.dispose();</color>
<color=#75715e>        }</color>

<color=#75715e>        // If we used a scratch buffer that is larger than our target size,</color>
<color=#75715e>        // create an image of the right size and copy the results into it</color>
<color=#75715e>        if (targetWidth != ret.getWidth() || targetHeight != ret.getHeight()) {</color>
<color=#75715e>            scratchImage = new BufferedImage(targetWidth, targetHeight, type);</color>
<color=#75715e>            g2 = scratchImage.createGraphics();</color>
<color=#75715e>            g2.drawImage(ret, 0, 0, null);</color>
<color=#75715e>            g2.dispose();</color>
<color=#75715e>            ret = scratchImage;</color>
<color=#75715e>        }</color>

<color=#75715e>        return ret;</color>
<color=#75715e>    }</color>
<color=#75715e>    */</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>fastResample</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>input</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>output</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>temp</color> <color=#f92672>=</color> <color=#f8f8f2>input</color><color=#f8f8f2>;</color>

        <color=#66d9ef>double</color> <color=#f8f8f2>xScale</color><color=#f8f8f2>;</color>
        <color=#66d9ef>double</color> <color=#f8f8f2>yScale</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>AffineTransform</color> <color=#f8f8f2>transform</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>AffineTransformOp</color> <color=#f8f8f2>scale</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>></color> <color=#f8f8f2>AffineTransformOp</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_NEAREST_NEIGHBOR</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Initially scale so all remaining operations will halve the image</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>width</color> <color=#f92672><</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>()</color> <color=#f92672>||</color> <color=#f8f8f2>height</color> <color=#f92672><</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>w</color> <color=#f92672>=</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>h</color> <color=#f92672>=</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color>
                <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>w</color> <color=#f92672><</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>()</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>w</color> <color=#f92672>*=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>h</color> <color=#f92672><</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>()</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>h</color> <color=#f92672>*=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>xScale</color> <color=#f92672>=</color> <color=#f8f8f2>w</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>yScale</color> <color=#f92672>=</color> <color=#f8f8f2>h</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>input</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

                <color=#75715e>//System.out.println("First scale by x=" + xScale + ", y=" + yScale);</color>

                <color=#f8f8f2>transform</color> <color=#f92672>=</color> <color=#f8f8f2>AffineTransform</color><color=#f8f8f2>.</color><color=#a6e22e>getScaleInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>xScale</color><color=#f8f8f2>,</color> <color=#f8f8f2>yScale</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>scale</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AffineTransformOp</color><color=#f8f8f2>(</color><color=#f8f8f2>transform</color><color=#f8f8f2>,</color> <color=#f8f8f2>AffineTransformOp</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BILINEAR</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>temp</color> <color=#f92672>=</color> <color=#f8f8f2>scale</color><color=#f8f8f2>.</color><color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>temp</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>scale</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color> <color=#75715e>// NOTE: This resets!</color>

        <color=#f8f8f2>xScale</color> <color=#f92672>=</color> <color=#f8f8f2>width</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>temp</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>yScale</color> <color=#f92672>=</color> <color=#f8f8f2>height</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>temp</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>type</color> <color=#f92672>></color> <color=#f8f8f2>AffineTransformOp</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_NEAREST_NEIGHBOR</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// TODO: Test skipping first scale (above), and instead scale once</color>
            <color=#75715e>// more here, and a little less than .5 each time...</color>
            <color=#75715e>// That would probably make the scaling smoother...</color>
            <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>xScale</color> <color=#f92672><</color> <color=#ae81ff>0.5</color> <color=#f92672>||</color> <color=#f8f8f2>yScale</color> <color=#f92672><</color> <color=#ae81ff>0.5</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>xScale</color> <color=#f92672>>=</color> <color=#ae81ff>0.5</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>//System.out.println("Halving by y=" + (yScale * 2.0));</color>
                    <color=#f8f8f2>transform</color> <color=#f92672>=</color> <color=#f8f8f2>AffineTransform</color><color=#f8f8f2>.</color><color=#a6e22e>getScaleInstance</color><color=#f8f8f2>(</color><color=#ae81ff>1.0</color><color=#f8f8f2>,</color> <color=#ae81ff>0.5</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>scale</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AffineTransformOp</color><color=#f8f8f2>(</color><color=#f8f8f2>transform</color><color=#f8f8f2>,</color> <color=#f8f8f2>AffineTransformOp</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BILINEAR</color><color=#f8f8f2>);</color>

                    <color=#f8f8f2>yScale</color> <color=#f92672>*=</color> <color=#ae81ff>2.0</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>yScale</color> <color=#f92672>>=</color> <color=#ae81ff>0.5</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>//System.out.println("Halving by x=" + (xScale * 2.0));</color>
                    <color=#f8f8f2>transform</color> <color=#f92672>=</color> <color=#f8f8f2>AffineTransform</color><color=#f8f8f2>.</color><color=#a6e22e>getScaleInstance</color><color=#f8f8f2>(</color><color=#ae81ff>0.5</color><color=#f8f8f2>,</color> <color=#ae81ff>1.0</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>scale</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AffineTransformOp</color><color=#f8f8f2>(</color><color=#f8f8f2>transform</color><color=#f8f8f2>,</color> <color=#f8f8f2>AffineTransformOp</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BILINEAR</color><color=#f8f8f2>);</color>

                    <color=#f8f8f2>xScale</color> <color=#f92672>*=</color> <color=#ae81ff>2.0</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#75715e>//System.out.println("Halving by x=" + (xScale * 2.0)  + ", y=" + (yScale * 2.0));</color>
                    <color=#f8f8f2>xScale</color> <color=#f92672>*=</color> <color=#ae81ff>2.0</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>yScale</color> <color=#f92672>*=</color> <color=#ae81ff>2.0</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>scale</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>transform</color> <color=#f92672>=</color> <color=#f8f8f2>AffineTransform</color><color=#f8f8f2>.</color><color=#a6e22e>getScaleInstance</color><color=#f8f8f2>(</color><color=#ae81ff>0.5</color><color=#f8f8f2>,</color> <color=#ae81ff>0.5</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>scale</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AffineTransformOp</color><color=#f8f8f2>(</color><color=#f8f8f2>transform</color><color=#f8f8f2>,</color> <color=#f8f8f2>AffineTransformOp</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BILINEAR</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>temp</color> <color=#f92672>=</color> <color=#f8f8f2>scale</color><color=#f8f8f2>.</color><color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>temp</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>//System.out.println("Rest to scale by x=" + xScale + ", y=" + yScale);</color>

        <color=#f8f8f2>transform</color> <color=#f92672>=</color> <color=#f8f8f2>AffineTransform</color><color=#f8f8f2>.</color><color=#a6e22e>getScaleInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>xScale</color><color=#f8f8f2>,</color> <color=#f8f8f2>yScale</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>scale</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>AffineTransformOp</color><color=#f8f8f2>(</color><color=#f8f8f2>transform</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>scale</color><color=#f8f8f2>.</color><color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>temp</color><color=#f8f8f2>,</color> <color=#f8f8f2>output</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the current filter type constant.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the current filter type constant.</color>
<color=#75715e>     * @see <a href="#field_summary">filter type constants</a></color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getFilterType</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>filterType</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>InterpolationFilter</color> <color=#a6e22e>createFilter</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pFilterType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// TODO: Select correct filter based on scale up or down, if undefined!</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pFilterType</color> <color=#f92672>==</color> <color=#f8f8f2>FILTER_UNDEFINED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pFilterType</color> <color=#f92672>=</color> <color=#f8f8f2>FILTER_LANCZOS</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>pFilterType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_POINT</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>PointFilter</color><color=#f8f8f2>();</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_BOX</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BoxFilter</color><color=#f8f8f2>();</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_TRIANGLE</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>TriangleFilter</color><color=#f8f8f2>();</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_HERMITE</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>HermiteFilter</color><color=#f8f8f2>();</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_HANNING</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>HanningFilter</color><color=#f8f8f2>();</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_HAMMING</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>HammingFilter</color><color=#f8f8f2>();</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_BLACKMAN</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BlacmanFilter</color><color=#f8f8f2>();</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_GAUSSIAN</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>GaussianFilter</color><color=#f8f8f2>();</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_QUADRATIC</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>QuadraticFilter</color><color=#f8f8f2>();</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_CUBIC</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>CubicFilter</color><color=#f8f8f2>();</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_CATROM</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>CatromFilter</color><color=#f8f8f2>();</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_MITCHELL</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>MitchellFilter</color><color=#f8f8f2>();</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_LANCZOS</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>LanczosFilter</color><color=#f8f8f2>();</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_BLACKMAN_BESSEL</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BlackmanBesselFilter</color><color=#f8f8f2>();</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_BLACKMAN_SINC</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BlackmanSincFilter</color><color=#f8f8f2>();</color>
            <color=#66d9ef>default</color><color=#f8f8f2>:</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Unknown filter type: "</color> <color=#f92672>+</color> <color=#f8f8f2>pFilterType</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>pModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pInput</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"pInput == null"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>cm</color> <color=#f92672>=</color> <color=#f8f8f2>pModel</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>pModel</color> <color=#f8f8f2>:</color> <color=#f8f8f2>pInput</color><color=#f8f8f2>.</color><color=#a6e22e>getColorModel</color><color=#f8f8f2>();</color>

        <color=#75715e>// TODO: Might not work with all colormodels..</color>
        <color=#75715e>// If indexcolormodel, we probably don't want to use that...</color>
        <color=#75715e>// NOTE: Either BOTH or NONE of the images must have ALPHA</color>

        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>cm</color><color=#f8f8f2>,</color> <color=#f8f8f2>ImageUtil</color><color=#f8f8f2>.</color><color=#a6e22e>createCompatibleWritableRaster</color><color=#f8f8f2>(</color><color=#f8f8f2>pInput</color><color=#f8f8f2>,</color> <color=#f8f8f2>cm</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>),</color>
                <color=#f8f8f2>cm</color><color=#f8f8f2>.</color><color=#a6e22e>isAlphaPremultiplied</color><color=#f8f8f2>(),</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>RenderingHints</color> <color=#a6e22e>getRenderingHints</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Object</color> <color=#f8f8f2>value</color><color=#f8f8f2>;</color>
        <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>filterType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_UNDEFINED</color><color=#f8f8f2>:</color>
                <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_POINT</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>VALUE_INTERPOLATION_POINT</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_BOX</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>VALUE_INTERPOLATION_BOX</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_TRIANGLE</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>VALUE_INTERPOLATION_TRIANGLE</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_HERMITE</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>VALUE_INTERPOLATION_HERMITE</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_HANNING</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>VALUE_INTERPOLATION_HANNING</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_HAMMING</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>VALUE_INTERPOLATION_HAMMING</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_BLACKMAN</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>VALUE_INTERPOLATION_BLACKMAN</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_GAUSSIAN</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>VALUE_INTERPOLATION_GAUSSIAN</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_QUADRATIC</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>VALUE_INTERPOLATION_QUADRATIC</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_CUBIC</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>VALUE_INTERPOLATION_CUBIC</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_CATROM</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>VALUE_INTERPOLATION_CATROM</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_MITCHELL</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>VALUE_INTERPOLATION_MITCHELL</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_LANCZOS</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>VALUE_INTERPOLATION_LANCZOS</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_BLACKMAN_BESSEL</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>VALUE_INTERPOLATION_BLACKMAN_BESSEL</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>FILTER_BLACKMAN_SINC</color><color=#f8f8f2>:</color>
                <color=#f8f8f2>value</color> <color=#f92672>=</color> <color=#f8f8f2>VALUE_INTERPOLATION_BLACKMAN_SINC</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>default</color><color=#f8f8f2>:</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Unknown filter type: "</color> <color=#f92672>+</color> <color=#f8f8f2>filterType</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>(</color><color=#f8f8f2>KEY_RESAMPLE_INTERPOLATION</color><color=#f8f8f2>,</color> <color=#f8f8f2>value</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Rectangle2D</color> <color=#a6e22e>getBounds2D</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>src</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rectangle</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Point2D</color> <color=#a6e22e>getPoint2D</color><color=#f8f8f2>(</color><color=#f8f8f2>Point2D</color> <color=#f8f8f2>srcPt</color><color=#f8f8f2>,</color> <color=#f8f8f2>Point2D</color> <color=#f8f8f2>dstPt</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// TODO: This is wrong...</color>
        <color=#75715e>// How can I possible know how much one point is scaled, without first knowing the ration?!</color>
        <color=#75715e>// TODO: Maybe set all points outside of bounds, inside?</color>
        <color=#75715e>// TODO: Assume input image of Integer.MAX_VAL x Integer.MAX_VAL?! ;-)</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dstPt</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>srcPt</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>Point2D</color><color=#f8f8f2>.</color><color=#a6e22e>Double</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>dstPt</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Point2D</color><color=#f8f8f2>.</color><color=#a6e22e>Double</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>dstPt</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Point2D</color><color=#f8f8f2>.</color><color=#a6e22e>Float</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>dstPt</color><color=#f8f8f2>.</color><color=#a6e22e>setLocation</color><color=#f8f8f2>(</color><color=#f8f8f2>srcPt</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>dstPt</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/* -- Java port of filter_rcg.c below... -- */</color>

    <color=#75715e>/*</color>
<color=#75715e>     *	filter function definitions</color>
<color=#75715e>     */</color>

    <color=#66d9ef>interface</color> <color=#a6e22e>InterpolationFilter</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>double</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>t</color><color=#f8f8f2>);</color>

        <color=#66d9ef>double</color> <color=#a6e22e>support</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>HermiteFilter</color> <color=#66d9ef>implements</color> <color=#f8f8f2>InterpolationFilter</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>/* f(t) = 2|t|^3 - 3|t|^2 + 1, -1 <= t <= 1 */</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672><</color> <color=#ae81ff>0.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>t</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672><</color> <color=#ae81ff>1.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#ae81ff>2.0</color> <color=#f92672>*</color> <color=#f8f8f2>t</color> <color=#f92672>-</color> <color=#ae81ff>3.0</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>t</color> <color=#f92672>+</color> <color=#ae81ff>1.0</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>return</color> <color=#ae81ff>0.0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>support</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#ae81ff>1.0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>PointFilter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>BoxFilter</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>public</color> <color=#a6e22e>PointFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#ae81ff>0.0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>BoxFilter</color> <color=#66d9ef>implements</color> <color=#f8f8f2>InterpolationFilter</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>mSupport</color><color=#f8f8f2>;</color>

        <color=#66d9ef>public</color> <color=#a6e22e>BoxFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>mSupport</color> <color=#f92672>=</color> <color=#ae81ff>0.5</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>protected</color> <color=#a6e22e>BoxFilter</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>pSupport</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>mSupport</color> <color=#f92672>=</color> <color=#f8f8f2>pSupport</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>//if ((t > -0.5) && (t <= 0.5)) {</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>t</color> <color=#f92672>>=</color> <color=#f92672>-</color><color=#ae81ff>0.5</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672><</color> <color=#ae81ff>0.5</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color><color=#75715e>// ImageMagick resample.c</color>
                <color=#66d9ef>return</color> <color=#ae81ff>1.0</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>return</color> <color=#ae81ff>0.0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>support</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>mSupport</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>TriangleFilter</color> <color=#66d9ef>implements</color> <color=#f8f8f2>InterpolationFilter</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672><</color> <color=#ae81ff>0.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>t</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672><</color> <color=#ae81ff>1.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#ae81ff>1.0</color> <color=#f92672>-</color> <color=#f8f8f2>t</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>return</color> <color=#ae81ff>0.0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>support</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#ae81ff>1.0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>QuadraticFilter</color> <color=#66d9ef>implements</color> <color=#f8f8f2>InterpolationFilter</color> <color=#f8f8f2>{</color>
        <color=#75715e>// AKA Bell</color>
        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color><color=#75715e>/* box (*) box (*) box */</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>t</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672><</color> <color=#ae81ff>.5</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#ae81ff>.75</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>t</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672><</color> <color=#ae81ff>1.5</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672>-</color> <color=#ae81ff>1.5</color><color=#f8f8f2>);</color>
                <color=#66d9ef>return</color> <color=#ae81ff>.5</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>t</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>return</color> <color=#ae81ff>0.0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>support</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#ae81ff>1.5</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>CubicFilter</color> <color=#66d9ef>implements</color> <color=#f8f8f2>InterpolationFilter</color> <color=#f8f8f2>{</color>
        <color=#75715e>// AKA B-Spline</color>
        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color><color=#75715e>/* box (*) box (*) box (*) box */</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>tt</color><color=#f8f8f2>;</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>t</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672><</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>tt</color> <color=#f92672>=</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>t</color><color=#f8f8f2>;</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#ae81ff>.5</color> <color=#f92672>*</color> <color=#f8f8f2>tt</color> <color=#f92672>*</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>tt</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#ae81ff>2.0</color> <color=#f92672>/</color> <color=#ae81ff>3.0</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672><</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#ae81ff>2</color> <color=#f92672>-</color> <color=#f8f8f2>t</color><color=#f8f8f2>;</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#ae81ff>1.0</color> <color=#f92672>/</color> <color=#ae81ff>6.0</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>t</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>return</color> <color=#ae81ff>0.0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>support</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#ae81ff>2.0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>double</color> <color=#a6e22e>sinc</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>x</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>x</color> <color=#f92672>*=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>PI</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>!=</color> <color=#ae81ff>0.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sin</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#ae81ff>1.0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>LanczosFilter</color> <color=#66d9ef>implements</color> <color=#f8f8f2>InterpolationFilter</color> <color=#f8f8f2>{</color>
        <color=#75715e>// AKA Lanczos3</color>
        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>t</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672><</color> <color=#ae81ff>3.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>sinc</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>sinc</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672>/</color> <color=#ae81ff>3.0</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>return</color> <color=#ae81ff>0.0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>support</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#ae81ff>3.0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>double</color> <color=#f8f8f2>B</color> <color=#f92672>=</color> <color=#ae81ff>1.0</color> <color=#f92672>/</color> <color=#ae81ff>3.0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>double</color> <color=#f8f8f2>C</color> <color=#f92672>=</color> <color=#ae81ff>1.0</color> <color=#f92672>/</color> <color=#ae81ff>3.0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>double</color> <color=#f8f8f2>P0</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#ae81ff>6.0</color> <color=#f92672>-</color> <color=#ae81ff>2.0</color> <color=#f92672>*</color> <color=#f8f8f2>B</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>6.0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>double</color> <color=#f8f8f2>P2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f92672>-</color><color=#ae81ff>18.0</color> <color=#f92672>+</color> <color=#ae81ff>12.0</color> <color=#f92672>*</color> <color=#f8f8f2>B</color> <color=#f92672>+</color> <color=#ae81ff>6.0</color> <color=#f92672>*</color> <color=#f8f8f2>C</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>6.0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>double</color> <color=#f8f8f2>P3</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#ae81ff>12.0</color> <color=#f92672>-</color> <color=#ae81ff>9.0</color> <color=#f92672>*</color> <color=#f8f8f2>B</color> <color=#f92672>-</color> <color=#ae81ff>6.0</color> <color=#f92672>*</color> <color=#f8f8f2>C</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>6.0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>double</color> <color=#f8f8f2>Q0</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#ae81ff>8.0</color> <color=#f92672>*</color> <color=#f8f8f2>B</color> <color=#f92672>+</color> <color=#ae81ff>24.0</color> <color=#f92672>*</color> <color=#f8f8f2>C</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>6.0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>double</color> <color=#f8f8f2>Q1</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f92672>-</color><color=#ae81ff>12.0</color> <color=#f92672>*</color> <color=#f8f8f2>B</color> <color=#f92672>-</color> <color=#ae81ff>48.0</color> <color=#f92672>*</color> <color=#f8f8f2>C</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>6.0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>double</color> <color=#f8f8f2>Q2</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#ae81ff>6.0</color> <color=#f92672>*</color> <color=#f8f8f2>B</color> <color=#f92672>+</color> <color=#ae81ff>30.0</color> <color=#f92672>*</color> <color=#f8f8f2>C</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>6.0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>double</color> <color=#f8f8f2>Q3</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f92672>-</color><color=#ae81ff>1.0</color> <color=#f92672>*</color> <color=#f8f8f2>B</color> <color=#f92672>-</color> <color=#ae81ff>6.0</color> <color=#f92672>*</color> <color=#f8f8f2>C</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>6.0</color><color=#f8f8f2>;</color>

    <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>MitchellFilter</color> <color=#66d9ef>implements</color> <color=#f8f8f2>InterpolationFilter</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672><</color> <color=#f92672>-</color><color=#ae81ff>2.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#ae81ff>0.0</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672><</color> <color=#f92672>-</color><color=#ae81ff>1.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>Q0</color> <color=#f92672>-</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>Q1</color> <color=#f92672>-</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>Q2</color> <color=#f92672>-</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>Q3</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672><</color> <color=#ae81ff>0.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>P0</color> <color=#f92672>+</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>P2</color> <color=#f92672>-</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>P3</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672><</color> <color=#ae81ff>1.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>P0</color> <color=#f92672>+</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>P2</color> <color=#f92672>+</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>P3</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672><</color> <color=#ae81ff>2.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>Q0</color> <color=#f92672>+</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>Q1</color> <color=#f92672>+</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>Q2</color> <color=#f92672>+</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>Q3</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>return</color> <color=#ae81ff>0.0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>support</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#ae81ff>2.0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>double</color> <color=#a6e22e>j1</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#66d9ef>double</color><color=#f92672>[]</color> <color=#f8f8f2>pOne</color> <color=#f92672>=</color> <color=#f8f8f2>{</color>
                <color=#ae81ff>0.581199354001606143928050809e+21</color><color=#f8f8f2>,</color>
                <color=#f92672>-</color><color=#ae81ff>0.6672106568924916298020941484e+20</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.2316433580634002297931815435e+19</color><color=#f8f8f2>,</color>
                <color=#f92672>-</color><color=#ae81ff>0.3588817569910106050743641413e+17</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.2908795263834775409737601689e+15</color><color=#f8f8f2>,</color>
                <color=#f92672>-</color><color=#ae81ff>0.1322983480332126453125473247e+13</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.3413234182301700539091292655e+10</color><color=#f8f8f2>,</color>
                <color=#f92672>-</color><color=#ae81ff>0.4695753530642995859767162166e+7</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.270112271089232341485679099e+4</color>
        <color=#f8f8f2>};</color>
        <color=#66d9ef>final</color> <color=#66d9ef>double</color><color=#f92672>[]</color> <color=#f8f8f2>qOne</color> <color=#f92672>=</color> <color=#f8f8f2>{</color>
                <color=#ae81ff>0.11623987080032122878585294e+22</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.1185770712190320999837113348e+20</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.6092061398917521746105196863e+17</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.2081661221307607351240184229e+15</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.5243710262167649715406728642e+12</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.1013863514358673989967045588e+10</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.1501793594998585505921097578e+7</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.1606931573481487801970916749e+4</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.1e+1</color>
        <color=#f8f8f2>};</color>

        <color=#66d9ef>double</color> <color=#f8f8f2>p</color> <color=#f92672>=</color> <color=#f8f8f2>pOne</color><color=#f92672>[</color><color=#ae81ff>8</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>double</color> <color=#f8f8f2>q</color> <color=#f92672>=</color> <color=#f8f8f2>qOne</color><color=#f92672>[</color><color=#ae81ff>8</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>7</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>p</color> <color=#f92672>=</color> <color=#f8f8f2>p</color> <color=#f92672>*</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>t</color> <color=#f92672>+</color> <color=#f8f8f2>pOne</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>q</color> <color=#f92672>=</color> <color=#f8f8f2>q</color> <color=#f92672>*</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>t</color> <color=#f92672>+</color> <color=#f8f8f2>qOne</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>p</color> <color=#f92672>/</color> <color=#f8f8f2>q</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>double</color> <color=#a6e22e>p1</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#66d9ef>double</color><color=#f92672>[]</color> <color=#f8f8f2>pOne</color> <color=#f92672>=</color> <color=#f8f8f2>{</color>
                <color=#ae81ff>0.352246649133679798341724373e+5</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.62758845247161281269005675e+5</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.313539631109159574238669888e+5</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.49854832060594338434500455e+4</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.2111529182853962382105718e+3</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.12571716929145341558495e+1</color>
        <color=#f8f8f2>};</color>
        <color=#66d9ef>final</color> <color=#66d9ef>double</color><color=#f92672>[]</color> <color=#f8f8f2>qOne</color> <color=#f92672>=</color> <color=#f8f8f2>{</color>
                <color=#ae81ff>0.352246649133679798068390431e+5</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.626943469593560511888833731e+5</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.312404063819041039923015703e+5</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.4930396490181088979386097e+4</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.2030775189134759322293574e+3</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.1e+1</color>
        <color=#f8f8f2>};</color>

        <color=#66d9ef>double</color> <color=#f8f8f2>p</color> <color=#f92672>=</color> <color=#f8f8f2>pOne</color><color=#f92672>[</color><color=#ae81ff>5</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>double</color> <color=#f8f8f2>q</color> <color=#f92672>=</color> <color=#f8f8f2>qOne</color><color=#f92672>[</color><color=#ae81ff>5</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>p</color> <color=#f92672>=</color> <color=#f8f8f2>p</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>8.0</color> <color=#f92672>/</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>8.0</color> <color=#f92672>/</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>pOne</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>q</color> <color=#f92672>=</color> <color=#f8f8f2>q</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>8.0</color> <color=#f92672>/</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>8.0</color> <color=#f92672>/</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>qOne</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>p</color> <color=#f92672>/</color> <color=#f8f8f2>q</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>double</color> <color=#a6e22e>q1</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#66d9ef>double</color><color=#f92672>[]</color> <color=#f8f8f2>pOne</color> <color=#f92672>=</color> <color=#f8f8f2>{</color>
                <color=#ae81ff>0.3511751914303552822533318e+3</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.7210391804904475039280863e+3</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.4259873011654442389886993e+3</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.831898957673850827325226e+2</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.45681716295512267064405e+1</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.3532840052740123642735e-1</color>
        <color=#f8f8f2>};</color>
        <color=#66d9ef>final</color> <color=#66d9ef>double</color><color=#f92672>[]</color> <color=#f8f8f2>qOne</color> <color=#f92672>=</color> <color=#f8f8f2>{</color>
                <color=#ae81ff>0.74917374171809127714519505e+4</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.154141773392650970499848051e+5</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.91522317015169922705904727e+4</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.18111867005523513506724158e+4</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.1038187585462133728776636e+3</color><color=#f8f8f2>,</color>
                <color=#ae81ff>0.1e+1</color>
        <color=#f8f8f2>};</color>

        <color=#66d9ef>double</color> <color=#f8f8f2>p</color> <color=#f92672>=</color> <color=#f8f8f2>pOne</color><color=#f92672>[</color><color=#ae81ff>5</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>double</color> <color=#f8f8f2>q</color> <color=#f92672>=</color> <color=#f8f8f2>qOne</color><color=#f92672>[</color><color=#ae81ff>5</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>p</color> <color=#f92672>=</color> <color=#f8f8f2>p</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>8.0</color> <color=#f92672>/</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>8.0</color> <color=#f92672>/</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>pOne</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>q</color> <color=#f92672>=</color> <color=#f8f8f2>q</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>8.0</color> <color=#f92672>/</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>8.0</color> <color=#f92672>/</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>qOne</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>p</color> <color=#f92672>/</color> <color=#f8f8f2>q</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>double</color> <color=#a6e22e>besselOrderOne</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>double</color> <color=#f8f8f2>p</color><color=#f8f8f2>,</color> <color=#f8f8f2>q</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672>==</color> <color=#ae81ff>0.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#ae81ff>0.0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>p</color> <color=#f92672>=</color> <color=#f8f8f2>t</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672><</color> <color=#ae81ff>0.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>t</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672><</color> <color=#ae81ff>8.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>p</color> <color=#f92672>*</color> <color=#f8f8f2>j1</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>q</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sqrt</color><color=#f8f8f2>(</color><color=#ae81ff>2.0</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>PI</color> <color=#f92672>*</color> <color=#f8f8f2>t</color><color=#f8f8f2>))</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>p1</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>1.0</color> <color=#f92672>/</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sqrt</color><color=#f8f8f2>(</color><color=#ae81ff>2.0</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sin</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>cos</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>)))</color> <color=#f92672>-</color> <color=#ae81ff>8.0</color> <color=#f92672>/</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>q1</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f92672>*</color>
                <color=#f8f8f2>(</color><color=#f92672>-</color><color=#ae81ff>1.0</color> <color=#f92672>/</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sqrt</color><color=#f8f8f2>(</color><color=#ae81ff>2.0</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sin</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>cos</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>))));</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>p</color> <color=#f92672><</color> <color=#ae81ff>0.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>q</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>q</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>q</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>double</color> <color=#a6e22e>bessel</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672>==</color> <color=#ae81ff>0.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>PI</color> <color=#f92672>/</color> <color=#ae81ff>4.0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>besselOrderOne</color><color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>PI</color> <color=#f92672>*</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#ae81ff>2.0</color> <color=#f92672>*</color> <color=#f8f8f2>t</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>double</color> <color=#a6e22e>blackman</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>0.42</color> <color=#f92672>+</color> <color=#ae81ff>0.50</color> <color=#f92672>*</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>cos</color><color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>PI</color> <color=#f92672>*</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#ae81ff>0.08</color> <color=#f92672>*</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>cos</color><color=#f8f8f2>(</color><color=#ae81ff>2.0</color> <color=#f92672>*</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>PI</color> <color=#f92672>*</color> <color=#f8f8f2>t</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>BlacmanFilter</color> <color=#66d9ef>implements</color> <color=#f8f8f2>InterpolationFilter</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>blackman</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>support</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#ae81ff>1.0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>CatromFilter</color> <color=#66d9ef>implements</color> <color=#f8f8f2>InterpolationFilter</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>t</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672><</color> <color=#ae81ff>1.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#ae81ff>0.5</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>2.0</color> <color=#f92672>+</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f92672>-</color><color=#ae81ff>5.0</color> <color=#f92672>+</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#ae81ff>3.0</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672><</color> <color=#ae81ff>2.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#ae81ff>0.5</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>4.0</color> <color=#f92672>+</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f92672>-</color><color=#ae81ff>8.0</color> <color=#f92672>+</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#ae81ff>5.0</color> <color=#f92672>-</color> <color=#f8f8f2>t</color><color=#f8f8f2>)));</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>return</color> <color=#ae81ff>0.0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>support</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#ae81ff>2.0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>GaussianFilter</color> <color=#66d9ef>implements</color> <color=#f8f8f2>InterpolationFilter</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>exp</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#ae81ff>2.0</color> <color=#f92672>*</color> <color=#f8f8f2>t</color> <color=#f92672>*</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sqrt</color><color=#f8f8f2>(</color><color=#ae81ff>2.0</color> <color=#f92672>/</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>PI</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>support</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#ae81ff>1.25</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>HanningFilter</color> <color=#66d9ef>implements</color> <color=#f8f8f2>InterpolationFilter</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#ae81ff>0.5</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color> <color=#f92672>*</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>cos</color><color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>PI</color> <color=#f92672>*</color> <color=#f8f8f2>t</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>support</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#ae81ff>1.0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>HammingFilter</color> <color=#66d9ef>implements</color> <color=#f8f8f2>InterpolationFilter</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#ae81ff>0.54</color> <color=#f92672>+</color> <color=#ae81ff>0.46</color> <color=#f92672>*</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>cos</color><color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>PI</color> <color=#f92672>*</color> <color=#f8f8f2>t</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>support</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#ae81ff>1.0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>BlackmanBesselFilter</color> <color=#66d9ef>implements</color> <color=#f8f8f2>InterpolationFilter</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>blackman</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672>/</color> <color=#f8f8f2>support</color><color=#f8f8f2>())</color> <color=#f92672>*</color> <color=#f8f8f2>bessel</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>support</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#ae81ff>3.2383</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>BlackmanSincFilter</color> <color=#66d9ef>implements</color> <color=#f8f8f2>InterpolationFilter</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>t</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>blackman</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color> <color=#f92672>/</color> <color=#f8f8f2>support</color><color=#f8f8f2>())</color> <color=#f92672>*</color> <color=#f8f8f2>sinc</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#a6e22e>support</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#ae81ff>4.0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     *	image rescaling routine</color>
<color=#75715e>     */</color>
    <color=#66d9ef>class</color> <color=#a6e22e>Contributor</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>pixel</color><color=#f8f8f2>;</color>
        <color=#66d9ef>double</color> <color=#f8f8f2>weight</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>class</color> <color=#a6e22e>ContributorList</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color><color=#75715e>/* number of contributors (may be < p.length) */</color>
        <color=#f8f8f2>Contributor</color><color=#f92672>[]</color> <color=#f8f8f2>p</color><color=#f8f8f2>;</color><color=#75715e>/* pointer to list of contributions */</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>        round()</color>

<color=#75715e>        Round an FP value to its closest int representation.</color>
<color=#75715e>        General routine; ideally belongs in general math lib file.</color>
<color=#75715e>    */</color>

    <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>round</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>d</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// NOTE: This code seems to be faster than Math.round(double)...</color>
        <color=#75715e>// Version that uses no function calls at all.</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>d</color><color=#f8f8f2>;</color>
        <color=#66d9ef>double</color> <color=#f8f8f2>diff</color> <color=#f92672>=</color> <color=#f8f8f2>d</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>diff</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>diff</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>diff</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>diff</color> <color=#f92672>>=</color> <color=#ae81ff>0.5</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>d</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>n</color><color=#f92672>--</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>n</color><color=#f92672>++</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color><color=#75715e>/* round */</color>

    <color=#75715e>/*</color>
<color=#75715e>        calcXContrib()</color>

<color=#75715e>        Calculates the filter weights for a single target column.</color>
<color=#75715e>        contribX->p must be freed afterwards.</color>

<color=#75715e>        Returns -1 if error, 0 otherwise.</color>
<color=#75715e>    */</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>ContributorList</color> <color=#a6e22e>calcXContrib</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>xscale</color><color=#f8f8f2>,</color> <color=#66d9ef>double</color> <color=#f8f8f2>fwidth</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>srcwidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>InterpolationFilter</color> <color=#f8f8f2>pFilter</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// TODO: What to do when fwidth > srcwidyj or dstwidth</color>

        <color=#66d9ef>double</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
        <color=#66d9ef>double</color> <color=#f8f8f2>fscale</color><color=#f8f8f2>;</color>
        <color=#66d9ef>double</color> <color=#f8f8f2>center</color><color=#f8f8f2>;</color>
        <color=#66d9ef>double</color> <color=#f8f8f2>weight</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>ContributorList</color> <color=#f8f8f2>contribX</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ContributorList</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>xscale</color> <color=#f92672><</color> <color=#ae81ff>1.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>/* Shrinking image */</color>
            <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>fwidth</color> <color=#f92672>/</color> <color=#f8f8f2>xscale</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>fscale</color> <color=#f92672>=</color> <color=#ae81ff>1.0</color> <color=#f92672>/</color> <color=#f8f8f2>xscale</color><color=#f8f8f2>;</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>width</color> <color=#f92672><=</color> <color=#ae81ff>.5</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Reduce to point sampling.</color>
                <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#ae81ff>.5</color> <color=#f92672>+</color> <color=#ae81ff>1.0e-6</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>fscale</color> <color=#f92672>=</color> <color=#ae81ff>1.0</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>//contribX.n = 0;</color>
            <color=#f8f8f2>contribX</color><color=#f8f8f2>.</color><color=#a6e22e>p</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Contributor</color><color=#f92672>[</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#ae81ff>2.0</color> <color=#f92672>+</color> <color=#ae81ff>1.0</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>center</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>i</color> <color=#f92672>/</color> <color=#f8f8f2>xscale</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>left</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>ceil</color><color=#f8f8f2>(</color><color=#f8f8f2>center</color> <color=#f92672>-</color> <color=#f8f8f2>width</color><color=#f8f8f2>);</color><color=#75715e>// Note: Assumes width <= .5</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>right</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>floor</color><color=#f8f8f2>(</color><color=#f8f8f2>center</color> <color=#f92672>+</color> <color=#f8f8f2>width</color><color=#f8f8f2>);</color>

            <color=#66d9ef>double</color> <color=#f8f8f2>density</color> <color=#f92672>=</color> <color=#ae81ff>0.0</color><color=#f8f8f2>;</color>

            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>left</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><=</color> <color=#f8f8f2>right</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>weight</color> <color=#f92672>=</color> <color=#f8f8f2>center</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>j</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>weight</color> <color=#f92672>=</color> <color=#f8f8f2>pFilter</color><color=#f8f8f2>.</color><color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>weight</color> <color=#f92672>/</color> <color=#f8f8f2>fscale</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>fscale</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>j</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672>>=</color> <color=#f8f8f2>srcwidth</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>srcwidth</color> <color=#f92672>-</color> <color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>srcwidth</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>j</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#75715e>/**/</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672>>=</color> <color=#f8f8f2>srcwidth</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>n</color> <color=#f92672>%</color> <color=#f8f8f2>srcwidth</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>srcwidth</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#75715e>/**/</color>

                <color=#66d9ef>int</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#f8f8f2>contribX</color><color=#f8f8f2>.</color><color=#a6e22e>n</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>contribX</color><color=#f8f8f2>.</color><color=#a6e22e>p</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Contributor</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>contribX</color><color=#f8f8f2>.</color><color=#a6e22e>p</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>pixel</color> <color=#f92672>=</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>contribX</color><color=#f8f8f2>.</color><color=#a6e22e>p</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>weight</color> <color=#f92672>=</color> <color=#f8f8f2>weight</color><color=#f8f8f2>;</color>

                <color=#f8f8f2>density</color> <color=#f92672>+=</color> <color=#f8f8f2>weight</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>density</color> <color=#f92672>!=</color> <color=#ae81ff>0.0</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>density</color> <color=#f92672>!=</color> <color=#ae81ff>1.0</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#75715e>//Normalize.</color>
                <color=#f8f8f2>density</color> <color=#f92672>=</color> <color=#ae81ff>1.0</color> <color=#f92672>/</color> <color=#f8f8f2>density</color><color=#f8f8f2>;</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>k</color> <color=#f92672><</color> <color=#f8f8f2>contribX</color><color=#f8f8f2>.</color><color=#a6e22e>n</color><color=#f8f8f2>;</color> <color=#f8f8f2>k</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>contribX</color><color=#f8f8f2>.</color><color=#a6e22e>p</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>weight</color> <color=#f92672>*=</color> <color=#f8f8f2>density</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#75715e>/* Expanding image */</color>
            <color=#75715e>//contribX.n = 0;</color>
            <color=#f8f8f2>contribX</color><color=#f8f8f2>.</color><color=#a6e22e>p</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Contributor</color><color=#f92672>[</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>fwidth</color> <color=#f92672>*</color> <color=#ae81ff>2.0</color> <color=#f92672>+</color> <color=#ae81ff>1.0</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>center</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>i</color> <color=#f92672>/</color> <color=#f8f8f2>xscale</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>left</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>ceil</color><color=#f8f8f2>(</color><color=#f8f8f2>center</color> <color=#f92672>-</color> <color=#f8f8f2>fwidth</color><color=#f8f8f2>);</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>right</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>floor</color><color=#f8f8f2>(</color><color=#f8f8f2>center</color> <color=#f92672>+</color> <color=#f8f8f2>fwidth</color><color=#f8f8f2>);</color>

            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>left</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><=</color> <color=#f8f8f2>right</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>weight</color> <color=#f92672>=</color> <color=#f8f8f2>center</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>j</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>weight</color> <color=#f92672>=</color> <color=#f8f8f2>pFilter</color><color=#f8f8f2>.</color><color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>weight</color><color=#f8f8f2>);</color>

                <color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>j</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672>>=</color> <color=#f8f8f2>srcwidth</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>srcwidth</color> <color=#f92672>-</color> <color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>srcwidth</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>j</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#75715e>/**/</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672>>=</color> <color=#f8f8f2>srcwidth</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>n</color> <color=#f92672>%</color> <color=#f8f8f2>srcwidth</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>srcwidth</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#75715e>/**/</color>

                <color=#66d9ef>int</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#f8f8f2>contribX</color><color=#f8f8f2>.</color><color=#a6e22e>n</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>contribX</color><color=#f8f8f2>.</color><color=#a6e22e>p</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Contributor</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>contribX</color><color=#f8f8f2>.</color><color=#a6e22e>p</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>pixel</color> <color=#f92672>=</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>contribX</color><color=#f8f8f2>.</color><color=#a6e22e>p</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>weight</color> <color=#f92672>=</color> <color=#f8f8f2>weight</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>contribX</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color><color=#75715e>/* calcXContrib */</color>

    <color=#75715e>/*</color>
<color=#75715e>        resample()</color>

<color=#75715e>        Resizes bitmaps while resampling them.</color>
<color=#75715e>    */</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>resample</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pDest</color><color=#f8f8f2>,</color> <color=#f8f8f2>InterpolationFilter</color> <color=#f8f8f2>pFilter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>dstWidth</color> <color=#f92672>=</color> <color=#f8f8f2>pDest</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>dstHeight</color> <color=#f92672>=</color> <color=#f8f8f2>pDest</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>srcWidth</color> <color=#f92672>=</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>srcHeight</color> <color=#f92672>=</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#75715e>/* create intermediate column to hold horizontal dst column zoom */</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>cm</color> <color=#f92672>=</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>getColorModel</color><color=#f8f8f2>();</color>
<color=#75715e>//        final WritableRaster work = cm.createCompatibleWritableRaster(1, srcHeight);</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>WritableRaster</color> <color=#f8f8f2>work</color> <color=#f92672>=</color> <color=#f8f8f2>ImageUtil</color><color=#f8f8f2>.</color><color=#a6e22e>createCompatibleWritableRaster</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#f8f8f2>cm</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcHeight</color><color=#f8f8f2>);</color>

        <color=#66d9ef>double</color> <color=#f8f8f2>xscale</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>dstWidth</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>srcWidth</color><color=#f8f8f2>;</color>
        <color=#66d9ef>double</color> <color=#f8f8f2>yscale</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>dstHeight</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>srcHeight</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>ContributorList</color><color=#f92672>[]</color> <color=#f8f8f2>contribY</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ContributorList</color><color=#f92672>[</color><color=#f8f8f2>dstHeight</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>contribY</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>contribY</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ContributorList</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// TODO: What to do when fwidth > srcHeight or dstHeight</color>
        <color=#66d9ef>double</color> <color=#f8f8f2>fwidth</color> <color=#f92672>=</color> <color=#f8f8f2>pFilter</color><color=#f8f8f2>.</color><color=#a6e22e>support</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>yscale</color> <color=#f92672><</color> <color=#ae81ff>1.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>double</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>fwidth</color> <color=#f92672>/</color> <color=#f8f8f2>yscale</color><color=#f8f8f2>;</color>
            <color=#66d9ef>double</color> <color=#f8f8f2>fscale</color> <color=#f92672>=</color> <color=#ae81ff>1.0</color> <color=#f92672>/</color> <color=#f8f8f2>yscale</color><color=#f8f8f2>;</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>width</color> <color=#f92672><=</color> <color=#ae81ff>.5</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Reduce to point sampling.</color>
                <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#ae81ff>.5</color> <color=#f92672>+</color> <color=#ae81ff>1.0e-6</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>fscale</color> <color=#f92672>=</color> <color=#ae81ff>1.0</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>dstHeight</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>//contribY[i].n = 0;</color>
                <color=#f8f8f2>contribY</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>p</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Contributor</color><color=#f92672>[</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#ae81ff>2.0</color> <color=#f92672>+</color> <color=#ae81ff>1</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>

                <color=#66d9ef>double</color> <color=#f8f8f2>center</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>i</color> <color=#f92672>/</color> <color=#f8f8f2>yscale</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>left</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>ceil</color><color=#f8f8f2>(</color><color=#f8f8f2>center</color> <color=#f92672>-</color> <color=#f8f8f2>width</color><color=#f8f8f2>);</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>right</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>floor</color><color=#f8f8f2>(</color><color=#f8f8f2>center</color> <color=#f92672>+</color> <color=#f8f8f2>width</color><color=#f8f8f2>);</color>

                <color=#66d9ef>double</color> <color=#f8f8f2>density</color> <color=#f92672>=</color> <color=#ae81ff>0.0</color><color=#f8f8f2>;</color>

                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>left</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><=</color> <color=#f8f8f2>right</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>double</color> <color=#f8f8f2>weight</color> <color=#f92672>=</color> <color=#f8f8f2>center</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>j</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>weight</color> <color=#f92672>=</color> <color=#f8f8f2>pFilter</color><color=#f8f8f2>.</color><color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>weight</color> <color=#f92672>/</color> <color=#f8f8f2>fscale</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>fscale</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>j</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672>>=</color> <color=#f8f8f2>srcHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>srcHeight</color> <color=#f92672>-</color> <color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>srcHeight</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>j</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>

                    <color=#75715e>/**/</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672>>=</color> <color=#f8f8f2>srcHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>n</color> <color=#f92672>%</color> <color=#f8f8f2>srcHeight</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>srcHeight</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                    <color=#75715e>/**/</color>

                    <color=#66d9ef>int</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#f8f8f2>contribY</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>n</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>contribY</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>p</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Contributor</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>contribY</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>p</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>pixel</color> <color=#f92672>=</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>contribY</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>p</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>weight</color> <color=#f92672>=</color> <color=#f8f8f2>weight</color><color=#f8f8f2>;</color>

                    <color=#f8f8f2>density</color> <color=#f92672>+=</color> <color=#f8f8f2>weight</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>density</color> <color=#f92672>!=</color> <color=#ae81ff>0.0</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>density</color> <color=#f92672>!=</color> <color=#ae81ff>1.0</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                    <color=#75715e>//Normalize.</color>
                    <color=#f8f8f2>density</color> <color=#f92672>=</color> <color=#ae81ff>1.0</color> <color=#f92672>/</color> <color=#f8f8f2>density</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>k</color> <color=#f92672><</color> <color=#f8f8f2>contribY</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>n</color><color=#f8f8f2>;</color> <color=#f8f8f2>k</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>contribY</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>p</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>weight</color> <color=#f92672>*=</color> <color=#f8f8f2>density</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>dstHeight</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>//contribY[i].n = 0;</color>
                <color=#f8f8f2>contribY</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>p</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Contributor</color><color=#f92672>[</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>fwidth</color> <color=#f92672>*</color> <color=#ae81ff>2</color> <color=#f92672>+</color> <color=#ae81ff>1</color> <color=#f92672>+</color> <color=#ae81ff>0.5</color><color=#f8f8f2>)</color><color=#f92672>]</color><color=#f8f8f2>;</color>

                <color=#66d9ef>double</color> <color=#f8f8f2>center</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>i</color> <color=#f92672>/</color> <color=#f8f8f2>yscale</color><color=#f8f8f2>;</color>
                <color=#66d9ef>double</color> <color=#f8f8f2>left</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>ceil</color><color=#f8f8f2>(</color><color=#f8f8f2>center</color> <color=#f92672>-</color> <color=#f8f8f2>fwidth</color><color=#f8f8f2>);</color>
                <color=#66d9ef>double</color> <color=#f8f8f2>right</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>floor</color><color=#f8f8f2>(</color><color=#f8f8f2>center</color> <color=#f92672>+</color> <color=#f8f8f2>fwidth</color><color=#f8f8f2>);</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>left</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><=</color> <color=#f8f8f2>right</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>double</color> <color=#f8f8f2>weight</color> <color=#f92672>=</color> <color=#f8f8f2>center</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#66d9ef>double</color><color=#f8f8f2>)</color> <color=#f8f8f2>j</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>weight</color> <color=#f92672>=</color> <color=#f8f8f2>pFilter</color><color=#f8f8f2>.</color><color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>weight</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#f8f8f2>j</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672>>=</color> <color=#f8f8f2>srcHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>srcHeight</color> <color=#f92672>-</color> <color=#f8f8f2>j</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>srcHeight</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>j</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>

                    <color=#75715e>/**/</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672>>=</color> <color=#f8f8f2>srcHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>n</color> <color=#f92672>%</color> <color=#f8f8f2>srcHeight</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>srcHeight</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                    <color=#75715e>/**/</color>

                    <color=#66d9ef>int</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#f8f8f2>contribY</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>n</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>contribY</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>p</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Contributor</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>contribY</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>p</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>pixel</color> <color=#f92672>=</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>contribY</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>p</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>weight</color> <color=#f92672>=</color> <color=#f8f8f2>weight</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>final</color> <color=#f8f8f2>Raster</color> <color=#f8f8f2>raster</color> <color=#f92672>=</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>getRaster</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#f8f8f2>WritableRaster</color> <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#f8f8f2>pDest</color><color=#f8f8f2>.</color><color=#a6e22e>getRaster</color><color=#f8f8f2>();</color>

        <color=#75715e>// TODO: This is not optimal for non-byte-packed rasters...</color>
        <color=#75715e>// (What? Maybe I implemented the fix, but forgot to remove the TODO?)</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>numChannels</color> <color=#f92672>=</color> <color=#f8f8f2>raster</color><color=#f8f8f2>.</color><color=#a6e22e>getNumBands</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>channelMax</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>numChannels</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>k</color> <color=#f92672><</color> <color=#f8f8f2>numChannels</color><color=#f8f8f2>;</color> <color=#f8f8f2>k</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>channelMax</color><color=#f92672>[</color><color=#f8f8f2>k</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#ae81ff>1</color> <color=#f92672><<</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>getColorModel</color><color=#f8f8f2>().</color><color=#a6e22e>getComponentSize</color><color=#f8f8f2>(</color><color=#f8f8f2>k</color><color=#f8f8f2>))</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>xx</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>xx</color> <color=#f92672><</color> <color=#f8f8f2>dstWidth</color><color=#f8f8f2>;</color> <color=#f8f8f2>xx</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>ContributorList</color> <color=#f8f8f2>contribX</color> <color=#f92672>=</color> <color=#f8f8f2>calcXContrib</color><color=#f8f8f2>(</color><color=#f8f8f2>xscale</color><color=#f8f8f2>,</color> <color=#f8f8f2>fwidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>srcWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>pFilter</color><color=#f8f8f2>,</color> <color=#f8f8f2>xx</color><color=#f8f8f2>);</color>
            <color=#75715e>/* Apply horiz filter to make dst column in tmp. */</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>k</color> <color=#f92672><</color> <color=#f8f8f2>srcHeight</color><color=#f8f8f2>;</color> <color=#f8f8f2>k</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>channel</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>channel</color> <color=#f92672><</color> <color=#f8f8f2>numChannels</color><color=#f8f8f2>;</color> <color=#f8f8f2>channel</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

                    <color=#66d9ef>double</color> <color=#f8f8f2>weight</color> <color=#f92672>=</color> <color=#ae81ff>0.0</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>boolean</color> <color=#f8f8f2>bPelDelta</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
                    <color=#75715e>// TODO: This line throws index out of bounds, if the image</color>
                    <color=#75715e>// is smaller than filter.support()</color>
                    <color=#66d9ef>double</color> <color=#f8f8f2>pel</color> <color=#f92672>=</color> <color=#f8f8f2>raster</color><color=#f8f8f2>.</color><color=#a6e22e>getSample</color><color=#f8f8f2>(</color><color=#f8f8f2>contribX</color><color=#f8f8f2>.</color><color=#a6e22e>p</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>pixel</color><color=#f8f8f2>,</color> <color=#f8f8f2>k</color><color=#f8f8f2>,</color> <color=#f8f8f2>channel</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#f8f8f2>contribX</color><color=#f8f8f2>.</color><color=#a6e22e>n</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>double</color> <color=#f8f8f2>pel2</color> <color=#f92672>=</color> <color=#f8f8f2>j</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f8f8f2>pel</color> <color=#f8f8f2>:</color> <color=#f8f8f2>raster</color><color=#f8f8f2>.</color><color=#a6e22e>getSample</color><color=#f8f8f2>(</color><color=#f8f8f2>contribX</color><color=#f8f8f2>.</color><color=#a6e22e>p</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>pixel</color><color=#f8f8f2>,</color> <color=#f8f8f2>k</color><color=#f8f8f2>,</color> <color=#f8f8f2>channel</color><color=#f8f8f2>);</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pel2</color> <color=#f92672>!=</color> <color=#f8f8f2>pel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>bPelDelta</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color>
                        <color=#f8f8f2>weight</color> <color=#f92672>+=</color> <color=#f8f8f2>pel2</color> <color=#f92672>*</color> <color=#f8f8f2>contribX</color><color=#f8f8f2>.</color><color=#a6e22e>p</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>weight</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                    <color=#f8f8f2>weight</color> <color=#f92672>=</color> <color=#f8f8f2>bPelDelta</color> <color=#f92672>?</color> <color=#f8f8f2>round</color><color=#f8f8f2>(</color><color=#f8f8f2>weight</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#f8f8f2>pel</color><color=#f8f8f2>;</color>

                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>weight</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>weight</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>weight</color> <color=#f92672>></color> <color=#f8f8f2>channelMax</color><color=#f92672>[</color><color=#f8f8f2>channel</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>weight</color> <color=#f92672>=</color> <color=#f8f8f2>channelMax</color><color=#f92672>[</color><color=#f8f8f2>channel</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>

                    <color=#f8f8f2>work</color><color=#f8f8f2>.</color><color=#a6e22e>setSample</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>k</color><color=#f8f8f2>,</color> <color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>weight</color><color=#f8f8f2>);</color>

                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color><color=#75715e>/* next row in temp column */</color>

            <color=#75715e>/* The temp column has been built. Now stretch it vertically into dst column. */</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>dstHeight</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>channel</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>channel</color> <color=#f92672><</color> <color=#f8f8f2>numChannels</color><color=#f8f8f2>;</color> <color=#f8f8f2>channel</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

                    <color=#66d9ef>double</color> <color=#f8f8f2>weight</color> <color=#f92672>=</color> <color=#ae81ff>0.0</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>boolean</color> <color=#f8f8f2>bPelDelta</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>double</color> <color=#f8f8f2>pel</color> <color=#f92672>=</color> <color=#f8f8f2>work</color><color=#f8f8f2>.</color><color=#a6e22e>getSample</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>contribY</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>p</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>pixel</color><color=#f8f8f2>,</color> <color=#f8f8f2>channel</color><color=#f8f8f2>);</color>

                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#f8f8f2>contribY</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>n</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#75715e>// TODO: This line throws index out of bounds, if the image</color>
                        <color=#75715e>// is smaller than filter.support()</color>
                        <color=#66d9ef>double</color> <color=#f8f8f2>pel2</color> <color=#f92672>=</color> <color=#f8f8f2>j</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#f8f8f2>pel</color> <color=#f8f8f2>:</color> <color=#f8f8f2>work</color><color=#f8f8f2>.</color><color=#a6e22e>getSample</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>contribY</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>p</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>pixel</color><color=#f8f8f2>,</color> <color=#f8f8f2>channel</color><color=#f8f8f2>);</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pel2</color> <color=#f92672>!=</color> <color=#f8f8f2>pel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>bPelDelta</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color>
                        <color=#f8f8f2>weight</color> <color=#f92672>+=</color> <color=#f8f8f2>pel2</color> <color=#f92672>*</color> <color=#f8f8f2>contribY</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>p</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>weight</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                    <color=#f8f8f2>weight</color> <color=#f92672>=</color> <color=#f8f8f2>bPelDelta</color> <color=#f92672>?</color> <color=#f8f8f2>round</color><color=#f8f8f2>(</color><color=#f8f8f2>weight</color><color=#f8f8f2>)</color> <color=#f8f8f2>:</color> <color=#f8f8f2>pel</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>weight</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>weight</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>weight</color> <color=#f92672>></color> <color=#f8f8f2>channelMax</color><color=#f92672>[</color><color=#f8f8f2>channel</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>weight</color> <color=#f92672>=</color> <color=#f8f8f2>channelMax</color><color=#f92672>[</color><color=#f8f8f2>channel</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>

                    <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>setSample</color><color=#f8f8f2>(</color><color=#f8f8f2>xx</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#f8f8f2>channel</color><color=#f8f8f2>,</color> <color=#f8f8f2>weight</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color><color=#75715e>/* next dst row */</color>
        <color=#f8f8f2>}</color><color=#75715e>/* next dst column */</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pDest</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color><color=#75715e>/* resample */</color>
<color=#f8f8f2>}</color>