<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>
<color=#75715e>/*</color>
<color=#75715e> ******************************************************************************</color>
<color=#75715e> *</color>
<color=#75715e> * ============================================================================</color>
<color=#75715e> *                   The Apache Software License, Version 1.1</color>
<color=#75715e> * ============================================================================</color>
<color=#75715e> *</color>
<color=#75715e> * Copyright (C) 2000 The Apache Software Foundation. All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without modifica-</color>
<color=#75715e> * tion, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * 1. Redistributions of  source code must  retain the above copyright  notice,</color>
<color=#75715e> *    this list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * 2. Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *    this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *    and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * 3. The end-user documentation included with the redistribution, if any, must</color>
<color=#75715e> *    include  the following  acknowledgment:  "This product includes  software</color>
<color=#75715e> *    developed  by the  Apache Software Foundation  (http://www.apache.org/)."</color>
<color=#75715e> *    Alternately, this  acknowledgment may  appear in the software itself,  if</color>
<color=#75715e> *    and wherever such third-party acknowledgments normally appear.</color>
<color=#75715e> *</color>
<color=#75715e> * 4. The names "Batik" and  "Apache Software Foundation"  must not be  used to</color>
<color=#75715e> *    endorse  or promote  products derived  from this  software without  prior</color>
<color=#75715e> *    written permission. For written permission, please contact</color>
<color=#75715e> *    apache@apache.org.</color>
<color=#75715e> *</color>
<color=#75715e> * 5. Products  derived from this software may not  be called "Apache", nor may</color>
<color=#75715e> *    "Apache" appear  in their name,  without prior written permission  of the</color>
<color=#75715e> *    Apache Software Foundation.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,</color>
<color=#75715e> * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND</color>
<color=#75715e> * FITNESS  FOR A PARTICULAR  PURPOSE ARE  DISCLAIMED.  IN NO  EVENT SHALL  THE</color>
<color=#75715e> * APACHE SOFTWARE  FOUNDATION  OR ITS CONTRIBUTORS  BE LIABLE FOR  ANY DIRECT,</color>
<color=#75715e> * INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-</color>
<color=#75715e> * DING, BUT NOT LIMITED TO, PROCUREMENT  OF SUBSTITUTE GOODS OR SERVICES; LOSS</color>
<color=#75715e> * OF USE, DATA, OR  PROFITS; OR BUSINESS  INTERRUPTION)  HOWEVER CAUSED AND ON</color>
<color=#75715e> * ANY  THEORY OF LIABILITY,  WHETHER  IN CONTRACT,  STRICT LIABILITY,  OR TORT</color>
<color=#75715e> * (INCLUDING  NEGLIGENCE OR  OTHERWISE) ARISING IN  ANY WAY OUT OF THE  USE OF</color>
<color=#75715e> * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> *</color>
<color=#75715e> * This software  consists of voluntary contributions made  by many individuals</color>
<color=#75715e> * on  behalf  of the Apache Software  Foundation. For more  information on the</color>
<color=#75715e> * Apache Software Foundation, please see <http://www.apache.org/>.</color>
<color=#75715e> *</color>
<color=#75715e> ******************************************************************************</color>
<color=#75715e> *</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.io.FileUtil</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.lang.StringUtil</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.ImageIO</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.ColorModel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.IndexColorModel</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.RenderedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.File</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.ArrayList</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Iterator</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.List</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * This class implements an adaptive palette generator to reduce images</color>
<color=#75715e> * to a variable number of colors.</color>
<color=#75715e> * It can also render images into fixed color pallettes.</color>
<color=#75715e> * <p/></color>
<color=#75715e> * Support for the default JVM (ordered/pattern) dither, Floyd-Steinberg like</color>
<color=#75715e> * error-diffusion and no dither, controlled by the hints</color>
<color=#75715e> * {@link #DITHER_DIFFUSION},</color>
<color=#75715e> * {@link #DITHER_NONE} and</color>
<color=#75715e> * {@link #DITHER_DEFAULT}.</color>
<color=#75715e> * <p/></color>
<color=#75715e> * Color selection speed/accuracy can be controlled using the hints</color>
<color=#75715e> * {@link #COLOR_SELECTION_FAST},</color>
<color=#75715e> * {@link #COLOR_SELECTION_QUALITY} and</color>
<color=#75715e> * {@link #COLOR_SELECTION_DEFAULT}.</color>
<color=#75715e> * <p/></color>
<color=#75715e> * Transparency support can be controlled using the hints</color>
<color=#75715e> * {@link #TRANSPARENCY_OPAQUE},</color>
<color=#75715e> * {@link #TRANSPARENCY_BITMASK} and</color>
<color=#75715e> * {@link #TRANSPARENCY_TRANSLUCENT}.</color>
<color=#75715e> * <p/></color>
<color=#75715e> * <HR/></color>
<color=#75715e> * <p/></color>
<color=#75715e> * <PRE></color>
<color=#75715e> * This product includes software developed by the Apache Software Foundation.</color>
<color=#75715e> * <p/></color>
<color=#75715e> * This software  consists of voluntary contributions made  by many individuals</color>
<color=#75715e> * on  behalf  of the Apache Software  Foundation. For more  information on the</color>
<color=#75715e> * Apache Software Foundation, please see <A href="http://www.apache.org/">http://www.apache.org/</A></color>
<color=#75715e> * </PRE></color>
<color=#75715e> *</color>
<color=#75715e> * @author <A href="mailto:deweese@apache.org">Thomas DeWeese</A></color>
<color=#75715e> * @author <A href="mailto:jun@oop-reserch.com">Jun Inamori</A></color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @version $Id: IndexImage.java#1 $</color>
<color=#75715e> * @see DiffusionDither</color>
<color=#75715e> */</color>
<color=#66d9ef>class</color> <color=#a6e22e>IndexImage</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Dither mask</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>DITHER_MASK</color> <color=#f92672>=</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Java default dither</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>DITHER_DEFAULT</color> <color=#f92672>=</color> <color=#ae81ff>0x00</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * No dither</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>DITHER_NONE</color> <color=#f92672>=</color> <color=#ae81ff>0x01</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Error diffusion dither</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>DITHER_DIFFUSION</color> <color=#f92672>=</color> <color=#ae81ff>0x02</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Error diffusion dither with alternating scans</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>DITHER_DIFFUSION_ALTSCANS</color> <color=#f92672>=</color> <color=#ae81ff>0x03</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Color Selection mask</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>COLOR_SELECTION_MASK</color> <color=#f92672>=</color> <color=#ae81ff>0xFF00</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Default color selection</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>COLOR_SELECTION_DEFAULT</color> <color=#f92672>=</color> <color=#ae81ff>0x0000</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Prioritize speed</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>COLOR_SELECTION_FAST</color> <color=#f92672>=</color> <color=#ae81ff>0x0100</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Prioritize quality</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>COLOR_SELECTION_QUALITY</color> <color=#f92672>=</color> <color=#ae81ff>0x0200</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Transparency mask</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>TRANSPARENCY_MASK</color> <color=#f92672>=</color> <color=#ae81ff>0xFF0000</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Default transparency (none)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>TRANSPARENCY_DEFAULT</color> <color=#f92672>=</color> <color=#ae81ff>0x000000</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Discard any alpha information</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>TRANSPARENCY_OPAQUE</color> <color=#f92672>=</color> <color=#ae81ff>0x010000</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Convert alpha to bitmask</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>TRANSPARENCY_BITMASK</color> <color=#f92672>=</color> <color=#ae81ff>0x020000</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Keep original alpha (not supported yet)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>TRANSPARENCY_TRANSLUCENT</color> <color=#f92672>=</color> <color=#ae81ff>0x030000</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Used to track a color and the number of pixels of that colors</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>Counter</color> <color=#f8f8f2>{</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Field val</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#f8f8f2>val</color><color=#f8f8f2>;</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Field count</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Constructor Counter</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param val the initial value</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#a6e22e>Counter</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>val</color> <color=#f92672>=</color> <color=#f8f8f2>val</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Method add</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param val the new value</color>
<color=#75715e>         * @return {@code true} if the value was added, otherwise {@code false}</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// See if the value matches us...</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>val</color> <color=#f92672>!=</color> <color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>count</color><color=#f92672>++</color><color=#f8f8f2>;</color>

            <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Used to define a cube of the color space.  The cube can be split</color>
<color=#75715e>     * approximately in half to generate two cubes.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>Cube</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>min</color> <color=#f92672>=</color> <color=#f8f8f2>{</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>};</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>max</color> <color=#f92672>=</color> <color=#f8f8f2>{</color><color=#ae81ff>255</color><color=#f8f8f2>,</color> <color=#ae81ff>255</color><color=#f8f8f2>,</color> <color=#ae81ff>255</color><color=#f8f8f2>};</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>done</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Counter</color><color=#f92672>>[]</color> <color=#f8f8f2>colors</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>RED</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>GRN</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>BLU</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Define a new cube.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param colors contains the 3D color histogram to be subdivided</color>
<color=#75715e>         * @param count  the total number of pixels in the 3D histogram.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#a6e22e>Cube</color><color=#f8f8f2>(</color><color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Counter</color><color=#f92672>>[]</color> <color=#f8f8f2>colors</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>count</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>colors</color> <color=#f92672>=</color> <color=#f8f8f2>colors</color><color=#f8f8f2>;</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>count</color> <color=#f92672>=</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * If this returns true then the cube can not be subdivided any</color>
<color=#75715e>         * further</color>
<color=#75715e>         *</color>
<color=#75715e>         * @return true if cube can not be subdivided any further</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isDone</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>done</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Splits the cube into two parts.  This cube is</color>
<color=#75715e>         * changed to be one half and the returned cube is the other half.</color>
<color=#75715e>         * This tries to pick the right channel to split on.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @return the {@code Cube} containing the other half</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Cube</color> <color=#a6e22e>split</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>dr</color> <color=#f92672>=</color> <color=#f8f8f2>max</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>-</color> <color=#f8f8f2>min</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>dg</color> <color=#f92672>=</color> <color=#f8f8f2>max</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>-</color> <color=#f8f8f2>min</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>db</color> <color=#f92672>=</color> <color=#f8f8f2>max</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>-</color> <color=#f8f8f2>min</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>c0</color><color=#f8f8f2>,</color> <color=#f8f8f2>c1</color><color=#f8f8f2>,</color> <color=#f8f8f2>splitChannel</color><color=#f8f8f2>;</color>

            <color=#75715e>// Figure out which axis is the longest and split along</color>
            <color=#75715e>// that axis (this tries to keep cubes square-ish).</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dr</color> <color=#f92672>>=</color> <color=#f8f8f2>dg</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>c0</color> <color=#f92672>=</color> <color=#f8f8f2>GRN</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dr</color> <color=#f92672>>=</color> <color=#f8f8f2>db</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>splitChannel</color> <color=#f92672>=</color> <color=#f8f8f2>RED</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>c1</color> <color=#f92672>=</color> <color=#f8f8f2>BLU</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>splitChannel</color> <color=#f92672>=</color> <color=#f8f8f2>BLU</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>c1</color> <color=#f92672>=</color> <color=#f8f8f2>RED</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>dg</color> <color=#f92672>>=</color> <color=#f8f8f2>db</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>splitChannel</color> <color=#f92672>=</color> <color=#f8f8f2>GRN</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>c0</color> <color=#f92672>=</color> <color=#f8f8f2>RED</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>c1</color> <color=#f92672>=</color> <color=#f8f8f2>BLU</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>splitChannel</color> <color=#f92672>=</color> <color=#f8f8f2>BLU</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>c0</color> <color=#f92672>=</color> <color=#f8f8f2>RED</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>c1</color> <color=#f92672>=</color> <color=#f8f8f2>GRN</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>Cube</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#f8f8f2>splitChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>splitChannel</color><color=#f8f8f2>,</color> <color=#f8f8f2>c0</color><color=#f8f8f2>,</color> <color=#f8f8f2>c1</color><color=#f8f8f2>);</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ret</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#f8f8f2>splitChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>c0</color><color=#f8f8f2>,</color> <color=#f8f8f2>splitChannel</color><color=#f8f8f2>,</color> <color=#f8f8f2>c1</color><color=#f8f8f2>);</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ret</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#f8f8f2>splitChannel</color><color=#f8f8f2>(</color><color=#f8f8f2>c1</color><color=#f8f8f2>,</color> <color=#f8f8f2>splitChannel</color><color=#f8f8f2>,</color> <color=#f8f8f2>c0</color><color=#f8f8f2>);</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ret</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>done</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Splits the image according to the parameters.  It tries</color>
<color=#75715e>         * to find a location where half the pixels are on one side</color>
<color=#75715e>         * and half the pixels are on the other.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param splitChannel split channel</color>
<color=#75715e>         * @param c0           channel 0</color>
<color=#75715e>         * @param c1           channel 1</color>
<color=#75715e>         * @return the {@code Cube} containing the other half</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Cube</color> <color=#a6e22e>splitChannel</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>splitChannel</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>c0</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>c1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>min</color><color=#f92672>[</color><color=#f8f8f2>splitChannel</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#f8f8f2>max</color><color=#f92672>[</color><color=#f8f8f2>splitChannel</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>splitSh4</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#ae81ff>2</color> <color=#f92672>-</color> <color=#f8f8f2>splitChannel</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>c0Sh4</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#ae81ff>2</color> <color=#f92672>-</color> <color=#f8f8f2>c0</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>c1Sh4</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#ae81ff>2</color> <color=#f92672>-</color> <color=#f8f8f2>c1</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>

            <color=#75715e>//            int splitSh8 = (2-splitChannel)*8;</color>
            <color=#75715e>//            int c0Sh8    = (2-c0)*8;</color>
            <color=#75715e>//            int c1Sh8    = (2-c1)*8;</color>
            <color=#75715e>//</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>half</color> <color=#f92672>=</color> <color=#f8f8f2>count</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

            <color=#75715e>// Each entry is the number of pixels that have that value</color>
            <color=#75715e>// in the split channel within the cube (so pixels</color>
            <color=#75715e>// that have that value in the split channel aren't counted</color>
            <color=#75715e>// if they are outside the cube in the other color channels.</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>counts</color><color=#f92672>[]</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#ae81ff>256</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>tcount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

            <color=#75715e>// System.out.println("Cube: [" +</color>
            <color=#75715e>//                    min[0] + "-" + max[0] + "] [" +</color>
            <color=#75715e>//                    min[1] + "-" + max[1] + "] [" +</color>
            <color=#75715e>//                    min[2] + "-" + max[2] + "]");</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>minIdx</color> <color=#f92672>=</color> <color=#f8f8f2>{</color><color=#f8f8f2>min</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>>></color> <color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#f8f8f2>min</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>>></color> <color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#f8f8f2>min</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>>></color> <color=#ae81ff>4</color><color=#f8f8f2>};</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>maxIdx</color> <color=#f92672>=</color> <color=#f8f8f2>{</color><color=#f8f8f2>max</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>>></color> <color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#f8f8f2>max</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>>></color> <color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#f8f8f2>max</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>>></color> <color=#ae81ff>4</color><color=#f8f8f2>};</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>minR</color> <color=#f92672>=</color> <color=#f8f8f2>min</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>minG</color> <color=#f92672>=</color> <color=#f8f8f2>min</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>minB</color> <color=#f92672>=</color> <color=#f8f8f2>min</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>maxR</color> <color=#f92672>=</color> <color=#f8f8f2>max</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxG</color> <color=#f92672>=</color> <color=#f8f8f2>max</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxB</color> <color=#f92672>=</color> <color=#f8f8f2>max</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>val</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>vals</color> <color=#f92672>=</color> <color=#f8f8f2>{</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>};</color>

            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>minIdx</color><color=#f92672>[</color><color=#f8f8f2>splitChannel</color><color=#f92672>]</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><=</color> <color=#f8f8f2>maxIdx</color><color=#f92672>[</color><color=#f8f8f2>splitChannel</color><color=#f92672>]</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>idx1</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672><<</color> <color=#f8f8f2>splitSh4</color><color=#f8f8f2>;</color>

                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>minIdx</color><color=#f92672>[</color><color=#f8f8f2>c0</color><color=#f92672>]</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><=</color> <color=#f8f8f2>maxIdx</color><color=#f92672>[</color><color=#f8f8f2>c0</color><color=#f92672>]</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>idx2</color> <color=#f92672>=</color> <color=#f8f8f2>idx1</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672><<</color> <color=#f8f8f2>c0Sh4</color><color=#f8f8f2>);</color>

                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#f8f8f2>minIdx</color><color=#f92672>[</color><color=#f8f8f2>c1</color><color=#f92672>]</color><color=#f8f8f2>;</color> <color=#f8f8f2>k</color> <color=#f92672><=</color> <color=#f8f8f2>maxIdx</color><color=#f92672>[</color><color=#f8f8f2>c1</color><color=#f92672>]</color><color=#f8f8f2>;</color> <color=#f8f8f2>k</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>idx</color> <color=#f92672>=</color> <color=#f8f8f2>idx2</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>k</color> <color=#f92672><<</color> <color=#f8f8f2>c1Sh4</color><color=#f8f8f2>);</color>
                        <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Counter</color><color=#f92672>></color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>colors</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color><color=#f8f8f2>;</color>

                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color>

                        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Counter</color> <color=#f8f8f2>c</color> <color=#f8f8f2>:</color> <color=#f8f8f2>v</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>val</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>vals</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>&</color> <color=#ae81ff>0xFF0000</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>vals</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>&</color> <color=#ae81ff>0xFF00</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>vals</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
                            <color=#66d9ef>if</color> <color=#f8f8f2>(((</color><color=#f8f8f2>vals</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>>=</color> <color=#f8f8f2>minR</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>vals</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672><=</color> <color=#f8f8f2>maxR</color><color=#f8f8f2>))</color> <color=#f92672>&&</color> <color=#f8f8f2>((</color><color=#f8f8f2>vals</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>>=</color> <color=#f8f8f2>minG</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>vals</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672><=</color> <color=#f8f8f2>maxG</color><color=#f8f8f2>))</color>
                                    <color=#f92672>&&</color> <color=#f8f8f2>((</color><color=#f8f8f2>vals</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>>=</color> <color=#f8f8f2>minB</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>vals</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672><=</color> <color=#f8f8f2>maxB</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>

                                <color=#75715e>// The val lies within this cube so count it.</color>
                                <color=#f8f8f2>counts</color><color=#f92672>[</color><color=#f8f8f2>vals</color><color=#f92672>[</color><color=#f8f8f2>splitChannel</color><color=#f92672>]]</color> <color=#f92672>+=</color> <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>count</color><color=#f8f8f2>;</color>
                                <color=#f8f8f2>tcount</color> <color=#f92672>+=</color> <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>count</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>}</color>
                        <color=#f8f8f2>}</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>

                <color=#75715e>// We've found the half way point.  Note that the</color>
                <color=#75715e>// rest of counts is not filled out.</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tcount</color> <color=#f92672>>=</color> <color=#f8f8f2>half</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>tcount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>lastAdd</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>

            <color=#75715e>// These indicate what the top value for the low cube and</color>
            <color=#75715e>// the low value of the high cube should be in the split channel</color>
            <color=#75715e>// (they may not be one off if there are 'dead' spots in the</color>
            <color=#75715e>// counts array.)</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>splitLo</color> <color=#f92672>=</color> <color=#f8f8f2>min</color><color=#f92672>[</color><color=#f8f8f2>splitChannel</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>splitHi</color> <color=#f92672>=</color> <color=#f8f8f2>max</color><color=#f92672>[</color><color=#f8f8f2>splitChannel</color><color=#f92672>]</color><color=#f8f8f2>;</color>

            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>min</color><color=#f92672>[</color><color=#f8f8f2>splitChannel</color><color=#f92672>]</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><=</color> <color=#f8f8f2>max</color><color=#f92672>[</color><color=#f8f8f2>splitChannel</color><color=#f92672>]</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>c</color> <color=#f92672>=</color> <color=#f8f8f2>counts</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// No counts below this so move up bottom of cube.</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>tcount</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>max</color><color=#f92672>[</color><color=#f8f8f2>splitChannel</color><color=#f92672>]</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f92672>[</color><color=#f8f8f2>splitChannel</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                    <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tcount</color> <color=#f92672>+</color> <color=#f8f8f2>c</color> <color=#f92672><</color> <color=#f8f8f2>half</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>lastAdd</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>tcount</color> <color=#f92672>+=</color> <color=#f8f8f2>c</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>half</color> <color=#f92672>-</color> <color=#f8f8f2>tcount</color><color=#f8f8f2>)</color> <color=#f92672><=</color> <color=#f8f8f2>((</color><color=#f8f8f2>tcount</color> <color=#f92672>+</color> <color=#f8f8f2>c</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>half</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// Then lastAdd is a better top idx for this then i.</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>lastAdd</color> <color=#f92672>==</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#75715e>// No lower place to break.</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>count</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

                            <color=#75715e>// All pixels are at this value so make min/max</color>
                            <color=#75715e>// reflect that.</color>
                            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f92672>[</color><color=#f8f8f2>splitChannel</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
                            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color><color=#75715e>// no split to make.</color>
                        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

                            <color=#75715e>// There are values about this one so</color>
                            <color=#75715e>// split above.</color>
                            <color=#f8f8f2>splitLo</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>splitHi</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color>
                    <color=#f8f8f2>}</color>
                    <color=#f8f8f2>splitLo</color> <color=#f92672>=</color> <color=#f8f8f2>lastAdd</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>splitHi</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>==</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f92672>[</color><color=#f8f8f2>splitChannel</color><color=#f92672>]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color> <color=#f92672>==</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>count</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#75715e>// would move min up but that should</color>
                            <color=#75715e>// have happened already.</color>
                            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color><color=#75715e>// no split to make.</color>
                        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                            <color=#75715e>// Would like to break between i and i+1</color>
                            <color=#75715e>// but no i+1 so use lastAdd and i;</color>
                            <color=#f8f8f2>splitLo</color> <color=#f92672>=</color> <color=#f8f8f2>lastAdd</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>splitHi</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
                            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color>
                    <color=#f8f8f2>}</color>

                    <color=#75715e>// Include c in counts</color>
                    <color=#f8f8f2>tcount</color> <color=#f92672>+=</color> <color=#f8f8f2>c</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>splitLo</color> <color=#f92672>=</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>splitHi</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// System.out.println("Split: " + splitChannel + "@"</color>
            <color=#75715e>//                    + splitLo + "-"+splitHi +</color>
            <color=#75715e>//                    " Count: " + tcount  + " of " + count +</color>
            <color=#75715e>//                    " LA: " + lastAdd);</color>
            <color=#75715e>// Create the new cube and update everyone's bounds & counts.</color>
            <color=#f8f8f2>Cube</color> <color=#f8f8f2>ret</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Cube</color><color=#f8f8f2>(</color><color=#f8f8f2>colors</color><color=#f8f8f2>,</color> <color=#f8f8f2>tcount</color><color=#f8f8f2>);</color>

            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>count</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>count</color> <color=#f92672>-</color> <color=#f8f8f2>tcount</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>ret</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f92672>[</color><color=#f8f8f2>splitChannel</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f92672>[</color><color=#f8f8f2>splitChannel</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>ret</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f92672>[</color><color=#f8f8f2>splitChannel</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>splitLo</color><color=#f8f8f2>;</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f92672>[</color><color=#f8f8f2>splitChannel</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>splitHi</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>ret</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f92672>[</color><color=#f8f8f2>c0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f92672>[</color><color=#f8f8f2>c0</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>ret</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f92672>[</color><color=#f8f8f2>c0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f92672>[</color><color=#f8f8f2>c0</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>ret</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f92672>[</color><color=#f8f8f2>c1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f92672>[</color><color=#f8f8f2>c1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>ret</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f92672>[</color><color=#f8f8f2>c1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f92672>[</color><color=#f8f8f2>c1</color><color=#f92672>]</color><color=#f8f8f2>;</color>

            <color=#66d9ef>return</color> <color=#f8f8f2>ret</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Returns the average color for this cube</color>
<color=#75715e>         *</color>
<color=#75715e>         * @return the average</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>averageColor</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>count</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>float</color> <color=#f8f8f2>red</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>grn</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>blu</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>minR</color> <color=#f92672>=</color> <color=#f8f8f2>min</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>minG</color> <color=#f92672>=</color> <color=#f8f8f2>min</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>minB</color> <color=#f92672>=</color> <color=#f8f8f2>min</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>maxR</color> <color=#f92672>=</color> <color=#f8f8f2>max</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxG</color> <color=#f92672>=</color> <color=#f8f8f2>max</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxB</color> <color=#f92672>=</color> <color=#f8f8f2>max</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>minIdx</color> <color=#f92672>=</color> <color=#f8f8f2>{</color><color=#f8f8f2>minR</color> <color=#f92672>>></color> <color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#f8f8f2>minG</color> <color=#f92672>>></color> <color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#f8f8f2>minB</color> <color=#f92672>>></color> <color=#ae81ff>4</color><color=#f8f8f2>};</color>
            <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>maxIdx</color> <color=#f92672>=</color> <color=#f8f8f2>{</color><color=#f8f8f2>maxR</color> <color=#f92672>>></color> <color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxG</color> <color=#f92672>>></color> <color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#f8f8f2>maxB</color> <color=#f92672>>></color> <color=#ae81ff>4</color><color=#f8f8f2>};</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>val</color><color=#f8f8f2>,</color> <color=#f8f8f2>ired</color><color=#f8f8f2>,</color> <color=#f8f8f2>igrn</color><color=#f8f8f2>,</color> <color=#f8f8f2>iblu</color><color=#f8f8f2>;</color>
            <color=#66d9ef>float</color> <color=#f8f8f2>weight</color><color=#f8f8f2>;</color>

            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>minIdx</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><=</color> <color=#f8f8f2>maxIdx</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>idx1</color> <color=#f92672>=</color> <color=#f8f8f2>i</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>

                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>minIdx</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><=</color> <color=#f8f8f2>maxIdx</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>int</color> <color=#f8f8f2>idx2</color> <color=#f92672>=</color> <color=#f8f8f2>idx1</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672><<</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>

                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#f8f8f2>minIdx</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color> <color=#f8f8f2>k</color> <color=#f92672><=</color> <color=#f8f8f2>maxIdx</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color> <color=#f8f8f2>k</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>int</color> <color=#f8f8f2>idx</color> <color=#f92672>=</color> <color=#f8f8f2>idx2</color> <color=#f92672>|</color> <color=#f8f8f2>k</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Counter</color><color=#f92672>></color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>colors</color><color=#f92672>[</color><color=#f8f8f2>idx</color><color=#f92672>]</color><color=#f8f8f2>;</color>

                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color>

                        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Counter</color> <color=#f8f8f2>c</color> <color=#f8f8f2>:</color> <color=#f8f8f2>v</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>val</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>ired</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>&</color> <color=#ae81ff>0xFF0000</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>igrn</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>&</color> <color=#ae81ff>0x00FF00</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>iblu</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>val</color> <color=#f92672>&</color> <color=#ae81ff>0x0000FF</color><color=#f8f8f2>);</color>

                            <color=#66d9ef>if</color> <color=#f8f8f2>(((</color><color=#f8f8f2>ired</color> <color=#f92672>>=</color> <color=#f8f8f2>minR</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>ired</color> <color=#f92672><=</color> <color=#f8f8f2>maxR</color><color=#f8f8f2>))</color> <color=#f92672>&&</color> <color=#f8f8f2>((</color><color=#f8f8f2>igrn</color> <color=#f92672>>=</color> <color=#f8f8f2>minG</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>igrn</color> <color=#f92672><=</color> <color=#f8f8f2>maxG</color><color=#f8f8f2>))</color> <color=#f92672>&&</color> <color=#f8f8f2>((</color><color=#f8f8f2>iblu</color> <color=#f92672>>=</color> <color=#f8f8f2>minB</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>iblu</color> <color=#f92672><=</color> <color=#f8f8f2>maxB</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
                                <color=#f8f8f2>weight</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>c</color><color=#f8f8f2>.</color><color=#a6e22e>count</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>count</color><color=#f8f8f2>);</color>
                                <color=#f8f8f2>red</color> <color=#f92672>+=</color> <color=#f8f8f2>((</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>ired</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>weight</color><color=#f8f8f2>;</color>
                                <color=#f8f8f2>grn</color> <color=#f92672>+=</color> <color=#f8f8f2>((</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>igrn</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>weight</color><color=#f8f8f2>;</color>
                                <color=#f8f8f2>blu</color> <color=#f92672>+=</color> <color=#f8f8f2>((</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>iblu</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>weight</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>}</color>
                        <color=#f8f8f2>}</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// System.out.println("RGB: [" + red + ", " +</color>
            <color=#75715e>//                    grn + ", " + blu + "]");</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>(((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>red</color> <color=#f92672>+</color> <color=#ae81ff>0.5f</color><color=#f8f8f2>))</color> <color=#f92672><<</color> <color=#ae81ff>16</color> <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>grn</color> <color=#f92672>+</color> <color=#ae81ff>0.5f</color><color=#f8f8f2>))</color> <color=#f92672><<</color> <color=#ae81ff>8</color> <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>blu</color> <color=#f92672>+</color> <color=#ae81ff>0.5f</color><color=#f8f8f2>)));</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color><color=#75715e>// end Cube</color>

    <color=#75715e>/**</color>
<color=#75715e>     * You cannot create this</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#a6e22e>IndexImage</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * @param pImage          the image to get {@code IndexColorModel} from</color>
<color=#75715e>     * @param pNumberOfColors the number of colors for the {@code IndexColorModel}</color>
<color=#75715e>     * @param pFast           {@code true} if fast</color>
<color=#75715e>     * @return an {@code IndexColorModel}</color>
<color=#75715e>     * @see #getIndexColorModel(Image, int, int)</color>
<color=#75715e>     * @deprecated Use {@link #getIndexColorModel(Image, int, int)} instead!</color>
<color=#75715e>     * This version will be removed in a later version of the API.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>IndexColorModel</color> <color=#a6e22e>getIndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>Image</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pNumberOfColors</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pFast</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>getIndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>pNumberOfColors</color><color=#f8f8f2>,</color> <color=#f8f8f2>pFast</color> <color=#f92672>?</color> <color=#f8f8f2>COLOR_SELECTION_FAST</color> <color=#f8f8f2>:</color> <color=#f8f8f2>COLOR_SELECTION_QUALITY</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets an {@code IndexColorModel} from the given image. If the image has an</color>
<color=#75715e>     * {@code IndexColorModel}, this will be returned. Otherwise, an {@code IndexColorModel}</color>
<color=#75715e>     * is created, using an adaptive palette.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pImage          the image to get {@code IndexColorModel} from</color>
<color=#75715e>     * @param pNumberOfColors the number of colors for the {@code IndexColorModel}</color>
<color=#75715e>     * @param pHints          one of {@link #COLOR_SELECTION_FAST},</color>
<color=#75715e>     *                        {@link #COLOR_SELECTION_QUALITY} or</color>
<color=#75715e>     *                        {@link #COLOR_SELECTION_DEFAULT}.</color>
<color=#75715e>     * @return The {@code IndexColorModel} from the given image, or a newly created</color>
<color=#75715e>     * {@code IndexColorModel} using an adaptive palette.</color>
<color=#75715e>     * @throws ImageConversionException if an exception occurred during color</color>
<color=#75715e>     *                                  model extraction.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>IndexColorModel</color> <color=#a6e22e>getIndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>Image</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pNumberOfColors</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pHints</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>ImageConversionException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>IndexColorModel</color> <color=#f8f8f2>icm</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>RenderedImage</color> <color=#f8f8f2>image</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pImage</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>RenderedImage</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>image</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>RenderedImage</color><color=#f8f8f2>)</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>cm</color> <color=#f92672>=</color> <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>getColorModel</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cm</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>IndexColorModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Test if we have right number of colors</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(((</color><color=#f8f8f2>IndexColorModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>cm</color><color=#f8f8f2>).</color><color=#a6e22e>getMapSize</color><color=#f8f8f2>()</color> <color=#f92672><=</color> <color=#f8f8f2>pNumberOfColors</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>//System.out.println("IndexColorModel from BufferedImage");</color>
                    <color=#f8f8f2>icm</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>IndexColorModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>cm</color><color=#f8f8f2>;</color><color=#75715e>// Done</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Else create from buffered image, hard way, see below</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Create from image using BufferedImageFactory</color>
            <color=#f8f8f2>BufferedImageFactory</color> <color=#f8f8f2>factory</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImageFactory</color><color=#f8f8f2>(</color><color=#f8f8f2>pImage</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>cm</color> <color=#f92672>=</color> <color=#f8f8f2>factory</color><color=#f8f8f2>.</color><color=#a6e22e>getColorModel</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>cm</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>IndexColorModel</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>((</color><color=#f8f8f2>IndexColorModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>cm</color><color=#f8f8f2>).</color><color=#a6e22e>getMapSize</color><color=#f8f8f2>()</color> <color=#f92672><=</color> <color=#f8f8f2>pNumberOfColors</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>//System.out.println("IndexColorModel from Image");</color>
                <color=#f8f8f2>icm</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>IndexColorModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>cm</color><color=#f8f8f2>;</color><color=#75715e>// Done</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Else create from (buffered) image, hard way</color>
                <color=#f8f8f2>image</color> <color=#f92672>=</color> <color=#f8f8f2>factory</color><color=#f8f8f2>.</color><color=#a6e22e>getBufferedImage</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// We now have at least a buffered image, create model from it</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>icm</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>icm</color> <color=#f92672>=</color> <color=#f8f8f2>createIndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>ImageUtil</color><color=#f8f8f2>.</color><color=#a6e22e>toBuffered</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>),</color> <color=#f8f8f2>pNumberOfColors</color><color=#f8f8f2>,</color> <color=#f8f8f2>pHints</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>icm</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>InverseColorMapIndexColorModel</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#75715e>// If possible, use faster code</color>
            <color=#f8f8f2>icm</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>InverseColorMapIndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>icm</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>icm</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates an {@code IndexColorModel} from the given image, using an adaptive</color>
<color=#75715e>     * palette.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pImage          the image to get {@code IndexColorModel} from</color>
<color=#75715e>     * @param pNumberOfColors the number of colors for the {@code IndexColorModel}</color>
<color=#75715e>     * @param pHints          use fast mode if possible (might give slightly lower</color>
<color=#75715e>     *                        quality)</color>
<color=#75715e>     * @return a new {@code IndexColorModel} created from the given image</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>IndexColorModel</color> <color=#a6e22e>createIndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pNumberOfColors</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pHints</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// TODO: Use ImageUtil.hasTransparentPixels(pImage, true) ||</color>
        <color=#75715e>// -- haraldK, 20021024, experimental, try to use one transparent pixel</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>useTransparency</color> <color=#f92672>=</color> <color=#f8f8f2>isTransparent</color><color=#f8f8f2>(</color><color=#f8f8f2>pHints</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useTransparency</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pNumberOfColors</color><color=#f92672>--</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>//System.out.println("Transp: " + useTransparency + " colors: " + pNumberOfColors);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#75715e>// Using 4 bits from R, G & B.</color>
        <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>(</color><color=#e6db74>"unchecked"</color><color=#f8f8f2>)</color>
        <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Counter</color><color=#f92672>>[]</color> <color=#f8f8f2>colors</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>List</color><color=#f92672>[</color><color=#ae81ff>1</color> <color=#f92672><<</color> <color=#ae81ff>12</color><color=#f92672>]</color><color=#f8f8f2>;</color><color=#75715e>// [4096]</color>

        <color=#75715e>// Speedup, doesn't decrease image quality much</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>step</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isFast</color><color=#f8f8f2>(</color><color=#f8f8f2>pHints</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>step</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#f8f8f2>height</color> <color=#f92672>/</color> <color=#ae81ff>16384</color><color=#f8f8f2>);</color><color=#75715e>// 128x128px</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>sampleCount</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>rgb</color><color=#f8f8f2>;</color>

        <color=#75715e>//for (int x = 0; x < width; x++) {</color>
        <color=#75715e>//for (int y = 0; y < height; y++) {</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#f8f8f2>x</color> <color=#f92672>%</color> <color=#f8f8f2>step</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672>+=</color> <color=#f8f8f2>step</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Count the number of color samples</color>
                <color=#f8f8f2>sampleCount</color><color=#f92672>++</color><color=#f8f8f2>;</color>

                <color=#75715e>// Get ARGB pixel from image</color>
                <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>pImage</color><color=#f8f8f2>.</color><color=#a6e22e>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFFFFFF</color><color=#f8f8f2>);</color>

                <color=#75715e>// Get index from high four bits of each component.</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>index</color> <color=#f92672>=</color> <color=#f8f8f2>(((</color><color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0xF00000</color><color=#f8f8f2>)</color> <color=#f92672>>>></color> <color=#ae81ff>12</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0x00F000</color><color=#f8f8f2>)</color> <color=#f92672>>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>((</color><color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#ae81ff>0x0000F0</color><color=#f8f8f2>)</color> <color=#f92672>>>></color> <color=#ae81ff>4</color><color=#f8f8f2>));</color>

                <color=#75715e>// Get the 'hash vector' for that key.</color>
                <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>Counter</color><color=#f92672>></color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>colors</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color><color=#f8f8f2>;</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>v</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// No colors in this bin yet so create vector and</color>
                    <color=#75715e>// add color.</color>
                    <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>Counter</color><color=#f92672>></color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Counter</color><color=#f8f8f2>(</color><color=#f8f8f2>rgb</color><color=#f8f8f2>));</color>
                    <color=#f8f8f2>colors</color><color=#f92672>[</color><color=#f8f8f2>index</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>v</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#75715e>// Find our color in the bin or create a counter for it.</color>
                    <color=#f8f8f2>Iterator</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>

                    <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                            <color=#75715e>// try adding our color to each counter...</color>
                            <color=#66d9ef>if</color> <color=#f8f8f2>(((</color><color=#f8f8f2>Counter</color><color=#f8f8f2>)</color> <color=#f8f8f2>i</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>()).</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>rgb</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>}</color>
                        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>v</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Counter</color><color=#f8f8f2>(</color><color=#f8f8f2>rgb</color><color=#f8f8f2>));</color>
                            <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// All colours found, reduce to pNumberOfColors</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>numberOfCubes</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>fCube</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>Cube</color><color=#f92672>[]</color> <color=#f8f8f2>cubes</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Cube</color><color=#f92672>[</color><color=#f8f8f2>pNumberOfColors</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>cubes</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Cube</color><color=#f8f8f2>(</color><color=#f8f8f2>colors</color><color=#f8f8f2>,</color> <color=#f8f8f2>sampleCount</color><color=#f8f8f2>);</color>

        <color=#75715e>//cubes[0] = new Cube(colors, width * height);</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>numberOfCubes</color> <color=#f92672><</color> <color=#f8f8f2>pNumberOfColors</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>cubes</color><color=#f92672>[</color><color=#f8f8f2>fCube</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>isDone</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>fCube</color><color=#f92672>++</color><color=#f8f8f2>;</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fCube</color> <color=#f92672>==</color> <color=#f8f8f2>numberOfCubes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fCube</color> <color=#f92672>==</color> <color=#f8f8f2>numberOfCubes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>Cube</color> <color=#f8f8f2>cube</color> <color=#f92672>=</color> <color=#f8f8f2>cubes</color><color=#f92672>[</color><color=#f8f8f2>fCube</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>Cube</color> <color=#f8f8f2>newCube</color> <color=#f92672>=</color> <color=#f8f8f2>cube</color><color=#f8f8f2>.</color><color=#a6e22e>split</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newCube</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newCube</color><color=#f8f8f2>.</color><color=#a6e22e>count</color> <color=#f92672>></color> <color=#f8f8f2>cube</color><color=#f8f8f2>.</color><color=#a6e22e>count</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>Cube</color> <color=#f8f8f2>tmp</color> <color=#f92672>=</color> <color=#f8f8f2>cube</color><color=#f8f8f2>;</color>

                    <color=#f8f8f2>cube</color> <color=#f92672>=</color> <color=#f8f8f2>newCube</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>newCube</color> <color=#f92672>=</color> <color=#f8f8f2>tmp</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#f8f8f2>fCube</color><color=#f8f8f2>;</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>cube</color><color=#f8f8f2>.</color><color=#a6e22e>count</color><color=#f8f8f2>;</color>

                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>fCube</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>numberOfCubes</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cubes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>count</color> <color=#f92672><</color> <color=#f8f8f2>count</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                    <color=#f8f8f2>cubes</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>cubes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>cubes</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>cube</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>newCube</color><color=#f8f8f2>.</color><color=#a6e22e>count</color><color=#f8f8f2>;</color>

                <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>j</color> <color=#f92672><</color> <color=#f8f8f2>numberOfCubes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>cubes</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>count</color> <color=#f92672><</color> <color=#f8f8f2>count</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                    <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>cubes</color><color=#f8f8f2>,</color> <color=#f8f8f2>j</color><color=#f8f8f2>,</color> <color=#f8f8f2>cubes</color><color=#f8f8f2>,</color> <color=#f8f8f2>j</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#f8f8f2>numberOfCubes</color> <color=#f92672>-</color> <color=#f8f8f2>j</color><color=#f8f8f2>);</color>

                <color=#f8f8f2>cubes</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#75715e>/*++*/</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>newCube</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>numberOfCubes</color><color=#f92672>++</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Create RGB arrays with correct number of colors</color>
        <color=#75715e>// If we have transparency, the last color will be the transparent one</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>useTransparency</color> <color=#f92672>?</color> <color=#f8f8f2>numberOfCubes</color> <color=#f92672>+</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#f8f8f2>numberOfCubes</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>useTransparency</color> <color=#f92672>?</color> <color=#f8f8f2>numberOfCubes</color> <color=#f92672>+</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#f8f8f2>numberOfCubes</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>useTransparency</color> <color=#f92672>?</color> <color=#f8f8f2>numberOfCubes</color> <color=#f92672>+</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#f8f8f2>numberOfCubes</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>numberOfCubes</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>val</color> <color=#f92672>=</color> <color=#f8f8f2>cubes</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>averageColor</color><color=#f8f8f2>();</color>

            <color=#f8f8f2>r</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>val</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>g</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>val</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>b</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>val</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>);</color>

            <color=#75715e>//System.out.println("Color [" + i + "]: #" +</color>
            <color=#75715e>//                   (((val>>16)<16)?"0":"") +</color>
            <color=#75715e>//                   Integer.toHexString(val));</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// For some reason using less than 8 bits causes a bug in the dither</color>
        <color=#75715e>//  - transparency added to all totally black colors?</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>numOfBits</color> <color=#f92672>=</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color>

        <color=#75715e>// -- haraldK, 20021024, as suggested by Thomas E. Deweese</color>
        <color=#75715e>// plus adding a transparent pixel</color>
        <color=#f8f8f2>IndexColorModel</color> <color=#f8f8f2>icm</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>useTransparency</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>icm</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>InverseColorMapIndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>numOfBits</color><color=#f8f8f2>,</color> <color=#f8f8f2>r</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>r</color><color=#f8f8f2>,</color> <color=#f8f8f2>g</color><color=#f8f8f2>,</color> <color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>r</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>icm</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>InverseColorMapIndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>numOfBits</color><color=#f8f8f2>,</color> <color=#f8f8f2>r</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>r</color><color=#f8f8f2>,</color> <color=#f8f8f2>g</color><color=#f8f8f2>,</color> <color=#f8f8f2>b</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>icm</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts the input image (must be {@code TYPE_INT_RGB} or</color>
<color=#75715e>     * {@code TYPE_INT_ARGB}) to an indexed image. Generating an adaptive</color>
<color=#75715e>     * palette (8 bit) from the color data in the image, and uses default</color>
<color=#75715e>     * dither.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * The image returned is a new image, the input image is not modified.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pImage the BufferedImage to index and get color information from.</color>
<color=#75715e>     * @return the indexed BufferedImage. The image will be of type</color>
<color=#75715e>     * {@code BufferedImage.TYPE_BYTE_INDEXED}, and use an</color>
<color=#75715e>     * {@code IndexColorModel}.</color>
<color=#75715e>     * @see BufferedImage#TYPE_BYTE_INDEXED</color>
<color=#75715e>     * @see IndexColorModel</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>getIndexedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>getIndexedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#ae81ff>256</color><color=#f8f8f2>,</color> <color=#f8f8f2>DITHER_DEFAULT</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Tests if the hint {@code COLOR_SELECTION_QUALITY} is <EM>not</EM></color>
<color=#75715e>     * set.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pHints hints</color>
<color=#75715e>     * @return true if the hint {@code COLOR_SELECTION_QUALITY}</color>
<color=#75715e>     * is <EM>not</EM> set.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isFast</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pHints</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>pHints</color> <color=#f92672>&</color> <color=#f8f8f2>COLOR_SELECTION_MASK</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#f8f8f2>COLOR_SELECTION_QUALITY</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Tests if the hint {@code TRANSPARENCY_BITMASK} or</color>
<color=#75715e>     * {@code TRANSPARENCY_TRANSLUCENT} is set.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pHints hints</color>
<color=#75715e>     * @return true if the hint {@code TRANSPARENCY_BITMASK} or</color>
<color=#75715e>     * {@code TRANSPARENCY_TRANSLUCENT} is set.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isTransparent</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pHints</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>pHints</color> <color=#f92672>&</color> <color=#f8f8f2>TRANSPARENCY_BITMASK</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>pHints</color> <color=#f92672>&</color> <color=#f8f8f2>TRANSPARENCY_TRANSLUCENT</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts the input image (must be {@code TYPE_INT_RGB} or</color>
<color=#75715e>     * {@code TYPE_INT_ARGB}) to an indexed image. If the palette image</color>
<color=#75715e>     * uses an {@code IndexColorModel}, this will be used. Otherwise, generating an</color>
<color=#75715e>     * adaptive palette (8 bit) from the given palette image.</color>
<color=#75715e>     * Dithering, transparency and color selection is controlled with the</color>
<color=#75715e>     * {@code pHints}parameter.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * The image returned is a new image, the input image is not modified.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pImage   the BufferedImage to index</color>
<color=#75715e>     * @param pPalette the Image to read color information from</color>
<color=#75715e>     * @param pMatte   the background color, used where the original image was</color>
<color=#75715e>     *                 transparent</color>
<color=#75715e>     * @param pHints   hints that control output quality and speed.</color>
<color=#75715e>     * @return the indexed BufferedImage. The image will be of type</color>
<color=#75715e>     * {@code BufferedImage.TYPE_BYTE_INDEXED} or</color>
<color=#75715e>     * {@code BufferedImage.TYPE_BYTE_BINARY}, and use an</color>
<color=#75715e>     * {@code IndexColorModel}.</color>
<color=#75715e>     * @throws ImageConversionException if an exception occurred during color</color>
<color=#75715e>     *                                  model extraction.</color>
<color=#75715e>     * @see #DITHER_DIFFUSION</color>
<color=#75715e>     * @see #DITHER_NONE</color>
<color=#75715e>     * @see #COLOR_SELECTION_FAST</color>
<color=#75715e>     * @see #COLOR_SELECTION_QUALITY</color>
<color=#75715e>     * @see #TRANSPARENCY_OPAQUE</color>
<color=#75715e>     * @see #TRANSPARENCY_BITMASK</color>
<color=#75715e>     * @see BufferedImage#TYPE_BYTE_INDEXED</color>
<color=#75715e>     * @see BufferedImage#TYPE_BYTE_BINARY</color>
<color=#75715e>     * @see IndexColorModel</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>getIndexedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>Image</color> <color=#f8f8f2>pPalette</color><color=#f8f8f2>,</color> <color=#f8f8f2>Color</color> <color=#f8f8f2>pMatte</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pHints</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>ImageConversionException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>getIndexedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>getIndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>pPalette</color><color=#f8f8f2>,</color> <color=#ae81ff>256</color><color=#f8f8f2>,</color> <color=#f8f8f2>pHints</color><color=#f8f8f2>),</color> <color=#f8f8f2>pMatte</color><color=#f8f8f2>,</color> <color=#f8f8f2>pHints</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts the input image (must be  {@code TYPE_INT_RGB} or</color>
<color=#75715e>     * {@code TYPE_INT_ARGB}) to an indexed image. Generating an adaptive</color>
<color=#75715e>     * palette with the given number of colors.</color>
<color=#75715e>     * Dithering, transparency and color selection is controlled with the</color>
<color=#75715e>     * {@code pHints}parameter.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * The image returned is a new image, the input image is not modified.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pImage          the BufferedImage to index</color>
<color=#75715e>     * @param pNumberOfColors the number of colors for the image</color>
<color=#75715e>     * @param pMatte          the background color, used where the original image was</color>
<color=#75715e>     *                        transparent</color>
<color=#75715e>     * @param pHints          hints that control output quality and speed.</color>
<color=#75715e>     * @return the indexed BufferedImage. The image will be of type</color>
<color=#75715e>     * {@code BufferedImage.TYPE_BYTE_INDEXED} or</color>
<color=#75715e>     * {@code BufferedImage.TYPE_BYTE_BINARY}, and use an</color>
<color=#75715e>     * {@code IndexColorModel}.</color>
<color=#75715e>     * @see #DITHER_DIFFUSION</color>
<color=#75715e>     * @see #DITHER_NONE</color>
<color=#75715e>     * @see #COLOR_SELECTION_FAST</color>
<color=#75715e>     * @see #COLOR_SELECTION_QUALITY</color>
<color=#75715e>     * @see #TRANSPARENCY_OPAQUE</color>
<color=#75715e>     * @see #TRANSPARENCY_BITMASK</color>
<color=#75715e>     * @see BufferedImage#TYPE_BYTE_INDEXED</color>
<color=#75715e>     * @see BufferedImage#TYPE_BYTE_BINARY</color>
<color=#75715e>     * @see IndexColorModel</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>getIndexedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pNumberOfColors</color><color=#f8f8f2>,</color> <color=#f8f8f2>Color</color> <color=#f8f8f2>pMatte</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pHints</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// NOTE: We need to apply matte before creating color model, otherwise we</color>
        <color=#75715e>// won't have colors for potential faded transitions</color>
        <color=#f8f8f2>IndexColorModel</color> <color=#f8f8f2>icm</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pMatte</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>icm</color> <color=#f92672>=</color> <color=#f8f8f2>getIndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>createSolid</color><color=#f8f8f2>(</color><color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>pMatte</color><color=#f8f8f2>),</color> <color=#f8f8f2>pNumberOfColors</color><color=#f8f8f2>,</color> <color=#f8f8f2>pHints</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>icm</color> <color=#f92672>=</color> <color=#f8f8f2>getIndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>pNumberOfColors</color><color=#f8f8f2>,</color> <color=#f8f8f2>pHints</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// If we found less colors, then no need to dither</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pHints</color> <color=#f92672>&</color> <color=#f8f8f2>DITHER_MASK</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#f8f8f2>DITHER_NONE</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>icm</color><color=#f8f8f2>.</color><color=#a6e22e>getMapSize</color><color=#f8f8f2>()</color> <color=#f92672><</color> <color=#f8f8f2>pNumberOfColors</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pHints</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>pHints</color> <color=#f92672>&</color> <color=#f92672>~</color><color=#f8f8f2>DITHER_MASK</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>DITHER_NONE</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>getIndexedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>icm</color><color=#f8f8f2>,</color> <color=#f8f8f2>pMatte</color><color=#f8f8f2>,</color> <color=#f8f8f2>pHints</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts the input image (must be {@code TYPE_INT_RGB} or</color>
<color=#75715e>     * {@code TYPE_INT_ARGB}) to an indexed image. Using the supplied</color>
<color=#75715e>     * {@code IndexColorModel}'s palette.</color>
<color=#75715e>     * Dithering, transparency and color selection is controlled with the</color>
<color=#75715e>     * {@code pHints} parameter.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * The image returned is a new image, the input image is not modified.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pImage  the BufferedImage to index</color>
<color=#75715e>     * @param pColors an {@code IndexColorModel} containing the color information</color>
<color=#75715e>     * @param pMatte  the background color, used where the original image was</color>
<color=#75715e>     *                transparent. Also note that any transparent antialias will be</color>
<color=#75715e>     *                rendered against this color.</color>
<color=#75715e>     * @param pHints  RenderingHints that control output quality and speed.</color>
<color=#75715e>     * @return the indexed BufferedImage. The image will be of type</color>
<color=#75715e>     * {@code BufferedImage.TYPE_BYTE_INDEXED} or</color>
<color=#75715e>     * {@code BufferedImage.TYPE_BYTE_BINARY}, and use an</color>
<color=#75715e>     * {@code IndexColorModel}.</color>
<color=#75715e>     * @see #DITHER_DIFFUSION</color>
<color=#75715e>     * @see #DITHER_NONE</color>
<color=#75715e>     * @see #COLOR_SELECTION_FAST</color>
<color=#75715e>     * @see #COLOR_SELECTION_QUALITY</color>
<color=#75715e>     * @see #TRANSPARENCY_OPAQUE</color>
<color=#75715e>     * @see #TRANSPARENCY_BITMASK</color>
<color=#75715e>     * @see BufferedImage#TYPE_BYTE_INDEXED</color>
<color=#75715e>     * @see BufferedImage#TYPE_BYTE_BINARY</color>
<color=#75715e>     * @see IndexColorModel</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>getIndexedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>IndexColorModel</color> <color=#f8f8f2>pColors</color><color=#f8f8f2>,</color> <color=#f8f8f2>Color</color> <color=#f8f8f2>pMatte</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pHints</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// TODO: Consider:</color>
        <color=#75715e>/*</color>
<color=#75715e>        if (pImage.getType() == BufferedImage.TYPE_BYTE_INDEXED</color>
<color=#75715e>            || pImage.getType() == BufferedImage.TYPE_BYTE_BINARY) {</color>
<color=#75715e>            pImage = ImageUtil.toBufferedImage(pImage, BufferedImage.TYPE_INT_ARGB);</color>
<color=#75715e>        }</color>
<color=#75715e>        */</color>

        <color=#75715e>// Get dimensions</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#75715e>// Support transparency?</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>transparency</color> <color=#f92672>=</color> <color=#f8f8f2>isTransparent</color><color=#f8f8f2>(</color><color=#f8f8f2>pHints</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>pImage</color><color=#f8f8f2>.</color><color=#a6e22e>getColorModel</color><color=#f8f8f2>().</color><color=#a6e22e>getTransparency</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>Transparency</color><color=#f8f8f2>.</color><color=#a6e22e>OPAQUE</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>pColors</color><color=#f8f8f2>.</color><color=#a6e22e>getTransparency</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>Transparency</color><color=#f8f8f2>.</color><color=#a6e22e>OPAQUE</color><color=#f8f8f2>);</color>

        <color=#75715e>// Create image with solid background</color>
        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>solid</color> <color=#f92672>=</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pMatte</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color> <color=#75715e>// transparency doesn't really matter</color>
            <color=#f8f8f2>solid</color> <color=#f92672>=</color> <color=#f8f8f2>createSolid</color><color=#f8f8f2>(</color><color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>pMatte</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>indexed</color><color=#f8f8f2>;</color>

        <color=#75715e>// Support TYPE_BYTE_BINARY, but only for 2 bit images, as the default</color>
        <color=#75715e>// dither does not work with TYPE_BYTE_BINARY it seems...</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pColors</color><color=#f8f8f2>.</color><color=#a6e22e>getMapSize</color><color=#f8f8f2>()</color> <color=#f92672>></color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>indexed</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BYTE_INDEXED</color><color=#f8f8f2>,</color> <color=#f8f8f2>pColors</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>indexed</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BYTE_BINARY</color><color=#f8f8f2>,</color> <color=#f8f8f2>pColors</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Apply dither if requested</color>
        <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>pHints</color> <color=#f92672>&</color> <color=#f8f8f2>DITHER_MASK</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>DITHER_DIFFUSION</color><color=#f8f8f2>:</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>DITHER_DIFFUSION_ALTSCANS</color><color=#f8f8f2>:</color>
                <color=#75715e>// Create a DiffusionDither to apply dither to indexed</color>
                <color=#f8f8f2>DiffusionDither</color> <color=#f8f8f2>dither</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DiffusionDither</color><color=#f8f8f2>(</color><color=#f8f8f2>pColors</color><color=#f8f8f2>);</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pHints</color> <color=#f92672>&</color> <color=#f8f8f2>DITHER_MASK</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f8f8f2>DITHER_DIFFUSION_ALTSCANS</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>dither</color><color=#f8f8f2>.</color><color=#a6e22e>setAlternateScans</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>dither</color><color=#f8f8f2>.</color><color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>solid</color><color=#f8f8f2>,</color> <color=#f8f8f2>indexed</color><color=#f8f8f2>);</color>

                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>DITHER_NONE</color><color=#f8f8f2>:</color>
                <color=#75715e>// Just copy pixels, without dither</color>
                <color=#75715e>// NOTE: This seems to be slower than the method below, using</color>
                <color=#75715e>// Graphics2D.drawImage, and VALUE_DITHER_DISABLE,</color>
                <color=#75715e>// however you possibly end up getting a dithered image anyway,</color>
                <color=#75715e>// therefore, do it slower and produce correct result. :-)</color>
                <color=#f8f8f2>CopyDither</color> <color=#f8f8f2>copy</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CopyDither</color><color=#f8f8f2>(</color><color=#f8f8f2>pColors</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>copy</color><color=#f8f8f2>.</color><color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>solid</color><color=#f8f8f2>,</color> <color=#f8f8f2>indexed</color><color=#f8f8f2>);</color>

                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>DITHER_DEFAULT</color><color=#f8f8f2>:</color>
                <color=#75715e>// This is the default</color>
            <color=#66d9ef>default</color><color=#f8f8f2>:</color>
                <color=#75715e>// Render image data onto indexed image, using default</color>
                <color=#75715e>// (probably we get dither, but it depends on the GFX engine).</color>
                <color=#f8f8f2>Graphics2D</color> <color=#f8f8f2>g2d</color> <color=#f92672>=</color> <color=#f8f8f2>indexed</color><color=#f8f8f2>.</color><color=#a6e22e>createGraphics</color><color=#f8f8f2>();</color>
                <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>RenderingHints</color> <color=#f8f8f2>hints</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>(</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>KEY_DITHERING</color><color=#f8f8f2>,</color> <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>VALUE_DITHER_ENABLE</color><color=#f8f8f2>);</color>

                    <color=#f8f8f2>g2d</color><color=#f8f8f2>.</color><color=#a6e22e>setRenderingHints</color><color=#f8f8f2>(</color><color=#f8f8f2>hints</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>g2d</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>solid</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>g2d</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color>

                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Transparency support, this approach seems lame, but it's the only</color>
        <color=#75715e>// solution I've found until now (that actually works).</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>transparency</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Re-apply the alpha-channel of the original image</color>
            <color=#f8f8f2>applyAlpha</color><color=#f8f8f2>(</color><color=#f8f8f2>indexed</color><color=#f8f8f2>,</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Return the indexed BufferedImage</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>indexed</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts the input image (must be  {@code TYPE_INT_RGB} or</color>
<color=#75715e>     * {@code TYPE_INT_ARGB}) to an indexed image. Generating an adaptive</color>
<color=#75715e>     * palette with the given number of colors.</color>
<color=#75715e>     * Dithering, transparency and color selection is controlled with the</color>
<color=#75715e>     * {@code pHints}parameter.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * The image returned is a new image, the input image is not modified.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pImage          the BufferedImage to index</color>
<color=#75715e>     * @param pNumberOfColors the number of colors for the image</color>
<color=#75715e>     * @param pHints          hints that control output quality and speed.</color>
<color=#75715e>     * @return the indexed BufferedImage. The image will be of type</color>
<color=#75715e>     * {@code BufferedImage.TYPE_BYTE_INDEXED} or</color>
<color=#75715e>     * {@code BufferedImage.TYPE_BYTE_BINARY}, and use an</color>
<color=#75715e>     * {@code IndexColorModel}.</color>
<color=#75715e>     * @see #DITHER_DIFFUSION</color>
<color=#75715e>     * @see #DITHER_NONE</color>
<color=#75715e>     * @see #COLOR_SELECTION_FAST</color>
<color=#75715e>     * @see #COLOR_SELECTION_QUALITY</color>
<color=#75715e>     * @see #TRANSPARENCY_OPAQUE</color>
<color=#75715e>     * @see #TRANSPARENCY_BITMASK</color>
<color=#75715e>     * @see BufferedImage#TYPE_BYTE_INDEXED</color>
<color=#75715e>     * @see BufferedImage#TYPE_BYTE_BINARY</color>
<color=#75715e>     * @see IndexColorModel</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>getIndexedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pNumberOfColors</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pHints</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>getIndexedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>pNumberOfColors</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>pHints</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts the input image (must be {@code TYPE_INT_RGB} or</color>
<color=#75715e>     * {@code TYPE_INT_ARGB}) to an indexed image. Using the supplied</color>
<color=#75715e>     * {@code IndexColorModel}'s palette.</color>
<color=#75715e>     * Dithering, transparency and color selection is controlled with the</color>
<color=#75715e>     * {@code pHints}parameter.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * The image returned is a new image, the input image is not modified.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pImage  the BufferedImage to index</color>
<color=#75715e>     * @param pColors an {@code IndexColorModel} containing the color information</color>
<color=#75715e>     * @param pHints  RenderingHints that control output quality and speed.</color>
<color=#75715e>     * @return the indexed BufferedImage. The image will be of type</color>
<color=#75715e>     * {@code BufferedImage.TYPE_BYTE_INDEXED} or</color>
<color=#75715e>     * {@code BufferedImage.TYPE_BYTE_BINARY}, and use an</color>
<color=#75715e>     * {@code IndexColorModel}.</color>
<color=#75715e>     * @see #DITHER_DIFFUSION</color>
<color=#75715e>     * @see #DITHER_NONE</color>
<color=#75715e>     * @see #COLOR_SELECTION_FAST</color>
<color=#75715e>     * @see #COLOR_SELECTION_QUALITY</color>
<color=#75715e>     * @see #TRANSPARENCY_OPAQUE</color>
<color=#75715e>     * @see #TRANSPARENCY_BITMASK</color>
<color=#75715e>     * @see BufferedImage#TYPE_BYTE_INDEXED</color>
<color=#75715e>     * @see BufferedImage#TYPE_BYTE_BINARY</color>
<color=#75715e>     * @see IndexColorModel</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>getIndexedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>IndexColorModel</color> <color=#f8f8f2>pColors</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pHints</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>getIndexedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>pColors</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>pHints</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts the input image (must be {@code TYPE_INT_RGB} or</color>
<color=#75715e>     * {@code TYPE_INT_ARGB}) to an indexed image. If the palette image</color>
<color=#75715e>     * uses an {@code IndexColorModel}, this will be used. Otherwise, generating an</color>
<color=#75715e>     * adaptive palette (8 bit) from the given palette image.</color>
<color=#75715e>     * Dithering, transparency and color selection is controlled with the</color>
<color=#75715e>     * {@code pHints}parameter.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * The image returned is a new image, the input image is not modified.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pImage   the BufferedImage to index</color>
<color=#75715e>     * @param pPalette the Image to read color information from</color>
<color=#75715e>     * @param pHints   hints that control output quality and speed.</color>
<color=#75715e>     * @return the indexed BufferedImage. The image will be of type</color>
<color=#75715e>     * {@code BufferedImage.TYPE_BYTE_INDEXED} or</color>
<color=#75715e>     * {@code BufferedImage.TYPE_BYTE_BINARY}, and use an</color>
<color=#75715e>     * {@code IndexColorModel}.</color>
<color=#75715e>     * @see #DITHER_DIFFUSION</color>
<color=#75715e>     * @see #DITHER_NONE</color>
<color=#75715e>     * @see #COLOR_SELECTION_FAST</color>
<color=#75715e>     * @see #COLOR_SELECTION_QUALITY</color>
<color=#75715e>     * @see #TRANSPARENCY_OPAQUE</color>
<color=#75715e>     * @see #TRANSPARENCY_BITMASK</color>
<color=#75715e>     * @see BufferedImage#TYPE_BYTE_INDEXED</color>
<color=#75715e>     * @see BufferedImage#TYPE_BYTE_BINARY</color>
<color=#75715e>     * @see IndexColorModel</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>getIndexedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>Image</color> <color=#f8f8f2>pPalette</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pHints</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>getIndexedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>pPalette</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>pHints</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a copy of the given image, with a solid background</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pOriginal   the original image</color>
<color=#75715e>     * @param pBackground the background color</color>
<color=#75715e>     * @return a new {@code BufferedImage}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>createSolid</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pOriginal</color><color=#f8f8f2>,</color> <color=#f8f8f2>Color</color> <color=#f8f8f2>pBackground</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Create a temporary image of same dimension and type</color>
        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>solid</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pOriginal</color><color=#f8f8f2>.</color><color=#a6e22e>getColorModel</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pOriginal</color><color=#f8f8f2>.</color><color=#a6e22e>copyData</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>),</color> <color=#f8f8f2>pOriginal</color><color=#f8f8f2>.</color><color=#a6e22e>isAlphaPremultiplied</color><color=#f8f8f2>(),</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>Graphics2D</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>solid</color><color=#f8f8f2>.</color><color=#a6e22e>createGraphics</color><color=#f8f8f2>();</color>

        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Clear in background color</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>setColor</color><color=#f8f8f2>(</color><color=#f8f8f2>pBackground</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>setComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>AlphaComposite</color><color=#f8f8f2>.</color><color=#a6e22e>DstOver</color><color=#f8f8f2>);</color><color=#75715e>// Paint "underneath"</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>fillRect</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOriginal</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pOriginal</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>finally</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>solid</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Applies the alpha-component of the alpha image to the given image.</color>
<color=#75715e>     * The given image is modified in place.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pImage the image to apply alpha to</color>
<color=#75715e>     * @param pAlpha the image containing the alpha</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>applyAlpha</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pAlpha</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Apply alpha as transparency, using threshold of 25%</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>pAlpha</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>pAlpha</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

                <color=#75715e>// Get alpha component of pixel, if less than 25% opaque</color>
                <color=#75715e>// (0x40 = 64 => 25% of 256), the pixel will be transparent</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(((</color><color=#f8f8f2>pAlpha</color><color=#f8f8f2>.</color><color=#a6e22e>getRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>)</color> <color=#f92672><</color> <color=#ae81ff>0x40</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>pImage</color><color=#f8f8f2>.</color><color=#a6e22e>setRGB</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#ae81ff>0x00FFFFFF</color><color=#f8f8f2>);</color> <color=#75715e>// 100% transparent</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>     * This class is also a command-line utility.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>main</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>pArgs</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Defaults</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>argIdx</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>speedTest</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>overWrite</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>monochrome</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>gray</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>numColors</color> <color=#f92672>=</color> <color=#ae81ff>256</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>dither</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>quality</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>Color</color> <color=#f8f8f2>background</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>transparency</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>paletteFileName</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>boolean</color> <color=#f8f8f2>errArgs</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

        <color=#75715e>// Parse args</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>((</color><color=#f8f8f2>argIdx</color> <color=#f92672><</color> <color=#f8f8f2>pArgs</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#e6db74>'-'</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>>=</color> <color=#ae81ff>2</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#e6db74>'s'</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"--speedtest"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>argIdx</color><color=#f92672>++</color><color=#f8f8f2>;</color>

                <color=#75715e>// Get number of iterations</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pArgs</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#f8f8f2>argIdx</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#e6db74>'-'</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>speedTest</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>++]</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NumberFormatException</color> <color=#f8f8f2>nfe</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>errArgs</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                        <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

                    <color=#75715e>// Default to 10 iterations</color>
                    <color=#f8f8f2>speedTest</color> <color=#f92672>=</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#e6db74>'w'</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"--overwrite"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>overWrite</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>argIdx</color><color=#f92672>++</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#e6db74>'c'</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"--colors"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>argIdx</color><color=#f92672>++</color><color=#f8f8f2>;</color>

                <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>numColors</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>parseInt</color><color=#f8f8f2>(</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>++]</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NumberFormatException</color> <color=#f8f8f2>nfe</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>errArgs</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#e6db74>'g'</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"--grayscale"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>argIdx</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>gray</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#e6db74>'m'</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"--monochrome"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>argIdx</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>numColors</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>monochrome</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#e6db74>'d'</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"--dither"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>argIdx</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>dither</color> <color=#f92672>=</color> <color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>++]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#e6db74>'p'</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"--palette"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>argIdx</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>paletteFileName</color> <color=#f92672>=</color> <color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>++]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#e6db74>'q'</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"--quality"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>argIdx</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>quality</color> <color=#f92672>=</color> <color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>++]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#e6db74>'b'</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"--bgcolor"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>argIdx</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>background</color> <color=#f92672>=</color> <color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>toColor</color><color=#f8f8f2>(</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>++]</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>errArgs</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#e6db74>'t'</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"--transparency"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>argIdx</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>transparency</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#e6db74>'f'</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"--outputformat"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>argIdx</color><color=#f92672>++</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>(</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>++]</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#e6db74>'h'</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>]</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#e6db74>"--help"</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>argIdx</color><color=#f92672>++</color><color=#f8f8f2>;</color>

                <color=#75715e>// Setting errArgs to true, to print usage</color>
                <color=#f8f8f2>errArgs</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Unknown option \""</color> <color=#f92672>+</color> <color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>++]</color> <color=#f92672>+</color> <color=#e6db74>"\""</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>errArgs</color> <color=#f92672>||</color> <color=#f8f8f2>(</color><color=#f8f8f2>pArgs</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672><</color> <color=#f8f8f2>(</color><color=#f8f8f2>argIdx</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Usage: IndexImage [--help|-h] [--speedtest|-s <integer>] [--bgcolor|-b <color>] [--colors|-c <integer> | --grayscale|g | --monochrome|-m | --palette|-p <file>] [--dither|-d (default|diffusion|none)] [--quality|-q (default|high|low)] [--transparency|-t] [--outputformat|-f (gif|jpeg|png|wbmp|...)] [--overwrite|-w] <input> [<output>]"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>"Input format names: "</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>readers</color> <color=#f92672>=</color> <color=#f8f8f2>ImageIO</color><color=#f8f8f2>.</color><color=#a6e22e>getReaderFormatNames</color><color=#f8f8f2>();</color>

            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>readers</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#f8f8f2>readers</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color> <color=#f92672><</color> <color=#f8f8f2>readers</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color>
                        <color=#f92672>?</color> <color=#e6db74>", "</color>
                        <color=#f8f8f2>:</color> <color=#e6db74>"\n"</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>"Output format names: "</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>writers</color> <color=#f92672>=</color> <color=#f8f8f2>ImageIO</color><color=#f8f8f2>.</color><color=#a6e22e>getWriterFormatNames</color><color=#f8f8f2>();</color>

            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>writers</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#f8f8f2>writers</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>+</color> <color=#f8f8f2>((</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color> <color=#f92672><</color> <color=#f8f8f2>writers</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color>
                        <color=#f92672>?</color> <color=#e6db74>", "</color>
                        <color=#f8f8f2>:</color> <color=#e6db74>"\n"</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>exit</color><color=#f8f8f2>(</color><color=#ae81ff>5</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Read in image</color>
        <color=#f8f8f2>File</color> <color=#f8f8f2>in</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#f92672>++]</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>exists</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"File \""</color> <color=#f92672>+</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getAbsolutePath</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>"\" does not exist!"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>exit</color><color=#f8f8f2>(</color><color=#ae81ff>5</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Read palette if needed</color>
        <color=#f8f8f2>File</color> <color=#f8f8f2>paletteFile</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>paletteFileName</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>paletteFile</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>paletteFileName</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>paletteFile</color><color=#f8f8f2>.</color><color=#a6e22e>exists</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"File \""</color> <color=#f92672>+</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getAbsolutePath</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>"\" does not exist!"</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>exit</color><color=#f8f8f2>(</color><color=#ae81ff>5</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Make sure we can write</color>
        <color=#f8f8f2>File</color> <color=#f8f8f2>out</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>argIdx</color> <color=#f92672><</color> <color=#f8f8f2>pArgs</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>pArgs</color><color=#f92672>[</color><color=#f8f8f2>argIdx</color><color=#75715e>/*++*/</color><color=#f92672>]</color><color=#f8f8f2>);</color>

            <color=#75715e>// Get format from file extension</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#f8f8f2>FileUtil</color><color=#f8f8f2>.</color><color=#a6e22e>getExtension</color><color=#f8f8f2>(</color><color=#f8f8f2>out</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Create new file in current dir, same name + format extension</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>baseName</color> <color=#f92672>=</color> <color=#f8f8f2>FileUtil</color><color=#f8f8f2>.</color><color=#a6e22e>getBasename</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>);</color>

            <color=#75715e>// Use png as default format</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>format</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>format</color> <color=#f92672>=</color> <color=#e6db74>"png"</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>baseName</color> <color=#f92672>+</color> <color=#e6db74>'.'</color> <color=#f92672>+</color> <color=#f8f8f2>format</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>overWrite</color> <color=#f92672>&&</color> <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>exists</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"The file \""</color> <color=#f92672>+</color> <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>getAbsolutePath</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>"\" allready exists!"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>exit</color><color=#f8f8f2>(</color><color=#ae81ff>5</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Do the image processing</color>
        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>image</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>paletteImg</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>image</color> <color=#f92672>=</color> <color=#f8f8f2>ImageIO</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>image</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"No reader for image: \""</color> <color=#f92672>+</color> <color=#f8f8f2>in</color><color=#f8f8f2>.</color><color=#a6e22e>getAbsolutePath</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>"\"!"</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>exit</color><color=#f8f8f2>(</color><color=#ae81ff>5</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>paletteFile</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>paletteImg</color> <color=#f92672>=</color> <color=#f8f8f2>ImageIO</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>(</color><color=#f8f8f2>paletteFile</color><color=#f8f8f2>);</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>paletteImg</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"No reader for image: \""</color> <color=#f92672>+</color> <color=#f8f8f2>paletteFile</color><color=#f8f8f2>.</color><color=#a6e22e>getAbsolutePath</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>"\"!"</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>exit</color><color=#f8f8f2>(</color><color=#ae81ff>5</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>ioe</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>ioe</color><color=#f8f8f2>.</color><color=#a6e22e>printStackTrace</color><color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>exit</color><color=#f8f8f2>(</color><color=#ae81ff>5</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Create hints</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>hints</color> <color=#f92672>=</color> <color=#f8f8f2>DITHER_DEFAULT</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"DIFFUSION"</color><color=#f8f8f2>.</color><color=#a6e22e>equalsIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>dither</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>hints</color> <color=#f92672>|=</color> <color=#f8f8f2>DITHER_DIFFUSION</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"DIFFUSION_ALTSCANS"</color><color=#f8f8f2>.</color><color=#a6e22e>equalsIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>dither</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>hints</color> <color=#f92672>|=</color> <color=#f8f8f2>DITHER_DIFFUSION_ALTSCANS</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"NONE"</color><color=#f8f8f2>.</color><color=#a6e22e>equalsIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>dither</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>hints</color> <color=#f92672>|=</color> <color=#f8f8f2>DITHER_NONE</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

            <color=#75715e>// Don't care, use default</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"HIGH"</color><color=#f8f8f2>.</color><color=#a6e22e>equalsIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>quality</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>hints</color> <color=#f92672>|=</color> <color=#f8f8f2>COLOR_SELECTION_QUALITY</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"LOW"</color><color=#f8f8f2>.</color><color=#a6e22e>equalsIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>quality</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>hints</color> <color=#f92672>|=</color> <color=#f8f8f2>COLOR_SELECTION_FAST</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>

            <color=#75715e>// Don't care, use default</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>transparency</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>hints</color> <color=#f92672>|=</color> <color=#f8f8f2>TRANSPARENCY_BITMASK</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>//////////////////////////////</color>
        <color=#75715e>// Apply bg-color WORKAROUND!</color>
        <color=#75715e>// This needs to be done BEFORE palette creation to have desired effect..</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>background</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>paletteImg</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>paletteImg</color> <color=#f92672>=</color> <color=#f8f8f2>createSolid</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#f8f8f2>background</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>///////////////////////////////</color>
        <color=#75715e>// Index</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>start</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>speedTest</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// SPEED TESTING</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Measuring speed!"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>start</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>();</color>
            <color=#75715e>// END SPEED TESTING</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>indexed</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>IndexColorModel</color> <color=#f8f8f2>colors</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>monochrome</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>indexed</color> <color=#f92672>=</color> <color=#f8f8f2>getIndexedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#f8f8f2>MonochromeColorModel</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>(),</color> <color=#f8f8f2>background</color><color=#f8f8f2>,</color> <color=#f8f8f2>hints</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>colors</color> <color=#f92672>=</color> <color=#f8f8f2>MonochromeColorModel</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>gray</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>//indexed = ImageUtil.toBuffered(ImageUtil.grayscale(image), BufferedImage.TYPE_BYTE_GRAY);</color>
            <color=#f8f8f2>image</color> <color=#f92672>=</color> <color=#f8f8f2>ImageUtil</color><color=#f8f8f2>.</color><color=#a6e22e>toBuffered</color><color=#f8f8f2>(</color><color=#f8f8f2>ImageUtil</color><color=#f8f8f2>.</color><color=#a6e22e>grayscale</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>indexed</color> <color=#f92672>=</color> <color=#f8f8f2>getIndexedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#f8f8f2>colors</color> <color=#f92672>=</color> <color=#f8f8f2>getIndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#f8f8f2>numColors</color><color=#f8f8f2>,</color> <color=#f8f8f2>hints</color><color=#f8f8f2>),</color> <color=#f8f8f2>background</color><color=#f8f8f2>,</color> <color=#f8f8f2>hints</color><color=#f8f8f2>);</color>

            <color=#75715e>// In casse of speedtest, this makes sense...</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>speedTest</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>colors</color> <color=#f92672>=</color> <color=#f8f8f2>getIndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>indexed</color><color=#f8f8f2>,</color> <color=#f8f8f2>numColors</color><color=#f8f8f2>,</color> <color=#f8f8f2>hints</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>paletteImg</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Get palette from image</color>
            <color=#f8f8f2>indexed</color> <color=#f92672>=</color> <color=#f8f8f2>getIndexedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>ImageUtil</color><color=#f8f8f2>.</color><color=#a6e22e>toBuffered</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB</color><color=#f8f8f2>),</color>
                    <color=#f8f8f2>colors</color> <color=#f92672>=</color> <color=#f8f8f2>getIndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>paletteImg</color><color=#f8f8f2>,</color> <color=#f8f8f2>numColors</color><color=#f8f8f2>,</color> <color=#f8f8f2>hints</color><color=#f8f8f2>),</color> <color=#f8f8f2>background</color><color=#f8f8f2>,</color> <color=#f8f8f2>hints</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>image</color> <color=#f92672>=</color> <color=#f8f8f2>ImageUtil</color><color=#f8f8f2>.</color><color=#a6e22e>toBuffered</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>indexed</color> <color=#f92672>=</color> <color=#f8f8f2>getIndexedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#f8f8f2>colors</color> <color=#f92672>=</color> <color=#f8f8f2>getIndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#f8f8f2>numColors</color><color=#f8f8f2>,</color> <color=#f8f8f2>hints</color><color=#f8f8f2>),</color> <color=#f8f8f2>background</color><color=#f8f8f2>,</color> <color=#f8f8f2>hints</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>speedTest</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// SPEED TESTING</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Color selection + dither: "</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>start</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#e6db74>" ms"</color><color=#f8f8f2>);</color>
            <color=#75715e>// END SPEED TESTING</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Write output (in given format)</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>ImageIO</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>indexed</color><color=#f8f8f2>,</color> <color=#f8f8f2>format</color><color=#f8f8f2>,</color> <color=#f8f8f2>out</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"No writer for format: \""</color> <color=#f92672>+</color> <color=#f8f8f2>format</color> <color=#f92672>+</color> <color=#e6db74>"\"!"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>ioe</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>ioe</color><color=#f8f8f2>.</color><color=#a6e22e>printStackTrace</color><color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>speedTest</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// SPEED TESTING</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Measuring speed!"</color><color=#f8f8f2>);</color>

            <color=#75715e>// Warmup!</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#ae81ff>10</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>getIndexedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#f8f8f2>colors</color><color=#f8f8f2>,</color> <color=#f8f8f2>background</color><color=#f8f8f2>,</color> <color=#f8f8f2>hints</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Measure</color>
            <color=#66d9ef>long</color> <color=#f8f8f2>time</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>speedTest</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>start</color> <color=#f92672>=</color> <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>getIndexedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#f8f8f2>colors</color><color=#f8f8f2>,</color> <color=#f8f8f2>background</color><color=#f8f8f2>,</color> <color=#f8f8f2>hints</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>time</color> <color=#f92672>+=</color> <color=#f8f8f2>(</color><color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>currentTimeMillis</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#f8f8f2>start</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>print</color><color=#f8f8f2>(</color><color=#e6db74>'.'</color><color=#f8f8f2>);</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#ae81ff>10</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"\nAverage (after "</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#e6db74>" iterations): "</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>time</color> <color=#f92672>/</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>))</color> <color=#f92672>+</color> <color=#e6db74>"ms"</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"\nDither only:"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Total time ("</color> <color=#f92672>+</color> <color=#f8f8f2>speedTest</color> <color=#f92672>+</color> <color=#e6db74>" invocations): "</color> <color=#f92672>+</color> <color=#f8f8f2>time</color> <color=#f92672>+</color> <color=#e6db74>"ms"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>out</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Average: "</color> <color=#f92672>+</color> <color=#f8f8f2>time</color> <color=#f92672>/</color> <color=#f8f8f2>speedTest</color> <color=#f92672>+</color> <color=#e6db74>"ms"</color><color=#f8f8f2>);</color>
            <color=#75715e>// END SPEED TESTING</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>