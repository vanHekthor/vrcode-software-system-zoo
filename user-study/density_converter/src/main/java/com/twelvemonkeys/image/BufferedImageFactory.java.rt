<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.lang.Validate</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.lang.reflect.Array</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.EventListener</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Hashtable</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.List</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.concurrent.CopyOnWriteArrayList</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A faster, lighter and easier way to convert an {@code Image} to a</color>
<color=#75715e> * {@code BufferedImage} than using a {@code PixelGrabber}.</color>
<color=#75715e> * Clients may provide progress listeners to monitor conversion progress.</color>
<color=#75715e> * <p/></color>
<color=#75715e> * Supports source image subsampling and source region extraction.</color>
<color=#75715e> * Supports source images with 16 bit {@link ColorModel} and</color>
<color=#75715e> * {@link DataBuffer#TYPE_USHORT} transfer type, without converting to</color>
<color=#75715e> * 32 bit/TYPE_INT.</color>
<color=#75715e> * <p/></color>
<color=#75715e> * NOTE: Does not support images with more than one {@code ColorModel} or</color>
<color=#75715e> * different types of pixel data. This is not very common.</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @version $Id: //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/image/BufferedImageFactory.java#1 $</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>BufferedImageFactory</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>ProgressListener</color><color=#f92672>></color> <color=#f8f8f2>listeners</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>percentageDone</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>ImageProducer</color> <color=#f8f8f2>producer</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>ImageConversionException</color> <color=#f8f8f2>consumerException</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>volatile</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>fetching</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>readColorModelOnly</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>xSub</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>ySub</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>scanSize</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>sourceColorModel</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>Hashtable</color> <color=#f8f8f2>sourceProperties</color><color=#f8f8f2>;</color> <color=#75715e>// ImageConsumer API dictates Hashtable</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>sourcePixels</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>buffered</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>colorModel</color><color=#f8f8f2>;</color>

    <color=#75715e>// NOTE: Just to not expose the inheritance</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Consumer</color> <color=#f8f8f2>consumer</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Consumer</color><color=#f8f8f2>();</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@code BufferedImageFactory}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSource the source image</color>
<color=#75715e>     * @throws IllegalArgumentException if {@code pSource == null}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>BufferedImageFactory</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Image</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>getSource</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@code BufferedImageFactory}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSource the source image producer</color>
<color=#75715e>     * @throws IllegalArgumentException if {@code pSource == null}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>BufferedImageFactory</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ImageProducer</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Validate</color><color=#f8f8f2>.</color><color=#a6e22e>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#e6db74>"source"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>producer</color> <color=#f92672>=</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the {@code BufferedImage} extracted from the given</color>
<color=#75715e>     * {@code ImageSource}. Multiple requests will return the same image.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the {@code BufferedImage}</color>
<color=#75715e>     * @throws ImageConversionException if the given {@code ImageSource} cannot</color>
<color=#75715e>     *                                  be converted for some reason.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>getBufferedImage</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>ImageConversionException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>doFetch</color><color=#f8f8f2>(</color><color=#66d9ef>false</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>buffered</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the {@code ColorModel} extracted from the</color>
<color=#75715e>     * given {@code ImageSource}. Multiple requests will return the same model.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the {@code ColorModel}</color>
<color=#75715e>     * @throws ImageConversionException if the given {@code ImageSource} cannot</color>
<color=#75715e>     *                                  be converted for some reason.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>ColorModel</color> <color=#a6e22e>getColorModel</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>ImageConversionException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>doFetch</color><color=#f8f8f2>(</color><color=#66d9ef>true</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>buffered</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>buffered</color><color=#f8f8f2>.</color><color=#a6e22e>getColorModel</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>colorModel</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Frees resources used by this {@code BufferedImageFactory}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>dispose</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>freeResources</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>buffered</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>colorModel</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Aborts the image production.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>abort</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>consumer</color><color=#f8f8f2>.</color><color=#a6e22e>imageComplete</color><color=#f8f8f2>(</color><color=#f8f8f2>ImageConsumer</color><color=#f8f8f2>.</color><color=#a6e22e>IMAGEABORTED</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Sets the source region (AOI) for the new image.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pRegion the source region</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setSourceRegion</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Rectangle</color> <color=#f8f8f2>pRegion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Re-fetch everything, if region changed</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>!=</color> <color=#f8f8f2>pRegion</color><color=#f8f8f2>.</color><color=#a6e22e>x</color> <color=#f92672>||</color> <color=#f8f8f2>y</color> <color=#f92672>!=</color> <color=#f8f8f2>pRegion</color><color=#f8f8f2>.</color><color=#a6e22e>y</color> <color=#f92672>||</color> <color=#f8f8f2>width</color> <color=#f92672>!=</color> <color=#f8f8f2>pRegion</color><color=#f8f8f2>.</color><color=#a6e22e>width</color> <color=#f92672>||</color> <color=#f8f8f2>height</color> <color=#f92672>!=</color> <color=#f8f8f2>pRegion</color><color=#f8f8f2>.</color><color=#a6e22e>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>dispose</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>pRegion</color><color=#f8f8f2>.</color><color=#a6e22e>x</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#f8f8f2>pRegion</color><color=#f8f8f2>.</color><color=#a6e22e>y</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>pRegion</color><color=#f8f8f2>.</color><color=#a6e22e>width</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>pRegion</color><color=#f8f8f2>.</color><color=#a6e22e>height</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Sets the source subsampling for the new image.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pXSub horizontal subsampling factor</color>
<color=#75715e>     * @param pYSub vertical subsampling factor</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setSourceSubsampling</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pXSub</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pYSub</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Re-fetch everything, if subsampling changed</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>xSub</color> <color=#f92672>!=</color> <color=#f8f8f2>pXSub</color> <color=#f92672>||</color> <color=#f8f8f2>ySub</color> <color=#f92672>!=</color> <color=#f8f8f2>pYSub</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>dispose</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pXSub</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>xSub</color> <color=#f92672>=</color> <color=#f8f8f2>pXSub</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pYSub</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>ySub</color> <color=#f92672>=</color> <color=#f8f8f2>pYSub</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>synchronized</color> <color=#66d9ef>void</color> <color=#a6e22e>doFetch</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>pColorModelOnly</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>ImageConversionException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>fetching</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>pColorModelOnly</color> <color=#f92672>&&</color> <color=#f8f8f2>buffered</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>buffered</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>sourceColorModel</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#75715e>// NOTE: Subsampling is only applied if extracting full image</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>pColorModelOnly</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>xSub</color> <color=#f92672>></color> <color=#ae81ff>1</color> <color=#f92672>||</color> <color=#f8f8f2>ySub</color> <color=#f92672>></color> <color=#ae81ff>1</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#75715e>// If only sampling a region, the region must be scaled too</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>width</color> <color=#f92672>></color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>height</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>width</color> <color=#f92672>+</color> <color=#f8f8f2>xSub</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>xSub</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>height</color> <color=#f92672>+</color> <color=#f8f8f2>ySub</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>ySub</color><color=#f8f8f2>;</color>

                    <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>xSub</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>xSub</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>y</color> <color=#f92672>+</color> <color=#f8f8f2>ySub</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#f8f8f2>ySub</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>producer</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FilteredImageSource</color><color=#f8f8f2>(</color><color=#f8f8f2>producer</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>SubsamplingFilter</color><color=#f8f8f2>(</color><color=#f8f8f2>xSub</color><color=#f8f8f2>,</color> <color=#f8f8f2>ySub</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Start fetching</color>
            <color=#f8f8f2>fetching</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>readColorModelOnly</color> <color=#f92672>=</color> <color=#f8f8f2>pColorModelOnly</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>producer</color><color=#f8f8f2>.</color><color=#a6e22e>startProduction</color><color=#f8f8f2>(</color><color=#f8f8f2>consumer</color><color=#f8f8f2>);</color> <color=#75715e>// Note: If single-thread (synchronous), this call will block</color>

            <color=#75715e>// Wait until the producer wakes us up, by calling imageComplete</color>
            <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>fetching</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>wait</color><color=#f8f8f2>(</color><color=#ae81ff>200l</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>InterruptedException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ImageConversionException</color><color=#f8f8f2>(</color><color=#e6db74>"Image conversion aborted: "</color> <color=#f92672>+</color> <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>(),</color> <color=#f8f8f2>e</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>consumerException</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ImageConversionException</color><color=#f8f8f2>(</color><color=#e6db74>"Image conversion failed: "</color> <color=#f92672>+</color> <color=#f8f8f2>consumerException</color><color=#f8f8f2>.</color><color=#a6e22e>getMessage</color><color=#f8f8f2>(),</color> <color=#f8f8f2>consumerException</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pColorModelOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>createColorModel</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>createBuffered</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>createColorModel</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>colorModel</color> <color=#f92672>=</color> <color=#f8f8f2>sourceColorModel</color><color=#f8f8f2>;</color>

        <color=#75715e>// Clean up, in case any objects are copied/cloned, so we can free resources</color>
        <color=#f8f8f2>freeResources</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>createBuffered</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>width</color> <color=#f92672>></color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>height</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sourceColorModel</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>sourcePixels</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// TODO: Fix pixel size / color model problem</color>
                <color=#f8f8f2>WritableRaster</color> <color=#f8f8f2>raster</color> <color=#f92672>=</color> <color=#f8f8f2>ImageUtil</color><color=#f8f8f2>.</color><color=#a6e22e>createRaster</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>sourcePixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>sourceColorModel</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>buffered</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>sourceColorModel</color><color=#f8f8f2>,</color> <color=#f8f8f2>raster</color><color=#f8f8f2>,</color> <color=#f8f8f2>sourceColorModel</color><color=#f8f8f2>.</color><color=#a6e22e>isAlphaPremultiplied</color><color=#f8f8f2>(),</color> <color=#f8f8f2>sourceProperties</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>buffered</color> <color=#f92672>=</color> <color=#f8f8f2>ImageUtil</color><color=#f8f8f2>.</color><color=#a6e22e>createClear</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Clean up, in case any objects are copied/cloned, so we can free resources</color>
        <color=#f8f8f2>freeResources</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>freeResources</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>sourceColorModel</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>sourcePixels</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>sourceProperties</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>processProgress</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>scanline</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>listeners</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>percent</color> <color=#f92672>=</color> <color=#ae81ff>100</color> <color=#f92672>*</color> <color=#f8f8f2>scanline</color> <color=#f92672>/</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>percent</color> <color=#f92672>></color> <color=#f8f8f2>percentageDone</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>percentageDone</color> <color=#f92672>=</color> <color=#f8f8f2>percent</color><color=#f8f8f2>;</color>

                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>ProgressListener</color> <color=#f8f8f2>listener</color> <color=#f8f8f2>:</color> <color=#f8f8f2>listeners</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>listener</color><color=#f8f8f2>.</color><color=#a6e22e>progress</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>,</color> <color=#f8f8f2>percent</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Adds a progress listener to this factory.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pListener the progress listener</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>addProgressListener</color><color=#f8f8f2>(</color><color=#f8f8f2>ProgressListener</color> <color=#f8f8f2>pListener</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pListener</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>listeners</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>listeners</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>CopyOnWriteArrayList</color><color=#f92672><</color><color=#f8f8f2>ProgressListener</color><color=#f92672>></color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>listeners</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>pListener</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Removes a progress listener from this factory.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pListener the progress listener</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>removeProgressListener</color><color=#f8f8f2>(</color><color=#f8f8f2>ProgressListener</color> <color=#f8f8f2>pListener</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pListener</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>listeners</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>listeners</color><color=#f8f8f2>.</color><color=#a6e22e>remove</color><color=#f8f8f2>(</color><color=#f8f8f2>pListener</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Removes all progress listeners from this factory.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>removeAllProgressListeners</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>listeners</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>listeners</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts an array of {@code int} pixels to an array of {@code short}</color>
<color=#75715e>     * pixels. The conversion is done, by masking out the</color>
<color=#75715e>     * <em>higher 16 bits</em> of the {@code int}.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * For any given {@code int}, the {@code short} value is computed as</color>
<color=#75715e>     * follows:</color>
<color=#75715e>     * <blockquote>{@code</color>
<color=#75715e>     * short value = (short) (intValue & 0x0000ffff);</color>
<color=#75715e>     * }</blockquote></color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pPixels the pixel data to convert</color>
<color=#75715e>     * @return an array of {@code short}s, same lenght as {@code pPixels}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>short</color><color=#f92672>[]</color> <color=#a6e22e>toShortPixels</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pPixels</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>short</color><color=#f92672>[]</color> <color=#f8f8f2>pixels</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>short</color><color=#f92672>[</color><color=#f8f8f2>pPixels</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pixels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>short</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>pPixels</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xffff</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>pixels</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * This interface allows clients of a {@code BufferedImageFactory} to</color>
<color=#75715e>     * receive notifications of decoding progress.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @see BufferedImageFactory#addProgressListener</color>
<color=#75715e>     * @see BufferedImageFactory#removeProgressListener</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>interface</color> <color=#a6e22e>ProgressListener</color> <color=#66d9ef>extends</color> <color=#f8f8f2>EventListener</color> <color=#f8f8f2>{</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Reports progress to this listener.</color>
<color=#75715e>         * Invoked by the {@code BufferedImageFactory} to report progress in</color>
<color=#75715e>         * the image decoding.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param pFactory    the factory reporting the progress</color>
<color=#75715e>         * @param pPercentage the percentage of progress</color>
<color=#75715e>         */</color>
        <color=#66d9ef>void</color> <color=#a6e22e>progress</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImageFactory</color> <color=#f8f8f2>pFactory</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>pPercentage</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>class</color> <color=#a6e22e>Consumer</color> <color=#66d9ef>implements</color> <color=#f8f8f2>ImageConsumer</color> <color=#f8f8f2>{</color>
        <color=#75715e>/**</color>
<color=#75715e>         * Implementation of all setPixels methods.</color>
<color=#75715e>         * Note that this implementation assumes that all invocations for one</color>
<color=#75715e>         * image uses the same color model, and that the pixel data has the</color>
<color=#75715e>         * same type.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param pX        x coordinate of pixel data region</color>
<color=#75715e>         * @param pY        y coordinate of pixel data region</color>
<color=#75715e>         * @param pWidth    width of pixel data region</color>
<color=#75715e>         * @param pHeight   height of pixel data region</color>
<color=#75715e>         * @param pModel    the color model of the pixel data</color>
<color=#75715e>         * @param pPixels   the pixel data array</color>
<color=#75715e>         * @param pOffset   the offset into the pixel data array</color>
<color=#75715e>         * @param pScanSize the scan size of the pixel data array</color>
<color=#75715e>         */</color>
        <color=#a6e22e>@SuppressWarnings</color><color=#f8f8f2>({</color><color=#e6db74>"SuspiciousSystemArraycopy"</color><color=#f8f8f2>})</color>
        <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setPixelsImpl</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pX</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pY</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pWidth</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pHeight</color><color=#f8f8f2>,</color> <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>pModel</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>pPixels</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pScanSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>setColorModelOnce</color><color=#f8f8f2>(</color><color=#f8f8f2>pModel</color><color=#f8f8f2>);</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pPixels</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Allocate array if necessary</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sourcePixels</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Allocate a suitable source pixel array</color>
                <color=#75715e>// TODO: Should take pixel "width" into consideration, for byte packed rasters?!</color>
                <color=#75715e>// OR... Is anything but single-pixel models really supported by the API?</color>
                <color=#f8f8f2>sourcePixels</color> <color=#f92672>=</color> <color=#f8f8f2>Array</color><color=#f8f8f2>.</color><color=#a6e22e>newInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>pPixels</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getComponentType</color><color=#f8f8f2>(),</color> <color=#f8f8f2>width</color> <color=#f92672>*</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>scanSize</color> <color=#f92672>=</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>offset</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sourcePixels</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>pPixels</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Only one pixel type allowed"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// AOI stuff</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pY</color> <color=#f92672><</color> <color=#f8f8f2>y</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>diff</color> <color=#f92672>=</color> <color=#f8f8f2>y</color> <color=#f92672>-</color> <color=#f8f8f2>pY</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>diff</color> <color=#f92672>>=</color> <color=#f8f8f2>pHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#f8f8f2>pOffset</color> <color=#f92672>+=</color> <color=#f8f8f2>pScanSize</color> <color=#f92672>*</color> <color=#f8f8f2>diff</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>pY</color> <color=#f92672>+=</color> <color=#f8f8f2>diff</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>pHeight</color> <color=#f92672>-=</color> <color=#f8f8f2>diff</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pY</color> <color=#f92672>+</color> <color=#f8f8f2>pHeight</color> <color=#f92672>></color> <color=#f8f8f2>y</color> <color=#f92672>+</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>pHeight</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>y</color> <color=#f92672>+</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>pY</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pHeight</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pX</color> <color=#f92672><</color> <color=#f8f8f2>x</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>diff</color> <color=#f92672>=</color> <color=#f8f8f2>x</color> <color=#f92672>-</color> <color=#f8f8f2>pX</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>diff</color> <color=#f92672>>=</color> <color=#f8f8f2>pWidth</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#f8f8f2>pOffset</color> <color=#f92672>+=</color> <color=#f8f8f2>diff</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>pX</color> <color=#f92672>+=</color> <color=#f8f8f2>diff</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>pWidth</color> <color=#f92672>-=</color> <color=#f8f8f2>diff</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pX</color> <color=#f92672>+</color> <color=#f8f8f2>pWidth</color> <color=#f92672>></color> <color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>width</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>pWidth</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672>+</color> <color=#f8f8f2>width</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>pX</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pWidth</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>int</color> <color=#f8f8f2>dstOffset</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>pY</color> <color=#f92672>-</color> <color=#f8f8f2>y</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>scanSize</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>pX</color> <color=#f92672>-</color> <color=#f8f8f2>x</color><color=#f8f8f2>);</color>

            <color=#75715e>// Do the pixel copying</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#f8f8f2>pHeight</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>--</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>pPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>sourcePixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>dstOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>pWidth</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>pOffset</color> <color=#f92672>+=</color> <color=#f8f8f2>pScanSize</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>dstOffset</color> <color=#f92672>+=</color> <color=#f8f8f2>scanSize</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>processProgress</color><color=#f8f8f2>(</color><color=#f8f8f2>pY</color> <color=#f92672>+</color> <color=#f8f8f2>pHeight</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setPixels</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pX</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pY</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pWidth</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pHeight</color><color=#f8f8f2>,</color> <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>pModel</color><color=#f8f8f2>,</color> <color=#66d9ef>short</color><color=#f92672>[]</color> <color=#f8f8f2>pPixels</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pScanSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>setPixelsImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>pX</color><color=#f8f8f2>,</color> <color=#f8f8f2>pY</color><color=#f8f8f2>,</color> <color=#f8f8f2>pWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>pHeight</color><color=#f8f8f2>,</color> <color=#f8f8f2>pModel</color><color=#f8f8f2>,</color> <color=#f8f8f2>pPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>pScanSize</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>setColorModelOnce</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>pModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// NOTE: There seems to be a "bug" in AreaAveragingScaleFilter, as it</color>
            <color=#75715e>// first passes the original color model through in setColorModel, then</color>
            <color=#75715e>// later replaces it with the default RGB in the first setPixels call</color>
            <color=#75715e>// (this is probably allowed according to the spec, but it's a waste of time and space).</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sourceColorModel</color> <color=#f92672>!=</color> <color=#f8f8f2>pModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#75715e>/*sourceColorModel == null ||*/</color> <color=#f8f8f2>sourcePixels</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>sourceColorModel</color> <color=#f92672>=</color> <color=#f8f8f2>pModel</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Change of ColorModel after pixel delivery not supported"</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// If color model is all we ask for, stop now</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>readColorModelOnly</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>consumer</color><color=#f8f8f2>.</color><color=#a6e22e>imageComplete</color><color=#f8f8f2>(</color><color=#f8f8f2>ImageConsumer</color><color=#f8f8f2>.</color><color=#a6e22e>IMAGEABORTED</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>imageComplete</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pStatus</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>fetching</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>producer</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>producer</color><color=#f8f8f2>.</color><color=#a6e22e>removeConsumer</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>pStatus</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>case</color> <color=#f8f8f2>ImageConsumer</color><color=#f8f8f2>.</color><color=#a6e22e>IMAGEERROR</color><color=#f8f8f2>:</color>
                    <color=#f8f8f2>consumerException</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ImageConversionException</color><color=#f8f8f2>(</color><color=#e6db74>"ImageConsumer.IMAGEERROR"</color><color=#f8f8f2>);</color>
                    <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>synchronized</color> <color=#f8f8f2>(</color><color=#f8f8f2>BufferedImageFactory</color><color=#f8f8f2>.</color><color=#a6e22e>this</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>BufferedImageFactory</color><color=#f8f8f2>.</color><color=#a6e22e>this</color><color=#f8f8f2>.</color><color=#a6e22e>notifyAll</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>ColorModel</color> <color=#f8f8f2>pModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>setColorModelOnce</color><color=#f8f8f2>(</color><color=#f8f8f2>pModel</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setDimensions</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pWidth</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>width</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>pWidth</color> <color=#f92672>-</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>height</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>pHeight</color> <color=#f92672>-</color> <color=#f8f8f2>y</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Hmm.. Special case, but is it a good idea?</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>width</color> <color=#f92672><=</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>height</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>imageComplete</color><color=#f8f8f2>(</color><color=#f8f8f2>ImageConsumer</color><color=#f8f8f2>.</color><color=#a6e22e>STATICIMAGEDONE</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setHints</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pHintflags</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// ignore</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setPixels</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pX</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pY</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pWidth</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pHeight</color><color=#f8f8f2>,</color> <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>pModel</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pPixels</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pScanSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>setPixelsImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>pX</color><color=#f8f8f2>,</color> <color=#f8f8f2>pY</color><color=#f8f8f2>,</color> <color=#f8f8f2>pWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>pHeight</color><color=#f8f8f2>,</color> <color=#f8f8f2>pModel</color><color=#f8f8f2>,</color> <color=#f8f8f2>pPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>pScanSize</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setPixels</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pX</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pY</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pWeigth</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pHeight</color><color=#f8f8f2>,</color> <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>pModel</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pPixels</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pScanSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pModel</color><color=#f8f8f2>.</color><color=#a6e22e>getTransferType</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_USHORT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// NOTE: Workaround for limitation in ImageConsumer API</color>
                <color=#75715e>// Convert int[] to short[], to be compatible with the ColorModel</color>
                <color=#f8f8f2>setPixelsImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>pX</color><color=#f8f8f2>,</color> <color=#f8f8f2>pY</color><color=#f8f8f2>,</color> <color=#f8f8f2>pWeigth</color><color=#f8f8f2>,</color> <color=#f8f8f2>pHeight</color><color=#f8f8f2>,</color> <color=#f8f8f2>pModel</color><color=#f8f8f2>,</color> <color=#f8f8f2>toShortPixels</color><color=#f8f8f2>(</color><color=#f8f8f2>pPixels</color><color=#f8f8f2>),</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>pScanSize</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>setPixelsImpl</color><color=#f8f8f2>(</color><color=#f8f8f2>pX</color><color=#f8f8f2>,</color> <color=#f8f8f2>pY</color><color=#f8f8f2>,</color> <color=#f8f8f2>pWeigth</color><color=#f8f8f2>,</color> <color=#f8f8f2>pHeight</color><color=#f8f8f2>,</color> <color=#f8f8f2>pModel</color><color=#f8f8f2>,</color> <color=#f8f8f2>pPixels</color><color=#f8f8f2>,</color> <color=#f8f8f2>pOffset</color><color=#f8f8f2>,</color> <color=#f8f8f2>pScanSize</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setProperties</color><color=#f8f8f2>(</color><color=#f8f8f2>Hashtable</color> <color=#f8f8f2>pProperties</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>sourceProperties</color> <color=#f92672>=</color> <color=#f8f8f2>pProperties</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/*</color>
<color=#75715e>    public static void main(String[] args) throws InterruptedException {</color>
<color=#75715e>        Image image = Toolkit.getDefaultToolkit().createImage(args[0]);</color>
<color=#75715e>        System.err.printf("image: %s (which is %sa buffered image)\n", image, image instanceof BufferedImage ? "" : "not ");</color>

<color=#75715e>        int warmUpLoops = 500;</color>
<color=#75715e>        int testLoops = 100;</color>

<color=#75715e>        for (int i = 0; i < warmUpLoops; i++) {</color>
<color=#75715e>            // Warm up...</color>
<color=#75715e>            convertUsingFactory(image);</color>
<color=#75715e>            convertUsingPixelGrabber(image);</color>
<color=#75715e>            convertUsingPixelGrabberNaive(image);</color>
<color=#75715e>        }</color>

<color=#75715e>        BufferedImage bufferedImage = null;</color>
<color=#75715e>        long start = System.currentTimeMillis();</color>
<color=#75715e>        for (int i = 0; i < testLoops; i++) {</color>
<color=#75715e>            bufferedImage = convertUsingFactory(image);</color>
<color=#75715e>        }</color>
<color=#75715e>        System.err.printf("Conversion time (factory): %f ms (image: %s)\n", (System.currentTimeMillis() - start) / (double) testLoops, bufferedImage);</color>

<color=#75715e>        start = System.currentTimeMillis();</color>
<color=#75715e>        for (int i = 0; i < testLoops; i++) {</color>
<color=#75715e>            bufferedImage = convertUsingPixelGrabber(image);</color>
<color=#75715e>        }</color>
<color=#75715e>        System.err.printf("Conversion time (grabber): %f ms (image: %s)\n", (System.currentTimeMillis() - start) / (double) testLoops, bufferedImage);</color>

<color=#75715e>        start = System.currentTimeMillis();</color>
<color=#75715e>        for (int i = 0; i < testLoops; i++) {</color>
<color=#75715e>            bufferedImage = convertUsingPixelGrabberNaive(image);</color>
<color=#75715e>        }</color>
<color=#75715e>        System.err.printf("Conversion time (naive g): %f ms (image: %s)\n", (System.currentTimeMillis() - start) / (double) testLoops, bufferedImage);</color>
<color=#75715e>    }</color>

<color=#75715e>    private static BufferedImage convertUsingPixelGrabberNaive(Image image) throws InterruptedException {</color>
<color=#75715e>        // NOTE: It does not matter if we wait for the image or not, the time is about the same as it will only happen once</color>
<color=#75715e>        if ((image.getWidth(null) < 0 || image.getHeight(null) < 0) && !ImageUtil.waitForImage(image)) {</color>
<color=#75715e>            System.err.printf("Could not get image dimensions for image %s\n", image.getSource());</color>
<color=#75715e>        }</color>

<color=#75715e>        int w = image.getWidth(null);</color>
<color=#75715e>        int h = image.getHeight(null);</color>
<color=#75715e>        PixelGrabber grabber = new PixelGrabber(image, 0, 0, w, h, true); // force RGB</color>
<color=#75715e>        grabber.grabPixels();</color>

<color=#75715e>        // Following casts are safe, as we force RGB in the pixel grabber</color>
<color=#75715e>        int[] pixels = (int[]) grabber.getPixels();</color>

<color=#75715e>        BufferedImage bufferedImage = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);</color>
<color=#75715e>//        bufferedImage.setRGB(0, 0, w, h, pixels, 0, w);</color>
<color=#75715e>        bufferedImage.getRaster().setDataElements(0, 0, w, h, pixels);</color>

<color=#75715e>        return bufferedImage;</color>
<color=#75715e>    }</color>

<color=#75715e>    private static BufferedImage convertUsingPixelGrabber(Image image) throws InterruptedException {</color>
<color=#75715e>        // NOTE: It does not matter if we wait for the image or not, the time is about the same as it will only happen once</color>
<color=#75715e>        if ((image.getWidth(null) < 0 || image.getHeight(null) < 0) && !ImageUtil.waitForImage(image)) {</color>
<color=#75715e>            System.err.printf("Could not get image dimensions for image %s\n", image.getSource());</color>
<color=#75715e>        }</color>

<color=#75715e>        int w = image.getWidth(null);</color>
<color=#75715e>        int h = image.getHeight(null);</color>
<color=#75715e>        PixelGrabber grabber = new PixelGrabber(image, 0, 0, w, h, true); // force RGB</color>
<color=#75715e>        grabber.grabPixels();</color>

<color=#75715e>        // Following casts are safe, as we force RGB in the pixel grabber</color>
<color=#75715e>//        DirectColorModel cm = (DirectColorModel) grabber.getColorModel();</color>
<color=#75715e>        DirectColorModel cm = (DirectColorModel) ColorModel.getRGBdefault();</color>
<color=#75715e>        int[] pixels = (int[]) grabber.getPixels();</color>

<color=#75715e>        WritableRaster raster = Raster.createPackedRaster(new DataBufferInt(pixels, pixels.length), w, h, w, cm.getMasks(), null);</color>

<color=#75715e>        return new BufferedImage(cm, raster, cm.isAlphaPremultiplied(), null);</color>
<color=#75715e>    }</color>

<color=#75715e>    private static BufferedImage convertUsingFactory(Image image) {</color>
<color=#75715e>        return new BufferedImageFactory(image).getBufferedImage();</color>
<color=#75715e>    }</color>
<color=#75715e>    */</color>
<color=#f8f8f2>}</color>