<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>


<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.lang.StringUtil</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>com.twelvemonkeys.lang.Validate</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.DataBuffer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.IndexColorModel</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A faster implementation of {@code IndexColorModel}, that is backed by an</color>
<color=#75715e> * inverse color-map, for fast look-ups.</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author $Author: haku $</color>
<color=#75715e> * @version $Id: //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/image/InverseColorMapIndexColorModel.java#1 $</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>InverseColorMapIndexColorModel</color> <color=#66d9ef>extends</color> <color=#f8f8f2>IndexColorModel</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>int</color> <color=#f8f8f2>rgbs</color><color=#f92672>[]</color><color=#f8f8f2>;</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>int</color> <color=#f8f8f2>mapSize</color><color=#f8f8f2>;</color>

    <color=#66d9ef>protected</color> <color=#f8f8f2>InverseColorMap</color> <color=#f8f8f2>inverseMap</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>ALPHA_THRESHOLD</color> <color=#f92672>=</color> <color=#ae81ff>0x80</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>whiteIndex</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>WHITE</color> <color=#f92672>=</color> <color=#ae81ff>0x00FFFFFF</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>RGB_MASK</color> <color=#f92672>=</color> <color=#ae81ff>0x00FFFFFF</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates an {@code InverseColorMapIndexColorModel} from an existing</color>
<color=#75715e>     * {@code IndexColorModel}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pColorModel the color model to create from.</color>
<color=#75715e>     * @throws IllegalArgumentException if {@code pColorModel} is {@code null}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>InverseColorMapIndexColorModel</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>IndexColorModel</color> <color=#f8f8f2>pColorModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>Validate</color><color=#f8f8f2>.</color><color=#a6e22e>notNull</color><color=#f8f8f2>(</color><color=#f8f8f2>pColorModel</color><color=#f8f8f2>,</color> <color=#e6db74>"color model"</color><color=#f8f8f2>),</color> <color=#f8f8f2>getRGBs</color><color=#f8f8f2>(</color><color=#f8f8f2>pColorModel</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// NOTE: The pRGBs parameter is used to get around invoking getRGBs two</color>
    <color=#75715e>// times. What is wrong with protected?!</color>
    <color=#66d9ef>private</color> <color=#a6e22e>InverseColorMapIndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>IndexColorModel</color> <color=#f8f8f2>pColorModel</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pRGBs</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>pColorModel</color><color=#f8f8f2>.</color><color=#a6e22e>getComponentSize</color><color=#f8f8f2>()</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>pColorModel</color><color=#f8f8f2>.</color><color=#a6e22e>getMapSize</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pRGBs</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>pColorModel</color><color=#f8f8f2>.</color><color=#a6e22e>getTransferType</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pColorModel</color><color=#f8f8f2>.</color><color=#a6e22e>getValidPixels</color><color=#f8f8f2>());</color>

        <color=#f8f8f2>rgbs</color> <color=#f92672>=</color> <color=#f8f8f2>pRGBs</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>mapSize</color> <color=#f92672>=</color> <color=#f8f8f2>rgbs</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>inverseMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>InverseColorMap</color><color=#f8f8f2>(</color><color=#f8f8f2>rgbs</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>whiteIndex</color> <color=#f92672>=</color> <color=#f8f8f2>getWhiteIndex</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a defensive copy of the RGB color map in the given</color>
<color=#75715e>     * {@code IndexColorModel}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pColorModel the indexed color model to get RGB values from</color>
<color=#75715e>     * @return the RGB color map</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#a6e22e>getRGBs</color><color=#f8f8f2>(</color><color=#f8f8f2>IndexColorModel</color> <color=#f8f8f2>pColorModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>rgb</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>pColorModel</color><color=#f8f8f2>.</color><color=#a6e22e>getMapSize</color><color=#f8f8f2>()</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>pColorModel</color><color=#f8f8f2>.</color><color=#a6e22e>getRGBs</color><color=#f8f8f2>(</color><color=#f8f8f2>rgb</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>rgb</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates an {@code InverseColorMapIndexColorModel} from the given array</color>
<color=#75715e>     * of RGB components, plus one transparent index.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pNumBits          the number of bits each pixel occupies</color>
<color=#75715e>     * @param pSize             the size of the color component arrays</color>
<color=#75715e>     * @param pRGBs             the array of packed RGB color components</color>
<color=#75715e>     * @param pStart            the starting offset of the first color component</color>
<color=#75715e>     * @param pAlpha            indicates whether alpha values are contained in {@code pRGBs}</color>
<color=#75715e>     * @param pTransparentIndex the index of the transparent pixel</color>
<color=#75715e>     * @param pTransferType     the data type of the array used to represent pixels</color>
<color=#75715e>     * @throws IllegalArgumentException if bits is less than 1 or greater than 16,</color>
<color=#75715e>     *                                  or if size is less than 1</color>
<color=#75715e>     * @see IndexColorModel#IndexColorModel(int, int, int[], int, boolean, int, int)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>InverseColorMapIndexColorModel</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pNumBits</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pSize</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pRGBs</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pStart</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>pAlpha</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pTransparentIndex</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pTransferType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>pNumBits</color><color=#f8f8f2>,</color> <color=#f8f8f2>pSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>pRGBs</color><color=#f8f8f2>,</color> <color=#f8f8f2>pStart</color><color=#f8f8f2>,</color> <color=#f8f8f2>pAlpha</color><color=#f8f8f2>,</color> <color=#f8f8f2>pTransparentIndex</color><color=#f8f8f2>,</color> <color=#f8f8f2>pTransferType</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>rgbs</color> <color=#f92672>=</color> <color=#f8f8f2>getRGBs</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>mapSize</color> <color=#f92672>=</color> <color=#f8f8f2>rgbs</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>inverseMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>InverseColorMap</color><color=#f8f8f2>(</color><color=#f8f8f2>rgbs</color><color=#f8f8f2>,</color> <color=#f8f8f2>pTransparentIndex</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>whiteIndex</color> <color=#f92672>=</color> <color=#f8f8f2>getWhiteIndex</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates an {@code InverseColorMapIndexColorModel} from the given arrays</color>
<color=#75715e>     * of red, green, and blue components, plus one transparent index.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pNumBits          the number of bits each pixel occupies</color>
<color=#75715e>     * @param pSize             the size of the color component arrays</color>
<color=#75715e>     * @param pReds             the array of red color components</color>
<color=#75715e>     * @param pGreens           the array of green color components</color>
<color=#75715e>     * @param pBlues            the array of blue color components</color>
<color=#75715e>     * @param pTransparentIndex the index of the transparent pixel</color>
<color=#75715e>     * @throws IllegalArgumentException if bits is less than 1 or greater than 16,</color>
<color=#75715e>     *                                  or if size is less than 1</color>
<color=#75715e>     * @see IndexColorModel#IndexColorModel(int, int, byte[], byte[], byte[], int)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>InverseColorMapIndexColorModel</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pNumBits</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pSize</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pReds</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pGreens</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pBlues</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pTransparentIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>pNumBits</color><color=#f8f8f2>,</color> <color=#f8f8f2>pSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>pReds</color><color=#f8f8f2>,</color> <color=#f8f8f2>pGreens</color><color=#f8f8f2>,</color> <color=#f8f8f2>pBlues</color><color=#f8f8f2>,</color> <color=#f8f8f2>pTransparentIndex</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>rgbs</color> <color=#f92672>=</color> <color=#f8f8f2>getRGBs</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>mapSize</color> <color=#f92672>=</color> <color=#f8f8f2>rgbs</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>inverseMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>InverseColorMap</color><color=#f8f8f2>(</color><color=#f8f8f2>rgbs</color><color=#f8f8f2>,</color> <color=#f8f8f2>pTransparentIndex</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>whiteIndex</color> <color=#f92672>=</color> <color=#f8f8f2>getWhiteIndex</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates an {@code InverseColorMapIndexColorModel} from the given arrays</color>
<color=#75715e>     * of red, green, and blue components.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pNumBits the number of bits each pixel occupies</color>
<color=#75715e>     * @param pSize    the size of the color component arrays</color>
<color=#75715e>     * @param pReds    the array of red color components</color>
<color=#75715e>     * @param pGreens  the array of green color components</color>
<color=#75715e>     * @param pBlues   the array of blue color components</color>
<color=#75715e>     * @throws IllegalArgumentException if bits is less than 1 or greater than 16,</color>
<color=#75715e>     *                                  or if size is less than 1</color>
<color=#75715e>     * @see IndexColorModel#IndexColorModel(int, int, byte[], byte[], byte[])</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>InverseColorMapIndexColorModel</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pNumBits</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pSize</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pReds</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pGreens</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pBlues</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>pNumBits</color><color=#f8f8f2>,</color> <color=#f8f8f2>pSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>pReds</color><color=#f8f8f2>,</color> <color=#f8f8f2>pGreens</color><color=#f8f8f2>,</color> <color=#f8f8f2>pBlues</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>rgbs</color> <color=#f92672>=</color> <color=#f8f8f2>getRGBs</color><color=#f8f8f2>(</color><color=#66d9ef>this</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>mapSize</color> <color=#f92672>=</color> <color=#f8f8f2>rgbs</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>inverseMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>InverseColorMap</color><color=#f8f8f2>(</color><color=#f8f8f2>rgbs</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>whiteIndex</color> <color=#f92672>=</color> <color=#f8f8f2>getWhiteIndex</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#a6e22e>getWhiteIndex</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>rgbs</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>color</color> <color=#f92672>=</color> <color=#f8f8f2>rgbs</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>color</color> <color=#f92672>&</color> <color=#f8f8f2>RGB_MASK</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f8f8f2>WHITE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates an {@code IndexColorModel} optimized for the given {@code Image}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pImage   the {@code Image} containing the RGB samples</color>
<color=#75715e>     * @param pNumCols the maximum number of colors in the {@code IndexColorModel}</color>
<color=#75715e>     * @param pFlags   flags</color>
<color=#75715e>     * @return a new optimized {@code IndexColorModel}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>IndexColorModel</color> <color=#a6e22e>create</color><color=#f8f8f2>(</color><color=#f8f8f2>Image</color> <color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pNumCols</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pFlags</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// TODO: Inline and deprecate IndexImage.getIndexColorModel!?</color>
        <color=#f8f8f2>IndexColorModel</color> <color=#f8f8f2>icm</color> <color=#f92672>=</color> <color=#f8f8f2>IndexImage</color><color=#f8f8f2>.</color><color=#a6e22e>getIndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>pImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>pNumCols</color><color=#f8f8f2>,</color> <color=#f8f8f2>pFlags</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>InverseColorMapIndexColorModel</color> <color=#f8f8f2>cm</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>icm</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>InverseColorMapIndexColorModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>cm</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>InverseColorMapIndexColorModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>icm</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>cm</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>InverseColorMapIndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>icm</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>cm</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns a data element array representation of a pixel in this</color>
<color=#75715e>     * ColorModel, given an integer pixel representation in the</color>
<color=#75715e>     * default RGB color model.  This array can then be passed to the</color>
<color=#75715e>     * {@link java.awt.image.WritableRaster#setDataElements(int, int, Object) setDataElements}</color>
<color=#75715e>     * method of a {@link java.awt.image.WritableRaster} object.  If the pixel variable is</color>
<color=#75715e>     * {@code null}, a new array is allocated.  If {@code pixel}</color>
<color=#75715e>     * is not {@code null}, it must be</color>
<color=#75715e>     * a primitive array of type {@code transferType}; otherwise, a</color>
<color=#75715e>     * {@code ClassCastException} is thrown.  An</color>
<color=#75715e>     * {@code ArrayIndexOutOfBoundsException} is</color>
<color=#75715e>     * thrown if {@code pixel} is not large enough to hold a pixel</color>
<color=#75715e>     * value for this {@code ColorModel}.  The pixel array is returned.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * Since {@code OpaqueIndexColorModel} can be subclassed, subclasses</color>
<color=#75715e>     * inherit the implementation of this method and if they don't</color>
<color=#75715e>     * override it then they throw an exception if they use an</color>
<color=#75715e>     * unsupported {@code transferType}.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * #param rgb the integer pixel representation in the default RGB</color>
<color=#75715e>     * color model</color>
<color=#75715e>     * #param pixel the specified pixel</color>
<color=#75715e>     * #return an array representation of the specified pixel in this</color>
<color=#75715e>     * {@code OpaqueIndexColorModel}.</color>
<color=#75715e>     * #throws ClassCastException if {@code pixel}</color>
<color=#75715e>     * is not a primitive array of type {@code transferType}</color>
<color=#75715e>     * #throws ArrayIndexOutOfBoundsException if</color>
<color=#75715e>     * {@code pixel} is not large enough to hold a pixel value</color>
<color=#75715e>     * for this {@code ColorModel}</color>
<color=#75715e>     * #throws UnsupportedOperationException if {@code transferType}</color>
<color=#75715e>     * is invalid</color>
<color=#75715e>     *</color>
<color=#75715e>     * @see java.awt.image.WritableRaster#setDataElements</color>
<color=#75715e>     * @see java.awt.image.SampleModel#setDataElements</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Object</color> <color=#a6e22e>getDataElements</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>rgb</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>pixel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>alpha</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgb</color> <color=#f92672>>>></color> <color=#ae81ff>24</color><color=#f8f8f2>);</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>pix</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>alpha</color> <color=#f92672><</color> <color=#f8f8f2>ALPHA_THRESHOLD</color> <color=#f92672>&&</color> <color=#f8f8f2>getTransparentPixel</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pix</color> <color=#f92672>=</color> <color=#f8f8f2>getTransparentPixel</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>color</color> <color=#f92672>=</color> <color=#f8f8f2>rgb</color> <color=#f92672>&</color> <color=#f8f8f2>RGB_MASK</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>color</color> <color=#f92672>==</color> <color=#f8f8f2>WHITE</color> <color=#f92672>&&</color> <color=#f8f8f2>whiteIndex</color> <color=#f92672>!=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>pix</color> <color=#f92672>=</color> <color=#f8f8f2>whiteIndex</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>pix</color> <color=#f92672>=</color> <color=#f8f8f2>inverseMap</color><color=#f8f8f2>.</color><color=#a6e22e>getIndexNearest</color><color=#f8f8f2>(</color><color=#f8f8f2>color</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>installpixel</color><color=#f8f8f2>(</color><color=#f8f8f2>pixel</color><color=#f8f8f2>,</color> <color=#f8f8f2>pix</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>Object</color> <color=#a6e22e>installpixel</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>pixel</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pix</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>switch</color> <color=#f8f8f2>(</color><color=#f8f8f2>transferType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT</color><color=#f8f8f2>:</color>
                <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>intObj</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pixel</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>pixel</color> <color=#f92672>=</color> <color=#f8f8f2>intObj</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>intObj</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>pixel</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#f8f8f2>intObj</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>pix</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BYTE</color><color=#f8f8f2>:</color>
                <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>byteObj</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pixel</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>pixel</color> <color=#f92672>=</color> <color=#f8f8f2>byteObj</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>byteObj</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>pixel</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#f8f8f2>byteObj</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>pix</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>case</color> <color=#f8f8f2>DataBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_USHORT</color><color=#f8f8f2>:</color>
                <color=#66d9ef>short</color><color=#f92672>[]</color> <color=#f8f8f2>shortObj</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pixel</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>pixel</color> <color=#f92672>=</color> <color=#f8f8f2>shortObj</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>short</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>shortObj</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>short</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>pixel</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#f8f8f2>shortObj</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>short</color><color=#f8f8f2>)</color> <color=#f8f8f2>pix</color><color=#f8f8f2>;</color>
                <color=#66d9ef>break</color><color=#f8f8f2>;</color>
            <color=#66d9ef>default</color><color=#f8f8f2>:</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color><color=#e6db74>"This method has not been implemented for transferType "</color> <color=#f92672>+</color> <color=#f8f8f2>transferType</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pixel</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Just a workaround to ease debugging</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>StringUtil</color><color=#f8f8f2>.</color><color=#a6e22e>replace</color><color=#f8f8f2>(</color><color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>toString</color><color=#f8f8f2>(),</color> <color=#e6db74>"IndexColorModel: "</color><color=#f8f8f2>,</color> <color=#f8f8f2>getClass</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>": "</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>