<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.Point2D</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.geom.Rectangle2D</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * This BufferedImageOp simply copies pixels, converting to a</color>
<color=#75715e> * {@code IndexColorModel}.</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haku $</color>
<color=#75715e> * @version $Id: //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/image/CopyDither.java#1 $</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>CopyDither</color> <color=#66d9ef>implements</color> <color=#f8f8f2>BufferedImageOp</color><color=#f8f8f2>,</color> <color=#f8f8f2>RasterOp</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>protected</color> <color=#f8f8f2>IndexColorModel</color> <color=#f8f8f2>indexColorModel</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@code CopyDither}, using the given</color>
<color=#75715e>     * {@code IndexColorModel} for dithering into.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pICM an IndexColorModel.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>CopyDither</color><color=#f8f8f2>(</color><color=#f8f8f2>IndexColorModel</color> <color=#f8f8f2>pICM</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Store colormodel</color>
        <color=#f8f8f2>indexColorModel</color> <color=#f92672>=</color> <color=#f8f8f2>pICM</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a {@code CopyDither}, with no fixed</color>
<color=#75715e>     * {@code IndexColorModel}. The colormodel will be generated for each</color>
<color=#75715e>     * filtering, unless the dest image allready has an</color>
<color=#75715e>     * {@code IndexColorModel}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>CopyDither</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>


    <color=#75715e>/**</color>
<color=#75715e>     * Creates a compatible {@code BufferedImage} to dither into.</color>
<color=#75715e>     * Only {@code IndexColorModel} allowed.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return a compatible {@code BufferedImage}</color>
<color=#75715e>     * @throws ImageFilterException if {@code pDestCM} is not {@code null} or</color>
<color=#75715e>     *                              an instance of {@code IndexColorModel}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#f8f8f2>ColorModel</color> <color=#f8f8f2>pDestCM</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pDestCM</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>(),</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BYTE_INDEXED</color><color=#f8f8f2>,</color> <color=#f8f8f2>indexColorModel</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pDestCM</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>IndexColorModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>(),</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_BYTE_INDEXED</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#f8f8f2>IndexColorModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>pDestCM</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ImageFilterException</color><color=#f8f8f2>(</color><color=#e6db74>"Only IndexColorModel allowed."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a compatible {@code Raster} to dither into.</color>
<color=#75715e>     * Only {@code IndexColorModel} allowed.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSrc</color>
<color=#75715e>     * @return a {@code WritableRaster}</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>WritableRaster</color> <color=#a6e22e>createCompatibleDestRaster</color><color=#f8f8f2>(</color><color=#f8f8f2>Raster</color> <color=#f8f8f2>pSrc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>createCompatibleDestRaster</color><color=#f8f8f2>(</color><color=#f8f8f2>pSrc</color><color=#f8f8f2>,</color> <color=#f8f8f2>getICM</color><color=#f8f8f2>(</color><color=#f8f8f2>pSrc</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>WritableRaster</color> <color=#a6e22e>createCompatibleDestRaster</color><color=#f8f8f2>(</color><color=#f8f8f2>Raster</color> <color=#f8f8f2>pSrc</color><color=#f8f8f2>,</color> <color=#f8f8f2>IndexColorModel</color> <color=#f8f8f2>pIndexColorModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pIndexColorModel</color><color=#f8f8f2>.</color><color=#a6e22e>createCompatibleWritableRaster</color><color=#f8f8f2>(</color><color=#f8f8f2>pSrc</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pSrc</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>


    <color=#75715e>/**</color>
<color=#75715e>     * Returns the bounding box of the filtered destination image.  Since</color>
<color=#75715e>     * this is not a geometric operation, the bounding box does not</color>
<color=#75715e>     * change.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSrc the {@code BufferedImage} to be filtered</color>
<color=#75715e>     * @return the bounds of the filtered definition image.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>Rectangle2D</color> <color=#a6e22e>getBounds2D</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pSrc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>getBounds2D</color><color=#f8f8f2>(</color><color=#f8f8f2>pSrc</color><color=#f8f8f2>.</color><color=#a6e22e>getRaster</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the bounding box of the filtered destination Raster.  Since</color>
<color=#75715e>     * this is not a geometric operation, the bounding box does not</color>
<color=#75715e>     * change.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSrc the {@code Raster} to be filtered</color>
<color=#75715e>     * @return the bounds of the filtered definition {@code Raster}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>Rectangle2D</color> <color=#a6e22e>getBounds2D</color><color=#f8f8f2>(</color><color=#f8f8f2>Raster</color> <color=#f8f8f2>pSrc</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pSrc</color><color=#f8f8f2>.</color><color=#a6e22e>getBounds</color><color=#f8f8f2>();</color>

    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the location of the destination point given a</color>
<color=#75715e>     * point in the source.  If {@code dstPt} is not</color>
<color=#75715e>     * {@code null}, it will be used to hold the return value.</color>
<color=#75715e>     * Since this is not a geometric operation, the {@code srcPt}</color>
<color=#75715e>     * will equal the {@code dstPt}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSrcPt a {@code Point2D} that represents a point</color>
<color=#75715e>     *               in the source image</color>
<color=#75715e>     * @param pDstPt a {@code Point2D}that represents the location</color>
<color=#75715e>     *               in the destination</color>
<color=#75715e>     * @return the {@code Point2D} in the destination that</color>
<color=#75715e>     * corresponds to the specified point in the source.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>Point2D</color> <color=#a6e22e>getPoint2D</color><color=#f8f8f2>(</color><color=#f8f8f2>Point2D</color> <color=#f8f8f2>pSrcPt</color><color=#f8f8f2>,</color> <color=#f8f8f2>Point2D</color> <color=#f8f8f2>pDstPt</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Create new Point, if needed</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pDstPt</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pDstPt</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Point2D</color><color=#f8f8f2>.</color><color=#a6e22e>Float</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Copy location</color>
        <color=#f8f8f2>pDstPt</color><color=#f8f8f2>.</color><color=#a6e22e>setLocation</color><color=#f8f8f2>(</color><color=#f8f8f2>pSrcPt</color><color=#f8f8f2>.</color><color=#a6e22e>getX</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pSrcPt</color><color=#f8f8f2>.</color><color=#a6e22e>getY</color><color=#f8f8f2>());</color>

        <color=#75715e>// Return dest</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>pDstPt</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the rendering mHints for this op.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the {@code RenderingHints} object associated</color>
<color=#75715e>     * with this op.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>RenderingHints</color> <color=#a6e22e>getRenderingHints</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Converts a int triplet to int ARGB.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#a6e22e>toIntARGB</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pRGB</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#ae81ff>0xff000000</color> <color=#75715e>// All opaque</color>
                <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>pRGB</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color>
                <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>pRGB</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color>
                <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>pRGB</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>);</color>
        <color=#75715e>/*</color>
<color=#75715e>          | ((int) (pRGB[0] << 16) & 0x00ff0000)</color>
<color=#75715e>          | ((int) (pRGB[1] <<  8) & 0x0000ff00)</color>
<color=#75715e>          | ((int) (pRGB[2]      ) & 0x000000ff);</color>
<color=#75715e>        */</color>
    <color=#f8f8f2>}</color>


    <color=#75715e>/**</color>
<color=#75715e>     * Performs a single-input/single-output dither operation, applying basic</color>
<color=#75715e>     * Floyd-Steinberg error-diffusion to the image.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSource the source image</color>
<color=#75715e>     * @param pDest   the destiantion image</color>
<color=#75715e>     * @return the destination image, or a new image, if {@code pDest} was</color>
<color=#75715e>     * {@code null}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pDest</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Create destination image, if none provided</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pDest</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pDest</color> <color=#f92672>=</color> <color=#f8f8f2>createCompatibleDestImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#f8f8f2>getICM</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>pDest</color><color=#f8f8f2>.</color><color=#a6e22e>getColorModel</color><color=#f8f8f2>()</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>IndexColorModel</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>ImageFilterException</color><color=#f8f8f2>(</color><color=#e6db74>"Only IndexColorModel allowed."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Filter rasters</color>
        <color=#f8f8f2>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>getRaster</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pDest</color><color=#f8f8f2>.</color><color=#a6e22e>getRaster</color><color=#f8f8f2>(),</color> <color=#f8f8f2>(</color><color=#f8f8f2>IndexColorModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>pDest</color><color=#f8f8f2>.</color><color=#a6e22e>getColorModel</color><color=#f8f8f2>());</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>pDest</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Performs a single-input/single-output dither operation, applying basic</color>
<color=#75715e>     * Floyd-Steinberg error-diffusion to the image.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSource</color>
<color=#75715e>     * @param pDest</color>
<color=#75715e>     * @return the destination raster, or a new raster, if {@code pDest} was</color>
<color=#75715e>     * {@code null}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>WritableRaster</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Raster</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#f8f8f2>WritableRaster</color> <color=#f8f8f2>pDest</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>filter</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#f8f8f2>pDest</color><color=#f8f8f2>,</color> <color=#f8f8f2>getICM</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>IndexColorModel</color> <color=#a6e22e>getICM</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>indexColorModel</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>indexColorModel</color> <color=#f8f8f2>:</color> <color=#f8f8f2>IndexImage</color><color=#f8f8f2>.</color><color=#a6e22e>getIndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#ae81ff>256</color><color=#f8f8f2>,</color> <color=#f8f8f2>IndexImage</color><color=#f8f8f2>.</color><color=#a6e22e>TRANSPARENCY_BITMASK</color> <color=#f92672>|</color> <color=#f8f8f2>IndexImage</color><color=#f8f8f2>.</color><color=#a6e22e>COLOR_SELECTION_QUALITY</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>IndexColorModel</color> <color=#a6e22e>getICM</color><color=#f8f8f2>(</color><color=#f8f8f2>Raster</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>indexColorModel</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>indexColorModel</color> <color=#f8f8f2>:</color> <color=#f8f8f2>createIndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#f8f8f2>IndexColorModel</color> <color=#a6e22e>createIndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>Raster</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>image</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>(),</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>setData</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>IndexImage</color><color=#f8f8f2>.</color><color=#a6e22e>getIndexColorModel</color><color=#f8f8f2>(</color><color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#ae81ff>256</color><color=#f8f8f2>,</color> <color=#f8f8f2>IndexImage</color><color=#f8f8f2>.</color><color=#a6e22e>TRANSPARENCY_BITMASK</color> <color=#f92672>|</color> <color=#f8f8f2>IndexImage</color><color=#f8f8f2>.</color><color=#a6e22e>COLOR_SELECTION_QUALITY</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Performs a single-input/single-output pixel copy operation.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pSource</color>
<color=#75715e>     * @param pDest</color>
<color=#75715e>     * @param pColorModel</color>
<color=#75715e>     * @return the destination raster, or a new raster, if {@code pDest} was</color>
<color=#75715e>     * {@code null}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>WritableRaster</color> <color=#a6e22e>filter</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Raster</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#f8f8f2>WritableRaster</color> <color=#f8f8f2>pDest</color><color=#f8f8f2>,</color> <color=#f8f8f2>IndexColorModel</color> <color=#f8f8f2>pColorModel</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pDest</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pDest</color> <color=#f92672>=</color> <color=#f8f8f2>createCompatibleDestRaster</color><color=#f8f8f2>(</color><color=#f8f8f2>pSource</color><color=#f8f8f2>,</color> <color=#f8f8f2>pColorModel</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// temp buffers</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>inRGB</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#ae81ff>4</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>Object</color> <color=#f8f8f2>pixel</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#75715e>// TODO: Use getPixels instead of getPixel for better performance?</color>

        <color=#75715e>// Loop through image data</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>y</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color> <color=#f92672><</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color> <color=#f8f8f2>y</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color> <color=#f92672><</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color> <color=#f8f8f2>x</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Get rgb from original raster</color>
                <color=#75715e>// DON'T KNOW IF THIS WILL WORK FOR ALL TYPES..?</color>
                <color=#f8f8f2>pSource</color><color=#f8f8f2>.</color><color=#a6e22e>getPixel</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>inRGB</color><color=#f8f8f2>);</color>

                <color=#75715e>// Get pixel value...</color>
                <color=#75715e>// It is VERY important that we are using an IndexColorModel that</color>
                <color=#75715e>// support reverse color lookup for speed.</color>
                <color=#f8f8f2>pixel</color> <color=#f92672>=</color> <color=#f8f8f2>pColorModel</color><color=#f8f8f2>.</color><color=#a6e22e>getDataElements</color><color=#f8f8f2>(</color><color=#f8f8f2>toIntARGB</color><color=#f8f8f2>(</color><color=#f8f8f2>inRGB</color><color=#f8f8f2>),</color> <color=#f8f8f2>pixel</color><color=#f8f8f2>);</color>

                <color=#75715e>// And set it</color>
                <color=#f8f8f2>pDest</color><color=#f8f8f2>.</color><color=#a6e22e>setDataElements</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#f8f8f2>pixel</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>pDest</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>