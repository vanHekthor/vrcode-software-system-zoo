<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.RGBImageFilter</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * This class can convert a color image to grayscale.</color>
<color=#75715e> * <p/></color>
<color=#75715e> * Uses ITU standard conversion: (222 * Red + 707 * Green + 71 * Blue) / 1000.</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haku $</color>
<color=#75715e> * @version $Id: //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/image/GrayFilter.java#1 $</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>GrayFilter</color> <color=#66d9ef>extends</color> <color=#f8f8f2>RGBImageFilter</color> <color=#f8f8f2>{</color>

    <color=#75715e>// This filter can filter IndexColorModel</color>
    <color=#f8f8f2>{</color>
        <color=#f8f8f2>canFilterIndexColorModel</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>low</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>range</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Constructs a GrayFilter using ITU color-conversion.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>GrayFilter</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Constructs a GrayFilter using ITU color-conversion, and a dynamic range between</color>
<color=#75715e>     * pLow and pHigh.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pLow  float in the range  0..1</color>
<color=#75715e>     * @param pHigh float in the range 0..1 and >= pLow</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>GrayFilter</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>pLow</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>pHigh</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLow</color> <color=#f92672>></color> <color=#f8f8f2>pHigh</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pLow</color> <color=#f92672>=</color> <color=#ae81ff>0f</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>// Make sure high and low are inside range</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLow</color> <color=#f92672><</color> <color=#ae81ff>0f</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pLow</color> <color=#f92672>=</color> <color=#ae81ff>0f</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLow</color> <color=#f92672>></color> <color=#ae81ff>1f</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pLow</color> <color=#f92672>=</color> <color=#ae81ff>1f</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pHigh</color> <color=#f92672><</color> <color=#ae81ff>0f</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pHigh</color> <color=#f92672>=</color> <color=#ae81ff>0f</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>pHigh</color> <color=#f92672>></color> <color=#ae81ff>1f</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>pHigh</color> <color=#f92672>=</color> <color=#ae81ff>1f</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>low</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>pLow</color> <color=#f92672>*</color> <color=#ae81ff>255</color><color=#f8f8f2>f</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>range</color> <color=#f92672>=</color> <color=#f8f8f2>pHigh</color> <color=#f92672>-</color> <color=#f8f8f2>pLow</color><color=#f8f8f2>;</color>

    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Constructs a GrayFilter using ITU color-conversion, and a dynamic</color>
<color=#75715e>     * range between pLow and pHigh.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pLow  integer in the range 0..255</color>
<color=#75715e>     * @param pHigh inteeger in the range 0..255 and >= pLow</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>GrayFilter</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pLow</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pHigh</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>pLow</color> <color=#f92672>/</color> <color=#ae81ff>255</color><color=#f8f8f2>f</color><color=#f8f8f2>,</color> <color=#f8f8f2>pHigh</color> <color=#f92672>/</color> <color=#ae81ff>255</color><color=#f8f8f2>f</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Filters one pixel using ITU color-conversion.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pX    x</color>
<color=#75715e>     * @param pY    y</color>
<color=#75715e>     * @param pARGB pixel value in default color space</color>
<color=#75715e>     * @return the filtered pixel value in the default color space</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>filterRGB</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pX</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pY</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pARGB</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// Get color components</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#f8f8f2>pARGB</color> <color=#f92672>>></color> <color=#ae81ff>16</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>pARGB</color> <color=#f92672>>></color> <color=#ae81ff>8</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>pARGB</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>

        <color=#75715e>// ITU standard:  Gray scale=(222*Red+707*Green+71*Blue)/1000</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>gray</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#ae81ff>222</color> <color=#f92672>*</color> <color=#f8f8f2>r</color> <color=#f92672>+</color> <color=#ae81ff>707</color> <color=#f92672>*</color> <color=#f8f8f2>g</color> <color=#f92672>+</color> <color=#ae81ff>71</color> <color=#f92672>*</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>1000</color><color=#f8f8f2>;</color>

        <color=#75715e>//int gray = (int) ((float) (r + g + b) / 3.0f);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>range</color> <color=#f92672>!=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Apply range</color>
            <color=#f8f8f2>gray</color> <color=#f92672>=</color> <color=#f8f8f2>low</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>gray</color> <color=#f92672>*</color> <color=#f8f8f2>range</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Return ARGB pixel</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>(</color><color=#f8f8f2>pARGB</color> <color=#f92672>&</color> <color=#ae81ff>0xFF000000</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>gray</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>gray</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#f8f8f2>gray</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>