<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.image</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * GraphicsUtil</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.no">Harald Kuhr</a></color>
<color=#75715e> * @author last modified by $Author: haku $</color>
<color=#75715e> * @version $Id: //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/image/GraphicsUtil.java#1 $</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>GraphicsUtil</color> <color=#f8f8f2>{</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Enables anti-aliasing in the {@code Graphics} object.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * Anti-aliasing is enabled by casting to {@code Graphics2D} and setting</color>
<color=#75715e>     * the rendering hint {@code RenderingHints.KEY_ANTIALIASING} to</color>
<color=#75715e>     * {@code RenderingHints.VALUE_ANTIALIAS_ON}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pGraphics the graphics object</color>
<color=#75715e>     * @throws ClassCastException if {@code pGraphics} is not an instance of</color>
<color=#75715e>     *                            {@code Graphics2D}.</color>
<color=#75715e>     * @see RenderingHints#KEY_ANTIALIASING</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>enableAA</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Graphics</color> <color=#f8f8f2>pGraphics</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>((</color><color=#f8f8f2>Graphics2D</color><color=#f8f8f2>)</color> <color=#f8f8f2>pGraphics</color><color=#f8f8f2>).</color><color=#a6e22e>setRenderingHint</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>KEY_ANTIALIASING</color><color=#f8f8f2>,</color> <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>VALUE_ANTIALIAS_ON</color>
        <color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Sets the alpha in the {@code Graphics} object.</color>
<color=#75715e>     * <p/></color>
<color=#75715e>     * Alpha is set by casting to {@code Graphics2D} and setting the composite</color>
<color=#75715e>     * to the rule {@code AlphaComposite.SRC_OVER} multiplied by the given</color>
<color=#75715e>     * alpha.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pGraphics the graphics object</color>
<color=#75715e>     * @param pAlpha    the alpha level, {@code alpha} must be a floating point</color>
<color=#75715e>     *                  number in the inclusive range [0.0,&nbsp;1.0].</color>
<color=#75715e>     * @throws ClassCastException if {@code pGraphics} is not an instance of</color>
<color=#75715e>     *                            {@code Graphics2D}.</color>
<color=#75715e>     * @see AlphaComposite#SRC_OVER</color>
<color=#75715e>     * @see AlphaComposite#getInstance(int, float)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>setAlpha</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#f8f8f2>Graphics</color> <color=#f8f8f2>pGraphics</color><color=#f8f8f2>,</color> <color=#66d9ef>final</color> <color=#66d9ef>float</color> <color=#f8f8f2>pAlpha</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>((</color><color=#f8f8f2>Graphics2D</color><color=#f8f8f2>)</color> <color=#f8f8f2>pGraphics</color><color=#f8f8f2>).</color><color=#a6e22e>setComposite</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>AlphaComposite</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>AlphaComposite</color><color=#f8f8f2>.</color><color=#a6e22e>SRC_OVER</color><color=#f8f8f2>,</color> <color=#f8f8f2>pAlpha</color><color=#f8f8f2>)</color>
        <color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>