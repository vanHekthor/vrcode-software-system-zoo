<color=#75715e>/*</color>
<color=#75715e> * Copyright (c) 2008, Harald Kuhr</color>
<color=#75715e> * All rights reserved.</color>
<color=#75715e> *</color>
<color=#75715e> * Redistribution and use in source and binary forms, with or without</color>
<color=#75715e> * modification, are permitted provided that the following conditions are met:</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions of source code must retain the above copyright notice, this</color>
<color=#75715e> *   list of conditions and the following disclaimer.</color>
<color=#75715e> *</color>
<color=#75715e> * * Redistributions in binary form must reproduce the above copyright notice,</color>
<color=#75715e> *   this list of conditions and the following disclaimer in the documentation</color>
<color=#75715e> *   and/or other materials provided with the distribution.</color>
<color=#75715e> *</color>
<color=#75715e> * * Neither the name of the copyright holder nor the names of its</color>
<color=#75715e> *   contributors may be used to endorse or promote products derived from</color>
<color=#75715e> *   this software without specific prior written permission.</color>
<color=#75715e> *</color>
<color=#75715e> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</color>
<color=#75715e> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</color>
<color=#75715e> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</color>
<color=#75715e> * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</color>
<color=#75715e> * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</color>
<color=#75715e> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</color>
<color=#75715e> * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</color>
<color=#75715e> * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</color>
<color=#75715e> * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</color>
<color=#75715e> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>com.twelvemonkeys.image</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Inverse Colormap to provide efficient lookup of any given input color</color>
<color=#75715e> * to the closest match to the given color map.</color>
<color=#75715e> * <p/></color>
<color=#75715e> * Based on "Efficient Inverse Color Map Computation" by Spencer W. Thomas</color>
<color=#75715e> * in "Graphics Gems Volume II"</color>
<color=#75715e> *</color>
<color=#75715e> * @author <a href="mailto:harald.kuhr@gmail.com">Harald Kuhr</a></color>
<color=#75715e> * @author Robin Luiten (Java port)</color>
<color=#75715e> * @author Spencer W. Thomas (original c version).</color>
<color=#75715e> * @version $Id: //depot/branches/personal/haraldk/twelvemonkeys/release-2/twelvemonkeys-core/src/main/java/com/twelvemonkeys/image/InverseColorMap.java#1 $</color>
<color=#75715e> */</color>
<color=#66d9ef>class</color> <color=#a6e22e>InverseColorMap</color> <color=#f8f8f2>{</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Number of high bits of each color channel to use to lookup near match</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>QUANTBITS</color> <color=#f92672>=</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Truncated bits of each color channel</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>TRUNCBITS</color> <color=#f92672>=</color> <color=#ae81ff>8</color> <color=#f92672>-</color> <color=#f8f8f2>QUANTBITS</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * BITMASK representing the bits for blue in the color lookup</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>QUANTMASK_BLUE</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#ae81ff>1</color> <color=#f92672><<</color> <color=#ae81ff>5</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * BITMASK representing the bits for green in the color lookup</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>QUANTMASK_GREEN</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>QUANTMASK_BLUE</color> <color=#f92672><<</color> <color=#f8f8f2>QUANTBITS</color><color=#f8f8f2>);</color>

    <color=#75715e>/**</color>
<color=#75715e>     * BITMASK representing the bits for red in the color lookup</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>QUANTMASK_RED</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>QUANTMASK_GREEN</color> <color=#f92672><<</color> <color=#f8f8f2>QUANTBITS</color><color=#f8f8f2>);</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Maximum value a quantised color channel can have</color>
<color=#75715e>     */</color>
    <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>MAXQUANTVAL</color> <color=#f92672>=</color> <color=#ae81ff>1</color> <color=#f92672><<</color> <color=#ae81ff>5</color><color=#f8f8f2>;</color>

    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>rgbMapByte</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>rgbMapInt</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>numColors</color><color=#f8f8f2>;</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>maxColor</color><color=#f8f8f2>;</color>
    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>inverseRGB</color><color=#f8f8f2>;</color>        <color=#75715e>// inverse rgb color map</color>
    <color=#66d9ef>int</color> <color=#f8f8f2>transparentIndex</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * @param pRGBColorMap the rgb color map to create inverse color map for.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>InverseColorMap</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pRGBColorMap</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>pRGBColorMap</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * @param pRGBColorMap the rgb color map to create inverse color map for.</color>
<color=#75715e>     */</color>
    <color=#75715e>// HaraldK 20040801: Added support for int[]</color>
    <color=#f8f8f2>InverseColorMap</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pRGBColorMap</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>pRGBColorMap</color><color=#f8f8f2>,</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * @param pRGBColorMap the rgb color map to create inverse color map for.</color>
<color=#75715e>     * @param pTransparent the index of the transparent pixel in the map</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>InverseColorMap</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pRGBColorMap</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pTransparent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>rgbMapByte</color> <color=#f92672>=</color> <color=#f8f8f2>pRGBColorMap</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>numColors</color> <color=#f92672>=</color> <color=#f8f8f2>rgbMapByte</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>/</color> <color=#ae81ff>4</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>transparentIndex</color> <color=#f92672>=</color> <color=#f8f8f2>pTransparent</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>inverseRGB</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>MAXQUANTVAL</color> <color=#f92672>*</color> <color=#f8f8f2>MAXQUANTVAL</color> <color=#f92672>*</color> <color=#f8f8f2>MAXQUANTVAL</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>initIRGB</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>MAXQUANTVAL</color> <color=#f92672>*</color> <color=#f8f8f2>MAXQUANTVAL</color> <color=#f92672>*</color> <color=#f8f8f2>MAXQUANTVAL</color><color=#f92672>]</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * @param pRGBColorMap the rgb color map to create inverse color map for.</color>
<color=#75715e>     * @param pTransparent the index of the transparent pixel in the map</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>InverseColorMap</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pRGBColorMap</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pTransparent</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>rgbMapInt</color> <color=#f92672>=</color> <color=#f8f8f2>pRGBColorMap</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>numColors</color> <color=#f92672>=</color> <color=#f8f8f2>rgbMapInt</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>transparentIndex</color> <color=#f92672>=</color> <color=#f8f8f2>pTransparent</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>inverseRGB</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>MAXQUANTVAL</color> <color=#f92672>*</color> <color=#f8f8f2>MAXQUANTVAL</color> <color=#f92672>*</color> <color=#f8f8f2>MAXQUANTVAL</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>initIRGB</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#66d9ef>int</color><color=#f92672>[</color><color=#f8f8f2>MAXQUANTVAL</color> <color=#f92672>*</color> <color=#f8f8f2>MAXQUANTVAL</color> <color=#f92672>*</color> <color=#f8f8f2>MAXQUANTVAL</color><color=#f92672>]</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>


    <color=#75715e>/**</color>
<color=#75715e>     * Simple inverse color table creation method.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pTemp temp array</color>
<color=#75715e>     */</color>
    <color=#66d9ef>void</color> <color=#a6e22e>initIRGB</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f92672>[]</color> <color=#f8f8f2>pTemp</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#ae81ff>1</color> <color=#f92672><<</color> <color=#f8f8f2>TRUNCBITS</color><color=#f8f8f2>);</color>        <color=#75715e>// 8 the size of 1 Dimension of each quantized cell</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>xsqr</color> <color=#f92672>=</color> <color=#ae81ff>1</color> <color=#f92672><<</color> <color=#f8f8f2>(</color><color=#f8f8f2>TRUNCBITS</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color> <color=#75715e>// 64 - twice the smallest step size vale of quantized colors</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>xsqr2</color> <color=#f92672>=</color> <color=#f8f8f2>xsqr</color> <color=#f92672>+</color> <color=#f8f8f2>xsqr</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>numColors</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>==</color> <color=#f8f8f2>transparentIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>// Skip the transparent pixel</color>
                <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>int</color> <color=#f8f8f2>red</color><color=#f8f8f2>,</color> <color=#f8f8f2>r</color><color=#f8f8f2>,</color> <color=#f8f8f2>rdist</color><color=#f8f8f2>,</color> <color=#f8f8f2>rinc</color><color=#f8f8f2>,</color> <color=#f8f8f2>rxx</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>green</color><color=#f8f8f2>,</color> <color=#f8f8f2>g</color><color=#f8f8f2>,</color> <color=#f8f8f2>gdist</color><color=#f8f8f2>,</color> <color=#f8f8f2>ginc</color><color=#f8f8f2>,</color> <color=#f8f8f2>gxx</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>blue</color><color=#f8f8f2>,</color> <color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>bdist</color><color=#f8f8f2>,</color> <color=#f8f8f2>binc</color><color=#f8f8f2>,</color> <color=#f8f8f2>bxx</color><color=#f8f8f2>;</color>

            <color=#75715e>// HaraldK 20040801: Added support for int[]</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgbMapByte</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>red</color> <color=#f92672>=</color> <color=#f8f8f2>rgbMapByte</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>*</color> <color=#ae81ff>4</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>green</color> <color=#f92672>=</color> <color=#f8f8f2>rgbMapByte</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>*</color> <color=#ae81ff>4</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>blue</color> <color=#f92672>=</color> <color=#f8f8f2>rgbMapByte</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>*</color> <color=#ae81ff>4</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgbMapInt</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>red</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgbMapInt</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>green</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>rgbMapInt</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>blue</color> <color=#f92672>=</color> <color=#f8f8f2>rgbMapInt</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"colormap == null"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>rdist</color> <color=#f92672>=</color> <color=#f8f8f2>red</color> <color=#f92672>-</color> <color=#f8f8f2>x</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>   <color=#75715e>// distance of red to center of current cell</color>
            <color=#f8f8f2>gdist</color> <color=#f92672>=</color> <color=#f8f8f2>green</color> <color=#f92672>-</color> <color=#f8f8f2>x</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color> <color=#75715e>// green</color>
            <color=#f8f8f2>bdist</color> <color=#f92672>=</color> <color=#f8f8f2>blue</color> <color=#f92672>-</color> <color=#f8f8f2>x</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>  <color=#75715e>// blue</color>
            <color=#f8f8f2>rdist</color> <color=#f92672>=</color> <color=#f8f8f2>rdist</color> <color=#f92672>*</color> <color=#f8f8f2>rdist</color> <color=#f92672>+</color> <color=#f8f8f2>gdist</color> <color=#f92672>*</color> <color=#f8f8f2>gdist</color> <color=#f92672>+</color> <color=#f8f8f2>bdist</color> <color=#f92672>*</color> <color=#f8f8f2>bdist</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>rinc</color> <color=#f92672>=</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>xsqr</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>red</color> <color=#f92672><<</color> <color=#f8f8f2>TRUNCBITS</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>ginc</color> <color=#f92672>=</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>xsqr</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>green</color> <color=#f92672><<</color> <color=#f8f8f2>TRUNCBITS</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>binc</color> <color=#f92672>=</color> <color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>(</color><color=#f8f8f2>xsqr</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>blue</color> <color=#f92672><<</color> <color=#f8f8f2>TRUNCBITS</color><color=#f8f8f2>));</color>

            <color=#66d9ef>int</color> <color=#f8f8f2>rgbI</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>rxx</color> <color=#f92672>=</color> <color=#f8f8f2>rinc</color><color=#f8f8f2>;</color> <color=#f8f8f2>r</color> <color=#f92672><</color> <color=#f8f8f2>MAXQUANTVAL</color><color=#f8f8f2>;</color> <color=#f8f8f2>rdist</color> <color=#f92672>+=</color> <color=#f8f8f2>rxx</color><color=#f8f8f2>,</color> <color=#f92672>++</color><color=#f8f8f2>r</color><color=#f8f8f2>,</color> <color=#f8f8f2>rxx</color> <color=#f92672>+=</color> <color=#f8f8f2>xsqr2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>gdist</color> <color=#f92672>=</color> <color=#f8f8f2>rdist</color><color=#f8f8f2>,</color> <color=#f8f8f2>gxx</color> <color=#f92672>=</color> <color=#f8f8f2>ginc</color><color=#f8f8f2>;</color> <color=#f8f8f2>g</color> <color=#f92672><</color> <color=#f8f8f2>MAXQUANTVAL</color><color=#f8f8f2>;</color> <color=#f8f8f2>gdist</color> <color=#f92672>+=</color> <color=#f8f8f2>gxx</color><color=#f8f8f2>,</color> <color=#f92672>++</color><color=#f8f8f2>g</color><color=#f8f8f2>,</color> <color=#f8f8f2>gxx</color> <color=#f92672>+=</color> <color=#f8f8f2>xsqr2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>bdist</color> <color=#f92672>=</color> <color=#f8f8f2>gdist</color><color=#f8f8f2>,</color> <color=#f8f8f2>bxx</color> <color=#f92672>=</color> <color=#f8f8f2>binc</color><color=#f8f8f2>;</color> <color=#f8f8f2>b</color> <color=#f92672><</color> <color=#f8f8f2>MAXQUANTVAL</color><color=#f8f8f2>;</color> <color=#f8f8f2>bdist</color> <color=#f92672>+=</color> <color=#f8f8f2>bxx</color><color=#f8f8f2>,</color> <color=#f92672>++</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f92672>++</color><color=#f8f8f2>rgbI</color><color=#f8f8f2>,</color> <color=#f8f8f2>bxx</color> <color=#f92672>+=</color> <color=#f8f8f2>xsqr2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>i</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>pTemp</color><color=#f92672>[</color><color=#f8f8f2>rgbI</color><color=#f92672>]</color> <color=#f92672>></color> <color=#f8f8f2>bdist</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>pTemp</color><color=#f92672>[</color><color=#f8f8f2>rgbI</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>bdist</color><color=#f8f8f2>;</color>
                            <color=#f8f8f2>inverseRGB</color><color=#f92672>[</color><color=#f8f8f2>rgbI</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the index of the nearest color to from the color map.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pColor the color to get the nearest color to from color map</color>
<color=#75715e>     *               color must be of format {@code 0x00RRGGBB} - standard default RGB</color>
<color=#75715e>     * @return index of color which closest matches input color by using the</color>
<color=#75715e>     * created inverse color map.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getIndexNearest</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pColor</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>inverseRGB</color><color=#f92672>[</color><color=#f8f8f2>((</color><color=#f8f8f2>pColor</color> <color=#f92672>>></color> <color=#f8f8f2>(</color><color=#ae81ff>3</color> <color=#f92672>*</color> <color=#f8f8f2>TRUNCBITS</color><color=#f8f8f2>))</color> <color=#f92672>&</color> <color=#f8f8f2>QUANTMASK_RED</color><color=#f8f8f2>)</color> <color=#f92672>+</color>
                <color=#f8f8f2>((</color><color=#f8f8f2>pColor</color> <color=#f92672>>></color> <color=#f8f8f2>(</color><color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>TRUNCBITS</color><color=#f8f8f2>))</color> <color=#f92672>&</color> <color=#f8f8f2>QUANTMASK_GREEN</color><color=#f8f8f2>)</color> <color=#f92672>+</color>
                <color=#f8f8f2>((</color><color=#f8f8f2>pColor</color> <color=#f92672>>></color> <color=#f8f8f2>(</color><color=#75715e>/* 1 * */</color> <color=#f8f8f2>TRUNCBITS</color><color=#f8f8f2>))</color> <color=#f92672>&</color> <color=#f8f8f2>QUANTMASK_BLUE</color><color=#f8f8f2>)</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Gets the index of the nearest color to from the color map.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param pRed   red component of the color to get the nearest color to from color map</color>
<color=#75715e>     * @param pGreen green component of the color to get the nearest color to from color map</color>
<color=#75715e>     * @param pBlue  blue component of the color to get the nearest color to from color map</color>
<color=#75715e>     * @return index of color which closest matches input color by using the</color>
<color=#75715e>     * created inverse color map.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#a6e22e>getIndexNearest</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>pRed</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pGreen</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>pBlue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#75715e>// NOTE: the third line in expression for blue is shifting DOWN not UP.</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>inverseRGB</color><color=#f92672>[</color><color=#f8f8f2>((</color><color=#f8f8f2>pRed</color> <color=#f92672><<</color> <color=#f8f8f2>(</color><color=#ae81ff>2</color> <color=#f92672>*</color> <color=#f8f8f2>QUANTBITS</color> <color=#f92672>-</color> <color=#f8f8f2>TRUNCBITS</color><color=#f8f8f2>))</color> <color=#f92672>&</color> <color=#f8f8f2>QUANTMASK_RED</color><color=#f8f8f2>)</color> <color=#f92672>+</color>
                <color=#f8f8f2>((</color><color=#f8f8f2>pGreen</color> <color=#f92672><<</color> <color=#f8f8f2>(</color><color=#75715e>/* 1 * */</color> <color=#f8f8f2>QUANTBITS</color> <color=#f92672>-</color> <color=#f8f8f2>TRUNCBITS</color><color=#f8f8f2>))</color> <color=#f92672>&</color> <color=#f8f8f2>QUANTMASK_GREEN</color><color=#f8f8f2>)</color> <color=#f92672>+</color>
                <color=#f8f8f2>((</color><color=#f8f8f2>pBlue</color> <color=#f92672>>></color> <color=#f8f8f2>(</color><color=#f8f8f2>TRUNCBITS</color><color=#f8f8f2>))</color> <color=#f92672>&</color> <color=#f8f8f2>QUANTMASK_BLUE</color><color=#f8f8f2>)</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>