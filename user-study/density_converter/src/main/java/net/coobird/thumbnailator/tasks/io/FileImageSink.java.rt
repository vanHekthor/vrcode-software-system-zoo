<color=#f92672>package</color> <color=#f8f8f2>net.coobird.thumbnailator.tasks.io</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.ThumbnailParameter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.tasks.UnsupportedFormatException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.util.BufferedImages</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.util.ThumbnailatorUtils</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.stream.ImageOutputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.File</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.FileOutputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Iterator</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.List</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.NoSuchElementException</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * An {@link ImageSink} which writes the resulting thumbnail to a file.</color>
<color=#75715e> * <p></color>
<color=#75715e> * Under certain circumstances, the destination file can change in the course</color>
<color=#75715e> * of processing.</color>
<color=#75715e> * <p></color>
<color=#75715e> * This can occur in cases where the file extension does not</color>
<color=#75715e> * match the output format set by the {@link #setOutputFormatName(String)}</color>
<color=#75715e> * method. In this case, the file name will have a file extension corresponding</color>
<color=#75715e> * to the output format set in the above method to be appended to the file</color>
<color=#75715e> * name originally provided when instantiating the {@link FileImageSink} object.</color>
<color=#75715e> *</color>
<color=#75715e> * @author coobird</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>FileImageSink</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractImageSink</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#f8f8f2>{</color>
    <color=#75715e>/**</color>
<color=#75715e>     * The file to which the thumbnail is written to.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * Under certain circumstances, the {@link File} object can be replaced</color>
<color=#75715e>     * in the course of processing. This can occur in cases where the file</color>
<color=#75715e>     * extension has been changed due to incongruence between the extension</color>
<color=#75715e>     * and the desired output format.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>File</color> <color=#f8f8f2>destinationFile</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>allowOverwrite</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Instantiates a {@link FileImageSink} with the file to which the thumbnail</color>
<color=#75715e>     * should be written to.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * The output format to use will be determined from the file extension.</color>
<color=#75715e>     * If another format should be used, then the</color>
<color=#75715e>     * {@link #setOutputFormatName(String)} should be called with the desired</color>
<color=#75715e>     * output format name.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * When the destination file exists, then this {@code FileImageSink} will</color>
<color=#75715e>     * overwrite the existing file.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param destinationFile The destination file.</color>
<color=#75715e>     * @throws NullPointerException If the specified file is {@code null}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>FileImageSink</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>destinationFile</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>destinationFile</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Instantiates a {@link FileImageSink} with the file to which the thumbnail</color>
<color=#75715e>     * should be written to.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * The output format to use will be determined from the file extension.</color>
<color=#75715e>     * If another format should be used, then the</color>
<color=#75715e>     * {@link #setOutputFormatName(String)} should be called with the desired</color>
<color=#75715e>     * output format name.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param destinationFile The destination file.</color>
<color=#75715e>     * @param allowOverwrite  Whether or not the {@code FileImageSink}</color>
<color=#75715e>     *                        should overwrite the destination file if</color>
<color=#75715e>     *                        it already exists.</color>
<color=#75715e>     * @throws NullPointerException If the specified file is {@code null}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>FileImageSink</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>destinationFile</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>allowOverwrite</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>destinationFile</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"File cannot be null."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>destinationFile</color> <color=#f92672>=</color> <color=#f8f8f2>destinationFile</color><color=#f8f8f2>;</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>outputFormat</color> <color=#f92672>=</color> <color=#f8f8f2>getExtension</color><color=#f8f8f2>(</color><color=#f8f8f2>destinationFile</color><color=#f8f8f2>);</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>allowOverwrite</color> <color=#f92672>=</color> <color=#f8f8f2>allowOverwrite</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Instantiates a {@link FileImageSink} with the file to which the thumbnail</color>
<color=#75715e>     * should be written to.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * The output format to use will be determined from the file extension.</color>
<color=#75715e>     * If another format should be used, then the</color>
<color=#75715e>     * {@link #setOutputFormatName(String)} should be called with the desired</color>
<color=#75715e>     * output format name.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * When the destination file exists, then this {@code FileImageSink} will</color>
<color=#75715e>     * overwrite the existing file.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param destinationFilePath The destination file path.</color>
<color=#75715e>     * @throws NullPointerException If the specified file path is {@code null}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>FileImageSink</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>destinationFilePath</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>destinationFilePath</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Instantiates a {@link FileImageSink} with the file to which the thumbnail</color>
<color=#75715e>     * should be written to.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * The output format to use will be determined from the file extension.</color>
<color=#75715e>     * If another format should be used, then the</color>
<color=#75715e>     * {@link #setOutputFormatName(String)} should be called with the desired</color>
<color=#75715e>     * output format name.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param destinationFilePath The destination file path.</color>
<color=#75715e>     * @param allowOverwrite      Whether or not the {@code FileImageSink}</color>
<color=#75715e>     *                            should overwrite the destination file if</color>
<color=#75715e>     *                            it already exists.</color>
<color=#75715e>     * @throws NullPointerException If the specified file path is {@code null}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>FileImageSink</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>destinationFilePath</color><color=#f8f8f2>,</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>allowOverwrite</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>destinationFilePath</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"File cannot be null."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>destinationFile</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>destinationFilePath</color><color=#f8f8f2>);</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>outputFormat</color> <color=#f92672>=</color> <color=#f8f8f2>getExtension</color><color=#f8f8f2>(</color><color=#f8f8f2>destinationFile</color><color=#f8f8f2>);</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>allowOverwrite</color> <color=#f92672>=</color> <color=#f8f8f2>allowOverwrite</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Determines whether an specified format name and file extension are</color>
<color=#75715e>     * for the same format.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param formatName    Format name.</color>
<color=#75715e>     * @param fileExtension File extension.</color>
<color=#75715e>     * @return Returns {@code true} if the specified file</color>
<color=#75715e>     * extension is valid for the specified format.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isMatchingFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>formatName</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>fileExtension</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>formatName</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>fileExtension</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>ImageWriter</color> <color=#f8f8f2>iw</color><color=#f8f8f2>;</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>iw</color> <color=#f92672>=</color> <color=#f8f8f2>ImageIO</color><color=#f8f8f2>.</color><color=#a6e22e>getImageWritersByFormatName</color><color=#f8f8f2>(</color><color=#f8f8f2>formatName</color><color=#f8f8f2>).</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>NoSuchElementException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>String</color><color=#f92672>[]</color> <color=#f8f8f2>suffixes</color> <color=#f92672>=</color> <color=#f8f8f2>iw</color><color=#f8f8f2>.</color><color=#a6e22e>getOriginatingProvider</color><color=#f8f8f2>().</color><color=#a6e22e>getFileSuffixes</color><color=#f8f8f2>();</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>suffix</color> <color=#f8f8f2>:</color> <color=#f8f8f2>suffixes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileExtension</color><color=#f8f8f2>.</color><color=#a6e22e>equalsIgnoreCase</color><color=#f8f8f2>(</color><color=#f8f8f2>suffix</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the file extension of the given {@link File}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param f The file.</color>
<color=#75715e>     * @return The extension of the file.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>String</color> <color=#a6e22e>getExtension</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>f</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>fileName</color> <color=#f92672>=</color> <color=#f8f8f2>f</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color>
                <color=#f8f8f2>fileName</color><color=#f8f8f2>.</color><color=#a6e22e>indexOf</color><color=#f8f8f2>(</color><color=#e6db74>'.'</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#f92672>-</color><color=#ae81ff>1</color>
                        <color=#f92672>&&</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>.</color><color=#a6e22e>lastIndexOf</color><color=#f8f8f2>(</color><color=#e6db74>'.'</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>-</color> <color=#ae81ff>1</color>
        <color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>lastIndex</color> <color=#f92672>=</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>.</color><color=#a6e22e>lastIndexOf</color><color=#f8f8f2>(</color><color=#e6db74>'.'</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>fileName</color><color=#f8f8f2>.</color><color=#a6e22e>substring</color><color=#f8f8f2>(</color><color=#f8f8f2>lastIndex</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>preferredOutputFormatName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>fileExtension</color> <color=#f92672>=</color> <color=#f8f8f2>getExtension</color><color=#f8f8f2>(</color><color=#f8f8f2>destinationFile</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileExtension</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>ImageReader</color><color=#f92672>></color> <color=#f8f8f2>rIter</color> <color=#f92672>=</color> <color=#f8f8f2>ImageIO</color><color=#f8f8f2>.</color><color=#a6e22e>getImageReadersBySuffix</color><color=#f8f8f2>(</color><color=#f8f8f2>fileExtension</color><color=#f8f8f2>);</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rIter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>rIter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>().</color><color=#a6e22e>getFormatName</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>return</color> <color=#f8f8f2>ThumbnailParameter</color><color=#f8f8f2>.</color><color=#a6e22e>ORIGINAL_FORMAT</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>outputFormat</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes the resulting image to a file.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param img The image to write.</color>
<color=#75715e>     * @throws UnsupportedFormatException When an unsupported format has been</color>
<color=#75715e>     *                                    specified by the</color>
<color=#75715e>     *                                    {@link #setOutputFormatName(String)}</color>
<color=#75715e>     *                                    method, or if the output format</color>
<color=#75715e>     *                                    has not been set and cannot be</color>
<color=#75715e>     *                                    determined from the file name.</color>
<color=#75715e>     * @throws IOException                When a problem occurs while writing</color>
<color=#75715e>     *                                    the image.</color>
<color=#75715e>     * @throws NullPointerException       If the image is {@code null}.</color>
<color=#75715e>     * @throws IllegalArgumentException   If this {@code FileImageSink} does</color>
<color=#75715e>     *                                    not permit overwriting the</color>
<color=#75715e>     *                                    destination file and the destination</color>
<color=#75715e>     *                                    file already exists.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>img</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>img</color><color=#f8f8f2>);</color>

        <color=#75715e>/* TODO refactor.</color>
<color=#75715e>         * The following code has been adapted from the</color>
<color=#75715e>         * StreamThumbnailTask.write method.</color>
<color=#75715e>         */</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Add or replace the file extension of the output file.</color>
<color=#75715e>         *</color>
<color=#75715e>         * If the file extension matches the output format's extension,</color>
<color=#75715e>         * then leave as is.</color>
<color=#75715e>         *</color>
<color=#75715e>         * Else, append the extension for the output format to the filename.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>fileExtension</color> <color=#f92672>=</color> <color=#f8f8f2>getExtension</color><color=#f8f8f2>(</color><color=#f8f8f2>destinationFile</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>String</color> <color=#f8f8f2>formatName</color> <color=#f92672>=</color> <color=#f8f8f2>outputFormat</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>formatName</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>fileExtension</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f92672>!</color><color=#f8f8f2>isMatchingFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>formatName</color><color=#f8f8f2>,</color> <color=#f8f8f2>fileExtension</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>destinationFile</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>destinationFile</color><color=#f8f8f2>.</color><color=#a6e22e>getAbsolutePath</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>"."</color> <color=#f92672>+</color> <color=#f8f8f2>formatName</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>allowOverwrite</color> <color=#f92672>&&</color> <color=#f8f8f2>destinationFile</color><color=#f8f8f2>.</color><color=#a6e22e>exists</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"The destination file exists."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * If a formatName is not specified, then attempt to determine it from</color>
<color=#75715e>         * the file extension.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>formatName</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f8f8f2>fileExtension</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>ImageReader</color><color=#f92672>></color> <color=#f8f8f2>rIter</color> <color=#f92672>=</color> <color=#f8f8f2>ImageIO</color><color=#f8f8f2>.</color><color=#a6e22e>getImageReadersBySuffix</color><color=#f8f8f2>(</color><color=#f8f8f2>fileExtension</color><color=#f8f8f2>);</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rIter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>formatName</color> <color=#f92672>=</color> <color=#f8f8f2>rIter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>().</color><color=#a6e22e>getFormatName</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>formatName</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedFormatException</color><color=#f8f8f2>(</color>
                    <color=#f8f8f2>formatName</color><color=#f8f8f2>,</color>
                    <color=#e6db74>"Could not determine output format."</color>
            <color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Checks for available writers for the format.</color>
        <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>ImageWriter</color><color=#f92672>></color> <color=#f8f8f2>writers</color> <color=#f92672>=</color>
                <color=#f8f8f2>ImageIO</color><color=#f8f8f2>.</color><color=#a6e22e>getImageWritersByFormatName</color><color=#f8f8f2>(</color><color=#f8f8f2>formatName</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>writers</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedFormatException</color><color=#f8f8f2>(</color>
                    <color=#f8f8f2>formatName</color><color=#f8f8f2>,</color>
                    <color=#e6db74>"No suitable ImageWriter found for "</color> <color=#f92672>+</color> <color=#f8f8f2>formatName</color> <color=#f92672>+</color> <color=#e6db74>"."</color>
            <color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>ImageWriter</color> <color=#f8f8f2>writer</color> <color=#f92672>=</color> <color=#f8f8f2>writers</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>

        <color=#f8f8f2>ImageWriteParam</color> <color=#f8f8f2>writeParam</color> <color=#f92672>=</color> <color=#f8f8f2>writer</color><color=#f8f8f2>.</color><color=#a6e22e>getDefaultWriteParam</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>writeParam</color><color=#f8f8f2>.</color><color=#a6e22e>canWriteCompressed</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>param</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>writeParam</color><color=#f8f8f2>.</color><color=#a6e22e>setCompressionMode</color><color=#f8f8f2>(</color><color=#f8f8f2>ImageWriteParam</color><color=#f8f8f2>.</color><color=#a6e22e>MODE_EXPLICIT</color><color=#f8f8f2>);</color>

            <color=#75715e>/*</color>
<color=#75715e>             * Sets the compression format type, if specified.</color>
<color=#75715e>             *</color>
<color=#75715e>             * Note:</color>
<color=#75715e>             * The value to denote that the codec's default compression type</color>
<color=#75715e>             * should be used is null.</color>
<color=#75715e>             */</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getOutputFormatType</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>ThumbnailParameter</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT_FORMAT_TYPE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>writeParam</color><color=#f8f8f2>.</color><color=#a6e22e>setCompressionType</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getOutputFormatType</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>supportedFormats</color> <color=#f92672>=</color>
                        <color=#f8f8f2>ThumbnailatorUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getSupportedOutputFormatTypes</color><color=#f8f8f2>(</color><color=#f8f8f2>formatName</color><color=#f8f8f2>);</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>supportedFormats</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>writeParam</color><color=#f8f8f2>.</color><color=#a6e22e>setCompressionType</color><color=#f8f8f2>(</color><color=#f8f8f2>supportedFormats</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>/*</color>
<color=#75715e>             * Sets the compression quality, if specified.</color>
<color=#75715e>             *</color>
<color=#75715e>             * Note:</color>
<color=#75715e>             * The value to denote that the codec's default compression quality</color>
<color=#75715e>             * should be used is Float.NaN.</color>
<color=#75715e>             */</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>isNaN</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getOutputQuality</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>writeParam</color><color=#f8f8f2>.</color><color=#a6e22e>setCompressionQuality</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getOutputQuality</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Here, an explicit FileOutputStream is being created, as using a</color>
<color=#75715e>         * File object directly to obtain an ImageOutputStream was causing</color>
<color=#75715e>         * a problem where if the destination file already exists, then the</color>
<color=#75715e>         * image data was being written to the beginning of the file rather than</color>
<color=#75715e>         * creating a new file.</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>ImageOutputStream</color> <color=#f8f8f2>ios</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>FileOutputStream</color> <color=#f8f8f2>fos</color><color=#f8f8f2>;</color>

        <color=#75715e>/*</color>
<color=#75715e>         * The following two lines used to be surrounded by a try-catch,</color>
<color=#75715e>         * but it has been removed, as the IOException which it was</color>
<color=#75715e>         * throwing in the catch block was not giving good feedback as to</color>
<color=#75715e>         * what was causing the original IOException.</color>
<color=#75715e>         *</color>
<color=#75715e>         * It would have been informative to have the IOException which</color>
<color=#75715e>         * caused this problem, but the IOException in Java 5 does not</color>
<color=#75715e>         * have a "cause" parameter.</color>
<color=#75715e>         *</color>
<color=#75715e>         * The "cause" parameter has been introduced in Java 6:</color>
<color=#75715e>         * http://docs.oracle.com/javase/6/docs/api/java/io/IOException.html#IOException%28java.lang.String,%20java.lang.Throwable%29</color>
<color=#75715e>         *</color>
<color=#75715e>         * TODO Whether to surround this portion of code in a try-catch</color>
<color=#75715e>         *      again is debatable, as it wouldn't really add more utility.</color>
<color=#75715e>         *</color>
<color=#75715e>         *      Furthermore, there are other calls in this method which will</color>
<color=#75715e>         *      throw IOExceptions, but they are not surrounded by try-catch</color>
<color=#75715e>         *      blocks. (A similar example exists in the OutputStreamImageSink</color>
<color=#75715e>         *      where the ImageIO.createImageOutputStream is not surrounded</color>
<color=#75715e>         *      in a try-catch.)</color>
<color=#75715e>         *</color>
<color=#75715e>         * Related issue:</color>
<color=#75715e>         * http://code.google.com/p/thumbnailator/issues/detail?id=37</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>fos</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileOutputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>destinationFile</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>ios</color> <color=#f92672>=</color> <color=#f8f8f2>ImageIO</color><color=#f8f8f2>.</color><color=#a6e22e>createImageOutputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>fos</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ios</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>fos</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"Could not open output file."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Note:</color>
<color=#75715e>         * The following code is a workaround for the JPEG writer which ships</color>
<color=#75715e>         * with the JDK.</color>
<color=#75715e>         *</color>
<color=#75715e>         * At issue is, that the JPEG writer appears to write the alpha</color>
<color=#75715e>         * channel when it should not. To circumvent this, images which are</color>
<color=#75715e>         * to be saved as a JPEG will be copied to another BufferedImage without</color>
<color=#75715e>         * an alpha channel before it is saved.</color>
<color=#75715e>         *</color>
<color=#75715e>         * Also, the BMP writer appears not to support ARGB, so an RGB image</color>
<color=#75715e>         * will be produced before saving.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color>
                <color=#f8f8f2>formatName</color><color=#f8f8f2>.</color><color=#a6e22e>equalsIgnoreCase</color><color=#f8f8f2>(</color><color=#e6db74>"jpg"</color><color=#f8f8f2>)</color>
                        <color=#f92672>||</color> <color=#f8f8f2>formatName</color><color=#f8f8f2>.</color><color=#a6e22e>equalsIgnoreCase</color><color=#f8f8f2>(</color><color=#e6db74>"jpeg"</color><color=#f8f8f2>)</color>
                        <color=#f92672>||</color> <color=#f8f8f2>formatName</color><color=#f8f8f2>.</color><color=#a6e22e>equalsIgnoreCase</color><color=#f8f8f2>(</color><color=#e6db74>"bmp"</color><color=#f8f8f2>)</color>
        <color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>img</color> <color=#f92672>=</color> <color=#f8f8f2>BufferedImages</color><color=#f8f8f2>.</color><color=#a6e22e>copy</color><color=#f8f8f2>(</color><color=#f8f8f2>img</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_RGB</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>writer</color><color=#f8f8f2>.</color><color=#a6e22e>setOutput</color><color=#f8f8f2>(</color><color=#f8f8f2>ios</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>writer</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>IIOImage</color><color=#f8f8f2>(</color><color=#f8f8f2>img</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>),</color> <color=#f8f8f2>writeParam</color><color=#f8f8f2>);</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Dispose the writer to free resources.</color>
<color=#75715e>         *</color>
<color=#75715e>         * This seems to be the main culprit of `OutOfMemoryError`s which</color>
<color=#75715e>         * started to frequently appear with Java 7 Update 21.</color>
<color=#75715e>         *</color>
<color=#75715e>         * Issue:</color>
<color=#75715e>         * http://code.google.com/p/thumbnailator/issues/detail?id=42</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>writer</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>

        <color=#f8f8f2>ios</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>fos</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the detination file of the thumbnail image.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * If the final destination of the thumbnail changes in the course of</color>
<color=#75715e>     * writing the thumbnail. (For example, if the file extension for the given</color>
<color=#75715e>     * destination did not match the destination file format, then the correct</color>
<color=#75715e>     * file extension could be appended.)</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return the destinationFile</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>File</color> <color=#a6e22e>getSink</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>destinationFile</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>