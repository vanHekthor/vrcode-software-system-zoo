<color=#f92672>package</color> <color=#f8f8f2>net.coobird.thumbnailator</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.filters.Canvas</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.filters.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.geometry.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.name.Rename</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.resizers.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.resizers.configurations.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.tasks.SourceSinkThumbnailTask</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.tasks.io.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.util.ThumbnailatorUtils</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.ImageIO</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.File</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.InputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.OutputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.net.URL</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.List</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.*</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Provides a fluent interface to create thumbnails.</color>
<color=#75715e> * <p></color>
<color=#75715e> * This is the main entry point for creating thumbnails with Thumbnailator.</color>
<color=#75715e> * <p></color>
<color=#75715e> * By using the Thumbnailator's fluent interface, it is possible to write</color>
<color=#75715e> * thumbnail generation code which resembles written English.</color>
<color=#75715e> * <DL></color>
<color=#75715e> * <DT><B>Usage:</B></DT></color>
<color=#75715e> * <DD></color>
<color=#75715e> * The following example code demonstrates how to use the fluent interface</color>
<color=#75715e> * to create a thumbnail from multiple files from a directory, resizing them to</color>
<color=#75715e> * a maximum of 200 pixels by 200 pixels while preserving the aspect ratio of</color>
<color=#75715e> * the original, then saving the resulting thumbnails as JPEG images with file</color>
<color=#75715e> * names having {@code thumbnail.} appended to the beginning of the file name.</color>
<color=#75715e> * <p></color>
<color=#75715e> * <pre></color>
<color=#75715e> * Thumbnails.of(directory.listFiles())</color>
<color=#75715e> * .size(200, 200)</color>
<color=#75715e> * .outputFormat("jpeg")</color>
<color=#75715e> * .asFiles(Rename.PREFIX_DOT_THUMBNAIL);</color>
<color=#75715e> *</color>
<color=#75715e> * // English: "Make thumbnails of files in the directory, with a size of 200x200,</color>
<color=#75715e> * with output format of JPEG, and save them as files while renaming</color>
<color=#75715e> * the files to be prefixed with a 'thumbnail.'."</color>
<color=#75715e> * </pre></color>
<color=#75715e> * </DD></color>
<color=#75715e> * </DL></color>
<color=#75715e> * For more examples, please visit the <a href="http://code.google.com/p/thumbnailator/"></color>
<color=#75715e> * Thumbnailator</a> project page.</color>
<color=#75715e> * <p></color>
<color=#75715e> * <h2>Important Implementation Notes</h2></color>
<color=#75715e> * Upon calling one of the {@code Thumbnails.of(...)} methods, <em>in the</color>
<color=#75715e> * current implementation</em>, an instance of an inner class of this class is</color>
<color=#75715e> * returned. In most cases, the returned instance should not be used by</color>
<color=#75715e> * storing it in a local variable, as changes in the internal implementation</color>
<color=#75715e> * could break code in the future.</color>
<color=#75715e> * <p></color>
<color=#75715e> * As a rule of thumb, <em>always method chain from the {@code Thumbnails.of}</color>
<color=#75715e> * all the way until the output method (e.g. {@code toFile}, {@code asBufferedImage},</color>
<color=#75715e> * etc.) is called without breaking them down into single statements.</em></color>
<color=#75715e> * See the "Usage" section above for the intended use of the Thumbnailator's</color>
<color=#75715e> * fluent interface.</color>
<color=#75715e> * <DL></color>
<color=#75715e> * <DT><B>Unintended Use:</B></DT></color>
<color=#75715e> * <DD></color>
<color=#75715e> * <pre></color>
<color=#75715e> * // Unintended use - not recommended!</color>
<color=#75715e> * Builder&lt;File&gt; instance = Thumbnails.of("path/to/image");</color>
<color=#75715e> * instance.size(200, 200);</color>
<color=#75715e> * instance.asFiles("path/to/thumbnail");</color>
<color=#75715e> * </pre></color>
<color=#75715e> * </DD></color>
<color=#75715e> * </DL></color>
<color=#75715e> *</color>
<color=#75715e> * @author coobird</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>Thumbnails</color> <color=#f8f8f2>{</color>
    <color=#75715e>/**</color>
<color=#75715e>     * This class is not intended to be instantiated.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#a6e22e>Thumbnails</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Performs validation on the specified dimensions.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * If any of the dimensions are less than or equal to 0, an</color>
<color=#75715e>     * {@code IllegalArgumentException} is thrown with an message specifying the</color>
<color=#75715e>     * reason for the exception.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * This method is used to perform a check on the output dimensions of a</color>
<color=#75715e>     * thumbnail for the {@link Thumbnails#createThumbnail} methods.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param width  The width to validate.</color>
<color=#75715e>     * @param height The height to validate.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>validateDimensions</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>width</color> <color=#f92672><=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>height</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                    <color=#e6db74>"Destination image dimensions must not be less than "</color> <color=#f92672>+</color>
                            <color=#e6db74>"0 pixels."</color>
            <color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>width</color> <color=#f92672><=</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>height</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>dimension</color> <color=#f92672>=</color> <color=#f8f8f2>width</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#e6db74>"width"</color> <color=#f8f8f2>:</color> <color=#e6db74>"height"</color><color=#f8f8f2>;</color>

            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                    <color=#e6db74>"Destination image "</color> <color=#f92672>+</color> <color=#f8f8f2>dimension</color> <color=#f92672>+</color> <color=#e6db74>" must not be "</color> <color=#f92672>+</color>
                            <color=#e6db74>"less than or equal to 0 pixels."</color>
            <color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>checkForNull</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>message</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>o</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#f8f8f2>message</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>checkForEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color><color=#f92672>[]</color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>message</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>o</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#f8f8f2>message</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>checkForEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>Iterable</color><color=#f92672><?></color> <color=#f8f8f2>o</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>message</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>o</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>().</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#f8f8f2>message</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Indicate to make thumbnails for images with the specified filenames.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param files File names of image files for which thumbnails</color>
<color=#75715e>     *              are to be produced for.</color>
<color=#75715e>     * @throws NullPointerException     If the argument is {@code null}.</color>
<color=#75715e>     * @throws IllegalArgumentException If the argument is an empty array.</color>
<color=#75715e>     * @return Reference to a builder object which is used to</color>
<color=#75715e>     * specify the parameters for creating the thumbnail.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#a6e22e>of</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color><color=#f8f8f2>...</color> <color=#f8f8f2>files</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>checkForNull</color><color=#f8f8f2>(</color><color=#f8f8f2>files</color><color=#f8f8f2>,</color> <color=#e6db74>"Cannot specify null for input files."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>checkForEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>files</color><color=#f8f8f2>,</color> <color=#e6db74>"Cannot specify an empty array for input files."</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Builder</color><color=#f8f8f2>.</color><color=#a6e22e>ofStrings</color><color=#f8f8f2>(</color><color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>asList</color><color=#f8f8f2>(</color><color=#f8f8f2>files</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Indicate to make thumbnails from the specified {@link File}s.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param files {@link File} objects of image files for which thumbnails</color>
<color=#75715e>     *              are to be produced for.</color>
<color=#75715e>     * @throws NullPointerException     If the argument is {@code null}.</color>
<color=#75715e>     * @throws IllegalArgumentException If the argument is an empty array.</color>
<color=#75715e>     * @return Reference to a builder object which is used to</color>
<color=#75715e>     * specify the parameters for creating the thumbnail.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#a6e22e>of</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color><color=#f8f8f2>...</color> <color=#f8f8f2>files</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>checkForNull</color><color=#f8f8f2>(</color><color=#f8f8f2>files</color><color=#f8f8f2>,</color> <color=#e6db74>"Cannot specify null for input files."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>checkForEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>files</color><color=#f8f8f2>,</color> <color=#e6db74>"Cannot specify an empty array for input files."</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Builder</color><color=#f8f8f2>.</color><color=#a6e22e>ofFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>asList</color><color=#f8f8f2>(</color><color=#f8f8f2>files</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Indicate to make thumbnails from the specified {@link URL}s.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param urls {@link URL} objects of image files for which thumbnails</color>
<color=#75715e>     *             are to be produced for.</color>
<color=#75715e>     * @throws NullPointerException     If the argument is {@code null}.</color>
<color=#75715e>     * @throws IllegalArgumentException If the argument is an empty array.</color>
<color=#75715e>     * @return Reference to a builder object which is used to</color>
<color=#75715e>     * specify the parameters for creating the thumbnail.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>URL</color><color=#f92672>></color> <color=#a6e22e>of</color><color=#f8f8f2>(</color><color=#f8f8f2>URL</color><color=#f8f8f2>...</color> <color=#f8f8f2>urls</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>checkForNull</color><color=#f8f8f2>(</color><color=#f8f8f2>urls</color><color=#f8f8f2>,</color> <color=#e6db74>"Cannot specify null for input URLs."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>checkForEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>urls</color><color=#f8f8f2>,</color> <color=#e6db74>"Cannot specify an empty array for input URLs."</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Builder</color><color=#f8f8f2>.</color><color=#a6e22e>ofUrls</color><color=#f8f8f2>(</color><color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>asList</color><color=#f8f8f2>(</color><color=#f8f8f2>urls</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Indicate to make thumbnails from the specified {@link InputStream}s.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param inputStreams {@link InputStream}s which provide the images</color>
<color=#75715e>     *                     for which thumbnails are to be produced for.</color>
<color=#75715e>     * @throws NullPointerException     If the argument is {@code null}.</color>
<color=#75715e>     * @throws IllegalArgumentException If the argument is an empty array.</color>
<color=#75715e>     * @return Reference to a builder object which is used to</color>
<color=#75715e>     * specify the parameters for creating the thumbnail.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Builder</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>InputStream</color><color=#f92672>></color> <color=#a6e22e>of</color><color=#f8f8f2>(</color><color=#f8f8f2>InputStream</color><color=#f8f8f2>...</color> <color=#f8f8f2>inputStreams</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>checkForNull</color><color=#f8f8f2>(</color><color=#f8f8f2>inputStreams</color><color=#f8f8f2>,</color> <color=#e6db74>"Cannot specify null for InputStreams."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>checkForEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>inputStreams</color><color=#f8f8f2>,</color> <color=#e6db74>"Cannot specify an empty array for InputStreams."</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Builder</color><color=#f8f8f2>.</color><color=#a6e22e>ofInputStreams</color><color=#f8f8f2>(</color><color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>asList</color><color=#f8f8f2>(</color><color=#f8f8f2>inputStreams</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Indicate to make thumbnails from the specified {@link BufferedImage}s.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param images {@link BufferedImage}s for which thumbnails</color>
<color=#75715e>     *               are to be produced for.</color>
<color=#75715e>     * @throws NullPointerException     If the argument is {@code null}.</color>
<color=#75715e>     * @throws IllegalArgumentException If the argument is an empty array.</color>
<color=#75715e>     * @return Reference to a builder object which is used to</color>
<color=#75715e>     * specify the parameters for creating the thumbnail.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>BufferedImage</color><color=#f92672>></color> <color=#a6e22e>of</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color><color=#f8f8f2>...</color> <color=#f8f8f2>images</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>checkForNull</color><color=#f8f8f2>(</color><color=#f8f8f2>images</color><color=#f8f8f2>,</color> <color=#e6db74>"Cannot specify null for images."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>checkForEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>images</color><color=#f8f8f2>,</color> <color=#e6db74>"Cannot specify an empty array for images."</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Builder</color><color=#f8f8f2>.</color><color=#a6e22e>ofBufferedImages</color><color=#f8f8f2>(</color><color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>asList</color><color=#f8f8f2>(</color><color=#f8f8f2>images</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Indicate to make thumbnails for images with the specified filenames.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param files File names of image files for which thumbnails</color>
<color=#75715e>     *              are to be produced for.</color>
<color=#75715e>     * @throws NullPointerException     If the argument is {@code null}.</color>
<color=#75715e>     * @throws IllegalArgumentException If the argument is an empty collection.</color>
<color=#75715e>     * @return Reference to a builder object which is used to</color>
<color=#75715e>     * specify the parameters for creating the thumbnail.</color>
<color=#75715e>     * @since 0.3.1</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#a6e22e>fromFilenames</color><color=#f8f8f2>(</color><color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>files</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>checkForNull</color><color=#f8f8f2>(</color><color=#f8f8f2>files</color><color=#f8f8f2>,</color> <color=#e6db74>"Cannot specify null for input files."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>checkForEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>files</color><color=#f8f8f2>,</color> <color=#e6db74>"Cannot specify an empty collection for input files."</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Builder</color><color=#f8f8f2>.</color><color=#a6e22e>ofStrings</color><color=#f8f8f2>(</color><color=#f8f8f2>files</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Indicate to make thumbnails from the specified {@link File}s.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param files {@link File} objects of image files for which thumbnails</color>
<color=#75715e>     *              are to be produced for.</color>
<color=#75715e>     * @throws NullPointerException     If the argument is {@code null}.</color>
<color=#75715e>     * @throws IllegalArgumentException If the argument is an empty collection.</color>
<color=#75715e>     * @return Reference to a builder object which is used to</color>
<color=#75715e>     * specify the parameters for creating the thumbnail.</color>
<color=#75715e>     * @since 0.3.1</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#a6e22e>fromFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#f8f8f2>files</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>checkForNull</color><color=#f8f8f2>(</color><color=#f8f8f2>files</color><color=#f8f8f2>,</color> <color=#e6db74>"Cannot specify null for input files."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>checkForEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>files</color><color=#f8f8f2>,</color> <color=#e6db74>"Cannot specify an empty collection for input files."</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Builder</color><color=#f8f8f2>.</color><color=#a6e22e>ofFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>files</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Indicate to make thumbnails for images with the specified {@link URL}s.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param urls URLs of the images for which thumbnails</color>
<color=#75715e>     *             are to be produced.</color>
<color=#75715e>     * @throws NullPointerException     If the argument is {@code null}.</color>
<color=#75715e>     * @throws IllegalArgumentException If the argument is an empty collection.</color>
<color=#75715e>     * @return Reference to a builder object which is used to</color>
<color=#75715e>     * specify the parameters for creating the thumbnail.</color>
<color=#75715e>     * @since 0.3.1</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>URL</color><color=#f92672>></color> <color=#a6e22e>fromURLs</color><color=#f8f8f2>(</color><color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>URL</color><color=#f92672>></color> <color=#f8f8f2>urls</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>checkForNull</color><color=#f8f8f2>(</color><color=#f8f8f2>urls</color><color=#f8f8f2>,</color> <color=#e6db74>"Cannot specify null for input URLs."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>checkForEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>urls</color><color=#f8f8f2>,</color> <color=#e6db74>"Cannot specify an empty collection for input URLs."</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Builder</color><color=#f8f8f2>.</color><color=#a6e22e>ofUrls</color><color=#f8f8f2>(</color><color=#f8f8f2>urls</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Indicate to make thumbnails for images obtained from the specified</color>
<color=#75715e>     * {@link InputStream}s.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param inputStreams {@link InputStream}s which provide images for</color>
<color=#75715e>     *                     which thumbnails are to be produced.</color>
<color=#75715e>     * @throws NullPointerException     If the argument is {@code null}.</color>
<color=#75715e>     * @throws IllegalArgumentException If the argument is an empty collection.</color>
<color=#75715e>     * @return Reference to a builder object which is used to</color>
<color=#75715e>     * specify the parameters for creating the thumbnail.</color>
<color=#75715e>     * @since 0.3.1</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>InputStream</color><color=#f92672>></color> <color=#a6e22e>fromInputStreams</color><color=#f8f8f2>(</color><color=#f8f8f2>Iterable</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>InputStream</color><color=#f92672>></color> <color=#f8f8f2>inputStreams</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>checkForNull</color><color=#f8f8f2>(</color><color=#f8f8f2>inputStreams</color><color=#f8f8f2>,</color> <color=#e6db74>"Cannot specify null for InputStreams."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>checkForEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>inputStreams</color><color=#f8f8f2>,</color> <color=#e6db74>"Cannot specify an empty collection for InputStreams."</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Builder</color><color=#f8f8f2>.</color><color=#a6e22e>ofInputStreams</color><color=#f8f8f2>(</color><color=#f8f8f2>inputStreams</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Indicate to make thumbnails from the specified {@link BufferedImage}s.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param images {@link BufferedImage}s for which thumbnails</color>
<color=#75715e>     *               are to be produced for.</color>
<color=#75715e>     * @throws NullPointerException     If the argument is {@code null}.</color>
<color=#75715e>     * @throws IllegalArgumentException If the argument is an empty collection.</color>
<color=#75715e>     * @return Reference to a builder object which is used to</color>
<color=#75715e>     * specify the parameters for creating the thumbnail.</color>
<color=#75715e>     * @since 0.3.1</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>BufferedImage</color><color=#f92672>></color> <color=#a6e22e>fromImages</color><color=#f8f8f2>(</color><color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>BufferedImage</color><color=#f92672>></color> <color=#f8f8f2>images</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>checkForNull</color><color=#f8f8f2>(</color><color=#f8f8f2>images</color><color=#f8f8f2>,</color> <color=#e6db74>"Cannot specify null for images."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>checkForEmpty</color><color=#f8f8f2>(</color><color=#f8f8f2>images</color><color=#f8f8f2>,</color> <color=#e6db74>"Cannot specify an empty collection for images."</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Builder</color><color=#f8f8f2>.</color><color=#a6e22e>ofBufferedImages</color><color=#f8f8f2>(</color><color=#f8f8f2>images</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * The builder interface for Thumbnailator to set up the thumbnail</color>
<color=#75715e>     * generation task.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * Thumbnailator is intended to be used by calling one of the</color>
<color=#75715e>     * {@code Thumbnails.of(...)} methods, then chaining methods such as</color>
<color=#75715e>     * {@link #size(int, int)} and {@link #outputQuality(double)} to set up</color>
<color=#75715e>     * the thumbnail generation parameters. (See "Intended Use" below.)</color>
<color=#75715e>     * The end result should be code that resembles English.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * In most cases, holding an instance of this class in a local variable,</color>
<color=#75715e>     * such as seen in the "Unintended Use" example below, is more verbose</color>
<color=#75715e>     * and less future-proof, as changes to this class (which is just an</color>
<color=#75715e>     * inner class of the {@link Thumbnails} class) can lead to broken code</color>
<color=#75715e>     * when attempting to use future releases of Thumbnailator.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * <DL></color>
<color=#75715e>     * <DT><B>Intended Use:</B></DT></color>
<color=#75715e>     * <DD></color>
<color=#75715e>     * <pre></color>
<color=#75715e>     * // Intended use - recommended!</color>
<color=#75715e>     * Thumbnails.of("path/to/image")</color>
<color=#75715e>     * .size(200, 200)</color>
<color=#75715e>     * .asFile("path/to/thumbnail");</color>
<color=#75715e>     *</color>
<color=#75715e>     * // English: "Make a thumbnail of 'path/to/image' with a size of 200x200,</color>
<color=#75715e>     * and save it as a file to 'path/to/thumbnail'."</color>
<color=#75715e>     * </pre></color>
<color=#75715e>     * </DD></color>
<color=#75715e>     * <DT><B>Unintended Use:</B></DT></color>
<color=#75715e>     * <DD></color>
<color=#75715e>     * <pre></color>
<color=#75715e>     * // Unintended use - not recommended!</color>
<color=#75715e>     * Builder&lt;File&gt; instance = Thumbnails.of("path/to/image");</color>
<color=#75715e>     * instance.size(200, 200);</color>
<color=#75715e>     * instance.asFiles("path/to/thumbnail");</color>
<color=#75715e>     * </pre></color>
<color=#75715e>     * </DD></color>
<color=#75715e>     * </DL></color>
<color=#75715e>     * <p></color>
<color=#75715e>     * An instance of this class provides the fluent interface in the form of</color>
<color=#75715e>     * method chaining. Through the fluent interface, the parameters used for</color>
<color=#75715e>     * the thumbnail creation, such as {@link #size(int, int)} and</color>
<color=#75715e>     * {@link #outputQuality(double)} can be set up. Finally, to execute the</color>
<color=#75715e>     * thumbnail creation, one of the output methods whose names start with</color>
<color=#75715e>     * {@code to} (e.g. {@link #toFiles(Rename)}) or {@code as}</color>
<color=#75715e>     * (e.g. {@link #asBufferedImages()}) is called.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * An instance of this class is obtained by calling one of:</color>
<color=#75715e>     * <ul></color>
<color=#75715e>     * <li>{@link Thumbnails#of(BufferedImage...)}</li></color>
<color=#75715e>     * <li>{@link Thumbnails#of(File...)}</li></color>
<color=#75715e>     * <li>{@link Thumbnails#of(String...)}</li></color>
<color=#75715e>     * <li>{@link Thumbnails#of(InputStream...)}</li></color>
<color=#75715e>     * <li>{@link Thumbnails#of(URL...)}</li></color>
<color=#75715e>     * <li>{@link Thumbnails#fromImages(Iterable)}</li></color>
<color=#75715e>     * <li>{@link Thumbnails#fromFiles(Iterable)}</li></color>
<color=#75715e>     * <li>{@link Thumbnails#fromFilenames(Iterable)}</li></color>
<color=#75715e>     * <li>{@link Thumbnails#fromInputStreams(Iterable)}</li></color>
<color=#75715e>     * <li>{@link Thumbnails#fromURLs(Iterable)}</li></color>
<color=#75715e>     * </ul></color>
<color=#75715e>     *</color>
<color=#75715e>     * @author coobird</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>{</color>
        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>>></color> <color=#f8f8f2>sources</color><color=#f8f8f2>;</color>

        <color=#66d9ef>private</color> <color=#a6e22e>Builder</color><color=#f8f8f2>(</color><color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>>></color> <color=#f8f8f2>sources</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>sources</color> <color=#f92672>=</color> <color=#f8f8f2>sources</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>OUTPUT_FORMAT</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>OPTIONAL</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>StringImageSourceIterator</color> <color=#66d9ef>implements</color>
                <color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>>></color> <color=#f8f8f2>{</color>
            <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>filenames</color><color=#f8f8f2>;</color>

            <color=#66d9ef>private</color> <color=#a6e22e>StringImageSourceIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>filenames</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>filenames</color> <color=#f92672>=</color> <color=#f8f8f2>filenames</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>public</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>>></color> <color=#a6e22e>iterator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>>></color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

                    <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>filenames</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>

                    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasNext</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>return</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>public</color> <color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#a6e22e>next</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileImageSource</color><color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>());</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>remove</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>};</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>FileImageSourceIterator</color> <color=#66d9ef>implements</color>
                <color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>>></color> <color=#f8f8f2>{</color>
            <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#f8f8f2>files</color><color=#f8f8f2>;</color>

            <color=#66d9ef>private</color> <color=#a6e22e>FileImageSourceIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#f8f8f2>files</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>files</color> <color=#f92672>=</color> <color=#f8f8f2>files</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>public</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>>></color> <color=#a6e22e>iterator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>>></color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

                    <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>files</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>

                    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasNext</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>return</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>public</color> <color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#a6e22e>next</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileImageSource</color><color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>());</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>remove</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>};</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>URLImageSourceIterator</color> <color=#66d9ef>implements</color>
                <color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>URL</color><color=#f92672>>></color> <color=#f8f8f2>{</color>
            <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>URL</color><color=#f92672>></color> <color=#f8f8f2>urls</color><color=#f8f8f2>;</color>

            <color=#66d9ef>private</color> <color=#a6e22e>URLImageSourceIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>URL</color><color=#f92672>></color> <color=#f8f8f2>urls</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>urls</color> <color=#f92672>=</color> <color=#f8f8f2>urls</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>public</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>URL</color><color=#f92672>>></color> <color=#a6e22e>iterator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>URL</color><color=#f92672>>></color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

                    <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>URL</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>urls</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>

                    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasNext</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>return</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>public</color> <color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>URL</color><color=#f92672>></color> <color=#a6e22e>next</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>URLImageSource</color><color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>());</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>remove</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>};</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>InputStreamImageSourceIterator</color> <color=#66d9ef>implements</color>
                <color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>InputStream</color><color=#f92672>>></color> <color=#f8f8f2>{</color>
            <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Iterable</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>InputStream</color><color=#f92672>></color> <color=#f8f8f2>inputStreams</color><color=#f8f8f2>;</color>

            <color=#66d9ef>private</color> <color=#a6e22e>InputStreamImageSourceIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>Iterable</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>InputStream</color><color=#f92672>></color> <color=#f8f8f2>inputStreams</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>inputStreams</color> <color=#f92672>=</color> <color=#f8f8f2>inputStreams</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>public</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>InputStream</color><color=#f92672>>></color> <color=#a6e22e>iterator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>InputStream</color><color=#f92672>>></color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

                    <color=#f8f8f2>Iterator</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>InputStream</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>inputStreams</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>

                    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasNext</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>return</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>public</color> <color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>InputStream</color><color=#f92672>></color> <color=#a6e22e>next</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>InputStreamImageSource</color><color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>());</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>remove</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>};</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>BufferedImageImageSourceIterator</color> <color=#66d9ef>implements</color>
                <color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>BufferedImage</color><color=#f92672>>></color> <color=#f8f8f2>{</color>
            <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>BufferedImage</color><color=#f92672>></color> <color=#f8f8f2>image</color><color=#f8f8f2>;</color>

            <color=#66d9ef>private</color> <color=#a6e22e>BufferedImageImageSourceIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>BufferedImage</color><color=#f92672>></color> <color=#f8f8f2>images</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>image</color> <color=#f92672>=</color> <color=#f8f8f2>images</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>public</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>BufferedImage</color><color=#f92672>>></color> <color=#a6e22e>iterator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>BufferedImage</color><color=#f92672>>></color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

                    <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>BufferedImage</color><color=#f92672>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>image</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>

                    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasNext</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>return</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>public</color> <color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>BufferedImage</color><color=#f92672>></color> <color=#a6e22e>next</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImageSource</color><color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>());</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>remove</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>};</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#a6e22e>ofStrings</color><color=#f8f8f2>(</color><color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>filenames</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>StringImageSourceIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>filenames</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#a6e22e>ofFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#f8f8f2>files</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileImageSourceIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>files</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>URL</color><color=#f92672>></color> <color=#a6e22e>ofUrls</color><color=#f8f8f2>(</color><color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>URL</color><color=#f92672>></color> <color=#f8f8f2>urls</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>URL</color><color=#f92672>>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>URLImageSourceIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>urls</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>URL</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>InputStream</color><color=#f92672>></color> <color=#a6e22e>ofInputStreams</color><color=#f8f8f2>(</color><color=#f8f8f2>Iterable</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>InputStream</color><color=#f92672>></color> <color=#f8f8f2>inputStreams</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>InputStream</color><color=#f92672>>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>InputStreamImageSourceIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>inputStreams</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>InputStream</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>BufferedImage</color><color=#f92672>></color> <color=#a6e22e>ofBufferedImages</color><color=#f8f8f2>(</color><color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>BufferedImage</color><color=#f92672>></color> <color=#f8f8f2>images</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>BufferedImage</color><color=#f92672>>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImageImageSourceIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>images</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>BufferedImage</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>BufferedImageIterable</color> <color=#66d9ef>implements</color>
                <color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>BufferedImage</color><color=#f92672>></color> <color=#f8f8f2>{</color>
            <color=#66d9ef>public</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>BufferedImage</color><color=#f92672>></color> <color=#a6e22e>iterator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>BufferedImage</color><color=#f92672>></color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

                    <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>>></color> <color=#f8f8f2>sourceIter</color> <color=#f92672>=</color> <color=#f8f8f2>sources</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>

                    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasNext</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>return</color> <color=#f8f8f2>sourceIter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>next</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                        <color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>source</color> <color=#f92672>=</color> <color=#f8f8f2>sourceIter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>
                        <color=#f8f8f2>BufferedImageSink</color> <color=#f8f8f2>destination</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImageSink</color><color=#f8f8f2>();</color>

                        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                            <color=#f8f8f2>Thumbnailator</color><color=#f8f8f2>.</color><color=#a6e22e>createThumbnail</color><color=#f8f8f2>(</color>
                                    <color=#66d9ef>new</color> <color=#f8f8f2>SourceSinkThumbnailTask</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>makeParam</color><color=#f8f8f2>(),</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#f8f8f2>destination</color><color=#f8f8f2>)</color>
                            <color=#f8f8f2>);</color>
                        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
                        <color=#f8f8f2>}</color>

                        <color=#66d9ef>return</color> <color=#f8f8f2>destination</color><color=#f8f8f2>.</color><color=#a6e22e>getSink</color><color=#f8f8f2>();</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>remove</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color>
                                <color=#e6db74>"Cannot remove elements from this iterator."</color>
                        <color=#f8f8f2>);</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>};</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Status of each property.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @author coobird</color>
<color=#75715e>         */</color>
        <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>enum</color> <color=#f8f8f2>Status</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>OPTIONAL</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>READY</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>NOT_READY</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>ALREADY_SET</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>CANNOT_SET</color><color=#f8f8f2>,</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Interface used by {@link Properties}.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @author coobird</color>
<color=#75715e>         */</color>
        <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>interface</color> <color=#a6e22e>Property</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getName</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Enum of properties which can be set by this builder.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @author coobird</color>
<color=#75715e>         */</color>
        <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>enum</color> <color=#f8f8f2>Properties</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Property</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>SIZE</color><color=#f8f8f2>(</color><color=#e6db74>"size"</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>WIDTH</color><color=#f8f8f2>(</color><color=#e6db74>"width"</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>HEIGHT</color><color=#f8f8f2>(</color><color=#e6db74>"height"</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>SCALE</color><color=#f8f8f2>(</color><color=#e6db74>"scale"</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>IMAGE_TYPE</color><color=#f8f8f2>(</color><color=#e6db74>"imageType"</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>SCALING_MODE</color><color=#f8f8f2>(</color><color=#e6db74>"scalingMode"</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>ALPHA_INTERPOLATION</color><color=#f8f8f2>(</color><color=#e6db74>"alphaInterpolation"</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>ANTIALIASING</color><color=#f8f8f2>(</color><color=#e6db74>"antialiasing"</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>DITHERING</color><color=#f8f8f2>(</color><color=#e6db74>"dithering"</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>RENDERING</color><color=#f8f8f2>(</color><color=#e6db74>"rendering"</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>KEEP_ASPECT_RATIO</color><color=#f8f8f2>(</color><color=#e6db74>"keepAspectRatio"</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>OUTPUT_FORMAT</color><color=#f8f8f2>(</color><color=#e6db74>"outputFormat"</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>OUTPUT_FORMAT_TYPE</color><color=#f8f8f2>(</color><color=#e6db74>"outputFormatType"</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>OUTPUT_QUALITY</color><color=#f8f8f2>(</color><color=#e6db74>"outputQuality"</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>RESIZER</color><color=#f8f8f2>(</color><color=#e6db74>"resizer"</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>SOURCE_REGION</color><color=#f8f8f2>(</color><color=#e6db74>"sourceRegion"</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>RESIZER_FACTORY</color><color=#f8f8f2>(</color><color=#e6db74>"resizerFactory"</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>ALLOW_OVERWRITE</color><color=#f8f8f2>(</color><color=#e6db74>"allowOverwrite"</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>CROP</color><color=#f8f8f2>(</color><color=#e6db74>"crop"</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>USE_EXIF_ORIENTATION</color><color=#f8f8f2>(</color><color=#e6db74>"useExifOrientation"</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>;</color>

            <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>

            <color=#66d9ef>private</color> <color=#a6e22e>Properties</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>name</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>name</color> <color=#f92672>=</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>name</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Map to keep track of whether a property has been properly set or not.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>Properties</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f92672>></color> <color=#f8f8f2>statusMap</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>Properties</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f92672>></color><color=#f8f8f2>();</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Populates the property map.</color>
<color=#75715e>         */</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SIZE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>NOT_READY</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>WIDTH</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>OPTIONAL</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>HEIGHT</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>OPTIONAL</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SCALE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>NOT_READY</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SOURCE_REGION</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>OPTIONAL</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>IMAGE_TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>OPTIONAL</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SCALING_MODE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>OPTIONAL</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>ALPHA_INTERPOLATION</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>OPTIONAL</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>ANTIALIASING</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>OPTIONAL</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>DITHERING</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>OPTIONAL</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>RENDERING</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>OPTIONAL</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>KEEP_ASPECT_RATIO</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>OPTIONAL</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>OUTPUT_FORMAT</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>OPTIONAL</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>OUTPUT_FORMAT_TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>OPTIONAL</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>OUTPUT_QUALITY</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>OPTIONAL</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>RESIZER</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>OPTIONAL</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>RESIZER_FACTORY</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>OPTIONAL</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>ALLOW_OVERWRITE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>OPTIONAL</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>CROP</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>OPTIONAL</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>USE_EXIF_ORIENTATION</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>OPTIONAL</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Updates the property status map.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param property  The property to update.</color>
<color=#75715e>         * @param newStatus The new status.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color> <color=#f8f8f2>property</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color> <color=#f8f8f2>newStatus</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>property</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
                        <color=#f8f8f2>property</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" is already set."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>/*</color>
<color=#75715e>             * The `newStatus != Status.CANNOT_SET` condition will allow the</color>
<color=#75715e>             * status to be set to CANNOT_SET to be set multiple times.</color>
<color=#75715e>             */</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>newStatus</color> <color=#f92672>!=</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color> <color=#f92672>&&</color> <color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>property</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
                        <color=#f8f8f2>property</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color> <color=#e6db74>" cannot be set."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>property</color><color=#f8f8f2>,</color> <color=#f8f8f2>newStatus</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * An constant used to indicate that the imageType has not been</color>
<color=#75715e>         * specified. When this constant is encountered, one should use the</color>
<color=#75715e>         * {@link ThumbnailParameter#DEFAULT_IMAGE_TYPE} as the value for</color>
<color=#75715e>         * imageType.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>IMAGE_TYPE_UNSPECIFIED</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>

        <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>DIMENSION_NOT_SPECIFIED</color> <color=#f92672>=</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Defines the fields for the builder interface, and assigns the</color>
<color=#75715e>         * default values.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>DIMENSION_NOT_SPECIFIED</color><color=#f8f8f2>;</color>
        <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>DIMENSION_NOT_SPECIFIED</color><color=#f8f8f2>;</color>
        <color=#66d9ef>private</color> <color=#66d9ef>double</color> <color=#f8f8f2>scaleWidth</color> <color=#f92672>=</color> <color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>NaN</color><color=#f8f8f2>;</color>
        <color=#66d9ef>private</color> <color=#66d9ef>double</color> <color=#f8f8f2>scaleHeight</color> <color=#f92672>=</color> <color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>NaN</color><color=#f8f8f2>;</color>

        <color=#66d9ef>private</color> <color=#f8f8f2>Region</color> <color=#f8f8f2>sourceRegion</color><color=#f8f8f2>;</color>

        <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>imageType</color> <color=#f92672>=</color> <color=#f8f8f2>IMAGE_TYPE_UNSPECIFIED</color><color=#f8f8f2>;</color>
        <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>keepAspectRatio</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

        <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#f8f8f2>outputFormat</color> <color=#f92672>=</color> <color=#f8f8f2>ThumbnailParameter</color><color=#f8f8f2>.</color><color=#a6e22e>DETERMINE_FORMAT</color><color=#f8f8f2>;</color>
        <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#f8f8f2>outputFormatType</color> <color=#f92672>=</color> <color=#f8f8f2>ThumbnailParameter</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT_FORMAT_TYPE</color><color=#f8f8f2>;</color>
        <color=#66d9ef>private</color> <color=#66d9ef>float</color> <color=#f8f8f2>outputQuality</color> <color=#f92672>=</color> <color=#f8f8f2>ThumbnailParameter</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT_QUALITY</color><color=#f8f8f2>;</color>

        <color=#66d9ef>private</color> <color=#f8f8f2>ScalingMode</color> <color=#f8f8f2>scalingMode</color> <color=#f92672>=</color> <color=#f8f8f2>ScalingMode</color><color=#f8f8f2>.</color><color=#a6e22e>PROGRESSIVE_BILINEAR</color><color=#f8f8f2>;</color>
        <color=#66d9ef>private</color> <color=#f8f8f2>AlphaInterpolation</color> <color=#f8f8f2>alphaInterpolation</color> <color=#f92672>=</color> <color=#f8f8f2>AlphaInterpolation</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>;</color>
        <color=#66d9ef>private</color> <color=#f8f8f2>Dithering</color> <color=#f8f8f2>dithering</color> <color=#f92672>=</color> <color=#f8f8f2>Dithering</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>;</color>
        <color=#66d9ef>private</color> <color=#f8f8f2>Antialiasing</color> <color=#f8f8f2>antialiasing</color> <color=#f92672>=</color> <color=#f8f8f2>Antialiasing</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>;</color>
        <color=#66d9ef>private</color> <color=#f8f8f2>Rendering</color> <color=#f8f8f2>rendering</color> <color=#f92672>=</color> <color=#f8f8f2>Rendering</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT</color><color=#f8f8f2>;</color>

        <color=#66d9ef>private</color> <color=#f8f8f2>ResizerFactory</color> <color=#f8f8f2>resizerFactory</color> <color=#f92672>=</color> <color=#f8f8f2>DefaultResizerFactory</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>();</color>

        <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>allowOverwrite</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

        <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>fitWithinDimenions</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

        <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>useExifOrientation</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>

        <color=#75715e>/**</color>
<color=#75715e>         * This field should be set to the {@link Position} to be used for</color>
<color=#75715e>         * cropping if cropping is enabled. If cropping is disabled, then</color>
<color=#75715e>         * this field should be left {@code null}.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>private</color> <color=#f8f8f2>Position</color> <color=#f8f8f2>croppingPosition</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>

        <color=#75715e>/**</color>
<color=#75715e>         * The {@link ImageFilter}s that should be applied when creating the</color>
<color=#75715e>         * thumbnail.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>private</color> <color=#f8f8f2>Pipeline</color> <color=#f8f8f2>filterPipeline</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Pipeline</color><color=#f8f8f2>();</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets the size of the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * For example, to create thumbnails which should fit within a</color>
<color=#75715e>         * bounding rectangle of 640 x 480, the following code can be used:</color>
<color=#75715e>         * <pre><code></color>
<color=#75715e>         * Thumbnails.of(image)</color>
<color=#75715e>         * .size(640, 480)</color>
<color=#75715e>         * .toFile(thumbnail);</color>
<color=#75715e>         * </code></pre></color>
<color=#75715e>         * <p></color>
<color=#75715e>         * In the above code, the thumbnail will preserve the aspect ratio</color>
<color=#75715e>         * of the original image. If the thumbnail should be forced to the</color>
<color=#75715e>         * specified size, the {@link #forceSize(int, int)} method can</color>
<color=#75715e>         * be used instead of this method.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Once this method is called, calling the {@link #scale(double)} method</color>
<color=#75715e>         * will result in an {@link IllegalStateException}.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param width  The width of the thumbnail.</color>
<color=#75715e>         * @param height The height of the thumbnail.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>size</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SIZE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SCALE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>validateDimensions</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>width</color> <color=#f92672>=</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>height</color> <color=#f92672>=</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color>

            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets the width of the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * The thumbnail will have the dimensions constrained by the specified</color>
<color=#75715e>         * width, and the aspect ratio of the original image will be preserved</color>
<color=#75715e>         * by the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Once this method is called, calling the {@link #size(int, int)} or</color>
<color=#75715e>         * the {@link #scale(double)} method will result in an</color>
<color=#75715e>         * {@link IllegalStateException}.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param width The width of the thumbnail.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         * @since 0.3.5</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>width</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SIZE</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SIZE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SCALE</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SCALE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>WIDTH</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>validateDimensions</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>);</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>width</color> <color=#f92672>=</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>

            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets the height of the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * The thumbnail will have the dimensions constrained by the specified</color>
<color=#75715e>         * height, and the aspect ratio of the original image will be preserved</color>
<color=#75715e>         * by the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Once this method is called, calling the {@link #size(int, int)} or</color>
<color=#75715e>         * the {@link #scale(double)} method will result in an</color>
<color=#75715e>         * {@link IllegalStateException}.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param height The height of the thumbnail.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         * @since 0.3.5</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>height</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SIZE</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SIZE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SCALE</color><color=#f8f8f2>)</color> <color=#f92672>!=</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SCALE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>HEIGHT</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>validateDimensions</color><color=#f8f8f2>(</color><color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>height</color> <color=#f92672>=</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color>

            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets the size of the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * The thumbnails will be forced to the specified size, therefore,</color>
<color=#75715e>         * the aspect ratio of the original image will not be preserved in</color>
<color=#75715e>         * the thumbnails. Calling this method will be equivalent to calling</color>
<color=#75715e>         * the {@link #size(int, int)} method in conjunction with the</color>
<color=#75715e>         * {@link #keepAspectRatio(boolean)} method with the value {@code false}.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Once this method is called, calling the {@link #scale(double)} method</color>
<color=#75715e>         * will result in an {@link IllegalStateException}.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param width  The width of the thumbnail.</color>
<color=#75715e>         * @param height The height of the thumbnail.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         * @since 0.3.2</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>forceSize</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SIZE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>KEEP_ASPECT_RATIO</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SCALE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>validateDimensions</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>width</color> <color=#f92672>=</color> <color=#f8f8f2>width</color><color=#f8f8f2>;</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>height</color> <color=#f92672>=</color> <color=#f8f8f2>height</color><color=#f8f8f2>;</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>keepAspectRatio</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets the scaling factor of the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * For example, to create thumbnails which are 50% the size of the</color>
<color=#75715e>         * original, the following code can be used:</color>
<color=#75715e>         * <pre><code></color>
<color=#75715e>         * Thumbnails.of(image)</color>
<color=#75715e>         * .scale(0.5)</color>
<color=#75715e>         * .toFile(thumbnail);</color>
<color=#75715e>         * </code></pre></color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Once this method is called, calling the {@link #size(int, int)}</color>
<color=#75715e>         * method, or the {@link #scale(double, double)} method, or the</color>
<color=#75715e>         * {@link #keepAspectRatio(boolean)} method will result in an</color>
<color=#75715e>         * {@link IllegalStateException}.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param scale The scaling factor to use when creating a</color>
<color=#75715e>         *              thumbnail.</color>
<color=#75715e>         *              <p></color>
<color=#75715e>         *              The value must be a {@code double} which is</color>
<color=#75715e>         *              greater than {@code 0.0}, and not</color>
<color=#75715e>         *              {@link Double#POSITIVE_INFINITY}.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>scale</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>scale</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>scale</color><color=#f8f8f2>(</color><color=#f8f8f2>scale</color><color=#f8f8f2>,</color> <color=#f8f8f2>scale</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets the scaling factor for the width and height of the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * If the scaling factor for the width and height are not equal, then</color>
<color=#75715e>         * the thumbnail will not preserve the aspect ratio of the original</color>
<color=#75715e>         * image.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * For example, to create thumbnails which are 50% the width of the</color>
<color=#75715e>         * original, while 75% the height of the original, the following code</color>
<color=#75715e>         * can be used:</color>
<color=#75715e>         * <pre><code></color>
<color=#75715e>         * Thumbnails.of(image)</color>
<color=#75715e>         * .scale(0.5, 0.75)</color>
<color=#75715e>         * .toFile(thumbnail);</color>
<color=#75715e>         * </code></pre></color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Once this method is called, calling the {@link #size(int, int)}</color>
<color=#75715e>         * method, or the {@link #scale(double)} method, or the</color>
<color=#75715e>         * {@link #keepAspectRatio(boolean)} method will result in an</color>
<color=#75715e>         * {@link IllegalStateException}.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param scaleWidth  The scaling factor to use for the width when</color>
<color=#75715e>         *                    creating a thumbnail.</color>
<color=#75715e>         *                    <p></color>
<color=#75715e>         *                    The value must be a {@code double} which is</color>
<color=#75715e>         *                    greater than {@code 0.0}, and not</color>
<color=#75715e>         *                    {@link Double#POSITIVE_INFINITY}.</color>
<color=#75715e>         * @param scaleHeight The scaling factor to use for the height when</color>
<color=#75715e>         *                    creating a thumbnail.</color>
<color=#75715e>         *                    <p></color>
<color=#75715e>         *                    The value must be a {@code double} which is</color>
<color=#75715e>         *                    greater than {@code 0.0}, and not</color>
<color=#75715e>         *                    {@link Double#POSITIVE_INFINITY}.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         * @since 0.3.10</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>scale</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>scaleWidth</color><color=#f8f8f2>,</color> <color=#66d9ef>double</color> <color=#f8f8f2>scaleHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SCALE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SIZE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>KEEP_ASPECT_RATIO</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>);</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>scaleWidth</color> <color=#f92672><=</color> <color=#ae81ff>0.0</color> <color=#f92672>||</color> <color=#f8f8f2>scaleHeight</color> <color=#f92672><=</color> <color=#ae81ff>0.0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                        <color=#e6db74>"The scaling factor is equal to or less than 0."</color>
                <color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>isNaN</color><color=#f8f8f2>(</color><color=#f8f8f2>scaleWidth</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>isNaN</color><color=#f8f8f2>(</color><color=#f8f8f2>scaleHeight</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                        <color=#e6db74>"The scaling factor is not a number."</color>
                <color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>isInfinite</color><color=#f8f8f2>(</color><color=#f8f8f2>scaleWidth</color><color=#f8f8f2>)</color> <color=#f92672>||</color> <color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>isInfinite</color><color=#f8f8f2>(</color><color=#f8f8f2>scaleHeight</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                        <color=#e6db74>"The scaling factor cannot be infinity."</color>
                <color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>scaleWidth</color> <color=#f92672>=</color> <color=#f8f8f2>scaleWidth</color><color=#f8f8f2>;</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>scaleHeight</color> <color=#f92672>=</color> <color=#f8f8f2>scaleHeight</color><color=#f8f8f2>;</color>

            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Specifies the source region from which the thumbnail is to be</color>
<color=#75715e>         * created from.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param sourceRegion Source region to use when creating a thumbnail.</color>
<color=#75715e>         *                     <p></color>
<color=#75715e>         * @throws NullPointerException If the source region object is</color>
<color=#75715e>         *                              {@code null}.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         * @since 0.3.4</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>sourceRegion</color><color=#f8f8f2>(</color><color=#f8f8f2>Region</color> <color=#f8f8f2>sourceRegion</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>sourceRegion</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"Region cannot be null."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SOURCE_REGION</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>);</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>sourceRegion</color> <color=#f92672>=</color> <color=#f8f8f2>sourceRegion</color><color=#f8f8f2>;</color>
            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Specifies the source region from which the thumbnail is to be</color>
<color=#75715e>         * created from.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param position Position of the source region.</color>
<color=#75715e>         * @param size     Size of the source region.</color>
<color=#75715e>         * @throws NullPointerException If the position and/or size is</color>
<color=#75715e>         *                              {@code null}.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         * @since 0.3.4</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>sourceRegion</color><color=#f8f8f2>(</color><color=#f8f8f2>Position</color> <color=#f8f8f2>position</color><color=#f8f8f2>,</color> <color=#f8f8f2>Size</color> <color=#f8f8f2>size</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>position</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"Position cannot be null."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>size</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"Size cannot be null."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>return</color> <color=#f8f8f2>sourceRegion</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Region</color><color=#f8f8f2>(</color><color=#f8f8f2>position</color><color=#f8f8f2>,</color> <color=#f8f8f2>size</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Specifies the source region from which the thumbnail is to be</color>
<color=#75715e>         * created from.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param x      The horizontal-compoennt of the top left-hand</color>
<color=#75715e>         *               corner of the source region.</color>
<color=#75715e>         * @param y      The vertical-compoennt of the top left-hand</color>
<color=#75715e>         *               corner of the source region.</color>
<color=#75715e>         * @param width  Width of the source region.</color>
<color=#75715e>         * @param height Height of the source region.</color>
<color=#75715e>         * @throws IllegalArgumentException If the width and/or height is</color>
<color=#75715e>         *                                  less than or equal to {@code 0}.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         * @since 0.3.4</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>sourceRegion</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>width</color> <color=#f92672><=</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>height</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                        <color=#e6db74>"Width and height must be greater than 0."</color>
                <color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>return</color> <color=#f8f8f2>sourceRegion</color><color=#f8f8f2>(</color>
                    <color=#66d9ef>new</color> <color=#f8f8f2>Coordinate</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>y</color><color=#f8f8f2>),</color>
                    <color=#66d9ef>new</color> <color=#f8f8f2>AbsoluteSize</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color>
            <color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Specifies the source region from which the thumbnail is to be</color>
<color=#75715e>         * created from.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param position Position of the source region.</color>
<color=#75715e>         * @param width    Width of the source region.</color>
<color=#75715e>         * @param height   Height of the source region.</color>
<color=#75715e>         * @throws NullPointerException     If the position and/or size is</color>
<color=#75715e>         *                                  {@code null}.</color>
<color=#75715e>         * @throws IllegalArgumentException If the width and/or height is</color>
<color=#75715e>         *                                  less than or equal to {@code 0}.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         * @since 0.3.4</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>sourceRegion</color><color=#f8f8f2>(</color><color=#f8f8f2>Position</color> <color=#f8f8f2>position</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>position</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"Position cannot be null."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>width</color> <color=#f92672><=</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>height</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                        <color=#e6db74>"Width and height must be greater than 0."</color>
                <color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>return</color> <color=#f8f8f2>sourceRegion</color><color=#f8f8f2>(</color>
                    <color=#f8f8f2>position</color><color=#f8f8f2>,</color>
                    <color=#66d9ef>new</color> <color=#f8f8f2>AbsoluteSize</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color>
            <color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Specifies the source region from which the thumbnail is to be</color>
<color=#75715e>         * created from.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param region A rectangular region which specifies the source</color>
<color=#75715e>         *               region to use when creating the thumbnail.</color>
<color=#75715e>         * @throws NullPointerException If the region is {@code null}.</color>
<color=#75715e>         * @since 0.3.4</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>sourceRegion</color><color=#f8f8f2>(</color><color=#f8f8f2>Rectangle</color> <color=#f8f8f2>region</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>region</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"Region cannot be null."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>return</color> <color=#f8f8f2>sourceRegion</color><color=#f8f8f2>(</color>
                    <color=#66d9ef>new</color> <color=#f8f8f2>Coordinate</color><color=#f8f8f2>(</color><color=#f8f8f2>region</color><color=#f8f8f2>.</color><color=#a6e22e>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>region</color><color=#f8f8f2>.</color><color=#a6e22e>y</color><color=#f8f8f2>),</color>
                    <color=#66d9ef>new</color> <color=#f8f8f2>AbsoluteSize</color><color=#f8f8f2>(</color><color=#f8f8f2>region</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>())</color>
            <color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Crops the thumbnail to the size specified when calling the</color>
<color=#75715e>         * {@link #size(int, int)} method, positioned by the given</color>
<color=#75715e>         * {@link Position} object.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method will guarantee that the size of the thumbnail</color>
<color=#75715e>         * will be exactly the dimensions specified in the</color>
<color=#75715e>         * {@link #size(int, int)} method.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Internally, the resizing is performed in two steps.</color>
<color=#75715e>         * First, the thumbnail will be sized so that one of the dimensions will</color>
<color=#75715e>         * be sized exactly to the dimension specified in the {@code size}</color>
<color=#75715e>         * method, while allowing the other dimension to overhang the specified</color>
<color=#75715e>         * dimension. Then, the thumbnail will be cropped to the dimensions</color>
<color=#75715e>         * specified in the {@code size} method, positioned using the speficied</color>
<color=#75715e>         * {@link Position} object.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Once this method is called, calling the {@link #scale(double)} method</color>
<color=#75715e>         * will result in an {@link IllegalStateException}.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param position The position to which the thumbnail should be</color>
<color=#75715e>         *                 cropped to. For example, if</color>
<color=#75715e>         *                 {@link Positions#CENTER} is specified, the</color>
<color=#75715e>         *                 resulting thumbnail will be made by cropping to</color>
<color=#75715e>         *                 the center of the image.</color>
<color=#75715e>         * @throws NullPointerException If the position is {@code null}.</color>
<color=#75715e>         * @since 0.4.0</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>crop</color><color=#f8f8f2>(</color><color=#f8f8f2>Position</color> <color=#f8f8f2>position</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>checkForNull</color><color=#f8f8f2>(</color><color=#f8f8f2>position</color><color=#f8f8f2>,</color> <color=#e6db74>"Position cannot be null."</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>CROP</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SCALE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>croppingPosition</color> <color=#f92672>=</color> <color=#f8f8f2>position</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>fitWithinDimenions</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Specifies whether or not to overwrite files which already exist if</color>
<color=#75715e>         * they have been specified as destination files.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * This method will change the output behavior of the following methods:</color>
<color=#75715e>         * <ul></color>
<color=#75715e>         * <li>{@link #toFile(File)}</li></color>
<color=#75715e>         * <li>{@link #toFile(String)}</li></color>
<color=#75715e>         * <li>{@link #toFiles(Iterable)}</li></color>
<color=#75715e>         * <li>{@link #toFiles(Rename)}</li></color>
<color=#75715e>         * <li>{@link #asFiles(Iterable)}</li></color>
<color=#75715e>         * <li>{@link #asFiles(Rename)}</li></color>
<color=#75715e>         * </ul></color>
<color=#75715e>         * The behavior of methods which are not listed above will not be</color>
<color=#75715e>         * affected by calling this method.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param allowOverwrite If {@code true} then existing files will be</color>
<color=#75715e>         *                       overwritten if specified as a destination.</color>
<color=#75715e>         *                       If {@code false}, then the existing files</color>
<color=#75715e>         *                       will not be altered. For specific behavior,</color>
<color=#75715e>         *                       please refer to the specific output methods</color>
<color=#75715e>         *                       listed above.</color>
<color=#75715e>         * @since 0.3.7</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>allowOverwrite</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>allowOverwrite</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>ALLOW_OVERWRITE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>);</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>allowOverwrite</color> <color=#f92672>=</color> <color=#f8f8f2>allowOverwrite</color><color=#f8f8f2>;</color>

            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets the image type of the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method to set this parameter is optional.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param type The image type of the thumbnail.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>imageType</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>type</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>IMAGE_TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>imageType</color> <color=#f92672>=</color> <color=#f8f8f2>type</color><color=#f8f8f2>;</color>
            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets the resizing scaling mode to use when creating the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method to set this parameter is optional.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param config The scaling mode to use.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>scalingMode</color><color=#f8f8f2>(</color><color=#f8f8f2>ScalingMode</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>checkForNull</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#e6db74>"Scaling mode is null."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SCALING_MODE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>RESIZER</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>RESIZER_FACTORY</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>scalingMode</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>;</color>
            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets the resizing operation to use when creating the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method to set this parameter is optional.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * This method cannot be called in conjunction with the</color>
<color=#75715e>         * {@link #resizerFactory(ResizerFactory)} method.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param resizer The scaling operation to use.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>resizer</color><color=#f8f8f2>(</color><color=#f8f8f2>Resizer</color> <color=#f8f8f2>resizer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>checkForNull</color><color=#f8f8f2>(</color><color=#f8f8f2>resizer</color><color=#f8f8f2>,</color> <color=#e6db74>"Resizer is null."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>RESIZER</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>RESIZER_FACTORY</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SCALING_MODE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>);</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>resizerFactory</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FixedResizerFactory</color><color=#f8f8f2>(</color><color=#f8f8f2>resizer</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets the {@link ResizerFactory} object to use to decide what kind of</color>
<color=#75715e>         * resizing operation is to be used when creating the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method to set this parameter is optional.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * This method cannot be called in conjunction with the</color>
<color=#75715e>         * {@link #resizer(Resizer)} method.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param resizerFactory The scaling operation to use.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         * @since 0.4.0</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>resizerFactory</color><color=#f8f8f2>(</color><color=#f8f8f2>ResizerFactory</color> <color=#f8f8f2>resizerFactory</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>checkForNull</color><color=#f8f8f2>(</color><color=#f8f8f2>resizerFactory</color><color=#f8f8f2>,</color> <color=#e6db74>"ResizerFactory is null."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>RESIZER_FACTORY</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>RESIZER</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>);</color>

            <color=#75715e>// disable the methods which set parameters for the Resizer</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SCALING_MODE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>ALPHA_INTERPOLATION</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>DITHERING</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>ANTIALIASING</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>RENDERING</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>);</color>

            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>resizerFactory</color> <color=#f92672>=</color> <color=#f8f8f2>resizerFactory</color><color=#f8f8f2>;</color>
            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets the alpha interpolation mode when performing the resizing</color>
<color=#75715e>         * operation to generate the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method to set this parameter is optional.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * This method cannot be called in conjunction with the</color>
<color=#75715e>         * {@link #resizerFactory(ResizerFactory)} method.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param config The alpha interpolation mode.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>alphaInterpolation</color><color=#f8f8f2>(</color><color=#f8f8f2>AlphaInterpolation</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>checkForNull</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#e6db74>"Alpha interpolation is null."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>RESIZER_FACTORY</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>ALPHA_INTERPOLATION</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>alphaInterpolation</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>;</color>
            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets the dithering mode when performing the resizing</color>
<color=#75715e>         * operation to generate the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method to set this parameter is optional.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * This method cannot be called in conjunction with the</color>
<color=#75715e>         * {@link #resizerFactory(ResizerFactory)} method.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param config The dithering mode.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>dithering</color><color=#f8f8f2>(</color><color=#f8f8f2>Dithering</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>checkForNull</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#e6db74>"Dithering is null."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>RESIZER_FACTORY</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>DITHERING</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>dithering</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>;</color>
            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets the antialiasing mode when performing the resizing</color>
<color=#75715e>         * operation to generate the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method to set this parameter is optional.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException}.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * This method cannot be called in conjunction with the</color>
<color=#75715e>         * {@link #resizerFactory(ResizerFactory)} method.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param config The antialiasing mode.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>antialiasing</color><color=#f8f8f2>(</color><color=#f8f8f2>Antialiasing</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>checkForNull</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#e6db74>"Antialiasing is null."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>RESIZER_FACTORY</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>ANTIALIASING</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>antialiasing</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>;</color>
            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets the rendering mode when performing the resizing</color>
<color=#75715e>         * operation to generate the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method to set this parameter is optional.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * This method cannot be called in conjunction with the</color>
<color=#75715e>         * {@link #resizerFactory(ResizerFactory)} method.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param config The rendering mode.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>rendering</color><color=#f8f8f2>(</color><color=#f8f8f2>Rendering</color> <color=#f8f8f2>config</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>checkForNull</color><color=#f8f8f2>(</color><color=#f8f8f2>config</color><color=#f8f8f2>,</color> <color=#e6db74>"Rendering is null."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>RESIZER_FACTORY</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>RENDERING</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>rendering</color> <color=#f92672>=</color> <color=#f8f8f2>config</color><color=#f8f8f2>;</color>
            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets whether or not to keep the aspect ratio of the original image</color>
<color=#75715e>         * for the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method without first calling the {@link #size(int, int)}</color>
<color=#75715e>         * method will result in an {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * If this method is not called when, by default the aspect ratio of</color>
<color=#75715e>         * the original image is preserved for the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method after calling the {@link #scale(double)} method</color>
<color=#75715e>         * or the {@link #scale(double, double)} method will result in a</color>
<color=#75715e>         * {@link IllegalStateException}.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param keep {@code true} if the thumbnail is to maintain</color>
<color=#75715e>         *             the aspect ratio of the original image,</color>
<color=#75715e>         *             {@code false} otherwise.</color>
<color=#75715e>         * @throws IllegalStateException If</color>
<color=#75715e>         *                               <ol></color>
<color=#75715e>         *                               <li>the {@link #size(int, int)} has</color>
<color=#75715e>         *                               not yet been called to specify the</color>
<color=#75715e>         *                               size of the thumbnail, or</li></color>
<color=#75715e>         *                               <li>the {@link #scale(double)}</color>
<color=#75715e>         *                               method has been called, or</li></color>
<color=#75715e>         *                               <li>the</color>
<color=#75715e>         *                               {@link #scale(double, double)}</color>
<color=#75715e>         *                               method has been called, or</li></color>
<color=#75715e>         *                               <li>the {@link #width(int)} and/or</color>
<color=#75715e>         *                               {@link #height(int)} has been called</color>
<color=#75715e>         *                               and not preserving the aspect ratio</color>
<color=#75715e>         *                               is desired.</li></color>
<color=#75715e>         *                               </ol></color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>keepAspectRatio</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>keep</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SCALE</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Cannot specify whether to "</color> <color=#f92672>+</color>
                        <color=#e6db74>"keep the aspect ratio if the scaling factor has "</color> <color=#f92672>+</color>
                        <color=#e6db74>"already been specified."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SIZE</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>NOT_READY</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Cannot specify whether to "</color> <color=#f92672>+</color>
                        <color=#e6db74>"keep the aspect ratio unless the size parameter has "</color> <color=#f92672>+</color>
                        <color=#e6db74>"already been specified."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>WIDTH</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color> <color=#f92672>||</color>
                    <color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>HEIGHT</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>)</color> <color=#f92672>&&</color>
                    <color=#f92672>!</color><color=#f8f8f2>keep</color>
            <color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"The aspect ratio must be "</color> <color=#f92672>+</color>
                        <color=#e6db74>"preserved when the width and/or height parameter "</color> <color=#f92672>+</color>
                        <color=#e6db74>"has already been specified."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>KEEP_ASPECT_RATIO</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>keepAspectRatio</color> <color=#f92672>=</color> <color=#f8f8f2>keep</color><color=#f8f8f2>;</color>
            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets the output quality of the compression algorithm used to</color>
<color=#75715e>         * compress the thumbnail when it is written to an external destination</color>
<color=#75715e>         * such as a file or output stream.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * The value is a {@code float} between {@code 0.0f} and {@code 1.0f}</color>
<color=#75715e>         * where {@code 0.0f} indicates the minimum quality and {@code 1.0f}</color>
<color=#75715e>         * indicates the maximum quality settings should be used for by the</color>
<color=#75715e>         * compression codec.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method to set this parameter is optional.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method in conjunction with {@link #asBufferedImage()}</color>
<color=#75715e>         * or {@link #asBufferedImages()} will not result in any changes to the</color>
<color=#75715e>         * final result.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times, or the</color>
<color=#75715e>         * {@link #outputQuality(double)} in conjunction with this method will</color>
<color=#75715e>         * result in an {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param quality The compression quality to use when writing</color>
<color=#75715e>         *                the thumbnail.</color>
<color=#75715e>         * @throws IllegalArgumentException If the argument is less than</color>
<color=#75715e>         *                                  {@code 0.0f} or is greater than</color>
<color=#75715e>         *                                  {@code 1.0f}.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>outputQuality</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>quality</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>quality</color> <color=#f92672><</color> <color=#ae81ff>0.0f</color> <color=#f92672>||</color> <color=#f8f8f2>quality</color> <color=#f92672>></color> <color=#ae81ff>1.0f</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                        <color=#e6db74>"The quality setting must be in the range 0.0f and "</color> <color=#f92672>+</color>
                                <color=#e6db74>"1.0f, inclusive."</color>
                <color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>OUTPUT_QUALITY</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>outputQuality</color> <color=#f92672>=</color> <color=#f8f8f2>quality</color><color=#f8f8f2>;</color>
            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets the output quality of the compression algorithm used to</color>
<color=#75715e>         * compress the thumbnail when it is written to an external destination</color>
<color=#75715e>         * such as a file or output stream.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * The value is a {@code double} between {@code 0.0d} and {@code 1.0d}</color>
<color=#75715e>         * where {@code 0.0d} indicates the minimum quality and {@code 1.0d}</color>
<color=#75715e>         * indicates the maximum quality settings should be used for by the</color>
<color=#75715e>         * compression codec.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * This method is a convenience method for {@link #outputQuality(float)}</color>
<color=#75715e>         * where the {@code double} argument type is accepted instead of a</color>
<color=#75715e>         * {@code float}.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method to set this parameter is optional.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method in conjunction with {@link #asBufferedImage()}</color>
<color=#75715e>         * or {@link #asBufferedImages()} will not result in any changes to the</color>
<color=#75715e>         * final result.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times, or the</color>
<color=#75715e>         * {@link #outputQuality(float)} in conjunction with this method will</color>
<color=#75715e>         * result in an {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param quality The compression quality to use when writing</color>
<color=#75715e>         *                the thumbnail.</color>
<color=#75715e>         * @throws IllegalArgumentException If the argument is less than</color>
<color=#75715e>         *                                  {@code 0.0d} or is greater than</color>
<color=#75715e>         *                                  {@code 1.0d}.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>outputQuality</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>quality</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>quality</color> <color=#f92672><</color> <color=#ae81ff>0.0d</color> <color=#f92672>||</color> <color=#f8f8f2>quality</color> <color=#f92672>></color> <color=#ae81ff>1.0d</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                        <color=#e6db74>"The quality setting must be in the range 0.0d and "</color> <color=#f92672>+</color>
                                <color=#e6db74>"1.0d, inclusive."</color>
                <color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>OUTPUT_QUALITY</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>outputQuality</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>quality</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>outputQuality</color> <color=#f92672><</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>outputQuality</color> <color=#f92672>=</color> <color=#ae81ff>0.0f</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>outputQuality</color> <color=#f92672>></color> <color=#ae81ff>1.0f</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>outputQuality</color> <color=#f92672>=</color> <color=#ae81ff>1.0f</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets the compression format to use when writing the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * For example, to set the output format to JPEG, the following code</color>
<color=#75715e>         * can be used:</color>
<color=#75715e>         * <pre><code></color>
<color=#75715e>         * Thumbnails.of(image)</color>
<color=#75715e>         * .size(640, 480)</color>
<color=#75715e>         * .outputFormat("JPEG")</color>
<color=#75715e>         * .toFile(thumbnail);</color>
<color=#75715e>         * </code></pre></color>
<color=#75715e>         * or, alternatively:</color>
<color=#75715e>         * <pre><code></color>
<color=#75715e>         * Thumbnails.of(image)</color>
<color=#75715e>         * .size(640, 480)</color>
<color=#75715e>         * .outputFormat("jpg")</color>
<color=#75715e>         * .toFile(thumbnail);</color>
<color=#75715e>         * </code></pre></color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Currently, whether or not the compression format string is valid</color>
<color=#75715e>         * dependents on whether the Java Image I/O API recognizes the string</color>
<color=#75715e>         * as a format that it supports for output. (Valid format names can</color>
<color=#75715e>         * be obtained by calling the {@link ImageIO#getWriterFormatNames()}</color>
<color=#75715e>         * method.)</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method to set this parameter is optional.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method in conjunction with {@link #asBufferedImage()}</color>
<color=#75715e>         * or {@link #asBufferedImages()} will not result in any changes to the</color>
<color=#75715e>         * final result.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param format The compression format to use when writing</color>
<color=#75715e>         *               the thumbnail.</color>
<color=#75715e>         * @throws IllegalArgumentException If an unsupported format is</color>
<color=#75715e>         *                                  specified.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>outputFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>format</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>ThumbnailatorUtils</color><color=#f8f8f2>.</color><color=#a6e22e>isSupportedOutputFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                        <color=#e6db74>"Specified format is not supported: "</color> <color=#f92672>+</color> <color=#f8f8f2>format</color>
                <color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>OUTPUT_FORMAT</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>outputFormat</color> <color=#f92672>=</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets the compression format to use the same format as the original</color>
<color=#75715e>         * image.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         * @since 0.4.0</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>useOriginalFormat</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>OUTPUT_FORMAT</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>outputFormat</color> <color=#f92672>=</color> <color=#f8f8f2>ThumbnailParameter</color><color=#f8f8f2>.</color><color=#a6e22e>ORIGINAL_FORMAT</color><color=#f8f8f2>;</color>
            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets whether or not to use the Exif metadata when orienting the</color>
<color=#75715e>         * thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param useExifOrientation {@code true} if the Exif metadata</color>
<color=#75715e>         *                           should be used to determine the</color>
<color=#75715e>         *                           orientation of the thumbnail,</color>
<color=#75715e>         *                           {@code false} otherwise.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         * @since 0.4.3</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>useExifOrientation</color><color=#f8f8f2>(</color><color=#66d9ef>boolean</color> <color=#f8f8f2>useExifOrientation</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>USE_EXIF_ORIENTATION</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>);</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>useExifOrientation</color> <color=#f92672>=</color> <color=#f8f8f2>useExifOrientation</color><color=#f8f8f2>;</color>
            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Indicates that the output format should be determined from the</color>
<color=#75715e>         * available information when writing the thumbnail image.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * For example, calling this method will cause the output format to be</color>
<color=#75715e>         * determined from the file extension if thumbnails are written to</color>
<color=#75715e>         * files.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         * @since 0.4.0</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>determineOutputFormat</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>OUTPUT_FORMAT</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>outputFormat</color> <color=#f92672>=</color> <color=#f8f8f2>ThumbnailParameter</color><color=#f8f8f2>.</color><color=#a6e22e>DETERMINE_FORMAT</color><color=#f8f8f2>;</color>
            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#a6e22e>isOutputFormatNotSet</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>outputFormat</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>ThumbnailParameter</color><color=#f8f8f2>.</color><color=#a6e22e>DETERMINE_FORMAT</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>outputFormat</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets the compression format type of the thumbnail to write.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * If the default type for the compression codec should be used, a</color>
<color=#75715e>         * value of {@link ThumbnailParameter#DEFAULT_FORMAT_TYPE} should be</color>
<color=#75715e>         * used.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method to set this parameter is optional.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method multiple times will result in an</color>
<color=#75715e>         * {@link IllegalStateException} to be thrown.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Furthermore, if this method is called, then calling the</color>
<color=#75715e>         * {@link #outputFormat} method is disabled, in order to prevent</color>
<color=#75715e>         * cases where the output format type does not exist in the format</color>
<color=#75715e>         * specified for the {@code outputFormat} method.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param formatType The compression format type</color>
<color=#75715e>         * @throws IllegalArgumentException If an unsupported format type is</color>
<color=#75715e>         *                                  specified for the current output</color>
<color=#75715e>         *                                  format type. Or, if the output</color>
<color=#75715e>         *                                  format has not been specified before</color>
<color=#75715e>         *                                  this method was called.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>outputFormatType</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>formatType</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>/*</color>
<color=#75715e>             * If the output format is the original format, and the format type</color>
<color=#75715e>             * is being specified, it's going to be likely that the specified</color>
<color=#75715e>             * type will not be present in all the formats, so we'll disallow</color>
<color=#75715e>             * it. (e.g. setting type to "JPEG", and if the original formats</color>
<color=#75715e>             * were JPEG and PNG, then we'd have a problem.</color>
<color=#75715e>             */</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>formatType</color> <color=#f92672>!=</color> <color=#f8f8f2>ThumbnailParameter</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT_FORMAT_TYPE</color>
                    <color=#f92672>&&</color> <color=#f8f8f2>isOutputFormatNotSet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                        <color=#e6db74>"Cannot set the format type if a specific output "</color> <color=#f92672>+</color>
                                <color=#e6db74>"format has not been specified."</color>
                <color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>ThumbnailatorUtils</color><color=#f8f8f2>.</color><color=#a6e22e>isSupportedOutputFormatType</color><color=#f8f8f2>(</color><color=#f8f8f2>outputFormat</color><color=#f8f8f2>,</color> <color=#f8f8f2>formatType</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                        <color=#e6db74>"Specified format type ("</color> <color=#f92672>+</color> <color=#f8f8f2>formatType</color> <color=#f92672>+</color> <color=#e6db74>") is not "</color> <color=#f92672>+</color>
                                <color=#e6db74>" supported for the format: "</color> <color=#f92672>+</color> <color=#f8f8f2>outputFormat</color>
                <color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>/*</color>
<color=#75715e>             * If the output format type is set, then we'd better make the</color>
<color=#75715e>             * output format unchangeable, or else we'd risk having a type</color>
<color=#75715e>             * that is not part of the output format.</color>
<color=#75715e>             */</color>
            <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>OUTPUT_FORMAT_TYPE</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>);</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>OUTPUT_FORMAT</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>updateStatus</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>OUTPUT_FORMAT</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>CANNOT_SET</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>outputFormatType</color> <color=#f92672>=</color> <color=#f8f8f2>formatType</color><color=#f8f8f2>;</color>
            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets the watermark to apply on the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * This method can be called multiple times to apply multiple</color>
<color=#75715e>         * watermarks.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * If multiple watermarks are to be applied, the watermarks will be</color>
<color=#75715e>         * applied in the order that this method is called.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method to set this parameter is optional.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param w The watermark to apply to the thumbnail.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>watermark</color><color=#f8f8f2>(</color><color=#f8f8f2>Watermark</color> <color=#f8f8f2>w</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>w</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"Watermark is null."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>filterPipeline</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>w</color><color=#f8f8f2>);</color>

            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets the image of the watermark to apply on the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * This method is a convenience method for the</color>
<color=#75715e>         * {@link #watermark(Position, BufferedImage, float)} method, where</color>
<color=#75715e>         * the opacity is 50%, and the position is set to center of the</color>
<color=#75715e>         * thumbnail:</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * <pre></color>
<color=#75715e>         * watermark(Positions.CENTER, image, 0.5f);</color>
<color=#75715e>         * </pre></color>
<color=#75715e>         * This method can be called multiple times to apply multiple</color>
<color=#75715e>         * watermarks.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * If multiple watermarks are to be applied, the watermarks will be</color>
<color=#75715e>         * applied in the order that this method is called.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method to set this parameter is optional.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param image The image of the watermark.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>watermark</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>image</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>watermark</color><color=#f8f8f2>(</color><color=#f8f8f2>Positions</color><color=#f8f8f2>.</color><color=#a6e22e>CENTER</color><color=#f8f8f2>,</color> <color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#ae81ff>0.5f</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets the image and opacity of the watermark to apply on</color>
<color=#75715e>         * the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * This method is a convenience method for the</color>
<color=#75715e>         * {@link #watermark(Position, BufferedImage, float)} method, where</color>
<color=#75715e>         * the opacity is 50%:</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * <pre></color>
<color=#75715e>         * watermark(Positions.CENTER, image, opacity);</color>
<color=#75715e>         * </pre></color>
<color=#75715e>         * This method can be called multiple times to apply multiple</color>
<color=#75715e>         * watermarks.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * If multiple watermarks are to be applied, the watermarks will be</color>
<color=#75715e>         * applied in the order that this method is called.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method to set this parameter is optional.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param image   The image of the watermark.</color>
<color=#75715e>         * @param opacity The opacity of the watermark.</color>
<color=#75715e>         *                <p></color>
<color=#75715e>         *                The value should be between {@code 0.0f} and</color>
<color=#75715e>         *                {@code 1.0f}, where {@code 0.0f} is completely</color>
<color=#75715e>         *                transparent, and {@code 1.0f} is completely</color>
<color=#75715e>         *                opaque.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>watermark</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>opacity</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>watermark</color><color=#f8f8f2>(</color><color=#f8f8f2>Positions</color><color=#f8f8f2>.</color><color=#a6e22e>CENTER</color><color=#f8f8f2>,</color> <color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#f8f8f2>opacity</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets the image and opacity and position of the watermark to apply on</color>
<color=#75715e>         * the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * This method can be called multiple times to apply multiple</color>
<color=#75715e>         * watermarks.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * If multiple watermarks are to be applied, the watermarks will be</color>
<color=#75715e>         * applied in the order that this method is called.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method to set this parameter is optional.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param position The position of the watermark.</color>
<color=#75715e>         * @param image    The image of the watermark.</color>
<color=#75715e>         * @param opacity  The opacity of the watermark.</color>
<color=#75715e>         *                 <p></color>
<color=#75715e>         *                 The value should be between {@code 0.0f} and</color>
<color=#75715e>         *                 {@code 1.0f}, where {@code 0.0f} is completely</color>
<color=#75715e>         *                 transparent, and {@code 1.0f} is completely</color>
<color=#75715e>         *                 opaque.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>watermark</color><color=#f8f8f2>(</color><color=#f8f8f2>Position</color> <color=#f8f8f2>position</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#66d9ef>float</color> <color=#f8f8f2>opacity</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>filterPipeline</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Watermark</color><color=#f8f8f2>(</color><color=#f8f8f2>position</color><color=#f8f8f2>,</color> <color=#f8f8f2>image</color><color=#f8f8f2>,</color> <color=#f8f8f2>opacity</color><color=#f8f8f2>));</color>
            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * rotation</color>
<color=#75715e>         */</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Sets the amount of rotation to apply to the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * The thumbnail will be rotated clockwise by the angle specified.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * This method can be called multiple times to apply multiple</color>
<color=#75715e>         * rotations.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * If multiple rotations are to be applied, the rotations will be</color>
<color=#75715e>         * applied in the order that this method is called.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method to set this parameter is optional.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param angle Angle in degrees.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>rotate</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>angle</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>filterPipeline</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>Rotation</color><color=#f8f8f2>.</color><color=#a6e22e>newRotator</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>));</color>
            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>


        <color=#75715e>/*</color>
<color=#75715e>         * other filters</color>
<color=#75715e>         */</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Adds a {@link ImageFilter} to apply to the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * This method can be called multiple times to apply multiple</color>
<color=#75715e>         * filters.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * If multiple filters are to be applied, the filters will be</color>
<color=#75715e>         * applied in the order that this method is called.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method to set this parameter is optional.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param filter An image filter to apply to the thumbnail.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>addFilter</color><color=#f8f8f2>(</color><color=#f8f8f2>ImageFilter</color> <color=#f8f8f2>filter</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>filter</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"Filter is null."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>filterPipeline</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>filter</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Adds multiple {@link ImageFilter}s to apply to the thumbnail.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * This method can be called multiple times to apply multiple</color>
<color=#75715e>         * filters.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * If multiple filters are to be applied, the filters will be</color>
<color=#75715e>         * applied in the order that this method is called.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Calling this method to set this parameter is optional.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param filters A list of filters to apply to the thumbnail.</color>
<color=#75715e>         * @return Reference to this object.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Builder</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#a6e22e>addFilters</color><color=#f8f8f2>(</color><color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>ImageFilter</color><color=#f92672>></color> <color=#f8f8f2>filters</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>filters</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"Filters is null."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>filterPipeline</color><color=#f8f8f2>.</color><color=#a6e22e>addAll</color><color=#f8f8f2>(</color><color=#f8f8f2>filters</color><color=#f8f8f2>);</color>
            <color=#66d9ef>return</color> <color=#66d9ef>this</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Checks whether the builder is ready to create thumbnails.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @throws IllegalStateException If the builder is not ready to</color>
<color=#75715e>         *                               create thumbnails, due to some</color>
<color=#75715e>         *                               parameters not being set.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkReadiness</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f8f8f2>.</color><color=#a6e22e>Entry</color><color=#f92672><</color><color=#f8f8f2>Properties</color><color=#f8f8f2>,</color> <color=#f8f8f2>Status</color><color=#f92672>></color> <color=#f8f8f2>s</color> <color=#f8f8f2>:</color> <color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>entrySet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>s</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>NOT_READY</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#f8f8f2>s</color><color=#f8f8f2>.</color><color=#a6e22e>getKey</color><color=#f8f8f2>().</color><color=#a6e22e>getName</color><color=#f8f8f2>()</color> <color=#f92672>+</color>
                            <color=#e6db74>" is not set."</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Returns a {@link Resizer} which is suitable for the current</color>
<color=#75715e>         * builder state.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param mode The scaling mode to use to create thumbnails.</color>
<color=#75715e>         * @return The {@link Resizer} which is suitable for the</color>
<color=#75715e>         * specified scaling mode and builder state.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>private</color> <color=#f8f8f2>Resizer</color> <color=#a6e22e>makeResizer</color><color=#f8f8f2>(</color><color=#f8f8f2>ScalingMode</color> <color=#f8f8f2>mode</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>Key</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>></color> <color=#f8f8f2>hints</color> <color=#f92672>=</color>
                    <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>Key</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>></color><color=#f8f8f2>();</color>

            <color=#f8f8f2>hints</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>KEY_ALPHA_INTERPOLATION</color><color=#f8f8f2>,</color> <color=#f8f8f2>alphaInterpolation</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>hints</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>KEY_DITHERING</color><color=#f8f8f2>,</color> <color=#f8f8f2>dithering</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>hints</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>KEY_ANTIALIASING</color><color=#f8f8f2>,</color> <color=#f8f8f2>antialiasing</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>hints</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>KEY_RENDERING</color><color=#f8f8f2>,</color> <color=#f8f8f2>rendering</color><color=#f8f8f2>.</color><color=#a6e22e>getValue</color><color=#f8f8f2>());</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mode</color> <color=#f92672>==</color> <color=#f8f8f2>ScalingMode</color><color=#f8f8f2>.</color><color=#a6e22e>BILINEAR</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BilinearResizer</color><color=#f8f8f2>(</color><color=#f8f8f2>hints</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mode</color> <color=#f92672>==</color> <color=#f8f8f2>ScalingMode</color><color=#f8f8f2>.</color><color=#a6e22e>BICUBIC</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BicubicResizer</color><color=#f8f8f2>(</color><color=#f8f8f2>hints</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>mode</color> <color=#f92672>==</color> <color=#f8f8f2>ScalingMode</color><color=#f8f8f2>.</color><color=#a6e22e>PROGRESSIVE_BILINEAR</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ProgressiveBilinearResizer</color><color=#f8f8f2>(</color><color=#f8f8f2>hints</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ProgressiveBilinearResizer</color><color=#f8f8f2>(</color><color=#f8f8f2>hints</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>prepareResizerFactory</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#75715e>/*</color>
<color=#75715e>             * If the scalingMode has been set, then use scalingMode to obtain</color>
<color=#75715e>             * a resizer, else, use the resizer field.</color>
<color=#75715e>             */</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>statusMap</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>Properties</color><color=#f8f8f2>.</color><color=#a6e22e>SCALING_MODE</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#f8f8f2>Status</color><color=#f8f8f2>.</color><color=#a6e22e>ALREADY_SET</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>resizerFactory</color> <color=#f92672>=</color>
                        <color=#66d9ef>new</color> <color=#f8f8f2>FixedResizerFactory</color><color=#f8f8f2>(</color><color=#f8f8f2>makeResizer</color><color=#f8f8f2>(</color><color=#f8f8f2>scalingMode</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Returns a {@link ThumbnailParameter} from the current builder state.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @return A {@link ThumbnailParameter} from the current</color>
<color=#75715e>         * builder state.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>private</color> <color=#f8f8f2>ThumbnailParameter</color> <color=#a6e22e>makeParam</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>prepareResizerFactory</color><color=#f8f8f2>();</color>

            <color=#66d9ef>int</color> <color=#f8f8f2>imageTypeToUse</color> <color=#f92672>=</color> <color=#f8f8f2>imageType</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>imageType</color> <color=#f92672>==</color> <color=#f8f8f2>IMAGE_TYPE_UNSPECIFIED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>imageTypeToUse</color> <color=#f92672>=</color> <color=#f8f8f2>ThumbnailParameter</color><color=#f8f8f2>.</color><color=#a6e22e>ORIGINAL_IMAGE_TYPE</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>/*</color>
<color=#75715e>             * croppingPosition being non-null means that a crop should</color>
<color=#75715e>             * take place.</color>
<color=#75715e>             */</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>croppingPosition</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>filterPipeline</color><color=#f8f8f2>.</color><color=#a6e22e>addFirst</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>Canvas</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>croppingPosition</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>isNaN</color><color=#f8f8f2>(</color><color=#f8f8f2>scaleWidth</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#75715e>// If the dimensions were specified, do the following.</color>

                <color=#75715e>// Check that at least one dimension is specified.</color>
                <color=#75715e>// If it's not, it's a bug.</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color>
                        <color=#f8f8f2>width</color> <color=#f92672>==</color> <color=#f8f8f2>DIMENSION_NOT_SPECIFIED</color> <color=#f92672>&&</color>
                                <color=#f8f8f2>height</color> <color=#f92672>==</color> <color=#f8f8f2>DIMENSION_NOT_SPECIFIED</color>
                <color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
                            <color=#e6db74>"The width or height must be specified. If this "</color> <color=#f92672>+</color>
                                    <color=#e6db74>"exception is thrown, it is due to a bug in the "</color> <color=#f92672>+</color>
                                    <color=#e6db74>"Thumbnailator library."</color>
                    <color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>

                <color=#75715e>// Set the unspecified dimension to a default value.</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>width</color> <color=#f92672>==</color> <color=#f8f8f2>DIMENSION_NOT_SPECIFIED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>height</color> <color=#f92672>==</color> <color=#f8f8f2>DIMENSION_NOT_SPECIFIED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>MAX_VALUE</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ThumbnailParameter</color><color=#f8f8f2>(</color>
                        <color=#66d9ef>new</color> <color=#f8f8f2>Dimension</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>),</color>
                        <color=#f8f8f2>sourceRegion</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>keepAspectRatio</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>outputFormat</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>outputFormatType</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>outputQuality</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>imageTypeToUse</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>filterPipeline</color><color=#f8f8f2>.</color><color=#a6e22e>getFilters</color><color=#f8f8f2>(),</color>
                        <color=#f8f8f2>resizerFactory</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>fitWithinDimenions</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>useExifOrientation</color>
                <color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#75715e>// If the scaling factor was specified</color>
                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>ThumbnailParameter</color><color=#f8f8f2>(</color>
                        <color=#f8f8f2>scaleWidth</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>scaleHeight</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>sourceRegion</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>keepAspectRatio</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>outputFormat</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>outputFormatType</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>outputQuality</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>imageTypeToUse</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>filterPipeline</color><color=#f8f8f2>.</color><color=#a6e22e>getFilters</color><color=#f8f8f2>(),</color>
                        <color=#f8f8f2>resizerFactory</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>fitWithinDimenions</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>useExifOrientation</color>
                <color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Create the thumbnails and return as a {@link Iterable} of</color>
<color=#75715e>         * {@link BufferedImage}s.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * For situations where multiple thumbnails are being generated, this</color>
<color=#75715e>         * method is preferred over the {@link #asBufferedImages()} method,</color>
<color=#75715e>         * as (1) the processing does not have to complete before the method</color>
<color=#75715e>         * returns and (2) the thumbnails can be retrieved one at a time,</color>
<color=#75715e>         * potentially reducing the number of thumbnails which need to be</color>
<color=#75715e>         * retained in the heap memory, potentially reducing the chance of</color>
<color=#75715e>         * {@link OutOfMemoryError}s from occurring.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * If an {@link IOException} occurs during the processing of the</color>
<color=#75715e>         * thumbnail, the {@link Iterable} will return a {@code null} for that</color>
<color=#75715e>         * element.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @return An {@link Iterable} which will provide an</color>
<color=#75715e>         * {@link Iterator} which returns thumbnails as</color>
<color=#75715e>         * {@link BufferedImage}s.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>BufferedImage</color><color=#f92672>></color> <color=#a6e22e>iterableBufferedImages</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>checkReadiness</color><color=#f8f8f2>();</color>
            <color=#75715e>/*</color>
<color=#75715e>             * TODO To get the precise error information, there would have to</color>
<color=#75715e>             * be an event notification mechanism.</color>
<color=#75715e>             */</color>
            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImageIterable</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Create the thumbnails and return as a {@link List} of</color>
<color=#75715e>         * {@link BufferedImage}s.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * <h3>Note about performance</h3></color>
<color=#75715e>         * If there are many thumbnails generated at once, it is possible that</color>
<color=#75715e>         * the Java virtual machine's heap space will run out and an</color>
<color=#75715e>         * {@link OutOfMemoryError} could result.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * If many thumbnails are being processed at once, then using the</color>
<color=#75715e>         * {@link #iterableBufferedImages()} method would be preferable.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @throws IOException If an problem occurred during</color>
<color=#75715e>         *                     the reading of the original</color>
<color=#75715e>         *                     images.</color>
<color=#75715e>         * @return A list of thumbnails.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>BufferedImage</color><color=#f92672>></color> <color=#a6e22e>asBufferedImages</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>checkReadiness</color><color=#f8f8f2>();</color>

            <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>BufferedImage</color><color=#f92672>></color> <color=#f8f8f2>thumbnails</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>BufferedImage</color><color=#f92672>></color><color=#f8f8f2>();</color>

            <color=#75715e>// Create thumbnails</color>
            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>source</color> <color=#f8f8f2>:</color> <color=#f8f8f2>sources</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>BufferedImageSink</color> <color=#f8f8f2>destination</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImageSink</color><color=#f8f8f2>();</color>

                <color=#f8f8f2>Thumbnailator</color><color=#f8f8f2>.</color><color=#a6e22e>createThumbnail</color><color=#f8f8f2>(</color>
                        <color=#66d9ef>new</color> <color=#f8f8f2>SourceSinkThumbnailTask</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>makeParam</color><color=#f8f8f2>(),</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#f8f8f2>destination</color><color=#f8f8f2>)</color>
                <color=#f8f8f2>);</color>

                <color=#f8f8f2>thumbnails</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>destination</color><color=#f8f8f2>.</color><color=#a6e22e>getSink</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>return</color> <color=#f8f8f2>thumbnails</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Creates a thumbnail and returns it as a {@link BufferedImage}.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * To call this method, the thumbnail must have been created from a</color>
<color=#75715e>         * single source.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @throws IOException              If an problem occurred during</color>
<color=#75715e>         *                                  the reading of the original</color>
<color=#75715e>         *                                  image.</color>
<color=#75715e>         * @throws IllegalArgumentException If multiple original images are</color>
<color=#75715e>         *                                  specified.</color>
<color=#75715e>         * @return A thumbnail as a {@link BufferedImage}.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>asBufferedImage</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>checkReadiness</color><color=#f8f8f2>();</color>

            <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>sources</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>source</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Cannot create one thumbnail from multiple original images."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>BufferedImageSink</color> <color=#f8f8f2>destination</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImageSink</color><color=#f8f8f2>();</color>

            <color=#f8f8f2>Thumbnailator</color><color=#f8f8f2>.</color><color=#a6e22e>createThumbnail</color><color=#f8f8f2>(</color>
                    <color=#66d9ef>new</color> <color=#f8f8f2>SourceSinkThumbnailTask</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>makeParam</color><color=#f8f8f2>(),</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#f8f8f2>destination</color><color=#f8f8f2>)</color>
            <color=#f8f8f2>);</color>

            <color=#66d9ef>return</color> <color=#f8f8f2>destination</color><color=#f8f8f2>.</color><color=#a6e22e>getSink</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Creates the thumbnails and stores them to the files, and returns</color>
<color=#75715e>         * a {@link List} of {@link File}s to the thumbnails.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * When the destination file exists, and overwriting files has been</color>
<color=#75715e>         * disabled by calling the {@link #allowOverwrite(boolean)} method</color>
<color=#75715e>         * with {@code false}, then the thumbnail with the destination file</color>
<color=#75715e>         * already existing will not be written and the corresponding</color>
<color=#75715e>         * {@code File} object will not be included in the {@code List} returned</color>
<color=#75715e>         * by this method.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * The file names for the thumbnails are obtained from the given</color>
<color=#75715e>         * {@link Iterable}.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param iterable An {@link Iterable} which returns an</color>
<color=#75715e>         *                 {@link Iterator} which returns file names</color>
<color=#75715e>         *                 which should be assigned to each thumbnail.</color>
<color=#75715e>         * @throws IOException If a problem occurs while reading the</color>
<color=#75715e>         *                     original images or writing the thumbnails</color>
<color=#75715e>         *                     to files.</color>
<color=#75715e>         * @return A list of {@link File}s of the thumbnails</color>
<color=#75715e>         * which were created.</color>
<color=#75715e>         * @since 0.3.7</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#a6e22e>asFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#f8f8f2>iterable</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>checkReadiness</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>iterable</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"File name iterable is null."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#f8f8f2>destinationFiles</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color><color=#f8f8f2>();</color>

            <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#f8f8f2>filenameIter</color> <color=#f92672>=</color> <color=#f8f8f2>iterable</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>

            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>source</color> <color=#f8f8f2>:</color> <color=#f8f8f2>sources</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>filenameIter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>(</color>
                            <color=#e6db74>"Not enough file names provided by iterator."</color>
                    <color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>ThumbnailParameter</color> <color=#f8f8f2>param</color> <color=#f92672>=</color> <color=#f8f8f2>makeParam</color><color=#f8f8f2>();</color>

                <color=#f8f8f2>FileImageSink</color> <color=#f8f8f2>destination</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileImageSink</color><color=#f8f8f2>(</color><color=#f8f8f2>filenameIter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>(),</color> <color=#f8f8f2>allowOverwrite</color><color=#f8f8f2>);</color>

                <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>Thumbnailator</color><color=#f8f8f2>.</color><color=#a6e22e>createThumbnail</color><color=#f8f8f2>(</color>
                            <color=#66d9ef>new</color> <color=#f8f8f2>SourceSinkThumbnailTask</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f8f8f2>,</color> <color=#f8f8f2>File</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>,</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#f8f8f2>destination</color><color=#f8f8f2>)</color>
                    <color=#f8f8f2>);</color>

                    <color=#f8f8f2>destinationFiles</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>destination</color><color=#f8f8f2>.</color><color=#a6e22e>getSink</color><color=#f8f8f2>());</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>/*</color>
<color=#75715e>                     * Handle the IllegalArgumentException which is thrown when</color>
<color=#75715e>                     * the destination file already exists by not adding the</color>
<color=#75715e>                     * current file to the destinationFiles list.</color>
<color=#75715e>                     */</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>return</color> <color=#f8f8f2>destinationFiles</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Creates the thumbnails and stores them to the files.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * When the destination file exists, and overwriting files has been</color>
<color=#75715e>         * disabled by calling the {@link #allowOverwrite(boolean)} method</color>
<color=#75715e>         * with {@code false}, then the thumbnail with the destination file</color>
<color=#75715e>         * already existing will not be written.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * The file names for the thumbnails are obtained from the given</color>
<color=#75715e>         * {@link Iterable}.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param iterable An {@link Iterable} which returns an</color>
<color=#75715e>         *                 {@link Iterator} which returns file names</color>
<color=#75715e>         *                 which should be assigned to each thumbnail.</color>
<color=#75715e>         * @throws IOException If a problem occurs while reading the</color>
<color=#75715e>         *                     original images or writing the thumbnails</color>
<color=#75715e>         *                     to files.</color>
<color=#75715e>         * @since 0.3.7</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>toFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#f8f8f2>iterable</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>asFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>iterable</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Creates thumbnails and stores them to files using the</color>
<color=#75715e>         * {@link Rename} function to determine the filenames. The thubnail</color>
<color=#75715e>         * files are returned as a {@link List}.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * When the destination file exists, and overwriting files has been</color>
<color=#75715e>         * disabled by calling the {@link #allowOverwrite(boolean)} method</color>
<color=#75715e>         * with {@code false}, then the thumbnail with the destination file</color>
<color=#75715e>         * already existing will not be written and the corresponding</color>
<color=#75715e>         * {@code File} object will not be included in the {@code List} returned</color>
<color=#75715e>         * by this method.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * To call this method, the thumbnails must have been creates from</color>
<color=#75715e>         * files by calling the {@link Thumbnails#of(File...)} method.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param rename The rename function which is used to</color>
<color=#75715e>         *               determine the filenames of the thumbnail</color>
<color=#75715e>         *               files to write.</color>
<color=#75715e>         * @throws IOException           If a problem occurs while reading the</color>
<color=#75715e>         *                               original images or writing the thumbnails</color>
<color=#75715e>         *                               to files.</color>
<color=#75715e>         * @throws IllegalStateException If the original images are not</color>
<color=#75715e>         *                               from files.</color>
<color=#75715e>         * @return A list of {@link File}s of the thumbnails</color>
<color=#75715e>         * which were created.</color>
<color=#75715e>         * @since 0.3.7</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#a6e22e>asFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>Rename</color> <color=#f8f8f2>rename</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>asFiles</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>rename</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Creates thumbnails and stores them to files in the directory</color>
<color=#75715e>         * specified by the given {@link File} object, and using the</color>
<color=#75715e>         * {@link Rename} function to determine the filenames. The thubnail</color>
<color=#75715e>         * files are returned as a {@link List}.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * When the destination file exists, and overwriting files has been</color>
<color=#75715e>         * disabled by calling the {@link #allowOverwrite(boolean)} method</color>
<color=#75715e>         * with {@code false}, then the thumbnail with the destination file</color>
<color=#75715e>         * already existing will not be written and the corresponding</color>
<color=#75715e>         * {@code File} object will not be included in the {@code List} returned</color>
<color=#75715e>         * by this method.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Extra caution should be taken when using this method, as there are</color>
<color=#75715e>         * no protections in place to prevent file name collisions resulting</color>
<color=#75715e>         * from creating thumbnails from files in separate directories but</color>
<color=#75715e>         * having the same name. In such a case, the behavior will be depend</color>
<color=#75715e>         * on the behavior of the {@link #allowOverwrite(boolean)} as</color>
<color=#75715e>         * described in the previous paragraph.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * To call this method, the thumbnails must have been creates from</color>
<color=#75715e>         * files by calling the {@link Thumbnails#of(File...)} method.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param destinationDir The destination directory to which the</color>
<color=#75715e>         *                       thumbnails should be written to.</color>
<color=#75715e>         * @param rename         The rename function which is used to</color>
<color=#75715e>         *                       determine the filenames of the thumbnail</color>
<color=#75715e>         *                       files to write.</color>
<color=#75715e>         * @throws IOException              If a problem occurs while reading the</color>
<color=#75715e>         *                                  original images or writing the thumbnails</color>
<color=#75715e>         *                                  to files.</color>
<color=#75715e>         * @throws IllegalStateException    If the original images are not</color>
<color=#75715e>         *                                  from files.</color>
<color=#75715e>         * @throws IllegalArgumentException If the destination directory</color>
<color=#75715e>         *                                  is not a directory.</color>
<color=#75715e>         * @return A list of {@link File}s of the thumbnails</color>
<color=#75715e>         * which were created.</color>
<color=#75715e>         * @since 0.4.7</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#a6e22e>asFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>destinationDir</color><color=#f8f8f2>,</color> <color=#f8f8f2>Rename</color> <color=#f8f8f2>rename</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>checkReadiness</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rename</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"Rename is null."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>destinationDir</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>destinationDir</color><color=#f8f8f2>.</color><color=#a6e22e>isDirectory</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Given destination is not a directory."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#f8f8f2>destinationFiles</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color><color=#f8f8f2>();</color>

            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>source</color> <color=#f8f8f2>:</color> <color=#f8f8f2>sources</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>(</color><color=#f8f8f2>source</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>FileImageSource</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Cannot create thumbnails to files if original images are not from files."</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>ThumbnailParameter</color> <color=#f8f8f2>param</color> <color=#f92672>=</color> <color=#f8f8f2>makeParam</color><color=#f8f8f2>();</color>

                <color=#f8f8f2>File</color> <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#f8f8f2>((</color><color=#f8f8f2>FileImageSource</color><color=#f8f8f2>)</color> <color=#f8f8f2>source</color><color=#f8f8f2>).</color><color=#a6e22e>getSource</color><color=#f8f8f2>();</color>

                <color=#f8f8f2>File</color> <color=#f8f8f2>actualDestDir</color> <color=#f92672>=</color> <color=#f8f8f2>destinationDir</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>f</color><color=#f8f8f2>.</color><color=#a6e22e>getParentFile</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#f8f8f2>destinationDir</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>File</color> <color=#f8f8f2>destinationFile</color> <color=#f92672>=</color>
                        <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>actualDestDir</color><color=#f8f8f2>,</color> <color=#f8f8f2>rename</color><color=#f8f8f2>.</color><color=#a6e22e>apply</color><color=#f8f8f2>(</color><color=#f8f8f2>f</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>param</color><color=#f8f8f2>));</color>

                <color=#f8f8f2>FileImageSink</color> <color=#f8f8f2>destination</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileImageSink</color><color=#f8f8f2>(</color><color=#f8f8f2>destinationFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>allowOverwrite</color><color=#f8f8f2>);</color>

                <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>Thumbnailator</color><color=#f8f8f2>.</color><color=#a6e22e>createThumbnail</color><color=#f8f8f2>(</color>
                            <color=#66d9ef>new</color> <color=#f8f8f2>SourceSinkThumbnailTask</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f8f8f2>,</color> <color=#f8f8f2>File</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>,</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#f8f8f2>destination</color><color=#f8f8f2>)</color>
                    <color=#f8f8f2>);</color>

                    <color=#f8f8f2>destinationFiles</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>destination</color><color=#f8f8f2>.</color><color=#a6e22e>getSink</color><color=#f8f8f2>());</color>
                <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IllegalArgumentException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#75715e>/*</color>
<color=#75715e>                     * Handle the IllegalArgumentException which is thrown when</color>
<color=#75715e>                     * the destination file already exists by not adding the</color>
<color=#75715e>                     * current file to the destinationFiles list.</color>
<color=#75715e>                     */</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>return</color> <color=#f8f8f2>destinationFiles</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Creates thumbnails and stores them to files using the</color>
<color=#75715e>         * {@link Rename} function to determine the filenames.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * When the destination file exists, and overwriting files has been</color>
<color=#75715e>         * disabled by calling the {@link #allowOverwrite(boolean)} method</color>
<color=#75715e>         * with {@code false}, then the thumbnail with the destination file</color>
<color=#75715e>         * already existing will not be written.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * To call this method, the thumbnails must have been creates from</color>
<color=#75715e>         * files by calling the {@link Thumbnails#of(File...)} method.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param rename The rename function which is used to</color>
<color=#75715e>         *               determine the filenames of the thumbnail</color>
<color=#75715e>         *               files to write.</color>
<color=#75715e>         * @throws IOException           If a problem occurs while reading the</color>
<color=#75715e>         *                               original images or writing the thumbnails</color>
<color=#75715e>         *                               to files.</color>
<color=#75715e>         *                               thumbnails to files.</color>
<color=#75715e>         * @throws IllegalStateException If the original images are not</color>
<color=#75715e>         *                               from files.</color>
<color=#75715e>         * @since 0.3.7</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>toFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>Rename</color> <color=#f8f8f2>rename</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>toFiles</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#f8f8f2>rename</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Creates thumbnails and stores them to files in the directory</color>
<color=#75715e>         * specified by the given {@link File} object, and using the</color>
<color=#75715e>         * {@link Rename} function to determine the filenames.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * When the destination file exists, and overwriting files has been</color>
<color=#75715e>         * disabled by calling the {@link #allowOverwrite(boolean)} method</color>
<color=#75715e>         * with {@code false}, then the thumbnail with the destination file</color>
<color=#75715e>         * already existing will not be written.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * Extra caution should be taken when using this method, as there are</color>
<color=#75715e>         * no protections in place to prevent file name collisions resulting</color>
<color=#75715e>         * from creating thumbnails from files in separate directories but</color>
<color=#75715e>         * having the same name. In such a case, the behavior will be depend</color>
<color=#75715e>         * on the behavior of the {@link #allowOverwrite(boolean)} as</color>
<color=#75715e>         * described in the previous paragraph.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * To call this method, the thumbnails must have been creates from</color>
<color=#75715e>         * files by calling the {@link Thumbnails#of(File...)} method.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param destinationDir The destination directory to which the</color>
<color=#75715e>         *                       thumbnails should be written to.</color>
<color=#75715e>         * @param rename         The rename function which is used to</color>
<color=#75715e>         *                       determine the filenames of the thumbnail</color>
<color=#75715e>         *                       files to write.</color>
<color=#75715e>         * @throws IOException              If a problem occurs while reading the</color>
<color=#75715e>         *                                  original images or writing the thumbnails</color>
<color=#75715e>         *                                  to files.</color>
<color=#75715e>         *                                  thumbnails to files.</color>
<color=#75715e>         * @throws IllegalStateException    If the original images are not</color>
<color=#75715e>         *                                  from files.</color>
<color=#75715e>         * @throws IllegalArgumentException If the destination directory</color>
<color=#75715e>         *                                  is not a directory.</color>
<color=#75715e>         * @since 0.4.7</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>toFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>destinationDir</color><color=#f8f8f2>,</color> <color=#f8f8f2>Rename</color> <color=#f8f8f2>rename</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>asFiles</color><color=#f8f8f2>(</color><color=#f8f8f2>destinationDir</color><color=#f8f8f2>,</color> <color=#f8f8f2>rename</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Create a thumbnail and writes it to a {@link File}.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * When the destination file exists, and overwriting files has been</color>
<color=#75715e>         * disabled by calling the {@link #allowOverwrite(boolean)} method</color>
<color=#75715e>         * with {@code false}, then an {@link IllegalArgumentException} will</color>
<color=#75715e>         * be thrown.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * To call this method, the thumbnail must have been created from a</color>
<color=#75715e>         * single source.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param outFile The file to which the thumbnail is to be</color>
<color=#75715e>         *                written to.</color>
<color=#75715e>         * @throws IOException              If a problem occurs while reading the</color>
<color=#75715e>         *                                  original images or writing the thumbnails</color>
<color=#75715e>         *                                  to files.</color>
<color=#75715e>         * @throws IllegalArgumentException If multiple original image files</color>
<color=#75715e>         *                                  are	specified, or if the</color>
<color=#75715e>         *                                  destination file exists, and</color>
<color=#75715e>         *                                  overwriting files is disabled.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>toFile</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>outFile</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>checkReadiness</color><color=#f8f8f2>();</color>

            <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>sources</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>source</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Cannot output multiple thumbnails to one file."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>FileImageSink</color> <color=#f8f8f2>destination</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileImageSink</color><color=#f8f8f2>(</color><color=#f8f8f2>outFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>allowOverwrite</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>Thumbnailator</color><color=#f8f8f2>.</color><color=#a6e22e>createThumbnail</color><color=#f8f8f2>(</color>
                    <color=#66d9ef>new</color> <color=#f8f8f2>SourceSinkThumbnailTask</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f8f8f2>,</color> <color=#f8f8f2>File</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>makeParam</color><color=#f8f8f2>(),</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#f8f8f2>destination</color><color=#f8f8f2>)</color>
            <color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Create a thumbnail and writes it to a {@link File}.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * When the destination file exists, and overwriting files has been</color>
<color=#75715e>         * disabled by calling the {@link #allowOverwrite(boolean)} method</color>
<color=#75715e>         * with {@code false}, then an {@link IllegalArgumentException} will</color>
<color=#75715e>         * be thrown.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * To call this method, the thumbnail must have been created from a</color>
<color=#75715e>         * single source.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param outFilepath The file to which the thumbnail is to be</color>
<color=#75715e>         *                    written to.</color>
<color=#75715e>         * @throws IOException              If a problem occurs while reading the</color>
<color=#75715e>         *                                  original images or writing the thumbnails</color>
<color=#75715e>         *                                  to files.</color>
<color=#75715e>         * @throws IllegalArgumentException If multiple original image files</color>
<color=#75715e>         *                                  are	specified, or if the</color>
<color=#75715e>         *                                  destination file exists, and</color>
<color=#75715e>         *                                  overwriting files is disabled.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>toFile</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>outFilepath</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>checkReadiness</color><color=#f8f8f2>();</color>

            <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>sources</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>source</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Cannot output multiple thumbnails to one file."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>FileImageSink</color> <color=#f8f8f2>destination</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>FileImageSink</color><color=#f8f8f2>(</color><color=#f8f8f2>outFilepath</color><color=#f8f8f2>,</color> <color=#f8f8f2>allowOverwrite</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>Thumbnailator</color><color=#f8f8f2>.</color><color=#a6e22e>createThumbnail</color><color=#f8f8f2>(</color>
                    <color=#66d9ef>new</color> <color=#f8f8f2>SourceSinkThumbnailTask</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f8f8f2>,</color> <color=#f8f8f2>File</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>makeParam</color><color=#f8f8f2>(),</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#f8f8f2>destination</color><color=#f8f8f2>)</color>
            <color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Create a thumbnail and writes it to a {@link OutputStream}.</color>
<color=#75715e>         * <p></color>
<color=#75715e>         * To call this method, the thumbnail must have been created from a</color>
<color=#75715e>         * single source.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param os The output stream to which the thumbnail</color>
<color=#75715e>         *           is to be written to.</color>
<color=#75715e>         * @throws IOException              If a problem occurs while reading the</color>
<color=#75715e>         *                                  original images or writing the thumbnails.</color>
<color=#75715e>         * @throws IllegalArgumentException If multiple original image files</color>
<color=#75715e>         *                                  are	specified.</color>
<color=#75715e>         * @throws IllegalStateException    If the output format has not</color>
<color=#75715e>         *                                  been specified through the</color>
<color=#75715e>         *                                  {@link #outputFormat(String)}</color>
<color=#75715e>         *                                  method.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>toOutputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>OutputStream</color> <color=#f8f8f2>os</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>checkReadiness</color><color=#f8f8f2>();</color>

            <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>>></color> <color=#f8f8f2>iter</color> <color=#f92672>=</color> <color=#f8f8f2>sources</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>source</color> <color=#f92672>=</color> <color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>iter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Cannot output multiple thumbnails to a single OutputStream."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>/*</color>
<color=#75715e>             * if the image is from a BufferedImage, then we require that the</color>
<color=#75715e>             * output format be set. (or else, we can't tell what format to</color>
<color=#75715e>             * output as!)</color>
<color=#75715e>             */</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>source</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>BufferedImageSource</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isOutputFormatNotSet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
                            <color=#e6db74>"Output format not specified."</color>
                    <color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>OutputStreamImageSink</color> <color=#f8f8f2>destination</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>OutputStreamImageSink</color><color=#f8f8f2>(</color><color=#f8f8f2>os</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>Thumbnailator</color><color=#f8f8f2>.</color><color=#a6e22e>createThumbnail</color><color=#f8f8f2>(</color>
                    <color=#66d9ef>new</color> <color=#f8f8f2>SourceSinkThumbnailTask</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f8f8f2>,</color> <color=#f8f8f2>OutputStream</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>makeParam</color><color=#f8f8f2>(),</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#f8f8f2>destination</color><color=#f8f8f2>)</color>
            <color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/**</color>
<color=#75715e>         * Creates the thumbnails and writes them to {@link OutputStream}s</color>
<color=#75715e>         * provided by the {@link Iterable}.</color>
<color=#75715e>         *</color>
<color=#75715e>         * @param iterable An {@link Iterable} which returns an</color>
<color=#75715e>         *                 {@link Iterator} which returns the</color>
<color=#75715e>         *                 output stream which should be assigned to</color>
<color=#75715e>         *                 each thumbnail.</color>
<color=#75715e>         * @throws IOException           If a problem occurs while reading the</color>
<color=#75715e>         *                               original images or writing the thumbnails.</color>
<color=#75715e>         * @throws IllegalStateException If the output format has not</color>
<color=#75715e>         *                               been specified through the</color>
<color=#75715e>         *                               {@link #outputFormat(String)}</color>
<color=#75715e>         *                               method.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>toOutputStreams</color><color=#f8f8f2>(</color><color=#f8f8f2>Iterable</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>OutputStream</color><color=#f92672>></color> <color=#f8f8f2>iterable</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>checkReadiness</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>iterable</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"OutputStream iterable is null."</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>Iterator</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>OutputStream</color><color=#f92672>></color> <color=#f8f8f2>osIter</color> <color=#f92672>=</color> <color=#f8f8f2>iterable</color><color=#f8f8f2>.</color><color=#a6e22e>iterator</color><color=#f8f8f2>();</color>

            <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>ImageSource</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f92672>></color> <color=#f8f8f2>source</color> <color=#f8f8f2>:</color> <color=#f8f8f2>sources</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#75715e>/*</color>
<color=#75715e>                 * if the image is from a BufferedImage, then we require that the</color>
<color=#75715e>                 * output format be set. (or else, we can't tell what format to</color>
<color=#75715e>                 * output as!)</color>
<color=#75715e>                 */</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>source</color> <color=#66d9ef>instanceof</color> <color=#f8f8f2>BufferedImageSource</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>isOutputFormatNotSet</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color>
                                <color=#e6db74>"Output format not specified."</color>
                        <color=#f8f8f2>);</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>osIter</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                    <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IndexOutOfBoundsException</color><color=#f8f8f2>(</color>
                            <color=#e6db74>"Not enough file names provided by iterator."</color>
                    <color=#f8f8f2>);</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>OutputStreamImageSink</color> <color=#f8f8f2>destination</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>OutputStreamImageSink</color><color=#f8f8f2>(</color><color=#f8f8f2>osIter</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>());</color>

                <color=#f8f8f2>Thumbnailator</color><color=#f8f8f2>.</color><color=#a6e22e>createThumbnail</color><color=#f8f8f2>(</color>
                        <color=#66d9ef>new</color> <color=#f8f8f2>SourceSinkThumbnailTask</color><color=#f92672><</color><color=#f8f8f2>T</color><color=#f8f8f2>,</color> <color=#f8f8f2>OutputStream</color><color=#f92672>></color><color=#f8f8f2>(</color><color=#f8f8f2>makeParam</color><color=#f8f8f2>(),</color> <color=#f8f8f2>source</color><color=#f8f8f2>,</color> <color=#f8f8f2>destination</color><color=#f8f8f2>)</color>
                <color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>