<color=#f92672>package</color> <color=#f8f8f2>net.coobird.thumbnailator.resizers</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Collections</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.HashMap</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Map</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A class which performs a resize operation on a source image and outputs the</color>
<color=#75715e> * result to a destination image.</color>
<color=#75715e> *</color>
<color=#75715e> * @author coobird</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>AbstractResizer</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Resizer</color> <color=#f8f8f2>{</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Rendering hints to use when resizing an image.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>Key</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>></color> <color=#f8f8f2>RENDERING_HINTS</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Field used to hold the rendering hints in an unmodifiable form.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>Key</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>></color> <color=#f8f8f2>UNMODIFIABLE_RENDERING_HINTS</color><color=#f8f8f2>;</color>

    <color=#66d9ef>protected</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>Key</color> <color=#f8f8f2>KEY_INTERPOLATION</color> <color=#f92672>=</color>
            <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>KEY_INTERPOLATION</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Initializes the {@link AbstractResizer}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param interpolationValue The rendering hint value to use for the</color>
<color=#75715e>     *                           interpolation hint.</color>
<color=#75715e>     * @param hints              Other rendering hints to add.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#a6e22e>AbstractResizer</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>Object</color> <color=#f8f8f2>interpolationValue</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>Key</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>></color> <color=#f8f8f2>hints</color>
    <color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>RENDERING_HINTS</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>Key</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>></color><color=#f8f8f2>();</color>
        <color=#f8f8f2>RENDERING_HINTS</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>KEY_INTERPOLATION</color><color=#f8f8f2>,</color> <color=#f8f8f2>interpolationValue</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color>
                <color=#f8f8f2>hints</color><color=#f8f8f2>.</color><color=#a6e22e>containsKey</color><color=#f8f8f2>(</color><color=#f8f8f2>KEY_INTERPOLATION</color><color=#f8f8f2>)</color>
                        <color=#f92672>&&</color> <color=#f92672>!</color><color=#f8f8f2>interpolationValue</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>hints</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>KEY_INTERPOLATION</color><color=#f8f8f2>))</color>
        <color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Cannot change the "</color> <color=#f92672>+</color>
                    <color=#e6db74>"RenderingHints.KEY_INTERPOLATION value."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>RENDERING_HINTS</color><color=#f8f8f2>.</color><color=#a6e22e>putAll</color><color=#f8f8f2>(</color><color=#f8f8f2>hints</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>UNMODIFIABLE_RENDERING_HINTS</color> <color=#f92672>=</color> <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>unmodifiableMap</color><color=#f8f8f2>(</color><color=#f8f8f2>RENDERING_HINTS</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * Performs a resize operation from a source image and outputs to a</color>
<color=#75715e>     * destination image.</color>
<color=#75715e>     * </p></color>
<color=#75715e>     * <p></color>
<color=#75715e>     * If the source or destination image is {@code null}, then a</color>
<color=#75715e>     * {@link NullPointerException} will be thrown.</color>
<color=#75715e>     * </p></color>
<color=#75715e>     *</color>
<color=#75715e>     * @param srcImage  The source image.</color>
<color=#75715e>     * @param destImage The destination image.</color>
<color=#75715e>     * @throws NullPointerException When the source and/or the destination</color>
<color=#75715e>     *                              image is {@code null}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>resize</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>srcImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>destImage</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>performChecks</color><color=#f8f8f2>(</color><color=#f8f8f2>srcImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>destImage</color><color=#f8f8f2>);</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>destImage</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>destImage</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#f8f8f2>Graphics2D</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>destImage</color><color=#f8f8f2>.</color><color=#a6e22e>createGraphics</color><color=#f8f8f2>();</color>

        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>setRenderingHints</color><color=#f8f8f2>(</color><color=#f8f8f2>RENDERING_HINTS</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>srcImage</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Performs checks on the source and destination image to see if they are</color>
<color=#75715e>     * images which can be processed.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param srcImage  The source image.</color>
<color=#75715e>     * @param destImage The destination image.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>void</color> <color=#a6e22e>performChecks</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>srcImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>destImage</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>srcImage</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>destImage</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color>
                    <color=#e6db74>"The source and/or destination image is null."</color>
            <color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the rendering hints that the resizer uses.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * The keys and values used for the rendering hints are those defined in</color>
<color=#75715e>     * the {@link RenderingHints} class.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return Rendering hints used when resizing the image.</color>
<color=#75715e>     * @see RenderingHints</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>Key</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>></color> <color=#a6e22e>getRenderingHints</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>UNMODIFIABLE_RENDERING_HINTS</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>