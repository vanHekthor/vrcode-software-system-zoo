<color=#f92672>package</color> <color=#f8f8f2>net.coobird.thumbnailator.resizers</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Collections</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Map</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A {@link Resizer} which performs resizing operations by using</color>
<color=#75715e> * progressive bilinear scaling.</color>
<color=#75715e> * <p></color>
<color=#75715e> * The resizing technique used in this class is based on the technique</color>
<color=#75715e> * discussed in <em>Chapter 4: Images</em> of</color>
<color=#75715e> * <a href="http://filthyrichclients.org">Filthy Rich Clients</a></color>
<color=#75715e> * by Chet Haase and Romain Guy.</color>
<color=#75715e> * <p></color>
<color=#75715e> * The actual implemenation of the technique is independent of the code which</color>
<color=#75715e> * is provided in the book.</color>
<color=#75715e> *</color>
<color=#75715e> * @author coobird</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ProgressiveBilinearResizer</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractResizer</color> <color=#f8f8f2>{</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Instantiates a {@link ProgressiveBilinearResizer} with default</color>
<color=#75715e>     * rendering hints.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>ProgressiveBilinearResizer</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#f92672><</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>Key</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>></color><color=#f8f8f2>emptyMap</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Instantiates a {@link ProgressiveBilinearResizer} with the specified</color>
<color=#75715e>     * rendering hints.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param hints Additional rendering hints to apply.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>ProgressiveBilinearResizer</color><color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>Key</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>></color> <color=#f8f8f2>hints</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>VALUE_INTERPOLATION_BILINEAR</color><color=#f8f8f2>,</color> <color=#f8f8f2>hints</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Resizes an image using the progressive bilinear scaling technique.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * If the source and/or destination image is {@code null}, then a</color>
<color=#75715e>     * {@link NullPointerException} will be thrown.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param srcImage  The source image.</color>
<color=#75715e>     * @param destImage The destination image.</color>
<color=#75715e>     * @throws NullPointerException When the source and/or the destination</color>
<color=#75715e>     *                              image is {@code null}.</color>
<color=#75715e>     */</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>resize</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>srcImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>destImage</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>NullPointerException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>performChecks</color><color=#f8f8f2>(</color><color=#f8f8f2>srcImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>destImage</color><color=#f8f8f2>);</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>currentWidth</color> <color=#f92672>=</color> <color=#f8f8f2>srcImage</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>currentHeight</color> <color=#f92672>=</color> <color=#f8f8f2>srcImage</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>targetWidth</color> <color=#f92672>=</color> <color=#f8f8f2>destImage</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>targetHeight</color> <color=#f92672>=</color> <color=#f8f8f2>destImage</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#75715e>// If multi-step downscaling is not required, perform one-step.</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>targetWidth</color> <color=#f92672>*</color> <color=#ae81ff>2</color> <color=#f92672>>=</color> <color=#f8f8f2>currentWidth</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>targetHeight</color> <color=#f92672>*</color> <color=#ae81ff>2</color> <color=#f92672>>=</color> <color=#f8f8f2>currentHeight</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>Graphics2D</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>destImage</color><color=#f8f8f2>.</color><color=#a6e22e>createGraphics</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>srcImage</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>targetWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>targetHeight</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>
            <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Temporary image used for in-place resizing of image.</color>
        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>tempImage</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>currentWidth</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>currentHeight</color><color=#f8f8f2>,</color>
                <color=#f8f8f2>destImage</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>()</color>
        <color=#f8f8f2>);</color>

        <color=#f8f8f2>Graphics2D</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>tempImage</color><color=#f8f8f2>.</color><color=#a6e22e>createGraphics</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>setRenderingHints</color><color=#f8f8f2>(</color><color=#f8f8f2>RENDERING_HINTS</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>setComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>AlphaComposite</color><color=#f8f8f2>.</color><color=#a6e22e>Src</color><color=#f8f8f2>);</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Determine the size of the first resize step should be.</color>
<color=#75715e>         * 1) Beginning from the target size</color>
<color=#75715e>         * 2) Increase each dimension by 2</color>
<color=#75715e>         * 3) Until reaching the original size</color>
<color=#75715e>         */</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>startWidth</color> <color=#f92672>=</color> <color=#f8f8f2>targetWidth</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>startHeight</color> <color=#f92672>=</color> <color=#f8f8f2>targetHeight</color><color=#f8f8f2>;</color>

        <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>startWidth</color> <color=#f92672><</color> <color=#f8f8f2>currentWidth</color> <color=#f92672>&&</color> <color=#f8f8f2>startHeight</color> <color=#f92672><</color> <color=#f8f8f2>currentHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>startWidth</color> <color=#f92672>*=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>startHeight</color> <color=#f92672>*=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>currentWidth</color> <color=#f92672>=</color> <color=#f8f8f2>startWidth</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>currentHeight</color> <color=#f92672>=</color> <color=#f8f8f2>startHeight</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

        <color=#75715e>// Perform first resize step.</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>srcImage</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentHeight</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

        <color=#75715e>// Perform an in-place progressive bilinear resize.</color>
        <color=#66d9ef>while</color> <color=#f8f8f2>((</color><color=#f8f8f2>currentWidth</color> <color=#f92672>>=</color> <color=#f8f8f2>targetWidth</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentHeight</color> <color=#f92672>>=</color> <color=#f8f8f2>targetHeight</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>currentWidth</color> <color=#f92672>/=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>currentHeight</color> <color=#f92672>/=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentWidth</color> <color=#f92672><</color> <color=#f8f8f2>targetWidth</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>currentWidth</color> <color=#f92672>=</color> <color=#f8f8f2>targetWidth</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentHeight</color> <color=#f92672><</color> <color=#f8f8f2>targetHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>currentHeight</color> <color=#f92672>=</color> <color=#f8f8f2>targetHeight</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color>
                    <color=#f8f8f2>tempImage</color><color=#f8f8f2>,</color>
                    <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentHeight</color><color=#f8f8f2>,</color>
                    <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentWidth</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentHeight</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color>
                    <color=#66d9ef>null</color>
            <color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>

        <color=#75715e>// Draw the resized image onto the destination image.</color>
        <color=#f8f8f2>Graphics2D</color> <color=#f8f8f2>destg</color> <color=#f92672>=</color> <color=#f8f8f2>destImage</color><color=#f8f8f2>.</color><color=#a6e22e>createGraphics</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>destg</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>tempImage</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>targetWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>targetHeight</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentHeight</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>destg</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>