<color=#f92672>package</color> <color=#f8f8f2>net.coobird.thumbnailator.tasks.io</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.ThumbnailParameter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.tasks.UnsupportedFormatException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.util.BufferedImages</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.util.ThumbnailatorUtils</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.IIOImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.ImageIO</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.ImageWriteParam</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.ImageWriter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.stream.ImageOutputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.OutputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Iterator</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.List</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * An {@link ImageSink} which specifies an {@link OutputStream} to which the</color>
<color=#75715e> * thumbnail image should be written to.</color>
<color=#75715e> *</color>
<color=#75715e> * @author coobird</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>OutputStreamImageSink</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractImageSink</color><color=#f92672><</color><color=#f8f8f2>OutputStream</color><color=#f92672>></color> <color=#f8f8f2>{</color>
    <color=#75715e>/**</color>
<color=#75715e>     * The {@link OutputStream} to which the thumbnail image is to be</color>
<color=#75715e>     * written to.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>OutputStream</color> <color=#f8f8f2>os</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Instantiates an {@link OutputStreamImageSink} with the</color>
<color=#75715e>     * {@link OutputStream} to which the thumbnail should be written to.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param os The {@link OutputStream} to write the thumbnail to.</color>
<color=#75715e>     * @throws NullPointerException If the {@link OutputStream} is</color>
<color=#75715e>     *                              {@code null}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>OutputStreamImageSink</color><color=#f8f8f2>(</color><color=#f8f8f2>OutputStream</color> <color=#f8f8f2>os</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>os</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"OutputStream cannot be null."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>os</color> <color=#f92672>=</color> <color=#f8f8f2>os</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes the resulting image to the {@link OutputStream}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param img The image to write.</color>
<color=#75715e>     * @throws UnsupportedFormatException When an unsupported format has been</color>
<color=#75715e>     *                                    specified by the</color>
<color=#75715e>     *                                    {@link #setOutputFormatName(String)}</color>
<color=#75715e>     *                                    method.</color>
<color=#75715e>     * @throws IOException                When a problem occurs while writing</color>
<color=#75715e>     *                                    the image.</color>
<color=#75715e>     * @throws NullPointerException       If the image is {@code null}.</color>
<color=#75715e>     * @throws IllegalStateException      If the output format has not been set</color>
<color=#75715e>     *                                    by calling the</color>
<color=#75715e>     *                                    {@link #setOutputFormatName(String)}</color>
<color=#75715e>     *                                    method.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>img</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>img</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>outputFormat</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Output format has not been set."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>String</color> <color=#f8f8f2>formatName</color> <color=#f92672>=</color> <color=#f8f8f2>outputFormat</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>ImageWriter</color><color=#f92672>></color> <color=#f8f8f2>writers</color> <color=#f92672>=</color>
                <color=#f8f8f2>ImageIO</color><color=#f8f8f2>.</color><color=#a6e22e>getImageWritersByFormatName</color><color=#f8f8f2>(</color><color=#f8f8f2>formatName</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>writers</color><color=#f8f8f2>.</color><color=#a6e22e>hasNext</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedFormatException</color><color=#f8f8f2>(</color>
                    <color=#f8f8f2>formatName</color><color=#f8f8f2>,</color>
                    <color=#e6db74>"No suitable ImageWriter found for "</color> <color=#f92672>+</color> <color=#f8f8f2>formatName</color> <color=#f92672>+</color> <color=#e6db74>"."</color>
            <color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>ImageWriter</color> <color=#f8f8f2>writer</color> <color=#f92672>=</color> <color=#f8f8f2>writers</color><color=#f8f8f2>.</color><color=#a6e22e>next</color><color=#f8f8f2>();</color>

        <color=#f8f8f2>ImageWriteParam</color> <color=#f8f8f2>writeParam</color> <color=#f92672>=</color> <color=#f8f8f2>writer</color><color=#f8f8f2>.</color><color=#a6e22e>getDefaultWriteParam</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>writeParam</color><color=#f8f8f2>.</color><color=#a6e22e>canWriteCompressed</color><color=#f8f8f2>()</color> <color=#f92672>&&</color> <color=#f8f8f2>param</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>writeParam</color><color=#f8f8f2>.</color><color=#a6e22e>setCompressionMode</color><color=#f8f8f2>(</color><color=#f8f8f2>ImageWriteParam</color><color=#f8f8f2>.</color><color=#a6e22e>MODE_EXPLICIT</color><color=#f8f8f2>);</color>

            <color=#75715e>/*</color>
<color=#75715e>             * Sets the compression format type, if specified.</color>
<color=#75715e>             *</color>
<color=#75715e>             * Note:</color>
<color=#75715e>             * The value to denote that the codec's default compression type</color>
<color=#75715e>             * should be used is null.</color>
<color=#75715e>             */</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getOutputFormatType</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>ThumbnailParameter</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT_FORMAT_TYPE</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>writeParam</color><color=#f8f8f2>.</color><color=#a6e22e>setCompressionType</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getOutputFormatType</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>List</color><color=#f92672><</color><color=#f8f8f2>String</color><color=#f92672>></color> <color=#f8f8f2>supportedFormats</color> <color=#f92672>=</color>
                        <color=#f8f8f2>ThumbnailatorUtils</color><color=#f8f8f2>.</color><color=#a6e22e>getSupportedOutputFormatTypes</color><color=#f8f8f2>(</color><color=#f8f8f2>formatName</color><color=#f8f8f2>);</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>supportedFormats</color><color=#f8f8f2>.</color><color=#a6e22e>isEmpty</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>writeParam</color><color=#f8f8f2>.</color><color=#a6e22e>setCompressionType</color><color=#f8f8f2>(</color><color=#f8f8f2>supportedFormats</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>/*</color>
<color=#75715e>             * Sets the compression quality, if specified.</color>
<color=#75715e>             *</color>
<color=#75715e>             * Note:</color>
<color=#75715e>             * The value to denote that the codec's default compression quality</color>
<color=#75715e>             * should be used is Float.NaN.</color>
<color=#75715e>             */</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>Float</color><color=#f8f8f2>.</color><color=#a6e22e>isNaN</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getOutputQuality</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>writeParam</color><color=#f8f8f2>.</color><color=#a6e22e>setCompressionQuality</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getOutputQuality</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>ImageOutputStream</color> <color=#f8f8f2>ios</color> <color=#f92672>=</color> <color=#f8f8f2>ImageIO</color><color=#f8f8f2>.</color><color=#a6e22e>createImageOutputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>os</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ios</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"Could not open OutputStream."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Note:</color>
<color=#75715e>         * The following code is a workaround for the JPEG writer which ships</color>
<color=#75715e>         * with the JDK.</color>
<color=#75715e>         *</color>
<color=#75715e>         * At issue is, that the JPEG writer appears to write the alpha</color>
<color=#75715e>         * channel when it should not. To circumvent this, images which are</color>
<color=#75715e>         * to be saved as a JPEG will be copied to another BufferedImage without</color>
<color=#75715e>         * an alpha channel before it is saved.</color>
<color=#75715e>         *</color>
<color=#75715e>         * Also, the BMP writer appears not to support ARGB, so an RGB image</color>
<color=#75715e>         * will be produced before saving.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color>
                <color=#f8f8f2>formatName</color><color=#f8f8f2>.</color><color=#a6e22e>equalsIgnoreCase</color><color=#f8f8f2>(</color><color=#e6db74>"jpg"</color><color=#f8f8f2>)</color>
                        <color=#f92672>||</color> <color=#f8f8f2>formatName</color><color=#f8f8f2>.</color><color=#a6e22e>equalsIgnoreCase</color><color=#f8f8f2>(</color><color=#e6db74>"jpeg"</color><color=#f8f8f2>)</color>
                        <color=#f92672>||</color> <color=#f8f8f2>formatName</color><color=#f8f8f2>.</color><color=#a6e22e>equalsIgnoreCase</color><color=#f8f8f2>(</color><color=#e6db74>"bmp"</color><color=#f8f8f2>)</color>
        <color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>img</color> <color=#f92672>=</color> <color=#f8f8f2>BufferedImages</color><color=#f8f8f2>.</color><color=#a6e22e>copy</color><color=#f8f8f2>(</color><color=#f8f8f2>img</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_RGB</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>writer</color><color=#f8f8f2>.</color><color=#a6e22e>setOutput</color><color=#f8f8f2>(</color><color=#f8f8f2>ios</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>writer</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>IIOImage</color><color=#f8f8f2>(</color><color=#f8f8f2>img</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>),</color> <color=#f8f8f2>writeParam</color><color=#f8f8f2>);</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Dispose the writer to free resources.</color>
<color=#75715e>         *</color>
<color=#75715e>         * This seems to be the main culprit of `OutOfMemoryError`s which</color>
<color=#75715e>         * started to frequently appear with Java 7 Update 21.</color>
<color=#75715e>         *</color>
<color=#75715e>         * Issue:</color>
<color=#75715e>         * http://code.google.com/p/thumbnailator/issues/detail?id=42</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>writer</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>

        <color=#f8f8f2>ios</color><color=#f8f8f2>.</color><color=#a6e22e>close</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>OutputStream</color> <color=#a6e22e>getSink</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>os</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>