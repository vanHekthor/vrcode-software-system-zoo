<color=#f92672>package</color> <color=#f8f8f2>net.coobird.thumbnailator.resizers</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>


<color=#75715e>/**</color>
<color=#75715e> * This class provides factory methods which provides suitable {@link Resizer}s</color>
<color=#75715e> * for a given situation.</color>
<color=#75715e> *</color>
<color=#75715e> * <dl></color>
<color=#75715e> * <dt>{@code Resizer}s returned by this {@code ResizerFactory}:</dt></color>
<color=#75715e> * <dd></color>
<color=#75715e> * The {@link Resizer}s returned by this {@link ResizerFactory} depends upon</color>
<color=#75715e> * the size of the source and destination images. The conditions and the</color>
<color=#75715e> * {@link Resizer}s returned are as follows:</color>
<color=#75715e> *</color>
<color=#75715e> * <ul></color>
<color=#75715e> * <li>Default via {@link #getResizer()}</color>
<color=#75715e> * 	<ul><li>{@link ProgressiveBilinearResizer}</li></ul></color>
<color=#75715e> * </li></color>
<color=#75715e> * <li>Destination image has the same dimensions as the source image via</color>
<color=#75715e> * {@link #getResizer(Dimension, Dimension)}</color>
<color=#75715e> * 	<ul><li>{@link NullResizer}</li></ul></color>
<color=#75715e> * </li></color>
<color=#75715e> * <li>Both the width and height of the destination image is larger than the</color>
<color=#75715e> * source image via {@link #getResizer(Dimension, Dimension)}</color>
<color=#75715e> * 	<ul><li>{@link BicubicResizer}</li></ul></color>
<color=#75715e> * </li></color>
<color=#75715e> * <li>Both the width and height of the destination image is smaller in the</color>
<color=#75715e> * source image by a factor larger than 2,</color>
<color=#75715e> * via {@link #getResizer(Dimension, Dimension)}</color>
<color=#75715e> * 	<ul><li>{@link ProgressiveBilinearResizer}</li></ul></color>
<color=#75715e> * </li></color>
<color=#75715e> * <li>Both the width and height of the destination image is smaller in the</color>
<color=#75715e> * source image not by a factor larger than 2,</color>
<color=#75715e> * via {@link #getResizer(Dimension, Dimension)}</color>
<color=#75715e> * 	<ul><li>{@link BilinearResizer}</li></ul></color>
<color=#75715e> * </li></color>
<color=#75715e> * <li>Other conditions not described via</color>
<color=#75715e> * {@link #getResizer(Dimension, Dimension)}</color>
<color=#75715e> * 	<ul><li>{@link ProgressiveBilinearResizer}</li></ul></color>
<color=#75715e> * </li></color>
<color=#75715e> * </ul></color>
<color=#75715e> * </dd></color>
<color=#75715e> * </dl></color>
<color=#75715e> *</color>
<color=#75715e> * <DL></color>
<color=#75715e> * <DT><B>Usage:</B></DT></color>
<color=#75715e> * <DD></color>
<color=#75715e> * The following example code demonstrates how to use {@link DefaultResizerFactory}</color>
<color=#75715e> * in order to obtain the optimal {@link Resizer}, and using that in order to</color>
<color=#75715e> * perform the resizing operation.</color>
<color=#75715e> * <p></color>
<color=#75715e> * <pre></color>
<color=#75715e> * BufferedImage sourceImage = new BufferedImageBuilder(400, 400).build();</color>
<color=#75715e> * BufferedImage destImage = new BufferedImageBuilder(200, 200).build();</color>
<color=#75715e> *</color>
<color=#75715e> * Dimension sourceSize = new Dimension(sourceImage.getWidth(), sourceImage.getHeight());</color>
<color=#75715e> * Dimension destSize = new Dimension(destImage.getWidth(), destImage.getHeight());</color>
<color=#75715e> *</color>
<color=#75715e> * // Obtain the optimal Resizer for this resizing operation.</color>
<color=#75715e> * Resizer resizer = DefaultResizerFactory.getInstance().getResizer(sourceSize, destSize);</color>
<color=#75715e> *</color>
<color=#75715e> * // Perform the resizing using the Resizer obtained from the ResizerFactory.</color>
<color=#75715e> * resizer.resize(sourceImage, destImage);</color>
<color=#75715e> * </pre></color>
<color=#75715e> * </DD></color>
<color=#75715e> * </DL></color>
<color=#75715e> * When a specific {@link Resizer} is required, the {@link Resizers}</color>
<color=#75715e> * {@code enum} is another way to obtain {@link Resizer}s.</color>
<color=#75715e> * <p></color>
<color=#75715e> *</color>
<color=#75715e> * @author coobird</color>
<color=#75715e> * @since 0.4.0</color>
<color=#75715e> * @see Resizers</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>DefaultResizerFactory</color> <color=#66d9ef>implements</color> <color=#f8f8f2>ResizerFactory</color> <color=#f8f8f2>{</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>DefaultResizerFactory</color> <color=#f8f8f2>INSTANCE</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>DefaultResizerFactory</color><color=#f8f8f2>();</color>

    <color=#75715e>/**</color>
<color=#75715e>     * This class is not intended to be instantiated via the constructor.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#a6e22e>DefaultResizerFactory</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns an instance of this class.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return An instance of this class.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>ResizerFactory</color> <color=#a6e22e>getInstance</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>INSTANCE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Resizer</color> <color=#a6e22e>getResizer</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Resizers</color><color=#f8f8f2>.</color><color=#a6e22e>PROGRESSIVE</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>Resizer</color> <color=#a6e22e>getResizer</color><color=#f8f8f2>(</color><color=#f8f8f2>Dimension</color> <color=#f8f8f2>originalSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>Dimension</color> <color=#f8f8f2>thumbnailSize</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>origWidth</color> <color=#f92672>=</color> <color=#f8f8f2>originalSize</color><color=#f8f8f2>.</color><color=#a6e22e>width</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>origHeight</color> <color=#f92672>=</color> <color=#f8f8f2>originalSize</color><color=#f8f8f2>.</color><color=#a6e22e>height</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>thumbWidth</color> <color=#f92672>=</color> <color=#f8f8f2>thumbnailSize</color><color=#f8f8f2>.</color><color=#a6e22e>width</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>thumbHeight</color> <color=#f92672>=</color> <color=#f8f8f2>thumbnailSize</color><color=#f8f8f2>.</color><color=#a6e22e>height</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>thumbWidth</color> <color=#f92672><</color> <color=#f8f8f2>origWidth</color> <color=#f92672>&&</color> <color=#f8f8f2>thumbHeight</color> <color=#f92672><</color> <color=#f8f8f2>origHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>thumbWidth</color> <color=#f92672><</color> <color=#f8f8f2>(</color><color=#f8f8f2>origWidth</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>thumbHeight</color> <color=#f92672><</color> <color=#f8f8f2>(</color><color=#f8f8f2>origHeight</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>Resizers</color><color=#f8f8f2>.</color><color=#a6e22e>PROGRESSIVE</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>Resizers</color><color=#f8f8f2>.</color><color=#a6e22e>BILINEAR</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>thumbWidth</color> <color=#f92672>></color> <color=#f8f8f2>origWidth</color> <color=#f92672>&&</color> <color=#f8f8f2>thumbHeight</color> <color=#f92672>></color> <color=#f8f8f2>origHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>Resizers</color><color=#f8f8f2>.</color><color=#a6e22e>BICUBIC</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>thumbWidth</color> <color=#f92672>==</color> <color=#f8f8f2>origWidth</color> <color=#f92672>&&</color> <color=#f8f8f2>thumbHeight</color> <color=#f92672>==</color> <color=#f8f8f2>origHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>Resizers</color><color=#f8f8f2>.</color><color=#a6e22e>NULL</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>getResizer</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>