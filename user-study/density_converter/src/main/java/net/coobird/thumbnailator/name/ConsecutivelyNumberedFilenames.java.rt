<color=#f92672>package</color> <color=#f8f8f2>net.coobird.thumbnailator.name</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.File</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Formatter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Iterator</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * This class is used to produce file names based on a given format string</color>
<color=#75715e> * and an internal counter which increments every time a new file name</color>
<color=#75715e> * is produced.</color>
<color=#75715e> *</color>
<color=#75715e> * @author coobird</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ConsecutivelyNumberedFilenames</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Iterable</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#f8f8f2>{</color>
    <color=#75715e>/**</color>
<color=#75715e>     * The iterator to return upon the {@link #iterator()} method being called.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#f8f8f2>iter</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Instantiates an {@code ConsecutivelyNumberedFilenames} object which</color>
<color=#75715e>     * returns {@link File}s with file names which are consecutively numbered</color>
<color=#75715e>     * beginning from {@code 0}.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * <h3>File name sequence</h3></color>
<color=#75715e>     * <ol></color>
<color=#75715e>     * <li><code>0</code></li></color>
<color=#75715e>     * <li><code>1</code></li></color>
<color=#75715e>     * <li><code>2</code></li></color>
<color=#75715e>     * <li><code>3</code></li></color>
<color=#75715e>     * </ol></color>
<color=#75715e>     * and so on.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>ConsecutivelyNumberedFilenames</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>iter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ConsecutivelyNumberedFilenamesIterator</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#e6db74>""</color><color=#f8f8f2>).</color><color=#a6e22e>getParentFile</color><color=#f8f8f2>(),</color> <color=#e6db74>"%d"</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Instantiates an {@code ConsecutivelyNumberedFilenames} object which</color>
<color=#75715e>     * returns {@link File}s with file names which are consecutively numbered</color>
<color=#75715e>     * beginning from the given value.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * <h3>File name sequence</h3></color>
<color=#75715e>     * For a case where the given value is {@code 5}:</color>
<color=#75715e>     * <ol></color>
<color=#75715e>     * <li><code>5</code></li></color>
<color=#75715e>     * <li><code>6</code></li></color>
<color=#75715e>     * <li><code>7</code></li></color>
<color=#75715e>     * <li><code>8</code></li></color>
<color=#75715e>     * </ol></color>
<color=#75715e>     * and so on.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param start The value from which to start counting.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>ConsecutivelyNumberedFilenames</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>start</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>iter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ConsecutivelyNumberedFilenamesIterator</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#e6db74>""</color><color=#f8f8f2>).</color><color=#a6e22e>getParentFile</color><color=#f8f8f2>(),</color> <color=#e6db74>"%d"</color><color=#f8f8f2>,</color> <color=#f8f8f2>start</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Instantiates an {@code ConsecutivelyNumberedFilenames} object which</color>
<color=#75715e>     * returns {@link File}s with file names which are consecutively numbered</color>
<color=#75715e>     * beginning from {@code 0}, with the directory specified.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * <h3>File name sequence</h3></color>
<color=#75715e>     * For a case where the parent directory is {@code /foo/bar/}:</color>
<color=#75715e>     * <ol></color>
<color=#75715e>     * <li><code>/foo/bar/0</code></li></color>
<color=#75715e>     * <li><code>/foo/bar/1</code></li></color>
<color=#75715e>     * <li><code>/foo/bar/2</code></li></color>
<color=#75715e>     * <li><code>/foo/bar/3</code></li></color>
<color=#75715e>     * </ol></color>
<color=#75715e>     * and so on.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param dir The directory in which the files are to be located.</color>
<color=#75715e>     * @throws IOException If the specified directory path is not a directory,</color>
<color=#75715e>     *                     or if does not exist.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>ConsecutivelyNumberedFilenames</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>dir</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>checkDirectory</color><color=#f8f8f2>(</color><color=#f8f8f2>dir</color><color=#f8f8f2>);</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>iter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ConsecutivelyNumberedFilenamesIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>dir</color><color=#f8f8f2>,</color> <color=#e6db74>"%d"</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Instantiates an {@code ConsecutivelyNumberedFilenames} object which</color>
<color=#75715e>     * returns {@link File}s with file names which are based on a format string.</color>
<color=#75715e>     * The numbering will be consecutive from {@code 0}.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * The format string should contain the string {@code %d} which will be</color>
<color=#75715e>     * replaced with a consecutively counted number. Additional formatting</color>
<color=#75715e>     * can be applied. For more details, please refer to the section on</color>
<color=#75715e>     * <em>Numeric</em> formatting in the Java API specification for the</color>
<color=#75715e>     * {@link Formatter} class.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * <h3>File name sequence</h3></color>
<color=#75715e>     * For a case where the format string is {@code image-%d}:</color>
<color=#75715e>     * <ol></color>
<color=#75715e>     * <li><code>image-0</code></li></color>
<color=#75715e>     * <li><code>image-1</code></li></color>
<color=#75715e>     * <li><code>image-2</code></li></color>
<color=#75715e>     * <li><code>image-3</code></li></color>
<color=#75715e>     * </ol></color>
<color=#75715e>     * and so on.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param format The format string to use.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>ConsecutivelyNumberedFilenames</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>format</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>iter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ConsecutivelyNumberedFilenamesIterator</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#e6db74>""</color><color=#f8f8f2>).</color><color=#a6e22e>getParentFile</color><color=#f8f8f2>(),</color> <color=#f8f8f2>format</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Instantiates an {@code ConsecutivelyNumberedFilenames} object which</color>
<color=#75715e>     * returns {@link File}s with file names which are consecutively numbered</color>
<color=#75715e>     * beginning from from the given value, with the directory specified.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * <h3>File name sequence</h3></color>
<color=#75715e>     * For a case where the parent directory is {@code /foo/bar/}, and the</color>
<color=#75715e>     * specified value is {@code 5}:</color>
<color=#75715e>     * <ol></color>
<color=#75715e>     * <li><code>/foo/bar/5</code></li></color>
<color=#75715e>     * <li><code>/foo/bar/6</code></li></color>
<color=#75715e>     * <li><code>/foo/bar/7</code></li></color>
<color=#75715e>     * <li><code>/foo/bar/8</code></li></color>
<color=#75715e>     * </ol></color>
<color=#75715e>     * and so on.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param dir   The directory in which the files are to be located.</color>
<color=#75715e>     * @param start The value from which to start counting.</color>
<color=#75715e>     * @throws IOException If the specified directory path is not a directory,</color>
<color=#75715e>     *                     or if does not exist.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>ConsecutivelyNumberedFilenames</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>dir</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>start</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>checkDirectory</color><color=#f8f8f2>(</color><color=#f8f8f2>dir</color><color=#f8f8f2>);</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>iter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ConsecutivelyNumberedFilenamesIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>dir</color><color=#f8f8f2>,</color> <color=#e6db74>"%d"</color><color=#f8f8f2>,</color> <color=#f8f8f2>start</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Instantiates an {@code ConsecutivelyNumberedFilenames} object which</color>
<color=#75715e>     * returns {@link File}s with file names which are based on a format string,</color>
<color=#75715e>     * located in the directory specified. The numbering will be consecutively</color>
<color=#75715e>     * counted from {@code 0}.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * The format string should contain the string {@code %d} which will be</color>
<color=#75715e>     * replaced with a consecutively counted number. Additional formatting</color>
<color=#75715e>     * can be applied. For more details, please refer to the section on</color>
<color=#75715e>     * <em>Numeric</em> formatting in the Java API specification for the</color>
<color=#75715e>     * {@link Formatter} class.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * <h3>File name sequence</h3></color>
<color=#75715e>     * For a case where the parent directory is {@code /foo/bar/},</color>
<color=#75715e>     * with the format string {@code image-%d}:</color>
<color=#75715e>     * <ol></color>
<color=#75715e>     * <li><code>/foo/bar/image-0</code></li></color>
<color=#75715e>     * <li><code>/foo/bar/image-1</code></li></color>
<color=#75715e>     * <li><code>/foo/bar/image-2</code></li></color>
<color=#75715e>     * <li><code>/foo/bar/image-3</code></li></color>
<color=#75715e>     * </ol></color>
<color=#75715e>     * and so on.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param dir    The directory in which the files are to be located.</color>
<color=#75715e>     * @param format The format string to use.</color>
<color=#75715e>     * @throws IOException If the specified directory path is not a directory,</color>
<color=#75715e>     *                     or if does not exist.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>ConsecutivelyNumberedFilenames</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>dir</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>format</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>checkDirectory</color><color=#f8f8f2>(</color><color=#f8f8f2>dir</color><color=#f8f8f2>);</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>iter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ConsecutivelyNumberedFilenamesIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>dir</color><color=#f8f8f2>,</color> <color=#f8f8f2>format</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Instantiates an {@code ConsecutivelyNumberedFilenames} object which</color>
<color=#75715e>     * returns {@link File}s with file names which are based on a format string.</color>
<color=#75715e>     * The numbering will be consecutive from the specified value.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * The format string should contain the string {@code %d} which will be</color>
<color=#75715e>     * replaced with a consecutively counted number. Additional formatting</color>
<color=#75715e>     * can be applied. For more details, please refer to the section on</color>
<color=#75715e>     * <em>Numeric</em> formatting in the Java API specification for the</color>
<color=#75715e>     * {@link Formatter} class.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * <h3>File name sequence</h3></color>
<color=#75715e>     * For a case where the parent directory is {@code /foo/bar/}, and the</color>
<color=#75715e>     * specified value is {@code 5}, with the format string {@code image-%d}:</color>
<color=#75715e>     * <ol></color>
<color=#75715e>     * <li><code>image-5</code></li></color>
<color=#75715e>     * <li><code>image-6</code></li></color>
<color=#75715e>     * <li><code>image-7</code></li></color>
<color=#75715e>     * <li><code>image-8</code></li></color>
<color=#75715e>     * </ol></color>
<color=#75715e>     * and so on.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param format The format string to use.</color>
<color=#75715e>     * @param start  The value from which to start counting.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>ConsecutivelyNumberedFilenames</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>format</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>start</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>iter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ConsecutivelyNumberedFilenamesIterator</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#e6db74>""</color><color=#f8f8f2>).</color><color=#a6e22e>getParentFile</color><color=#f8f8f2>(),</color> <color=#f8f8f2>format</color><color=#f8f8f2>,</color> <color=#f8f8f2>start</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Instantiates an {@code ConsecutivelyNumberedFilenames} object which</color>
<color=#75715e>     * returns {@link File}s with file names which are based on a format string,</color>
<color=#75715e>     * located in the directory specified. The numbering will be consecutive</color>
<color=#75715e>     * from the specified value.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * The format string should contain the string {@code %d} which will be</color>
<color=#75715e>     * replaced with a consecutively counted number. Additional formatting</color>
<color=#75715e>     * can be applied. For more details, please refer to the section on</color>
<color=#75715e>     * <em>Numeric</em> formatting in the Java API specification for the</color>
<color=#75715e>     * {@link Formatter} class.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * <h3>File name sequence</h3></color>
<color=#75715e>     * For a case where the parent directory is {@code /foo/bar/}, and the</color>
<color=#75715e>     * specified value is {@code 5}, with format string {@code image-%d}:</color>
<color=#75715e>     * <ol></color>
<color=#75715e>     * <li><code>/foo/bar/image-5</code></li></color>
<color=#75715e>     * <li><code>/foo/bar/image-6</code></li></color>
<color=#75715e>     * <li><code>/foo/bar/image-7</code></li></color>
<color=#75715e>     * <li><code>/foo/bar/image-8</code></li></color>
<color=#75715e>     * </ol></color>
<color=#75715e>     * and so on.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param dir    The directory in which the files are to be located.</color>
<color=#75715e>     * @param format The format string to use.</color>
<color=#75715e>     * @param start  The value from which to start counting.</color>
<color=#75715e>     * @throws IOException If the specified directory path is not a directory,</color>
<color=#75715e>     *                     or if does not exist.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>ConsecutivelyNumberedFilenames</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>dir</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>format</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>start</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>checkDirectory</color><color=#f8f8f2>(</color><color=#f8f8f2>dir</color><color=#f8f8f2>);</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>iter</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ConsecutivelyNumberedFilenamesIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>dir</color><color=#f8f8f2>,</color> <color=#f8f8f2>format</color><color=#f8f8f2>,</color> <color=#f8f8f2>start</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>checkDirectory</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>dir</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>dir</color><color=#f8f8f2>.</color><color=#a6e22e>isDirectory</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color>
                    <color=#e6db74>"Specified path is not a directory or does not exist."</color>
            <color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ConsecutivelyNumberedFilenamesIterator</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#f8f8f2>{</color>
        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>dir</color><color=#f8f8f2>;</color>
        <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
        <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color>

        <color=#66d9ef>public</color> <color=#a6e22e>ConsecutivelyNumberedFilenamesIterator</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>dir</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>format</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>start</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>super</color><color=#f8f8f2>();</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>dir</color> <color=#f92672>=</color> <color=#f8f8f2>dir</color><color=#f8f8f2>;</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>format</color> <color=#f92672>=</color> <color=#f8f8f2>format</color><color=#f8f8f2>;</color>
            <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>count</color> <color=#f92672>=</color> <color=#f8f8f2>start</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>hasNext</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#f8f8f2>File</color> <color=#a6e22e>next</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>File</color> <color=#f8f8f2>f</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>dir</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color><color=#f8f8f2>.</color><color=#a6e22e>format</color><color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>,</color> <color=#f8f8f2>count</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>count</color><color=#f92672>++</color><color=#f8f8f2>;</color>
            <color=#66d9ef>return</color> <color=#f8f8f2>f</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>remove</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>UnsupportedOperationException</color><color=#f8f8f2>(</color>
                    <color=#e6db74>"Cannot remove elements from this iterator."</color>
            <color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns an iterator which generates file names according to the rules</color>
<color=#75715e>     * specified by this object.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return An iterator which generates file names.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>Iterator</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#a6e22e>iterator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>iter</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>