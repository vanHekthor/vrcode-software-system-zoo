<color=#f92672>package</color> <color=#f8f8f2>net.coobird.thumbnailator.util.exif</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>org.w3c.dom.Node</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>org.w3c.dom.NodeList</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.ImageReader</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.metadata.IIOMetadata</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>javax.imageio.metadata.IIOMetadataNode</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteBuffer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteOrder</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * An utility class used to obtain the orientation information from a given</color>
<color=#75715e> * Exif metadata.</color>
<color=#75715e> *</color>
<color=#75715e> * @author coobird</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>ExifUtils</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>EXIF_MAGIC_STRING</color> <color=#f92672>=</color> <color=#e6db74>"Exif"</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * This class should not be instantiated.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#a6e22e>ExifUtils</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the orientation obtained from the Exif metadata.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param reader     An {@link ImageReader} which is reading the</color>
<color=#75715e>     *                   target image.</color>
<color=#75715e>     * @param imageIndex The index of the image from which the Exif</color>
<color=#75715e>     *                   metadata should be read from.</color>
<color=#75715e>     * @throws IOException              When an error occurs during reading.</color>
<color=#75715e>     * @throws IllegalArgumentException If the {@link ImageReader} does not</color>
<color=#75715e>     *                                  have the target image set, or if the</color>
<color=#75715e>     *                                  reader does not have a JPEG open.</color>
<color=#75715e>     * @return The orientation information obtained from the</color>
<color=#75715e>     * Exif metadata, as a {@link Orientation} enum.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Orientation</color> <color=#a6e22e>getExifOrientation</color><color=#f8f8f2>(</color><color=#f8f8f2>ImageReader</color> <color=#f8f8f2>reader</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>imageIndex</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>IIOMetadata</color> <color=#f8f8f2>metadata</color> <color=#f92672>=</color> <color=#f8f8f2>reader</color><color=#f8f8f2>.</color><color=#a6e22e>getImageMetadata</color><color=#f8f8f2>(</color><color=#f8f8f2>imageIndex</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>Node</color> <color=#f8f8f2>rootNode</color> <color=#f92672>=</color> <color=#f8f8f2>metadata</color><color=#f8f8f2>.</color><color=#a6e22e>getAsTree</color><color=#f8f8f2>(</color><color=#e6db74>"javax_imageio_jpeg_image_1.0"</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>NodeList</color> <color=#f8f8f2>childNodes</color> <color=#f92672>=</color> <color=#f8f8f2>rootNode</color><color=#f8f8f2>.</color><color=#a6e22e>getChildNodes</color><color=#f8f8f2>();</color>

        <color=#75715e>// Look for the APP1 containing Exif data, and retrieve it.</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>childNodes</color><color=#f8f8f2>.</color><color=#a6e22e>getLength</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#e6db74>"markerSequence"</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>childNodes</color><color=#f8f8f2>.</color><color=#a6e22e>item</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>).</color><color=#a6e22e>getNodeName</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>NodeList</color> <color=#f8f8f2>markerSequenceChildren</color> <color=#f92672>=</color> <color=#f8f8f2>childNodes</color><color=#f8f8f2>.</color><color=#a6e22e>item</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>).</color><color=#a6e22e>getChildNodes</color><color=#f8f8f2>();</color>

                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#f8f8f2>markerSequenceChildren</color><color=#f8f8f2>.</color><color=#a6e22e>getLength</color><color=#f8f8f2>();</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>IIOMetadataNode</color> <color=#f8f8f2>metadataNode</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>IIOMetadataNode</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>markerSequenceChildren</color><color=#f8f8f2>.</color><color=#a6e22e>item</color><color=#f8f8f2>(</color><color=#f8f8f2>j</color><color=#f8f8f2>));</color>

                    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color><color=#f8f8f2>)</color> <color=#f8f8f2>metadataNode</color><color=#f8f8f2>.</color><color=#a6e22e>getUserObject</color><color=#f8f8f2>();</color>
                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bytes</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>continue</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>}</color>

                    <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>magicNumber</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>4</color><color=#f92672>]</color><color=#f8f8f2>;</color>
                    <color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>wrap</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes</color><color=#f8f8f2>).</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>magicNumber</color><color=#f8f8f2>);</color>

                    <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>EXIF_MAGIC_STRING</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f8f8f2>(</color><color=#f8f8f2>magicNumber</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
                        <color=#66d9ef>return</color> <color=#f8f8f2>getOrientationFromExif</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes</color><color=#f8f8f2>);</color>
                    <color=#f8f8f2>}</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>Orientation</color> <color=#a6e22e>getOrientationFromExif</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>exifData</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>// Needed to make byte-wise reading easier.</color>
        <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buffer</color> <color=#f92672>=</color> <color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>wrap</color><color=#f8f8f2>(</color><color=#f8f8f2>exifData</color><color=#f8f8f2>);</color>

        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>exifId</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>4</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>exifId</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>EXIF_MAGIC_STRING</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f8f8f2>(</color><color=#f8f8f2>exifId</color><color=#f8f8f2>)))</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// read the \0 after the Exif</color>
        <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
        <color=#75715e>// read the padding byte</color>
        <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>

        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>tiffHeader</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>8</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>tiffHeader</color><color=#f8f8f2>);</color>

        <color=#75715e>/*</color>
<color=#75715e>         * The first 2 bytes of the TIFF header contains either:</color>
<color=#75715e>         *   "II" for Intel byte alignment (little endian), or</color>
<color=#75715e>         *   "MM" for Motorola byte alignment (big endian)</color>
<color=#75715e>         */</color>
        <color=#f8f8f2>ByteOrder</color> <color=#f8f8f2>bo</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>tiffHeader</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#e6db74>'I'</color> <color=#f92672>&&</color> <color=#f8f8f2>tiffHeader</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>==</color> <color=#e6db74>'I'</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>bo</color> <color=#f92672>=</color> <color=#f8f8f2>ByteOrder</color><color=#f8f8f2>.</color><color=#a6e22e>LITTLE_ENDIAN</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>bo</color> <color=#f92672>=</color> <color=#f8f8f2>ByteOrder</color><color=#f8f8f2>.</color><color=#a6e22e>BIG_ENDIAN</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>numFields</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>numFields</color><color=#f8f8f2>);</color>

        <color=#66d9ef>int</color> <color=#f8f8f2>nFields</color> <color=#f92672>=</color> <color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>wrap</color><color=#f8f8f2>(</color><color=#f8f8f2>numFields</color><color=#f8f8f2>).</color><color=#a6e22e>order</color><color=#f8f8f2>(</color><color=#f8f8f2>bo</color><color=#f8f8f2>).</color><color=#a6e22e>getShort</color><color=#f8f8f2>();</color>

        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>ifd</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>12</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>nFields</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>ifd</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>IfdStructure</color> <color=#f8f8f2>ifdStructure</color> <color=#f92672>=</color> <color=#f8f8f2>readIFD</color><color=#f8f8f2>(</color><color=#f8f8f2>ifd</color><color=#f8f8f2>,</color> <color=#f8f8f2>bo</color><color=#f8f8f2>);</color>

            <color=#75715e>// Return the orientation from the orientation IFD</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ifdStructure</color><color=#f8f8f2>.</color><color=#a6e22e>getTag</color><color=#f8f8f2>()</color> <color=#f92672>==</color> <color=#ae81ff>0x0112</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>return</color> <color=#f8f8f2>Orientation</color><color=#f8f8f2>.</color><color=#a6e22e>typeOf</color><color=#f8f8f2>(</color><color=#f8f8f2>ifdStructure</color><color=#f8f8f2>.</color><color=#a6e22e>getOffsetValue</color><color=#f8f8f2>());</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#f8f8f2>IfdStructure</color> <color=#a6e22e>readIFD</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>ifd</color><color=#f8f8f2>,</color> <color=#f8f8f2>ByteOrder</color> <color=#f8f8f2>bo</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>buffer</color> <color=#f92672>=</color> <color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>wrap</color><color=#f8f8f2>(</color><color=#f8f8f2>ifd</color><color=#f8f8f2>).</color><color=#a6e22e>order</color><color=#f8f8f2>(</color><color=#f8f8f2>bo</color><color=#f8f8f2>);</color>

        <color=#66d9ef>short</color> <color=#f8f8f2>tag</color> <color=#f92672>=</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>getShort</color><color=#f8f8f2>();</color>
        <color=#66d9ef>short</color> <color=#f8f8f2>type</color> <color=#f92672>=</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>getShort</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>count</color> <color=#f92672>=</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>();</color>

        <color=#f8f8f2>IfdType</color> <color=#f8f8f2>ifdType</color> <color=#f92672>=</color> <color=#f8f8f2>IfdType</color><color=#f8f8f2>.</color><color=#a6e22e>typeOf</color><color=#f8f8f2>(</color><color=#f8f8f2>type</color><color=#f8f8f2>);</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>offsetValue</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

        <color=#75715e>/*</color>
<color=#75715e>         * Per section 4.6.2 of the Exif Spec, if value is smaller than</color>
<color=#75715e>         * 4 bytes, it will exist in the earlier byte.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>byteSize</color> <color=#f92672>=</color> <color=#f8f8f2>count</color> <color=#f92672>*</color> <color=#f8f8f2>ifdType</color><color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>byteSize</color> <color=#f92672><=</color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ifdType</color> <color=#f92672>==</color> <color=#f8f8f2>IfdType</color><color=#f8f8f2>.</color><color=#a6e22e>SHORT</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>offsetValue</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>getShort</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>ifdType</color> <color=#f92672>==</color> <color=#f8f8f2>IfdType</color><color=#f8f8f2>.</color><color=#a6e22e>BYTE</color> <color=#f92672>||</color> <color=#f8f8f2>ifdType</color> <color=#f92672>==</color> <color=#f8f8f2>IfdType</color><color=#f8f8f2>.</color><color=#a6e22e>ASCII</color> <color=#f92672>||</color> <color=#f8f8f2>ifdType</color> <color=#f92672>==</color> <color=#f8f8f2>IfdType</color><color=#f8f8f2>.</color><color=#a6e22e>UNDEFINED</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>count</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>offsetValue</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>();</color>
                <color=#f8f8f2>}</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>offsetValue</color> <color=#f92672>=</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>offsetValue</color> <color=#f92672>=</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>IfdStructure</color><color=#f8f8f2>(</color><color=#f8f8f2>tag</color><color=#f8f8f2>,</color> <color=#f8f8f2>type</color><color=#f8f8f2>,</color> <color=#f8f8f2>count</color><color=#f8f8f2>,</color> <color=#f8f8f2>offsetValue</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>