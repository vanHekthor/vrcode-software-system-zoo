<color=#f92672>package</color> <color=#f8f8f2>net.coobird.thumbnailator.resizers</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Collections</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Map</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Image resizer class using bilinear interpolation for the resizing operation.</color>
<color=#75715e> *</color>
<color=#75715e> * @author coobird</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>BilinearResizer</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractResizer</color> <color=#f8f8f2>{</color>
    <color=#75715e>/**</color>
<color=#75715e>     * Instantiates a {@link BilinearResizer} with default rendering hints.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>BilinearResizer</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#f92672><</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>Key</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>></color><color=#f8f8f2>emptyMap</color><color=#f8f8f2>());</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Instantiates a {@link BilinearResizer} with the specified rendering</color>
<color=#75715e>     * hints.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param hints Additional rendering hints to apply.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>BilinearResizer</color><color=#f8f8f2>(</color><color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>Key</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>></color> <color=#f8f8f2>hints</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>VALUE_INTERPOLATION_BILINEAR</color><color=#f8f8f2>,</color> <color=#f8f8f2>hints</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * Resizes an image using bilinear interpolation.</color>
<color=#75715e>     * </p></color>
<color=#75715e>     * <p></color>
<color=#75715e>     * If the source and/or destination image is {@code null}, then a</color>
<color=#75715e>     * {@link NullPointerException} will be thrown.</color>
<color=#75715e>     * </p></color>
<color=#75715e>     *</color>
<color=#75715e>     * @param srcImage  The source image.</color>
<color=#75715e>     * @param destImage The destination image.</color>
<color=#75715e>     * @throws NullPointerException When the source and/or the destination</color>
<color=#75715e>     *                              image is {@code null}.</color>
<color=#75715e>     */</color>
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>resize</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>srcImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>destImage</color><color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>NullPointerException</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>resize</color><color=#f8f8f2>(</color><color=#f8f8f2>srcImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>destImage</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>