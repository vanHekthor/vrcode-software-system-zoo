<color=#f92672>package</color> <color=#f8f8f2>net.coobird.thumbnailator.filters</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.builders.BufferedImageBuilder</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * A class containing rotation filters.</color>
<color=#75715e> * <p></color>
<color=#75715e> * Aside from the three {@link Rotator}s provided as class constants, a</color>
<color=#75715e> * {@link Rotator} which performs a rotation by an arbituary angle can be</color>
<color=#75715e> * obtained through the {@link Rotation#newRotator(double)} method.</color>
<color=#75715e> *</color>
<color=#75715e> * @author coobird</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Rotation</color> <color=#f8f8f2>{</color>
    <color=#75715e>/**</color>
<color=#75715e>     * This class is not intended to be instantiated.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#a6e22e>Rotation</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * An {@link ImageFilter} which applies a rotation to an image.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * An instance of a {@link Rotator} can be obtained through the</color>
<color=#75715e>     * {@link Rotation#newRotator(double)} method.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @author coobird</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>Rotator</color> <color=#66d9ef>implements</color> <color=#f8f8f2>ImageFilter</color> <color=#f8f8f2>{</color>
        <color=#75715e>/**</color>
<color=#75715e>         * This class is not intended to be instantiated.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>private</color> <color=#a6e22e>Rotator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a new instance of {@code Rotator} which rotates an image at</color>
<color=#75715e>     * the specified angle.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * When the {@link Rotator} returned by this method is applied, the image</color>
<color=#75715e>     * will be rotated clockwise by the specified angle.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param angle The angle at which the instance of {@code Rotator}</color>
<color=#75715e>     *              is to rotate a image it acts upon.</color>
<color=#75715e>     * @return An instance of {@code Rotator} which will rotate</color>
<color=#75715e>     * a given image.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Rotator</color> <color=#a6e22e>newRotator</color><color=#f8f8f2>(</color><color=#66d9ef>final</color> <color=#66d9ef>double</color> <color=#f8f8f2>angle</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Rotator</color> <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Rotator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>

            <color=#66d9ef>private</color> <color=#66d9ef>double</color><color=#f92672>[]</color> <color=#a6e22e>calculatePosition</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>double</color> <color=#f8f8f2>y</color><color=#f8f8f2>,</color> <color=#66d9ef>double</color> <color=#f8f8f2>angle</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>angle</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>toRadians</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>);</color>

                <color=#66d9ef>double</color> <color=#f8f8f2>nx</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>cos</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>x</color><color=#f8f8f2>)</color> <color=#f92672>-</color> <color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sin</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>y</color><color=#f8f8f2>);</color>
                <color=#66d9ef>double</color> <color=#f8f8f2>ny</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>sin</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>x</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>cos</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>)</color> <color=#f92672>*</color> <color=#f8f8f2>y</color><color=#f8f8f2>);</color>

                <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#66d9ef>double</color><color=#f92672>[]</color><color=#f8f8f2>{</color><color=#f8f8f2>nx</color><color=#f8f8f2>,</color> <color=#f8f8f2>ny</color><color=#f8f8f2>};</color>
            <color=#f8f8f2>}</color>

            <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>apply</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>img</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>img</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>img</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

                <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>newImage</color><color=#f8f8f2>;</color>

                <color=#66d9ef>double</color><color=#f92672>[][]</color> <color=#f8f8f2>newPositions</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>double</color><color=#f92672>[</color><color=#ae81ff>4</color><color=#f92672>][]</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>newPositions</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>calculatePosition</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>angle</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>newPositions</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>calculatePosition</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>angle</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>newPositions</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>calculatePosition</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>angle</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>newPositions</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>calculatePosition</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>angle</color><color=#f8f8f2>);</color>

                <color=#66d9ef>double</color> <color=#f8f8f2>minX</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color>
                        <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>newPositions</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>][</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>newPositions</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>][</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>),</color>
                        <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>newPositions</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>][</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>newPositions</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>][</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>)</color>
                <color=#f8f8f2>);</color>
                <color=#66d9ef>double</color> <color=#f8f8f2>maxX</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color>
                        <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>newPositions</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>][</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>newPositions</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>][</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>),</color>
                        <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>newPositions</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>][</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>newPositions</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>][</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>)</color>
                <color=#f8f8f2>);</color>
                <color=#66d9ef>double</color> <color=#f8f8f2>minY</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color>
                        <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>newPositions</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>][</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>newPositions</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>][</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>),</color>
                        <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>min</color><color=#f8f8f2>(</color><color=#f8f8f2>newPositions</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>][</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>newPositions</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>][</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>)</color>
                <color=#f8f8f2>);</color>
                <color=#66d9ef>double</color> <color=#f8f8f2>maxY</color> <color=#f92672>=</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color>
                        <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>newPositions</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>][</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>newPositions</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>][</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>),</color>
                        <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>max</color><color=#f8f8f2>(</color><color=#f8f8f2>newPositions</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>][</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>newPositions</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>][</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>)</color>
                <color=#f8f8f2>);</color>

                <color=#66d9ef>int</color> <color=#f8f8f2>newWidth</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>round</color><color=#f8f8f2>(</color><color=#f8f8f2>maxX</color> <color=#f92672>-</color> <color=#f8f8f2>minX</color><color=#f8f8f2>);</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>newHeight</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>round</color><color=#f8f8f2>(</color><color=#f8f8f2>maxY</color> <color=#f92672>-</color> <color=#f8f8f2>minY</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>newImage</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImageBuilder</color><color=#f8f8f2>(</color><color=#f8f8f2>newWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>newHeight</color><color=#f8f8f2>).</color><color=#a6e22e>build</color><color=#f8f8f2>();</color>

                <color=#f8f8f2>Graphics2D</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>newImage</color><color=#f8f8f2>.</color><color=#a6e22e>createGraphics</color><color=#f8f8f2>();</color>

                <color=#75715e>/*</color>
<color=#75715e>                 * TODO consider RenderingHints to use.</color>
<color=#75715e>                 * The following are hints which have been chosen to give</color>
<color=#75715e>                 * decent image quality. In the future, there may be a need</color>
<color=#75715e>                 * to have a way to change these settings.</color>
<color=#75715e>                 */</color>
                <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>setRenderingHint</color><color=#f8f8f2>(</color>
                        <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>KEY_INTERPOLATION</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>VALUE_INTERPOLATION_BILINEAR</color>
                <color=#f8f8f2>);</color>
                <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>setRenderingHint</color><color=#f8f8f2>(</color>
                        <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>KEY_ANTIALIASING</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>VALUE_ANTIALIAS_ON</color>
                <color=#f8f8f2>);</color>

                <color=#66d9ef>double</color> <color=#f8f8f2>w</color> <color=#f92672>=</color> <color=#f8f8f2>newWidth</color> <color=#f92672>/</color> <color=#ae81ff>2.0</color><color=#f8f8f2>;</color>
                <color=#66d9ef>double</color> <color=#f8f8f2>h</color> <color=#f92672>=</color> <color=#f8f8f2>newHeight</color> <color=#f92672>/</color> <color=#ae81ff>2.0</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>rotate</color><color=#f8f8f2>(</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>toRadians</color><color=#f8f8f2>(</color><color=#f8f8f2>angle</color><color=#f8f8f2>),</color> <color=#f8f8f2>w</color><color=#f8f8f2>,</color> <color=#f8f8f2>h</color><color=#f8f8f2>);</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>centerX</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>round</color><color=#f8f8f2>((</color><color=#f8f8f2>newWidth</color> <color=#f92672>-</color> <color=#f8f8f2>width</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>2.0</color><color=#f8f8f2>);</color>
                <color=#66d9ef>int</color> <color=#f8f8f2>centerY</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>round</color><color=#f8f8f2>((</color><color=#f8f8f2>newHeight</color> <color=#f92672>-</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f92672>/</color> <color=#ae81ff>2.0</color><color=#f8f8f2>);</color>

                <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>img</color><color=#f8f8f2>,</color> <color=#f8f8f2>centerX</color><color=#f8f8f2>,</color> <color=#f8f8f2>centerY</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>

                <color=#66d9ef>return</color> <color=#f8f8f2>newImage</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>};</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>r</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * A {@code Rotator} which will rotate a specified image to the left 90</color>
<color=#75715e>     * degrees.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Rotator</color> <color=#f8f8f2>LEFT_90_DEGREES</color> <color=#f92672>=</color> <color=#f8f8f2>newRotator</color><color=#f8f8f2>(</color><color=#f92672>-</color><color=#ae81ff>90</color><color=#f8f8f2>);</color>

    <color=#75715e>/**</color>
<color=#75715e>     * A {@code Rotator} which will rotate a specified image to the right 90</color>
<color=#75715e>     * degrees.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Rotator</color> <color=#f8f8f2>RIGHT_90_DEGREES</color> <color=#f92672>=</color> <color=#f8f8f2>newRotator</color><color=#f8f8f2>(</color><color=#ae81ff>90</color><color=#f8f8f2>);</color>

    <color=#75715e>/**</color>
<color=#75715e>     * A {@code Rotator} which will rotate a specified image to the 180 degrees.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>Rotator</color> <color=#f8f8f2>ROTATE_180_DEGREES</color> <color=#f92672>=</color> <color=#f8f8f2>newRotator</color><color=#f8f8f2>(</color><color=#ae81ff>180</color><color=#f8f8f2>);</color>
<color=#f8f8f2>}</color>