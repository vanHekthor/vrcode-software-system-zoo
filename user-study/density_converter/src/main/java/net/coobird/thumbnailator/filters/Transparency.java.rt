<color=#f92672>package</color> <color=#f8f8f2>net.coobird.thumbnailator.filters</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * An image filter which will make an image transparent.</color>
<color=#75715e> * <p></color>
<color=#75715e> * The resulting image will always have an image type of</color>
<color=#75715e> * {@link BufferedImage#TYPE_INT_ARGB}.</color>
<color=#75715e> *</color>
<color=#75715e> * @author coobird</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Transparency</color> <color=#66d9ef>implements</color> <color=#f8f8f2>ImageFilter</color> <color=#f8f8f2>{</color>
    <color=#75715e>/**</color>
<color=#75715e>     * The alpha composite to use when drawing the transparent image.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>AlphaComposite</color> <color=#f8f8f2>composite</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Instantiates a {@link Transparency} filter with the specified opacity.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param alpha The opacity of the resulting image. The value should be</color>
<color=#75715e>     *              between {@code 0.0f} (transparent) to {@code 1.0f}</color>
<color=#75715e>     *              (opaque), inclusive.</color>
<color=#75715e>     * @throws IllegalArgumentException If the specified opacity is outside of</color>
<color=#75715e>     *                                  the range specified above.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>Transparency</color><color=#f8f8f2>(</color><color=#66d9ef>float</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>super</color><color=#f8f8f2>();</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>alpha</color> <color=#f92672><</color> <color=#ae81ff>0.0f</color> <color=#f92672>||</color> <color=#f8f8f2>alpha</color> <color=#f92672>></color> <color=#ae81ff>1.0f</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                    <color=#e6db74>"The alpha must be between 0.0f and 1.0f, inclusive."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>composite</color> <color=#f92672>=</color> <color=#f8f8f2>AlphaComposite</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>(</color><color=#f8f8f2>AlphaComposite</color><color=#f8f8f2>.</color><color=#a6e22e>SRC_OVER</color><color=#f8f8f2>,</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Instantiates a {@link Transparency} filter with the specified opacity.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * This is a convenience constructor for the</color>
<color=#75715e>     * {@link Transparency#Transparency(float)} constructor.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param alpha The opacity of the resulting image. The value should be</color>
<color=#75715e>     *              between {@code 0.0f} (transparent) to {@code 1.0f}</color>
<color=#75715e>     *              (opaque), inclusive.</color>
<color=#75715e>     * @throws IllegalArgumentException If the specified opacity is outside of</color>
<color=#75715e>     *                                  the range specified above.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#a6e22e>Transparency</color><color=#f8f8f2>(</color><color=#66d9ef>double</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>((</color><color=#66d9ef>float</color><color=#f8f8f2>)</color> <color=#f8f8f2>alpha</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>apply</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>img</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>width</color> <color=#f92672>=</color> <color=#f8f8f2>img</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>height</color> <color=#f92672>=</color> <color=#f8f8f2>img</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>finalImage</color> <color=#f92672>=</color>
                <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_INT_ARGB</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>Graphics2D</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>finalImage</color><color=#f8f8f2>.</color><color=#a6e22e>createGraphics</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>setComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>composite</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>img</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>finalImage</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the opacity of this filter.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return The opacity in the range of {@code 0.0f} (transparent) to</color>
<color=#75715e>     * {@code 1.0f} (opaque).</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>float</color> <color=#a6e22e>getAlpha</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>composite</color><color=#f8f8f2>.</color><color=#a6e22e>getAlpha</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>