<color=#f92672>package</color> <color=#f8f8f2>net.coobird.thumbnailator.tasks</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.ThumbnailParameter</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * This class is used by {@link ThumbnailTask} implementations which is used</color>
<color=#75715e> * when creating thumbnails from external sources and destinations.</color>
<color=#75715e> * <p></color>
<color=#75715e> * If the image handled by a {@link ThumbnailTask} contains multiple images,</color>
<color=#75715e> * only the first image will be read by the {@link #read()} method. Any</color>
<color=#75715e> * subsequent images will be ignored.</color>
<color=#75715e> *</color>
<color=#75715e> * @param <S> The class from which the image is retrieved or read.</color>
<color=#75715e> * @param <D> The class to which the thumbnail is stored or written.</color>
<color=#75715e> * @author coobird</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>class</color> <color=#a6e22e>ThumbnailTask</color><color=#f92672><</color><color=#f8f8f2>S</color><color=#f8f8f2>,</color> <color=#f8f8f2>D</color><color=#f92672>></color> <color=#f8f8f2>{</color>
    <color=#75715e>/**</color>
<color=#75715e>     * The parameters to use when creating a thumbnail.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>final</color> <color=#f8f8f2>ThumbnailParameter</color> <color=#f8f8f2>param</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * String indicating the image format of the input image.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * To be used for situtions where the output image format should be the</color>
<color=#75715e>     * same as the input image format.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#f8f8f2>String</color> <color=#f8f8f2>inputFormatName</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Constant used to obtain the first image when reading an image file.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>FIRST_IMAGE_INDEX</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Instantiates a {@link ThumbnailTask} with the parameters to use when</color>
<color=#75715e>     * creating thumbnails.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param param The parameters to use when creating thumbnails.</color>
<color=#75715e>     * @throws NullPointerException If the parameter is {@code null}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>protected</color> <color=#a6e22e>ThumbnailTask</color><color=#f8f8f2>(</color><color=#f8f8f2>ThumbnailParameter</color> <color=#f8f8f2>param</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>param</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"The parameter is null."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>param</color> <color=#f92672>=</color> <color=#f8f8f2>param</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Reads a source image.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @throws IOException Thrown when an I/O problem occurs when reading</color>
<color=#75715e>     *                     from the image source.</color>
<color=#75715e>     * @return The image which was obtained from the source.</color>
<color=#75715e>     */</color>
    <color=#75715e>/*</color>
<color=#75715e>     * Future changes note: The public interface of this method may have to be</color>
<color=#75715e>     * changed to support reading images tile-by-tile. This change may be</color>
<color=#75715e>     * required in order to support large images.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>read</color><color=#f8f8f2>()</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Writes the thumbnail to the destination.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param img The image to write.</color>
<color=#75715e>     * @throws UnsupportedFormatException When an image file which is to be</color>
<color=#75715e>     *                                    read or written is unsupported.</color>
<color=#75715e>     * @throws IOException                Thrown when an I/O problem occurs when writing the</color>
<color=#75715e>     *                                    image.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#66d9ef>void</color> <color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>img</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>;</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the {@link ThumbnailParameter} for this {@link ThumbnailTask},</color>
<color=#75715e>     * used when performing a thumbnail generation operation.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return The parameters to use when generating thumbnails.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>ThumbnailParameter</color> <color=#a6e22e>getParam</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>param</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the source from which the source image is retrieved or read.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return The source.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>S</color> <color=#a6e22e>getSource</color><color=#f8f8f2>();</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Returns the destination to which the thumbnail is stored or written.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @return The destination.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>abstract</color> <color=#f8f8f2>D</color> <color=#a6e22e>getDestination</color><color=#f8f8f2>();</color>
<color=#f8f8f2>}</color>