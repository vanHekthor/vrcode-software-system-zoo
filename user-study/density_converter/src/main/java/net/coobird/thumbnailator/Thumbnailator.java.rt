<color=#f92672>package</color> <color=#f8f8f2>net.coobird.thumbnailator</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.builders.BufferedImageBuilder</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.builders.ThumbnailParameterBuilder</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.filters.ImageFilter</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.makers.FixedSizeThumbnailMaker</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.makers.ScaledThumbnailMaker</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.name.Rename</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.resizers.DefaultResizerFactory</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.resizers.Resizer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.tasks.ThumbnailTask</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.File</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.InputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.OutputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.ArrayList</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Collection</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Collections</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * This class provides static utility methods which perform generation of</color>
<color=#75715e> * thumbnails using Thumbnailator.</color>
<color=#75715e> * <p></color>
<color=#75715e> * When images are resized, the aspect ratio of the images are preserved.</color>
<color=#75715e> *</color>
<color=#75715e> * @author coobird</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>class</color> <color=#a6e22e>Thumbnailator</color> <color=#f8f8f2>{</color>
    <color=#75715e>/**</color>
<color=#75715e>     * This class is not intended to be instantiated.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#a6e22e>Thumbnailator</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a thumbnail from parameters specified in a {@link ThumbnailTask}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param task A {@link ThumbnailTask} to execute.</color>
<color=#75715e>     * @throws IOException Thrown when a problem occurs when creating a</color>
<color=#75715e>     *                     thumbnail.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>createThumbnail</color><color=#f8f8f2>(</color><color=#f8f8f2>ThumbnailTask</color><color=#f92672><?</color><color=#f8f8f2>,</color> <color=#f92672>?></color> <color=#f8f8f2>task</color><color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>ThumbnailParameter</color> <color=#f8f8f2>param</color> <color=#f92672>=</color> <color=#f8f8f2>task</color><color=#f8f8f2>.</color><color=#a6e22e>getParam</color><color=#f8f8f2>();</color>

        <color=#75715e>// Obtain the original image.</color>
        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>sourceImage</color> <color=#f92672>=</color> <color=#f8f8f2>task</color><color=#f8f8f2>.</color><color=#a6e22e>read</color><color=#f8f8f2>();</color>

        <color=#75715e>// Decide the image type of the destination image.</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>imageType</color> <color=#f92672>=</color> <color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
        <color=#75715e>/*</color>
<color=#75715e>         * If the imageType indicates that the image type of the original image</color>
<color=#75715e>         * should be used in the thumbnail, then obtain the image type of the</color>
<color=#75715e>         * original.</color>
<color=#75715e>         *</color>
<color=#75715e>         * If the original type is a custom type, then the default image type</color>
<color=#75715e>         * will be used.</color>
<color=#75715e>         */</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>useOriginalImageType</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>imageTypeToUse</color> <color=#f92672>=</color> <color=#f8f8f2>sourceImage</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>

            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>imageTypeToUse</color> <color=#f92672>==</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>.</color><color=#a6e22e>TYPE_CUSTOM</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>imageType</color> <color=#f92672>=</color> <color=#f8f8f2>ThumbnailParameter</color><color=#f8f8f2>.</color><color=#a6e22e>DEFAULT_IMAGE_TYPE</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>imageType</color> <color=#f92672>=</color> <color=#f8f8f2>sourceImage</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>destinationImage</color><color=#f8f8f2>;</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Get the dimensions of the original and thumbnail images.</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>destinationWidth</color> <color=#f92672>=</color> <color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>().</color><color=#a6e22e>width</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>destinationHeight</color> <color=#f92672>=</color> <color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getSize</color><color=#f8f8f2>().</color><color=#a6e22e>height</color><color=#f8f8f2>;</color>

            <color=#75715e>// Create the thumbnail.</color>
            <color=#f8f8f2>destinationImage</color> <color=#f92672>=</color>
                    <color=#66d9ef>new</color> <color=#f8f8f2>FixedSizeThumbnailMaker</color><color=#f8f8f2>()</color>
                            <color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>(</color><color=#f8f8f2>destinationWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>destinationHeight</color><color=#f8f8f2>)</color>
                            <color=#f8f8f2>.</color><color=#a6e22e>keepAspectRatio</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>isKeepAspectRatio</color><color=#f8f8f2>())</color>
                            <color=#f8f8f2>.</color><color=#a6e22e>fitWithinDimensions</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>fitWithinDimenions</color><color=#f8f8f2>())</color>
                            <color=#f8f8f2>.</color><color=#a6e22e>imageType</color><color=#f8f8f2>(</color><color=#f8f8f2>imageType</color><color=#f8f8f2>)</color>
                            <color=#f8f8f2>.</color><color=#a6e22e>resizerFactory</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getResizerFactory</color><color=#f8f8f2>())</color>
                            <color=#f8f8f2>.</color><color=#a6e22e>make</color><color=#f8f8f2>(</color><color=#f8f8f2>sourceImage</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>Double</color><color=#f8f8f2>.</color><color=#a6e22e>isNaN</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getWidthScalingFactor</color><color=#f8f8f2>()))</color> <color=#f8f8f2>{</color>
            <color=#75715e>// Create the thumbnail.</color>
            <color=#f8f8f2>destinationImage</color> <color=#f92672>=</color>
                    <color=#66d9ef>new</color> <color=#f8f8f2>ScaledThumbnailMaker</color><color=#f8f8f2>()</color>
                            <color=#f8f8f2>.</color><color=#a6e22e>scale</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getWidthScalingFactor</color><color=#f8f8f2>(),</color> <color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getHeightScalingFactor</color><color=#f8f8f2>())</color>
                            <color=#f8f8f2>.</color><color=#a6e22e>imageType</color><color=#f8f8f2>(</color><color=#f8f8f2>imageType</color><color=#f8f8f2>)</color>
                            <color=#f8f8f2>.</color><color=#a6e22e>resizerFactory</color><color=#f8f8f2>(</color><color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getResizerFactory</color><color=#f8f8f2>())</color>
                            <color=#f8f8f2>.</color><color=#a6e22e>make</color><color=#f8f8f2>(</color><color=#f8f8f2>sourceImage</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Parameters to make thumbnail"</color> <color=#f92672>+</color>
                    <color=#e6db74>" does not have scaling factor nor thumbnail size specified."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Perform the image filters</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>ImageFilter</color> <color=#f8f8f2>filter</color> <color=#f8f8f2>:</color> <color=#f8f8f2>param</color><color=#f8f8f2>.</color><color=#a6e22e>getImageFilters</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>destinationImage</color> <color=#f92672>=</color> <color=#f8f8f2>filter</color><color=#f8f8f2>.</color><color=#a6e22e>apply</color><color=#f8f8f2>(</color><color=#f8f8f2>destinationImage</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>// Write the thumbnail image to the destination.</color>
        <color=#f8f8f2>task</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>destinationImage</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>sourceImage</color><color=#f8f8f2>.</color><color=#a6e22e>flush</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>destinationImage</color><color=#f8f8f2>.</color><color=#a6e22e>flush</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a thumbnail.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * The resulting thumbnail uses the default image type.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * When the image is resized, the aspect ratio will be preserved.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * When the specified dimensions does not have the same aspect ratio as the</color>
<color=#75715e>     * source image, the specified dimensions will be used as the absolute</color>
<color=#75715e>     * boundary of the thumbnail.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * For example, if the source image of 100 pixels by 100 pixels, and the</color>
<color=#75715e>     * desired thumbnail size is 50 pixels by 100 pixels, then the resulting</color>
<color=#75715e>     * thumbnail will be 50 pixels by 50 pixels, as the constraint will be</color>
<color=#75715e>     * 50 pixels for the width, and therefore, by preserving the aspect ratio,</color>
<color=#75715e>     * the height will be required to be 50 pixels.</color>
<color=#75715e>     * </p></color>
<color=#75715e>     *</color>
<color=#75715e>     * @param img    The source image.</color>
<color=#75715e>     * @param width  The width of the thumbnail.</color>
<color=#75715e>     * @param height The height of the thumbnail.</color>
<color=#75715e>     * @return Resulting thumbnail.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>createThumbnail</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>img</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>height</color>
    <color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>validateDimensions</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>Dimension</color> <color=#f8f8f2>imgSize</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Dimension</color><color=#f8f8f2>(</color><color=#f8f8f2>img</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(),</color> <color=#f8f8f2>img</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>());</color>
        <color=#f8f8f2>Dimension</color> <color=#f8f8f2>thumbnailSize</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Dimension</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>Resizer</color> <color=#f8f8f2>resizer</color> <color=#f92672>=</color>
                <color=#f8f8f2>DefaultResizerFactory</color><color=#f8f8f2>.</color><color=#a6e22e>getInstance</color><color=#f8f8f2>()</color>
                        <color=#f8f8f2>.</color><color=#a6e22e>getResizer</color><color=#f8f8f2>(</color><color=#f8f8f2>imgSize</color><color=#f8f8f2>,</color> <color=#f8f8f2>thumbnailSize</color><color=#f8f8f2>);</color>

        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>thumbnailImage</color> <color=#f92672>=</color>
                <color=#66d9ef>new</color> <color=#f8f8f2>FixedSizeThumbnailMaker</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>)</color>
                        <color=#f8f8f2>.</color><color=#a6e22e>resizer</color><color=#f8f8f2>(</color><color=#f8f8f2>resizer</color><color=#f8f8f2>)</color>
                        <color=#f8f8f2>.</color><color=#a6e22e>make</color><color=#f8f8f2>(</color><color=#f8f8f2>img</color><color=#f8f8f2>);</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>thumbnailImage</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a thumbnail from an source image and writes the thumbnail to</color>
<color=#75715e>     * a destination file.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * The image format to use for the thumbnail will be determined from the</color>
<color=#75715e>     * file extension. However, if the image format cannot be determined, then,</color>
<color=#75715e>     * the same image format as the original image will be used when writing</color>
<color=#75715e>     * the thumbnail.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param inFile  The {@link File} from which image data is read.</color>
<color=#75715e>     * @param outFile The {@link File} to which thumbnail is written.</color>
<color=#75715e>     * @param width   The width of the thumbnail.</color>
<color=#75715e>     * @param height  The height of the thumbnail.</color>
<color=#75715e>     * @throws IOException Thrown when a problem occurs when reading from</color>
<color=#75715e>     *                     {@code File} representing an image file.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>createThumbnail</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>File</color> <color=#f8f8f2>inFile</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>File</color> <color=#f8f8f2>outFile</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>height</color>
    <color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>validateDimensions</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>inFile</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"Input file is null."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>outFile</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"Output file is null."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>inFile</color><color=#f8f8f2>.</color><color=#a6e22e>exists</color><color=#f8f8f2>())</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IOException</color><color=#f8f8f2>(</color><color=#e6db74>"Input file does not exist."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>Thumbnails</color><color=#f8f8f2>.</color><color=#a6e22e>of</color><color=#f8f8f2>(</color><color=#f8f8f2>inFile</color><color=#f8f8f2>)</color>
                <color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color>
                <color=#f8f8f2>.</color><color=#a6e22e>toFile</color><color=#f8f8f2>(</color><color=#f8f8f2>outFile</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a thumbnail from an image file, and returns as a</color>
<color=#75715e>     * {@link BufferedImage}.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param f      The {@link File} from which image data is read.</color>
<color=#75715e>     * @param width  The width of the thumbnail.</color>
<color=#75715e>     * @param height The height of the thumbnail.</color>
<color=#75715e>     * @throws IOException Thrown when a problem occurs when reading from</color>
<color=#75715e>     *                     {@code File} representing an image file.</color>
<color=#75715e>     * @return The thumbnail image as a {@link BufferedImage}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>createThumbnail</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>File</color> <color=#f8f8f2>f</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>height</color>
    <color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>validateDimensions</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>f</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"Input file is null."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>Thumbnails</color><color=#f8f8f2>.</color><color=#a6e22e>of</color><color=#f8f8f2>(</color><color=#f8f8f2>f</color><color=#f8f8f2>).</color><color=#a6e22e>size</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>).</color><color=#a6e22e>asBufferedImage</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a thumbnail from an {@link Image}.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * The resulting {@link BufferedImage} uses the default image type.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * When the image is resized, the aspect ratio will be preserved.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * When the specified dimensions does not have the same aspect ratio as the</color>
<color=#75715e>     * source image, the specified dimensions will be used as the absolute</color>
<color=#75715e>     * boundary of the thumbnail.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param img    The source image.</color>
<color=#75715e>     * @param width  The width of the thumbnail.</color>
<color=#75715e>     * @param height The height of the thumbnail.</color>
<color=#75715e>     * @return The thumbnail image as an {@link Image}.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Image</color> <color=#a6e22e>createThumbnail</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>Image</color> <color=#f8f8f2>img</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>height</color>
    <color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>validateDimensions</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>

        <color=#75715e>// Copy the image from Image into a new BufferedImage.</color>
        <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>srcImg</color> <color=#f92672>=</color>
                <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImageBuilder</color><color=#f8f8f2>(</color>
                        <color=#f8f8f2>img</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>),</color>
                        <color=#f8f8f2>img</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>(</color><color=#66d9ef>null</color><color=#f8f8f2>)</color>
                <color=#f8f8f2>).</color><color=#a6e22e>build</color><color=#f8f8f2>();</color>

        <color=#f8f8f2>Graphics</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>srcImg</color><color=#f8f8f2>.</color><color=#a6e22e>createGraphics</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>img</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>createThumbnail</color><color=#f8f8f2>(</color><color=#f8f8f2>srcImg</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a thumbnail from image data streamed from an {@link InputStream}</color>
<color=#75715e>     * and streams the data out to an {@link OutputStream}.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * The thumbnail will be stored in the same format as the original image.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param is     The {@link InputStream} from which to obtain</color>
<color=#75715e>     *               image data.</color>
<color=#75715e>     * @param os     The {@link OutputStream} to send thumbnail data to.</color>
<color=#75715e>     * @param width  The width of the thumbnail.</color>
<color=#75715e>     * @param height The height of the thumbnail.</color>
<color=#75715e>     * @throws IOException Thrown when a problem occurs when reading from</color>
<color=#75715e>     *                     {@code File} representing an image file.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>createThumbnail</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>InputStream</color> <color=#f8f8f2>is</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>OutputStream</color> <color=#f8f8f2>os</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>height</color>
    <color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Thumbnailator</color><color=#f8f8f2>.</color><color=#a6e22e>createThumbnail</color><color=#f8f8f2>(</color>
                <color=#f8f8f2>is</color><color=#f8f8f2>,</color> <color=#f8f8f2>os</color><color=#f8f8f2>,</color> <color=#f8f8f2>ThumbnailParameter</color><color=#f8f8f2>.</color><color=#a6e22e>ORIGINAL_FORMAT</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates a thumbnail from image data streamed from an {@link InputStream}</color>
<color=#75715e>     * and streams the data out to an {@link OutputStream}, with the specified</color>
<color=#75715e>     * format for the output data.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param is     The {@link InputStream} from which to obtain</color>
<color=#75715e>     *               image data.</color>
<color=#75715e>     * @param os     The {@link OutputStream} to send thumbnail data to.</color>
<color=#75715e>     * @param format The image format to use to store the thumbnail data.</color>
<color=#75715e>     * @param width  The width of the thumbnail.</color>
<color=#75715e>     * @param height The height of the thumbnail.</color>
<color=#75715e>     * @throws IOException              Thrown when a problem occurs when reading from</color>
<color=#75715e>     *                                  {@code File} representing an image file.</color>
<color=#75715e>     * @throws IllegalArgumentException If the specified output format is</color>
<color=#75715e>     *                                  not supported.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>createThumbnail</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>InputStream</color> <color=#f8f8f2>is</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>OutputStream</color> <color=#f8f8f2>os</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>format</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>height</color>
    <color=#f8f8f2>)</color> <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>validateDimensions</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>is</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"InputStream is null."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>os</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"OutputStream is null."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>Thumbnails</color><color=#f8f8f2>.</color><color=#a6e22e>of</color><color=#f8f8f2>(</color><color=#f8f8f2>is</color><color=#f8f8f2>)</color>
                <color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color>
                <color=#f8f8f2>.</color><color=#a6e22e>outputFormat</color><color=#f8f8f2>(</color><color=#f8f8f2>format</color><color=#f8f8f2>)</color>
                <color=#f8f8f2>.</color><color=#a6e22e>toOutputStream</color><color=#f8f8f2>(</color><color=#f8f8f2>os</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates thumbnails from a specified {@link Collection} of {@link File}s.</color>
<color=#75715e>     * The filenames of the resulting thumbnails are determined by applying</color>
<color=#75715e>     * the specified {@link Rename}.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * The order of the thumbnail {@code File}s in the returned</color>
<color=#75715e>     * {@code Collection} will be the same as the order as the source list.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param files  A {@code Collection} containing {@code File} objects</color>
<color=#75715e>     *               of image files.</color>
<color=#75715e>     * @param rename The renaming function to use.</color>
<color=#75715e>     * @param width  The width of the thumbnail.</color>
<color=#75715e>     * @param height The height of the thumbnail.</color>
<color=#75715e>     * @throws IOException Thrown when a problem occurs when reading from</color>
<color=#75715e>     *                     {@code File} representing an image file.</color>
<color=#75715e>     * @deprecated This method has been deprecated in favor of using the</color>
<color=#75715e>     * {@link Thumbnails#fromFiles(Iterable)} interface.</color>
<color=#75715e>     * This method will be removed in 0.5.0, and will not be</color>
<color=#75715e>     * further maintained.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#f8f8f2>Collection</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#a6e22e>createThumbnailsAsCollection</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>Collection</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>File</color><color=#f92672>></color> <color=#f8f8f2>files</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>Rename</color> <color=#f8f8f2>rename</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>height</color>
    <color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>validateDimensions</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>files</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"Collection of Files is null."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rename</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"Rename is null."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color> <color=#f8f8f2>resultFiles</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ArrayList</color><color=#f92672><</color><color=#f8f8f2>File</color><color=#f92672>></color><color=#f8f8f2>();</color>

        <color=#f8f8f2>ThumbnailParameter</color> <color=#f8f8f2>param</color> <color=#f92672>=</color>
                <color=#66d9ef>new</color> <color=#f8f8f2>ThumbnailParameterBuilder</color><color=#f8f8f2>()</color>
                        <color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color>
                        <color=#f8f8f2>.</color><color=#a6e22e>build</color><color=#f8f8f2>();</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>inFile</color> <color=#f8f8f2>:</color> <color=#f8f8f2>files</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>File</color> <color=#f8f8f2>outFile</color> <color=#f92672>=</color>
                    <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>inFile</color><color=#f8f8f2>.</color><color=#a6e22e>getParent</color><color=#f8f8f2>(),</color> <color=#f8f8f2>rename</color><color=#f8f8f2>.</color><color=#a6e22e>apply</color><color=#f8f8f2>(</color><color=#f8f8f2>inFile</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>param</color><color=#f8f8f2>));</color>

            <color=#f8f8f2>createThumbnail</color><color=#f8f8f2>(</color><color=#f8f8f2>inFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>outFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>resultFiles</color><color=#f8f8f2>.</color><color=#a6e22e>add</color><color=#f8f8f2>(</color><color=#f8f8f2>outFile</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>Collections</color><color=#f8f8f2>.</color><color=#a6e22e>unmodifiableList</color><color=#f8f8f2>(</color><color=#f8f8f2>resultFiles</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Creates thumbnails from a specified {@code Collection} of {@code File}s.</color>
<color=#75715e>     * The filenames of the resulting thumbnails are determined by applying</color>
<color=#75715e>     * the specified {@code Rename} function.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param files  A {@code Collection} containing {@code File} objects</color>
<color=#75715e>     *               of image files.</color>
<color=#75715e>     * @param rename The renaming function to use.</color>
<color=#75715e>     * @param width  The width of the thumbnail.</color>
<color=#75715e>     * @param height The height of the thumbnail.</color>
<color=#75715e>     * @throws IOException Thrown when a problem occurs when reading from</color>
<color=#75715e>     *                     {@code File} representing an image file.</color>
<color=#75715e>     * @deprecated This method has been deprecated in favor of using the</color>
<color=#75715e>     * {@link Thumbnails#fromFiles(Iterable)} interface.</color>
<color=#75715e>     * This method will be removed in 0.5.0, and will not be</color>
<color=#75715e>     * further maintained.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>createThumbnails</color><color=#f8f8f2>(</color>
            <color=#f8f8f2>Collection</color><color=#f92672><?</color> <color=#66d9ef>extends</color> <color=#f8f8f2>File</color><color=#f92672>></color> <color=#f8f8f2>files</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>Rename</color> <color=#f8f8f2>rename</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>height</color>
    <color=#f8f8f2>)</color>
            <color=#66d9ef>throws</color> <color=#f8f8f2>IOException</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>validateDimensions</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>files</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"Collection of Files is null."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>rename</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>NullPointerException</color><color=#f8f8f2>(</color><color=#e6db74>"Rename is null."</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#f8f8f2>ThumbnailParameter</color> <color=#f8f8f2>param</color> <color=#f92672>=</color>
                <color=#66d9ef>new</color> <color=#f8f8f2>ThumbnailParameterBuilder</color><color=#f8f8f2>()</color>
                        <color=#f8f8f2>.</color><color=#a6e22e>size</color><color=#f8f8f2>(</color><color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color>
                        <color=#f8f8f2>.</color><color=#a6e22e>build</color><color=#f8f8f2>();</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>inFile</color> <color=#f8f8f2>:</color> <color=#f8f8f2>files</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>File</color> <color=#f8f8f2>outFile</color> <color=#f92672>=</color>
                    <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>inFile</color><color=#f8f8f2>.</color><color=#a6e22e>getParent</color><color=#f8f8f2>(),</color> <color=#f8f8f2>rename</color><color=#f8f8f2>.</color><color=#a6e22e>apply</color><color=#f8f8f2>(</color><color=#f8f8f2>inFile</color><color=#f8f8f2>.</color><color=#a6e22e>getName</color><color=#f8f8f2>(),</color> <color=#f8f8f2>param</color><color=#f8f8f2>));</color>

            <color=#f8f8f2>createThumbnail</color><color=#f8f8f2>(</color><color=#f8f8f2>inFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>outFile</color><color=#f8f8f2>,</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#f8f8f2>height</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Performs validation on the specified dimensions.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * If any of the dimensions are less than or equal to 0, an</color>
<color=#75715e>     * {@code IllegalArgumentException} is thrown with an message specifying the</color>
<color=#75715e>     * reason for the exception.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * This method is used to perform a check on the output dimensions of a</color>
<color=#75715e>     * thumbnail for the {@link Thumbnails#createThumbnail} methods.</color>
<color=#75715e>     *</color>
<color=#75715e>     * @param width  The width to validate.</color>
<color=#75715e>     * @param height The height to validate.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>void</color> <color=#a6e22e>validateDimensions</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>width</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>height</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>width</color> <color=#f92672><=</color> <color=#ae81ff>0</color> <color=#f92672>&&</color> <color=#f8f8f2>height</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                    <color=#e6db74>"Destination image dimensions must not be less than "</color> <color=#f92672>+</color>
                            <color=#e6db74>"0 pixels."</color>
            <color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>width</color> <color=#f92672><=</color> <color=#ae81ff>0</color> <color=#f92672>||</color> <color=#f8f8f2>height</color> <color=#f92672><=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>dimension</color> <color=#f92672>=</color> <color=#f8f8f2>width</color> <color=#f92672>==</color> <color=#ae81ff>0</color> <color=#f92672>?</color> <color=#e6db74>"width"</color> <color=#f8f8f2>:</color> <color=#e6db74>"height"</color><color=#f8f8f2>;</color>

            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                    <color=#e6db74>"Destination image "</color> <color=#f92672>+</color> <color=#f8f8f2>dimension</color> <color=#f92672>+</color> <color=#e6db74>" must not be "</color> <color=#f92672>+</color>
                            <color=#e6db74>"less than or equal to 0 pixels."</color>
            <color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>