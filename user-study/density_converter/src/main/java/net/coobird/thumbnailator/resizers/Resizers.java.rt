<color=#f92672>package</color> <color=#f8f8f2>net.coobird.thumbnailator.resizers</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * This enum can be used to select a specific {@link Resizer} in order</color>
<color=#75715e> * to perform a resizing operation.</color>
<color=#75715e> * <p></color>
<color=#75715e> * The instance held by a value of this enum is a single instance. When using</color>
<color=#75715e> * specific implementations of {@link Resizer}s, it is preferable to obtain</color>
<color=#75715e> * an instance of a {@link Resizer} through this enum or the</color>
<color=#75715e> * {@link DefaultResizerFactory} class in order to prevent many instances of the</color>
<color=#75715e> * {@link Resizer} class implementations from being instantiated.</color>
<color=#75715e> * <p></color>
<color=#75715e> * <DL></color>
<color=#75715e> * <DT><B>Usage:</B></DT></color>
<color=#75715e> * <DD></color>
<color=#75715e> * The following example code demonstrates how to use the {@link Resizers} enum</color>
<color=#75715e> * in order to resize an image using bilinear interpolation:</color>
<color=#75715e> * <p></color>
<color=#75715e> * <pre></color>
<color=#75715e> * BufferedImage sourceImage = new BufferedImageBuilder(400, 400).build();</color>
<color=#75715e> * BufferedImage destImage = new BufferedImageBuilder(200, 200).build();</color>
<color=#75715e> *</color>
<color=#75715e> * Resizers.BILINEAR.resize(sourceImage, destImage);</color>
<color=#75715e> * </pre></color>
<color=#75715e> * </DD></color>
<color=#75715e> * </DL></color>
<color=#75715e> *</color>
<color=#75715e> * @author coobird</color>
<color=#75715e> * @see DefaultResizerFactory</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>enum</color> <color=#f8f8f2>Resizers</color> <color=#66d9ef>implements</color> <color=#f8f8f2>Resizer</color> <color=#f8f8f2>{</color>
    <color=#75715e>/**</color>
<color=#75715e>     * A {@link Resizer} which does not perform resizing operations. The source</color>
<color=#75715e>     * image will be drawn at the origin of the destination image.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>NULL</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>NullResizer</color><color=#f8f8f2>()),</color>

    <color=#75715e>/**</color>
<color=#75715e>     * A {@link Resizer} which performs resizing operations using</color>
<color=#75715e>     * bilinear interpolation.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>BILINEAR</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>BilinearResizer</color><color=#f8f8f2>()),</color>

    <color=#75715e>/**</color>
<color=#75715e>     * A {@link Resizer} which performs resizing operations using</color>
<color=#75715e>     * bicubic interpolation.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>BICUBIC</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>BicubicResizer</color><color=#f8f8f2>()),</color>

    <color=#75715e>/**</color>
<color=#75715e>     * A {@link Resizer} which performs resizing operations using</color>
<color=#75715e>     * progressive bilinear scaling.</color>
<color=#75715e>     * <p></color>
<color=#75715e>     * For details on this technique, refer to the documentation of the</color>
<color=#75715e>     * {@link ProgressiveBilinearResizer} class.</color>
<color=#75715e>     */</color>
    <color=#f8f8f2>PROGRESSIVE</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>ProgressiveBilinearResizer</color><color=#f8f8f2>());</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Resizer</color> <color=#f8f8f2>resizer</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#a6e22e>Resizers</color><color=#f8f8f2>(</color><color=#f8f8f2>Resizer</color> <color=#f8f8f2>resizer</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>resizer</color> <color=#f92672>=</color> <color=#f8f8f2>resizer</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>resize</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>srcImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>destImage</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>resizer</color><color=#f8f8f2>.</color><color=#a6e22e>resize</color><color=#f8f8f2>(</color><color=#f8f8f2>srcImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>destImage</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>