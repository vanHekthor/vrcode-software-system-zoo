<color=#75715e>/*</color>
<color=#75715e> *  Copyright 2016 Patrick Favre-Bulle</color>
<color=#75715e> *</color>
<color=#75715e> *  Licensed under the Apache License, Version 2.0 (the "License");</color>
<color=#75715e> *  you may not use this file except in compliance with the License.</color>
<color=#75715e> *  You may obtain a copy of the License at</color>
<color=#75715e> *</color>
<color=#75715e> *      http://www.apache.org/licenses/LICENSE-2.0</color>
<color=#75715e> *</color>
<color=#75715e> * Unless required by applicable law or agreed to in writing, software</color>
<color=#75715e> * distributed under the License is distributed on an "AS IS" BASIS,</color>
<color=#75715e> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</color>
<color=#75715e> * See the License for the specific language governing permissions and</color>
<color=#75715e> * limitations under the License.</color>
<color=#75715e> */</color>

<color=#f92672>package</color> <color=#f8f8f2>at.favre.tools.dconvert.converters.scaling</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.makers.FixedSizeThumbnailMaker</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>net.coobird.thumbnailator.resizers.AbstractResizer</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.awt.*</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.awt.image.BufferedImage</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.HashMap</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Map</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Algorithms from Thumbnailnator</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>ThumbnailnatorProgressiveAlgorithm</color> <color=#66d9ef>implements</color> <color=#f8f8f2>ScaleAlgorithm</color> <color=#f8f8f2>{</color>

    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#f8f8f2>Object</color> <color=#f8f8f2>interpolationValue</color><color=#f8f8f2>;</color>

    <color=#66d9ef>public</color> <color=#a6e22e>ThumbnailnatorProgressiveAlgorithm</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>interpolationValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>this</color><color=#f8f8f2>.</color><color=#a6e22e>interpolationValue</color> <color=#f92672>=</color> <color=#f8f8f2>interpolationValue</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>BufferedImage</color> <color=#a6e22e>scale</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>imageToScale</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>dWidth</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>dHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>FixedSizeThumbnailMaker</color><color=#f8f8f2>(</color><color=#f8f8f2>dWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>dHeight</color><color=#f8f8f2>,</color> <color=#66d9ef>false</color><color=#f8f8f2>,</color> <color=#66d9ef>true</color><color=#f8f8f2>)</color>
                <color=#f8f8f2>.</color><color=#a6e22e>resizer</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>ProgressiveResizer</color><color=#f8f8f2>(</color><color=#f8f8f2>interpolationValue</color><color=#f8f8f2>))</color>
                <color=#f8f8f2>.</color><color=#a6e22e>make</color><color=#f8f8f2>(</color><color=#f8f8f2>imageToScale</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>toString</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#e6db74>"ThumbnailnatorProgressiveAlgorithm{"</color> <color=#f92672>+</color> <color=#e6db74>"interpolationValue="</color> <color=#f92672>+</color> <color=#f8f8f2>interpolationValue</color> <color=#f92672>+</color> <color=#e6db74>'}'</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>boolean</color> <color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>o</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#66d9ef>this</color> <color=#f92672>==</color> <color=#f8f8f2>o</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>o</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>getClass</color><color=#f8f8f2>()</color> <color=#f92672>!=</color> <color=#f8f8f2>o</color><color=#f8f8f2>.</color><color=#a6e22e>getClass</color><color=#f8f8f2>())</color> <color=#66d9ef>return</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>ThumbnailnatorProgressiveAlgorithm</color> <color=#f8f8f2>that</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>ThumbnailnatorProgressiveAlgorithm</color><color=#f8f8f2>)</color> <color=#f8f8f2>o</color><color=#f8f8f2>;</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>interpolationValue</color> <color=#f92672>!=</color> <color=#66d9ef>null</color>
                <color=#f92672>?</color> <color=#f8f8f2>interpolationValue</color><color=#f8f8f2>.</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>that</color><color=#f8f8f2>.</color><color=#a6e22e>interpolationValue</color><color=#f8f8f2>)</color>
                <color=#f8f8f2>:</color> <color=#f8f8f2>that</color><color=#f8f8f2>.</color><color=#a6e22e>interpolationValue</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>hashCode</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>interpolationValue</color> <color=#f92672>!=</color> <color=#66d9ef>null</color> <color=#f92672>?</color> <color=#f8f8f2>interpolationValue</color><color=#f8f8f2>.</color><color=#a6e22e>hashCode</color><color=#f8f8f2>()</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>ProgressiveResizer</color> <color=#66d9ef>extends</color> <color=#f8f8f2>AbstractResizer</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>public</color> <color=#a6e22e>ProgressiveResizer</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>interpolationValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>this</color><color=#f8f8f2>(</color><color=#f8f8f2>interpolationValue</color><color=#f8f8f2>,</color> <color=#66d9ef>new</color> <color=#f8f8f2>HashMap</color><color=#f92672><</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>Key</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>></color><color=#f8f8f2>());</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>public</color> <color=#a6e22e>ProgressiveResizer</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>interpolationValue</color><color=#f8f8f2>,</color> <color=#f8f8f2>Map</color><color=#f92672><</color><color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>Key</color><color=#f8f8f2>,</color> <color=#f8f8f2>Object</color><color=#f92672>></color> <color=#f8f8f2>hints</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>super</color><color=#f8f8f2>(</color><color=#f8f8f2>interpolationValue</color><color=#f8f8f2>,</color> <color=#f8f8f2>hints</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>checkArg</color><color=#f8f8f2>(</color><color=#f8f8f2>interpolationValue</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>checkArg</color><color=#f8f8f2>(</color><color=#f8f8f2>Object</color> <color=#f8f8f2>interpolationValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>interpolationValue</color> <color=#f92672>!=</color> <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>VALUE_INTERPOLATION_BICUBIC</color>
                    <color=#f92672>&&</color> <color=#f8f8f2>interpolationValue</color> <color=#f92672>!=</color> <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>VALUE_INTERPOLATION_BILINEAR</color>
                    <color=#f92672>&&</color> <color=#f8f8f2>interpolationValue</color> <color=#f92672>!=</color> <color=#f8f8f2>RenderingHints</color><color=#f8f8f2>.</color><color=#a6e22e>VALUE_INTERPOLATION_NEAREST_NEIGHBOR</color><color=#f8f8f2>)</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color>
                        <color=#e6db74>"wrong argument passed muts be one of RenderingHints.VALUE_INTERPOLATION_BICUBIC, "</color>
                                <color=#f92672>+</color> <color=#e6db74>"RenderingHints.VALUE_INTERPOLATION_BILINEAR or RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#a6e22e>@Override</color>
        <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>resize</color><color=#f8f8f2>(</color><color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>srcImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>destImage</color><color=#f8f8f2>)</color>
                <color=#66d9ef>throws</color> <color=#f8f8f2>NullPointerException</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>performChecks</color><color=#f8f8f2>(</color><color=#f8f8f2>srcImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>destImage</color><color=#f8f8f2>);</color>

            <color=#66d9ef>int</color> <color=#f8f8f2>currentWidth</color> <color=#f92672>=</color> <color=#f8f8f2>srcImage</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>currentHeight</color> <color=#f92672>=</color> <color=#f8f8f2>srcImage</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

            <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>targetWidth</color> <color=#f92672>=</color> <color=#f8f8f2>destImage</color><color=#f8f8f2>.</color><color=#a6e22e>getWidth</color><color=#f8f8f2>();</color>
            <color=#66d9ef>final</color> <color=#66d9ef>int</color> <color=#f8f8f2>targetHeight</color> <color=#f92672>=</color> <color=#f8f8f2>destImage</color><color=#f8f8f2>.</color><color=#a6e22e>getHeight</color><color=#f8f8f2>();</color>

            <color=#75715e>// If multi-step downscaling is not required, perform one-step.</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>((</color><color=#f8f8f2>targetWidth</color> <color=#f92672>*</color> <color=#ae81ff>2</color> <color=#f92672>>=</color> <color=#f8f8f2>currentWidth</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>targetHeight</color> <color=#f92672>*</color> <color=#ae81ff>2</color> <color=#f92672>>=</color> <color=#f8f8f2>currentHeight</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>super</color><color=#f8f8f2>.</color><color=#a6e22e>resize</color><color=#f8f8f2>(</color><color=#f8f8f2>srcImage</color><color=#f8f8f2>,</color> <color=#f8f8f2>destImage</color><color=#f8f8f2>);</color>
                <color=#66d9ef>return</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#75715e>// Temporary image used for in-place resizing of image.</color>
            <color=#f8f8f2>BufferedImage</color> <color=#f8f8f2>tempImage</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedImage</color><color=#f8f8f2>(</color><color=#f8f8f2>currentWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentHeight</color><color=#f8f8f2>,</color> <color=#f8f8f2>destImage</color><color=#f8f8f2>.</color><color=#a6e22e>getType</color><color=#f8f8f2>());</color>

            <color=#f8f8f2>Graphics2D</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>tempImage</color><color=#f8f8f2>.</color><color=#a6e22e>createGraphics</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>setRenderingHints</color><color=#f8f8f2>(</color><color=#f8f8f2>RENDERING_HINTS</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>setComposite</color><color=#f8f8f2>(</color><color=#f8f8f2>AlphaComposite</color><color=#f8f8f2>.</color><color=#a6e22e>Src</color><color=#f8f8f2>);</color>

            <color=#75715e>/*</color>
<color=#75715e>             * Determine the size of the first resize step should be.</color>
<color=#75715e>             * 1) Beginning from the target size</color>
<color=#75715e>             * 2) Increase each dimension by 2</color>
<color=#75715e>             * 3) Until reaching the original size</color>
<color=#75715e>             */</color>

            <color=#66d9ef>int</color> <color=#f8f8f2>startWidth</color> <color=#f92672>=</color> <color=#f8f8f2>targetWidth</color><color=#f8f8f2>;</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>startHeight</color> <color=#f92672>=</color> <color=#f8f8f2>targetHeight</color><color=#f8f8f2>;</color>

            <color=#66d9ef>while</color> <color=#f8f8f2>(</color><color=#f8f8f2>startWidth</color> <color=#f92672><</color> <color=#f8f8f2>currentWidth</color> <color=#f92672>&&</color> <color=#f8f8f2>startHeight</color> <color=#f92672><</color> <color=#f8f8f2>currentHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>startWidth</color> <color=#f92672>*=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>startHeight</color> <color=#f92672>*=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>currentWidth</color> <color=#f92672>=</color> <color=#f8f8f2>startWidth</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>currentHeight</color> <color=#f92672>=</color> <color=#f8f8f2>startHeight</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

            <color=#75715e>// Perform first resize step.</color>
            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color><color=#f8f8f2>srcImage</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentHeight</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>

            <color=#75715e>// Perform an in-place progressive bilinear resize.</color>
            <color=#66d9ef>while</color> <color=#f8f8f2>((</color><color=#f8f8f2>currentWidth</color> <color=#f92672>>=</color> <color=#f8f8f2>targetWidth</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentHeight</color> <color=#f92672>>=</color> <color=#f8f8f2>targetHeight</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>))</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>currentWidth</color> <color=#f92672>/=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>currentHeight</color> <color=#f92672>/=</color> <color=#ae81ff>2</color><color=#f8f8f2>;</color>

                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentWidth</color> <color=#f92672><</color> <color=#f8f8f2>targetWidth</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>currentWidth</color> <color=#f92672>=</color> <color=#f8f8f2>targetWidth</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>currentHeight</color> <color=#f92672><</color> <color=#f8f8f2>targetHeight</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                    <color=#f8f8f2>currentHeight</color> <color=#f92672>=</color> <color=#f8f8f2>targetHeight</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>}</color>

                <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color>
                        <color=#f8f8f2>tempImage</color><color=#f8f8f2>,</color>
                        <color=#ae81ff>0</color><color=#f8f8f2>,</color>
                        <color=#ae81ff>0</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>currentWidth</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>currentHeight</color><color=#f8f8f2>,</color>
                        <color=#ae81ff>0</color><color=#f8f8f2>,</color>
                        <color=#ae81ff>0</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>currentWidth</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color>
                        <color=#f8f8f2>currentHeight</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color>
                        <color=#66d9ef>null</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>

            <color=#f8f8f2>g</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>

            <color=#75715e>// Draw the resized image onto the destination image.</color>
            <color=#f8f8f2>Graphics2D</color> <color=#f8f8f2>destg</color> <color=#f92672>=</color> <color=#f8f8f2>destImage</color><color=#f8f8f2>.</color><color=#a6e22e>createGraphics</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>destg</color><color=#f8f8f2>.</color><color=#a6e22e>drawImage</color><color=#f8f8f2>(</color>
                    <color=#f8f8f2>tempImage</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>targetWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>targetHeight</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentWidth</color><color=#f8f8f2>,</color> <color=#f8f8f2>currentHeight</color><color=#f8f8f2>,</color> <color=#66d9ef>null</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>destg</color><color=#f8f8f2>.</color><color=#a6e22e>dispose</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>