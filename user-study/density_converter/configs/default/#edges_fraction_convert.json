{
  "edges": [
    {
      "type": "external method call",
      "label": "((IPlatformConverter) processor).convert",
      "declaration": "public Result convert(File srcImage, Arguments args)",
      "from": {
        "file": "src/main/java/at/favre/tools/dconvert/WorkerHandler.java",
        "lines": {
          "from": 124,
          "to": 124
        },
        "columns": {
          "from": 59,
          "to": 65
        }
      },
      "to": {
        "file": "src/main/java/at/favre/tools/dconvert/converters/APlatformConverter.java",
        "lines": {
          "from": 41,
          "to": 124
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "convertImage",
      "declaration": "private void convertImage(Arguments args, LoadedImage imageData, boolean isNinePatch, StringBuilder log, List\u003cFile\u003e allResultingFiles, Dimension dimension, File imageFile) throws Exception",
      "from": {
        "file": "src/main/java/at/favre/tools/dconvert/converters/APlatformConverter.java",
        "lines": {
          "from": 103,
          "to": 103
        },
        "columns": {
          "from": 25,
          "to": 36
        }
      },
      "to": {
        "file": "src/main/java/at/favre/tools/dconvert/converters/APlatformConverter.java",
        "lines": {
          "from": 168,
          "to": 193
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "ImageUtil.loadImage",
      "declaration": "public static LoadedImage loadImage(File input) throws Exception",
      "from": {
        "file": "src/main/java/at/favre/tools/dconvert/converters/APlatformConverter.java",
        "lines": {
          "from": 44,
          "to": 44
        },
        "columns": {
          "from": 47,
          "to": 55
        }
      },
      "to": {
        "file": "src/main/java/at/favre/tools/dconvert/util/ImageUtil.java",
        "lines": {
          "from": 50,
          "to": 67
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "readSegments",
      "declaration": "public static List\u003cJPEGSegment\u003e readSegments(final ImageInputStream stream, final Map\u003cInteger, List\u003cString\u003e\u003e segmentIdentifiers) throws IOException",
      "from": {
        "file": "src/main/java/com/twelvemonkeys/imageio/metadata/jpeg/JPEGSegmentUtil.java",
        "lines": {
          "from": 84,
          "to": 84
        },
        "columns": {
          "from": 16,
          "to": 27
        }
      },
      "to": {
        "file": "src/main/java/com/twelvemonkeys/imageio/metadata/jpeg/JPEGSegmentUtil.java",
        "lines": {
          "from": 101,
          "to": 128
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "horizontallyFromSrcToWork",
      "declaration": "private void horizontallyFromSrcToWork(BufferedImage srcImg, byte[][] workPixels, int start, int delta)",
      "from": {
        "file": "src/main/java/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 149,
          "to": 149
        },
        "columns": {
          "from": 9,
          "to": 33
        }
      },
      "to": {
        "file": "src/main/java/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 391,
          "to": 441
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "ImageUtils.getPixelsBGR",
      "declaration": "public static byte[] getPixelsBGR(BufferedImage img, int y, int w, byte[] array, int[] temp)",
      "from": {
        "file": "src/main/java/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 405,
          "to": 405
        },
        "columns": {
          "from": 24,
          "to": 35
        }
      },
      "to": {
        "file": "src/main/java/com/mortennobel/imagescaling/ImageUtils.java",
        "lines": {
          "from": 108,
          "to": 153
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "ImageUtils.setPixelsBGR",
      "declaration": "public static void setBGRPixels(byte[] bgrPixels, BufferedImage img, int x, int y, int w, int h)",
      "from": {
        "file": "src/main/java/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 188,
          "to": 188
        },
        "columns": {
          "from": 20,
          "to": 31
        }
      },
      "to": {
        "file": "src/main/java/com/mortennobel/imagescaling/ImageUtils.java",
        "lines": {
          "from": 162,
          "to": 196
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "createSubSampling",
      "declaration": "static SubSamplingData createSubSampling(ResampleFilter filter, int srcSize, int dstSize)",
      "from": {
        "file": "src/main/java/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 132,
          "to": 132
        },
        "columns": {
          "from": 37,
          "to": 53
        }
      },
      "to": {
        "file": "src/main/java/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 207,
          "to": 310
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "createSubSampling",
      "declaration": "static SubSamplingData createSubSampling(ResampleFilter filter, int srcSize, int dstSize)",
      "from": {
        "file": "src/main/java/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 133,
          "to": 133
        },
        "columns": {
          "from": 35,
          "to": 51
        }
      },
      "to": {
        "file": "src/main/java/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 207,
          "to": 310
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "read",
      "declaration": "private static LoadedImage read(ImageInputStream stream, ImageType imageType) throws IOException",
      "from": {
        "file": "src/main/java/at/favre/tools/dconvert/util/ImageUtil.java",
        "lines": {
          "from": 62,
          "to": 62
        },
        "columns": {
          "from": 29,
          "to": 32
        }
      },
      "to": {
        "file": "src/main/java/at/favre/tools/dconvert/util/ImageUtil.java",
        "lines": {
          "from": 89,
          "to": 113
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "getDensityBucketsWithFractionScale",
      "declaration": "private static Map\u003cT, Dimension\u003e getDensityBucketsWithFractionScale(java.util.List\u003cT\u003e densities, Dimension srcDimension, Arguments args, float fraction)",
      "from": {
        "file": "src/main/java/at/favre/tools/dconvert/util/DensityBucketUtil.java",
        "lines": {
          "from": 57,
          "to": 57
        },
        "columns": {
          "from": 24,
          "to": 57
        }
      },
      "to": {
        "file": "src/main/java/at/favre/tools/dconvert/util/DensityBucketUtil.java",
        "lines": {
          "from": 129,
          "to": 155
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "compressJpeg",
      "declaration": "public void compressJpeg(BufferedImage bufferedImage, CompoundDirectory exif, float quality, File targetFile) throws IOException",
      "from": {
        "file": "src/main/java/at/favre/tools/dconvert/converters/scaling/ImageHandler.java",
        "lines": {
          "from": 122,
          "to": 122
        },
        "columns": {
          "from": 21,
          "to": 32
        }
      },
      "to": {
        "file": "src/main/java/at/favre/tools/dconvert/converters/scaling/ImageHandler.java",
        "lines": {
          "from": 133,
          "to": 153
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "scale",
      "declaration": "public BufferedImage at.favre.tools.dconvert.converters.scaling.ImageHandler.scale(ScaleAlgorithm scaleAlgorithm, BufferedImage imageToScale, int dWidth, int dHeight, ECompression compression, Color background)",
      "from": {
        "file": "src/main/java/at/favre/tools/dconvert/converters/scaling/ImageHandler.java",
        "lines": {
          "from": 97,
          "to": 97
        },
        "columns": {
          "from": 29,
          "to": 33
        }
      },
      "to": {
        "file": "src/main/java/at/favre/tools/dconvert/converters/scaling/ImageHandler.java",
        "lines": {
          "from": 189,
          "to": 227
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "scaleAlgorithm.scale",
      "declaration": "public BufferedImage scale(BufferedImage imageToScale, int dWidth, int dHeight)",
      "from": {
        "file": "src/main/java/at/favre/tools/dconvert/converters/scaling/ImageHandler.java",
        "lines": {
          "from": 202,
          "to": 202
        },
        "columns": {
          "from": 42,
          "to": 46
        }
      },
      "to": {
        "file": "src/main/java/at/favre/tools/dconvert/converters/scaling/ResampleAlgorithm.java",
        "lines": {
          "from": 35,
          "to": 39
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "ResampleOp",
      "declaration": "public ResampleOp(int destWidth, int destHeight)",
      "from": {
        "file": "src/main/java/at/favre/tools/dconvert/converters/scaling/ResampleAlgorithm.java",
        "lines": {
          "from": 36,
          "to": 36
        },
        "columns": {
          "from": 35,
          "to": 44
        }
      },
      "to": {
        "file": "src/main/java/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 73,
          "to": 75
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "resizeOp.filter",
      "declaration": "public final BufferedImage filter(BufferedImage src, BufferedImage dest)",
      "from": {
        "file": "src/main/java/at/favre/tools/dconvert/converters/scaling/ResampleAlgorithm.java",
        "lines": {
          "from": 38,
          "to": 38
        },
        "columns": {
          "from": 25,
          "to": 30
        }
      },
      "to": {
        "file": "src/main/java/com/mortennobel/imagescaling/AdvancedResizeOp.java",
        "lines": {
          "from": 54,
          "to": 70
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "setProgress",
      "declaration": "private void setProgress()",
      "from": {
        "file": "src/main/java/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 352,
          "to": 352
        },
        "columns": {
          "from": 17,
          "to": 27
        }
      },
      "to": {
        "file": "src/main/java/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 492,
          "to": 494
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "readExif",
      "declaration": "private static CompoundDirectory readExif(File input) throws IOException",
      "from": {
        "file": "src/main/java/at/favre/tools/dconvert/util/ImageUtil.java",
        "lines": {
          "from": 66,
          "to": 66
        },
        "columns": {
          "from": 78,
          "to": 85
        }
      },
      "to": {
        "file": "src/main/java/at/favre/tools/dconvert/util/ImageUtil.java",
        "lines": {
          "from": 69,
          "to": 87
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "horizontallyFromSrcToWork",
      "declaration": "private void horizontallyFromSrcToWork(BufferedImage srcImg, byte[][] workPixels, int start, int delta)",
      "from": {
        "file": "src/main/java/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 144,
          "to": 144
        },
        "columns": {
          "from": 37,
          "to": 61
        }
      },
      "to": {
        "file": "src/main/java/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 391,
          "to": 441
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "setProgress",
      "declaration": "private void setProgress()",
      "from": {
        "file": "src/main/java/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 438,
          "to": 438
        },
        "columns": {
          "from": 17,
          "to": 27
        }
      },
      "to": {
        "file": "src/main/java/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 492,
          "to": 494
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "fireProgressChanged",
      "declaration": "protected void fireProgressChanged(float fraction)",
      "from": {
        "file": "src/main/java/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 493,
          "to": 493
        },
        "columns": {
          "from": 9,
          "to": 27
        }
      },
      "to": {
        "file": "src/main/java/com/mortennobel/imagescaling/AdvancedResizeOp.java",
        "lines": {
          "from": 40,
          "to": 44
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "verticalFromWorkToDst",
      "declaration": "private void verticalFromWorkToDst(byte[][] workPixels, byte[] outPixels, int start, int delta)",
      "from": {
        "file": "src/main/java/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 163,
          "to": 163
        },
        "columns": {
          "from": 37,
          "to": 57
        }
      },
      "to": {
        "file": "src/main/java/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 312,
          "to": 355
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "new ImageHandler(args).saveToFile",
      "declaration": "public List\u003cFile\u003e saveToFile(File targetFile, LoadedImage imageData, Dimension targetDimension, boolean isNinePatch) throws Exception",
      "from": {
        "file": "src/main/java/at/favre/tools/dconvert/converters/APlatformConverter.java",
        "lines": {
          "from": 178,
          "to": 178
        },
        "columns": {
          "from": 40,
          "to": 49
        }
      },
      "to": {
        "file": "src/main/java/at/favre/tools/dconvert/converters/scaling/ImageHandler.java",
        "lines": {
          "from": 60,
          "to": 131
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "doFilter",
      "declaration": "public BufferedImage doFilter(BufferedImage srcImg, BufferedImage dest, int dstWidth, int dstHeight)",
      "from": {
        "file": "src/main/java/com/mortennobel/imagescaling/AdvancedResizeOp.java",
        "lines": {
          "from": 59,
          "to": 59
        },
        "columns": {
          "from": 39,
          "to": 46
        }
      },
      "to": {
        "file": "src/main/java/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 94,
          "to": 194
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "verticalFromWorkToDst",
      "declaration": "private void verticalFromWorkToDst(byte[][] workPixels, byte[] outPixels, int start, int delta)",
      "from": {
        "file": "src/main/java/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 168,
          "to": 168
        },
        "columns": {
          "from": 9,
          "to": 29
        }
      },
      "to": {
        "file": "src/main/java/com/mortennobel/imagescaling/ResampleOp.java",
        "lines": {
          "from": 312,
          "to": 355
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "DensityBucketUtil.getDensityBuckets",
      "declaration": "public static Map\u003cT, Dimension\u003e getDensityBuckets(java.util.List\u003cT\u003e densities, Dimension srcDimension, Arguments args, float fraction, boolean isNinePatch) throws IOException",
      "from": {
        "file": "src/main/java/at/favre/tools/dconvert/converters/APlatformConverter.java",
        "lines": {
          "from": 65,
          "to": 65
        },
        "columns": {
          "from": 39,
          "to": 55
        }
      },
      "to": {
        "file": "src/main/java/at/favre/tools/dconvert/util/DensityBucketUtil.java",
        "lines": {
          "from": 38,
          "to": 59
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "JPEGSegmentUtil.readSegments",
      "declaration": "public static List\u003cJPEGSegment\u003e readSegments(final ImageInputStream stream, final int marker, final String identifier) throws IOException",
      "from": {
        "file": "src/main/java/at/favre/tools/dconvert/util/ImageUtil.java",
        "lines": {
          "from": 73,
          "to": 73
        },
        "columns": {
          "from": 65,
          "to": 76
        }
      },
      "to": {
        "file": "src/main/java/com/twelvemonkeys/imageio/metadata/jpeg/JPEGSegmentUtil.java",
        "lines": {
          "from": 83,
          "to": 85
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "callback.onJobFinished",
      "declaration": "synchronized void onJobFinished(Result result)",
      "from": {
        "file": "src/main/java/at/favre/tools/dconvert/WorkerHandler.java",
        "lines": {
          "from": 126,
          "to": 126
        },
        "columns": {
          "from": 22,
          "to": 34
        }
      },
      "to": {
        "file": "src/main/java/at/favre/tools/dconvert/WorkerHandler.java",
        "lines": {
          "from": 142,
          "to": 172
        },
        "columns": {
          "from": 9,
          "to": 9
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "callback.onFinished",
      "declaration": "public void onFinished(final int finishedJobsConverters, List<File> outFiles, final StringBuilder logConverters, final List<Exception> exceptionsConverters, final boolean haltedDuringProcessConverters)",
      "from": {
        "file": "src/main/java/at/favre/tools/dconvert/WorkerHandler.java",
        "lines": {
          "from": 159,
          "to": 159
        },
        "columns": {
          "from": 38,
          "to": 47
        }
      },
      "to": {
        "file": "src/main/java/at/favre/tools/dconvert/DConvert.java",
        "lines": {
          "from": 145,
          "to": 182
        },
        "columns": {
          "from": 25,
          "to": 25
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "callback.onFinished",
      "declaration": "public void onFinished(final int finishedJobsConverters, List<File> outFiles, final StringBuilder logConverters, final List<Exception> exceptionsConverters, final boolean haltedDuringProcessConverters)",
      "from": {
        "file": "src/main/java/at/favre/tools/dconvert/WorkerHandler.java",
        "lines": {
          "from": 166,
          "to": 166
        },
        "columns": {
          "from": 34,
          "to": 43
        }
      },
      "to": {
        "file": "src/main/java/at/favre/tools/dconvert/DConvert.java",
        "lines": {
          "from": 145,
          "to": 182
        },
        "columns": {
          "from": 25,
          "to": 25
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "start",
      "declaration": "public void start(List<File> allFiles)",
      "from": {
        "file": "src/main/java/at/favre/tools/dconvert/DConvert.java",
        "lines": {
          "from": 180,
          "to": 180
        },
        "columns": {
          "from": 42,
          "to": 46
        }
      },
      "to": {
        "file": "src/main/java/at/favre/tools/dconvert/WorkerHandler.java",
        "lines": {
          "from": 56,
          "to": 89
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "callback.onFinished",
      "declaration": "public void onFinished(final int finishedJobsConverters, List<File> outFiles, final StringBuilder logConverters, final List<Exception> exceptionsConverters, final boolean haltedDuringProcessConverters)",
      "from": {
        "file": "src/main/java/at/favre/tools/dconvert/WorkerHandler.java",
        "lines": {
          "from": 86,
          "to": 86
        },
        "columns": {
          "from": 22,
          "to": 31
        }
      },
      "to": {
        "file": "src/main/java/at/favre/tools/dconvert/DConvert.java",
        "lines": {
          "from": 166,
          "to": 178
        },
        "columns": {
          "from": 45,
          "to": 45
        }
      },
      "value": 1
    },
    {
      "type": "external method call",
      "label": "informFinished",
      "declaration": " private void informFinished(int finishedJobs, List<Exception> exceptions, boolean haltedDuringProcess)",
      "from": {
        "file": "src/main/java/at/favre/tools/dconvert/DConvert.java",
        "lines": {
          "from": 174,
          "to": 174
        },
        "columns": {
          "from": 49,
          "to": 62
        }
      },
      "to": {
        "file": "src/main/java/at/favre/tools/dconvert/DConvert.java",
        "lines": {
          "from": 199,
          "to": 217
        },
        "columns": {
          "from": 5,
          "to": 5
        }
      },
      "value": 1
    }
  ]
}
