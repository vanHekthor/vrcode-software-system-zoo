<color=#f92672>package</color> <color=#f8f8f2>main.java.components.gamma.algorithms</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>main.java.Helper</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>main.java.components.gamma.GammaInterface</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>main.java.components.hash.HashInterface</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * Salt dependent pudate using xorShif1024* RNG</color>
<color=#75715e> * @author max</color>
<color=#75715e> *</color>
<color=#75715e> */</color>
<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>SaltMix</color> <color=#66d9ef>implements</color> <color=#f8f8f2>GammaInterface</color> <color=#f8f8f2>{</color>
    
    <color=#66d9ef>private</color> <color=#f8f8f2>HashInterface</color> <color=#f8f8f2>_h</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>HashInterface</color> <color=#f8f8f2>_hPrime</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>Helper</color> <color=#f8f8f2>helper</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Helper</color><color=#f8f8f2>();</color>
    
    <color=#66d9ef>private</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>r</color> <color=#f8f8f2>;</color>  <color=#75715e>// state of the Xorshift RNG</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>p</color><color=#f8f8f2>;</color>      <color=#75715e>// position in state vector s</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * implements SaltMix with xorShift1024*</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param g         garlic</color>
<color=#75715e>     * @param x         state</color>
<color=#75715e>     * @param gamma     gamma</color>
<color=#75715e>     * @return          updated state</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>byte</color><color=#f92672>[][]</color> <color=#a6e22e>gamma</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>g</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[][]</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>gamma</color><color=#f8f8f2>){</color>
        
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>gammaByte</color> <color=#f92672>=</color> <color=#f8f8f2>gamma</color><color=#f8f8f2>;</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>tmp1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>tmp2</color><color=#f8f8f2>;</color>
        
        <color=#f8f8f2>_h</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#f8f8f2>gammaByte</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>tmp1</color> <color=#f92672>=</color> <color=#f8f8f2>_h</color><color=#f8f8f2>.</color><color=#a6e22e>doFinal</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>_h</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>_h</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#f8f8f2>tmp1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>tmp2</color> <color=#f92672>=</color> <color=#f8f8f2>_h</color><color=#f8f8f2>.</color><color=#a6e22e>doFinal</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>_h</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
        
        <color=#f8f8f2>transformBytesToLong</color><color=#f8f8f2>(</color><color=#f8f8f2>tmp1</color><color=#f8f8f2>,</color> <color=#f8f8f2>tmp2</color><color=#f8f8f2>);</color>
        
        <color=#f8f8f2>p</color><color=#f92672>=</color><color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>j1</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>j2</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>loopLimit</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>pow</color><color=#f8f8f2>(</color><color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>ceil</color><color=#f8f8f2>(</color><color=#ae81ff>3.0</color><color=#f92672>*</color><color=#f8f8f2>g</color><color=#f92672>/</color><color=#ae81ff>4.0</color><color=#f8f8f2>));</color>
        
<color=#75715e>//      System.out.println("Looplimit: " + loopLimit);</color>
        
        <color=#f8f8f2>_hPrime</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
        
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>loopLimit</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>){</color>
            <color=#f8f8f2>j1</color> <color=#f92672>=</color> <color=#f8f8f2>xorshift1024star</color><color=#f8f8f2>()</color> <color=#f92672>>>></color> <color=#f8f8f2>(</color><color=#ae81ff>64</color> <color=#f92672>-</color> <color=#f8f8f2>g</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>j2</color> <color=#f92672>=</color> <color=#f8f8f2>xorshift1024star</color><color=#f8f8f2>()</color> <color=#f92672>>>></color> <color=#f8f8f2>(</color><color=#ae81ff>64</color> <color=#f92672>-</color> <color=#f8f8f2>g</color><color=#f8f8f2>);</color>
            
            <color=#f8f8f2>_hPrime</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>concateByteArrays</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f92672>[</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color><color=#f8f8f2>j1</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>x</color><color=#f92672>[</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color><color=#f8f8f2>j2</color><color=#f92672>]</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>x</color><color=#f92672>[</color><color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color><color=#f8f8f2>j1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>_hPrime</color><color=#f8f8f2>.</color><color=#a6e22e>doFinal</color><color=#f8f8f2>();</color>
            
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    
    <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>xorshift1024star</color><color=#f8f8f2>(){</color> 
        <color=#75715e>// computes random g-bit value j1 / j2</color>
        <color=#75715e>// in each iteration of the for-loop of saltMix </color>
        <color=#66d9ef>long</color> <color=#f8f8f2>s0</color> <color=#f92672>=</color> <color=#f8f8f2>r</color><color=#f92672>[</color><color=#f8f8f2>p</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>p</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>p</color><color=#f92672>+</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>&</color> <color=#ae81ff>15</color><color=#f8f8f2>;</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>s1</color> <color=#f92672>=</color> <color=#f8f8f2>r</color><color=#f92672>[</color> <color=#f8f8f2>p</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>s1</color> <color=#f92672>^=</color> <color=#f8f8f2>s1</color> <color=#f92672><<</color> <color=#ae81ff>31</color><color=#f8f8f2>;</color> <color=#75715e>// a</color>
        <color=#f8f8f2>s1</color> <color=#f92672>^=</color> <color=#f8f8f2>s1</color> <color=#f92672>>>></color> <color=#ae81ff>11</color><color=#f8f8f2>;</color> <color=#75715e>// b</color>
        <color=#f8f8f2>s0</color> <color=#f92672>^=</color> <color=#f8f8f2>s0</color> <color=#f92672>>>></color> <color=#ae81ff>30</color><color=#f8f8f2>;</color> <color=#75715e>// c</color>
        <color=#f8f8f2>r</color><color=#f92672>[</color><color=#f8f8f2>p</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>s0</color> <color=#f92672>^</color> <color=#f8f8f2>s1</color><color=#f8f8f2>;</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>r</color><color=#f92672>[</color><color=#f8f8f2>p</color><color=#f92672>]</color> <color=#f92672>*</color> <color=#ae81ff>1181783497276652981L</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    
    <color=#66d9ef>void</color> <color=#a6e22e>transformBytesToLong</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color><color=#f8f8f2>){</color> <color=#75715e>// seed the state with two hash values</color>
        <color=#f8f8f2>r</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[</color><color=#ae81ff>16</color><color=#f92672>]</color><color=#f8f8f2>;</color>

        <color=#f8f8f2>p</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>sIndex</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color> <color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>a</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>+=</color><color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>r</color><color=#f92672>[</color><color=#f8f8f2>sIndex</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>bytes2long</color><color=#f8f8f2>(</color><color=#f8f8f2>a</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color> <color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>+=</color><color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>r</color><color=#f92672>[</color><color=#f8f8f2>sIndex</color><color=#f92672>++]</color> <color=#f92672>=</color> <color=#f8f8f2>bytes2long</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>       
    <color=#f8f8f2>}</color>
    
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>bytes2long</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>byteArray</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          
          <color=#66d9ef>return</color> <color=#f8f8f2>(</color>                
                  <color=#f8f8f2>(((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>byteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color> <color=#f8f8f2>)</color>      <color=#f8f8f2>)</color> <color=#f92672>|</color>
                  <color=#f8f8f2>(((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>byteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color> <color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color> <color=#f8f8f2>)</color> <color=#f92672>|</color>
                  <color=#f8f8f2>(((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>byteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color> <color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color>
                  <color=#f8f8f2>(((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>byteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color> <color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>|</color>
                  <color=#f8f8f2>(((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>byteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color> <color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>32</color><color=#f8f8f2>)</color> <color=#f92672>|</color>
                  <color=#f8f8f2>(((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>byteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>5</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color> <color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>40</color><color=#f8f8f2>)</color> <color=#f92672>|</color>
                  <color=#f8f8f2>(((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>byteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>6</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color> <color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>48</color><color=#f8f8f2>)</color> <color=#f92672>|</color>
                  <color=#f8f8f2>(((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>byteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>7</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color> <color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>56</color><color=#f8f8f2>)</color> <color=#f8f8f2>)</color> <color=#f8f8f2>;</color>                                  
    <color=#f8f8f2>}</color>
    
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setH</color><color=#f8f8f2>(</color><color=#f8f8f2>HashInterface</color> <color=#f8f8f2>h</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>_h</color> <color=#f92672>=</color> <color=#f8f8f2>h</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setHPrime</color><color=#f8f8f2>(</color><color=#f8f8f2>HashInterface</color> <color=#f8f8f2>hPrime</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>_hPrime</color> <color=#f92672>=</color> <color=#f8f8f2>hPrime</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

<color=#f8f8f2>}</color>