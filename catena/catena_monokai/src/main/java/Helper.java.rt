<color=#f92672>package</color> <color=#f8f8f2>main.java</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.BufferedReader</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.ByteArrayOutputStream</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.File</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.FileReader</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.IOException</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.nio.ByteBuffer</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Arrays</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>org.json.JSONArray</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>org.json.JSONObject</color><color=#f8f8f2>;</color>

<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Helper</color> <color=#f8f8f2>{</color>
    
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>hexArray</color> <color=#f92672>=</color> 
            <color=#e6db74>"0123456789ABCDEF"</color><color=#f8f8f2>.</color><color=#a6e22e>toCharArray</color><color=#f8f8f2>();</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Helper-function</color>
<color=#75715e>     * from "github.com/Beloumi/Crypto-Eck"</color>
<color=#75715e>     * transfers string to byte array</color>
<color=#75715e>     * @param  hexString    input string</color>
<color=#75715e>     * @return              byte array</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>hex2bytes</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>hexString</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#75715e>// 2 Character = 1 Byte</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>byteArray</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>hexString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>len</color> <color=#f92672>=</color> <color=#f8f8f2>hexString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color> <color=#f8f8f2>(</color><color=#f8f8f2>len</color> <color=#f92672>&</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>==</color> <color=#ae81ff>1</color><color=#f8f8f2>){</color> 
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>err</color><color=#f8f8f2>.</color><color=#a6e22e>println</color><color=#f8f8f2>(</color><color=#e6db74>"Illegal Argument (Function "</color>
                    <color=#f92672>+</color> <color=#e6db74>"hexStringToBytes): HexString is not even"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>exit</color><color=#f8f8f2>(</color><color=#ae81ff>1</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>final</color> <color=#66d9ef>char</color> <color=#f92672>[]</color> <color=#f8f8f2>hexCharArray</color> <color=#f92672>=</color> <color=#f8f8f2>hexString</color><color=#f8f8f2>.</color><color=#a6e22e>toCharArray</color> <color=#f8f8f2>();</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>hexString</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color> <color=#f8f8f2>i</color><color=#f92672>+=</color><color=#ae81ff>2</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#75715e>// 1. char in hex <<4, 2. char in hex</color>
            <color=#f8f8f2>byteArray</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>/</color> <color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>=</color> 
                    <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>digit</color> <color=#f8f8f2>(</color><color=#f8f8f2>hexCharArray</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>4</color><color=#f8f8f2>)</color> 
                    <color=#f92672>+</color> <color=#f8f8f2>Character</color><color=#f8f8f2>.</color><color=#a6e22e>digit</color> <color=#f8f8f2>(</color><color=#f8f8f2>hexCharArray</color><color=#f92672>[</color><color=#f8f8f2>i</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#ae81ff>16</color><color=#f8f8f2>));</color>
        <color=#f8f8f2>}</color>       
        <color=#66d9ef>return</color> <color=#f8f8f2>byteArray</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>string2Bytes</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>hexString</color><color=#f8f8f2>){</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>hexString</color><color=#f8f8f2>.</color><color=#a6e22e>getBytes</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Helper-function</color>
<color=#75715e>     * from "github.com/Beloumi/Crypto-Eck"</color>
<color=#75715e>     * transfers byte array to string</color>
<color=#75715e>     * @param bytes     array of bytes</color>
<color=#75715e>     * @return          hexString</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#a6e22e>bytes2hex</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>char</color><color=#f92672>[]</color> <color=#f8f8f2>hexChars</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>char</color><color=#f92672>[</color><color=#f8f8f2>bytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color> <color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color> <color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#f8f8f2>bytes</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>hexChars</color><color=#f92672>[</color><color=#f8f8f2>j</color> <color=#f92672>*</color> <color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>hexArray</color><color=#f92672>[</color><color=#f8f8f2>v</color> <color=#f92672>>>></color> <color=#ae81ff>4</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>hexChars</color><color=#f92672>[</color><color=#f8f8f2>j</color> <color=#f92672>*</color> <color=#ae81ff>2</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>hexArray</color><color=#f92672>[</color><color=#f8f8f2>v</color> <color=#f92672>&</color> <color=#ae81ff>0x0F</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>String</color><color=#f8f8f2>(</color><color=#f8f8f2>hexChars</color><color=#f8f8f2>).</color><color=#a6e22e>toLowerCase</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * Helper-function</color>
<color=#75715e>     * Concatenation function to combine all elements of the</color>
<color=#75715e>     * tweak in one array</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param bytes1    vId </color>
<color=#75715e>     * @param bytes2    mode</color>
<color=#75715e>     * @param bytes3    lambda</color>
<color=#75715e>     * @param bytes4    outLen</color>
<color=#75715e>     * @param bytes5    sLen</color>
<color=#75715e>     * @param bytes6    additionalData</color>
<color=#75715e>     * </color>
<color=#75715e>     * @return          all in one array</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>concateByteArrays</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes1</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes2</color><color=#f8f8f2>,</color> 
            <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes3</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes4</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes5</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes6</color><color=#f8f8f2>){</color>
        <color=#f8f8f2>ByteArrayOutputStream</color> <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteArrayOutputStream</color><color=#f8f8f2>();</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes1</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes2</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes3</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes4</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes5</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes6</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>printStackTrace</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>toByteArray</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * Helper-function</color>
<color=#75715e>     * Concatenation function to combine tweak array</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param bytes1    t</color>
<color=#75715e>     * @param bytes2    pwd</color>
<color=#75715e>     * @param bytes3    salt</color>
<color=#75715e>     * @return          all in one array</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>concateByteArrays</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes1</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes2</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes3</color><color=#f8f8f2>){</color>
        <color=#f8f8f2>ByteArrayOutputStream</color> <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteArrayOutputStream</color><color=#f8f8f2>();</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes1</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes2</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes3</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>printStackTrace</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>toByteArray</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * Helper-function</color>
<color=#75715e>     * Concatenation function for byte arrays</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param bytes1    byte[] 1</color>
<color=#75715e>     * @param bytes2    byte[] 2</color>
<color=#75715e>     * @param bytes3    byte[] 3</color>
<color=#75715e>     * @param bytes4    byte[] 4</color>
<color=#75715e>     * @return          all in one array</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>concateByteArrays</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes1</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes2</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes3</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes4</color><color=#f8f8f2>){</color>
        <color=#f8f8f2>ByteArrayOutputStream</color> <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteArrayOutputStream</color><color=#f8f8f2>();</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes1</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes2</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes3</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes4</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>printStackTrace</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>toByteArray</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * Helper-function</color>
<color=#75715e>     * Concatenation function to combine 2 byte arrays</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param bytes1    first array</color>
<color=#75715e>     * @param bytes2    second array</color>
<color=#75715e>     * @return          all in one array</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>concateByteArrays</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes1</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes2</color><color=#f8f8f2>){</color>
        <color=#f8f8f2>ByteArrayOutputStream</color> <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteArrayOutputStream</color><color=#f8f8f2>();</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes1</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes2</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>printStackTrace</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>toByteArray</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * Converts Integer to byte arrays of size 2 or 4</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param data      input integer</color>
<color=#75715e>     * @param bytes     ammount of bytes in array</color>
<color=#75715e>     * @return          converted byte array</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>intToByteArray</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bytes</color> <color=#f92672>==</color> <color=#ae81ff>4</color><color=#f8f8f2>){</color>
            <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>4</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            
            <color=#f8f8f2>result</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>data</color> <color=#f92672>&</color> <color=#ae81ff>0xFF000000</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>result</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>data</color> <color=#f92672>&</color> <color=#ae81ff>0x00FF0000</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>result</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>data</color> <color=#f92672>&</color> <color=#ae81ff>0x0000FF00</color><color=#f8f8f2>)</color> <color=#f92672>>></color>  <color=#ae81ff>8</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>result</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>data</color> <color=#f92672>&</color> <color=#ae81ff>0x000000FF</color><color=#f8f8f2>)</color>      <color=#f8f8f2>);</color>
            
            <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bytes</color> <color=#f92672>==</color> <color=#ae81ff>2</color><color=#f8f8f2>){</color>
            <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            
            <color=#f8f8f2>result</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>data</color> <color=#f92672>&</color> <color=#ae81ff>0xFF00</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>result</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>data</color> <color=#f92672>&</color> <color=#ae81ff>0x00FF</color><color=#f8f8f2>));</color>
            
            <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * Converts Integer to byte arrays of size 2 or 4</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param data      input integer</color>
<color=#75715e>     * @param bytes     ammount of bytes in array</color>
<color=#75715e>     * @return          converted byte array</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>intToByteArrayLittleEndian</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>data</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
    
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bytes</color> <color=#f92672>==</color> <color=#ae81ff>4</color><color=#f8f8f2>){</color>
            <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>4</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            
            <color=#f8f8f2>result</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>data</color> <color=#f92672>&</color> <color=#ae81ff>0x000000FF</color><color=#f8f8f2>)</color>      <color=#f8f8f2>);</color>
            <color=#f8f8f2>result</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>data</color> <color=#f92672>&</color> <color=#ae81ff>0x0000FF00</color><color=#f8f8f2>)</color> <color=#f92672>>></color>  <color=#ae81ff>8</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>result</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>data</color> <color=#f92672>&</color> <color=#ae81ff>0x00FF0000</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>result</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>data</color> <color=#f92672>&</color> <color=#ae81ff>0xFF000000</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>);</color>
            
            <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bytes</color> <color=#f92672>==</color> <color=#ae81ff>2</color><color=#f8f8f2>){</color>
            <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>result</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            
            <color=#f8f8f2>result</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>data</color> <color=#f92672>&</color> <color=#ae81ff>0x00FF</color><color=#f8f8f2>)</color>     <color=#f8f8f2>);</color>
            <color=#f8f8f2>result</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>((</color><color=#f8f8f2>data</color> <color=#f92672>&</color> <color=#ae81ff>0xFF00</color><color=#f8f8f2>)</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
            
            <color=#66d9ef>return</color> <color=#f8f8f2>result</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * combines two dimensional byte array to one dimension </color>
<color=#75715e>     * </color>
<color=#75715e>     * @param bytes     two dim byte array</color>
<color=#75715e>     * @return          one dimensional array</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>twoDimByteArrayToOne</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[][]</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>){</color>
        <color=#f8f8f2>ByteArrayOutputStream</color> <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>ByteArrayOutputStream</color><color=#f8f8f2>();</color>
        
        <color=#66d9ef>for</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>row</color> <color=#f92672>=</color><color=#ae81ff>0</color> <color=#f8f8f2>;</color> <color=#f8f8f2>row</color> <color=#f92672><</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>row</color><color=#f8f8f2>){</color>
            <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>write</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes</color><color=#f92672>[</color><color=#f8f8f2>row</color><color=#f92672>]</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color> <color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>IOException</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>e</color><color=#f8f8f2>.</color><color=#a6e22e>printStackTrace</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>out</color><color=#f8f8f2>.</color><color=#a6e22e>toByteArray</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    
    <color=#66d9ef>public</color> <color=#66d9ef>byte</color><color=#f92672>[][]</color> <color=#a6e22e>oneDimByteArrToTwoDim</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>){</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>bLen</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>dimension</color> <color=#f92672>=</color> <color=#f8f8f2>bLen</color><color=#f92672>/</color><color=#f8f8f2>len</color><color=#f8f8f2>;</color>
        
        <color=#66d9ef>byte</color><color=#f92672>[][]</color> <color=#f8f8f2>twoDim</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>dimension</color><color=#f92672>][</color><color=#f8f8f2>len</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>bLen</color><color=#f92672>/</color><color=#f8f8f2>len</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color> <color=#f8f8f2>){</color>
            <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>tmp</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>len</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color><color=#f92672>*</color><color=#f8f8f2>len</color><color=#f8f8f2>,</color> <color=#f8f8f2>tmp</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>twoDim</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>tmp</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>twoDim</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * Helper-function</color>
<color=#75715e>     * Creates a new array of desired size and copies the old one in </color>
<color=#75715e>     * </color>
<color=#75715e>     * @param b     input array of size m</color>
<color=#75715e>     * @param l     desired size</color>
<color=#75715e>     * @return      array with padded 0's</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>paddWithZero</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>l</color><color=#f8f8f2>){</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>output</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>l</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>output</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>output</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * Helper-function</color>
<color=#75715e>     * truncates at the end of flap</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param x     the current array to be truncated</color>
<color=#75715e>     * @param m     the desired output length</color>
<color=#75715e>     * @return      the resulting array</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>truncate</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>m</color><color=#f8f8f2>){</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>copyOfRange</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>m</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * XORing two byte arrays of equal size</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param arr1      first byte array</color>
<color=#75715e>     * @param arr2      second byte array</color>
<color=#75715e>     * @return          XORed byte array</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>xor</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>arr1</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>arr2</color><color=#f8f8f2>){</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>res</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>arr1</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color> <color=#f8f8f2>b</color> <color=#f8f8f2>:</color> <color=#f8f8f2>arr1</color><color=#f8f8f2>)</color>
            <color=#f8f8f2>res</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>b</color> <color=#f92672>^</color> <color=#f8f8f2>arr2</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>++]</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>res</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * Container for byte to long and long to byte transformation</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>bufferLong</color> <color=#f92672>=</color> <color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>allocate</color><color=#f8f8f2>(</color><color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>BYTES</color><color=#f8f8f2>);</color>    

    <color=#75715e>/**</color>
<color=#75715e>     * Transforms long to byte array</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param x     long input</color>
<color=#75715e>     * @return      byte array</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>longToBytes</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>x</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bufferLong</color><color=#f8f8f2>.</color><color=#a6e22e>putLong</color><color=#f8f8f2>(</color><color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>x</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>bufferLong</color><color=#f8f8f2>.</color><color=#a6e22e>array</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Transforms byte arrsy to long</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param bytes     bytes to transform to long</color>
<color=#75715e>     * @return          long value</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>bytesToLong</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bufferLong</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>bufferLong</color><color=#f8f8f2>.</color><color=#a6e22e>flip</color><color=#f8f8f2>();</color><color=#75715e>//need flip </color>
        <color=#66d9ef>return</color> <color=#f8f8f2>bufferLong</color><color=#f8f8f2>.</color><color=#a6e22e>getLong</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    

    <color=#75715e>/**</color>
<color=#75715e>     * Container for byte to int and int to byte transformation</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>ByteBuffer</color> <color=#f8f8f2>bufferInt</color> <color=#f92672>=</color> <color=#f8f8f2>ByteBuffer</color><color=#f8f8f2>.</color><color=#a6e22e>allocate</color><color=#f8f8f2>(</color><color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>BYTES</color><color=#f8f8f2>);</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Transforms Integer to byte array</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param x         input integer</color>
<color=#75715e>     * @return          byte array</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>intToBytes</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bufferInt</color><color=#f8f8f2>.</color><color=#a6e22e>clear</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>bufferInt</color><color=#f8f8f2>.</color><color=#a6e22e>putInt</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>);</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>bufferInt</color><color=#f8f8f2>.</color><color=#a6e22e>array</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * Transforms byte array to Integer</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param bytes     bytes to be transformed to int</color>
<color=#75715e>     * @return          int value</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>bytesToInt</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bufferInt</color><color=#f8f8f2>.</color><color=#a6e22e>put</color><color=#f8f8f2>(</color><color=#f8f8f2>bytes</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>bytes</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>bufferInt</color><color=#f8f8f2>.</color><color=#a6e22e>flip</color><color=#f8f8f2>();</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>bufferInt</color><color=#f8f8f2>.</color><color=#a6e22e>getInt</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    
    <color=#66d9ef>public</color> <color=#f8f8f2>JSONArray</color> <color=#a6e22e>jsonParserArr</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>f</color><color=#f8f8f2>){</color>
        <color=#f8f8f2>BufferedReader</color> <color=#f8f8f2>br</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>all</color> <color=#f92672>=</color> <color=#e6db74>""</color><color=#f8f8f2>;</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>br</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedReader</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>FileReader</color><color=#f8f8f2>(</color><color=#f8f8f2>f</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>line</color><color=#f8f8f2>;</color>
            <color=#66d9ef>while</color> <color=#f8f8f2>((</color><color=#f8f8f2>line</color> <color=#f92672>=</color> <color=#f8f8f2>br</color><color=#f8f8f2>.</color><color=#a6e22e>readLine</color><color=#f8f8f2>())</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>all</color><color=#f92672>+=</color><color=#f8f8f2>line</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color><color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>JSONArray</color><color=#f8f8f2>(</color><color=#f8f8f2>all</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    
    <color=#66d9ef>public</color> <color=#f8f8f2>JSONObject</color> <color=#a6e22e>jsonParserObj</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>f</color><color=#f8f8f2>){</color>
        <color=#f8f8f2>BufferedReader</color> <color=#f8f8f2>br</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>String</color> <color=#f8f8f2>all</color> <color=#f92672>=</color> <color=#e6db74>""</color><color=#f8f8f2>;</color>
        <color=#66d9ef>try</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>br</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedReader</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>FileReader</color><color=#f8f8f2>(</color><color=#f8f8f2>f</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>String</color> <color=#f8f8f2>line</color><color=#f8f8f2>;</color>
            <color=#66d9ef>while</color> <color=#f8f8f2>((</color><color=#f8f8f2>line</color> <color=#f92672>=</color> <color=#f8f8f2>br</color><color=#f8f8f2>.</color><color=#a6e22e>readLine</color><color=#f8f8f2>())</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>all</color><color=#f92672>+=</color><color=#f8f8f2>line</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color><color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>JSONObject</color><color=#f8f8f2>(</color><color=#f8f8f2>all</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>