<color=#f92672>package</color> <color=#f8f8f2>test.java.components.hash.algorithms</color><color=#f8f8f2>;</color>

<color=#75715e>/**</color>
<color=#75715e> * @author Max Weber</color>
<color=#75715e> * hex2bytes and bytes2hex are from </color>
<color=#75715e> * https://github.com/BLAKE2/</color>
<color=#75715e> */</color>
<color=#f92672>import static</color> <color=#f8f8f2>org.junit.Assert.*</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.io.BufferedReader</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.File</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.io.FileReader</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>org.json.JSONArray</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>org.json.JSONObject</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>org.junit.Test</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>main.java.Helper</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>main.java.components.hash.algorithms.Blake2b</color><color=#f8f8f2>;</color>

<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Blake2bTest</color> <color=#f8f8f2>{</color>
	
	<color=#66d9ef>static</color> <color=#66d9ef>class</color> <color=#a6e22e>TestVector</color> <color=#f8f8f2>{</color>
		<color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#f8f8f2>Input</color><color=#f8f8f2>,</color> <color=#f8f8f2>Key</color><color=#f8f8f2>,</color> <color=#f8f8f2>Hash</color><color=#f8f8f2>;</color>
		
		<color=#66d9ef>public</color> <color=#a6e22e>TestVector</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>in</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>hash</color><color=#f8f8f2>){</color>
			<color=#f8f8f2>Input</color> <color=#f92672>=</color> <color=#f8f8f2>in</color><color=#f8f8f2>;</color>
			<color=#f8f8f2>Key</color> <color=#f92672>=</color> <color=#f8f8f2>key</color><color=#f8f8f2>;</color>
			<color=#f8f8f2>Hash</color> <color=#f92672>=</color> <color=#f8f8f2>hash</color><color=#f8f8f2>;</color>			
		<color=#f8f8f2>}</color>
	<color=#f8f8f2>};</color>
	 
	<color=#66d9ef>private</color> <color=#f8f8f2>Helper</color> <color=#f8f8f2>helper</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Helper</color><color=#f8f8f2>();</color>
	
	<color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>String</color> <color=#f8f8f2>testVectorSource</color> <color=#f92672>=</color> 
			<color=#e6db74>"src/test/resources/blake2b.json"</color><color=#f8f8f2>;</color>
	<color=#66d9ef>private</color> <color=#66d9ef>static</color> <color=#66d9ef>final</color> <color=#f8f8f2>File</color> <color=#f8f8f2>fileBlake2b</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>File</color><color=#f8f8f2>(</color><color=#f8f8f2>testVectorSource</color><color=#f8f8f2>);</color>
	
	<color=#f8f8f2>String</color> <color=#f8f8f2>input1</color> <color=#f92672>=</color> <color=#e6db74>""</color><color=#f8f8f2>;</color>
	<color=#f8f8f2>String</color> <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#e6db74>"000102030405060708090a0b0c0d0e0f10111213"</color>
			<color=#f92672>+</color> <color=#e6db74>"1415161718191a1b1c1d1e1f2021222324252627282"</color>
			<color=#f92672>+</color> <color=#e6db74>"92a2b2c2d2e2f303132333435363738393a3b3c3d3e"</color>
			<color=#f92672>+</color> <color=#e6db74>"3f"</color><color=#f8f8f2>;</color>
	<color=#f8f8f2>String</color> <color=#f8f8f2>hash1</color> <color=#f92672>=</color> <color=#e6db74>"10ebb67700b1868efb4417987acf4690ae9d97"</color>
			<color=#f92672>+</color> <color=#e6db74>"2fb7a590c2f02871799aaa4786b5e996e8f0f4eb981"</color>
			<color=#f92672>+</color> <color=#e6db74>"fc214b005f42d2ff4233499391653df7aefcbc13fc5"</color>
			<color=#f92672>+</color> <color=#e6db74>"1568"</color><color=#f8f8f2>;</color>
	<color=#f8f8f2>String</color> <color=#f8f8f2>zeroes</color> <color=#f92672>=</color> <color=#e6db74>"0000000000000000000000000000000000000"</color>
			<color=#f92672>+</color> <color=#e6db74>"0000000000000000000000000000000000000000000"</color>
			<color=#f92672>+</color> <color=#e6db74>"0000000000000000000000000000000000000000000"</color>
			<color=#f92672>+</color> <color=#e6db74>"0000000"</color><color=#f8f8f2>;</color>
	<color=#f8f8f2>String</color> <color=#f8f8f2>zeroesRes</color> <color=#f92672>=</color> <color=#e6db74>"061D94FA094482C5688AB83995F17AEC64"</color>
			<color=#f92672>+</color> <color=#e6db74>"F955D59E9EB406EA9BBA84DF7D6DA86D1C88D519669"</color>
			<color=#f92672>+</color> <color=#e6db74>"159E409A926A1D9E151A4F69EF110EAD0A1E5B62A42"</color>
			<color=#f92672>+</color> <color=#e6db74>"E15C396F"</color><color=#f8f8f2>;</color>
	<color=#f8f8f2>String</color> <color=#f8f8f2>zeroes2</color> <color=#f92672>=</color> <color=#e6db74>"0100000000000000000000000000000000000"</color>
			<color=#f92672>+</color> <color=#e6db74>"0000000000000000000000000000000000000000000"</color>
			<color=#f92672>+</color> <color=#e6db74>"0000000000000000000000000000000000000000000"</color>
			<color=#f92672>+</color> <color=#e6db74>"0000000"</color><color=#f8f8f2>;</color>
	<color=#f8f8f2>String</color> <color=#f8f8f2>zeroesRes2</color> <color=#f92672>=</color> <color=#e6db74>"A4C37D9E1FD03BA5E8EB64D307225A959"</color>
			<color=#f92672>+</color> <color=#e6db74>"50A2211BDC83B4C1009600DCAD956182B5B5639B860"</color>
			<color=#f92672>+</color> <color=#e6db74>"E8FC583A4A482FAC45E8CBA97996737B4E376C884C8"</color>
			<color=#f92672>+</color> <color=#e6db74>"0BFD7D010"</color><color=#f8f8f2>;</color>
	
	<color=#75715e>/**</color>
<color=#75715e>	 * simple test example for Blake2b</color>
<color=#75715e>	 * one vector from "https://github.com/BLAKE2/"</color>
<color=#75715e>	 */</color>
	<color=#a6e22e>@Test</color>
	<color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>testsimple</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
		
		<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>anyByteArray1</color> <color=#f92672>=</color> <color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>hex2bytes</color><color=#f8f8f2>(</color><color=#f8f8f2>input1</color><color=#f8f8f2>);</color>
		<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>exp</color> <color=#f92672>=</color> <color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>hex2bytes</color><color=#f8f8f2>(</color><color=#f8f8f2>hash1</color><color=#f8f8f2>);</color>
		<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>keyInBytes</color> <color=#f92672>=</color> <color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>hex2bytes</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>);</color>
		
		<color=#f8f8f2>Blake2b</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Blake2b</color><color=#f8f8f2>(</color><color=#f8f8f2>keyInBytes</color><color=#f8f8f2>);</color>
		<color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color> <color=#f8f8f2>anyByteArray1</color> <color=#f8f8f2>);</color>
		<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>hash</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>64</color><color=#f92672>]</color><color=#f8f8f2>;</color>
		<color=#f8f8f2>hash</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>doFinal</color><color=#f8f8f2>();</color>
		  
		<color=#f8f8f2>assertTrue</color><color=#f8f8f2>(</color><color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>bytes2hex</color><color=#f8f8f2>(</color><color=#f8f8f2>hash</color><color=#f8f8f2>).</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>bytes2hex</color><color=#f8f8f2>(</color><color=#f8f8f2>exp</color><color=#f8f8f2>)));</color>
	<color=#f8f8f2>}</color>
	
	<color=#a6e22e>@Test</color>
	<color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>testsimple2</color> <color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
		<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>anyByteArray1</color> <color=#f92672>=</color> <color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>hex2bytes</color><color=#f8f8f2>(</color><color=#f8f8f2>input1</color><color=#f8f8f2>);</color>
		
		<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>exp</color> <color=#f92672>=</color> <color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>hex2bytes</color><color=#f8f8f2>(</color><color=#f8f8f2>hash1</color><color=#f8f8f2>);</color>
		<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>keyInBytes</color> <color=#f92672>=</color> <color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>hex2bytes</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>);</color>
		
		<color=#f8f8f2>Blake2b</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Blake2b</color><color=#f8f8f2>(</color><color=#f8f8f2>keyInBytes</color><color=#f8f8f2>);</color>
		<color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color> <color=#f8f8f2>anyByteArray1</color> <color=#f8f8f2>);</color>
		<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>hash</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>64</color><color=#f92672>]</color><color=#f8f8f2>;</color>
		<color=#f8f8f2>hash</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>doFinal</color><color=#f8f8f2>();</color>
		  
		<color=#f8f8f2>assertTrue</color><color=#f8f8f2>(</color><color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>bytes2hex</color><color=#f8f8f2>(</color><color=#f8f8f2>hash</color><color=#f8f8f2>).</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>bytes2hex</color><color=#f8f8f2>(</color><color=#f8f8f2>exp</color><color=#f8f8f2>)));</color>
	<color=#f8f8f2>}</color>
	
	<color=#a6e22e>@Test</color>
	<color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>testZeroes</color><color=#f8f8f2>(){</color>
		<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>anyByteArray1</color> <color=#f92672>=</color> <color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>hex2bytes</color><color=#f8f8f2>(</color><color=#f8f8f2>zeroes</color><color=#f8f8f2>);</color>
		<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>exp</color> <color=#f92672>=</color> <color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>hex2bytes</color><color=#f8f8f2>(</color><color=#f8f8f2>zeroesRes</color><color=#f8f8f2>);</color>
		
		<color=#f8f8f2>Blake2b</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Blake2b</color><color=#f8f8f2>();</color>
		<color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color> <color=#f8f8f2>anyByteArray1</color> <color=#f8f8f2>);</color>
		<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>hash</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>64</color><color=#f92672>]</color><color=#f8f8f2>;</color>
		<color=#f8f8f2>hash</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>doFinal</color><color=#f8f8f2>();</color>
		
		<color=#f8f8f2>assertTrue</color><color=#f8f8f2>(</color><color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>bytes2hex</color><color=#f8f8f2>(</color><color=#f8f8f2>hash</color><color=#f8f8f2>).</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>bytes2hex</color><color=#f8f8f2>(</color><color=#f8f8f2>exp</color><color=#f8f8f2>)));</color>
	<color=#f8f8f2>}</color>
	
	<color=#a6e22e>@Test</color>
	<color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>testZeroes2</color><color=#f8f8f2>(){</color>
		<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>anyByteArray1</color> <color=#f92672>=</color> <color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>hex2bytes</color><color=#f8f8f2>(</color><color=#f8f8f2>zeroes2</color><color=#f8f8f2>);</color>
		<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>exp</color> <color=#f92672>=</color> <color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>hex2bytes</color><color=#f8f8f2>(</color><color=#f8f8f2>zeroesRes2</color><color=#f8f8f2>);</color>
		
		<color=#f8f8f2>Blake2b</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Blake2b</color><color=#f8f8f2>();</color>
		<color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color> <color=#f8f8f2>anyByteArray1</color> <color=#f8f8f2>);</color>
		<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>hash</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>64</color><color=#f92672>]</color><color=#f8f8f2>;</color>
		<color=#f8f8f2>hash</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>doFinal</color><color=#f8f8f2>();</color>
		
<color=#75715e>//		System.out.println(helper.bytes2hex(hash));</color>
		
		<color=#f8f8f2>assertTrue</color><color=#f8f8f2>(</color><color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>bytes2hex</color><color=#f8f8f2>(</color><color=#f8f8f2>hash</color><color=#f8f8f2>).</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>bytes2hex</color><color=#f8f8f2>(</color><color=#f8f8f2>exp</color><color=#f8f8f2>)));</color>
	<color=#f8f8f2>}</color>
	
	<color=#75715e>/**</color>
<color=#75715e>	 * parsing and testing against all official test vectors </color>
<color=#75715e>	 * from "https://github.com/BLAKE2/"</color>
<color=#75715e>	 */</color>
	<color=#a6e22e>@Test</color>
	<color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>testAllVectors</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
		
		<color=#f8f8f2>JSONArray</color> <color=#f8f8f2>jsonObj</color> <color=#f92672>=</color> <color=#f8f8f2>jsonParser</color><color=#f8f8f2>(</color><color=#f8f8f2>fileBlake2b</color><color=#f8f8f2>);</color>
		<color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672><</color><color=#f8f8f2>jsonObj</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color> <color=#f92672>++</color><color=#f8f8f2>i</color> <color=#f8f8f2>){</color>
			<color=#f8f8f2>JSONObject</color> <color=#f8f8f2>o</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>JSONObject</color><color=#f8f8f2>)</color> <color=#f8f8f2>jsonObj</color><color=#f8f8f2>.</color><color=#a6e22e>get</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>);</color>
			
			<color=#f8f8f2>JSONObject</color> <color=#f8f8f2>inputs</color> <color=#f92672>=</color> <color=#f8f8f2>o</color><color=#f8f8f2>.</color><color=#a6e22e>getJSONObject</color><color=#f8f8f2>(</color><color=#e6db74>"inputs"</color><color=#f8f8f2>);</color>
			<color=#f8f8f2>JSONObject</color> <color=#f8f8f2>outputs</color> <color=#f92672>=</color> <color=#f8f8f2>o</color><color=#f8f8f2>.</color><color=#a6e22e>getJSONObject</color><color=#f8f8f2>(</color><color=#e6db74>"outputs"</color><color=#f8f8f2>);</color>
			
			<color=#f8f8f2>String</color> <color=#f8f8f2>in</color> <color=#f92672>=</color> <color=#f8f8f2>inputs</color><color=#f8f8f2>.</color><color=#a6e22e>getString</color><color=#f8f8f2>(</color><color=#e6db74>"in"</color><color=#f8f8f2>);</color>
			<color=#f8f8f2>String</color> <color=#f8f8f2>k</color> <color=#f92672>=</color> <color=#f8f8f2>inputs</color><color=#f8f8f2>.</color><color=#a6e22e>getString</color><color=#f8f8f2>(</color><color=#e6db74>"key"</color><color=#f8f8f2>);</color>
			
			<color=#f8f8f2>String</color> <color=#f8f8f2>res</color> <color=#f92672>=</color> <color=#f8f8f2>outputs</color><color=#f8f8f2>.</color><color=#a6e22e>getString</color><color=#f8f8f2>(</color><color=#e6db74>"res"</color><color=#f8f8f2>);</color>
			
			<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>input</color> <color=#f92672>=</color> <color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>hex2bytes</color><color=#f8f8f2>(</color><color=#f8f8f2>in</color><color=#f8f8f2>);</color>
			<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color>   <color=#f92672>=</color> <color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>hex2bytes</color><color=#f8f8f2>(</color><color=#f8f8f2>k</color><color=#f8f8f2>);</color>
			<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>hash</color>  <color=#f92672>=</color> <color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>hex2bytes</color><color=#f8f8f2>(</color><color=#f8f8f2>res</color><color=#f8f8f2>);</color>
		
			<color=#f8f8f2>Blake2b</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Blake2b</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>);</color>
			<color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#f8f8f2>input</color><color=#f8f8f2>);</color>
			<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>output</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>64</color><color=#f92672>]</color><color=#f8f8f2>;</color>
			<color=#f8f8f2>output</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>doFinal</color><color=#f8f8f2>();</color>
			
			<color=#f8f8f2>assertTrue</color><color=#f8f8f2>(</color><color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>bytes2hex</color><color=#f8f8f2>(</color><color=#f8f8f2>hash</color><color=#f8f8f2>).</color><color=#a6e22e>equals</color><color=#f8f8f2>(</color><color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>bytes2hex</color><color=#f8f8f2>(</color><color=#f8f8f2>output</color><color=#f8f8f2>)));</color>
		<color=#f8f8f2>}</color>
	<color=#f8f8f2>}</color>
	
	<color=#75715e>/**</color>
<color=#75715e>	 * Test output Length of h with keyed hashing</color>
<color=#75715e>	 */</color>
	<color=#a6e22e>@Test</color>
	<color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>testOutputLength1</color><color=#f8f8f2>(){</color>
		<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>anyByteArray1</color> <color=#f92672>=</color> <color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>hex2bytes</color><color=#f8f8f2>(</color><color=#f8f8f2>input1</color><color=#f8f8f2>);</color>
		<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>keyInBytes</color> <color=#f92672>=</color> <color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>hex2bytes</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>);</color>
		
		<color=#f8f8f2>Blake2b</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Blake2b</color><color=#f8f8f2>(</color><color=#f8f8f2>keyInBytes</color><color=#f8f8f2>);</color>
		<color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color> <color=#f8f8f2>anyByteArray1</color> <color=#f8f8f2>);</color>
		<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>hash</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>64</color><color=#f92672>]</color><color=#f8f8f2>;</color>
		<color=#f8f8f2>hash</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>doFinal</color><color=#f8f8f2>();</color>
		
		<color=#f8f8f2>assertTrue</color><color=#f8f8f2>(</color><color=#f8f8f2>hash</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>==</color><color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>getOutputSize</color><color=#f8f8f2>());</color>
	<color=#f8f8f2>}</color>
	
	<color=#75715e>/**</color>
<color=#75715e>	 * Test output Length of h without keyed hashing</color>
<color=#75715e>	 */</color>
	<color=#a6e22e>@Test</color>
	<color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>testOutputLength2</color><color=#f8f8f2>(){</color>
		<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>anyByteArray1</color> <color=#f92672>=</color> <color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>hex2bytes</color><color=#f8f8f2>(</color><color=#f8f8f2>input1</color><color=#f8f8f2>);</color>
		
		<color=#f8f8f2>Blake2b</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Blake2b</color><color=#f8f8f2>();</color>
		<color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color> <color=#f8f8f2>anyByteArray1</color> <color=#f8f8f2>);</color>
		<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>hash</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>64</color><color=#f92672>]</color><color=#f8f8f2>;</color>
		<color=#f8f8f2>hash</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>doFinal</color><color=#f8f8f2>();</color>
		
		<color=#f8f8f2>assertTrue</color><color=#f8f8f2>(</color><color=#f8f8f2>hash</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>==</color><color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>getOutputSize</color><color=#f8f8f2>());</color>
	<color=#f8f8f2>}</color>
	
	<color=#75715e>/**</color>
<color=#75715e>	 * Test output Length of h without key and</color>
<color=#75715e>	 * empty input</color>
<color=#75715e>	 */</color>
	<color=#a6e22e>@Test</color>
	<color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>testOutputLength3</color><color=#f8f8f2>(){</color>
		<color=#f8f8f2>Blake2b</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Blake2b</color><color=#f8f8f2>();</color>
		<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>hash</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>64</color><color=#f92672>]</color><color=#f8f8f2>;</color>
		<color=#f8f8f2>hash</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>doFinal</color><color=#f8f8f2>();</color>
		
		<color=#f8f8f2>assertTrue</color><color=#f8f8f2>(</color><color=#f8f8f2>hash</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>==</color><color=#f8f8f2>b</color><color=#f8f8f2>.</color><color=#a6e22e>getOutputSize</color><color=#f8f8f2>());</color>
	<color=#f8f8f2>}</color>
	
	<color=#a6e22e>@Test</color>
	<color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>testBlake2bConstructor</color><color=#f8f8f2>(){</color>
		<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color> <color=#f92672>=</color> <color=#f8f8f2>{};</color>
		<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>_salt</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>16</color><color=#f92672>]</color><color=#f8f8f2>;</color>
		<color=#66d9ef>int</color> <color=#f8f8f2>_digestLength</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
		<color=#66d9ef>byte</color><color=#f92672>[]</color><color=#f8f8f2>_personalization</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>16</color><color=#f92672>]</color><color=#f8f8f2>;</color>
		
		<color=#66d9ef>new</color> <color=#f8f8f2>Blake2b</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#f8f8f2>_digestLength</color><color=#f8f8f2>,</color> <color=#f8f8f2>_salt</color><color=#f8f8f2>,</color> <color=#f8f8f2>_personalization</color><color=#f8f8f2>);</color>
		
		<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>act</color> <color=#f92672>=</color> <color=#f8f8f2>{};</color>
		<color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>exp</color> <color=#f92672>=</color> <color=#f8f8f2>{};</color>
		
		<color=#f8f8f2>assertArrayEquals</color><color=#f8f8f2>(</color><color=#f8f8f2>exp</color><color=#f8f8f2>,</color> <color=#f8f8f2>act</color><color=#f8f8f2>);</color>
	<color=#f8f8f2>}</color>
	
		
<color=#75715e>//====================================================================</color>
<color=#75715e>// Helper functions:</color>
	
	<color=#75715e>/**</color>
<color=#75715e>	 * Helper-function</color>
<color=#75715e>	 * reads test vector file</color>
<color=#75715e>	 * creates test vector object </color>
<color=#75715e>	 */</color>
	
	<color=#66d9ef>private</color> <color=#f8f8f2>JSONArray</color> <color=#a6e22e>jsonParser</color><color=#f8f8f2>(</color><color=#f8f8f2>File</color> <color=#f8f8f2>f</color><color=#f8f8f2>){</color>
		<color=#f8f8f2>BufferedReader</color> <color=#f8f8f2>br</color><color=#f8f8f2>;</color>
		<color=#f8f8f2>String</color> <color=#f8f8f2>all</color> <color=#f92672>=</color> <color=#e6db74>""</color><color=#f8f8f2>;</color>
		<color=#66d9ef>try</color> <color=#f8f8f2>{</color>
			<color=#f8f8f2>br</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>BufferedReader</color><color=#f8f8f2>(</color><color=#66d9ef>new</color> <color=#f8f8f2>FileReader</color><color=#f8f8f2>(</color><color=#f8f8f2>f</color><color=#f8f8f2>));</color>
			<color=#f8f8f2>String</color> <color=#f8f8f2>line</color><color=#f8f8f2>;</color>
			<color=#66d9ef>while</color> <color=#f8f8f2>((</color><color=#f8f8f2>line</color> <color=#f92672>=</color> <color=#f8f8f2>br</color><color=#f8f8f2>.</color><color=#a6e22e>readLine</color><color=#f8f8f2>())</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
				<color=#f8f8f2>all</color><color=#f92672>+=</color><color=#f8f8f2>line</color><color=#f8f8f2>;</color>
			<color=#f8f8f2>}</color>
		<color=#f8f8f2>}</color><color=#66d9ef>catch</color> <color=#f8f8f2>(</color><color=#f8f8f2>Exception</color> <color=#f8f8f2>e</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
		<color=#f8f8f2>}</color>
		<color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#f8f8f2>JSONArray</color><color=#f8f8f2>(</color><color=#f8f8f2>all</color><color=#f8f8f2>);</color>
	<color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>