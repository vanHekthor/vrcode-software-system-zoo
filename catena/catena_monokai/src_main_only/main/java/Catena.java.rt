<color=#f92672>package</color> <color=#f8f8f2>main.java</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.Arrays</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>java.util.Random</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>main.java.components.gamma.GammaInterface</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>main.java.components.graph.GraphInterface</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>main.java.components.graph.algorithms.IdxInterface</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>main.java.components.hash.HashInterface</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>main.java.components.phi.PhiInterface</color><color=#f8f8f2>;</color>

<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Catena</color> <color=#f8f8f2>{</color>
    
    <color=#66d9ef>private</color> <color=#f8f8f2>Helper</color> <color=#f8f8f2>helper</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Helper</color><color=#f8f8f2>();</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * versionID decodes the version of catena</color>
<color=#75715e>     * possible: "Dragonfly", "Dragonfly-Full", Butterfly", Butterfly-Full"</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>String</color> <color=#f8f8f2>_vId</color><color=#f8f8f2>;</color>
    
    <color=#66d9ef>private</color> <color=#f8f8f2>HashInterface</color>   <color=#f8f8f2>_h</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>HashInterface</color>   <color=#f8f8f2>_hPrime</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>GammaInterface</color>  <color=#f8f8f2>_gamma</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>GraphInterface</color>  <color=#f8f8f2>_f</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#f8f8f2>PhiInterface</color>    <color=#f8f8f2>_phi</color><color=#f8f8f2>;</color>
    
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>_d</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>         <color=#75715e>// 0 = Password Scrambling (Default)</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>_n</color><color=#f8f8f2>;</color>             <color=#75715e>// H output size</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>_k</color><color=#f8f8f2>;</color>             <color=#75715e>// H' output size</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>_gLow</color><color=#f8f8f2>;</color>          
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>_gHigh</color><color=#f8f8f2>;</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>_lambda</color><color=#f8f8f2>;</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * Main function of catena to hash a password</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param pwd           Password to be hashed</color>
<color=#75715e>     * @param salt          Salt of arbitrary length</color>
<color=#75715e>     * @param publicInput   User choosen public input</color>
<color=#75715e>     * @param gamma         Input for graph size</color>
<color=#75715e>     * @param m             User desired output length of hash</color>
<color=#75715e>     * </color>
<color=#75715e>     * @return xTrun        Hash of pwd</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>catena</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pwd</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>salt</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>publicInput</color><color=#f8f8f2>,</color>
             <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>gamma</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>m</color><color=#f8f8f2>){</color>
        
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>t</color> <color=#f92672>=</color> <color=#f8f8f2>compTweak</color><color=#f8f8f2>(</color><color=#f8f8f2>_vId</color><color=#f8f8f2>,</color> <color=#f8f8f2>_d</color><color=#f8f8f2>,</color> <color=#f8f8f2>_lambda</color><color=#f8f8f2>,</color> <color=#f8f8f2>m</color><color=#f8f8f2>,</color> <color=#f8f8f2>salt</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>,</color> <color=#f8f8f2>publicInput</color><color=#f8f8f2>);</color>
        
        <color=#f8f8f2>_h</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>concateByteArrays</color><color=#f8f8f2>(</color><color=#f8f8f2>t</color><color=#f8f8f2>,</color> <color=#f8f8f2>pwd</color><color=#f8f8f2>,</color> <color=#f8f8f2>salt</color><color=#f8f8f2>));</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>_h</color><color=#f8f8f2>.</color><color=#a6e22e>doFinal</color><color=#f8f8f2>();</color>
        
        <color=#f8f8f2>erasePwd</color><color=#f8f8f2>(</color><color=#f8f8f2>pwd</color><color=#f8f8f2>);</color>
        
        <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>flap</color><color=#f8f8f2>(((</color><color=#f8f8f2>_gLow</color><color=#f92672>+</color><color=#ae81ff>1</color><color=#f8f8f2>)</color><color=#f92672>/</color><color=#ae81ff>2</color><color=#f8f8f2>),</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>gamma</color><color=#f8f8f2>);</color>
        
        <color=#f8f8f2>_h</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>_h</color><color=#f8f8f2>.</color><color=#a6e22e>doFinal</color><color=#f8f8f2>();</color>
        
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>gByte</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>g</color> <color=#f92672>=</color> <color=#f8f8f2>_gLow</color><color=#f8f8f2>;</color> <color=#f8f8f2>g</color> <color=#f92672><=</color> <color=#f8f8f2>_gHigh</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>g</color><color=#f8f8f2>){</color>
<color=#75715e>//          System.out.println("G: " + g);</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672><</color> <color=#f8f8f2>_n</color><color=#f8f8f2>){</color>
                <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>paddWithZero</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>_n</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            
            <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>flap</color><color=#f8f8f2>(</color><color=#f8f8f2>g</color><color=#f8f8f2>,</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>gamma</color><color=#f8f8f2>);</color>
            
            <color=#f8f8f2>gByte</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color><color=#f8f8f2>g</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>_h</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>concateByteArrays</color><color=#f8f8f2>(</color><color=#f8f8f2>gByte</color><color=#f8f8f2>,</color> <color=#f8f8f2>x</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>_h</color><color=#f8f8f2>.</color><color=#a6e22e>doFinal</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>x</color> <color=#f92672>=</color> <color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>truncate</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>m</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>x</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * flap function from catena specification</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param g</color>
<color=#75715e>     * @param xIn</color>
<color=#75715e>     * @param gamma</color>
<color=#75715e>     * @return</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>flap</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>g</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>xIn</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>gamma</color><color=#f8f8f2>){</color>
        
        <color=#f8f8f2>_hPrime</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
        
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>xHinit</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>iterations</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color><color=#f8f8f2>)</color><color=#f8f8f2>Math</color><color=#f8f8f2>.</color><color=#a6e22e>pow</color><color=#f8f8f2>(</color><color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>g</color><color=#f8f8f2>);</color>
        
        <color=#66d9ef>byte</color><color=#f92672>[][]</color> <color=#f8f8f2>v</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>iterations</color><color=#f92672>+</color><color=#ae81ff>2</color><color=#f92672>][</color><color=#f8f8f2>_k</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        
        <color=#f8f8f2>xHinit</color> <color=#f92672>=</color> <color=#f8f8f2>hInit</color><color=#f8f8f2>(</color><color=#f8f8f2>xIn</color><color=#f8f8f2>);</color>
        
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>xHinit</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>_k</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>xHinit</color><color=#f8f8f2>,</color> <color=#f8f8f2>_k</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>_k</color><color=#f8f8f2>);</color>
        
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color><color=#f92672>=</color><color=#ae81ff>2</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672><</color><color=#f8f8f2>iterations</color><color=#f92672>+</color><color=#ae81ff>2</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>){</color>
<color=#75715e>//          if (i%10000 == 0) {</color>
<color=#75715e>//              System.out.println("Flap iterations " + i + " / " + iterations);</color>
<color=#75715e>//          }</color>
            <color=#f8f8f2>_hPrime</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>concateByteArrays</color><color=#f8f8f2>(</color><color=#f8f8f2>v</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>-</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#f8f8f2>v</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>-</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>v</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>_hPrime</color><color=#f8f8f2>.</color><color=#a6e22e>doFinal</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
<color=#75715e>//      System.out.println("Now out.");</color>
        
        <color=#66d9ef>byte</color><color=#f92672>[][]</color> <color=#f8f8f2>v2</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>iterations</color><color=#f92672>][</color><color=#f8f8f2>_k</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color> <color=#f8f8f2>v</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#f8f8f2>v2</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>v2</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f8f8f2>);</color>
        
        <color=#f8f8f2>_hPrime</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
        
        <color=#f8f8f2>v2</color> <color=#f92672>=</color> <color=#f8f8f2>gamma</color><color=#f8f8f2>(</color><color=#f8f8f2>g</color><color=#f8f8f2>,</color> <color=#f8f8f2>v2</color><color=#f8f8f2>,</color> <color=#f8f8f2>gamma</color><color=#f8f8f2>);</color>
        
<color=#75715e>//      System.out.println("Now out gamma.");</color>
        
        <color=#f8f8f2>_hPrime</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
        
        <color=#f8f8f2>v2</color> <color=#f92672>=</color> <color=#f8f8f2>f</color><color=#f8f8f2>(</color><color=#f8f8f2>g</color><color=#f8f8f2>,</color> <color=#f8f8f2>v2</color><color=#f8f8f2>,</color> <color=#f8f8f2>_lambda</color><color=#f8f8f2>);</color>
        
<color=#75715e>//      System.out.println("Now out f.");</color>
        
        <color=#f8f8f2>_hPrime</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>v2</color> <color=#f92672>=</color> <color=#f8f8f2>phi</color><color=#f8f8f2>(</color><color=#f8f8f2>g</color><color=#f8f8f2>,</color> <color=#f8f8f2>v2</color><color=#f8f8f2>,</color> <color=#f8f8f2>v2</color><color=#f92672>[</color><color=#f8f8f2>v2</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>-</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>);</color>
        
<color=#75715e>//      System.out.println("Now out phi.");</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>v2</color><color=#f92672>[</color><color=#f8f8f2>v2</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f92672>-</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    
    <color=#66d9ef>public</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>flapPub</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>g</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>xIn</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>gamma</color><color=#f8f8f2>){</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>flap</color><color=#f8f8f2>(</color><color=#f8f8f2>g</color><color=#f8f8f2>,</color> <color=#f8f8f2>xIn</color><color=#f8f8f2>,</color> <color=#f8f8f2>gamma</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    
    
    <color=#75715e>/**</color>
<color=#75715e>     * Initialisation of the 2 values for flap rounds</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param x     Input Array</color>
<color=#75715e>     * @return      2 hashed values v_-1, V_-2 in one byte array</color>
<color=#75715e>     *              (output is already splitted in the middle and swapped)</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>hInit</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>x</color><color=#f8f8f2>){</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#ae81ff>2</color><color=#f92672>*</color><color=#f8f8f2>_k</color><color=#f92672>/</color><color=#f8f8f2>_n</color><color=#f8f8f2>;</color>
        <color=#66d9ef>byte</color><color=#f92672>[][]</color> <color=#f8f8f2>xLoop</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>l</color><color=#f92672>][</color><color=#f8f8f2>_n</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>iByte</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color><color=#f92672>=</color><color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672><=</color> <color=#f8f8f2>l</color><color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>){</color>
            <color=#f8f8f2>iByte</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>i</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>_h</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>concateByteArrays</color><color=#f8f8f2>(</color><color=#f8f8f2>iByte</color><color=#f8f8f2>,</color> <color=#f8f8f2>x</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>xLoop</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>_h</color><color=#f8f8f2>.</color><color=#a6e22e>doFinal</color><color=#f8f8f2>();</color>
            <color=#f8f8f2>_h</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>twoDimByteArrayToOne</color><color=#f8f8f2>(</color><color=#f8f8f2>xLoop</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * No clue how to test private functions so this wrapper exists</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param x     Initial value to instantiate v-2 and v-1</color>
<color=#75715e>     * @return      v-2 and v-1 combined in one array</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>testHInit</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>x</color><color=#f8f8f2>){</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>hInit</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * salt dependent update with random access</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param g     garlic</color>
<color=#75715e>     * @param x     hash array</color>
<color=#75715e>     * @param gamma gamma</color>
<color=#75715e>     * @return      hash array</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>byte</color><color=#f92672>[][]</color> <color=#a6e22e>gamma</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>g</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[][]</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>gamma</color><color=#f8f8f2>){</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>_gamma</color><color=#f8f8f2>.</color><color=#a6e22e>gamma</color><color=#f8f8f2>(</color><color=#f8f8f2>g</color><color=#f8f8f2>,</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>gamma</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * Memory expensive graph Layer</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param x     hash input</color>
<color=#75715e>     * @return      hash output</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>byte</color><color=#f92672>[][]</color> <color=#a6e22e>f</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>g</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[][]</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>lambda</color><color=#f8f8f2>){</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>_f</color><color=#f8f8f2>.</color><color=#a6e22e>graph</color><color=#f8f8f2>(</color><color=#f8f8f2>g</color><color=#f8f8f2>,</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>lambda</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * phi function from catena specification</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param x     hash input</color>
<color=#75715e>     * @return      hash output</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>byte</color><color=#f92672>[][]</color> <color=#a6e22e>phi</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>garlic</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[][]</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>m</color><color=#f8f8f2>){</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>_phi</color><color=#f8f8f2>.</color><color=#a6e22e>phi</color><color=#f8f8f2>(</color><color=#f8f8f2>garlic</color><color=#f8f8f2>,</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#f8f8f2>m</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * Combine Tweak Array</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param vId       Version ID</color>
<color=#75715e>     * @param mode      Mode of catena</color>
<color=#75715e>     * @param lambda    Lambda</color>
<color=#75715e>     * @param outLen    Output Length</color>
<color=#75715e>     * @param sLen      Salt Length</color>
<color=#75715e>     * @param aData     Additional Data</color>
<color=#75715e>     * @return          Combined Tweak</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>compTweak</color><color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>vId</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>mode</color><color=#f8f8f2>,</color> 
            <color=#66d9ef>int</color> <color=#f8f8f2>lambda</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>outLen</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>sLen</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>aData</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>modeByte</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>lambdaByte</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>outLenByte</color> <color=#f92672>=</color> <color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>intToByteArrayLittleEndian</color><color=#f8f8f2>(</color><color=#f8f8f2>outLen</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>sLenByte</color> <color=#f92672>=</color> <color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>intToByteArrayLittleEndian</color><color=#f8f8f2>(</color><color=#f8f8f2>sLen</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>);</color>
        
        <color=#f8f8f2>_h</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>((</color><color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>string2Bytes</color><color=#f8f8f2>(</color><color=#f8f8f2>vId</color><color=#f8f8f2>)));</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>vIdH</color> <color=#f92672>=</color> <color=#f8f8f2>_h</color><color=#f8f8f2>.</color><color=#a6e22e>doFinal</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>_h</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>

        <color=#f8f8f2>_h</color><color=#f8f8f2>.</color><color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#f8f8f2>aData</color><color=#f8f8f2>);</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>aDataH</color> <color=#f92672>=</color> <color=#f8f8f2>_h</color><color=#f8f8f2>.</color><color=#a6e22e>doFinal</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>_h</color><color=#f8f8f2>.</color><color=#a6e22e>reset</color><color=#f8f8f2>();</color>
        
        <color=#f8f8f2>modeByte</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>mode</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>lambdaByte</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>lambda</color><color=#f8f8f2>;</color>

        <color=#66d9ef>return</color> <color=#f8f8f2>helper</color><color=#f8f8f2>.</color><color=#a6e22e>concateByteArrays</color><color=#f8f8f2>(</color><color=#f8f8f2>vIdH</color><color=#f8f8f2>,</color> <color=#f8f8f2>modeByte</color><color=#f8f8f2>,</color> 
                <color=#f8f8f2>lambdaByte</color><color=#f8f8f2>,</color> <color=#f8f8f2>outLenByte</color><color=#f8f8f2>,</color> <color=#f8f8f2>sLenByte</color><color=#f8f8f2>,</color> <color=#f8f8f2>aDataH</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * public interface for testing tweak computation</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param vId       String, VersionID</color>
<color=#75715e>     * @param mode      Integer, Mode of Catena</color>
<color=#75715e>     * @param lambda    Integer, The depth of the graph structure.</color>
<color=#75715e>     * @param outLen    Integer, Output length.</color>
<color=#75715e>     * @param sLen      Integer, Salt length.</color>
<color=#75715e>     * @param aData     byte[], Associated data of the user and/or the host.</color>
<color=#75715e>     * @return tweak    byte[], The calculatetd tweak.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>testCompTweak</color> <color=#f8f8f2>(</color><color=#f8f8f2>String</color> <color=#f8f8f2>vId</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>mode</color><color=#f8f8f2>,</color> 
            <color=#66d9ef>int</color> <color=#f8f8f2>lambda</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>outLen</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>sLen</color><color=#f8f8f2>,</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>aData</color><color=#f8f8f2>){</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>compTweak</color><color=#f8f8f2>(</color><color=#f8f8f2>vId</color><color=#f8f8f2>,</color> <color=#f8f8f2>mode</color><color=#f8f8f2>,</color> <color=#f8f8f2>lambda</color><color=#f8f8f2>,</color> <color=#f8f8f2>outLen</color><color=#f8f8f2>,</color> <color=#f8f8f2>sLen</color><color=#f8f8f2>,</color> <color=#f8f8f2>aData</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * Clear the password</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param pwd   the password to be cleared</color>
<color=#75715e>     */</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>void</color> <color=#a6e22e>erasePwd</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>pwd</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>fill</color><color=#f8f8f2>(</color><color=#f8f8f2>pwd</color><color=#f8f8f2>,</color> <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>/**</color>
<color=#75715e>     * Initializes Catena</color>
<color=#75715e>     * </color>
<color=#75715e>     * initializrs all needed variables and functions with default values</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param h         main hash function</color>
<color=#75715e>     * @param hPrime    reduced hash function</color>
<color=#75715e>     * @param gamma     gamma function (e.g. SaltMix)</color>
<color=#75715e>     * @param f         graph</color>
<color=#75715e>     * @param idx       index function for graph</color>
<color=#75715e>     * @param phi       phi function</color>
<color=#75715e>     * @param gLow      minimum Garlic</color>
<color=#75715e>     * @param gHigh     maximum Garlic</color>
<color=#75715e>     * @param lambda    depth of graphs</color>
<color=#75715e>     * @param vID       version ID</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>init</color><color=#f8f8f2>(</color><color=#f8f8f2>HashInterface</color> <color=#f8f8f2>h</color><color=#f8f8f2>,</color> <color=#f8f8f2>HashInterface</color> <color=#f8f8f2>hPrime</color><color=#f8f8f2>,</color> 
            <color=#f8f8f2>GammaInterface</color> <color=#f8f8f2>gamma</color><color=#f8f8f2>,</color> <color=#f8f8f2>GraphInterface</color> <color=#f8f8f2>f</color><color=#f8f8f2>,</color> 
            <color=#f8f8f2>IdxInterface</color> <color=#f8f8f2>idx</color><color=#f8f8f2>,</color> <color=#f8f8f2>PhiInterface</color> <color=#f8f8f2>phi</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>gLow</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>gHigh</color><color=#f8f8f2>,</color>
            <color=#66d9ef>int</color> <color=#f8f8f2>lambda</color><color=#f8f8f2>,</color> <color=#f8f8f2>String</color> <color=#f8f8f2>vID</color><color=#f8f8f2>){</color>
        
        <color=#f8f8f2>_h</color> <color=#f92672>=</color> <color=#f8f8f2>h</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>_hPrime</color> <color=#f92672>=</color> <color=#f8f8f2>hPrime</color><color=#f8f8f2>;</color>
        
        <color=#f8f8f2>_gamma</color> <color=#f92672>=</color> <color=#f8f8f2>gamma</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>_gamma</color><color=#f8f8f2>.</color><color=#a6e22e>setH</color><color=#f8f8f2>(</color><color=#f8f8f2>_h</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>_gamma</color><color=#f8f8f2>.</color><color=#a6e22e>setHPrime</color><color=#f8f8f2>(</color><color=#f8f8f2>_hPrime</color><color=#f8f8f2>);</color>
        
        <color=#f8f8f2>_f</color> <color=#f92672>=</color> <color=#f8f8f2>f</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>_f</color><color=#f8f8f2>.</color><color=#a6e22e>setH</color><color=#f8f8f2>(</color><color=#f8f8f2>_h</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>_f</color><color=#f8f8f2>.</color><color=#a6e22e>setHPrime</color><color=#f8f8f2>(</color><color=#f8f8f2>_hPrime</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>_f</color><color=#f8f8f2>.</color><color=#a6e22e>setIndexing</color><color=#f8f8f2>(</color><color=#f8f8f2>idx</color><color=#f8f8f2>);</color>
        
        <color=#f8f8f2>_phi</color> <color=#f92672>=</color> <color=#f8f8f2>phi</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>_phi</color><color=#f8f8f2>.</color><color=#a6e22e>setH</color><color=#f8f8f2>(</color><color=#f8f8f2>_h</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>_phi</color><color=#f8f8f2>.</color><color=#a6e22e>setHPrime</color><color=#f8f8f2>(</color><color=#f8f8f2>_hPrime</color><color=#f8f8f2>);</color>
        
        <color=#f8f8f2>_gLow</color> <color=#f92672>=</color> <color=#f8f8f2>gLow</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>_gHigh</color> <color=#f92672>=</color> <color=#f8f8f2>gHigh</color><color=#f8f8f2>;</color>
        
        <color=#f8f8f2>_lambda</color> <color=#f92672>=</color> <color=#f8f8f2>lambda</color><color=#f8f8f2>;</color>
        
        <color=#f8f8f2>_n</color> <color=#f92672>=</color> <color=#f8f8f2>_h</color><color=#f8f8f2>.</color><color=#a6e22e>getOutputSize</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>_k</color> <color=#f92672>=</color> <color=#f8f8f2>_hPrime</color><color=#f8f8f2>.</color><color=#a6e22e>getOutputSize</color><color=#f8f8f2>();</color>
        
        <color=#f8f8f2>_vId</color> <color=#f92672>=</color> <color=#f8f8f2>vID</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    
    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getVID</color><color=#f8f8f2>(){</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>_vId</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getLambda</color><color=#f8f8f2>(){</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>_lambda</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setGHigh</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>gHigh</color><color=#f8f8f2>){</color>
        <color=#f8f8f2>_gHigh</color> <color=#f92672>=</color> <color=#f8f8f2>gHigh</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setGLow</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>gLow</color><color=#f8f8f2>){</color>
        <color=#f8f8f2>_gLow</color> <color=#f92672>=</color> <color=#f8f8f2>gLow</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setD</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>d</color><color=#f8f8f2>){</color>
        <color=#f8f8f2>_d</color> <color=#f92672>=</color> <color=#f8f8f2>d</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    
<color=#f8f8f2>}</color>