<color=#f92672>package</color> <color=#f8f8f2>main.java.components.graph.algorithms.index</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>main.java.components.graph.algorithms.IdxInterface</color><color=#f8f8f2>;</color>

<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>IndexBRG</color> <color=#66d9ef>implements</color> <color=#f8f8f2>IdxInterface</color> <color=#f8f8f2>{</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getIndex</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>g</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>boolean</color><color=#f92672>[]</color> <color=#f8f8f2>bool1</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>boolean</color><color=#f92672>[</color><color=#f8f8f2>g</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>boolean</color><color=#f92672>[]</color> <color=#f8f8f2>bool2</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>boolean</color><color=#f92672>[</color><color=#f8f8f2>g</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        
        <color=#f8f8f2>String</color> <color=#f8f8f2>tmp</color> <color=#f92672>=</color> <color=#f8f8f2>Integer</color><color=#f8f8f2>.</color><color=#a6e22e>toBinaryString</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>);</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>tmp</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color> <color=#f92672>++</color><color=#f8f8f2>i</color> <color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color><color=#f8f8f2>(</color><color=#f8f8f2>tmp</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color><color=#f92672>==</color><color=#e6db74>'1'</color><color=#f8f8f2>){</color>
                <color=#f8f8f2>bool1</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>+</color><color=#f8f8f2>g</color><color=#f92672>-</color><color=#f8f8f2>tmp</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>b1size</color> <color=#f92672>=</color> <color=#f8f8f2>bool1</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>b1size</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>){</color>
            <color=#66d9ef>boolean</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>bool1</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>){</color>
                <color=#f8f8f2>bool2</color><color=#f92672>[</color><color=#f8f8f2>g</color><color=#f92672>-</color><color=#ae81ff>1</color><color=#f92672>-</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        
        <color=#66d9ef>int</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#f8f8f2>bool2</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>l</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672><<</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>bool2</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>?</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    
    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getIndex</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>g</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>boolean</color><color=#f92672>[]</color> <color=#f8f8f2>bool1</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>boolean</color><color=#f92672>[</color><color=#f8f8f2>g</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>boolean</color><color=#f92672>[]</color> <color=#f8f8f2>bool2</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>boolean</color><color=#f92672>[</color><color=#f8f8f2>g</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        
        <color=#f8f8f2>String</color> <color=#f8f8f2>tmp</color> <color=#f92672>=</color> <color=#f8f8f2>Long</color><color=#f8f8f2>.</color><color=#a6e22e>toBinaryString</color><color=#f8f8f2>(</color><color=#f8f8f2>x</color><color=#f8f8f2>);</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>tmp</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>();</color> <color=#f92672>++</color><color=#f8f8f2>i</color> <color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color><color=#f8f8f2>(</color><color=#f8f8f2>tmp</color><color=#f8f8f2>.</color><color=#a6e22e>charAt</color><color=#f8f8f2>(</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color><color=#f92672>==</color><color=#e6db74>'1'</color><color=#f8f8f2>){</color>
                <color=#f8f8f2>bool1</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>+</color><color=#f8f8f2>g</color><color=#f92672>-</color><color=#f8f8f2>tmp</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>()</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>b1size</color> <color=#f92672>=</color> <color=#f8f8f2>bool1</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>b1size</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>){</color>
            <color=#66d9ef>boolean</color> <color=#f8f8f2>b</color> <color=#f92672>=</color> <color=#f8f8f2>bool1</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color><color=#f8f8f2>(</color><color=#f8f8f2>b</color><color=#f8f8f2>){</color>
                <color=#f8f8f2>bool2</color><color=#f92672>[</color><color=#f8f8f2>g</color><color=#f92672>-</color><color=#ae81ff>1</color><color=#f92672>-</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
        
        <color=#66d9ef>long</color> <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>long</color> <color=#f8f8f2>l</color> <color=#f92672>=</color> <color=#f8f8f2>bool2</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>l</color><color=#f8f8f2>;</color> <color=#f92672>++</color><color=#f8f8f2>i</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>n</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>n</color> <color=#f92672><<</color> <color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>+</color> <color=#f8f8f2>(</color><color=#f8f8f2>bool2</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color> <color=#f92672>?</color> <color=#ae81ff>1</color> <color=#f8f8f2>:</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>n</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getIndex</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>j</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>g</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#a6e22e>@Override</color>
    <color=#66d9ef>public</color> <color=#66d9ef>long</color> <color=#a6e22e>getIndex</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>i</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>j</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>g</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f92672>-</color><color=#ae81ff>1</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
<color=#f8f8f2>}</color>