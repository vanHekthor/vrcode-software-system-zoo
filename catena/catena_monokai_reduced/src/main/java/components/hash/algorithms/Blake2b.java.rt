<color=#f92672>package</color> <color=#f8f8f2>main.java.components.hash.algorithms</color><color=#f8f8f2>;</color>


<color=#75715e>/*</color>
<color=#75715e> * Hash Function Blake2b </color>
<color=#75715e> * </color>
<color=#75715e> * Copyright (C) 2015  Axel von dem Bruch</color>
<color=#75715e> * </color>
<color=#75715e> * This library is free software; you can redistribute it and/or</color>
<color=#75715e> * modify it under the terms of the GNU Lesser General Public</color>
<color=#75715e> * License as published by the Free Software Foundation; either</color>
<color=#75715e> * version 2.1 of the License, or (at your option) any later version.</color>
<color=#75715e> * </color>
<color=#75715e> * This library is distributed in the hope that it will be useful,</color>
<color=#75715e> * but WITHOUT ANY WARRANTY; without even the implied warranty of</color>
<color=#75715e> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</color>
<color=#75715e> * Lesser General Public License for more details.</color>
<color=#75715e> * </color>
<color=#75715e> * See:  https://www.gnu.org/licenses/lgpl-2.1.html</color>
<color=#75715e> * You should have received a copy of the GNU General Public License </color>
<color=#75715e> * along with this library.</color>
<color=#75715e> * </color>
<color=#75715e> * Note: A modified version of this class might be in future a part of </color>
<color=#75715e> * Bouncy Castle Crypto API</color>
<color=#75715e> * and will probably available under MIT-like license </color>
<color=#75715e> */</color>


<color=#75715e>/*  The BLAKE2 cryptographic hash function was designed by Jean-</color>
<color=#75715e>   Philippe Aumasson, Samuel Neves, Zooko Wilcox-O'Hearn, and Christian</color>
<color=#75715e>   Winnerlein.</color>
<color=#75715e>   With a built-in keying mechanism BLAKE2 can be used instead of a HMAC construction.</color>
<color=#75715e>   BLAKE2b is optimized for 64-bit platforms and produces digests of any size </color>
<color=#75715e>   between 1 and 64 bytes.      </color>
<color=#75715e>      Reference Implementation and Description can be found at: https://blake2.net/      </color>
<color=#75715e>      Internet Draft: https://tools.ietf.org/html/draft-saarinen-blake2-02</color>
<color=#75715e>      </color>
<color=#75715e>   This implementation does not support the Tree Hashing Mode. </color>
<color=#75715e>          </color>
<color=#75715e>      </color>
<color=#75715e>   Example code using this class:</color>
<color=#75715e>      </color>
<color=#75715e>      Blake2b b = new Blake2b(); // no key, no salt, no personalization</color>
<color=#75715e>      b.update( anyByteArray1 );</color>
<color=#75715e>      b.update( anyByteArray2 );</color>
<color=#75715e>      byte[] hash = new byte[64];// full length of hash value</color>
<color=#75715e>      b.doFinal(hash, 0); // result now holds the hash value (64 byte)</color>
<color=#75715e>      </color>
<color=#75715e>      Blake2b b2b = new Blake2b(); // no key, no salt, no personalization</color>
<color=#75715e>      b2b2.update( anyByteArray );</color>
<color=#75715e>      // store hash value in any byte array with length > 64 + pos</color>
<color=#75715e>      b2b.doFinal(result, pos); // result now holds the hash value (64 byte) at position pos</color>
<color=#75715e>      </color>
<color=#75715e>      Blake2b b2bK = new Blake2b( anyKeyAsByteArray );// key length 0 - 64 </color>
<color=#75715e>      b2bK.update( anyByteArray );</color>
<color=#75715e>      byte[] resultK = new byte[64];// full length of hash value</color>
<color=#75715e>      b2bK.doFinal(resultK, 0); // resultK now holds the hash value</color>
<color=#75715e>      </color>
<color=#75715e>      Blake2b b2bX = new Blake2b(</color>
<color=#75715e>            anyKeyAsByteArray, // 0 - 64 Byte or null</color>
<color=#75715e>            outputLength, // 1 - 64</color>
<color=#75715e>            anySaltAsByteArray, // exactly 16 Byte or null</color>
<color=#75715e>            anyPersonalizationAsByteArray); // exactly 16 Byte or null</color>
<color=#75715e>      b2bX.update( anyByteArray );</color>
<color=#75715e>      byte[] resultX = new byte[outputLength];</color>
<color=#75715e>      b2bX.doFinal(resultX, 0); // resultX now holds the hash value    </color>
<color=#75715e>*/</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.Arrays</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>main.java.components.hash.HashInterface</color><color=#f8f8f2>;</color>


<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Blake2b</color> <color=#66d9ef>implements</color> <color=#f8f8f2>HashInterface</color> <color=#f8f8f2>{</color>
    
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#f92672>[]</color> <color=#f8f8f2>blake2b_IV</color>  <color=#f92672>=</color> 
            <color=#75715e>// Blake2b Initialization Vector: </color>
            <color=#75715e>// Produced from the square root of primes 2, 3, 5, 7, 11, 13, 17, 19.</color>
            <color=#75715e>// The same as SHA-512 IV.</color>
        <color=#f8f8f2>{</color>
          <color=#ae81ff>0x6a09e667f3bcc908L</color><color=#f8f8f2>,</color> <color=#ae81ff>0xbb67ae8584caa73bL</color><color=#f8f8f2>,</color>
          <color=#ae81ff>0x3c6ef372fe94f82bL</color><color=#f8f8f2>,</color> <color=#ae81ff>0xa54ff53a5f1d36f1L</color><color=#f8f8f2>,</color>
          <color=#ae81ff>0x510e527fade682d1L</color><color=#f8f8f2>,</color> <color=#ae81ff>0x9b05688c2b3e6c1fL</color><color=#f8f8f2>,</color>
          <color=#ae81ff>0x1f83d9abfb41bd6bL</color><color=#f8f8f2>,</color> <color=#ae81ff>0x5be0cd19137e2179L</color> 
        <color=#f8f8f2>};</color>
    
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>byte</color><color=#f92672>[][]</color> <color=#f8f8f2>blake2b_sigma</color> <color=#f92672>=</color> <color=#75715e>// Message word permutations</color>
        <color=#f8f8f2>{</color>
          <color=#f8f8f2>{</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color>  <color=#ae81ff>1</color><color=#f8f8f2>,</color>  <color=#ae81ff>2</color><color=#f8f8f2>,</color>  <color=#ae81ff>3</color><color=#f8f8f2>,</color>  <color=#ae81ff>4</color><color=#f8f8f2>,</color>  <color=#ae81ff>5</color><color=#f8f8f2>,</color>  <color=#ae81ff>6</color><color=#f8f8f2>,</color>  <color=#ae81ff>7</color><color=#f8f8f2>,</color>  <color=#ae81ff>8</color><color=#f8f8f2>,</color>  <color=#ae81ff>9</color><color=#f8f8f2>,</color> <color=#ae81ff>10</color><color=#f8f8f2>,</color> <color=#ae81ff>11</color><color=#f8f8f2>,</color> <color=#ae81ff>12</color><color=#f8f8f2>,</color> <color=#ae81ff>13</color><color=#f8f8f2>,</color> <color=#ae81ff>14</color><color=#f8f8f2>,</color> <color=#ae81ff>15</color> <color=#f8f8f2>}</color> <color=#f8f8f2>,</color>
          <color=#f8f8f2>{</color> <color=#ae81ff>14</color><color=#f8f8f2>,</color> <color=#ae81ff>10</color><color=#f8f8f2>,</color>  <color=#ae81ff>4</color><color=#f8f8f2>,</color>  <color=#ae81ff>8</color><color=#f8f8f2>,</color>  <color=#ae81ff>9</color><color=#f8f8f2>,</color> <color=#ae81ff>15</color><color=#f8f8f2>,</color> <color=#ae81ff>13</color><color=#f8f8f2>,</color>  <color=#ae81ff>6</color><color=#f8f8f2>,</color>  <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>12</color><color=#f8f8f2>,</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color>  <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>11</color><color=#f8f8f2>,</color>  <color=#ae81ff>7</color><color=#f8f8f2>,</color>  <color=#ae81ff>5</color><color=#f8f8f2>,</color>  <color=#ae81ff>3</color> <color=#f8f8f2>}</color> <color=#f8f8f2>,</color>
          <color=#f8f8f2>{</color> <color=#ae81ff>11</color><color=#f8f8f2>,</color>  <color=#ae81ff>8</color><color=#f8f8f2>,</color> <color=#ae81ff>12</color><color=#f8f8f2>,</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color>  <color=#ae81ff>5</color><color=#f8f8f2>,</color>  <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>15</color><color=#f8f8f2>,</color> <color=#ae81ff>13</color><color=#f8f8f2>,</color> <color=#ae81ff>10</color><color=#f8f8f2>,</color> <color=#ae81ff>14</color><color=#f8f8f2>,</color>  <color=#ae81ff>3</color><color=#f8f8f2>,</color>  <color=#ae81ff>6</color><color=#f8f8f2>,</color>  <color=#ae81ff>7</color><color=#f8f8f2>,</color>  <color=#ae81ff>1</color><color=#f8f8f2>,</color>  <color=#ae81ff>9</color><color=#f8f8f2>,</color>  <color=#ae81ff>4</color> <color=#f8f8f2>}</color> <color=#f8f8f2>,</color>
          <color=#f8f8f2>{</color>  <color=#ae81ff>7</color><color=#f8f8f2>,</color>  <color=#ae81ff>9</color><color=#f8f8f2>,</color>  <color=#ae81ff>3</color><color=#f8f8f2>,</color>  <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>13</color><color=#f8f8f2>,</color> <color=#ae81ff>12</color><color=#f8f8f2>,</color> <color=#ae81ff>11</color><color=#f8f8f2>,</color> <color=#ae81ff>14</color><color=#f8f8f2>,</color>  <color=#ae81ff>2</color><color=#f8f8f2>,</color>  <color=#ae81ff>6</color><color=#f8f8f2>,</color>  <color=#ae81ff>5</color><color=#f8f8f2>,</color> <color=#ae81ff>10</color><color=#f8f8f2>,</color>  <color=#ae81ff>4</color><color=#f8f8f2>,</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>15</color><color=#f8f8f2>,</color>  <color=#ae81ff>8</color> <color=#f8f8f2>}</color> <color=#f8f8f2>,</color>
          <color=#f8f8f2>{</color>  <color=#ae81ff>9</color><color=#f8f8f2>,</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color>  <color=#ae81ff>5</color><color=#f8f8f2>,</color>  <color=#ae81ff>7</color><color=#f8f8f2>,</color>  <color=#ae81ff>2</color><color=#f8f8f2>,</color>  <color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#ae81ff>10</color><color=#f8f8f2>,</color> <color=#ae81ff>15</color><color=#f8f8f2>,</color> <color=#ae81ff>14</color><color=#f8f8f2>,</color>  <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>11</color><color=#f8f8f2>,</color> <color=#ae81ff>12</color><color=#f8f8f2>,</color>  <color=#ae81ff>6</color><color=#f8f8f2>,</color>  <color=#ae81ff>8</color><color=#f8f8f2>,</color>  <color=#ae81ff>3</color><color=#f8f8f2>,</color> <color=#ae81ff>13</color> <color=#f8f8f2>}</color> <color=#f8f8f2>,</color>
          <color=#f8f8f2>{</color>  <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>12</color><color=#f8f8f2>,</color>  <color=#ae81ff>6</color><color=#f8f8f2>,</color> <color=#ae81ff>10</color><color=#f8f8f2>,</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>11</color><color=#f8f8f2>,</color>  <color=#ae81ff>8</color><color=#f8f8f2>,</color>  <color=#ae81ff>3</color><color=#f8f8f2>,</color>  <color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#ae81ff>13</color><color=#f8f8f2>,</color>  <color=#ae81ff>7</color><color=#f8f8f2>,</color>  <color=#ae81ff>5</color><color=#f8f8f2>,</color> <color=#ae81ff>15</color><color=#f8f8f2>,</color> <color=#ae81ff>14</color><color=#f8f8f2>,</color>  <color=#ae81ff>1</color><color=#f8f8f2>,</color>  <color=#ae81ff>9</color> <color=#f8f8f2>}</color> <color=#f8f8f2>,</color>
          <color=#f8f8f2>{</color> <color=#ae81ff>12</color><color=#f8f8f2>,</color>  <color=#ae81ff>5</color><color=#f8f8f2>,</color>  <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>15</color><color=#f8f8f2>,</color> <color=#ae81ff>14</color><color=#f8f8f2>,</color> <color=#ae81ff>13</color><color=#f8f8f2>,</color>  <color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#ae81ff>10</color><color=#f8f8f2>,</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color>  <color=#ae81ff>7</color><color=#f8f8f2>,</color>  <color=#ae81ff>6</color><color=#f8f8f2>,</color>  <color=#ae81ff>3</color><color=#f8f8f2>,</color>  <color=#ae81ff>9</color><color=#f8f8f2>,</color>  <color=#ae81ff>2</color><color=#f8f8f2>,</color>  <color=#ae81ff>8</color><color=#f8f8f2>,</color> <color=#ae81ff>11</color> <color=#f8f8f2>}</color> <color=#f8f8f2>,</color>
          <color=#f8f8f2>{</color> <color=#ae81ff>13</color><color=#f8f8f2>,</color> <color=#ae81ff>11</color><color=#f8f8f2>,</color>  <color=#ae81ff>7</color><color=#f8f8f2>,</color> <color=#ae81ff>14</color><color=#f8f8f2>,</color> <color=#ae81ff>12</color><color=#f8f8f2>,</color>  <color=#ae81ff>1</color><color=#f8f8f2>,</color>  <color=#ae81ff>3</color><color=#f8f8f2>,</color>  <color=#ae81ff>9</color><color=#f8f8f2>,</color>  <color=#ae81ff>5</color><color=#f8f8f2>,</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>15</color><color=#f8f8f2>,</color>  <color=#ae81ff>4</color><color=#f8f8f2>,</color>  <color=#ae81ff>8</color><color=#f8f8f2>,</color>  <color=#ae81ff>6</color><color=#f8f8f2>,</color>  <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>10</color> <color=#f8f8f2>}</color> <color=#f8f8f2>,</color>
          <color=#f8f8f2>{</color>  <color=#ae81ff>6</color><color=#f8f8f2>,</color> <color=#ae81ff>15</color><color=#f8f8f2>,</color> <color=#ae81ff>14</color><color=#f8f8f2>,</color>  <color=#ae81ff>9</color><color=#f8f8f2>,</color> <color=#ae81ff>11</color><color=#f8f8f2>,</color>  <color=#ae81ff>3</color><color=#f8f8f2>,</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color>  <color=#ae81ff>8</color><color=#f8f8f2>,</color> <color=#ae81ff>12</color><color=#f8f8f2>,</color>  <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>13</color><color=#f8f8f2>,</color>  <color=#ae81ff>7</color><color=#f8f8f2>,</color>  <color=#ae81ff>1</color><color=#f8f8f2>,</color>  <color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#ae81ff>10</color><color=#f8f8f2>,</color>  <color=#ae81ff>5</color> <color=#f8f8f2>}</color> <color=#f8f8f2>,</color>
          <color=#f8f8f2>{</color> <color=#ae81ff>10</color><color=#f8f8f2>,</color>  <color=#ae81ff>2</color><color=#f8f8f2>,</color>  <color=#ae81ff>8</color><color=#f8f8f2>,</color>  <color=#ae81ff>4</color><color=#f8f8f2>,</color>  <color=#ae81ff>7</color><color=#f8f8f2>,</color>  <color=#ae81ff>6</color><color=#f8f8f2>,</color>  <color=#ae81ff>1</color><color=#f8f8f2>,</color>  <color=#ae81ff>5</color><color=#f8f8f2>,</color> <color=#ae81ff>15</color><color=#f8f8f2>,</color> <color=#ae81ff>11</color><color=#f8f8f2>,</color>  <color=#ae81ff>9</color><color=#f8f8f2>,</color> <color=#ae81ff>14</color><color=#f8f8f2>,</color>  <color=#ae81ff>3</color><color=#f8f8f2>,</color> <color=#ae81ff>12</color><color=#f8f8f2>,</color> <color=#ae81ff>13</color> <color=#f8f8f2>,</color> <color=#ae81ff>0</color> <color=#f8f8f2>}</color> <color=#f8f8f2>,</color>
          <color=#f8f8f2>{</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color>  <color=#ae81ff>1</color><color=#f8f8f2>,</color>  <color=#ae81ff>2</color><color=#f8f8f2>,</color>  <color=#ae81ff>3</color><color=#f8f8f2>,</color>  <color=#ae81ff>4</color><color=#f8f8f2>,</color>  <color=#ae81ff>5</color><color=#f8f8f2>,</color>  <color=#ae81ff>6</color><color=#f8f8f2>,</color>  <color=#ae81ff>7</color><color=#f8f8f2>,</color>  <color=#ae81ff>8</color><color=#f8f8f2>,</color>  <color=#ae81ff>9</color><color=#f8f8f2>,</color> <color=#ae81ff>10</color><color=#f8f8f2>,</color> <color=#ae81ff>11</color><color=#f8f8f2>,</color> <color=#ae81ff>12</color><color=#f8f8f2>,</color> <color=#ae81ff>13</color><color=#f8f8f2>,</color> <color=#ae81ff>14</color><color=#f8f8f2>,</color> <color=#ae81ff>15</color> <color=#f8f8f2>}</color> <color=#f8f8f2>,</color>
          <color=#f8f8f2>{</color> <color=#ae81ff>14</color><color=#f8f8f2>,</color> <color=#ae81ff>10</color><color=#f8f8f2>,</color>  <color=#ae81ff>4</color><color=#f8f8f2>,</color>  <color=#ae81ff>8</color><color=#f8f8f2>,</color>  <color=#ae81ff>9</color><color=#f8f8f2>,</color> <color=#ae81ff>15</color><color=#f8f8f2>,</color> <color=#ae81ff>13</color><color=#f8f8f2>,</color>  <color=#ae81ff>6</color><color=#f8f8f2>,</color>  <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>12</color><color=#f8f8f2>,</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color>  <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>11</color><color=#f8f8f2>,</color>  <color=#ae81ff>7</color><color=#f8f8f2>,</color>  <color=#ae81ff>5</color><color=#f8f8f2>,</color>  <color=#ae81ff>3</color> <color=#f8f8f2>}</color>
        <color=#f8f8f2>};</color>

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>rOUNDS</color> <color=#f92672>=</color> <color=#ae81ff>12</color><color=#f8f8f2>;</color> <color=#75715e>// to use for Catenas H'</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>BLOCK_LENGTH_BYTES</color> <color=#f92672>=</color> <color=#ae81ff>128</color><color=#f8f8f2>;</color><color=#75715e>// bytes</color>
    
    <color=#75715e>// General parameters:</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>digestLength</color> <color=#f92672>=</color> <color=#ae81ff>64</color><color=#f8f8f2>;</color> <color=#75715e>// 1- 64 bytes </color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>keyLength</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#75715e>// 0 - 64 bytes for keyed hashing for MAC</color>
    <color=#66d9ef>private</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>salt</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color><color=#75715e>//new byte[16];</color>
    <color=#66d9ef>private</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>personalization</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color><color=#75715e>//new byte[16];</color>
    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#f8f8f2>_vIndex</color><color=#f8f8f2>;</color>
    
    <color=#75715e>// Tree hashing parameters: </color>
    <color=#75715e>// Because this class does not implement the Tree Hashing Mode,</color>
    <color=#75715e>// these parameters can be treated as constants (see init() function)</color>
<color=#75715e>/*  private int fanout = 1; // 0-255</color>
<color=#75715e>    private int depth = 1; // 1 - 255</color>
<color=#75715e>    private int leafLength= 0; </color>
<color=#75715e>    private long nodeOffset = 0L;</color>
<color=#75715e>    private int nodeDepth = 0; </color>
<color=#75715e>    private int innerHashLength = 0; </color>
<color=#75715e>*/</color>  
    
    <color=#75715e>// whenever this buffer overflows, it will be processed </color>
    <color=#75715e>// in the compress() function. </color>
    <color=#75715e>// For performance issues, long messages will not use this buffer. </color>
    <color=#66d9ef>private</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buffer</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color><color=#75715e>//new byte[BLOCK_LENGTH_BYTES];</color>
    <color=#75715e>// Position of last inserted byte:</color>
    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>bufferPos</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color><color=#75715e>// a value from 0 up to 128</color>

    <color=#66d9ef>private</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>internalState</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[</color><color=#ae81ff>16</color><color=#f92672>]</color><color=#f8f8f2>;</color> <color=#75715e>// In the Blake2b paper it is called: v</color>
    <color=#66d9ef>private</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>chainValue</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color> <color=#75715e>// state vector, in the Blake2b paper it is called: h</color>
    
    <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>t0</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>;</color> <color=#75715e>// holds last significant bits, counter (counts bytes)</color>
    <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>t1</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>;</color> <color=#75715e>// counter: Length up to 2^128 are supported</color>
    <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>f0</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>;</color> <color=#75715e>// finalization flag, for last block: ~0L</color>


    <color=#75715e>// For Tree Hashing Mode, not used here:</color>
<color=#75715e>//  private long f1 = 0L; // finalization flag, for last node: ~0L </color>
    
    <color=#66d9ef>public</color> <color=#a6e22e>Blake2b</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buffer</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>BLOCK_LENGTH_BYTES</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>keyLength</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>digestLength</color> <color=#f92672>=</color> <color=#ae81ff>64</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>init</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#a6e22e>Blake2b</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buffer</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>BLOCK_LENGTH_BYTES</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>key</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#ae81ff>64</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Keys > 64 are not supported"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>keyLength</color> <color=#f92672>=</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>bufferPos</color> <color=#f92672>=</color> <color=#f8f8f2>BLOCK_LENGTH_BYTES</color><color=#f8f8f2>;</color> <color=#75715e>// zero padding</color>
        <color=#f8f8f2>}</color> 
        <color=#f8f8f2>digestLength</color> <color=#f92672>=</color> <color=#ae81ff>64</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>init</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    <color=#66d9ef>public</color> <color=#a6e22e>Blake2b</color><color=#f8f8f2>(</color>
            <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>key</color><color=#f8f8f2>,</color> 
            <color=#66d9ef>int</color> <color=#f8f8f2>_digestLength</color><color=#f8f8f2>,</color> 
            <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>_salt</color><color=#f8f8f2>,</color> 
            <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>_personalization</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>buffer</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>BLOCK_LENGTH_BYTES</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>_digestLength</color> <color=#f92672><</color> <color=#ae81ff>1</color> <color=#f92672>||</color> <color=#f8f8f2>digestLength</color> <color=#f92672>></color> <color=#ae81ff>64</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Invalid digest length (required: 1 - 64)"</color><color=#f8f8f2>);</color>     
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>digestLength</color> <color=#f92672>=</color> <color=#f8f8f2>_digestLength</color><color=#f8f8f2>;</color>       
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>_salt</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>_salt</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>!=</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"salt length must be exactly 16 bytes"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>salt</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>16</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>_salt</color><color=#f8f8f2>,</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color>  <color=#f8f8f2>salt</color><color=#f8f8f2>,</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color>  <color=#f8f8f2>_salt</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>_personalization</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>_personalization</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>!=</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"personalization length must be exactly 16 bytes"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>personalization</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#ae81ff>16</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>_personalization</color><color=#f8f8f2>,</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color>  <color=#f8f8f2>personalization</color><color=#f8f8f2>,</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color>  <color=#f8f8f2>_personalization</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>       
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>key</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>></color> <color=#ae81ff>64</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalArgumentException</color><color=#f8f8f2>(</color><color=#e6db74>"Keys > 64 are not supported"</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>keyLength</color> <color=#f92672>=</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>key</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>key</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>bufferPos</color> <color=#f92672>=</color> <color=#f8f8f2>BLOCK_LENGTH_BYTES</color><color=#f8f8f2>;</color> <color=#75715e>// zero padding</color>
        <color=#f8f8f2>}</color> 
        <color=#f8f8f2>init</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>// initialize chainValue</color>
    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>init</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>chainValue</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>){</color>
            <color=#f8f8f2>chainValue</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[</color><color=#ae81ff>8</color><color=#f92672>]</color><color=#f8f8f2>;</color>

            <color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>blake2b_IV</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>^</color> <color=#f8f8f2>(</color> <color=#f8f8f2>digestLength</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>keyLength</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color> <color=#ae81ff>0x1010000</color><color=#f8f8f2>);</color>
                <color=#75715e>// 0x1010000 = ((fanout << 16) | (depth << 24) | (leafLength << 32)); </color>
                <color=#75715e>// with fanout = 1; depth = 0; leafLength = 0;</color>
            <color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>blake2b_IV</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color><color=#75715e>// ^ nodeOffset; with nodeOffset = 0;</color>
            <color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>blake2b_IV</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color><color=#75715e>// ^ ( nodeDepth | (innerHashLength << 8) );</color>
            <color=#75715e>// with nodeDepth = 0; innerHashLength = 0;</color>
            
            <color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>blake2b_IV</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            
            <color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#ae81ff>4</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>blake2b_IV</color><color=#f92672>[</color><color=#ae81ff>4</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#ae81ff>5</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>blake2b_IV</color><color=#f92672>[</color><color=#ae81ff>5</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>salt</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#ae81ff>4</color><color=#f92672>]</color> <color=#f92672>^=</color> <color=#f8f8f2>(</color><color=#f8f8f2>bytes2long</color><color=#f8f8f2>(</color><color=#f8f8f2>salt</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#ae81ff>5</color><color=#f92672>]</color> <color=#f92672>^=</color> <color=#f8f8f2>(</color><color=#f8f8f2>bytes2long</color><color=#f8f8f2>(</color><color=#f8f8f2>salt</color><color=#f8f8f2>,</color> <color=#ae81ff>8</color><color=#f8f8f2>));</color>
            <color=#f8f8f2>}</color>
            
            <color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#ae81ff>6</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>blake2b_IV</color><color=#f92672>[</color><color=#ae81ff>6</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#ae81ff>7</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>blake2b_IV</color><color=#f92672>[</color><color=#ae81ff>7</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>personalization</color> <color=#f92672>!=</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#ae81ff>6</color><color=#f92672>]</color> <color=#f92672>^=</color> <color=#f8f8f2>(</color><color=#f8f8f2>bytes2long</color><color=#f8f8f2>(</color><color=#f8f8f2>personalization</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>));</color>
                <color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#ae81ff>7</color><color=#f92672>]</color> <color=#f92672>^=</color> <color=#f8f8f2>(</color><color=#f8f8f2>bytes2long</color><color=#f8f8f2>(</color><color=#f8f8f2>personalization</color><color=#f8f8f2>,</color> <color=#ae81ff>8</color><color=#f8f8f2>));</color>              
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    
    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>initializeInternalState</color><color=#f8f8f2>(){</color>
        
        <color=#75715e>// initialize v:</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>chainValue</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>internalState</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>chainValue</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>blake2b_IV</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>internalState</color><color=#f8f8f2>,</color> <color=#f8f8f2>chainValue</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>,</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#ae81ff>12</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>t0</color> <color=#f92672>^</color> <color=#f8f8f2>blake2b_IV</color><color=#f92672>[</color><color=#ae81ff>4</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#ae81ff>13</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>t1</color> <color=#f92672>^</color> <color=#f8f8f2>blake2b_IV</color><color=#f92672>[</color><color=#ae81ff>5</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#ae81ff>14</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>f0</color> <color=#f92672>^</color> <color=#f8f8f2>blake2b_IV</color><color=#f92672>[</color><color=#ae81ff>6</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#ae81ff>15</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>blake2b_IV</color><color=#f92672>[</color><color=#ae81ff>7</color><color=#f92672>]</color><color=#f8f8f2>;</color><color=#75715e>// ^ f1 with f1 = 0</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * Processes the given message</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param message</color>
<color=#75715e>     *            byte array containing the message to be processed</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>message</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>message</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>update</color><color=#f8f8f2>(</color><color=#f8f8f2>message</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>message</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * Processes one single byte</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param b</color>
<color=#75715e>     *            single byte to be processed</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        
        <color=#66d9ef>int</color> <color=#f8f8f2>remainingLength</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#75715e>// left bytes of buffer</color>

        <color=#75715e>// process the buffer if full else add to buffer:   </color>
        <color=#f8f8f2>remainingLength</color> <color=#f92672>=</color> <color=#f8f8f2>BLOCK_LENGTH_BYTES</color> <color=#f92672>-</color> <color=#f8f8f2>bufferPos</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>remainingLength</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color> <color=#75715e>// full buffer </color>
            <color=#f8f8f2>t0</color> <color=#f92672>+=</color> <color=#f8f8f2>BLOCK_LENGTH_BYTES</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t0</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color> <color=#75715e>// if message > 2^64</color>
                <color=#f8f8f2>t1</color><color=#f92672>++</color><color=#f8f8f2>;</color>   
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>compress</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>

            <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>fill</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>,</color>  <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color><color=#75715e>// clear buffer</color>
            <color=#f8f8f2>buffer</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>bufferPos</color> <color=#f92672>=</color> <color=#ae81ff>1</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>buffer</color><color=#f92672>[</color><color=#f8f8f2>bufferPos</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>b</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>bufferPos</color> <color=#f92672>++</color><color=#f8f8f2>;</color>
            <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * Processes a number of bytes of the given message </color>
<color=#75715e>     * from a start position up to offset+len</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param message</color>
<color=#75715e>     *            byte array containing the message to be processed</color>
<color=#75715e>     * @param offset</color>
<color=#75715e>     *            position of message to start from</color>
<color=#75715e>     * @param len</color>
<color=#75715e>     *            number of bytes to be processed.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>message</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>message</color> <color=#f92672>==</color> <color=#66d9ef>null</color> <color=#f92672>||</color> <color=#f8f8f2>len</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#66d9ef>return</color><color=#f8f8f2>;</color>
        
        <color=#66d9ef>int</color> <color=#f8f8f2>remainingLength</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#75715e>// left bytes of buffer</color>
        
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>bufferPos</color> <color=#f92672>!=</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color> <color=#75715e>// commenced, incomplete buffer</color>

            <color=#75715e>// complete the buffer: </color>
            <color=#f8f8f2>remainingLength</color> <color=#f92672>=</color> <color=#f8f8f2>BLOCK_LENGTH_BYTES</color> <color=#f92672>-</color> <color=#f8f8f2>bufferPos</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>remainingLength</color> <color=#f92672><</color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color> <color=#75715e>// full buffer + at least 1 byte</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>message</color><color=#f8f8f2>,</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>bufferPos</color><color=#f8f8f2>,</color> 
                        <color=#f8f8f2>remainingLength</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>t0</color> <color=#f92672>+=</color> <color=#f8f8f2>BLOCK_LENGTH_BYTES</color><color=#f8f8f2>;</color>
                <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t0</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color> <color=#75715e>// if message > 2^64</color>
                    <color=#f8f8f2>t1</color><color=#f92672>++</color><color=#f8f8f2>;</color>   
                <color=#f8f8f2>}</color>
                <color=#f8f8f2>compress</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
                
                <color=#f8f8f2>bufferPos</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
                <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>fill</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>,</color>  <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color><color=#75715e>// clear buffer              </color>
                
            <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>message</color><color=#f8f8f2>,</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>bufferPos</color><color=#f8f8f2>,</color> 
                        <color=#f8f8f2>len</color><color=#f8f8f2>);</color>
                <color=#f8f8f2>bufferPos</color> <color=#f92672>+=</color> <color=#f8f8f2>len</color><color=#f8f8f2>;</color>
                <color=#66d9ef>return</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>}</color>
        <color=#f8f8f2>}</color>   
        <color=#75715e>// process blocks except last block (also if last block is full)</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>messagePos</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#66d9ef>int</color> <color=#f8f8f2>blockWiseLastPos</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#f8f8f2>len</color> <color=#f92672>-</color> <color=#f8f8f2>BLOCK_LENGTH_BYTES</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color> <color=#f8f8f2>messagePos</color> <color=#f92672>=</color> <color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#f8f8f2>remainingLength</color><color=#f8f8f2>;</color> <color=#f8f8f2>messagePos</color> <color=#f92672><</color> <color=#f8f8f2>blockWiseLastPos</color><color=#f8f8f2>;</color> <color=#f8f8f2>messagePos</color> <color=#f92672>+=</color> <color=#f8f8f2>BLOCK_LENGTH_BYTES</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color> <color=#75715e>// block wise 128 bytes</color>
            <color=#75715e>// without buffer:</color>
            <color=#f8f8f2>t0</color> <color=#f92672>+=</color> <color=#f8f8f2>BLOCK_LENGTH_BYTES</color><color=#f8f8f2>;</color>
            <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>t0</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
                <color=#f8f8f2>t1</color><color=#f92672>++</color><color=#f8f8f2>;</color>   
            <color=#f8f8f2>}</color>
            <color=#f8f8f2>compress</color><color=#f8f8f2>(</color><color=#f8f8f2>message</color><color=#f8f8f2>,</color> <color=#f8f8f2>messagePos</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#75715e>//fill the buffer with left bytes, this might be a full block</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>message</color><color=#f8f8f2>,</color> <color=#f8f8f2>messagePos</color><color=#f8f8f2>,</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>,</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#f8f8f2>len</color> <color=#f92672>-</color> <color=#f8f8f2>messagePos</color><color=#f8f8f2>);</color>   
        <color=#f8f8f2>bufferPos</color> <color=#f92672>+=</color> <color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#f8f8f2>len</color> <color=#f92672>-</color> <color=#f8f8f2>messagePos</color><color=#f8f8f2>;</color>     
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * Calculates the final digest value</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>doFinal</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>digestLength</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>f0</color> <color=#f92672>=</color> <color=#ae81ff>0xFFFFFFFFFFFFFFFFL</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>t0</color> <color=#f92672>+=</color> <color=#f8f8f2>bufferPos</color><color=#f8f8f2>;</color>
        <color=#75715e>// bufferPos may be < 128, so (t0 == 0) does not work </color>
        <color=#75715e>// for  2^64 < message length > 2^64 - 127</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color> <color=#f8f8f2>(</color><color=#f8f8f2>t0</color> <color=#f92672><</color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f92672>&&</color> <color=#f8f8f2>(</color><color=#f8f8f2>bufferPos</color> <color=#f92672>></color> <color=#f92672>-</color><color=#f8f8f2>t0</color><color=#f8f8f2>)</color> <color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>t1</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>compress</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>bufferPos</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>chainValue</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>long2bytes</color><color=#f8f8f2>(</color><color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>),</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color> <color=#f92672>*</color> <color=#ae81ff>8</color><color=#f8f8f2>,</color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keyLength</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>){</color>
            <color=#f8f8f2>reset</color><color=#f8f8f2>();</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>out</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    
    
    <color=#75715e>/**</color>
<color=#75715e>     * Reset the hash function to use again after doFinal().</color>
<color=#75715e>     * This will not work for keyed digests. </color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>reset</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>bufferPos</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>f0</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>t0</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>t1</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>fill</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>,</color>  <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color><color=#75715e>// Holds eventually the key if input is null</color>
        <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>fill</color><color=#f8f8f2>(</color><color=#f8f8f2>chainValue</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>);</color>    
        <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>fill</color><color=#f8f8f2>(</color><color=#f8f8f2>internalState</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>chainValue</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>keyLength</color> <color=#f92672>></color> <color=#ae81ff>0</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#66d9ef>throw</color> <color=#66d9ef>new</color> <color=#f8f8f2>IllegalStateException</color><color=#f8f8f2>(</color><color=#e6db74>"Can not reset keyed Digest"</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#f8f8f2>init</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    
    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>compress</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>message</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>messagePos</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>initializeInternalState</color><color=#f8f8f2>();</color>
        
        <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>m</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[</color><color=#ae81ff>16</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>bytes2long</color><color=#f8f8f2>(</color><color=#f8f8f2>message</color><color=#f8f8f2>,</color> <color=#f8f8f2>messagePos</color> <color=#f92672>+</color> <color=#f8f8f2>j</color><color=#f92672>*</color><color=#ae81ff>8</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>round</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>round</color> <color=#f92672><</color> <color=#f8f8f2>rOUNDS</color><color=#f8f8f2>;</color> <color=#f8f8f2>round</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            
            <color=#75715e>// G apply to columns of internalState:m[blake2b_sigma[round][2 * blockPos]] /+1</color>
            <color=#f8f8f2>G</color><color=#f8f8f2>(</color><color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>round</color><color=#f92672>][</color><color=#ae81ff>0</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>round</color><color=#f92672>][</color><color=#ae81ff>1</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color><color=#ae81ff>4</color><color=#f8f8f2>,</color><color=#ae81ff>8</color><color=#f8f8f2>,</color><color=#ae81ff>12</color><color=#f8f8f2>);</color> 
            <color=#f8f8f2>G</color><color=#f8f8f2>(</color><color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>round</color><color=#f92672>][</color><color=#ae81ff>2</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>round</color><color=#f92672>][</color><color=#ae81ff>3</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color><color=#ae81ff>5</color><color=#f8f8f2>,</color><color=#ae81ff>9</color><color=#f8f8f2>,</color><color=#ae81ff>13</color><color=#f8f8f2>);</color> 
            <color=#f8f8f2>G</color><color=#f8f8f2>(</color><color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>round</color><color=#f92672>][</color><color=#ae81ff>4</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>round</color><color=#f92672>][</color><color=#ae81ff>5</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color><color=#ae81ff>6</color><color=#f8f8f2>,</color><color=#ae81ff>10</color><color=#f8f8f2>,</color><color=#ae81ff>14</color><color=#f8f8f2>);</color> 
            <color=#f8f8f2>G</color><color=#f8f8f2>(</color><color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>round</color><color=#f92672>][</color><color=#ae81ff>6</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>round</color><color=#f92672>][</color><color=#ae81ff>7</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color><color=#f8f8f2>,</color><color=#ae81ff>7</color><color=#f8f8f2>,</color><color=#ae81ff>11</color><color=#f8f8f2>,</color><color=#ae81ff>15</color><color=#f8f8f2>);</color> 
            <color=#75715e>// G apply to diagonals of internalState:</color>
            <color=#f8f8f2>G</color><color=#f8f8f2>(</color><color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>round</color><color=#f92672>][</color><color=#ae81ff>8</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>round</color><color=#f92672>][</color><color=#ae81ff>9</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color><color=#ae81ff>5</color><color=#f8f8f2>,</color><color=#ae81ff>10</color><color=#f8f8f2>,</color><color=#ae81ff>15</color><color=#f8f8f2>);</color> 
            <color=#f8f8f2>G</color><color=#f8f8f2>(</color><color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>round</color><color=#f92672>][</color><color=#ae81ff>10</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>round</color><color=#f92672>][</color><color=#ae81ff>11</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color><color=#ae81ff>6</color><color=#f8f8f2>,</color><color=#ae81ff>11</color><color=#f8f8f2>,</color><color=#ae81ff>12</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>G</color><color=#f8f8f2>(</color><color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>round</color><color=#f92672>][</color><color=#ae81ff>12</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>round</color><color=#f92672>][</color><color=#ae81ff>13</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color><color=#ae81ff>7</color><color=#f8f8f2>,</color><color=#ae81ff>8</color><color=#f8f8f2>,</color><color=#ae81ff>13</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>G</color><color=#f8f8f2>(</color><color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>round</color><color=#f92672>][</color><color=#ae81ff>14</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>round</color><color=#f92672>][</color><color=#ae81ff>15</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color><color=#f8f8f2>,</color><color=#ae81ff>4</color><color=#f8f8f2>,</color><color=#ae81ff>9</color><color=#f8f8f2>,</color><color=#ae81ff>14</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        
        <color=#75715e>// update chain values: </color>
        <color=#66d9ef>for</color><color=#f8f8f2>(</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>offset</color> <color=#f92672><</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color> <color=#f8f8f2>offset</color><color=#f92672>++</color> <color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>]</color> <color=#f92672>^</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>]</color> <color=#f92672>^</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f92672>]</color><color=#f8f8f2>;</color>    
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>G</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>m1</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>m2</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>posA</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>posB</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>posC</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>posD</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posA</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posA</color><color=#f92672>]</color> <color=#f92672>+</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posB</color><color=#f92672>]</color> <color=#f92672>+</color> <color=#f8f8f2>m1</color><color=#f8f8f2>;</color> 
        <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posD</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>rotr64</color><color=#f8f8f2>(</color><color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posD</color><color=#f92672>]</color> <color=#f92672>^</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posA</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#ae81ff>32</color><color=#f8f8f2>);</color> 
        <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posC</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posC</color><color=#f92672>]</color> <color=#f92672>+</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posD</color><color=#f92672>]</color><color=#f8f8f2>;</color> 
        <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posB</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>rotr64</color><color=#f8f8f2>(</color><color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posB</color><color=#f92672>]</color> <color=#f92672>^</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posC</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#ae81ff>24</color><color=#f8f8f2>);</color> <color=#75715e>// replaces 25 of BLAKE</color>
        <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posA</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posA</color><color=#f92672>]</color> <color=#f92672>+</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posB</color><color=#f92672>]</color> <color=#f92672>+</color> <color=#f8f8f2>m2</color><color=#f8f8f2>;</color> 
        <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posD</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>rotr64</color><color=#f8f8f2>(</color><color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posD</color><color=#f92672>]</color> <color=#f92672>^</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posA</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#ae81ff>16</color><color=#f8f8f2>);</color> 
        <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posC</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posC</color><color=#f92672>]</color> <color=#f92672>+</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posD</color><color=#f92672>]</color><color=#f8f8f2>;</color> 
        <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posB</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>rotr64</color><color=#f8f8f2>(</color><color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posB</color><color=#f92672>]</color> <color=#f92672>^</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posC</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#ae81ff>63</color><color=#f8f8f2>);</color> <color=#75715e>// replaces 11 of BLAKE</color>
    <color=#f8f8f2>}</color>
    
    <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>rotr64</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>rot</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>x</color> <color=#f92672>>>></color> <color=#f8f8f2>rot</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672><<</color> <color=#f8f8f2>(</color><color=#ae81ff>64</color> <color=#f92672>-</color> <color=#f8f8f2>rot</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getName</color><color=#f8f8f2>(){</color>
        <color=#66d9ef>return</color> <color=#e6db74>"Blake2b"</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// convert one long value in byte array</color>
    <color=#75715e>// little-endian byte order!</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>long2bytes</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>longValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>{</color>         
            <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>longValue</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>longValue</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>longValue</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>longValue</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>longValue</color> <color=#f92672>>></color> <color=#ae81ff>32</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>longValue</color> <color=#f92672>>></color> <color=#ae81ff>40</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>longValue</color> <color=#f92672>>></color> <color=#ae81ff>48</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>longValue</color> <color=#f92672>>></color> <color=#ae81ff>56</color><color=#f8f8f2>)};</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// little-endian byte order!</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>bytes2long</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>byteArray</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          
          <color=#66d9ef>return</color> <color=#f8f8f2>(</color>                
                  <color=#f8f8f2>((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>byteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color> <color=#f8f8f2>)</color> <color=#f92672>|</color>
                  <color=#f8f8f2>(((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>byteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color> <color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color>
                  <color=#f8f8f2>(((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>byteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color> <color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color>
                  <color=#f8f8f2>(((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>byteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color> <color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>|</color>
                  <color=#f8f8f2>(((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>byteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color> <color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>32</color><color=#f8f8f2>)</color> <color=#f92672>|</color>
                  <color=#f8f8f2>(((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>byteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>5</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color> <color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>40</color><color=#f8f8f2>)</color> <color=#f92672>|</color>
                  <color=#f8f8f2>(((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>byteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>6</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color> <color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>48</color><color=#f8f8f2>)</color> <color=#f92672>|</color>
                  <color=#f8f8f2>(((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>byteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>7</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color> <color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>56</color><color=#f8f8f2>)</color> <color=#f8f8f2>)</color> <color=#f8f8f2>;</color>                                  
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setVertexIndex</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>vIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>_vIndex</color> <color=#f92672>=</color> <color=#f8f8f2>vIndex</color><color=#f8f8f2>;</color>   
    <color=#f8f8f2>}</color>

    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getOutputSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>digestLength</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>   
<color=#f8f8f2>}</color>