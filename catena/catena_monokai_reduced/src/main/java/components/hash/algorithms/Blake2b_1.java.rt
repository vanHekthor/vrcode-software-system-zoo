<color=#f92672>package</color> <color=#f8f8f2>main.java.components.hash.algorithms</color><color=#f8f8f2>;</color>

<color=#75715e>/*</color>
<color=#75715e> * Round-reduced Blake2b as H' for Password Hashing Scheme Catena </color>
<color=#75715e> * Copyright (C) 2015  Axel von dem Bruch</color>
<color=#75715e> * </color>
<color=#75715e> * This library is free software; you can redistribute it and/or</color>
<color=#75715e> * modify it under the terms of the GNU Lesser General Public</color>
<color=#75715e> * License as published by the Free Software Foundation; either</color>
<color=#75715e> * version 2.1 of the License, or (at your option) any later version.</color>
<color=#75715e> * </color>
<color=#75715e> * This library is distributed in the hope that it will be useful,</color>
<color=#75715e> * but WITHOUT ANY WARRANTY; without even the implied warranty of</color>
<color=#75715e> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</color>
<color=#75715e> * Lesser General Public License for more details.</color>
<color=#75715e> * </color>
<color=#75715e> * See:  https://www.gnu.org/licenses/lgpl-2.1.html</color>
<color=#75715e> * You should have received a copy of the GNU General Public License </color>
<color=#75715e> * along with this library.</color>
<color=#75715e> */</color>

<color=#f92672>import</color> <color=#f8f8f2>java.util.Arrays</color><color=#f8f8f2>;</color>

<color=#f92672>import</color> <color=#f8f8f2>main.java.Helper</color><color=#f8f8f2>;</color>
<color=#f92672>import</color> <color=#f8f8f2>main.java.components.hash.HashInterface</color><color=#f8f8f2>;</color>


<color=#66d9ef>public</color> <color=#66d9ef>class</color> <color=#a6e22e>Blake2b_1</color> <color=#66d9ef>implements</color> <color=#f8f8f2>HashInterface</color> <color=#f8f8f2>{</color>
    
    <color=#f8f8f2>Helper</color> <color=#f8f8f2>helper</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#f8f8f2>Helper</color><color=#f8f8f2>();</color>
    
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#f8f8f2>blake2b_IV</color><color=#f92672>[]</color> <color=#f92672>=</color> 
            <color=#75715e>// Blake2b Initialization Vector: </color>
            <color=#75715e>// Produced from the square root of primes 2, 3, 5, 7, 11, 13, 17, 19.</color>
            <color=#75715e>// The same as SHA-512 IV.</color>
        <color=#f8f8f2>{</color>
          <color=#ae81ff>0x6a09e667f3bcc908L</color><color=#f8f8f2>,</color> <color=#ae81ff>0xbb67ae8584caa73bL</color><color=#f8f8f2>,</color> 
          <color=#ae81ff>0x3c6ef372fe94f82bL</color><color=#f8f8f2>,</color> <color=#ae81ff>0xa54ff53a5f1d36f1L</color><color=#f8f8f2>,</color>
          <color=#ae81ff>0x510e527fade682d1L</color><color=#f8f8f2>,</color> <color=#ae81ff>0x9b05688c2b3e6c1fL</color><color=#f8f8f2>,</color>
          <color=#ae81ff>0x1f83d9abfb41bd6bL</color><color=#f8f8f2>,</color> <color=#ae81ff>0x5be0cd19137e2179L</color> 
        <color=#f8f8f2>};</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#f8f8f2>blake2b_IV0</color> <color=#f92672>=</color> <color=#ae81ff>0x6a09e667f2bdc948L</color><color=#f8f8f2>;</color>
    
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>byte</color><color=#f92672>[][]</color> <color=#f8f8f2>blake2b_sigma</color> <color=#f92672>=</color> <color=#75715e>// Message word permutations</color>
        <color=#f8f8f2>{</color>
          <color=#f8f8f2>{</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color>  <color=#ae81ff>1</color><color=#f8f8f2>,</color>  <color=#ae81ff>2</color><color=#f8f8f2>,</color>  <color=#ae81ff>3</color><color=#f8f8f2>,</color>  <color=#ae81ff>4</color><color=#f8f8f2>,</color>  <color=#ae81ff>5</color><color=#f8f8f2>,</color>  <color=#ae81ff>6</color><color=#f8f8f2>,</color>  <color=#ae81ff>7</color><color=#f8f8f2>,</color>  <color=#ae81ff>8</color><color=#f8f8f2>,</color>  <color=#ae81ff>9</color><color=#f8f8f2>,</color> <color=#ae81ff>10</color><color=#f8f8f2>,</color> <color=#ae81ff>11</color><color=#f8f8f2>,</color> <color=#ae81ff>12</color><color=#f8f8f2>,</color> <color=#ae81ff>13</color><color=#f8f8f2>,</color> <color=#ae81ff>14</color><color=#f8f8f2>,</color> <color=#ae81ff>15</color> <color=#f8f8f2>}</color> <color=#f8f8f2>,</color>
          <color=#f8f8f2>{</color> <color=#ae81ff>14</color><color=#f8f8f2>,</color> <color=#ae81ff>10</color><color=#f8f8f2>,</color>  <color=#ae81ff>4</color><color=#f8f8f2>,</color>  <color=#ae81ff>8</color><color=#f8f8f2>,</color>  <color=#ae81ff>9</color><color=#f8f8f2>,</color> <color=#ae81ff>15</color><color=#f8f8f2>,</color> <color=#ae81ff>13</color><color=#f8f8f2>,</color>  <color=#ae81ff>6</color><color=#f8f8f2>,</color>  <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>12</color><color=#f8f8f2>,</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color>  <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>11</color><color=#f8f8f2>,</color>  <color=#ae81ff>7</color><color=#f8f8f2>,</color>  <color=#ae81ff>5</color><color=#f8f8f2>,</color>  <color=#ae81ff>3</color> <color=#f8f8f2>}</color> <color=#f8f8f2>,</color>
          <color=#f8f8f2>{</color> <color=#ae81ff>11</color><color=#f8f8f2>,</color>  <color=#ae81ff>8</color><color=#f8f8f2>,</color> <color=#ae81ff>12</color><color=#f8f8f2>,</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color>  <color=#ae81ff>5</color><color=#f8f8f2>,</color>  <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>15</color><color=#f8f8f2>,</color> <color=#ae81ff>13</color><color=#f8f8f2>,</color> <color=#ae81ff>10</color><color=#f8f8f2>,</color> <color=#ae81ff>14</color><color=#f8f8f2>,</color>  <color=#ae81ff>3</color><color=#f8f8f2>,</color>  <color=#ae81ff>6</color><color=#f8f8f2>,</color>  <color=#ae81ff>7</color><color=#f8f8f2>,</color>  <color=#ae81ff>1</color><color=#f8f8f2>,</color>  <color=#ae81ff>9</color><color=#f8f8f2>,</color>  <color=#ae81ff>4</color> <color=#f8f8f2>}</color> <color=#f8f8f2>,</color>
          <color=#f8f8f2>{</color>  <color=#ae81ff>7</color><color=#f8f8f2>,</color>  <color=#ae81ff>9</color><color=#f8f8f2>,</color>  <color=#ae81ff>3</color><color=#f8f8f2>,</color>  <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>13</color><color=#f8f8f2>,</color> <color=#ae81ff>12</color><color=#f8f8f2>,</color> <color=#ae81ff>11</color><color=#f8f8f2>,</color> <color=#ae81ff>14</color><color=#f8f8f2>,</color>  <color=#ae81ff>2</color><color=#f8f8f2>,</color>  <color=#ae81ff>6</color><color=#f8f8f2>,</color>  <color=#ae81ff>5</color><color=#f8f8f2>,</color> <color=#ae81ff>10</color><color=#f8f8f2>,</color>  <color=#ae81ff>4</color><color=#f8f8f2>,</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>15</color><color=#f8f8f2>,</color>  <color=#ae81ff>8</color> <color=#f8f8f2>}</color> <color=#f8f8f2>,</color>
          <color=#f8f8f2>{</color>  <color=#ae81ff>9</color><color=#f8f8f2>,</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color>  <color=#ae81ff>5</color><color=#f8f8f2>,</color>  <color=#ae81ff>7</color><color=#f8f8f2>,</color>  <color=#ae81ff>2</color><color=#f8f8f2>,</color>  <color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#ae81ff>10</color><color=#f8f8f2>,</color> <color=#ae81ff>15</color><color=#f8f8f2>,</color> <color=#ae81ff>14</color><color=#f8f8f2>,</color>  <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>11</color><color=#f8f8f2>,</color> <color=#ae81ff>12</color><color=#f8f8f2>,</color>  <color=#ae81ff>6</color><color=#f8f8f2>,</color>  <color=#ae81ff>8</color><color=#f8f8f2>,</color>  <color=#ae81ff>3</color><color=#f8f8f2>,</color> <color=#ae81ff>13</color> <color=#f8f8f2>}</color> <color=#f8f8f2>,</color>
          <color=#f8f8f2>{</color>  <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>12</color><color=#f8f8f2>,</color>  <color=#ae81ff>6</color><color=#f8f8f2>,</color> <color=#ae81ff>10</color><color=#f8f8f2>,</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>11</color><color=#f8f8f2>,</color>  <color=#ae81ff>8</color><color=#f8f8f2>,</color>  <color=#ae81ff>3</color><color=#f8f8f2>,</color>  <color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#ae81ff>13</color><color=#f8f8f2>,</color>  <color=#ae81ff>7</color><color=#f8f8f2>,</color>  <color=#ae81ff>5</color><color=#f8f8f2>,</color> <color=#ae81ff>15</color><color=#f8f8f2>,</color> <color=#ae81ff>14</color><color=#f8f8f2>,</color>  <color=#ae81ff>1</color><color=#f8f8f2>,</color>  <color=#ae81ff>9</color> <color=#f8f8f2>}</color> <color=#f8f8f2>,</color>
          <color=#f8f8f2>{</color> <color=#ae81ff>12</color><color=#f8f8f2>,</color>  <color=#ae81ff>5</color><color=#f8f8f2>,</color>  <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>15</color><color=#f8f8f2>,</color> <color=#ae81ff>14</color><color=#f8f8f2>,</color> <color=#ae81ff>13</color><color=#f8f8f2>,</color>  <color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#ae81ff>10</color><color=#f8f8f2>,</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color>  <color=#ae81ff>7</color><color=#f8f8f2>,</color>  <color=#ae81ff>6</color><color=#f8f8f2>,</color>  <color=#ae81ff>3</color><color=#f8f8f2>,</color>  <color=#ae81ff>9</color><color=#f8f8f2>,</color>  <color=#ae81ff>2</color><color=#f8f8f2>,</color>  <color=#ae81ff>8</color><color=#f8f8f2>,</color> <color=#ae81ff>11</color> <color=#f8f8f2>}</color> <color=#f8f8f2>,</color>
          <color=#f8f8f2>{</color> <color=#ae81ff>13</color><color=#f8f8f2>,</color> <color=#ae81ff>11</color><color=#f8f8f2>,</color>  <color=#ae81ff>7</color><color=#f8f8f2>,</color> <color=#ae81ff>14</color><color=#f8f8f2>,</color> <color=#ae81ff>12</color><color=#f8f8f2>,</color>  <color=#ae81ff>1</color><color=#f8f8f2>,</color>  <color=#ae81ff>3</color><color=#f8f8f2>,</color>  <color=#ae81ff>9</color><color=#f8f8f2>,</color>  <color=#ae81ff>5</color><color=#f8f8f2>,</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>15</color><color=#f8f8f2>,</color>  <color=#ae81ff>4</color><color=#f8f8f2>,</color>  <color=#ae81ff>8</color><color=#f8f8f2>,</color>  <color=#ae81ff>6</color><color=#f8f8f2>,</color>  <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>10</color> <color=#f8f8f2>}</color> <color=#f8f8f2>,</color>
          <color=#f8f8f2>{</color>  <color=#ae81ff>6</color><color=#f8f8f2>,</color> <color=#ae81ff>15</color><color=#f8f8f2>,</color> <color=#ae81ff>14</color><color=#f8f8f2>,</color>  <color=#ae81ff>9</color><color=#f8f8f2>,</color> <color=#ae81ff>11</color><color=#f8f8f2>,</color>  <color=#ae81ff>3</color><color=#f8f8f2>,</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color>  <color=#ae81ff>8</color><color=#f8f8f2>,</color> <color=#ae81ff>12</color><color=#f8f8f2>,</color>  <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>13</color><color=#f8f8f2>,</color>  <color=#ae81ff>7</color><color=#f8f8f2>,</color>  <color=#ae81ff>1</color><color=#f8f8f2>,</color>  <color=#ae81ff>4</color><color=#f8f8f2>,</color> <color=#ae81ff>10</color><color=#f8f8f2>,</color>  <color=#ae81ff>5</color> <color=#f8f8f2>}</color> <color=#f8f8f2>,</color>
          <color=#f8f8f2>{</color> <color=#ae81ff>10</color><color=#f8f8f2>,</color>  <color=#ae81ff>2</color><color=#f8f8f2>,</color>  <color=#ae81ff>8</color><color=#f8f8f2>,</color>  <color=#ae81ff>4</color><color=#f8f8f2>,</color>  <color=#ae81ff>7</color><color=#f8f8f2>,</color>  <color=#ae81ff>6</color><color=#f8f8f2>,</color>  <color=#ae81ff>1</color><color=#f8f8f2>,</color>  <color=#ae81ff>5</color><color=#f8f8f2>,</color> <color=#ae81ff>15</color><color=#f8f8f2>,</color> <color=#ae81ff>11</color><color=#f8f8f2>,</color>  <color=#ae81ff>9</color><color=#f8f8f2>,</color> <color=#ae81ff>14</color><color=#f8f8f2>,</color>  <color=#ae81ff>3</color><color=#f8f8f2>,</color> <color=#ae81ff>12</color><color=#f8f8f2>,</color> <color=#ae81ff>13</color> <color=#f8f8f2>,</color> <color=#ae81ff>0</color> <color=#f8f8f2>}</color> <color=#f8f8f2>,</color>
          <color=#f8f8f2>{</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color>  <color=#ae81ff>1</color><color=#f8f8f2>,</color>  <color=#ae81ff>2</color><color=#f8f8f2>,</color>  <color=#ae81ff>3</color><color=#f8f8f2>,</color>  <color=#ae81ff>4</color><color=#f8f8f2>,</color>  <color=#ae81ff>5</color><color=#f8f8f2>,</color>  <color=#ae81ff>6</color><color=#f8f8f2>,</color>  <color=#ae81ff>7</color><color=#f8f8f2>,</color>  <color=#ae81ff>8</color><color=#f8f8f2>,</color>  <color=#ae81ff>9</color><color=#f8f8f2>,</color> <color=#ae81ff>10</color><color=#f8f8f2>,</color> <color=#ae81ff>11</color><color=#f8f8f2>,</color> <color=#ae81ff>12</color><color=#f8f8f2>,</color> <color=#ae81ff>13</color><color=#f8f8f2>,</color> <color=#ae81ff>14</color><color=#f8f8f2>,</color> <color=#ae81ff>15</color> <color=#f8f8f2>}</color> <color=#f8f8f2>,</color>
          <color=#f8f8f2>{</color> <color=#ae81ff>14</color><color=#f8f8f2>,</color> <color=#ae81ff>10</color><color=#f8f8f2>,</color>  <color=#ae81ff>4</color><color=#f8f8f2>,</color>  <color=#ae81ff>8</color><color=#f8f8f2>,</color>  <color=#ae81ff>9</color><color=#f8f8f2>,</color> <color=#ae81ff>15</color><color=#f8f8f2>,</color> <color=#ae81ff>13</color><color=#f8f8f2>,</color>  <color=#ae81ff>6</color><color=#f8f8f2>,</color>  <color=#ae81ff>1</color><color=#f8f8f2>,</color> <color=#ae81ff>12</color><color=#f8f8f2>,</color>  <color=#ae81ff>0</color><color=#f8f8f2>,</color>  <color=#ae81ff>2</color><color=#f8f8f2>,</color> <color=#ae81ff>11</color><color=#f8f8f2>,</color>  <color=#ae81ff>7</color><color=#f8f8f2>,</color>  <color=#ae81ff>5</color><color=#f8f8f2>,</color>  <color=#ae81ff>3</color> <color=#f8f8f2>}</color>
        <color=#f8f8f2>};</color>
    
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>BLOCK_LENGTH_BYTES</color> <color=#f92672>=</color> <color=#ae81ff>128</color><color=#f8f8f2>;</color><color=#75715e>// bytes</color>
    <color=#66d9ef>private</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>int</color> <color=#f8f8f2>H_LEN</color> <color=#f92672>=</color> <color=#ae81ff>64</color><color=#f8f8f2>;</color> 

    <color=#66d9ef>private</color> <color=#66d9ef>int</color> <color=#f8f8f2>vIndex</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#75715e>// used as vertex index for Catena</color>

    <color=#66d9ef>private</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>buffer</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color><color=#75715e>//new byte[BLOCK_LENGTH_BYTES];</color>
    <color=#66d9ef>private</color> <color=#66d9ef>boolean</color> <color=#f8f8f2>halfBuffer</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>

    <color=#66d9ef>private</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>internalState</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[</color><color=#ae81ff>16</color><color=#f92672>]</color><color=#f8f8f2>;</color> <color=#75715e>// In the Blake2b paper it is called: v</color>
    <color=#66d9ef>private</color> <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>chainValue</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color> <color=#75715e>// state vector, in the Blake2b paper it is called: h</color>
    
    <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>t0</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>;</color> <color=#75715e>// holds last significant bits, counter (counts bytes)</color>
    <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#f8f8f2>t1</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>;</color> <color=#75715e>// counter: Length up to 2^128 are supported</color>
    
    <color=#66d9ef>public</color> <color=#a6e22e>Blake2b_1</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#f8f8f2>buffer</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>BLOCK_LENGTH_BYTES</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>init</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>

    <color=#75715e>// initialize chainValue</color>
    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>init</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>chainValue</color> <color=#f92672>==</color> <color=#66d9ef>null</color><color=#f8f8f2>){</color>
            <color=#f8f8f2>chainValue</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[</color><color=#ae81ff>8</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#ae81ff>0</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>blake2b_IV0</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>blake2b_IV</color><color=#f92672>[</color><color=#ae81ff>1</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>blake2b_IV</color><color=#f92672>[</color><color=#ae81ff>2</color><color=#f92672>]</color><color=#f8f8f2>;</color>      
            <color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>blake2b_IV</color><color=#f92672>[</color><color=#ae81ff>3</color><color=#f92672>]</color><color=#f8f8f2>;</color>          
            <color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#ae81ff>4</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>blake2b_IV</color><color=#f92672>[</color><color=#ae81ff>4</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#ae81ff>5</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>blake2b_IV</color><color=#f92672>[</color><color=#ae81ff>5</color><color=#f92672>]</color><color=#f8f8f2>;</color>          
            <color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#ae81ff>6</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>blake2b_IV</color><color=#f92672>[</color><color=#ae81ff>6</color><color=#f92672>]</color><color=#f8f8f2>;</color>
            <color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#ae81ff>7</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>blake2b_IV</color><color=#f92672>[</color><color=#ae81ff>7</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    
    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>initializeInternalState</color><color=#f8f8f2>(){</color>
        
        <color=#75715e>// initialize v:</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>chainValue</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>internalState</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>chainValue</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>blake2b_IV</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>internalState</color><color=#f8f8f2>,</color> <color=#f8f8f2>chainValue</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>,</color> <color=#ae81ff>4</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#ae81ff>12</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>t0</color> <color=#f92672>^</color> <color=#f8f8f2>blake2b_IV</color><color=#f92672>[</color><color=#ae81ff>4</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#ae81ff>13</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>t1</color> <color=#f92672>^</color> <color=#f8f8f2>blake2b_IV</color><color=#f92672>[</color><color=#ae81ff>5</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#ae81ff>14</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#ae81ff>0xFFFFFFFFFFFFFFFFL</color> <color=#f92672>^</color> <color=#f8f8f2>blake2b_IV</color><color=#f92672>[</color><color=#ae81ff>6</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#ae81ff>15</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>blake2b_IV</color><color=#f92672>[</color><color=#ae81ff>7</color><color=#f92672>]</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * Processes the given message</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param message</color>
<color=#75715e>     *            byte array containing the message to be processed</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>message</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
<color=#75715e>//      System.out.println("B2B1 mess.l: " + message.length);</color>
<color=#75715e>//      System.out.println("input b2b1: " + helper.bytes2hex(message));</color>
        
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f8f8f2>message</color><color=#f8f8f2>.</color><color=#a6e22e>length</color> <color=#f92672>==</color> <color=#ae81ff>128</color><color=#f8f8f2>){</color>
            <color=#f8f8f2>update</color><color=#f8f8f2>(</color><color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>copyOfRange</color><color=#f8f8f2>(</color><color=#f8f8f2>message</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#ae81ff>64</color><color=#f8f8f2>),</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>H_LEN</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>update</color><color=#f8f8f2>(</color><color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>copyOfRange</color><color=#f8f8f2>(</color><color=#f8f8f2>message</color><color=#f8f8f2>,</color> <color=#ae81ff>64</color><color=#f8f8f2>,</color> <color=#ae81ff>128</color><color=#f8f8f2>),</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>H_LEN</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>update</color><color=#f8f8f2>(</color><color=#f8f8f2>message</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>H_LEN</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * Processes one single byte</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param b</color>
<color=#75715e>     *            single byte to be processed</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color> <color=#f8f8f2>b</color><color=#f8f8f2>)</color> <color=#f8f8f2>{}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * Processes a number of bytes of the given message </color>
<color=#75715e>     * from a start position up to offset+len</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param message</color>
<color=#75715e>     *            byte array containing the message to be processed</color>
<color=#75715e>     * @param offset</color>
<color=#75715e>     *            position of message to start from</color>
<color=#75715e>     * @param len</color>
<color=#75715e>     *            number of bytes to be processed.</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>update</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>message</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>len</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#66d9ef>if</color> <color=#f8f8f2>(</color><color=#f92672>!</color><color=#f8f8f2>halfBuffer</color><color=#f8f8f2>){</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>message</color><color=#f8f8f2>,</color>  <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>H_LEN</color><color=#f8f8f2>);</color>
            <color=#f8f8f2>halfBuffer</color> <color=#f92672>=</color> <color=#66d9ef>true</color><color=#f8f8f2>;</color>          
        <color=#f8f8f2>}</color> <color=#66d9ef>else</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>message</color><color=#f8f8f2>,</color>  <color=#f8f8f2>offset</color><color=#f8f8f2>,</color> <color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#f8f8f2>H_LEN</color><color=#f8f8f2>,</color> <color=#f8f8f2>H_LEN</color><color=#f8f8f2>);</color>           
            <color=#f8f8f2>halfBuffer</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * Calculates the final digest value atus</color>
<color=#75715e>     */</color> 
    <color=#66d9ef>public</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>doFinal</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>out</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[</color><color=#f8f8f2>H_LEN</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>t0</color> <color=#f92672>+=</color> <color=#f8f8f2>BLOCK_LENGTH_BYTES</color><color=#f8f8f2>;</color>
        <color=#75715e>// simplified because increment is always 128</color>
        <color=#66d9ef>if</color> <color=#f8f8f2>(</color> <color=#f8f8f2>(</color><color=#f8f8f2>t0</color> <color=#f92672>==</color> <color=#ae81ff>0</color><color=#f8f8f2>)){</color>
            <color=#f8f8f2>t1</color><color=#f92672>++</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>}</color>
<color=#75715e>//      Helper h = new Helper();</color>
<color=#75715e>//      System.out.println("Buffer: " + h.bytes2hex(buffer));</color>
        
        <color=#f8f8f2>compress</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>halfBuffer</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        
        <color=#75715e>// increment counter by one</color>
        <color=#f8f8f2>vIndex</color> <color=#f92672>=</color> <color=#f8f8f2>(</color><color=#f8f8f2>vIndex</color><color=#f92672>+</color><color=#ae81ff>1</color><color=#f8f8f2>)</color> <color=#f92672>%</color> <color=#ae81ff>12</color><color=#f8f8f2>;</color>

        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>i</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color> <color=#f92672><</color> <color=#f8f8f2>chainValue</color><color=#f8f8f2>.</color><color=#a6e22e>length</color><color=#f8f8f2>;</color> <color=#f8f8f2>i</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>System</color><color=#f8f8f2>.</color><color=#a6e22e>arraycopy</color><color=#f8f8f2>(</color><color=#f8f8f2>long2bytes</color><color=#f8f8f2>(</color><color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#f8f8f2>i</color><color=#f92672>]</color><color=#f8f8f2>),</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color> <color=#f8f8f2>out</color><color=#f8f8f2>,</color> <color=#f8f8f2>i</color> <color=#f92672>*</color> <color=#ae81ff>8</color><color=#f8f8f2>,</color> <color=#ae81ff>8</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>out</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    
    <color=#75715e>/**</color>
<color=#75715e>     * Reset the hash function to use again after doFinal().</color>
<color=#75715e>     * This will not work for keyed digests. </color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>reset</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
<color=#75715e>//      System.out.println("--- RESET B2B1---");</color>
        <color=#f8f8f2>halfBuffer</color> <color=#f92672>=</color> <color=#66d9ef>false</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>t0</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>t1</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>;</color>
        <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>fill</color><color=#f8f8f2>(</color><color=#f8f8f2>buffer</color><color=#f8f8f2>,</color>  <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#ae81ff>0</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>fill</color><color=#f8f8f2>(</color><color=#f8f8f2>chainValue</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>);</color>    
        <color=#f8f8f2>Arrays</color><color=#f8f8f2>.</color><color=#a6e22e>fill</color><color=#f8f8f2>(</color><color=#f8f8f2>internalState</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>L</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>chainValue</color> <color=#f92672>=</color> <color=#66d9ef>null</color><color=#f8f8f2>;</color>
        
        <color=#f8f8f2>vIndex</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color>
        
        <color=#f8f8f2>init</color><color=#f8f8f2>();</color>
    <color=#f8f8f2>}</color>
    
    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>compress</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>message</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>messagePos</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>initializeInternalState</color><color=#f8f8f2>();</color>
        
        <color=#66d9ef>long</color><color=#f92672>[]</color> <color=#f8f8f2>m</color> <color=#f92672>=</color> <color=#66d9ef>new</color> <color=#66d9ef>long</color><color=#f92672>[</color><color=#ae81ff>16</color><color=#f92672>]</color><color=#f8f8f2>;</color>
        <color=#66d9ef>for</color> <color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>j</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color> <color=#f92672><</color> <color=#ae81ff>16</color><color=#f8f8f2>;</color> <color=#f8f8f2>j</color><color=#f92672>++</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>j</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>bytes2long</color><color=#f8f8f2>(</color><color=#f8f8f2>message</color><color=#f8f8f2>,</color> <color=#f8f8f2>messagePos</color> <color=#f92672>+</color> <color=#f8f8f2>j</color><color=#f92672>*</color><color=#ae81ff>8</color><color=#f8f8f2>);</color>
        <color=#f8f8f2>}</color>
        <color=#75715e>// single round: Catenas H'</color>
        <color=#75715e>// G apply to columns of internalState:m[blake2b_sigma[round][2 * blockPos]] /+1</color>
        <color=#f8f8f2>G</color><color=#f8f8f2>(</color><color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>vIndex</color><color=#f92672>][</color><color=#ae81ff>0</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>vIndex</color><color=#f92672>][</color><color=#ae81ff>1</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color><color=#ae81ff>4</color><color=#f8f8f2>,</color><color=#ae81ff>8</color><color=#f8f8f2>,</color><color=#ae81ff>12</color><color=#f8f8f2>);</color> 
        <color=#f8f8f2>G</color><color=#f8f8f2>(</color><color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>vIndex</color><color=#f92672>][</color><color=#ae81ff>2</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>vIndex</color><color=#f92672>][</color><color=#ae81ff>3</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color><color=#ae81ff>5</color><color=#f8f8f2>,</color><color=#ae81ff>9</color><color=#f8f8f2>,</color><color=#ae81ff>13</color><color=#f8f8f2>);</color> 
        <color=#f8f8f2>G</color><color=#f8f8f2>(</color><color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>vIndex</color><color=#f92672>][</color><color=#ae81ff>4</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>vIndex</color><color=#f92672>][</color><color=#ae81ff>5</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color><color=#ae81ff>6</color><color=#f8f8f2>,</color><color=#ae81ff>10</color><color=#f8f8f2>,</color><color=#ae81ff>14</color><color=#f8f8f2>);</color> 
        <color=#f8f8f2>G</color><color=#f8f8f2>(</color><color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>vIndex</color><color=#f92672>][</color><color=#ae81ff>6</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>vIndex</color><color=#f92672>][</color><color=#ae81ff>7</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color><color=#f8f8f2>,</color><color=#ae81ff>7</color><color=#f8f8f2>,</color><color=#ae81ff>11</color><color=#f8f8f2>,</color><color=#ae81ff>15</color><color=#f8f8f2>);</color> 
        <color=#75715e>// G apply to diagonals of internalState:</color>
        <color=#f8f8f2>G</color><color=#f8f8f2>(</color><color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>vIndex</color><color=#f92672>][</color><color=#ae81ff>8</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>vIndex</color><color=#f92672>][</color><color=#ae81ff>9</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#ae81ff>0</color><color=#f8f8f2>,</color><color=#ae81ff>5</color><color=#f8f8f2>,</color><color=#ae81ff>10</color><color=#f8f8f2>,</color><color=#ae81ff>15</color><color=#f8f8f2>);</color> 
        <color=#f8f8f2>G</color><color=#f8f8f2>(</color><color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>vIndex</color><color=#f92672>][</color><color=#ae81ff>10</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>vIndex</color><color=#f92672>][</color><color=#ae81ff>11</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#ae81ff>1</color><color=#f8f8f2>,</color><color=#ae81ff>6</color><color=#f8f8f2>,</color><color=#ae81ff>11</color><color=#f8f8f2>,</color><color=#ae81ff>12</color><color=#f8f8f2>);</color> 
        <color=#f8f8f2>G</color><color=#f8f8f2>(</color><color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>vIndex</color><color=#f92672>][</color><color=#ae81ff>12</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>vIndex</color><color=#f92672>][</color><color=#ae81ff>13</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#ae81ff>2</color><color=#f8f8f2>,</color><color=#ae81ff>7</color><color=#f8f8f2>,</color><color=#ae81ff>8</color><color=#f8f8f2>,</color><color=#ae81ff>13</color><color=#f8f8f2>);</color> 
        <color=#f8f8f2>G</color><color=#f8f8f2>(</color><color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>vIndex</color><color=#f92672>][</color><color=#ae81ff>14</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#f8f8f2>m</color><color=#f92672>[</color><color=#f8f8f2>blake2b_sigma</color><color=#f92672>[</color><color=#f8f8f2>vIndex</color><color=#f92672>][</color><color=#ae81ff>15</color><color=#f92672>]]</color><color=#f8f8f2>,</color> <color=#ae81ff>3</color><color=#f8f8f2>,</color><color=#ae81ff>4</color><color=#f8f8f2>,</color><color=#ae81ff>9</color><color=#f8f8f2>,</color><color=#ae81ff>14</color><color=#f8f8f2>);</color> 
        
        <color=#75715e>// update chain values: </color>
        <color=#66d9ef>for</color><color=#f8f8f2>(</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color> <color=#f92672>=</color> <color=#ae81ff>0</color><color=#f8f8f2>;</color> <color=#f8f8f2>offset</color> <color=#f92672><</color> <color=#ae81ff>8</color><color=#f8f8f2>;</color> <color=#f8f8f2>offset</color><color=#f92672>++</color> <color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
            <color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>chainValue</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>]</color> <color=#f92672>^</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>]</color> <color=#f92672>^</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>8</color><color=#f92672>]</color><color=#f8f8f2>;</color>    
        <color=#f8f8f2>}</color>
    <color=#f8f8f2>}</color>
    

    <color=#66d9ef>private</color> <color=#66d9ef>void</color> <color=#a6e22e>G</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>m1</color><color=#f8f8f2>,</color> <color=#66d9ef>long</color> <color=#f8f8f2>m2</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>posA</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>posB</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>posC</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>posD</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>

        <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posA</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posA</color><color=#f92672>]</color> <color=#f92672>+</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posB</color><color=#f92672>]</color> <color=#f92672>+</color> <color=#f8f8f2>m1</color><color=#f8f8f2>;</color> 
        <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posD</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>rotr64</color><color=#f8f8f2>(</color><color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posD</color><color=#f92672>]</color> <color=#f92672>^</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posA</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#ae81ff>32</color><color=#f8f8f2>);</color> 
        <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posC</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posC</color><color=#f92672>]</color> <color=#f92672>+</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posD</color><color=#f92672>]</color><color=#f8f8f2>;</color> 
        <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posB</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>rotr64</color><color=#f8f8f2>(</color><color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posB</color><color=#f92672>]</color> <color=#f92672>^</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posC</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#ae81ff>24</color><color=#f8f8f2>);</color> <color=#75715e>// replaces 25 of BLAKE</color>
        <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posA</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posA</color><color=#f92672>]</color> <color=#f92672>+</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posB</color><color=#f92672>]</color> <color=#f92672>+</color> <color=#f8f8f2>m2</color><color=#f8f8f2>;</color> 
        <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posD</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>rotr64</color><color=#f8f8f2>(</color><color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posD</color><color=#f92672>]</color> <color=#f92672>^</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posA</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#ae81ff>16</color><color=#f8f8f2>);</color> 
        <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posC</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posC</color><color=#f92672>]</color> <color=#f92672>+</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posD</color><color=#f92672>]</color><color=#f8f8f2>;</color> 
        <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posB</color><color=#f92672>]</color> <color=#f92672>=</color> <color=#f8f8f2>rotr64</color><color=#f8f8f2>(</color><color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posB</color><color=#f92672>]</color> <color=#f92672>^</color> <color=#f8f8f2>internalState</color><color=#f92672>[</color><color=#f8f8f2>posC</color><color=#f92672>]</color><color=#f8f8f2>,</color> <color=#ae81ff>63</color><color=#f8f8f2>);</color> <color=#75715e>// replaces 11 of BLAKE</color>
    <color=#f8f8f2>}</color>
    
    <color=#66d9ef>private</color> <color=#66d9ef>long</color> <color=#a6e22e>rotr64</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>x</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>rot</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>x</color> <color=#f92672>>>></color> <color=#f8f8f2>rot</color> <color=#f92672>|</color> <color=#f8f8f2>(</color><color=#f8f8f2>x</color> <color=#f92672><<</color> <color=#f8f8f2>(</color><color=#ae81ff>64</color> <color=#f92672>-</color> <color=#f8f8f2>rot</color><color=#f8f8f2>));</color>
    <color=#f8f8f2>}</color>
    

    <color=#66d9ef>public</color> <color=#f8f8f2>String</color> <color=#a6e22e>getName</color><color=#f8f8f2>(){</color>
        <color=#66d9ef>return</color> <color=#e6db74>"Catena_Blake2b_1"</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>/**</color>
<color=#75715e>     * This function is used for password hashing scheme</color>
<color=#75715e>     * Catenas round-reduced version H'</color>
<color=#75715e>     * </color>
<color=#75715e>     * @param _vIndex   some index</color>
<color=#75715e>     */</color>
    <color=#66d9ef>public</color> <color=#66d9ef>void</color> <color=#a6e22e>setVertexIndex</color><color=#f8f8f2>(</color><color=#66d9ef>int</color> <color=#f8f8f2>_vIndex</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        
        <color=#f8f8f2>vIndex</color> <color=#f92672>=</color> <color=#f8f8f2>_vIndex</color> <color=#f92672>%</color> <color=#ae81ff>12</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// convert one long value in byte array</color>
    <color=#75715e>// little-endian byte order!</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#a6e22e>long2bytes</color><color=#f8f8f2>(</color><color=#66d9ef>long</color> <color=#f8f8f2>longValue</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#66d9ef>new</color> <color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>{</color>         
            <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>longValue</color><color=#f8f8f2>,</color>
            <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>longValue</color> <color=#f92672>>></color> <color=#ae81ff>8</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>longValue</color> <color=#f92672>>></color> <color=#ae81ff>16</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>longValue</color> <color=#f92672>>></color> <color=#ae81ff>24</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>longValue</color> <color=#f92672>>></color> <color=#ae81ff>32</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>longValue</color> <color=#f92672>>></color> <color=#ae81ff>40</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>longValue</color> <color=#f92672>>></color> <color=#ae81ff>48</color><color=#f8f8f2>),</color>
            <color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f8f8f2>)</color> <color=#f8f8f2>(</color><color=#f8f8f2>longValue</color> <color=#f92672>>></color> <color=#ae81ff>56</color><color=#f8f8f2>)};</color>
    <color=#f8f8f2>}</color>
    <color=#75715e>// little-endian byte order!</color>
    <color=#66d9ef>public</color> <color=#66d9ef>final</color> <color=#66d9ef>static</color> <color=#66d9ef>long</color> <color=#a6e22e>bytes2long</color><color=#f8f8f2>(</color><color=#66d9ef>byte</color><color=#f92672>[]</color> <color=#f8f8f2>byteArray</color><color=#f8f8f2>,</color> <color=#66d9ef>int</color> <color=#f8f8f2>offset</color><color=#f8f8f2>)</color> <color=#f8f8f2>{</color>
          
          <color=#66d9ef>return</color> <color=#f8f8f2>(</color>                
                  <color=#f8f8f2>((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>byteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color> <color=#f8f8f2>)</color> <color=#f92672>|</color>
                  <color=#f8f8f2>(((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>byteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>1</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color> <color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>8</color><color=#f8f8f2>)</color> <color=#f92672>|</color>
                  <color=#f8f8f2>(((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>byteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>2</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color> <color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>16</color><color=#f8f8f2>)</color> <color=#f92672>|</color>
                  <color=#f8f8f2>(((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>byteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>3</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color> <color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>24</color><color=#f8f8f2>)</color> <color=#f92672>|</color>
                  <color=#f8f8f2>(((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>byteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>4</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color> <color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>32</color><color=#f8f8f2>)</color> <color=#f92672>|</color>
                  <color=#f8f8f2>(((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>byteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>5</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color> <color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>40</color><color=#f8f8f2>)</color> <color=#f92672>|</color>
                  <color=#f8f8f2>(((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>byteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>6</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color> <color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>48</color><color=#f8f8f2>)</color> <color=#f92672>|</color>
                  <color=#f8f8f2>(((</color><color=#66d9ef>long</color><color=#f8f8f2>)</color> <color=#f8f8f2>byteArray</color><color=#f92672>[</color><color=#f8f8f2>offset</color> <color=#f92672>+</color> <color=#ae81ff>7</color><color=#f92672>]</color> <color=#f92672>&</color> <color=#ae81ff>0xFF</color> <color=#f8f8f2>)</color> <color=#f92672><<</color> <color=#ae81ff>56</color><color=#f8f8f2>)</color> <color=#f8f8f2>)</color> <color=#f8f8f2>;</color>                                  
    <color=#f8f8f2>}</color>


    <color=#66d9ef>public</color> <color=#66d9ef>int</color> <color=#a6e22e>getOutputSize</color><color=#f8f8f2>()</color> <color=#f8f8f2>{</color>
        <color=#66d9ef>return</color> <color=#f8f8f2>H_LEN</color><color=#f8f8f2>;</color>
    <color=#f8f8f2>}</color>   
<color=#f8f8f2>}</color>