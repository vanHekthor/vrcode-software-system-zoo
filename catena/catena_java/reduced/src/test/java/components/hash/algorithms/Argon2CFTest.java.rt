<color=#7401DF>package</color> <color=#045FB4>test.java.components.hash.algorithms</color>;

<color=#7401DF>import static</color> <color=#045FB4>org.junit.Assert.assertTrue</color>;

<color=#7401DF>import</color> <color=#045FB4>java.io.File</color>;

<color=#7401DF>import</color> <color=#045FB4>org.json.JSONArray</color>;
<color=#7401DF>import</color> <color=#045FB4>org.json.JSONObject</color>;
<color=#7401DF>import</color> <color=#045FB4>org.junit.Test</color>;

<color=#7401DF>import</color> <color=#045FB4>main.java.Helper</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.hash.HashInterface</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.hash.algorithms.Argon2CF</color>;

<color=#7e101a>public</color> <color=#7e101a>class</color> <color=#355c08>Argon2CFTest</color> {

	Helper helper = <color=#7e101a>new</color> Helper();
	
	String pathGL = "src/test/resources/cfArgon2Gl.json";
	File fileGL = <color=#7e101a>new</color> File(pathGL);
	
	String pathGB = "src/test/resources/cfArgon2Gb.json";
	File fileGB = <color=#7e101a>new</color> File(pathGB);
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testGL(){
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileGL);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			String func = inputs.<color=#045FB4>getString</color>("mixFunc");
			String dataString = inputs.<color=#045FB4>getString</color>("data");

			String res = outputs.<color=#045FB4>getString</color>("res");
			
			<color=#8000FF>boolean</color> useGL = true;
			
			<color=#7e101a>if</color> (func.<color=#045FB4>equals</color>("G_{L}")){
				useGL = true;
			} <color=#7e101a>else</color> {
				useGL = false;
			}
			
			HashInterface h = <color=#7e101a>new</color> Argon2CF(useGL);
			h.<color=#045FB4>update</color>(helper.<color=#045FB4>hex2bytes</color>(dataString));
			<color=#8000FF>byte</color>[] output = h.<color=#045FB4>doFinal</color>();
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}
	}
	
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testGB(){
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileGB);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			String func = inputs.<color=#045FB4>getString</color>("mixFunc");
			String dataString = inputs.<color=#045FB4>getString</color>("data");

			String res = outputs.<color=#045FB4>getString</color>("res");
			
			<color=#8000FF>boolean</color> useGL = false;
			
			<color=#7e101a>if</color> (func.<color=#045FB4>equals</color>("G_{B}")){
				useGL = false;
			} <color=#7e101a>else</color> {
				useGL = true;
			}
			
			HashInterface h = <color=#7e101a>new</color> Argon2CF(useGL);
			h.<color=#045FB4>update</color>(helper.<color=#045FB4>hex2bytes</color>(dataString));
			<color=#8000FF>byte</color>[] output = h.<color=#045FB4>doFinal</color>();
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}
	}
}