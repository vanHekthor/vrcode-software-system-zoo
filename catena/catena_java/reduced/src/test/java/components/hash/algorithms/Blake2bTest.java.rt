<color=#7401DF>package</color> <color=#045FB4>test.java.components.hash.algorithms</color>;

<color=#434343>/**</color>
<color=#434343> * @author Max Weber</color>
<color=#434343> * hex2bytes and bytes2hex are from </color>
<color=#434343> * https://github.com/BLAKE2/</color>
<color=#434343> */</color>
<color=#7401DF>import static</color> <color=#045FB4>org.junit.Assert.*</color>;

<color=#7401DF>import</color> <color=#045FB4>java.io.BufferedReader</color>;
<color=#7401DF>import</color> <color=#045FB4>java.io.File</color>;
<color=#7401DF>import</color> <color=#045FB4>java.io.FileReader</color>;

<color=#7401DF>import</color> <color=#045FB4>org.json.JSONArray</color>;
<color=#7401DF>import</color> <color=#045FB4>org.json.JSONObject</color>;
<color=#7401DF>import</color> <color=#045FB4>org.junit.Test</color>;

<color=#7401DF>import</color> <color=#045FB4>main.java.Helper</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.hash.algorithms.Blake2b</color>;

<color=#7e101a>public</color> <color=#7e101a>class</color> <color=#355c08>Blake2bTest</color> {
	
	<color=#7e101a>static</color> <color=#7e101a>class</color> <color=#355c08>TestVector</color> {
		<color=#7e101a>public</color> String Input, Key, Hash;
		
		<color=#7e101a>public</color> TestVector(String in, String key, String hash){
			Input = in;
			Key = key;
			Hash = hash;			
		}
	};
	 
	<color=#7e101a>private</color> Helper helper = <color=#7e101a>new</color> Helper();
	
	<color=#7e101a>private</color> <color=#7e101a>static</color> <color=#7e101a>final</color> String testVectorSource = 
			"src/test/resources/blake2b.json";
	<color=#7e101a>private</color> <color=#7e101a>static</color> <color=#7e101a>final</color> File fileBlake2b = <color=#7e101a>new</color> File(testVectorSource);
	
	String input1 = "";
	String key = "000102030405060708090a0b0c0d0e0f10111213"
			+ "1415161718191a1b1c1d1e1f2021222324252627282"
			+ "92a2b2c2d2e2f303132333435363738393a3b3c3d3e"
			+ "3f";
	String hash1 = "10ebb67700b1868efb4417987acf4690ae9d97"
			+ "2fb7a590c2f02871799aaa4786b5e996e8f0f4eb981"
			+ "fc214b005f42d2ff4233499391653df7aefcbc13fc5"
			+ "1568";
	String zeroes = "0000000000000000000000000000000000000"
			+ "0000000000000000000000000000000000000000000"
			+ "0000000000000000000000000000000000000000000"
			+ "0000000";
	String zeroesRes = "061D94FA094482C5688AB83995F17AEC64"
			+ "F955D59E9EB406EA9BBA84DF7D6DA86D1C88D519669"
			+ "159E409A926A1D9E151A4F69EF110EAD0A1E5B62A42"
			+ "E15C396F";
	String zeroes2 = "0100000000000000000000000000000000000"
			+ "0000000000000000000000000000000000000000000"
			+ "0000000000000000000000000000000000000000000"
			+ "0000000";
	String zeroesRes2 = "A4C37D9E1FD03BA5E8EB64D307225A959"
			+ "50A2211BDC83B4C1009600DCAD956182B5B5639B860"
			+ "E8FC583A4A482FAC45E8CBA97996737B4E376C884C8"
			+ "0BFD7D010";
	
	<color=#434343>/**</color>
<color=#434343>	 * simple test example for Blake2b</color>
<color=#434343>	 * one vector from "https://github.com/BLAKE2/"</color>
<color=#434343>	 */</color>
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testsimple() {
		
		<color=#8000FF>byte</color>[] anyByteArray1 = helper.<color=#045FB4>hex2bytes</color>(input1);
		<color=#8000FF>byte</color>[] exp = helper.<color=#045FB4>hex2bytes</color>(hash1);
		<color=#8000FF>byte</color>[] keyInBytes = helper.<color=#045FB4>hex2bytes</color>(key);
		
		Blake2b b = <color=#7e101a>new</color> Blake2b(keyInBytes);
		b.<color=#045FB4>update</color>( anyByteArray1 );
		<color=#8000FF>byte</color>[] hash = <color=#7e101a>new</color> <color=#8000FF>byte</color>[64];
		hash = b.<color=#045FB4>doFinal</color>();
		  
		assertTrue(helper.<color=#045FB4>bytes2hex</color>(hash).<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(exp)));
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testsimple2 () {
		<color=#8000FF>byte</color>[] anyByteArray1 = helper.<color=#045FB4>hex2bytes</color>(input1);
		
		<color=#8000FF>byte</color>[] exp = helper.<color=#045FB4>hex2bytes</color>(hash1);
		<color=#8000FF>byte</color>[] keyInBytes = helper.<color=#045FB4>hex2bytes</color>(key);
		
		Blake2b b = <color=#7e101a>new</color> Blake2b(keyInBytes);
		b.<color=#045FB4>update</color>( anyByteArray1 );
		<color=#8000FF>byte</color>[] hash = <color=#7e101a>new</color> <color=#8000FF>byte</color>[64];
		hash = b.<color=#045FB4>doFinal</color>();
		  
		assertTrue(helper.<color=#045FB4>bytes2hex</color>(hash).<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(exp)));
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testZeroes(){
		<color=#8000FF>byte</color>[] anyByteArray1 = helper.<color=#045FB4>hex2bytes</color>(zeroes);
		<color=#8000FF>byte</color>[] exp = helper.<color=#045FB4>hex2bytes</color>(zeroesRes);
		
		Blake2b b = <color=#7e101a>new</color> Blake2b();
		b.<color=#045FB4>update</color>( anyByteArray1 );
		<color=#8000FF>byte</color>[] hash = <color=#7e101a>new</color> <color=#8000FF>byte</color>[64];
		hash = b.<color=#045FB4>doFinal</color>();
		
		assertTrue(helper.<color=#045FB4>bytes2hex</color>(hash).<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(exp)));
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testZeroes2(){
		<color=#8000FF>byte</color>[] anyByteArray1 = helper.<color=#045FB4>hex2bytes</color>(zeroes2);
		<color=#8000FF>byte</color>[] exp = helper.<color=#045FB4>hex2bytes</color>(zeroesRes2);
		
		Blake2b b = <color=#7e101a>new</color> Blake2b();
		b.<color=#045FB4>update</color>( anyByteArray1 );
		<color=#8000FF>byte</color>[] hash = <color=#7e101a>new</color> <color=#8000FF>byte</color>[64];
		hash = b.<color=#045FB4>doFinal</color>();
		
<color=#434343>//		System.out.println(helper.bytes2hex(hash));</color>
		
		assertTrue(helper.<color=#045FB4>bytes2hex</color>(hash).<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(exp)));
	}
	
	<color=#434343>/**</color>
<color=#434343>	 * parsing and testing against all official test vectors </color>
<color=#434343>	 * from "https://github.com/BLAKE2/"</color>
<color=#434343>	 */</color>
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testAllVectors() {
		
		JSONArray jsonObj = jsonParser(fileBlake2b);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			String in = inputs.<color=#045FB4>getString</color>("in");
			String k = inputs.<color=#045FB4>getString</color>("key");
			
			String res = outputs.<color=#045FB4>getString</color>("res");
			
			<color=#8000FF>byte</color>[] input = helper.<color=#045FB4>hex2bytes</color>(in);
			<color=#8000FF>byte</color>[] key   = helper.<color=#045FB4>hex2bytes</color>(k);
			<color=#8000FF>byte</color>[] hash  = helper.<color=#045FB4>hex2bytes</color>(res);
		
			Blake2b b = <color=#7e101a>new</color> Blake2b(key);
			b.<color=#045FB4>update</color>(input);
			<color=#8000FF>byte</color>[] output = <color=#7e101a>new</color> <color=#8000FF>byte</color>[64];
			output = b.<color=#045FB4>doFinal</color>();
			
			assertTrue(helper.<color=#045FB4>bytes2hex</color>(hash).<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output)));
		}
	}
	
	<color=#434343>/**</color>
<color=#434343>	 * Test output Length of h with keyed hashing</color>
<color=#434343>	 */</color>
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testOutputLength1(){
		<color=#8000FF>byte</color>[] anyByteArray1 = helper.<color=#045FB4>hex2bytes</color>(input1);
		<color=#8000FF>byte</color>[] keyInBytes = helper.<color=#045FB4>hex2bytes</color>(key);
		
		Blake2b b = <color=#7e101a>new</color> Blake2b(keyInBytes);
		b.<color=#045FB4>update</color>( anyByteArray1 );
		<color=#8000FF>byte</color>[] hash = <color=#7e101a>new</color> <color=#8000FF>byte</color>[64];
		hash = b.<color=#045FB4>doFinal</color>();
		
		assertTrue(hash.<color=#045FB4>length</color>==b.<color=#045FB4>getOutputSize</color>());
	}
	
	<color=#434343>/**</color>
<color=#434343>	 * Test output Length of h without keyed hashing</color>
<color=#434343>	 */</color>
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testOutputLength2(){
		<color=#8000FF>byte</color>[] anyByteArray1 = helper.<color=#045FB4>hex2bytes</color>(input1);
		
		Blake2b b = <color=#7e101a>new</color> Blake2b();
		b.<color=#045FB4>update</color>( anyByteArray1 );
		<color=#8000FF>byte</color>[] hash = <color=#7e101a>new</color> <color=#8000FF>byte</color>[64];
		hash = b.<color=#045FB4>doFinal</color>();
		
		assertTrue(hash.<color=#045FB4>length</color>==b.<color=#045FB4>getOutputSize</color>());
	}
	
	<color=#434343>/**</color>
<color=#434343>	 * Test output Length of h without key and</color>
<color=#434343>	 * empty input</color>
<color=#434343>	 */</color>
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testOutputLength3(){
		Blake2b b = <color=#7e101a>new</color> Blake2b();
		<color=#8000FF>byte</color>[] hash = <color=#7e101a>new</color> <color=#8000FF>byte</color>[64];
		hash = b.<color=#045FB4>doFinal</color>();
		
		assertTrue(hash.<color=#045FB4>length</color>==b.<color=#045FB4>getOutputSize</color>());
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testBlake2bConstructor(){
		<color=#8000FF>byte</color>[] key = {};
		<color=#8000FF>byte</color>[] _salt = <color=#7e101a>new</color> <color=#8000FF>byte</color>[16];
		<color=#8000FF>int</color> _digestLength = 1;
		<color=#8000FF>byte</color>[]_personalization = <color=#7e101a>new</color> <color=#8000FF>byte</color>[16];
		
		<color=#7e101a>new</color> Blake2b(key, _digestLength, _salt, _personalization);
		
		<color=#8000FF>byte</color>[] act = {};
		<color=#8000FF>byte</color>[] exp = {};
		
		assertArrayEquals(exp, act);
	}
	
		
<color=#434343>//====================================================================</color>
<color=#434343>// Helper functions:</color>
	
	<color=#434343>/**</color>
<color=#434343>	 * Helper-function</color>
<color=#434343>	 * reads test vector file</color>
<color=#434343>	 * creates test vector object </color>
<color=#434343>	 */</color>
	
	<color=#7e101a>private</color> JSONArray jsonParser(File f){
		BufferedReader br;
		String all = "";
		<color=#7e101a>try</color> {
			br = <color=#7e101a>new</color> BufferedReader(<color=#7e101a>new</color> FileReader(f));
			String line;
			<color=#7e101a>while</color> ((line = br.<color=#045FB4>readLine</color>()) != null) {
				all+=line;
			}
		}<color=#7e101a>catch</color> (Exception e) {
		}
		<color=#7e101a>return</color> <color=#7e101a>new</color> JSONArray(all);
	}
}