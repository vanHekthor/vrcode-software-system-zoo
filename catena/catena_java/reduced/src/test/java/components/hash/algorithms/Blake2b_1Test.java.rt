<color=#7401DF>package</color> <color=#045FB4>test.java.components.hash.algorithms</color>;

<color=#7401DF>import static</color> <color=#045FB4>org.junit.Assert.*</color>;

<color=#7401DF>import</color> <color=#045FB4>java.io.BufferedReader</color>;
<color=#7401DF>import</color> <color=#045FB4>java.io.File</color>;
<color=#7401DF>import</color> <color=#045FB4>java.io.FileReader</color>;

<color=#7401DF>import</color> <color=#045FB4>org.json.JSONArray</color>;
<color=#7401DF>import</color> <color=#045FB4>org.json.JSONObject</color>;
<color=#7401DF>import</color> <color=#045FB4>org.junit.Test</color>;

<color=#7401DF>import</color> <color=#045FB4>main.java.Helper</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.hash.HashInterface</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.hash.algorithms.Blake2b_1</color>;

<color=#7e101a>public</color> <color=#7e101a>class</color> <color=#355c08>Blake2b_1Test</color> {
	
	Helper helper = <color=#7e101a>new</color> Helper();
	
	<color=#7e101a>private</color> <color=#7e101a>static</color> <color=#7e101a>final</color> String testVectorSource = 
			"src/test/resources/blake2b1.json";
	<color=#7e101a>private</color> <color=#7e101a>static</color> <color=#7e101a>final</color> File file = <color=#7e101a>new</color> File(testVectorSource);
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testAllVectors() {
		Helper helper = <color=#7e101a>new</color> Helper();		
		HashInterface hPrime = <color=#7e101a>new</color> Blake2b_1();
		
		<color=#8000FF>byte</color>[] actualResult = <color=#7e101a>new</color> <color=#8000FF>byte</color>[64];
		
		<color=#8000FF>boolean</color> reset = false;
		<color=#8000FF>int</color> r = 0;
		
		JSONArray jsonObj = jsonParser(file);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			reset = inputs.<color=#045FB4>getBoolean</color>("reset");
			<color=#8000FF>byte</color>[] input = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("data"));
			r = inputs.<color=#045FB4>getInt</color>("r");
			
			<color=#8000FF>byte</color>[] output = helper.<color=#045FB4>hex2bytes</color>(outputs.<color=#045FB4>getString</color>("res"));
			
			<color=#7e101a>if</color> (reset){
				hPrime.<color=#045FB4>reset</color>();
			}
			
			hPrime.<color=#045FB4>setVertexIndex</color>(r);
			hPrime.<color=#045FB4>update</color>(input);
			actualResult = hPrime.<color=#045FB4>doFinal</color>();
			
			assertTrue(helper.<color=#045FB4>bytes2hex</color>(actualResult).
					equals(helper.<color=#045FB4>bytes2hex</color>(output)));
		}
	}

<color=#434343>//		------------------- Helper Area</color>
		
	<color=#7e101a>private</color> JSONArray jsonParser(File f){
		BufferedReader br;
		String all = "";
		<color=#7e101a>try</color> {
			br = <color=#7e101a>new</color> BufferedReader(<color=#7e101a>new</color> FileReader(f));
			String line;
			<color=#7e101a>while</color> ((line = br.<color=#045FB4>readLine</color>()) != null) {
				all+=line;
			}
		}<color=#7e101a>catch</color> (Exception e) {
		}
		<color=#7e101a>return</color> <color=#7e101a>new</color> JSONArray(all);
	}
}