<color=#7401DF>package</color> <color=#045FB4>test.java.components.phi.algorithms.index</color>;

<color=#7401DF>import static</color> <color=#045FB4>org.junit.Assert.*</color>;

<color=#7401DF>import</color> <color=#045FB4>java.io.File</color>;

<color=#7401DF>import</color> <color=#045FB4>org.json.JSONArray</color>;
<color=#7401DF>import</color> <color=#045FB4>org.json.JSONObject</color>;
<color=#7401DF>import</color> <color=#045FB4>org.junit.Test</color>;

<color=#7401DF>import</color> <color=#045FB4>main.java.Helper</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.phi.algorithms.IdxStateInterface</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.phi.algorithms.index.LSBIndex</color>;

<color=#7e101a>public</color> <color=#7e101a>class</color> <color=#355c08>LSBIndexTest</color> {

	Helper helper = <color=#7e101a>new</color> Helper();
	
	
	String pathlsbIndex = "src/test/resources/lsbIndex.json";
	File fileLSBIndex = <color=#7e101a>new</color> File(pathlsbIndex); 
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> test() {
		IdxStateInterface idx = <color=#7e101a>new</color> LSBIndex();
	
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileLSBIndex);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			String state = inputs.<color=#045FB4>getString</color>("state");
			<color=#8000FF>int</color> numBits = inputs.<color=#045FB4>getInt</color>("num_bits");
			<color=#8000FF>byte</color>[] stateArr = helper.<color=#045FB4>hex2bytes</color>(state);

			<color=#8000FF>int</color> expRes = outputs.<color=#045FB4>getInt</color>("res");
			<color=#8000FF>int</color> actRes = idx.<color=#045FB4>getLsbIndex</color>(stateArr, numBits);
			
			assertEquals(expRes, actRes);
		}
	}

}