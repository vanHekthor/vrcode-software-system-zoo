<color=#7401DF>package</color> <color=#045FB4>test.java.components.graph.algorithms.index</color>;

<color=#7401DF>import static</color> <color=#045FB4>org.junit.Assert.*</color>;

<color=#7401DF>import</color> <color=#045FB4>java.io.File</color>;

<color=#7401DF>import</color> <color=#045FB4>org.json.JSONArray</color>;
<color=#7401DF>import</color> <color=#045FB4>org.json.JSONObject</color>;
<color=#7401DF>import</color> <color=#045FB4>org.junit.Test</color>;

<color=#7401DF>import</color> <color=#045FB4>main.java.Helper</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.graph.GraphInterface</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.graph.algorithms.DoubleButterflyGraph</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.graph.algorithms.IdxInterface</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.graph.algorithms.index.IndexDBG</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.hash.HashInterface</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.hash.algorithms.Blake2b</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.hash.algorithms.Blake2b_1</color>;

<color=#7e101a>public</color> <color=#7e101a>class</color> <color=#355c08>IndexDBGTest</color> {
	
	Helper helper = <color=#7e101a>new</color> Helper();

	<color=#7e101a>private</color> String pathDbhAny = "src/test/resources/dbhAny.json";
	<color=#7e101a>private</color> File fileDbhAny = <color=#7e101a>new</color> File(pathDbhAny);
	
	<color=#7e101a>private</color> String pathDbhAnyFull = "src/test/resources/dbhAnyFull.json";
	<color=#7e101a>private</color> File fileDbhAnyFull = <color=#7e101a>new</color> File(pathDbhAnyFull);
	
	<color=#7e101a>private</color> String pathDbhIndex = "src/test/resources/dbhIndex.json";
	<color=#7e101a>private</color> File fileDbhIndex = <color=#7e101a>new</color> File(pathDbhIndex);

	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testDbhAny(){
		
		GraphInterface graph = <color=#7e101a>new</color> DoubleButterflyGraph();
		
		HashInterface h = <color=#7e101a>new</color> Blake2b();
		HashInterface hPrime = <color=#7e101a>new</color> Blake2b_1();
		IdxInterface idx = <color=#7e101a>new</color> IndexDBG();
		
		graph.<color=#045FB4>setH</color>(h);
		graph.<color=#045FB4>setHPrime</color>(hPrime);
		graph.<color=#045FB4>setIndexing</color>(idx);
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileDbhAny);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			
			hPrime.<color=#045FB4>reset</color>();
			
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			<color=#8000FF>int</color> garlic = inputs.<color=#045FB4>getInt</color>("garlic");
			String state = inputs.<color=#045FB4>getString</color>("state");
			<color=#8000FF>int</color> lambda = inputs.<color=#045FB4>getInt</color>("lambda");
			
			<color=#8000FF>byte</color>[] stateArr = helper.<color=#045FB4>hex2bytes</color>(state);
			<color=#8000FF>byte</color>[][] twoDimStateArr = helper.<color=#045FB4>oneDimByteArrToTwoDim</color>(stateArr, 64);

			String res = outputs.<color=#045FB4>getString</color>("res");

			<color=#8000FF>byte</color>[][] graphOutput = graph.<color=#045FB4>graph</color>(garlic, twoDimStateArr, lambda);
			<color=#8000FF>byte</color>[] output = helper.<color=#045FB4>twoDimByteArrayToOne</color>(graphOutput);
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testDbhAnyFull(){
		
		GraphInterface graph = <color=#7e101a>new</color> DoubleButterflyGraph();
		
		HashInterface h = <color=#7e101a>new</color> Blake2b();
		HashInterface hPrime = <color=#7e101a>new</color> Blake2b();
		IdxInterface idx = <color=#7e101a>new</color> IndexDBG();
		
		graph.<color=#045FB4>setH</color>(h);
		graph.<color=#045FB4>setHPrime</color>(hPrime);
		graph.<color=#045FB4>setIndexing</color>(idx);
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileDbhAnyFull);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			<color=#8000FF>int</color> garlic = inputs.<color=#045FB4>getInt</color>("garlic");
			String state = inputs.<color=#045FB4>getString</color>("state");
			<color=#8000FF>int</color> lambda = inputs.<color=#045FB4>getInt</color>("lambda");
			
			<color=#8000FF>byte</color>[] stateArr = helper.<color=#045FB4>hex2bytes</color>(state);
			<color=#8000FF>byte</color>[][] twoDimStateArr = helper.<color=#045FB4>oneDimByteArrToTwoDim</color>(stateArr, 64);

			String res = outputs.<color=#045FB4>getString</color>("res");

			<color=#8000FF>byte</color>[][] graphOutput = graph.<color=#045FB4>graph</color>(garlic, twoDimStateArr, lambda);
			<color=#8000FF>byte</color>[] output = helper.<color=#045FB4>twoDimByteArrayToOne</color>(graphOutput);
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testDBHIndexing(){
		
		IdxInterface idx = <color=#7e101a>new</color> IndexDBG();
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileDbhIndex);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			<color=#8000FF>int</color> g = inputs.<color=#045FB4>getInt</color>("g");
			<color=#8000FF>int</color> j = inputs.<color=#045FB4>getInt</color>("j");
			<color=#8000FF>int</color> i_in = inputs.<color=#045FB4>getInt</color>("i");

			<color=#8000FF>long</color> exp = outputs.<color=#045FB4>getLong</color>("res");
			
			<color=#8000FF>long</color> act = idx.<color=#045FB4>getIndex</color>(g, j, i_in);
			
			assertEquals(exp, act);
		}
	}
}