<color=#7401DF>package</color> <color=#045FB4>test.java.components.graph.algorithms.index</color>;

<color=#7401DF>import static</color> <color=#045FB4>org.junit.Assert.assertEquals</color>;
<color=#7401DF>import static</color> <color=#045FB4>org.junit.Assert.assertTrue</color>;

<color=#7401DF>import</color> <color=#045FB4>java.io.File</color>;

<color=#7401DF>import</color> <color=#045FB4>org.json.JSONArray</color>;
<color=#7401DF>import</color> <color=#045FB4>org.json.JSONObject</color>;
<color=#7401DF>import</color> <color=#045FB4>org.junit.Test</color>;

<color=#7401DF>import</color> <color=#045FB4>main.java.Helper</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.graph.GraphInterface</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.graph.algorithms.GenericGraph</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.graph.algorithms.IdxInterface</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.graph.algorithms.index.IndexGRG</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.hash.HashInterface</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.hash.algorithms.Blake2b</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.hash.algorithms.Blake2b_1</color>;

<color=#7e101a>public</color> <color=#7e101a>class</color> <color=#355c08>IndexGRGTest</color> {

	Helper helper = <color=#7e101a>new</color> Helper();

	<color=#7e101a>private</color> String pathGrgIndex = "src/test/resources/grgIndex.json";
	<color=#7e101a>private</color> File fileGrgIndex = <color=#7e101a>new</color> File(pathGrgIndex);
	
	<color=#7e101a>private</color> String pathGrgAny = "src/test/resources/grgAny.json";
	<color=#7e101a>private</color> File fileGrgAny = <color=#7e101a>new</color> File(pathGrgAny);
	
	<color=#7e101a>private</color> String pathGrgAnyFull = "src/test/resources/grgAnyFull.json";
	<color=#7e101a>private</color> File fileGrgAnyFull = <color=#7e101a>new</color> File(pathGrgAnyFull);
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testIndexGRG(){
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileGrgIndex);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			<color=#8000FF>long</color> index = inputs.<color=#045FB4>getLong</color>("index");
			<color=#8000FF>int</color> g = inputs.<color=#045FB4>getInt</color>("g");
			<color=#8000FF>int</color> l = inputs.<color=#045FB4>getInt</color>("l");

			<color=#8000FF>long</color> exp = outputs.<color=#045FB4>getLong</color>("res");
			
			IdxInterface idx = <color=#7e101a>new</color> IndexGRG(l);
			<color=#8000FF>long</color> act = idx.<color=#045FB4>getIndex</color>(index, g);
			
			assertEquals(exp, act);
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testGrgAny(){
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileGrgAny);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			<color=#8000FF>int</color> garlic = inputs.<color=#045FB4>getInt</color>("garlic");
			String state = inputs.<color=#045FB4>getString</color>("state");
			<color=#8000FF>int</color> lambda = inputs.<color=#045FB4>getInt</color>("lambda");
			<color=#8000FF>int</color> l = inputs.<color=#045FB4>getInt</color>("l");
			
			GraphInterface graph = <color=#7e101a>new</color> GenericGraph();
			
			HashInterface h = <color=#7e101a>new</color> Blake2b();
			HashInterface hPrime = <color=#7e101a>new</color> Blake2b_1();
			IdxInterface idx = <color=#7e101a>new</color> IndexGRG(l);
			
			graph.<color=#045FB4>setH</color>(h);
			graph.<color=#045FB4>setHPrime</color>(hPrime);
			graph.<color=#045FB4>setIndexing</color>(idx);
			
			<color=#8000FF>byte</color>[] stateArr = helper.<color=#045FB4>hex2bytes</color>(state);
			<color=#8000FF>byte</color>[][] twoDimStateArr = helper.<color=#045FB4>oneDimByteArrToTwoDim</color>(stateArr, 64);

			String res = outputs.<color=#045FB4>getString</color>("res");
			
			<color=#8000FF>byte</color>[][] graphOutput = graph.<color=#045FB4>graph</color>(garlic, twoDimStateArr, lambda);
			<color=#8000FF>byte</color>[] output = helper.<color=#045FB4>twoDimByteArrayToOne</color>(graphOutput);
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}

	}
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testGrgAnyFull(){
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileGrgAnyFull);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			<color=#8000FF>int</color> garlic = inputs.<color=#045FB4>getInt</color>("garlic");
			String state = inputs.<color=#045FB4>getString</color>("state");
			<color=#8000FF>int</color> lambda = inputs.<color=#045FB4>getInt</color>("lambda");
			<color=#8000FF>int</color> l = inputs.<color=#045FB4>getInt</color>("l");
			
			GraphInterface graph = <color=#7e101a>new</color> GenericGraph();
			
			HashInterface h = <color=#7e101a>new</color> Blake2b();
			HashInterface hPrime = <color=#7e101a>new</color> Blake2b();
			IdxInterface idx = <color=#7e101a>new</color> IndexGRG(l);
			
			graph.<color=#045FB4>setH</color>(h);
			graph.<color=#045FB4>setHPrime</color>(hPrime);
			graph.<color=#045FB4>setIndexing</color>(idx);
			
			<color=#8000FF>byte</color>[] stateArr = helper.<color=#045FB4>hex2bytes</color>(state);
			<color=#8000FF>byte</color>[][] twoDimStateArr = helper.<color=#045FB4>oneDimByteArrToTwoDim</color>(stateArr, 64);

			String res = outputs.<color=#045FB4>getString</color>("res");
			
			<color=#8000FF>byte</color>[][] graphOutput = graph.<color=#045FB4>graph</color>(garlic, twoDimStateArr, lambda);
			<color=#8000FF>byte</color>[] output = helper.<color=#045FB4>twoDimByteArrayToOne</color>(graphOutput);
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testIndexGRG1(){
		<color=#8000FF>int</color> input1 = 0;
		<color=#8000FF>int</color> input2 = 0;
		<color=#8000FF>int</color> input3 = 0;
		IdxInterface idx = <color=#7e101a>new</color> IndexGRG(2);
		<color=#8000FF>long</color> actual = idx.<color=#045FB4>getIndex</color>(input1, input2, input3);
		<color=#8000FF>long</color> expected = -1;
		assertEquals(expected, actual);
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testIndexGRG2(){
		<color=#8000FF>long</color> input1 = 0;
		<color=#8000FF>long</color> input2 = 0;
		<color=#8000FF>int</color> input3 = 0;
		IdxInterface idx = <color=#7e101a>new</color> IndexGRG(2);
		<color=#8000FF>long</color> actual = idx.<color=#045FB4>getIndex</color>(input1, input2, input3);
		<color=#8000FF>long</color> expected = -1;
		assertEquals(expected, actual);
	}
}