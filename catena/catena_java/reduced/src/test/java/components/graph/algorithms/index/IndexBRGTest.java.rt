<color=#7401DF>package</color> <color=#045FB4>test.java.components.graph.algorithms.index</color>;

<color=#7401DF>import static</color> <color=#045FB4>org.junit.Assert.*</color>;

<color=#7401DF>import</color> <color=#045FB4>java.io.File</color>;

<color=#7401DF>import</color> <color=#045FB4>org.json.JSONArray</color>;
<color=#7401DF>import</color> <color=#045FB4>org.json.JSONObject</color>;
<color=#7401DF>import</color> <color=#045FB4>org.junit.Test</color>;

<color=#7401DF>import</color> <color=#045FB4>main.java.Helper</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.graph.algorithms.GenericGraph</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.graph.algorithms.IdxInterface</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.graph.algorithms.index.IndexBRG</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.hash.HashInterface</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.hash.algorithms.Blake2b</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.hash.algorithms.Blake2b_1</color>;

<color=#7e101a>public</color> <color=#7e101a>class</color> <color=#355c08>IndexBRGTest</color> {
	
	<color=#7e101a>private</color> IdxInterface idxBrg = <color=#7e101a>new</color> IndexBRG();
	
	<color=#7e101a>private</color> String pathBrgAny = "src/test/resources/brgAny.json";
	<color=#7e101a>private</color> File fileBrgAny = <color=#7e101a>new</color> File(pathBrgAny);
	
	<color=#7e101a>private</color> String pathbrgAnyFull = "src/test/resources/brgAnyFull.json";
	<color=#7e101a>private</color> File filebrgAnyFull = <color=#7e101a>new</color> File(pathbrgAnyFull);
	
	<color=#7e101a>private</color> String pathbrgIndex = "src/test/resources/brgIndex.json";
	<color=#7e101a>private</color> File filebrgIndex = <color=#7e101a>new</color> File(pathbrgIndex);
	
	
	<color=#7e101a>private</color> Helper helper = <color=#7e101a>new</color> Helper();

	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testBRGAny(){
		GenericGraph graph = <color=#7e101a>new</color> GenericGraph();
		
		IdxInterface idx = <color=#7e101a>new</color> IndexBRG();
		
		HashInterface h = <color=#7e101a>new</color> Blake2b();
		HashInterface hPrime = <color=#7e101a>new</color> Blake2b_1();
		
		graph.<color=#045FB4>setH</color>(h);
		graph.<color=#045FB4>setHPrime</color>(hPrime);
		graph.<color=#045FB4>setIndexing</color>(idx);
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileBrgAny);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			
			hPrime.<color=#045FB4>reset</color>();
			
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			<color=#8000FF>int</color> garlic = inputs.<color=#045FB4>getInt</color>("garlic");
			String state = inputs.<color=#045FB4>getString</color>("state");
			<color=#8000FF>int</color> lambda = inputs.<color=#045FB4>getInt</color>("lambda");
			
			<color=#8000FF>byte</color>[] stateArr = helper.<color=#045FB4>hex2bytes</color>(state);
			<color=#8000FF>byte</color>[][] twoDimStateArr = helper.<color=#045FB4>oneDimByteArrToTwoDim</color>(stateArr, 64);

			String res = outputs.<color=#045FB4>getString</color>("res");

			<color=#8000FF>byte</color>[][] graphOutput = graph.<color=#045FB4>graph</color>(garlic, twoDimStateArr, lambda);
			<color=#8000FF>byte</color>[] output = helper.<color=#045FB4>twoDimByteArrayToOne</color>(graphOutput);
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testBRGAnyFull(){
		GenericGraph graph = <color=#7e101a>new</color> GenericGraph();
		
		IdxInterface idx = <color=#7e101a>new</color> IndexBRG();
		
		HashInterface h = <color=#7e101a>new</color> Blake2b();
		HashInterface hPrime = <color=#7e101a>new</color> Blake2b();
		
		graph.<color=#045FB4>setH</color>(h);
		graph.<color=#045FB4>setHPrime</color>(hPrime);
		graph.<color=#045FB4>setIndexing</color>(idx);
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(filebrgAnyFull);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			<color=#8000FF>int</color> garlic = inputs.<color=#045FB4>getInt</color>("garlic");
			String state = inputs.<color=#045FB4>getString</color>("state");
			<color=#8000FF>int</color> lambda = inputs.<color=#045FB4>getInt</color>("lambda");
			
			<color=#8000FF>byte</color>[] stateArr = helper.<color=#045FB4>hex2bytes</color>(state);
			<color=#8000FF>byte</color>[][] twoDimStateArr = helper.<color=#045FB4>oneDimByteArrToTwoDim</color>(stateArr, 64);

			String res = outputs.<color=#045FB4>getString</color>("res");

			<color=#8000FF>byte</color>[][] graphOutput = graph.<color=#045FB4>graph</color>(garlic, twoDimStateArr, lambda);
			<color=#8000FF>byte</color>[] output = helper.<color=#045FB4>twoDimByteArrayToOne</color>(graphOutput);
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}
	}
	
	@Test 
	<color=#7e101a>public</color> <color=#8000FF>void</color> testBRGIndex(){
		
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(filebrgIndex);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			<color=#8000FF>int</color> index = inputs.<color=#045FB4>getInt</color>("index");
			<color=#8000FF>int</color> g = inputs.<color=#045FB4>getInt</color>("g");
			
			<color=#8000FF>int</color> exp = outputs.<color=#045FB4>getInt</color>("res");
			
			<color=#8000FF>int</color> act = idxBrg.<color=#045FB4>getIndex</color>(index, g);
			
			assertEquals(exp, act);
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> test() {
		assertEquals(12, idxBrg.<color=#045FB4>getIndex</color>(3, 4));
		assertEquals(0, idxBrg.<color=#045FB4>getIndex</color>(0, 4));
		assertEquals(1, idxBrg.<color=#045FB4>getIndex</color>(1, 1));
		assertEquals(15, idxBrg.<color=#045FB4>getIndex</color>(15, 4));
		assertEquals(1, idxBrg.<color=#045FB4>getIndex</color>(8, 4));
		assertEquals(4, idxBrg.<color=#045FB4>getIndex</color>(4, 5));
		assertEquals(86, idxBrg.<color=#045FB4>getIndex</color>(53, 7));
		assertEquals(2688, idxBrg.<color=#045FB4>getIndex</color>(42, 13));
		
<color=#434343>//		System.out.println(idxBrg.getIndex(20, 21));</color>
<color=#434343>//		System.out.println(idxBrg.getIndex((long)2097151, 21));</color>
<color=#434343>//		</color>
		assertEquals(12, idxBrg.<color=#045FB4>getIndex</color>((<color=#8000FF>long</color>)3, 4));
		assertEquals(0, idxBrg.<color=#045FB4>getIndex</color>((<color=#8000FF>long</color>)0, 4));
		assertEquals(1, idxBrg.<color=#045FB4>getIndex</color>((<color=#8000FF>long</color>)1, 1));
		assertEquals(15, idxBrg.<color=#045FB4>getIndex</color>((<color=#8000FF>long</color>)15, 4));
		assertEquals(1, idxBrg.<color=#045FB4>getIndex</color>((<color=#8000FF>long</color>)8, 4));
		assertEquals(4, idxBrg.<color=#045FB4>getIndex</color>((<color=#8000FF>long</color>)4, 5));
		assertEquals(86, idxBrg.<color=#045FB4>getIndex</color>((<color=#8000FF>long</color>)53, 7));
		assertEquals(2688, idxBrg.<color=#045FB4>getIndex</color>((<color=#8000FF>long</color>)42, 13));
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testIndexBRG1(){
		<color=#8000FF>int</color> input1 = 0;
		<color=#8000FF>int</color> input2 = 0;
		<color=#8000FF>int</color> input3 = 0;
		IdxInterface idx = <color=#7e101a>new</color> IndexBRG();
		<color=#8000FF>long</color> actual = idx.<color=#045FB4>getIndex</color>(input1, input2, input3);
		<color=#8000FF>long</color> expected = -1;
		assertEquals(expected, actual);
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testIndexBRG2(){
		<color=#8000FF>long</color> input1 = 0;
		<color=#8000FF>long</color> input2 = 0;
		<color=#8000FF>int</color> input3 = 0;
		IdxInterface idx = <color=#7e101a>new</color> IndexBRG();
		<color=#8000FF>long</color> actual = idx.<color=#045FB4>getIndex</color>(input1, input2, input3);
		<color=#8000FF>long</color> expected = -1;
		assertEquals(expected, actual);
	}
}