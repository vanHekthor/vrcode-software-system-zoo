<color=#7401DF>package</color> <color=#045FB4>test.java</color>;

<color=#7401DF>import static</color> <color=#045FB4>org.junit.Assert.*</color>;

<color=#7401DF>import</color> <color=#045FB4>org.junit.Test</color>;

<color=#7401DF>import</color> <color=#045FB4>main.java.Helper</color>;


<color=#7e101a>public</color> <color=#7e101a>class</color> <color=#355c08>HelperTest</color> {
	
	<color=#7e101a>private</color> Helper helper = <color=#7e101a>new</color> Helper();
	
	String hash1XORING = "1568";
	String hash2XORING = "10ab";

	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testConcateByteArrays() {
		<color=#8000FF>byte</color>[] a = <color=#7e101a>new</color> <color=#8000FF>byte</color>[2];
		<color=#8000FF>byte</color>[] b = <color=#7e101a>new</color> <color=#8000FF>byte</color>[3];
		
		<color=#8000FF>byte</color>[] c = helper.<color=#045FB4>concateByteArrays</color>(a, b);
		
		assertEquals(c.<color=#045FB4>length</color>, a.<color=#045FB4>length</color>+b.<color=#045FB4>length</color>);
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testoneDimByteArrToTwoDim(){
		<color=#8000FF>int</color> len = 64;
		<color=#8000FF>byte</color>[] b = helper.<color=#045FB4>hex2bytes</color>("3d6d5d5b1b159210437827d4956b9775bfd3"
				+ "dab68f98e958cff9f64f62155168b432f1e248b41573918"
				+ "7dc7894e2c53167e0c3142dea5a8e4faac7d29fdac127b7"
				+ "7b4f34758083a59b44e9c22917d6ee598485f414500bbd0"
				+ "69c142177fba6b7815ab47fe7a6a01e7ab20f9217a5549a"
				+ "f3aaba255957bb979f46db5e2014cbb733e161e765fa206"
				+ "42ef4e1c18a8b7fee7339cd547aaf9bdbdbe5f11739118b"
				+ "b3f6c9abce48337e6cfaff168d7910fbcb0aa3c265ba426"
				+ "ff71ff5d2c2d74c5f769716a0ee29b7bf4ad1f1f9eab0a4"
				+ "58cf222a89f0a1822c5d21b3d7db9092aacabaee9cd97b6"
				+ "870987b9fddf97180cbd496c2e459eca027eae9f9798acc"
				+ "255835");
		
		<color=#8000FF>byte</color>[][] expected = <color=#7e101a>new</color> <color=#8000FF>byte</color>[4][64];
		expected[0] = helper.<color=#045FB4>hex2bytes</color>("3d6d5d5b1b159210437827d4956"
				+ "b9775bfd3dab68f98e958cff9f64f62155168b432f1e248b"
				+ "415739187dc7894e2c53167e0c3142dea5a8e4faac7d29fd"
				+ "ac127");
		expected[1] = helper.<color=#045FB4>hex2bytes</color>("b77b4f34758083a59b44e9c2291"
				+ "7d6ee598485f414500bbd069c142177fba6b7815ab47fe7a"
				+ "6a01e7ab20f9217a5549af3aaba255957bb979f46db5e201"
				+ "4cbb7");
		expected[2] = helper.<color=#045FB4>hex2bytes</color>("33e161e765fa20642ef4e1c18a8"
				+ "b7fee7339cd547aaf9bdbdbe5f11739118bb3f6c9abce483"
				+ "37e6cfaff168d7910fbcb0aa3c265ba426ff71ff5d2c2d74"
				+ "c5f76");
		expected[3] = helper.<color=#045FB4>hex2bytes</color>("9716a0ee29b7bf4ad1f1f9eab0a"
				+ "458cf222a89f0a1822c5d21b3d7db9092aacabaee9cd97b6"
				+ "870987b9fddf97180cbd496c2e459eca027eae9f9798acc2"
				+ "55835");

		<color=#8000FF>byte</color>[][] out = helper.<color=#045FB4>oneDimByteArrToTwoDim</color>(b, len);
		
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i < expected.<color=#045FB4>length</color>; ++i){
			assertArrayEquals(expected[i], out[i]);
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testXor(){
		<color=#8000FF>byte</color>[] a = <color=#7e101a>new</color> <color=#8000FF>byte</color>[]{0,1,0,1};
		<color=#8000FF>byte</color>[] b = <color=#7e101a>new</color> <color=#8000FF>byte</color>[]{1,1,0,1};
		
		<color=#8000FF>byte</color>[] res = <color=#7e101a>new</color> <color=#8000FF>byte</color>[]{1,0,0,0};
		
		<color=#8000FF>byte</color>[] c = helper.<color=#045FB4>xor</color>(a, b);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i=0; i<res.<color=#045FB4>length</color>; ++i){
			assertEquals(res[i], c[i]);
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testXorHash(){
		<color=#8000FF>byte</color>[] a = helper.<color=#045FB4>hex2bytes</color>(hash1XORING);
		<color=#8000FF>byte</color>[] b = helper.<color=#045FB4>hex2bytes</color>(hash1XORING);
		<color=#8000FF>byte</color>[] c = helper.<color=#045FB4>hex2bytes</color>(hash2XORING);
		
		<color=#8000FF>byte</color>[] x = helper.<color=#045FB4>xor</color>(a, b);
		<color=#8000FF>byte</color>[] y = helper.<color=#045FB4>xor</color>(a, c);
		
		<color=#8000FF>byte</color>[] resAB = helper.<color=#045FB4>hex2bytes</color>("0000");
		<color=#8000FF>byte</color>[] resAC = helper.<color=#045FB4>hex2bytes</color>("05c3");
		
		assertArrayEquals(resAB, x);
		assertArrayEquals(resAC, y);
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testIntToByteArray2(){
		<color=#8000FF>int</color> input = 12;
		<color=#8000FF>byte</color>[] exp = {0,12};
		
		<color=#8000FF>byte</color>[] act = helper.<color=#045FB4>intToByteArray</color>(input, 2);
		
		assertArrayEquals(exp, act);
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testIntToByteArray4(){
		<color=#8000FF>int</color> input = 12;
		<color=#8000FF>byte</color>[] exp = {0, 0, 0, 12};
		
		<color=#8000FF>byte</color>[] act = helper.<color=#045FB4>intToByteArray</color>(input, 4);
		
		assertArrayEquals(exp, act);
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testIntToByteArray0(){
		<color=#8000FF>int</color> input = 12;
		<color=#8000FF>byte</color>[] exp = <color=#7e101a>new</color> <color=#8000FF>byte</color>[1];
		
		<color=#8000FF>byte</color>[] act = helper.<color=#045FB4>intToByteArray</color>(input, 0);
		
		assertArrayEquals(exp, act);
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testBytesToInt(){
		<color=#8000FF>byte</color>[] bytes = {0,0,0,12};
		<color=#8000FF>int</color> act = helper.<color=#045FB4>bytesToInt</color>(bytes);
		<color=#8000FF>int</color> exp = 12;
		
		assertEquals(exp, act);
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testIntToBytes(){
		<color=#8000FF>byte</color>[] exp = {0,0,0,12};
		<color=#8000FF>byte</color>[] act = helper.<color=#045FB4>intToBytes</color>(12);

		assertArrayEquals(exp, act);
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testBytesToLong(){
		<color=#8000FF>byte</color>[] bytes = {0,0,0,0,0,0,0,12};
		<color=#8000FF>long</color> act = helper.<color=#045FB4>bytesToLong</color>(bytes);
		<color=#8000FF>long</color> exp = 12;
		
		assertEquals(exp, act);
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testLongToBytes(){
		<color=#8000FF>byte</color>[] exp = {0,0,0,0,0,0,0,12};
		<color=#8000FF>byte</color>[] act = helper.<color=#045FB4>longToBytes</color>(12);

		assertArrayEquals(exp, act);
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testPaddWithZero(){
		<color=#8000FF>byte</color>[] inp = {12,13,14};
		<color=#8000FF>int</color> l = 10;
		<color=#8000FF>byte</color>[] act = helper.<color=#045FB4>paddWithZero</color>(inp, l);
		<color=#8000FF>byte</color>[] exp = {12,13,14,0,0,0,0,0,0,0};
		
		assertArrayEquals(exp, act);
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testintToByteArrayLittleEndian(){
		<color=#8000FF>int</color> input = 12;
		<color=#8000FF>int</color> bytes = 4;
		<color=#8000FF>byte</color>[] actual = helper.<color=#045FB4>intToByteArrayLittleEndian</color>(input, bytes);
		<color=#8000FF>byte</color>[] expected = {12,0,0,0};
		assertArrayEquals(expected, actual);
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testintToByteArrayLittleEndian0(){
		<color=#8000FF>int</color> input = 12;
		<color=#8000FF>int</color> bytes = 1;
		<color=#8000FF>byte</color>[] actual = helper.<color=#045FB4>intToByteArrayLittleEndian</color>(input, bytes);
		<color=#8000FF>byte</color>[] expected = <color=#7e101a>new</color> <color=#8000FF>byte</color>[1];
		assertArrayEquals(expected, actual);
	}
	
}