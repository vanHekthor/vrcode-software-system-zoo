<color=#7401DF>package</color> <color=#045FB4>test.java</color>;

<color=#7401DF>import static</color> <color=#045FB4>org.junit.Assert.assertEquals</color>;

<color=#7401DF>import</color> <color=#045FB4>java.io.File</color>;

<color=#7401DF>import</color> <color=#045FB4>org.json.JSONArray</color>;
<color=#7401DF>import</color> <color=#045FB4>org.json.JSONObject</color>;
<color=#7401DF>import</color> <color=#045FB4>org.junit.Test</color>;

<color=#7401DF>import</color> <color=#045FB4>main.java.Catena</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.DefaultInstances</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.Helper</color>;

<color=#7e101a>public</color> <color=#7e101a>class</color> <color=#355c08>DefaultInstancesTest</color> {
	
	Helper helper = <color=#7e101a>new</color> Helper();
	
<color=#434343>//	private String pathDragonfly = "src/test/resources/catenaDragonfly.json";</color>
<color=#434343>//	private File fileDragonfly = new File(pathDragonfly);</color>
<color=#434343>//	</color>
<color=#434343>//	private String pathDragonflyFull = "src/test/resources/catenaDragonflyFull.json";</color>
<color=#434343>//	private File fileDragonflyFull = new File(pathDragonflyFull);</color>
<color=#434343>//	</color>
<color=#434343>//	private String pathButterfly = "src/test/resources/catenaButterfly.json";</color>
<color=#434343>//	private File butterflyFile = new File(pathButterfly);</color>
<color=#434343>//	</color>
<color=#434343>//	private String pathButterflyFull = "src/test/resources/catenaButterflyFull.json";</color>
<color=#434343>//	private File butterflyFileFull = new File(pathButterflyFull);</color>
	
	
	<color=#7e101a>private</color> String pathDragonflyReduced = "src/test/resources/catenaDragonflyReduced.json";
	<color=#7e101a>private</color> File fileDragonflyReduced = <color=#7e101a>new</color> File(pathDragonflyReduced);
	
	<color=#7e101a>private</color> String pathDragonflyFullReduced = "src/test/resources/catenaDragonflyFullReduced.json";
	<color=#7e101a>private</color> File fileDragonflyFullReduced = <color=#7e101a>new</color> File(pathDragonflyFullReduced);
	
	<color=#7e101a>private</color> String pathButterflyReduced = "src/test/resources/catenaButterflyReduced.json";
	<color=#7e101a>private</color> File butterflyFileReduced = <color=#7e101a>new</color> File(pathButterflyReduced);
	
	<color=#7e101a>private</color> String pathButterflyFullReduced = "src/test/resources/catenaButterflyFullReduced.json";
	<color=#7e101a>private</color> File butterflyFileFullReduced = <color=#7e101a>new</color> File(pathButterflyFullReduced);
	
	
	<color=#7e101a>private</color> String pathcatenaHorseflyFullReduced ="src/test/resources/catenaHorseflyFullReduced.json";
	<color=#7e101a>private</color> File filecatenaHorseflyFullReduced = <color=#7e101a>new</color> File(pathcatenaHorseflyFullReduced);
	
	<color=#7e101a>private</color> String pathcatenaLanternflyFullReduced ="src/test/resources/catenaLanternflyFullReduced.json";
	<color=#7e101a>private</color> File filecatenaLanternflyFullReduced = <color=#7e101a>new</color> File(pathcatenaLanternflyFullReduced);
	
	<color=#7e101a>private</color> String pathcatenaMydasflyFullReduced ="src/test/resources/catenaMydasflyFullReduced.json";
	<color=#7e101a>private</color> File filecatenaMydasflyFullReduced = <color=#7e101a>new</color> File(pathcatenaMydasflyFullReduced);
	
	<color=#7e101a>private</color> String pathcatenaStoneflyFullReduced ="src/test/resources/catenaStoneflyFullReduced.json";
	<color=#7e101a>private</color> File filecatenaStoneflyFullReduced = <color=#7e101a>new</color> File(pathcatenaStoneflyFullReduced);
	
	
	<color=#7e101a>private</color> String pathcatenaHorseflyReduced ="src/test/resources/catenaHorseflyReduced.json";
	<color=#7e101a>private</color> File filecatenaHorseflyReduced = <color=#7e101a>new</color> File(pathcatenaHorseflyReduced);
	
	<color=#7e101a>private</color> String pathcatenaLanternflyReduced ="src/test/resources/catenaLanternflyReduced.json";
	<color=#7e101a>private</color> File filecatenaLanternflyReduced = <color=#7e101a>new</color> File(pathcatenaLanternflyReduced);
	
	<color=#7e101a>private</color> String pathcatenaMydasflyReduced ="src/test/resources/catenaMydasflyReduced.json";
	<color=#7e101a>private</color> File filecatenaMydasflyReduced = <color=#7e101a>new</color> File(pathcatenaMydasflyReduced);
	
	<color=#7e101a>private</color> String pathcatenaStoneflyReduced ="src/test/resources/catenaStoneflyReduced.json";
	<color=#7e101a>private</color> File filecatenaStoneflyReduced = <color=#7e101a>new</color> File(pathcatenaStoneflyReduced);
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testcatenaHorseflyReduced(){
		DefaultInstances defaultInstance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = defaultInstance.<color=#045FB4>initHorsefly</color>();
		
		c.<color=#045FB4>setGHigh</color>(13);
		c.<color=#045FB4>setGLow</color>(13);
		
		<color=#8000FF>byte</color>[] pwd;
		<color=#8000FF>byte</color>[] salt;
		<color=#8000FF>byte</color>[] gamma;
		<color=#8000FF>byte</color>[] aData;
		<color=#8000FF>int</color> outputLength;
		
		String actualResult;
		String expectedResult;
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(filecatenaHorseflyReduced);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			pwd = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("pwd"));
			salt = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("salt")); 
			gamma = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("gamma"));
			aData = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("aData"));
			outputLength = inputs.<color=#045FB4>getInt</color>("outputLength");

			expectedResult = outputs.<color=#045FB4>getString</color>("res");
			actualResult = helper.<color=#045FB4>bytes2hex</color>(c.<color=#045FB4>catena</color>(pwd, salt, aData, gamma, outputLength));
			assertEquals(expectedResult, actualResult.<color=#045FB4>toLowerCase</color>());
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testcatenaLanternflyReduced(){
		DefaultInstances defaultInstance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = defaultInstance.<color=#045FB4>initLanternfly</color>();
		
		c.<color=#045FB4>setGHigh</color>(9);
		c.<color=#045FB4>setGLow</color>(9);
		
		<color=#8000FF>byte</color>[] pwd;
		<color=#8000FF>byte</color>[] salt;
		<color=#8000FF>byte</color>[] gamma;
		<color=#8000FF>byte</color>[] aData;
		<color=#8000FF>int</color> outputLength;
		
		String actualResult;
		String expectedResult;
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(filecatenaLanternflyReduced);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			pwd = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("pwd"));
			salt = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("salt")); 
			gamma = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("gamma"));
			aData = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("aData"));
			outputLength = inputs.<color=#045FB4>getInt</color>("outputLength");

			expectedResult = outputs.<color=#045FB4>getString</color>("res");
			actualResult = helper.<color=#045FB4>bytes2hex</color>(c.<color=#045FB4>catena</color>(pwd, salt, aData, gamma, outputLength));
			assertEquals(expectedResult, actualResult.<color=#045FB4>toLowerCase</color>());
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testcatenaMydasflyReduced(){
		DefaultInstances defaultInstance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = defaultInstance.<color=#045FB4>initMydasfly</color>();
		
		c.<color=#045FB4>setGHigh</color>(9);
		c.<color=#045FB4>setGLow</color>(9);
		
		<color=#8000FF>byte</color>[] pwd;
		<color=#8000FF>byte</color>[] salt;
		<color=#8000FF>byte</color>[] gamma;
		<color=#8000FF>byte</color>[] aData;
		<color=#8000FF>int</color> outputLength;
		
		String actualResult;
		String expectedResult;
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(filecatenaMydasflyReduced);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			pwd = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("pwd"));
			salt = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("salt")); 
			gamma = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("gamma"));
			aData = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("aData"));
			outputLength = inputs.<color=#045FB4>getInt</color>("outputLength");

			expectedResult = outputs.<color=#045FB4>getString</color>("res");
			actualResult = helper.<color=#045FB4>bytes2hex</color>(c.<color=#045FB4>catena</color>(pwd, salt, aData, gamma, outputLength));
			assertEquals(expectedResult, actualResult.<color=#045FB4>toLowerCase</color>());
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testcatenaStoneflyReduced(){
		DefaultInstances defaultInstance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = defaultInstance.<color=#045FB4>initStonefly</color>();
		
		c.<color=#045FB4>setGHigh</color>(9);
		c.<color=#045FB4>setGLow</color>(9);
		
		<color=#8000FF>byte</color>[] pwd;
		<color=#8000FF>byte</color>[] salt;
		<color=#8000FF>byte</color>[] gamma;
		<color=#8000FF>byte</color>[] aData;
		<color=#8000FF>int</color> outputLength;
		
		String actualResult;
		String expectedResult;
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(filecatenaStoneflyReduced);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			pwd = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("pwd"));
			salt = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("salt")); 
			gamma = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("gamma"));
			aData = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("aData"));
			outputLength = inputs.<color=#045FB4>getInt</color>("outputLength");

			expectedResult = outputs.<color=#045FB4>getString</color>("res");
			actualResult = helper.<color=#045FB4>bytes2hex</color>(c.<color=#045FB4>catena</color>(pwd, salt, aData, gamma, outputLength));
			assertEquals(expectedResult, actualResult.<color=#045FB4>toLowerCase</color>());
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testcatenaHorseflyFullReduced(){
		DefaultInstances defaultInstance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = defaultInstance.<color=#045FB4>initHorseflyFull</color>();
		
		c.<color=#045FB4>setGHigh</color>(13);
		c.<color=#045FB4>setGLow</color>(13);
		
		<color=#8000FF>byte</color>[] pwd;
		<color=#8000FF>byte</color>[] salt;
		<color=#8000FF>byte</color>[] gamma;
		<color=#8000FF>byte</color>[] aData;
		<color=#8000FF>int</color> outputLength;
		
		String actualResult;
		String expectedResult;
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(filecatenaHorseflyFullReduced);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			pwd = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("pwd"));
			salt = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("salt")); 
			gamma = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("gamma"));
			aData = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("aData"));
			outputLength = inputs.<color=#045FB4>getInt</color>("outputLength");

			expectedResult = outputs.<color=#045FB4>getString</color>("res");
			actualResult = helper.<color=#045FB4>bytes2hex</color>(c.<color=#045FB4>catena</color>(pwd, salt, aData, gamma, outputLength));
			assertEquals(expectedResult, actualResult.<color=#045FB4>toLowerCase</color>());
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testcatenaLanternflyFullReduced(){
		DefaultInstances defaultInstance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = defaultInstance.<color=#045FB4>initLanternflyFull</color>();
		
		c.<color=#045FB4>setGHigh</color>(9);
		c.<color=#045FB4>setGLow</color>(9);
		
		<color=#8000FF>byte</color>[] pwd;
		<color=#8000FF>byte</color>[] salt;
		<color=#8000FF>byte</color>[] gamma;
		<color=#8000FF>byte</color>[] aData;
		<color=#8000FF>int</color> outputLength;
		
		String actualResult;
		String expectedResult;
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(filecatenaLanternflyFullReduced);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			pwd = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("pwd"));
			salt = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("salt")); 
			gamma = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("gamma"));
			aData = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("aData"));
			outputLength = inputs.<color=#045FB4>getInt</color>("outputLength");

			expectedResult = outputs.<color=#045FB4>getString</color>("res");
			actualResult = helper.<color=#045FB4>bytes2hex</color>(c.<color=#045FB4>catena</color>(pwd, salt, aData, gamma, outputLength));
			assertEquals(expectedResult, actualResult.<color=#045FB4>toLowerCase</color>());
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testcatenaMydasflyFullReduced(){
		DefaultInstances defaultInstance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = defaultInstance.<color=#045FB4>initMydasflyFull</color>();
		
		c.<color=#045FB4>setGHigh</color>(9);
		c.<color=#045FB4>setGLow</color>(9);
		
		<color=#8000FF>byte</color>[] pwd;
		<color=#8000FF>byte</color>[] salt;
		<color=#8000FF>byte</color>[] gamma;
		<color=#8000FF>byte</color>[] aData;
		<color=#8000FF>int</color> outputLength;
		
		String actualResult;
		String expectedResult;
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(filecatenaMydasflyFullReduced);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			pwd = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("pwd"));
			salt = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("salt")); 
			gamma = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("gamma"));
			aData = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("aData"));
			outputLength = inputs.<color=#045FB4>getInt</color>("outputLength");

			expectedResult = outputs.<color=#045FB4>getString</color>("res");
			actualResult = helper.<color=#045FB4>bytes2hex</color>(c.<color=#045FB4>catena</color>(pwd, salt, aData, gamma, outputLength));
			assertEquals(expectedResult, actualResult.<color=#045FB4>toLowerCase</color>());
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testcatenaStoneflyFullReduced(){
		DefaultInstances defaultInstance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = defaultInstance.<color=#045FB4>initStoneflyFull</color>();
		
		c.<color=#045FB4>setGHigh</color>(9);
		c.<color=#045FB4>setGLow</color>(9);
		
		<color=#8000FF>byte</color>[] pwd;
		<color=#8000FF>byte</color>[] salt;
		<color=#8000FF>byte</color>[] gamma;
		<color=#8000FF>byte</color>[] aData;
		<color=#8000FF>int</color> outputLength;
		
		String actualResult;
		String expectedResult;
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(filecatenaStoneflyFullReduced);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			pwd = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("pwd"));
			salt = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("salt")); 
			gamma = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("gamma"));
			aData = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("aData"));
			outputLength = inputs.<color=#045FB4>getInt</color>("outputLength");

			expectedResult = outputs.<color=#045FB4>getString</color>("res");
			actualResult = helper.<color=#045FB4>bytes2hex</color>(c.<color=#045FB4>catena</color>(pwd, salt, aData, gamma, outputLength));
			
			assertEquals(expectedResult, actualResult);
		}
	}

<color=#434343>//	@Test</color>
<color=#434343>//	public void testButterfly(){</color>
<color=#434343>//		DefaultInstances defaultInstance = new DefaultInstances();</color>
<color=#434343>//		Catena c = defaultInstance.initButterfly();</color>
<color=#434343>//		</color>
<color=#434343>//		byte[] pwd;</color>
<color=#434343>//		byte[] salt;</color>
<color=#434343>//		byte[] gamma;</color>
<color=#434343>//		byte[] aData;</color>
<color=#434343>//		int outputLength;</color>
<color=#434343>//		</color>
<color=#434343>//		String actualResult;</color>
<color=#434343>//		String expectedResult;</color>
<color=#434343>//		</color>
<color=#434343>//		JSONArray jsonObj = helper.jsonParserArr(butterflyFile);</color>
<color=#434343>//		for (int i = 0; i<jsonObj.length(); ++i ){</color>
<color=#434343>//			JSONObject o = (JSONObject) jsonObj.get(i);</color>
<color=#434343>//			</color>
<color=#434343>//			JSONObject inputs = o.getJSONObject("inputs");</color>
<color=#434343>//			JSONObject outputs = o.getJSONObject("outputs");</color>
<color=#434343>//			</color>
<color=#434343>//			pwd = helper.hex2bytes(inputs.getString("pwd"));</color>
<color=#434343>//			salt = helper.hex2bytes(inputs.getString("salt")); </color>
<color=#434343>//			gamma = helper.hex2bytes(inputs.getString("gamma"));</color>
<color=#434343>//			aData = helper.hex2bytes(inputs.getString("aData"));</color>
<color=#434343>//			outputLength = inputs.getInt("outputLength");</color>
<color=#434343>//</color>
<color=#434343>//			expectedResult = outputs.getString("res");</color>
<color=#434343>//			</color>
<color=#434343>//			actualResult = helper.bytes2hex(c.catena(pwd, salt, aData, gamma, outputLength));</color>
<color=#434343>//			assertEquals(expectedResult, actualResult.toLowerCase());</color>
<color=#434343>//		}</color>
<color=#434343>//		</color>
<color=#434343>//	}</color>
<color=#434343>//</color>
<color=#434343>//	@Test</color>
<color=#434343>//	public void testButterflyFull(){</color>
<color=#434343>//		DefaultInstances defaultInstance = new DefaultInstances();</color>
<color=#434343>//		Catena c = defaultInstance.initButterflyFull();</color>
<color=#434343>//		</color>
<color=#434343>//		JSONArray jsonObj = helper.jsonParserArr(butterflyFileFull);</color>
<color=#434343>//		for (int i = 0; i<jsonObj.length(); ++i ){</color>
<color=#434343>//			JSONObject o = (JSONObject) jsonObj.get(i);</color>
<color=#434343>//			</color>
<color=#434343>//			JSONObject inputs = o.getJSONObject("inputs");</color>
<color=#434343>//			JSONObject outputs = o.getJSONObject("outputs");</color>
<color=#434343>//			</color>
<color=#434343>//			byte[] pwd = helper.hex2bytes(inputs.getString("pwd"));</color>
<color=#434343>//			byte[] salt = helper.hex2bytes(inputs.getString("salt")); </color>
<color=#434343>//			byte[] gamma = helper.hex2bytes(inputs.getString("gamma"));</color>
<color=#434343>//			byte[] aData = helper.hex2bytes(inputs.getString("aData"));</color>
<color=#434343>//			int outputLength = inputs.getInt("outputLength");</color>
<color=#434343>//</color>
<color=#434343>//			String expectedResult = outputs.getString("res");</color>
<color=#434343>//			</color>
<color=#434343>//			String actualResult = helper.bytes2hex(c.catena(pwd, salt, aData, gamma, outputLength));</color>
<color=#434343>//			assertEquals(expectedResult, actualResult.toLowerCase());</color>
<color=#434343>//		}</color>
<color=#434343>//	}</color>
<color=#434343>//	</color>
<color=#434343>//	@Test</color>
<color=#434343>//	public void testDragonfly(){</color>
<color=#434343>//		DefaultInstances defaultInstance = new DefaultInstances();</color>
<color=#434343>//		Catena c = defaultInstance.initDragonfly();</color>
<color=#434343>//		</color>
<color=#434343>//		JSONArray jsonObj = helper.jsonParserArr(fileDragonfly);</color>
<color=#434343>//		for (int i = 0; i<jsonObj.length(); ++i ){</color>
<color=#434343>//			JSONObject o = (JSONObject) jsonObj.get(i);</color>
<color=#434343>//			</color>
<color=#434343>//			JSONObject inputs = o.getJSONObject("inputs");</color>
<color=#434343>//			JSONObject outputs = o.getJSONObject("outputs");</color>
<color=#434343>//			</color>
<color=#434343>//			byte[] pwd = helper.hex2bytes(inputs.getString("pwd"));</color>
<color=#434343>//			byte[] salt = helper.hex2bytes(inputs.getString("salt")); </color>
<color=#434343>//			byte[] gammaValue = helper.hex2bytes(inputs.getString("gamma"));</color>
<color=#434343>//			byte[] publicInput = helper.hex2bytes(inputs.getString("aData"));</color>
<color=#434343>//			</color>
<color=#434343>//			int m = inputs.getInt("outputLength");</color>
<color=#434343>//</color>
<color=#434343>//			String expectedResult = outputs.getString("res");</color>
<color=#434343>//			</color>
<color=#434343>//			byte[] actualResult = c.catena(pwd, salt, publicInput, gammaValue, m);</color>
<color=#434343>//			</color>
<color=#434343>//			assertEquals(expectedResult, helper.bytes2hex(actualResult).toLowerCase());</color>
<color=#434343>//		}</color>
<color=#434343>//	}</color>
<color=#434343>//	</color>
<color=#434343>//	@Test</color>
<color=#434343>//	public void testDragonflyFull(){</color>
<color=#434343>//		DefaultInstances defaultInstance = new DefaultInstances();</color>
<color=#434343>//		Catena c = defaultInstance.initDragonflyFull();</color>
<color=#434343>//		</color>
<color=#434343>//		byte[] pwd;</color>
<color=#434343>//		byte[] salt;</color>
<color=#434343>//		byte[] publicInput;</color>
<color=#434343>//		byte[] gammaValue;</color>
<color=#434343>//		int m;</color>
<color=#434343>//		</color>
<color=#434343>//		byte[] actualResult;</color>
<color=#434343>//		String expectedResult;</color>
<color=#434343>//		</color>
<color=#434343>//		JSONArray jsonObj = helper.jsonParserArr(fileDragonflyFull);</color>
<color=#434343>//		for (int i = 0; i<jsonObj.length(); ++i ){</color>
<color=#434343>//			JSONObject o = (JSONObject) jsonObj.get(i);</color>
<color=#434343>//			</color>
<color=#434343>//			JSONObject inputs = o.getJSONObject("inputs");</color>
<color=#434343>//			JSONObject outputs = o.getJSONObject("outputs");</color>
<color=#434343>//			</color>
<color=#434343>//			pwd = helper.hex2bytes(inputs.getString("pwd"));</color>
<color=#434343>//			salt = helper.hex2bytes(inputs.getString("salt")); </color>
<color=#434343>//			gammaValue = helper.hex2bytes(inputs.getString("gamma"));</color>
<color=#434343>//			publicInput = helper.hex2bytes(inputs.getString("aData"));</color>
<color=#434343>//			m = inputs.getInt("outputLength");</color>
<color=#434343>//</color>
<color=#434343>//			expectedResult = outputs.getString("res");</color>
<color=#434343>//			</color>
<color=#434343>//			actualResult = c.catena(pwd, salt, publicInput, gammaValue, m);</color>
<color=#434343>//			</color>
<color=#434343>//			assertEquals(expectedResult, helper.bytes2hex(actualResult).toLowerCase());</color>
<color=#434343>//		}</color>
<color=#434343>//	}</color>

	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testButterflyReduced(){
		DefaultInstances defaultInstance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = defaultInstance.<color=#045FB4>initButterfly</color>();
		
		<color=#434343>// reduced gHigh</color>
		c.<color=#045FB4>setGLow</color>(9);
		c.<color=#045FB4>setGHigh</color>(9);
		
		<color=#8000FF>byte</color>[] pwd;
		<color=#8000FF>byte</color>[] salt;
		<color=#8000FF>byte</color>[] gamma;
		<color=#8000FF>byte</color>[] aData;
		<color=#8000FF>int</color> outputLength;
		
		String actualResult;
		String expectedResult;
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(butterflyFileReduced);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			pwd = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("pwd"));
			salt = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("salt")); 
			gamma = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("gamma"));
			aData = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("aData"));
			outputLength = inputs.<color=#045FB4>getInt</color>("outputLength");

			expectedResult = outputs.<color=#045FB4>getString</color>("res");
			
			actualResult = helper.<color=#045FB4>bytes2hex</color>(c.<color=#045FB4>catena</color>(pwd, salt, aData, gamma, outputLength));
			
			assertEquals(expectedResult, actualResult.<color=#045FB4>toLowerCase</color>());
		}
		
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testButterflyFullReduced(){
		DefaultInstances defaultInstance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = defaultInstance.<color=#045FB4>initButterflyFull</color>();
		
		<color=#434343>// reduced gHigh</color>
		c.<color=#045FB4>setGLow</color>(9);
		c.<color=#045FB4>setGHigh</color>(9);
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(butterflyFileFullReduced);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			<color=#8000FF>byte</color>[] pwd = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("pwd"));
			<color=#8000FF>byte</color>[] salt = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("salt")); 
			<color=#8000FF>byte</color>[] gamma = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("gamma"));
			<color=#8000FF>byte</color>[] aData = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("aData"));
			<color=#8000FF>int</color> outputLength = inputs.<color=#045FB4>getInt</color>("outputLength");

			String expectedResult = outputs.<color=#045FB4>getString</color>("res");
			
			String actualResult = helper.<color=#045FB4>bytes2hex</color>(c.<color=#045FB4>catena</color>(pwd, salt, aData, gamma, outputLength));
			assertEquals(expectedResult, actualResult.<color=#045FB4>toLowerCase</color>());
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testDragonflyReduced(){
		DefaultInstances defaultInstance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = defaultInstance.<color=#045FB4>initDragonfly</color>();
		
		<color=#434343>// reduced gHigh</color>
		c.<color=#045FB4>setGLow</color>(14);
		c.<color=#045FB4>setGHigh</color>(14);
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileDragonflyReduced);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			<color=#8000FF>byte</color>[] pwd = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("pwd"));
			<color=#8000FF>byte</color>[] salt = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("salt")); 
			<color=#8000FF>byte</color>[] gammaValue = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("gamma"));
			<color=#8000FF>byte</color>[] publicInput = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("aData"));
			
			<color=#8000FF>int</color> m = inputs.<color=#045FB4>getInt</color>("outputLength");

			String expectedResult = outputs.<color=#045FB4>getString</color>("res");
			
			<color=#8000FF>byte</color>[] actualResult = c.<color=#045FB4>catena</color>(pwd, salt, publicInput, gammaValue, m);
			
			assertEquals(expectedResult, helper.<color=#045FB4>bytes2hex</color>(actualResult).<color=#045FB4>toLowerCase</color>());
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testDragonflyFullReduced(){
		DefaultInstances defaultInstance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = defaultInstance.<color=#045FB4>initDragonflyFull</color>();
		
		<color=#434343>// reduced gHigh</color>
		c.<color=#045FB4>setGLow</color>(14);
		c.<color=#045FB4>setGHigh</color>(14);
		
		<color=#8000FF>byte</color>[] pwd;
		<color=#8000FF>byte</color>[] salt;
		<color=#8000FF>byte</color>[] publicInput;
		<color=#8000FF>byte</color>[] gammaValue;
		<color=#8000FF>int</color> m;
		
		<color=#8000FF>byte</color>[] actualResult;
		String expectedResult;
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileDragonflyFullReduced);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			pwd = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("pwd"));
			salt = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("salt")); 
			gammaValue = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("gamma"));
			publicInput = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("aData"));
			m = inputs.<color=#045FB4>getInt</color>("outputLength");

			expectedResult = outputs.<color=#045FB4>getString</color>("res");
			
			actualResult = c.<color=#045FB4>catena</color>(pwd, salt, publicInput, gammaValue, m);
			
			assertEquals(expectedResult, helper.<color=#045FB4>bytes2hex</color>(actualResult).<color=#045FB4>toLowerCase</color>());
		}
	}
}