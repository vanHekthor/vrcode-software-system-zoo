<color=#7401DF>package</color> <color=#045FB4>test.java</color>;

<color=#7401DF>import static</color> <color=#045FB4>org.junit.Assert.*</color>;

<color=#7401DF>import</color> <color=#045FB4>java.io.File</color>;

<color=#7401DF>import</color> <color=#045FB4>org.json.JSONArray</color>;
<color=#7401DF>import</color> <color=#045FB4>org.json.JSONObject</color>;
<color=#7401DF>import</color> <color=#045FB4>org.junit.Test</color>;

<color=#7401DF>import</color> <color=#045FB4>main.java.Catena</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.Catena.POWstruct</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.DefaultInstances</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.Helper</color>;

<color=#7e101a>public</color> <color=#7e101a>class</color> <color=#355c08>CatenaTest</color> {
	
	Helper helper = <color=#7e101a>new</color> Helper();
	
	<color=#7e101a>private</color> String pathHInit = "src/test/resources/hInitAnyFull.json";
	<color=#7e101a>private</color> File fileHInit = <color=#7e101a>new</color> File(pathHInit);
	
	
	<color=#7e101a>private</color> String pathtweakButterfly = "src/test/resources/tweakButterfly.json";
	<color=#7e101a>private</color> File filetweakButterfly = <color=#7e101a>new</color> File(pathtweakButterfly);
	
	<color=#7e101a>private</color> String pathtweakButterflyFull = "src/test/resources/tweakButterflyFull.json";
	<color=#7e101a>private</color> File filetweakButterflyFull = <color=#7e101a>new</color> File(pathtweakButterflyFull);
	
	<color=#7e101a>private</color> String pathtweakDragonfly = "src/test/resources/tweakDragonfly.json";
	<color=#7e101a>private</color> File filetweakDragonfly = <color=#7e101a>new</color> File(pathtweakDragonfly);
	
	<color=#7e101a>private</color> String pathtweakDragonflyFull = "src/test/resources/tweakDragonflyFull.json";
	<color=#7e101a>private</color> File filetweakDragonflyFull = <color=#7e101a>new</color> File(pathtweakDragonflyFull);
	
	
	<color=#7e101a>private</color> String pathFlapDragonfly = "src/test/resources/flapDragonfly.json";
	<color=#7e101a>private</color> File fileFlapDragonfly = <color=#7e101a>new</color> File(pathFlapDragonfly);
	
	<color=#7e101a>private</color> String pathFlapDragonflyFull = "src/test/resources/flapDragonflyFull.json";
	<color=#7e101a>private</color> File fileFlapDragonflyFull = <color=#7e101a>new</color> File(pathFlapDragonflyFull);
	
	<color=#7e101a>private</color> String pathFlapButterfly = "src/test/resources/flapButterfly.json";
	<color=#7e101a>private</color> File fileFlapButterfly = <color=#7e101a>new</color> File(pathFlapButterfly);
	
	<color=#7e101a>private</color> String pathFlapButterflyFull = "src/test/resources/flapButterflyFull.json";
	<color=#7e101a>private</color> File fileFlapButterflyFull = <color=#7e101a>new</color> File(pathFlapButterflyFull);
	
	
	
	<color=#7e101a>private</color> String pathciUpdateDragonflyReduced = "src/test/resources/ciUpdateDragonflyReduced.json";
	<color=#7e101a>private</color> File fileciUpdateDragonflyReduced = <color=#7e101a>new</color> File(pathciUpdateDragonflyReduced);
	
	<color=#7e101a>private</color> String pathciUpdateKeyedDragonflyReduced = "src/test/resources/ciUpdateKeyedDragonflyReduced.json";
	<color=#7e101a>private</color> File fileciUpdateKeyedDragonflyReduced = <color=#7e101a>new</color> File(pathciUpdateKeyedDragonflyReduced);
	
<color=#434343>//	private String pathkeyDerivationButterfly = "src/test/resources/keyDerivationButterfly.json";</color>
<color=#434343>//	private File filekeyDerivationButterfly = new File(pathkeyDerivationButterfly);</color>
<color=#434343>//</color>
<color=#434343>//	private String pathkeyDerivationButterflyFull = "src/test/resources/keyDerivationButterflyFull.json";</color>
<color=#434343>//	private File filekeyDerivationButterflyFull = new File(pathkeyDerivationButterflyFull);</color>
	
	<color=#7e101a>private</color> String pathkeyDerivationButterflyReduced = "src/test/resources/keyDerivationButterflyReduced.json";
	<color=#7e101a>private</color> File filekeyDerivationButterflyReduced = <color=#7e101a>new</color> File(pathkeyDerivationButterflyReduced);
	
<color=#434343>//	private String pathkeyDerivationDragonfly = "src/test/resources/keyDerivationDragonfly.json";</color>
<color=#434343>//	private File filekeyDerivationDragonfly = new File(pathkeyDerivationDragonfly);</color>
<color=#434343>//	</color>
<color=#434343>//	private String pathkeyDerivationDragonflyFull = "src/test/resources/keyDerivationDragonflyFull.json";</color>
<color=#434343>//	private File filekeyDerivationDragonflyFull = new File(pathkeyDerivationDragonflyFull);</color>
	
	<color=#7e101a>private</color> String pathkeyDerivationDragonflyReduced = "src/test/resources/keyDerivationDragonflyReduced.json";
	<color=#7e101a>private</color> File filekeyDerivationDragonflyReduced = <color=#7e101a>new</color> File(pathkeyDerivationDragonflyReduced);
	
<color=#434343>//	private String pathkeyedHashButterfly = "src/test/resources/keyedHashButterfly.json";</color>
<color=#434343>//	private File filekeyedHashButterfly = new File(pathkeyedHashButterfly);</color>
<color=#434343>//	</color>
<color=#434343>//	private String pathkeyedHashButterflyFull = "src/test/resources/keyedHashButterflyFull.json";</color>
<color=#434343>//	private File filekeyedHashButterflyFull = new File(pathkeyedHashButterflyFull);</color>
	
	<color=#7e101a>private</color> String pathkeyedHashButterflyReduced = "src/test/resources/keyedHashButterflyReduced.json";
	<color=#7e101a>private</color> File filekeyedHashButterflyReduced = <color=#7e101a>new</color> File(pathkeyedHashButterflyReduced);
	
<color=#434343>//	private String pathkeyedHashDragonfly = "src/test/resources/keyedHashDragonfly.json";</color>
<color=#434343>//	private File filekeyedHashDragonfly = new File(pathkeyedHashDragonfly);</color>
<color=#434343>//	</color>
<color=#434343>//	private String pathkeyedHashDragonflyFull = "src/test/resources/keyedHashDragonflyFull.json";</color>
<color=#434343>//	private File filekeyedHashDragonflyFull = new File(pathkeyedHashDragonflyFull);</color>
	
	<color=#7e101a>private</color> String pathkeyedHashDragonflyReduced = "src/test/resources/keyedHashDragonflyReduced.json";
	<color=#7e101a>private</color> File filekeyedHashDragonflyReduced = <color=#7e101a>new</color> File(pathkeyedHashDragonflyReduced);
	
	<color=#7e101a>private</color> String pathserverReliefClientButterflyReducedDifferentG = "src/test/resources/serverReliefClientButterflyReducedDifferentG.json";
	<color=#7e101a>private</color> File fileserverReliefClientButterflyReducedDifferentG = <color=#7e101a>new</color> File(pathserverReliefClientButterflyReducedDifferentG);
	
	<color=#7e101a>private</color> String pathserverReliefClientButterflyReduced = "src/test/resources/serverReliefClientButterflyReduced.json";
	<color=#7e101a>private</color> File fileserverReliefClientButterflyReduced = <color=#7e101a>new</color> File(pathserverReliefClientButterflyReduced);
	
	<color=#7e101a>private</color> String pathserverReliefClientDragonflyReduced = "src/test/resources/serverReliefClientDragonflyReduced.json";
	<color=#7e101a>private</color> File fileserverReliefClientDragonflyReduced = <color=#7e101a>new</color> File(pathserverReliefClientDragonflyReduced);
	
	<color=#7e101a>private</color> String pathserverReliefServerButterflyReduced = "src/test/resources/serverReliefServerButterflyReduced.json";
	<color=#7e101a>private</color> File fileserverReliefServerButterflyReduced = <color=#7e101a>new</color> File(pathserverReliefServerButterflyReduced);
	
	<color=#7e101a>private</color> String pathserverReliefServerDragonflyReduced = "src/test/resources/serverReliefServerDragonflyReduced.json";
	<color=#7e101a>private</color> File fileserverReliefServerDragonflyReduced = <color=#7e101a>new</color> File(pathserverReliefServerDragonflyReduced);
	
	<color=#7e101a>private</color> String pathproofOfWorkServerSaltButterflyReduced = "src/test/resources/proofOfWorkServerSaltButterflyReduced.json";
	<color=#7e101a>private</color> File fileproofOfWorkServerSaltButterflyReduced = <color=#7e101a>new</color> File(pathproofOfWorkServerSaltButterflyReduced);
	
	<color=#7e101a>private</color> String pathproofOfWorkServerPwdButterflyReduced = "src/test/resources/proofOfWorkServerPwdButterflyReduced.json";
	<color=#7e101a>private</color> File fileproofOfWorkServerPwdButterflyReduced = <color=#7e101a>new</color> File(pathproofOfWorkServerPwdButterflyReduced);
	
	<color=#7e101a>private</color> String pathproofOfWorkClientPwdButterflyReduced = "src/test/resources/proofOfWorkClientPwdButterflyReduced.json";
	<color=#7e101a>private</color> File fileproofOfWorkClientPwdButterflyReduced = <color=#7e101a>new</color> File(pathproofOfWorkClientPwdButterflyReduced);
	
	<color=#7e101a>private</color> String pathproofOfWorkClientSaltButterflyReduced = "src/test/resources/proofOfWorkClientSaltButterflyReduced.json";
	<color=#7e101a>private</color> File fileproofOfWorkClientSaltButterflyReduced = <color=#7e101a>new</color> File(pathproofOfWorkClientSaltButterflyReduced);
	
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testServerReliefServerButterflyReduced(){
		DefaultInstances instance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = instance.<color=#045FB4>initButterfly</color>();
		
		c.<color=#045FB4>setGHigh</color>(9);
		c.<color=#045FB4>setGLow</color>(9);
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileserverReliefServerButterflyReduced);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			String hash = inputs.<color=#045FB4>getString</color>("hash");
			<color=#8000FF>int</color> outputLength = inputs.<color=#045FB4>getInt</color>("outputLength");
			
			<color=#8000FF>byte</color>[] hashArr = helper.<color=#045FB4>hex2bytes</color>(hash);
			
			String res = outputs.<color=#045FB4>getString</color>("res");
			
			<color=#8000FF>byte</color>[] output = c.<color=#045FB4>serverReliefServer</color>(outputLength, hashArr);
			
			assertEquals(res,helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>());
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testServerReliefServerDragonflyReduced(){
		DefaultInstances instance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = instance.<color=#045FB4>initDragonfly</color>();
		
		c.<color=#045FB4>setGHigh</color>(14);
		c.<color=#045FB4>setGLow</color>(14);
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileserverReliefServerDragonflyReduced);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			String hash = inputs.<color=#045FB4>getString</color>("hash");
			<color=#8000FF>int</color> outputLength = inputs.<color=#045FB4>getInt</color>("outputLength");
			
			<color=#8000FF>byte</color>[] hashArr = helper.<color=#045FB4>hex2bytes</color>(hash);
			
			String res = outputs.<color=#045FB4>getString</color>("res");
			
			<color=#8000FF>byte</color>[] output = c.<color=#045FB4>serverReliefServer</color>(outputLength, hashArr);
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testServerReliefClientButterflyReduceddifferentG(){
		DefaultInstances instance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = instance.<color=#045FB4>initButterfly</color>();
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileserverReliefClientButterflyReducedDifferentG);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			String pwd = inputs.<color=#045FB4>getString</color>("pwd");
			String salt = inputs.<color=#045FB4>getString</color>("salt");
			String gamma = inputs.<color=#045FB4>getString</color>("gamma");
			String ad = inputs.<color=#045FB4>getString</color>("aData");
			<color=#8000FF>int</color> outputLength = inputs.<color=#045FB4>getInt</color>("outputLength");
			<color=#8000FF>int</color> gLow = inputs.<color=#045FB4>getInt</color>("gLow");
			<color=#8000FF>int</color> gHigh = inputs.<color=#045FB4>getInt</color>("gHigh");
			
			<color=#8000FF>byte</color>[] pwdArr = helper.<color=#045FB4>hex2bytes</color>(pwd);
			<color=#8000FF>byte</color>[] saltArr = helper.<color=#045FB4>hex2bytes</color>(salt);
			<color=#8000FF>byte</color>[] gammaArr = helper.<color=#045FB4>hex2bytes</color>(gamma);
			<color=#8000FF>byte</color>[] adArr = helper.<color=#045FB4>hex2bytes</color>(ad);
			
			String res = outputs.<color=#045FB4>getString</color>("res");
			
			c.<color=#045FB4>setGLow</color>(gLow);
			c.<color=#045FB4>setGHigh</color>(gHigh);
			
			<color=#8000FF>byte</color>[] output = c.<color=#045FB4>serverReliefClient</color>(pwdArr, saltArr, adArr, outputLength, gammaArr);
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testServerReliefClientButterflyReduced(){
		DefaultInstances instance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = instance.<color=#045FB4>initButterfly</color>();
		
		c.<color=#045FB4>setGHigh</color>(9);
		c.<color=#045FB4>setGLow</color>(9);
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileserverReliefClientButterflyReduced);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			String pwd = inputs.<color=#045FB4>getString</color>("pwd");
			String salt = inputs.<color=#045FB4>getString</color>("salt");
			String gamma = inputs.<color=#045FB4>getString</color>("gamma");
			String ad = inputs.<color=#045FB4>getString</color>("aData");
			<color=#8000FF>int</color> outputLength = inputs.<color=#045FB4>getInt</color>("outputLength");
			
			<color=#8000FF>byte</color>[] pwdArr = helper.<color=#045FB4>hex2bytes</color>(pwd);
			<color=#8000FF>byte</color>[] saltArr = helper.<color=#045FB4>hex2bytes</color>(salt);
			<color=#8000FF>byte</color>[] gammaArr = helper.<color=#045FB4>hex2bytes</color>(gamma);
			<color=#8000FF>byte</color>[] adArr = helper.<color=#045FB4>hex2bytes</color>(ad);
			
			String res = outputs.<color=#045FB4>getString</color>("res");
			
			<color=#8000FF>byte</color>[] output = c.<color=#045FB4>serverReliefClient</color>(pwdArr, saltArr, adArr, outputLength, gammaArr);
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testServerReliefClientDragonflyReduced(){
		DefaultInstances instance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = instance.<color=#045FB4>initDragonfly</color>();
		
		c.<color=#045FB4>setGHigh</color>(14);
		c.<color=#045FB4>setGLow</color>(14);
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileserverReliefClientDragonflyReduced);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			String pwd = inputs.<color=#045FB4>getString</color>("pwd");
			String salt = inputs.<color=#045FB4>getString</color>("salt");
			String gamma = inputs.<color=#045FB4>getString</color>("gamma");
			String ad = inputs.<color=#045FB4>getString</color>("aData");
			<color=#8000FF>int</color> outputLength = inputs.<color=#045FB4>getInt</color>("outputLength");
			
			<color=#8000FF>byte</color>[] pwdArr = helper.<color=#045FB4>hex2bytes</color>(pwd);
			<color=#8000FF>byte</color>[] saltArr = helper.<color=#045FB4>hex2bytes</color>(salt);
			<color=#8000FF>byte</color>[] gammaArr = helper.<color=#045FB4>hex2bytes</color>(gamma);
			<color=#8000FF>byte</color>[] adArr = helper.<color=#045FB4>hex2bytes</color>(ad);
			
			String res = outputs.<color=#045FB4>getString</color>("res");
			
			<color=#8000FF>byte</color>[] output = c.<color=#045FB4>serverReliefClient</color>(pwdArr, saltArr, adArr, outputLength, gammaArr);
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}
	}
	

<color=#434343>//	@Test</color>
<color=#434343>//	public void testKeyedHashButterfly(){</color>
<color=#434343>//		DefaultInstances instance = new DefaultInstances();</color>
<color=#434343>//		Catena c = instance.initButterfly();</color>
<color=#434343>//		</color>
<color=#434343>//		JSONArray jsonObj = helper.jsonParserArr(filekeyedHashButterfly);</color>
<color=#434343>//		for (int i = 0; i<jsonObj.length(); ++i ){</color>
<color=#434343>//			JSONObject o = (JSONObject) jsonObj.get(i);</color>
<color=#434343>//			</color>
<color=#434343>//			JSONObject inputs = o.getJSONObject("inputs");</color>
<color=#434343>//			JSONObject outputs = o.getJSONObject("outputs");</color>
<color=#434343>//			</color>
<color=#434343>//			String pwd = inputs.getString("pwd");</color>
<color=#434343>//			String key = inputs.getString("key");</color>
<color=#434343>//			String salt = inputs.getString("salt");</color>
<color=#434343>//			String gamma = inputs.getString("gamma");</color>
<color=#434343>//			String ad = inputs.getString("aData");</color>
<color=#434343>//			int outputLength = inputs.getInt("outputLength");</color>
<color=#434343>//			String userID = inputs.getString("userID");</color>
<color=#434343>//			</color>
<color=#434343>//			byte[] pwdArr = helper.hex2bytes(pwd);</color>
<color=#434343>//			byte[] keyArr = helper.hex2bytes(key);</color>
<color=#434343>//			byte[] saltArr = helper.hex2bytes(salt);</color>
<color=#434343>//			byte[] gammaArr = helper.hex2bytes(gamma);</color>
<color=#434343>//			byte[] adArr = helper.hex2bytes(ad);</color>
<color=#434343>//			byte[] userIDArr = helper.hex2bytes(userID);</color>
<color=#434343>//			</color>
<color=#434343>//			String res = outputs.getString("res");</color>
<color=#434343>//			</color>
<color=#434343>//			byte[] output = c.keyedPasswordHashing(pwdArr, keyArr, saltArr, gammaArr, adArr, outputLength, userIDArr);</color>
<color=#434343>//			</color>
<color=#434343>//			assertTrue(res.equals(helper.bytes2hex(output).toLowerCase()));</color>
<color=#434343>//		}</color>
<color=#434343>//	}</color>

	
<color=#434343>//	@Test</color>
<color=#434343>//	public void testKeyedHashButterflyFull(){</color>
<color=#434343>//		DefaultInstances instance = new DefaultInstances();</color>
<color=#434343>//		Catena c = instance.initButterflyFull();</color>
<color=#434343>//		</color>
<color=#434343>//		JSONArray jsonObj = helper.jsonParserArr(filekeyedHashButterflyFull);</color>
<color=#434343>//		for (int i = 0; i<jsonObj.length(); ++i ){</color>
<color=#434343>//			JSONObject o = (JSONObject) jsonObj.get(i);</color>
<color=#434343>//			</color>
<color=#434343>//			JSONObject inputs = o.getJSONObject("inputs");</color>
<color=#434343>//			JSONObject outputs = o.getJSONObject("outputs");</color>
<color=#434343>//			</color>
<color=#434343>//			String pwd = inputs.getString("pwd");</color>
<color=#434343>//			String key = inputs.getString("key");</color>
<color=#434343>//			String salt = inputs.getString("salt");</color>
<color=#434343>//			String gamma = inputs.getString("gamma");</color>
<color=#434343>//			String ad = inputs.getString("aData");</color>
<color=#434343>//			int outputLength = inputs.getInt("outputLength");</color>
<color=#434343>//			String userID = inputs.getString("userID");</color>
<color=#434343>//			</color>
<color=#434343>//			byte[] pwdArr = helper.hex2bytes(pwd);</color>
<color=#434343>//			byte[] keyArr = helper.hex2bytes(key);</color>
<color=#434343>//			byte[] saltArr = helper.hex2bytes(salt);</color>
<color=#434343>//			byte[] gammaArr = helper.hex2bytes(gamma);</color>
<color=#434343>//			byte[] adArr = helper.hex2bytes(ad);</color>
<color=#434343>//			byte[] userIDArr = helper.hex2bytes(userID);</color>
<color=#434343>//			</color>
<color=#434343>//			String res = outputs.getString("res");</color>
<color=#434343>//			</color>
<color=#434343>//			byte[] output = c.keyedPasswordHashing(pwdArr, keyArr, saltArr, gammaArr, adArr, outputLength, userIDArr);</color>
<color=#434343>//			</color>
<color=#434343>//			assertTrue(res.equals(helper.bytes2hex(output).toLowerCase()));</color>
<color=#434343>//		}</color>
<color=#434343>//	}</color>
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testKeyedHashButterflyReduced(){
		DefaultInstances instance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = instance.<color=#045FB4>initButterfly</color>();
		
		c.<color=#045FB4>setGHigh</color>(9);
		c.<color=#045FB4>setGLow</color>(9);
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(filekeyedHashButterflyReduced);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			String pwd = inputs.<color=#045FB4>getString</color>("pwd");
			String key = inputs.<color=#045FB4>getString</color>("key");
			String salt = inputs.<color=#045FB4>getString</color>("salt");
			String gamma = inputs.<color=#045FB4>getString</color>("gamma");
			String ad = inputs.<color=#045FB4>getString</color>("aData");
			<color=#8000FF>int</color> outputLength = inputs.<color=#045FB4>getInt</color>("outputLength");
			String userID = inputs.<color=#045FB4>getString</color>("userID");
			
			<color=#8000FF>byte</color>[] pwdArr = helper.<color=#045FB4>hex2bytes</color>(pwd);
			<color=#8000FF>byte</color>[] keyArr = helper.<color=#045FB4>hex2bytes</color>(key);
			<color=#8000FF>byte</color>[] saltArr = helper.<color=#045FB4>hex2bytes</color>(salt);
			<color=#8000FF>byte</color>[] gammaArr = helper.<color=#045FB4>hex2bytes</color>(gamma);
			<color=#8000FF>byte</color>[] adArr = helper.<color=#045FB4>hex2bytes</color>(ad);
			<color=#8000FF>byte</color>[] userIDArr = helper.<color=#045FB4>hex2bytes</color>(userID);
			
			String res = outputs.<color=#045FB4>getString</color>("res");
			
			<color=#8000FF>byte</color>[] output = c.<color=#045FB4>keyedPasswordHashing</color>(pwdArr, keyArr, saltArr, gammaArr, adArr, outputLength, userIDArr);
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}
	}
	
<color=#434343>//	@Test</color>
<color=#434343>//	public void testKeyedHashDragonfly(){</color>
<color=#434343>//		DefaultInstances instance = new DefaultInstances();</color>
<color=#434343>//		Catena c = instance.initDragonfly();</color>
<color=#434343>//		</color>
<color=#434343>//		JSONArray jsonObj = helper.jsonParserArr(filekeyedHashDragonfly);</color>
<color=#434343>//		for (int i = 0; i<jsonObj.length(); ++i ){</color>
<color=#434343>//			JSONObject o = (JSONObject) jsonObj.get(i);</color>
<color=#434343>//			</color>
<color=#434343>//			JSONObject inputs = o.getJSONObject("inputs");</color>
<color=#434343>//			JSONObject outputs = o.getJSONObject("outputs");</color>
<color=#434343>//			</color>
<color=#434343>//			String pwd = inputs.getString("pwd");</color>
<color=#434343>//			String key = inputs.getString("key");</color>
<color=#434343>//			String salt = inputs.getString("salt");</color>
<color=#434343>//			String gamma = inputs.getString("gamma");</color>
<color=#434343>//			String ad = inputs.getString("aData");</color>
<color=#434343>//			int outputLength = inputs.getInt("outputLength");</color>
<color=#434343>//			String userID = inputs.getString("userID");</color>
<color=#434343>//			</color>
<color=#434343>//			byte[] pwdArr = helper.hex2bytes(pwd);</color>
<color=#434343>//			byte[] keyArr = helper.hex2bytes(key);</color>
<color=#434343>//			byte[] saltArr = helper.hex2bytes(salt);</color>
<color=#434343>//			byte[] gammaArr = helper.hex2bytes(gamma);</color>
<color=#434343>//			byte[] adArr = helper.hex2bytes(ad);</color>
<color=#434343>//			byte[] userIDArr = helper.hex2bytes(userID);</color>
<color=#434343>//			</color>
<color=#434343>//			String res = outputs.getString("res");</color>
<color=#434343>//			</color>
<color=#434343>//			byte[] output = c.keyedPasswordHashing(pwdArr, keyArr, saltArr, gammaArr, adArr, outputLength, userIDArr);</color>
<color=#434343>//			</color>
<color=#434343>//			assertTrue(res.equals(helper.bytes2hex(output).toLowerCase()));</color>
<color=#434343>//		}</color>
<color=#434343>//	}</color>
	
<color=#434343>//	@Test</color>
<color=#434343>//	public void testKeyedHashDragonflyFull(){</color>
<color=#434343>//		DefaultInstances instance = new DefaultInstances();</color>
<color=#434343>//		Catena c = instance.initDragonflyFull();</color>
<color=#434343>//		</color>
<color=#434343>//		JSONArray jsonObj = helper.jsonParserArr(filekeyedHashDragonflyFull);</color>
<color=#434343>//		for (int i = 0; i<jsonObj.length(); ++i ){</color>
<color=#434343>//			JSONObject o = (JSONObject) jsonObj.get(i);</color>
<color=#434343>//			</color>
<color=#434343>//			JSONObject inputs = o.getJSONObject("inputs");</color>
<color=#434343>//			JSONObject outputs = o.getJSONObject("outputs");</color>
<color=#434343>//			</color>
<color=#434343>//			String pwd = inputs.getString("pwd");</color>
<color=#434343>//			String key = inputs.getString("key");</color>
<color=#434343>//			String salt = inputs.getString("salt");</color>
<color=#434343>//			String gamma = inputs.getString("gamma");</color>
<color=#434343>//			String ad = inputs.getString("aData");</color>
<color=#434343>//			int outputLength = inputs.getInt("outputLength");</color>
<color=#434343>//			String userID = inputs.getString("userID");</color>
<color=#434343>//			</color>
<color=#434343>//			byte[] pwdArr = helper.hex2bytes(pwd);</color>
<color=#434343>//			byte[] keyArr = helper.hex2bytes(key);</color>
<color=#434343>//			byte[] saltArr = helper.hex2bytes(salt);</color>
<color=#434343>//			byte[] gammaArr = helper.hex2bytes(gamma);</color>
<color=#434343>//			byte[] adArr = helper.hex2bytes(ad);</color>
<color=#434343>//			byte[] userIDArr = helper.hex2bytes(userID);</color>
<color=#434343>//			</color>
<color=#434343>//			String res = outputs.getString("res");</color>
<color=#434343>//			</color>
<color=#434343>//			byte[] output = c.keyedPasswordHashing(pwdArr, keyArr, saltArr, gammaArr, adArr, outputLength, userIDArr);</color>
<color=#434343>//			</color>
<color=#434343>//			assertTrue(res.equals(helper.bytes2hex(output).toLowerCase()));</color>
<color=#434343>//		}</color>
<color=#434343>//	}</color>

	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testKeyedHashDragonflyReduced(){
		DefaultInstances instance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = instance.<color=#045FB4>initDragonfly</color>();
		
		c.<color=#045FB4>setGHigh</color>(14);
		c.<color=#045FB4>setGLow</color>(14);
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(filekeyedHashDragonflyReduced);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			String pwd = inputs.<color=#045FB4>getString</color>("pwd");
			String key = inputs.<color=#045FB4>getString</color>("key");
			String salt = inputs.<color=#045FB4>getString</color>("salt");
			String gamma = inputs.<color=#045FB4>getString</color>("gamma");
			String ad = inputs.<color=#045FB4>getString</color>("aData");
			<color=#8000FF>int</color> outputLength = inputs.<color=#045FB4>getInt</color>("outputLength");
			String userID = inputs.<color=#045FB4>getString</color>("userID");
			
			<color=#8000FF>byte</color>[] pwdArr = helper.<color=#045FB4>hex2bytes</color>(pwd);
			<color=#8000FF>byte</color>[] keyArr = helper.<color=#045FB4>hex2bytes</color>(key);
			<color=#8000FF>byte</color>[] saltArr = helper.<color=#045FB4>hex2bytes</color>(salt);
			<color=#8000FF>byte</color>[] gammaArr = helper.<color=#045FB4>hex2bytes</color>(gamma);
			<color=#8000FF>byte</color>[] adArr = helper.<color=#045FB4>hex2bytes</color>(ad);
			<color=#8000FF>byte</color>[] userIDArr = helper.<color=#045FB4>hex2bytes</color>(userID);
			
			String res = outputs.<color=#045FB4>getString</color>("res");
			
			<color=#8000FF>byte</color>[] output = c.<color=#045FB4>keyedPasswordHashing</color>(pwdArr, keyArr, saltArr, gammaArr, adArr, outputLength, userIDArr);
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}
	}
	

<color=#434343>//	@Test</color>
<color=#434343>//	public void testKeyDerivationButterfly(){</color>
<color=#434343>//		DefaultInstances instance = new DefaultInstances();</color>
<color=#434343>//		Catena c = instance.initButterfly();</color>
<color=#434343>//		</color>
<color=#434343>//		JSONArray jsonObj = helper.jsonParserArr(filekeyDerivationButterfly);</color>
<color=#434343>//		for (int i = 0; i<jsonObj.length(); ++i ){</color>
<color=#434343>//			JSONObject o = (JSONObject) jsonObj.get(i);</color>
<color=#434343>//			</color>
<color=#434343>//			JSONObject inputs = o.getJSONObject("inputs");</color>
<color=#434343>//			JSONObject outputs = o.getJSONObject("outputs");</color>
<color=#434343>//			</color>
<color=#434343>//			String pwd = inputs.getString("pwd");</color>
<color=#434343>//			String ad = inputs.getString("ad");</color>
<color=#434343>//			String salt = inputs.getString("salt");</color>
<color=#434343>//			String gamma = inputs.getString("gamma");</color>
<color=#434343>//			String keyIdentifier = inputs.getString("key_identifier");</color>
<color=#434343>//			int outputLength = inputs.getInt("output_length");</color>
<color=#434343>//			int keySize = inputs.getInt("key_size");</color>
<color=#434343>//			</color>
<color=#434343>//			byte[] pwdArr = helper.hex2bytes(pwd);</color>
<color=#434343>//			byte[] adArr = helper.hex2bytes(ad);</color>
<color=#434343>//			byte[] saltArr = helper.hex2bytes(salt);</color>
<color=#434343>//			byte[] gammaArr = helper.hex2bytes(gamma);</color>
<color=#434343>//			byte[] keyIdentifierArr = helper.hex2bytes(keyIdentifier);</color>
<color=#434343>//</color>
<color=#434343>//			String res = outputs.getString("res");</color>
<color=#434343>//			</color>
<color=#434343>//			byte[] output = c.keyDerivation(pwdArr, saltArr, adArr, gammaArr, outputLength, keySize, keyIdentifierArr);</color>
<color=#434343>//			</color>
<color=#434343>//			assertTrue(res.equals(helper.bytes2hex(output).toLowerCase()));</color>
<color=#434343>//		}</color>
<color=#434343>//	}</color>
<color=#434343>//	</color>


<color=#434343>//	@Test</color>
<color=#434343>//	public void testKeyDerivationButterflyFull(){</color>
<color=#434343>//		DefaultInstances instance = new DefaultInstances();</color>
<color=#434343>//		Catena c = instance.initButterflyFull();</color>
<color=#434343>//		</color>
<color=#434343>//		JSONArray jsonObj = helper.jsonParserArr(filekeyDerivationButterflyFull);</color>
<color=#434343>//		for (int i = 0; i<jsonObj.length(); ++i ){</color>
<color=#434343>//			JSONObject o = (JSONObject) jsonObj.get(i);</color>
<color=#434343>//			</color>
<color=#434343>//			JSONObject inputs = o.getJSONObject("inputs");</color>
<color=#434343>//			JSONObject outputs = o.getJSONObject("outputs");</color>
<color=#434343>//			</color>
<color=#434343>//			String pwd = inputs.getString("pwd");</color>
<color=#434343>//			String ad = inputs.getString("ad");</color>
<color=#434343>//			String salt = inputs.getString("salt");</color>
<color=#434343>//			String gamma = inputs.getString("gamma");</color>
<color=#434343>//			String keyIdentifier = inputs.getString("key_identifier");</color>
<color=#434343>//			int outputLength = inputs.getInt("output_length");</color>
<color=#434343>//			int keySize = inputs.getInt("key_size");</color>
<color=#434343>//			</color>
<color=#434343>//			byte[] pwdArr = helper.hex2bytes(pwd);</color>
<color=#434343>//			byte[] adArr = helper.hex2bytes(ad);</color>
<color=#434343>//			byte[] saltArr = helper.hex2bytes(salt);</color>
<color=#434343>//			byte[] gammaArr = helper.hex2bytes(gamma);</color>
<color=#434343>//			byte[] keyIdentifierArr = helper.hex2bytes(keyIdentifier);</color>
<color=#434343>//</color>
<color=#434343>//			String res = outputs.getString("res");</color>
<color=#434343>//			</color>
<color=#434343>//			byte[] output = c.keyDerivation(pwdArr, saltArr, adArr, gammaArr, outputLength, keySize, keyIdentifierArr);</color>
<color=#434343>//			</color>
<color=#434343>//			assertTrue(res.equals(helper.bytes2hex(output).toLowerCase()));</color>
<color=#434343>//		}</color>
<color=#434343>//	}</color>
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testKeyDerivationButterflyReduced(){
		DefaultInstances instance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = instance.<color=#045FB4>initButterfly</color>();
		
		c.<color=#045FB4>setGLow</color>(9);
		c.<color=#045FB4>setGHigh</color>(9);
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(filekeyDerivationButterflyReduced);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			String pwd = inputs.<color=#045FB4>getString</color>("pwd");
			String ad = inputs.<color=#045FB4>getString</color>("ad");
			String salt = inputs.<color=#045FB4>getString</color>("salt");
			String gamma = inputs.<color=#045FB4>getString</color>("gamma");
			String keyIdentifier = inputs.<color=#045FB4>getString</color>("key_identifier");
			<color=#8000FF>int</color> outputLength = inputs.<color=#045FB4>getInt</color>("output_length");
			<color=#8000FF>int</color> keySize = inputs.<color=#045FB4>getInt</color>("key_size");
			
			<color=#8000FF>byte</color>[] pwdArr = helper.<color=#045FB4>hex2bytes</color>(pwd);
			<color=#8000FF>byte</color>[] adArr = helper.<color=#045FB4>hex2bytes</color>(ad);
			<color=#8000FF>byte</color>[] saltArr = helper.<color=#045FB4>hex2bytes</color>(salt);
			<color=#8000FF>byte</color>[] gammaArr = helper.<color=#045FB4>hex2bytes</color>(gamma);
			<color=#8000FF>byte</color>[] keyIdentifierArr = helper.<color=#045FB4>hex2bytes</color>(keyIdentifier);

			String res = outputs.<color=#045FB4>getString</color>("res");
			
			<color=#8000FF>byte</color>[] output = c.<color=#045FB4>keyDerivation</color>(pwdArr, saltArr, adArr, gammaArr, outputLength, keySize, keyIdentifierArr);
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}
	}
	
	
<color=#434343>//	@Test</color>
<color=#434343>//	public void testKeyDerivationDragonfly(){</color>
<color=#434343>//		DefaultInstances instance = new DefaultInstances();</color>
<color=#434343>//		Catena c = instance.initDragonfly();</color>
<color=#434343>//		</color>
<color=#434343>//		JSONArray jsonObj = helper.jsonParserArr(filekeyDerivationDragonfly);</color>
<color=#434343>//		for (int i = 0; i<jsonObj.length(); ++i ){</color>
<color=#434343>//			JSONObject o = (JSONObject) jsonObj.get(i);</color>
<color=#434343>//			</color>
<color=#434343>//			JSONObject inputs = o.getJSONObject("inputs");</color>
<color=#434343>//			JSONObject outputs = o.getJSONObject("outputs");</color>
<color=#434343>//			</color>
<color=#434343>//			String pwd = inputs.getString("pwd");</color>
<color=#434343>//			String ad = inputs.getString("ad");</color>
<color=#434343>//			String salt = inputs.getString("salt");</color>
<color=#434343>//			String gamma = inputs.getString("gamma");</color>
<color=#434343>//			String keyIdentifier = inputs.getString("key_identifier");</color>
<color=#434343>//			int outputLength = inputs.getInt("output_length");</color>
<color=#434343>//			int keySize = inputs.getInt("key_size");</color>
<color=#434343>//			</color>
<color=#434343>//			byte[] pwdArr = helper.hex2bytes(pwd);</color>
<color=#434343>//			byte[] adArr = helper.hex2bytes(ad);</color>
<color=#434343>//			byte[] saltArr = helper.hex2bytes(salt);</color>
<color=#434343>//			byte[] gammaArr = helper.hex2bytes(gamma);</color>
<color=#434343>//			byte[] keyIdentifierArr = helper.hex2bytes(keyIdentifier);</color>
<color=#434343>//</color>
<color=#434343>//			String res = outputs.getString("res");</color>
<color=#434343>//			</color>
<color=#434343>//			byte[] output = c.keyDerivation(pwdArr, saltArr, adArr, gammaArr, outputLength, keySize, keyIdentifierArr);</color>
<color=#434343>//			</color>
<color=#434343>//			assertTrue(res.equals(helper.bytes2hex(output).toLowerCase()));</color>
<color=#434343>//		}</color>
<color=#434343>//	}</color>
<color=#434343>//	</color>
<color=#434343>//	@Test</color>
<color=#434343>//	public void testKeyDerivationDragonflyFull(){</color>
<color=#434343>//		DefaultInstances instance = new DefaultInstances();</color>
<color=#434343>//		Catena c = instance.initDragonflyFull();</color>
<color=#434343>//		</color>
<color=#434343>//		JSONArray jsonObj = helper.jsonParserArr(filekeyDerivationDragonflyFull);</color>
<color=#434343>//		for (int i = 0; i<jsonObj.length(); ++i ){</color>
<color=#434343>//			JSONObject o = (JSONObject) jsonObj.get(i);</color>
<color=#434343>//			</color>
<color=#434343>//			JSONObject inputs = o.getJSONObject("inputs");</color>
<color=#434343>//			JSONObject outputs = o.getJSONObject("outputs");</color>
<color=#434343>//			</color>
<color=#434343>//			String pwd = inputs.getString("pwd");</color>
<color=#434343>//			String ad = inputs.getString("ad");</color>
<color=#434343>//			String salt = inputs.getString("salt");</color>
<color=#434343>//			String gamma = inputs.getString("gamma");</color>
<color=#434343>//			String keyIdentifier = inputs.getString("key_identifier");</color>
<color=#434343>//			int outputLength = inputs.getInt("output_length");</color>
<color=#434343>//			int keySize = inputs.getInt("key_size");</color>
<color=#434343>//			</color>
<color=#434343>//			byte[] pwdArr = helper.hex2bytes(pwd);</color>
<color=#434343>//			byte[] adArr = helper.hex2bytes(ad);</color>
<color=#434343>//			byte[] saltArr = helper.hex2bytes(salt);</color>
<color=#434343>//			byte[] gammaArr = helper.hex2bytes(gamma);</color>
<color=#434343>//			byte[] keyIdentifierArr = helper.hex2bytes(keyIdentifier);</color>
<color=#434343>//</color>
<color=#434343>//			String res = outputs.getString("res");</color>
<color=#434343>//			</color>
<color=#434343>//			byte[] output = c.keyDerivation(pwdArr, saltArr, adArr, gammaArr, outputLength, keySize, keyIdentifierArr);</color>
<color=#434343>//			</color>
<color=#434343>//			assertTrue(res.equals(helper.bytes2hex(output).toLowerCase()));</color>
<color=#434343>//		}</color>
<color=#434343>//	}</color>

	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testKeyDerivationDragonflyReduced(){
		DefaultInstances instance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = instance.<color=#045FB4>initDragonfly</color>();
		
		c.<color=#045FB4>setGHigh</color>(14);
		c.<color=#045FB4>setGLow</color>(14);
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(filekeyDerivationDragonflyReduced);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			String pwd = inputs.<color=#045FB4>getString</color>("pwd");
			String ad = inputs.<color=#045FB4>getString</color>("ad");
			String salt = inputs.<color=#045FB4>getString</color>("salt");
			String gamma = inputs.<color=#045FB4>getString</color>("gamma");
			String keyIdentifier = inputs.<color=#045FB4>getString</color>("key_identifier");
			<color=#8000FF>int</color> outputLength = inputs.<color=#045FB4>getInt</color>("output_length");
			<color=#8000FF>int</color> keySize = inputs.<color=#045FB4>getInt</color>("key_size");
			
			<color=#8000FF>byte</color>[] pwdArr = helper.<color=#045FB4>hex2bytes</color>(pwd);
			<color=#8000FF>byte</color>[] adArr = helper.<color=#045FB4>hex2bytes</color>(ad);
			<color=#8000FF>byte</color>[] saltArr = helper.<color=#045FB4>hex2bytes</color>(salt);
			<color=#8000FF>byte</color>[] gammaArr = helper.<color=#045FB4>hex2bytes</color>(gamma);
			<color=#8000FF>byte</color>[] keyIdentifierArr = helper.<color=#045FB4>hex2bytes</color>(keyIdentifier);

			String res = outputs.<color=#045FB4>getString</color>("res");
			
			<color=#8000FF>byte</color>[] output = c.<color=#045FB4>keyDerivation</color>(pwdArr, saltArr, adArr, gammaArr, outputLength, keySize, keyIdentifierArr);
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testCIUpdateDragonflyReduced(){
		DefaultInstances instance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = instance.<color=#045FB4>initDragonfly</color>();
		
		<color=#8000FF>int</color> gOld = 14;
		
		c.<color=#045FB4>setGHigh</color>(gOld);
		c.<color=#045FB4>setGLow</color>(gOld);
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileciUpdateDragonflyReduced);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			String oldHash = inputs.<color=#045FB4>getString</color>("oldHash");
			<color=#8000FF>int</color> gNew = inputs.<color=#045FB4>getInt</color>("gNew");
			String gamma = inputs.<color=#045FB4>getString</color>("gamma");
			<color=#8000FF>int</color> outLen = inputs.<color=#045FB4>getInt</color>("outLen");
			
			<color=#8000FF>byte</color>[] oldHashArr = helper.<color=#045FB4>hex2bytes</color>(oldHash);
			<color=#8000FF>byte</color>[] gammaArr = helper.<color=#045FB4>hex2bytes</color>(gamma);

			String res = outputs.<color=#045FB4>getString</color>("res");
			
			<color=#8000FF>byte</color>[] output = <color=#7e101a>new</color> <color=#8000FF>byte</color>[0];
			<color=#7e101a>try</color> {
				output = c.<color=#045FB4>clientIndependentUpdate</color>(oldHashArr, gOld, gNew, gammaArr, outLen);
			} <color=#7e101a>catch</color> (Exception e) {
				System.<color=#045FB4>out</color>.<color=#045FB4>println</color>("Could not update Hash.");
				e.<color=#045FB4>printStackTrace</color>();
			}
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testCIUpdateKeyedDragonflyReduced(){
		DefaultInstances instance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = instance.<color=#045FB4>initDragonfly</color>();
		
		<color=#8000FF>int</color> gOld = 14;
		
		c.<color=#045FB4>setGHigh</color>(gOld);
		c.<color=#045FB4>setGLow</color>(gOld);
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileciUpdateKeyedDragonflyReduced);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			String oldHash = inputs.<color=#045FB4>getString</color>("oldHash");
			<color=#8000FF>int</color> gNew = inputs.<color=#045FB4>getInt</color>("gNew");
			String gamma = inputs.<color=#045FB4>getString</color>("gamma");
			<color=#8000FF>int</color> outLen = inputs.<color=#045FB4>getInt</color>("outLen");
			String key = inputs.<color=#045FB4>getString</color>("key");
			String userID = inputs.<color=#045FB4>getString</color>("userID");
			
			<color=#8000FF>byte</color>[] oldHashArr = helper.<color=#045FB4>hex2bytes</color>(oldHash);
			<color=#8000FF>byte</color>[] gammaArr = helper.<color=#045FB4>hex2bytes</color>(gamma);
			<color=#8000FF>byte</color>[] keyArr = helper.<color=#045FB4>hex2bytes</color>(key);
			<color=#8000FF>byte</color>[] userIDArr = helper.<color=#045FB4>hex2bytes</color>(userID);

			String res = outputs.<color=#045FB4>getString</color>("res");
			
			<color=#8000FF>byte</color>[] output = <color=#7e101a>new</color> <color=#8000FF>byte</color>[0];
			<color=#7e101a>try</color> {
				output = c.<color=#045FB4>keyedClientIndependentUpdate</color>(oldHashArr, gOld, gNew, gammaArr, outLen, keyArr, userIDArr);
			} <color=#7e101a>catch</color> (Exception e) {
				System.<color=#045FB4>out</color>.<color=#045FB4>println</color>("Could not update Hash.");
				e.<color=#045FB4>printStackTrace</color>();
			}
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testFlapButterfly(){
		
		DefaultInstances defaultInstance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = defaultInstance.<color=#045FB4>initButterfly</color>();
	
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileFlapButterfly);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			<color=#8000FF>int</color> g = inputs.<color=#045FB4>getInt</color>("g");
			String pwd = inputs.<color=#045FB4>getString</color>("pwd");
			String gamma = inputs.<color=#045FB4>getString</color>("gamma");
			
			<color=#8000FF>byte</color>[] pwdArr = helper.<color=#045FB4>hex2bytes</color>(pwd);
			<color=#8000FF>byte</color>[] gammaArr = helper.<color=#045FB4>hex2bytes</color>(gamma);

			String res = outputs.<color=#045FB4>getString</color>("res");
			
			<color=#8000FF>byte</color>[] output = c.<color=#045FB4>flapPub</color>(g, pwdArr, gammaArr);
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testFlapButterflyFull(){
		DefaultInstances defaultInstance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = defaultInstance.<color=#045FB4>initButterflyFull</color>();
	
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileFlapButterflyFull);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			<color=#8000FF>int</color> g = inputs.<color=#045FB4>getInt</color>("g");
			String pwd = inputs.<color=#045FB4>getString</color>("pwd");
			String gamma = inputs.<color=#045FB4>getString</color>("gamma");
			
			<color=#8000FF>byte</color>[] pwdArr = helper.<color=#045FB4>hex2bytes</color>(pwd);
			<color=#8000FF>byte</color>[] gammaArr = helper.<color=#045FB4>hex2bytes</color>(gamma);

			String res = outputs.<color=#045FB4>getString</color>("res");
			
			<color=#8000FF>byte</color>[] output = c.<color=#045FB4>flapPub</color>(g, pwdArr, gammaArr);
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testFlapDragonfly(){
		DefaultInstances defaultInstance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = defaultInstance.<color=#045FB4>initDragonfly</color>();
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileFlapDragonfly);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			c = defaultInstance.<color=#045FB4>initDragonfly</color>();
			
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			<color=#8000FF>int</color> g = inputs.<color=#045FB4>getInt</color>("g");
			String pwd = inputs.<color=#045FB4>getString</color>("pwd");
			String gamma = inputs.<color=#045FB4>getString</color>("gamma");
			
			<color=#8000FF>byte</color>[] pwdArr = helper.<color=#045FB4>hex2bytes</color>(pwd);
			<color=#8000FF>byte</color>[] gammaArr = helper.<color=#045FB4>hex2bytes</color>(gamma);

			String res = outputs.<color=#045FB4>getString</color>("res");
			
			<color=#8000FF>byte</color>[] output = c.<color=#045FB4>flapPub</color>(g, pwdArr, gammaArr);
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testFlapDragonflyFull(){
		DefaultInstances defaultInstance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = defaultInstance.<color=#045FB4>initDragonflyFull</color>();
	
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileFlapDragonflyFull);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			<color=#8000FF>int</color> g = inputs.<color=#045FB4>getInt</color>("g");
			String pwd = inputs.<color=#045FB4>getString</color>("pwd");
			String gamma = inputs.<color=#045FB4>getString</color>("gamma");
			
			<color=#8000FF>byte</color>[] pwdArr = helper.<color=#045FB4>hex2bytes</color>(pwd);
			<color=#8000FF>byte</color>[] gammaArr = helper.<color=#045FB4>hex2bytes</color>(gamma);

			String res = outputs.<color=#045FB4>getString</color>("res");
			
			<color=#8000FF>byte</color>[] output = c.<color=#045FB4>flapPub</color>(g, pwdArr, gammaArr);
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testTweakButterfly(){
		DefaultInstances defaultInstance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = defaultInstance.<color=#045FB4>initButterfly</color>();
	
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(filetweakButterfly);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			<color=#8000FF>int</color> domain = inputs.<color=#045FB4>getInt</color>("d");
			<color=#8000FF>int</color> outLen = inputs.<color=#045FB4>getInt</color>("outLen");
			<color=#8000FF>int</color> sLen = inputs.<color=#045FB4>getInt</color>("sLen");
			String aD = inputs.<color=#045FB4>getString</color>("aData");
			<color=#8000FF>byte</color>[] aData = helper.<color=#045FB4>string2Bytes</color>(aD);

			String res = outputs.<color=#045FB4>getString</color>("res");
			
			<color=#8000FF>byte</color>[] output = c.<color=#045FB4>testCompTweak</color>(c.<color=#045FB4>getVID</color>(), domain, c.<color=#045FB4>getLambda</color>(), outLen, sLen, aData);
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testTweakButterflyFull(){
		DefaultInstances defaultInstance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = defaultInstance.<color=#045FB4>initButterflyFull</color>();
	
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(filetweakButterflyFull);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			<color=#8000FF>int</color> domain = inputs.<color=#045FB4>getInt</color>("d");
			<color=#8000FF>int</color> outLen = inputs.<color=#045FB4>getInt</color>("outLen");
			<color=#8000FF>int</color> sLen = inputs.<color=#045FB4>getInt</color>("sLen");
			String aD = inputs.<color=#045FB4>getString</color>("aData");
			<color=#8000FF>byte</color>[] aData = helper.<color=#045FB4>string2Bytes</color>(aD);

			String res = outputs.<color=#045FB4>getString</color>("res");
			
			<color=#8000FF>byte</color>[] output = c.<color=#045FB4>testCompTweak</color>(c.<color=#045FB4>getVID</color>(), domain, c.<color=#045FB4>getLambda</color>(), outLen, sLen, aData);
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testTweakDragonfly(){
		DefaultInstances defaultInstance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = defaultInstance.<color=#045FB4>initDragonfly</color>();
	
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(filetweakDragonfly);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			<color=#8000FF>int</color> domain = inputs.<color=#045FB4>getInt</color>("d");
			<color=#8000FF>int</color> outLen = inputs.<color=#045FB4>getInt</color>("outLen");
			<color=#8000FF>int</color> sLen = inputs.<color=#045FB4>getInt</color>("sLen");
			String aD = inputs.<color=#045FB4>getString</color>("aData");
			<color=#8000FF>byte</color>[] aData = helper.<color=#045FB4>string2Bytes</color>(aD);

			String res = outputs.<color=#045FB4>getString</color>("res");
			
			<color=#8000FF>byte</color>[] output = c.<color=#045FB4>testCompTweak</color>(c.<color=#045FB4>getVID</color>(), domain, c.<color=#045FB4>getLambda</color>(), outLen, sLen, aData);
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testTweakDragonflyFull(){
		DefaultInstances defaultInstance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = defaultInstance.<color=#045FB4>initDragonflyFull</color>();
	
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(filetweakDragonflyFull);
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");
			
			<color=#8000FF>int</color> domain = inputs.<color=#045FB4>getInt</color>("d");
			<color=#8000FF>int</color> outLen = inputs.<color=#045FB4>getInt</color>("outLen");
			<color=#8000FF>int</color> sLen = inputs.<color=#045FB4>getInt</color>("sLen");
			String aD = inputs.<color=#045FB4>getString</color>("aData");
			<color=#8000FF>byte</color>[] aData = helper.<color=#045FB4>string2Bytes</color>(aD);

			String res = outputs.<color=#045FB4>getString</color>("res");
			
			<color=#8000FF>byte</color>[] output = c.<color=#045FB4>testCompTweak</color>(c.<color=#045FB4>getVID</color>(), domain, c.<color=#045FB4>getLambda</color>(), outLen, sLen, aData);
			
			assertTrue(res.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(output).<color=#045FB4>toLowerCase</color>()));
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testHInit(){
		
		DefaultInstances defaultInstance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = defaultInstance.<color=#045FB4>initDragonflyFull</color>();
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileHInit);
		
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs  = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");

			String x 	  = inputs.<color=#045FB4>getString</color>("x");
			<color=#8000FF>byte</color>[] xArray = helper.<color=#045FB4>hex2bytes</color>(x);
			
			JSONArray out = outputs.<color=#045FB4>getJSONArray</color>("v");
			
			String v0 = out.<color=#045FB4>getString</color>(0);
			String v1 = out.<color=#045FB4>getString</color>(1);
			
			<color=#8000FF>byte</color>[] result = c.<color=#045FB4>testHInit</color>(xArray);
			
			String v = v0+v1;
			
			
			assertTrue(v.<color=#045FB4>equals</color>(helper.<color=#045FB4>bytes2hex</color>(result)));
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testProofOfWorkServerSaltButterflyReduced(){
		DefaultInstances instance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = instance.<color=#045FB4>initButterfly</color>();
		
		c.<color=#045FB4>setGHigh</color>(9);
		c.<color=#045FB4>setGLow</color>(9);
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileproofOfWorkServerSaltButterflyReduced);
		
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs  = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");

			<color=#8000FF>byte</color>[] pwd = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("pwd"));
			<color=#8000FF>byte</color>[] salt = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("salt"));
			<color=#8000FF>byte</color>[] aData = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("aData"));
			<color=#8000FF>byte</color>[] gamma = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("gamma"));
			<color=#8000FF>int</color> outLen = inputs.<color=#045FB4>getInt</color>("outLen");
			<color=#8000FF>int</color> p = inputs.<color=#045FB4>getInt</color>("p");
			<color=#8000FF>int</color> mode = inputs.<color=#045FB4>getInt</color>("mode");
			
			<color=#8000FF>byte</color>[] pwdExp = helper.<color=#045FB4>hex2bytes</color>(outputs.<color=#045FB4>getString</color>("pwd"));
			<color=#8000FF>byte</color>[] saltExp = helper.<color=#045FB4>hex2bytes</color>(outputs.<color=#045FB4>getString</color>("salt"));
			<color=#8000FF>byte</color>[] aDataExp = helper.<color=#045FB4>hex2bytes</color>(outputs.<color=#045FB4>getString</color>("aData"));
			<color=#8000FF>byte</color>[] gammaExp = helper.<color=#045FB4>hex2bytes</color>(outputs.<color=#045FB4>getString</color>("gamma"));
			<color=#8000FF>int</color> outLenExp = outputs.<color=#045FB4>getInt</color>("outLen");
			<color=#8000FF>byte</color>[] outHashExp = helper.<color=#045FB4>hex2bytes</color>(outputs.<color=#045FB4>getString</color>("outHash"));
			<color=#8000FF>int</color> pExp = outputs.<color=#045FB4>getInt</color>("p");
			<color=#8000FF>int</color> modeExp = outputs.<color=#045FB4>getInt</color>("mode");
			
			
			POWstruct output = c.<color=#045FB4>proofOfWorkServer</color>(pwd, salt, aData, outLen, gamma, p, mode);
			
			assertArrayEquals(pwdExp, output.<color=#045FB4>pwd</color>);
			assertArrayEquals(saltExp, output.<color=#045FB4>salt</color>);
			assertArrayEquals(aDataExp, output.<color=#045FB4>aData</color>);
			assertArrayEquals(gammaExp, output.<color=#045FB4>gamma</color>);
			assertArrayEquals(outHashExp, output.<color=#045FB4>rHash</color>);
			assertEquals(outLenExp, output.<color=#045FB4>outLen</color>);
			assertEquals(pExp, output.<color=#045FB4>p</color>);
			assertEquals(modeExp, output.<color=#045FB4>mode</color>);
		}
	}

	
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testProofOfWorkServerPwdButterflyReduced(){
		DefaultInstances instance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = instance.<color=#045FB4>initButterfly</color>();
		
		c.<color=#045FB4>setGHigh</color>(9);
		c.<color=#045FB4>setGLow</color>(9);
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileproofOfWorkServerPwdButterflyReduced);
		
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs  = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");

			<color=#8000FF>byte</color>[] pwd = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("pwd"));
			<color=#8000FF>byte</color>[] salt = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("salt"));
			<color=#8000FF>byte</color>[] aData = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("aData"));
			<color=#8000FF>byte</color>[] gamma = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("gamma"));
			<color=#8000FF>int</color> outLen = inputs.<color=#045FB4>getInt</color>("outLen");
			<color=#8000FF>int</color> p = inputs.<color=#045FB4>getInt</color>("p");
			<color=#8000FF>int</color> mode = inputs.<color=#045FB4>getInt</color>("mode");
			
			<color=#8000FF>byte</color>[] pwdExp = helper.<color=#045FB4>hex2bytes</color>(outputs.<color=#045FB4>getString</color>("pwd"));
			<color=#8000FF>byte</color>[] saltExp = helper.<color=#045FB4>hex2bytes</color>(outputs.<color=#045FB4>getString</color>("salt"));
			<color=#8000FF>byte</color>[] aDataExp = helper.<color=#045FB4>hex2bytes</color>(outputs.<color=#045FB4>getString</color>("aData"));
			<color=#8000FF>byte</color>[] gammaExp = helper.<color=#045FB4>hex2bytes</color>(outputs.<color=#045FB4>getString</color>("gamma"));
			<color=#8000FF>int</color> outLenExp = outputs.<color=#045FB4>getInt</color>("outLen");
			<color=#8000FF>byte</color>[] outHashExp = helper.<color=#045FB4>hex2bytes</color>(outputs.<color=#045FB4>getString</color>("outHash"));
			<color=#8000FF>int</color> pExp = outputs.<color=#045FB4>getInt</color>("p");
			<color=#8000FF>int</color> modeExp = outputs.<color=#045FB4>getInt</color>("mode");
			
			
			POWstruct output = c.<color=#045FB4>proofOfWorkServer</color>(pwd, salt, aData, outLen, gamma, p, mode);
			
			assertArrayEquals(pwdExp, output.<color=#045FB4>pwd</color>);
			assertArrayEquals(saltExp, output.<color=#045FB4>salt</color>);
			assertArrayEquals(aDataExp, output.<color=#045FB4>aData</color>);
			assertArrayEquals(gammaExp, output.<color=#045FB4>gamma</color>);
			assertArrayEquals(outHashExp, output.<color=#045FB4>rHash</color>);
			assertEquals(outLenExp, output.<color=#045FB4>outLen</color>);
			assertEquals(pExp, output.<color=#045FB4>p</color>);
			assertEquals(modeExp, output.<color=#045FB4>mode</color>);
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testProofOfWorkClientPwdButterflyReduced(){
		DefaultInstances instance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = instance.<color=#045FB4>initButterfly</color>();
		
		c.<color=#045FB4>setGHigh</color>(9);
		c.<color=#045FB4>setGLow</color>(9);
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileproofOfWorkClientPwdButterflyReduced);
		
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs  = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");

			<color=#8000FF>byte</color>[] pwd = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("pwd"));
			<color=#8000FF>byte</color>[] salt = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("salt"));
			<color=#8000FF>byte</color>[] aData = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("aData"));
			<color=#8000FF>byte</color>[] gamma = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("gamma"));
			<color=#8000FF>byte</color>[] hash = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("hash"));
			<color=#8000FF>int</color> outLen = inputs.<color=#045FB4>getInt</color>("outLen");
			<color=#8000FF>int</color> p = inputs.<color=#045FB4>getInt</color>("p");
			<color=#8000FF>int</color> mode = inputs.<color=#045FB4>getInt</color>("mode");
			
			<color=#8000FF>byte</color>[] resExp = helper.<color=#045FB4>hex2bytes</color>(outputs.<color=#045FB4>getString</color>("res"));
			
			POWstruct input = c.<color=#045FB4>new</color> POWstruct();
			input.<color=#045FB4>pwd</color> = pwd;
			input.<color=#045FB4>salt</color> = salt;
			input.<color=#045FB4>aData</color> = aData;
			input.<color=#045FB4>gamma</color> = gamma;
			input.<color=#045FB4>outLen</color> = outLen;
			input.<color=#045FB4>p</color> = p;
			input.<color=#045FB4>mode</color> = mode;
			input.<color=#045FB4>rHash</color> = hash;
			
			<color=#8000FF>byte</color>[] actuals = c.<color=#045FB4>proofOfWorkClient</color>(input);
			
			assertArrayEquals(resExp, actuals);
		}
	}
	
	@Test
	<color=#7e101a>public</color> <color=#8000FF>void</color> testProofOfWorkClientSaltButterflyReduced(){
		DefaultInstances instance = <color=#7e101a>new</color> DefaultInstances();
		Catena c = instance.<color=#045FB4>initButterfly</color>();
		
		c.<color=#045FB4>setGHigh</color>(9);
		c.<color=#045FB4>setGLow</color>(9);
		
		JSONArray jsonObj = helper.<color=#045FB4>jsonParserArr</color>(fileproofOfWorkClientSaltButterflyReduced);
		
		<color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<jsonObj.<color=#045FB4>length</color>(); ++i ){
			JSONObject o = (JSONObject) jsonObj.<color=#045FB4>get</color>(i);
			
			JSONObject inputs  = o.<color=#045FB4>getJSONObject</color>("inputs");
			JSONObject outputs = o.<color=#045FB4>getJSONObject</color>("outputs");

			<color=#8000FF>byte</color>[] pwd = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("pwd"));
			<color=#8000FF>byte</color>[] salt = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("salt"));
			<color=#8000FF>byte</color>[] aData = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("aData"));
			<color=#8000FF>byte</color>[] gamma = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("gamma"));
			<color=#8000FF>byte</color>[] hash = helper.<color=#045FB4>hex2bytes</color>(inputs.<color=#045FB4>getString</color>("hash"));
			<color=#8000FF>int</color> outLen = inputs.<color=#045FB4>getInt</color>("outLen");
			<color=#8000FF>int</color> p = inputs.<color=#045FB4>getInt</color>("p");
			<color=#8000FF>int</color> mode = inputs.<color=#045FB4>getInt</color>("mode");
			
			<color=#8000FF>byte</color>[] resExp = helper.<color=#045FB4>hex2bytes</color>(outputs.<color=#045FB4>getString</color>("res"));
			
			POWstruct input = c.<color=#045FB4>new</color> POWstruct();
			input.<color=#045FB4>pwd</color> = pwd;
			input.<color=#045FB4>salt</color> = salt;
			input.<color=#045FB4>aData</color> = aData;
			input.<color=#045FB4>gamma</color> = gamma;
			input.<color=#045FB4>outLen</color> = outLen;
			input.<color=#045FB4>p</color> = p;
			input.<color=#045FB4>mode</color> = mode;
			input.<color=#045FB4>rHash</color> = hash;
			
			<color=#8000FF>byte</color>[] actuals = c.<color=#045FB4>proofOfWorkClient</color>(input);
			
			assertArrayEquals(resExp, actuals);
		}
	}
	
}