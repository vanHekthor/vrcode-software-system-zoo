<color=#7401DF>package</color> <color=#045FB4>main.java.components.graph.algorithms</color>;

<color=#7401DF>import</color> <color=#045FB4>main.java.Helper</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.graph.GraphInterface</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.hash.HashInterface</color>;

<color=#7e101a>public</color> <color=#7e101a>class</color> <color=#355c08>DoubleButterflyGraph</color> <color=#7e101a>implements</color> GraphInterface {

    HashInterface _h;
    HashInterface _hPrime;
    Helper helper = <color=#7e101a>new</color> Helper();
    IdxInterface indexing;
    
    @Override
    <color=#7e101a>public</color> <color=#8000FF>byte</color>[][] graph(<color=#8000FF>int</color> g, <color=#8000FF>byte</color>[][] v, <color=#8000FF>int</color> lambda) {
        
        <color=#8000FF>int</color> dim1 = (<color=#8000FF>int</color>)Math.<color=#045FB4>pow</color>(2, g);;
        <color=#8000FF>int</color> dim2 = _hPrime.<color=#045FB4>getOutputSize</color>();
        <color=#8000FF>byte</color> [][] r = <color=#7e101a>new</color> <color=#8000FF>byte</color>[dim1][dim2];
        
        <color=#8000FF>int</color> jLimit = 2*g - 1;
        <color=#8000FF>int</color> iLimit = dim1-1;
        
        _hPrime.<color=#045FB4>reset</color>();
        
        <color=#7e101a>for</color> (<color=#8000FF>int</color> k = 1; k <= lambda; k++) {
            <color=#7e101a>for</color> (<color=#8000FF>int</color> j = 1; j <= jLimit; j++) {
                

                
                r[0] = hFirst(helper.<color=#045FB4>concateByteArrays</color>(
                        helper.<color=#045FB4>xor</color>(v[dim1-1],v[0]),
                        v[(<color=#8000FF>int</color>)indexing.<color=#045FB4>getIndex</color>((<color=#8000FF>long</color>)g, (<color=#8000FF>long</color>)j-1, 0)]));
                
                <color=#7e101a>for</color> (<color=#8000FF>int</color> i = 1; i <= iLimit; i++) {
                    _hPrime.<color=#045FB4>update</color>(helper.<color=#045FB4>concateByteArrays</color>(
                            helper.<color=#045FB4>xor</color>(r[i-1],v[i]),
                            v[(<color=#8000FF>int</color>)indexing.<color=#045FB4>getIndex</color>((<color=#8000FF>long</color>)g, (<color=#8000FF>long</color>)j-1, i)]));
                    r[i] = _hPrime.<color=#045FB4>doFinal</color>();
                }
                System.<color=#045FB4>arraycopy</color>(r, 0, v, 0, r.<color=#045FB4>length</color>);
            }
        }
        <color=#7e101a>return</color> v;
    }

    @Override
    <color=#7e101a>public</color> <color=#8000FF>void</color> setH(HashInterface h) {
        _h = h;
    }

    @Override
    <color=#7e101a>public</color> <color=#8000FF>void</color> setHPrime(HashInterface hPrime) {
        _hPrime = hPrime;
    }

    @Override
    <color=#7e101a>public</color> <color=#8000FF>void</color> setIndexing(IdxInterface idx) {
        indexing = idx;
    }

    <color=#7e101a>private</color> <color=#8000FF>byte</color>[] hFirst(<color=#8000FF>byte</color>[] in) {
        <color=#8000FF>int</color> n = _h.<color=#045FB4>getOutputSize</color>();
        <color=#8000FF>int</color> k = _hPrime.<color=#045FB4>getOutputSize</color>();
        <color=#8000FF>int</color> l = k/n;
        
        <color=#8000FF>byte</color>[][] w = <color=#7e101a>new</color> <color=#8000FF>byte</color>[l][n];
        <color=#8000FF>byte</color>[] iByte = <color=#7e101a>new</color> <color=#8000FF>byte</color>[1];
        
        _h.<color=#045FB4>update</color>(in);
        w[0] = _h.<color=#045FB4>doFinal</color>();
        _h.<color=#045FB4>reset</color>();
        
        <color=#7e101a>for</color> (<color=#8000FF>int</color> i = 1; i <= l-1; ++i) {
            iByte[0] = (<color=#8000FF>byte</color>) i;
            _h.<color=#045FB4>update</color>(helper.<color=#045FB4>concateByteArrays</color>(iByte,w[0]));
            w[i] = _h.<color=#045FB4>doFinal</color>();
            _h.<color=#045FB4>reset</color>();
        }
        <color=#7e101a>return</color> helper.<color=#045FB4>twoDimByteArrayToOne</color>(w);
    }
}