<color=#7401DF>package</color> <color=#045FB4>main.java.components.graph.algorithms.index</color>;

<color=#7401DF>import</color> <color=#045FB4>main.java.components.graph.algorithms.IdxInterface</color>;

<color=#7e101a>public</color> <color=#7e101a>class</color> <color=#355c08>IndexBRG</color> <color=#7e101a>implements</color> IdxInterface {

    @Override
    <color=#7e101a>public</color> <color=#8000FF>int</color> getIndex(<color=#8000FF>int</color> x, <color=#8000FF>int</color> g) {
        <color=#8000FF>boolean</color>[] bool1 = <color=#7e101a>new</color> <color=#8000FF>boolean</color>[g];
        <color=#8000FF>boolean</color>[] bool2 = <color=#7e101a>new</color> <color=#8000FF>boolean</color>[g];
        
        String tmp = Integer.<color=#045FB4>toBinaryString</color>(x);
        <color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i < tmp.<color=#045FB4>length</color>(); ++i ) {
            <color=#7e101a>if</color>(tmp.<color=#045FB4>charAt</color>(i)=='1'){
                bool1[i+g-tmp.<color=#045FB4>length</color>()] = true;
            }
        }
        <color=#8000FF>int</color> b1size = bool1.<color=#045FB4>length</color>;
        <color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i < b1size; ++i){
            <color=#8000FF>boolean</color> b = bool1[i];
            <color=#7e101a>if</color>(b){
                bool2[g-1-i] = true;
            }
        }
        
        <color=#8000FF>int</color> n = 0;
        <color=#8000FF>int</color> l = bool2.<color=#045FB4>length</color>;
        <color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i < l; ++i) {
            n = (n << 1) + (bool2[i] ? 1 : 0);
        }
        <color=#7e101a>return</color> n;
    }
    
    @Override
    <color=#7e101a>public</color> <color=#8000FF>long</color> getIndex(<color=#8000FF>long</color> x, <color=#8000FF>int</color> g) {
        <color=#8000FF>boolean</color>[] bool1 = <color=#7e101a>new</color> <color=#8000FF>boolean</color>[g];
        <color=#8000FF>boolean</color>[] bool2 = <color=#7e101a>new</color> <color=#8000FF>boolean</color>[g];
        
        String tmp = Long.<color=#045FB4>toBinaryString</color>(x);
        <color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i < tmp.<color=#045FB4>length</color>(); ++i ) {
            <color=#7e101a>if</color>(tmp.<color=#045FB4>charAt</color>(i)=='1'){
                bool1[i+g-tmp.<color=#045FB4>length</color>()] = true;
            }
        }
        <color=#8000FF>int</color> b1size = bool1.<color=#045FB4>length</color>;
        <color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i < b1size; ++i){
            <color=#8000FF>boolean</color> b = bool1[i];
            <color=#7e101a>if</color>(b){
                bool2[g-1-i] = true;
            }
        }
        
        <color=#8000FF>long</color> n = 0;
        <color=#8000FF>long</color> l = bool2.<color=#045FB4>length</color>;
        <color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i < l; ++i) {
            n = (n << 1) + (bool2[i] ? 1 : 0);
        }
        <color=#7e101a>return</color> n;
    }

    @Override
    <color=#7e101a>public</color> <color=#8000FF>int</color> getIndex(<color=#8000FF>int</color> i, <color=#8000FF>int</color> j, <color=#8000FF>int</color> g) {
        <color=#7e101a>return</color> -1;
    }

    @Override
    <color=#7e101a>public</color> <color=#8000FF>long</color> getIndex(<color=#8000FF>long</color> i, <color=#8000FF>long</color> j, <color=#8000FF>int</color> g) {
        <color=#7e101a>return</color> -1;
    }
}