<color=#7401DF>package</color> <color=#045FB4>main.java.components.hash.algorithms</color>;

<color=#434343>/*</color>
<color=#434343> * Round-reduced Blake2b as H' for Password Hashing Scheme Catena </color>
<color=#434343> * Copyright (C) 2015  Axel von dem Bruch</color>
<color=#434343> * </color>
<color=#434343> * This library is free software; you can redistribute it and/or</color>
<color=#434343> * modify it under the terms of the GNU Lesser General Public</color>
<color=#434343> * License as published by the Free Software Foundation; either</color>
<color=#434343> * version 2.1 of the License, or (at your option) any later version.</color>
<color=#434343> * </color>
<color=#434343> * This library is distributed in the hope that it will be useful,</color>
<color=#434343> * but WITHOUT ANY WARRANTY; without even the implied warranty of</color>
<color=#434343> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</color>
<color=#434343> * Lesser General Public License for more details.</color>
<color=#434343> * </color>
<color=#434343> * See:  https://www.gnu.org/licenses/lgpl-2.1.html</color>
<color=#434343> * You should have received a copy of the GNU General Public License </color>
<color=#434343> * along with this library.</color>
<color=#434343> */</color>

<color=#7401DF>import</color> <color=#045FB4>java.util.Arrays</color>;

<color=#7401DF>import</color> <color=#045FB4>main.java.Helper</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.hash.HashInterface</color>;


<color=#7e101a>public</color> <color=#7e101a>class</color> <color=#355c08>Blake2b_1</color> <color=#7e101a>implements</color> HashInterface {
    
    Helper helper = <color=#7e101a>new</color> Helper();
    
    <color=#7e101a>private</color> <color=#7e101a>final</color> <color=#7e101a>static</color> <color=#8000FF>long</color> blake2b_IV[] = 
            <color=#434343>// Blake2b Initialization Vector: </color>
            <color=#434343>// Produced from the square root of primes 2, 3, 5, 7, 11, 13, 17, 19.</color>
            <color=#434343>// The same as SHA-512 IV.</color>
        {
          0x6a09e667f3bcc908L, 0xbb67ae8584caa73bL, 
          0x3c6ef372fe94f82bL, 0xa54ff53a5f1d36f1L,
          0x510e527fade682d1L, 0x9b05688c2b3e6c1fL,
          0x1f83d9abfb41bd6bL, 0x5be0cd19137e2179L 
        };
    <color=#7e101a>private</color> <color=#7e101a>final</color> <color=#7e101a>static</color> <color=#8000FF>long</color> blake2b_IV0 = 0x6a09e667f2bdc948L;
    
    <color=#7e101a>private</color> <color=#7e101a>final</color> <color=#7e101a>static</color> <color=#8000FF>byte</color>[][] blake2b_sigma = <color=#434343>// Message word permutations</color>
        {
          {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15 } ,
          { 14, 10,  4,  8,  9, 15, 13,  6,  1, 12,  0,  2, 11,  7,  5,  3 } ,
          { 11,  8, 12,  0,  5,  2, 15, 13, 10, 14,  3,  6,  7,  1,  9,  4 } ,
          {  7,  9,  3,  1, 13, 12, 11, 14,  2,  6,  5, 10,  4,  0, 15,  8 } ,
          {  9,  0,  5,  7,  2,  4, 10, 15, 14,  1, 11, 12,  6,  8,  3, 13 } ,
          {  2, 12,  6, 10,  0, 11,  8,  3,  4, 13,  7,  5, 15, 14,  1,  9 } ,
          { 12,  5,  1, 15, 14, 13,  4, 10,  0,  7,  6,  3,  9,  2,  8, 11 } ,
          { 13, 11,  7, 14, 12,  1,  3,  9,  5,  0, 15,  4,  8,  6,  2, 10 } ,
          {  6, 15, 14,  9, 11,  3,  0,  8, 12,  2, 13,  7,  1,  4, 10,  5 } ,
          { 10,  2,  8,  4,  7,  6,  1,  5, 15, 11,  9, 14,  3, 12, 13 , 0 } ,
          {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15 } ,
          { 14, 10,  4,  8,  9, 15, 13,  6,  1, 12,  0,  2, 11,  7,  5,  3 }
        };
    
    <color=#7e101a>private</color> <color=#7e101a>final</color> <color=#7e101a>static</color> <color=#8000FF>int</color> BLOCK_LENGTH_BYTES = 128;<color=#434343>// bytes</color>
    <color=#7e101a>private</color> <color=#7e101a>final</color> <color=#7e101a>static</color> <color=#8000FF>int</color> H_LEN = 64; 

    <color=#7e101a>private</color> <color=#8000FF>int</color> vIndex = 0; <color=#434343>// used as vertex index for Catena</color>

    <color=#7e101a>private</color> <color=#8000FF>byte</color>[] buffer = null;<color=#434343>//new byte[BLOCK_LENGTH_BYTES];</color>
    <color=#7e101a>private</color> <color=#8000FF>boolean</color> halfBuffer = false;

    <color=#7e101a>private</color> <color=#8000FF>long</color>[] internalState = <color=#7e101a>new</color> <color=#8000FF>long</color>[16]; <color=#434343>// In the Blake2b paper it is called: v</color>
    <color=#7e101a>private</color> <color=#8000FF>long</color>[] chainValue = null; <color=#434343>// state vector, in the Blake2b paper it is called: h</color>
    
    <color=#7e101a>private</color> <color=#8000FF>long</color> t0 = 0L; <color=#434343>// holds last significant bits, counter (counts bytes)</color>
    <color=#7e101a>private</color> <color=#8000FF>long</color> t1 = 0L; <color=#434343>// counter: Length up to 2^128 are supported</color>
    
    <color=#7e101a>public</color> Blake2b_1() {
        buffer = <color=#7e101a>new</color> <color=#8000FF>byte</color>[BLOCK_LENGTH_BYTES];
        init();
    }

    <color=#434343>// initialize chainValue</color>
    <color=#7e101a>private</color> <color=#8000FF>void</color> init() {
        
        <color=#7e101a>if</color> (chainValue == null){
            chainValue = <color=#7e101a>new</color> <color=#8000FF>long</color>[8];
            chainValue[0] = blake2b_IV0;
            chainValue[1] = blake2b_IV[1];
            chainValue[2] = blake2b_IV[2];      
            chainValue[3] = blake2b_IV[3];          
            chainValue[4] = blake2b_IV[4];
            chainValue[5] = blake2b_IV[5];          
            chainValue[6] = blake2b_IV[6];
            chainValue[7] = blake2b_IV[7];
        }
    }
    
    <color=#7e101a>private</color> <color=#8000FF>void</color> initializeInternalState(){
        
        <color=#434343>// initialize v:</color>
        System.<color=#045FB4>arraycopy</color>(chainValue, 0, internalState, 0, chainValue.<color=#045FB4>length</color>);
        System.<color=#045FB4>arraycopy</color>(blake2b_IV, 0, internalState, chainValue.<color=#045FB4>length</color>, 4);
        internalState[12] = t0 ^ blake2b_IV[4];
        internalState[13] = t1 ^ blake2b_IV[5];
        internalState[14] = 0xFFFFFFFFFFFFFFFFL ^ blake2b_IV[6];
        internalState[15] = blake2b_IV[7];
    }
    
    <color=#434343>/**</color>
<color=#434343>     * Processes the given message</color>
<color=#434343>     * </color>
<color=#434343>     * @param message</color>
<color=#434343>     *            byte array containing the message to be processed</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#8000FF>void</color> update(<color=#8000FF>byte</color>[] message) {
<color=#434343>//      System.out.println("B2B1 mess.l: " + message.length);</color>
<color=#434343>//      System.out.println("input b2b1: " + helper.bytes2hex(message));</color>
        
        <color=#7e101a>if</color> (message.<color=#045FB4>length</color> == 128){
            update(Arrays.<color=#045FB4>copyOfRange</color>(message, 0, 64), 0, H_LEN);
            update(Arrays.<color=#045FB4>copyOfRange</color>(message, 64, 128), 0, H_LEN);
        } <color=#7e101a>else</color> {
            update(message, 0, H_LEN);
        }
    }
    
    <color=#434343>/**</color>
<color=#434343>     * Processes one single byte</color>
<color=#434343>     * </color>
<color=#434343>     * @param b</color>
<color=#434343>     *            single byte to be processed</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#8000FF>void</color> update(<color=#8000FF>byte</color> b) {}
    
    <color=#434343>/**</color>
<color=#434343>     * Processes a number of bytes of the given message </color>
<color=#434343>     * from a start position up to offset+len</color>
<color=#434343>     * </color>
<color=#434343>     * @param message</color>
<color=#434343>     *            byte array containing the message to be processed</color>
<color=#434343>     * @param offset</color>
<color=#434343>     *            position of message to start from</color>
<color=#434343>     * @param len</color>
<color=#434343>     *            number of bytes to be processed.</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#8000FF>void</color> update(<color=#8000FF>byte</color>[] message, <color=#8000FF>int</color> offset, <color=#8000FF>int</color> len) {

        <color=#7e101a>if</color> (!halfBuffer){
            System.<color=#045FB4>arraycopy</color>(message,  offset, buffer, 0, H_LEN);
            halfBuffer = true;          
        } <color=#7e101a>else</color> {
            System.<color=#045FB4>arraycopy</color>(message,  offset, buffer, H_LEN, H_LEN);           
            halfBuffer = false;
        }
    }
    
    <color=#434343>/**</color>
<color=#434343>     * Calculates the final digest value atus</color>
<color=#434343>     */</color> 
    <color=#7e101a>public</color> <color=#8000FF>byte</color>[] doFinal() {
        <color=#8000FF>byte</color>[] out = <color=#7e101a>new</color> <color=#8000FF>byte</color>[H_LEN];
        t0 += BLOCK_LENGTH_BYTES;
        <color=#434343>// simplified because increment is always 128</color>
        <color=#7e101a>if</color> ( (t0 == 0)){
            t1++;
        }
<color=#434343>//      Helper h = new Helper();</color>
<color=#434343>//      System.out.println("Buffer: " + h.bytes2hex(buffer));</color>
        
        compress(buffer, 0);
        halfBuffer = false;
        
        <color=#434343>// increment counter by one</color>
        vIndex = (vIndex+1) % 12;

        <color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i < chainValue.<color=#045FB4>length</color>; i++) {
            System.<color=#045FB4>arraycopy</color>(long2bytes(chainValue[i]), 0, out, i * 8, 8);
        }
        <color=#7e101a>return</color> out;
    }
    
    <color=#434343>/**</color>
<color=#434343>     * Reset the hash function to use again after doFinal().</color>
<color=#434343>     * This will not work for keyed digests. </color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#8000FF>void</color> reset() {
<color=#434343>//      System.out.println("--- RESET B2B1---");</color>
        halfBuffer = false;
        t0 = 0L;
        t1 = 0L;
        Arrays.<color=#045FB4>fill</color>(buffer,  (<color=#8000FF>byte</color>) 0);
        Arrays.<color=#045FB4>fill</color>(chainValue, 0L);    
        Arrays.<color=#045FB4>fill</color>(internalState, 0L);
        chainValue = null;
        
        vIndex = 0;
        
        init();
    }
    
    <color=#7e101a>private</color> <color=#8000FF>void</color> compress(<color=#8000FF>byte</color>[] message, <color=#8000FF>int</color> messagePos) {

        initializeInternalState();
        
        <color=#8000FF>long</color>[] m = <color=#7e101a>new</color> <color=#8000FF>long</color>[16];
        <color=#7e101a>for</color> (<color=#8000FF>int</color> j = 0; j < 16; j++) {
            m[j] = bytes2long(message, messagePos + j*8);
        }
        <color=#434343>// single round: Catenas H'</color>
        <color=#434343>// G apply to columns of internalState:m[blake2b_sigma[round][2 * blockPos]] /+1</color>
        G(m[blake2b_sigma[vIndex][0]], m[blake2b_sigma[vIndex][1]], 0,4,8,12); 
        G(m[blake2b_sigma[vIndex][2]], m[blake2b_sigma[vIndex][3]], 1,5,9,13); 
        G(m[blake2b_sigma[vIndex][4]], m[blake2b_sigma[vIndex][5]], 2,6,10,14); 
        G(m[blake2b_sigma[vIndex][6]], m[blake2b_sigma[vIndex][7]], 3,7,11,15); 
        <color=#434343>// G apply to diagonals of internalState:</color>
        G(m[blake2b_sigma[vIndex][8]], m[blake2b_sigma[vIndex][9]], 0,5,10,15); 
        G(m[blake2b_sigma[vIndex][10]], m[blake2b_sigma[vIndex][11]], 1,6,11,12); 
        G(m[blake2b_sigma[vIndex][12]], m[blake2b_sigma[vIndex][13]], 2,7,8,13); 
        G(m[blake2b_sigma[vIndex][14]], m[blake2b_sigma[vIndex][15]], 3,4,9,14); 
        
        <color=#434343>// update chain values: </color>
        <color=#7e101a>for</color>( <color=#8000FF>int</color> offset = 0; offset < 8; offset++ ) {
            chainValue[offset] = chainValue[offset] ^ internalState[offset] ^ internalState[offset + 8];    
        }
    }
    

    <color=#7e101a>private</color> <color=#8000FF>void</color> G(<color=#8000FF>long</color> m1, <color=#8000FF>long</color> m2, <color=#8000FF>int</color> posA, <color=#8000FF>int</color> posB, <color=#8000FF>int</color> posC, <color=#8000FF>int</color> posD) {

        internalState[posA] = internalState[posA] + internalState[posB] + m1; 
        internalState[posD] = rotr64(internalState[posD] ^ internalState[posA], 32); 
        internalState[posC] = internalState[posC] + internalState[posD]; 
        internalState[posB] = rotr64(internalState[posB] ^ internalState[posC], 24); <color=#434343>// replaces 25 of BLAKE</color>
        internalState[posA] = internalState[posA] + internalState[posB] + m2; 
        internalState[posD] = rotr64(internalState[posD] ^ internalState[posA], 16); 
        internalState[posC] = internalState[posC] + internalState[posD]; 
        internalState[posB] = rotr64(internalState[posB] ^ internalState[posC], 63); <color=#434343>// replaces 11 of BLAKE</color>
    }
    
    <color=#7e101a>private</color> <color=#8000FF>long</color> rotr64(<color=#8000FF>long</color> x, <color=#8000FF>int</color> rot) {
        <color=#7e101a>return</color> x >>> rot | (x << (64 - rot));
    }
    

    <color=#7e101a>public</color> String getName(){
        <color=#7e101a>return</color> "Catena_Blake2b_1";
    }
    <color=#434343>/**</color>
<color=#434343>     * This function is used for password hashing scheme</color>
<color=#434343>     * Catenas round-reduced version H'</color>
<color=#434343>     * </color>
<color=#434343>     * @param _vIndex   some index</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#8000FF>void</color> setVertexIndex(<color=#8000FF>int</color> _vIndex) {
        
        vIndex = _vIndex % 12;
    }
    <color=#434343>// convert one long value in byte array</color>
    <color=#434343>// little-endian byte order!</color>
    <color=#7e101a>public</color> <color=#7e101a>final</color> <color=#7e101a>static</color> <color=#8000FF>byte</color>[] long2bytes(<color=#8000FF>long</color> longValue) {
        <color=#7e101a>return</color> <color=#7e101a>new</color> <color=#8000FF>byte</color>[] {         
            (<color=#8000FF>byte</color>) longValue,
            (<color=#8000FF>byte</color>) (longValue >> 8),
            (<color=#8000FF>byte</color>) (longValue >> 16),
            (<color=#8000FF>byte</color>) (longValue >> 24),
            (<color=#8000FF>byte</color>) (longValue >> 32),
            (<color=#8000FF>byte</color>) (longValue >> 40),
            (<color=#8000FF>byte</color>) (longValue >> 48),
            (<color=#8000FF>byte</color>) (longValue >> 56)};
    }
    <color=#434343>// little-endian byte order!</color>
    <color=#7e101a>public</color> <color=#7e101a>final</color> <color=#7e101a>static</color> <color=#8000FF>long</color> bytes2long(<color=#8000FF>byte</color>[] byteArray, <color=#8000FF>int</color> offset) {
          
          <color=#7e101a>return</color> (                
                  ((<color=#8000FF>long</color>) byteArray[offset] & 0xFF ) |
                  (((<color=#8000FF>long</color>) byteArray[offset + 1] & 0xFF ) << 8) |
                  (((<color=#8000FF>long</color>) byteArray[offset + 2] & 0xFF ) << 16) |
                  (((<color=#8000FF>long</color>) byteArray[offset + 3] & 0xFF ) << 24) |
                  (((<color=#8000FF>long</color>) byteArray[offset + 4] & 0xFF ) << 32) |
                  (((<color=#8000FF>long</color>) byteArray[offset + 5] & 0xFF ) << 40) |
                  (((<color=#8000FF>long</color>) byteArray[offset + 6] & 0xFF ) << 48) |
                  (((<color=#8000FF>long</color>) byteArray[offset + 7] & 0xFF ) << 56) ) ;                                  
    }


    <color=#7e101a>public</color> <color=#8000FF>int</color> getOutputSize() {
        <color=#7e101a>return</color> H_LEN;
    }   
}