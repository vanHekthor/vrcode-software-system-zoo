<color=#7401DF>package</color> <color=#045FB4>main.java.components.hash.algorithms</color>;

<color=#7401DF>import</color> <color=#045FB4>java.util.Arrays</color>;

<color=#7401DF>import</color> <color=#045FB4>main.java.Helper</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.hash.HashInterface</color>;

<color=#7e101a>public</color> <color=#7e101a>class</color> <color=#355c08>Argon2CF</color> <color=#7e101a>implements</color> HashInterface {

    Helper helper = <color=#7e101a>new</color> Helper();
    
    <color=#7e101a>private</color> String name = "Argon2 hash function.";
    <color=#7e101a>private</color> <color=#8000FF>int</color> anzByte = 1024;
    <color=#434343>// use GL if 1 else use GB</color>
    <color=#7e101a>private</color> <color=#8000FF>boolean</color> _useGL;
    
    <color=#7e101a>private</color> <color=#8000FF>long</color>[] _v = <color=#7e101a>new</color> <color=#8000FF>long</color>[128];
    
    <color=#7e101a>private</color> <color=#8000FF>byte</color>[] _z;
    
    <color=#7e101a>public</color> Argon2CF (<color=#8000FF>boolean</color> useGL){
        _useGL = useGL;
    }
    
    <color=#7e101a>public</color> <color=#8000FF>void</color> update(<color=#8000FF>byte</color>[] message) {

        <color=#7e101a>if</color> (message.<color=#045FB4>length</color> != 2048){
            <color=#7e101a>return</color>;
        }
        
        <color=#8000FF>byte</color> [] x = <color=#7e101a>new</color> <color=#8000FF>byte</color>[anzByte];
        <color=#8000FF>byte</color> [] y = <color=#7e101a>new</color> <color=#8000FF>byte</color>[anzByte];
        
        System.<color=#045FB4>arraycopy</color>(message, 0, x, 0, anzByte);
        System.<color=#045FB4>arraycopy</color>(message, 1024, y, 0, anzByte);
        
        <color=#8000FF>byte</color> [] R = helper.<color=#045FB4>xor</color>(x, y);
        <color=#8000FF>byte</color> [] Q = <color=#7e101a>new</color> <color=#8000FF>byte</color>[R.<color=#045FB4>length</color>];
        
        <color=#434343>// updating rows</color>
        pWrapper(Arrays.<color=#045FB4>copyOfRange</color>(R, 0,   128), 0);
        pWrapper(Arrays.<color=#045FB4>copyOfRange</color>(R, 128, 256), 1);
        pWrapper(Arrays.<color=#045FB4>copyOfRange</color>(R, 256, 384), 2);
        pWrapper(Arrays.<color=#045FB4>copyOfRange</color>(R, 384, 512), 3);
        pWrapper(Arrays.<color=#045FB4>copyOfRange</color>(R, 512, 640), 4);
        pWrapper(Arrays.<color=#045FB4>copyOfRange</color>(R, 640, 768), 5);
        pWrapper(Arrays.<color=#045FB4>copyOfRange</color>(R, 768, 896), 6);
        pWrapper(Arrays.<color=#045FB4>copyOfRange</color>(R, 896, 1024), 7);
        
        
        <color=#434343>// inverting elements of array _v</color>
<color=#434343>//      for (int i = 0; i<_v.length; ++i){</color>
<color=#434343>//          byte[] tmp = long2bytes(_v[i]);</color>
<color=#434343>//          </color>
<color=#434343>//          for (int k = 0; k < tmp.length/2; k++) {</color>
<color=#434343>//              byte temp = tmp[k];</color>
<color=#434343>//              tmp[k] = tmp[tmp.length-(1+k)];</color>
<color=#434343>//              tmp[tmp.length-(1+k)] = temp;</color>
<color=#434343>//          }</color>
<color=#434343>//          _v[i] = bytes2long(tmp, 0);</color>
<color=#434343>//      }</color>
        
        <color=#434343>// updating columns</color>
        <color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i<=7; ++i){
            <color=#8000FF>int</color> i0 = i*2;
            <color=#8000FF>int</color> i1 = i0+16;
            <color=#8000FF>int</color> i2 = i1+16;
            <color=#8000FF>int</color> i3 = i2+16;
            <color=#8000FF>int</color> i4 = i3+16;
            <color=#8000FF>int</color> i5 = i4+16;
            <color=#8000FF>int</color> i6 = i5+16;
            <color=#8000FF>int</color> i7 = i6+16;
            
            p(i0, i1, i2, i3, i4, i5, i6, i7);
        }
        
        <color=#434343>// inverting elements of array _v</color>
<color=#434343>//      for (int i = 0; i<_v.length; ++i){</color>
<color=#434343>//          byte[] tmp = long2bytes(_v[i]);</color>
<color=#434343>//          </color>
<color=#434343>//          for (int k = 0; k < tmp.length/2; k++) {</color>
<color=#434343>//              byte temp = tmp[k];</color>
<color=#434343>//              tmp[k] = tmp[tmp.length-(1+k)];</color>
<color=#434343>//              tmp[tmp.length-(1+k)] = temp;</color>
<color=#434343>//          }</color>
<color=#434343>//          _v[i] = bytes2long(tmp, 0);</color>
<color=#434343>//      }</color>
        
        <color=#7e101a>for</color> (<color=#8000FF>int</color> i=0; i<_v.<color=#045FB4>length</color>; ++i){
            <color=#8000FF>byte</color>[] tmp = long2bytes(_v[i]);
            System.<color=#045FB4>arraycopy</color>(tmp, 0, Q, i*8, 8);
        }
                
        _z = helper.<color=#045FB4>xor</color>(R, Q);
    }

    <color=#7e101a>private</color> <color=#8000FF>void</color> p(<color=#8000FF>int</color> i0, <color=#8000FF>int</color> i1, <color=#8000FF>int</color> i2, <color=#8000FF>int</color> i3, <color=#8000FF>int</color> i4, <color=#8000FF>int</color> i5, <color=#8000FF>int</color> i6, <color=#8000FF>int</color> i7){
        
        <color=#7e101a>if</color>(_useGL){
            GL(i0,   i2,   i4,   i6);
            GL(i0+1, i2+1, i4+1, i6+1);
            GL(i1,   i3,   i5,   i7);
            GL(i1+1, i3+1, i5+1, i7+1);
            GL(i0,   i2+1, i5,   i7+1);
            GL(i0+1, i3,   i5+1, i6);
            GL(i1,   i3+1, i4,   i6+1);
            GL(i1+1, i2,   i4+1, i7);
        } <color=#7e101a>else</color> {
            GB(i0,   i2,   i4,   i6);
            GB(i0+1, i2+1, i4+1, i6+1);
            GB(i1,   i3,   i5,   i7);
            GB(i1+1, i3+1, i5+1, i7+1);
            GB(i0,   i2+1, i5,   i7+1);
            GB(i0+1, i3,   i5+1, i6);
            GB(i1,   i3+1, i4,   i6+1);
            GB(i1+1, i2,   i4+1, i7);
        }
        
    }

    <color=#7e101a>private</color> <color=#8000FF>void</color> pWrapper(<color=#8000FF>byte</color>[] vIn, <color=#8000FF>int</color> idx){
        pAndInit(Arrays.<color=#045FB4>copyOfRange</color>(vIn, 0, 16), Arrays.<color=#045FB4>copyOfRange</color>(vIn, 16, 32), 
                Arrays.<color=#045FB4>copyOfRange</color>(vIn, 32, 48), Arrays.<color=#045FB4>copyOfRange</color>(vIn, 48, 64), 
                Arrays.<color=#045FB4>copyOfRange</color>(vIn, 64, 80), Arrays.<color=#045FB4>copyOfRange</color>(vIn, 80, 96), 
                Arrays.<color=#045FB4>copyOfRange</color>(vIn, 96, 112), Arrays.<color=#045FB4>copyOfRange</color>(vIn, 112, 128), 
                idx);
    }
    
    <color=#7e101a>private</color> <color=#8000FF>void</color> pAndInit(<color=#8000FF>byte</color>[] p1, <color=#8000FF>byte</color>[] p2, <color=#8000FF>byte</color>[] p3, <color=#8000FF>byte</color>[] p4, <color=#8000FF>byte</color>[] p5, <color=#8000FF>byte</color>[] p6, <color=#8000FF>byte</color>[] p7, <color=#8000FF>byte</color>[] p8,
            <color=#8000FF>int</color> idx){
        
        <color=#434343>// initialize v (global array)</color>
        _v[0+(idx*16)] = bytes2long(Arrays.<color=#045FB4>copyOfRange</color>(p1, 0, 8),0);
        _v[1+(idx*16)] = bytes2long(Arrays.<color=#045FB4>copyOfRange</color>(p1, 8, 16),0);
        
        _v[2+(idx*16)] = bytes2long(Arrays.<color=#045FB4>copyOfRange</color>(p2, 0, 8),0);
        _v[3+(idx*16)] = bytes2long(Arrays.<color=#045FB4>copyOfRange</color>(p2, 8, 16),0);
        
        _v[4+(idx*16)] = bytes2long(Arrays.<color=#045FB4>copyOfRange</color>(p3, 0, 8),0);
        _v[5+(idx*16)] = bytes2long(Arrays.<color=#045FB4>copyOfRange</color>(p3, 8, 16),0);
        
        _v[6+(idx*16)] = bytes2long(Arrays.<color=#045FB4>copyOfRange</color>(p4, 0, 8),0);
        _v[7+(idx*16)] = bytes2long(Arrays.<color=#045FB4>copyOfRange</color>(p4, 8, 16),0);
        
        _v[8+(idx*16)] = bytes2long(Arrays.<color=#045FB4>copyOfRange</color>(p5, 0, 8),0);
        _v[9+(idx*16)] = bytes2long(Arrays.<color=#045FB4>copyOfRange</color>(p5, 8, 16),0);
        
        _v[10+(idx*16)] = bytes2long(Arrays.<color=#045FB4>copyOfRange</color>(p6, 0, 8),0);
        _v[11+(idx*16)] = bytes2long(Arrays.<color=#045FB4>copyOfRange</color>(p6, 8, 16),0);
        
        _v[12+(idx*16)] = bytes2long(Arrays.<color=#045FB4>copyOfRange</color>(p7, 0, 8),0);
        _v[13+(idx*16)] = bytes2long(Arrays.<color=#045FB4>copyOfRange</color>(p7, 8, 16),0);
        
        _v[14+(idx*16)] = bytes2long(Arrays.<color=#045FB4>copyOfRange</color>(p8, 0, 8),0);
        _v[15+(idx*16)] = bytes2long(Arrays.<color=#045FB4>copyOfRange</color>(p8, 8, 16),0);
            
        <color=#7e101a>if</color>(_useGL){
            GL(0+(idx*16), 4+(idx*16), 8+(idx*16), 12+(idx*16));
            GL(1+(idx*16), 5+(idx*16), 9+(idx*16), 13+(idx*16));
            GL(2+(idx*16), 6+(idx*16), 10+(idx*16), 14+(idx*16));
            GL(3+(idx*16), 7+(idx*16), 11+(idx*16), 15+(idx*16));
            GL(0+(idx*16), 5+(idx*16), 10+(idx*16), 15+(idx*16));
            GL(1+(idx*16), 6+(idx*16), 11+(idx*16), 12+(idx*16));
            GL(2+(idx*16), 7+(idx*16), 8+(idx*16), 13+(idx*16));
            GL(3+(idx*16), 4+(idx*16), 9+(idx*16), 14+(idx*16));
        } <color=#7e101a>else</color> {
            GB(0+(idx*16), 4+(idx*16), 8+(idx*16), 12+(idx*16));
            GB(1+(idx*16), 5+(idx*16), 9+(idx*16), 13+(idx*16));
            GB(2+(idx*16), 6+(idx*16), 10+(idx*16), 14+(idx*16));
            GB(3+(idx*16), 7+(idx*16), 11+(idx*16), 15+(idx*16));
            GB(0+(idx*16), 5+(idx*16), 10+(idx*16), 15+(idx*16));
            GB(1+(idx*16), 6+(idx*16), 11+(idx*16), 12+(idx*16));
            GB(2+(idx*16), 7+(idx*16), 8+(idx*16), 13+(idx*16));
            GB(3+(idx*16), 4+(idx*16), 9+(idx*16), 14+(idx*16));
        }
    }

    <color=#7e101a>public</color> <color=#8000FF>byte</color>[] doFinal() {
        <color=#7e101a>return</color> _z;
    }
    
    <color=#7e101a>private</color> <color=#8000FF>void</color> GL(<color=#8000FF>int</color> posA, <color=#8000FF>int</color> posB, <color=#8000FF>int</color> posC, <color=#8000FF>int</color> posD) {

        _v[posA] = _v[posA] + _v[posB];
        _v[posD] = rotr64(_v[posD] ^ _v[posA], 32); 
        _v[posC] = _v[posC] + _v[posD]; 
        _v[posB] = rotr64(_v[posB] ^ _v[posC], 24); <color=#434343>// replaces 25 of BLAKE</color>
        _v[posA] = _v[posA] + _v[posB]; 
        _v[posD] = rotr64(_v[posD] ^ _v[posA], 16); 
        _v[posC] = _v[posC] + _v[posD]; 
        _v[posB] = rotr64(_v[posB] ^ _v[posC], 63); <color=#434343>// replaces 11 of BLAKE</color>
    }

    <color=#7e101a>private</color> <color=#8000FF>void</color> GB(<color=#8000FF>int</color> posA, <color=#8000FF>int</color> posB, <color=#8000FF>int</color> posC, <color=#8000FF>int</color> posD) {

        _v[posA] = _v[posA] + _v[posB] + 
                2 * (_v[posA] & 0x00000000FFFFFFFFL) 
                * (_v[posB] & 0x00000000FFFFFFFFL);
        _v[posD] = rotr64(_v[posD] ^ _v[posA], 32); 
        _v[posC] = _v[posC] + _v[posD] + 
                2 * (_v[posC] & 0x00000000FFFFFFFFL) 
                * (_v[posD] & 0x00000000FFFFFFFFL); 
        _v[posB] = rotr64(_v[posB] ^ _v[posC], 24); <color=#434343>// replaces 25 of BLAKE</color>
        _v[posA] = _v[posA] + _v[posB] + 
                2 * (_v[posA] & 0x00000000FFFFFFFFL) 
                * (_v[posB] & 0x00000000FFFFFFFFL); 
        _v[posD] = rotr64(_v[posD] ^ _v[posA], 16); 
        _v[posC] = _v[posC] + _v[posD] + 
                2 * (_v[posC] & 0x00000000FFFFFFFFL) 
                * (_v[posD] & 0x00000000FFFFFFFFL); 
        _v[posB] = rotr64(_v[posB] ^ _v[posC], 63); <color=#434343>// replaces 11 of BLAKE</color>
    }
    
    <color=#7e101a>private</color> <color=#8000FF>long</color> rotr64(<color=#8000FF>long</color> x, <color=#8000FF>int</color> rot) {
        <color=#7e101a>return</color> x >>> rot | (x << (64 - rot));
    }
    
    <color=#434343>// convert one long value in byte array</color>
    <color=#434343>// little-endian byte order!</color>
    <color=#7e101a>private</color> <color=#7e101a>final</color> <color=#7e101a>static</color> <color=#8000FF>byte</color>[] long2bytes(<color=#8000FF>long</color> longValue) {
        <color=#7e101a>return</color> <color=#7e101a>new</color> <color=#8000FF>byte</color>[] {         
            (<color=#8000FF>byte</color>) longValue,
            (<color=#8000FF>byte</color>) (longValue >> 8),
            (<color=#8000FF>byte</color>) (longValue >> 16),
            (<color=#8000FF>byte</color>) (longValue >> 24),
            (<color=#8000FF>byte</color>) (longValue >> 32),
            (<color=#8000FF>byte</color>) (longValue >> 40),
            (<color=#8000FF>byte</color>) (longValue >> 48),
            (<color=#8000FF>byte</color>) (longValue >> 56)};
    }
    
    <color=#434343>// little-endian byte order!</color>
    <color=#7e101a>private</color> <color=#7e101a>final</color> <color=#7e101a>static</color> <color=#8000FF>long</color> bytes2long(<color=#8000FF>byte</color>[] byteArray, <color=#8000FF>int</color> offset) {
          
        <color=#7e101a>return</color> (
                ((<color=#8000FF>long</color>) byteArray[offset] & 0xFF ) |
                (((<color=#8000FF>long</color>) byteArray[offset + 1] & 0xFF ) << 8) |
                (((<color=#8000FF>long</color>) byteArray[offset + 2] & 0xFF ) << 16) |
                (((<color=#8000FF>long</color>) byteArray[offset + 3] & 0xFF ) << 24) |
                (((<color=#8000FF>long</color>) byteArray[offset + 4] & 0xFF ) << 32) |
                (((<color=#8000FF>long</color>) byteArray[offset + 5] & 0xFF ) << 40) |
                (((<color=#8000FF>long</color>) byteArray[offset + 6] & 0xFF ) << 48) |
                (((<color=#8000FF>long</color>) byteArray[offset + 7] & 0xFF ) << 56) ) ;
    }

    <color=#7e101a>public</color> <color=#8000FF>void</color> reset() {
        _v = <color=#7e101a>new</color> <color=#8000FF>long</color>[128];
    }
    
    <color=#7e101a>public</color> <color=#8000FF>void</color> update(<color=#8000FF>byte</color> b) {
        <color=#7e101a>return</color>;
    }

    <color=#7e101a>public</color> <color=#8000FF>void</color> update(<color=#8000FF>byte</color>[] message, <color=#8000FF>int</color> offset, <color=#8000FF>int</color> len) {
        <color=#7e101a>return</color>;
    }

    <color=#7e101a>public</color> <color=#8000FF>void</color> setVertexIndex(<color=#8000FF>int</color> r) {
        <color=#7e101a>return</color>;
    }

    <color=#7e101a>public</color> String getName() {
        <color=#7e101a>return</color> name;
    }

    <color=#7e101a>public</color> <color=#8000FF>int</color> getOutputSize() {
        <color=#7e101a>return</color> anzByte;
    }

}