<color=#7401DF>package</color> <color=#045FB4>main.java.components.hash.algorithms</color>;


<color=#434343>/*</color>
<color=#434343> * Hash Function Blake2b </color>
<color=#434343> * </color>
<color=#434343> * Copyright (C) 2015  Axel von dem Bruch</color>
<color=#434343> * </color>
<color=#434343> * This library is free software; you can redistribute it and/or</color>
<color=#434343> * modify it under the terms of the GNU Lesser General Public</color>
<color=#434343> * License as published by the Free Software Foundation; either</color>
<color=#434343> * version 2.1 of the License, or (at your option) any later version.</color>
<color=#434343> * </color>
<color=#434343> * This library is distributed in the hope that it will be useful,</color>
<color=#434343> * but WITHOUT ANY WARRANTY; without even the implied warranty of</color>
<color=#434343> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</color>
<color=#434343> * Lesser General Public License for more details.</color>
<color=#434343> * </color>
<color=#434343> * See:  https://www.gnu.org/licenses/lgpl-2.1.html</color>
<color=#434343> * You should have received a copy of the GNU General Public License </color>
<color=#434343> * along with this library.</color>
<color=#434343> * </color>
<color=#434343> * Note: A modified version of this class might be in future a part of </color>
<color=#434343> * Bouncy Castle Crypto API</color>
<color=#434343> * and will probably available under MIT-like license </color>
<color=#434343> */</color>


<color=#434343>/*  The BLAKE2 cryptographic hash function was designed by Jean-</color>
<color=#434343>   Philippe Aumasson, Samuel Neves, Zooko Wilcox-O'Hearn, and Christian</color>
<color=#434343>   Winnerlein.</color>
<color=#434343>   With a built-in keying mechanism BLAKE2 can be used instead of a HMAC construction.</color>
<color=#434343>   BLAKE2b is optimized for 64-bit platforms and produces digests of any size </color>
<color=#434343>   between 1 and 64 bytes.      </color>
<color=#434343>      Reference Implementation and Description can be found at: https://blake2.net/      </color>
<color=#434343>      Internet Draft: https://tools.ietf.org/html/draft-saarinen-blake2-02</color>
<color=#434343>      </color>
<color=#434343>   This implementation does not support the Tree Hashing Mode. </color>
<color=#434343>          </color>
<color=#434343>      </color>
<color=#434343>   Example code using this class:</color>
<color=#434343>      </color>
<color=#434343>      Blake2b b = new Blake2b(); // no key, no salt, no personalization</color>
<color=#434343>      b.update( anyByteArray1 );</color>
<color=#434343>      b.update( anyByteArray2 );</color>
<color=#434343>      byte[] hash = new byte[64];// full length of hash value</color>
<color=#434343>      b.doFinal(hash, 0); // result now holds the hash value (64 byte)</color>
<color=#434343>      </color>
<color=#434343>      Blake2b b2b = new Blake2b(); // no key, no salt, no personalization</color>
<color=#434343>      b2b2.update( anyByteArray );</color>
<color=#434343>      // store hash value in any byte array with length > 64 + pos</color>
<color=#434343>      b2b.doFinal(result, pos); // result now holds the hash value (64 byte) at position pos</color>
<color=#434343>      </color>
<color=#434343>      Blake2b b2bK = new Blake2b( anyKeyAsByteArray );// key length 0 - 64 </color>
<color=#434343>      b2bK.update( anyByteArray );</color>
<color=#434343>      byte[] resultK = new byte[64];// full length of hash value</color>
<color=#434343>      b2bK.doFinal(resultK, 0); // resultK now holds the hash value</color>
<color=#434343>      </color>
<color=#434343>      Blake2b b2bX = new Blake2b(</color>
<color=#434343>            anyKeyAsByteArray, // 0 - 64 Byte or null</color>
<color=#434343>            outputLength, // 1 - 64</color>
<color=#434343>            anySaltAsByteArray, // exactly 16 Byte or null</color>
<color=#434343>            anyPersonalizationAsByteArray); // exactly 16 Byte or null</color>
<color=#434343>      b2bX.update( anyByteArray );</color>
<color=#434343>      byte[] resultX = new byte[outputLength];</color>
<color=#434343>      b2bX.doFinal(resultX, 0); // resultX now holds the hash value    </color>
<color=#434343>*/</color>

<color=#7401DF>import</color> <color=#045FB4>java.util.Arrays</color>;

<color=#7401DF>import</color> <color=#045FB4>main.java.components.hash.HashInterface</color>;


<color=#7e101a>public</color> <color=#7e101a>class</color> <color=#355c08>Blake2b</color> <color=#7e101a>implements</color> HashInterface {
    
    <color=#7e101a>private</color> <color=#7e101a>final</color> <color=#7e101a>static</color> <color=#8000FF>long</color> [] blake2b_IV  = 
            <color=#434343>// Blake2b Initialization Vector: </color>
            <color=#434343>// Produced from the square root of primes 2, 3, 5, 7, 11, 13, 17, 19.</color>
            <color=#434343>// The same as SHA-512 IV.</color>
        {
          0x6a09e667f3bcc908L, 0xbb67ae8584caa73bL,
          0x3c6ef372fe94f82bL, 0xa54ff53a5f1d36f1L,
          0x510e527fade682d1L, 0x9b05688c2b3e6c1fL,
          0x1f83d9abfb41bd6bL, 0x5be0cd19137e2179L 
        };
    
    <color=#7e101a>private</color> <color=#7e101a>final</color> <color=#7e101a>static</color> <color=#8000FF>byte</color>[][] blake2b_sigma = <color=#434343>// Message word permutations</color>
        {
          {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15 } ,
          { 14, 10,  4,  8,  9, 15, 13,  6,  1, 12,  0,  2, 11,  7,  5,  3 } ,
          { 11,  8, 12,  0,  5,  2, 15, 13, 10, 14,  3,  6,  7,  1,  9,  4 } ,
          {  7,  9,  3,  1, 13, 12, 11, 14,  2,  6,  5, 10,  4,  0, 15,  8 } ,
          {  9,  0,  5,  7,  2,  4, 10, 15, 14,  1, 11, 12,  6,  8,  3, 13 } ,
          {  2, 12,  6, 10,  0, 11,  8,  3,  4, 13,  7,  5, 15, 14,  1,  9 } ,
          { 12,  5,  1, 15, 14, 13,  4, 10,  0,  7,  6,  3,  9,  2,  8, 11 } ,
          { 13, 11,  7, 14, 12,  1,  3,  9,  5,  0, 15,  4,  8,  6,  2, 10 } ,
          {  6, 15, 14,  9, 11,  3,  0,  8, 12,  2, 13,  7,  1,  4, 10,  5 } ,
          { 10,  2,  8,  4,  7,  6,  1,  5, 15, 11,  9, 14,  3, 12, 13 , 0 } ,
          {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15 } ,
          { 14, 10,  4,  8,  9, 15, 13,  6,  1, 12,  0,  2, 11,  7,  5,  3 }
        };

    <color=#7e101a>private</color> <color=#8000FF>int</color> rOUNDS = 12; <color=#434343>// to use for Catenas H'</color>
    <color=#7e101a>private</color> <color=#7e101a>final</color> <color=#7e101a>static</color> <color=#8000FF>int</color> BLOCK_LENGTH_BYTES = 128;<color=#434343>// bytes</color>
    
    <color=#434343>// General parameters:</color>
    <color=#7e101a>private</color> <color=#8000FF>int</color> digestLength = 64; <color=#434343>// 1- 64 bytes </color>
    <color=#7e101a>private</color> <color=#8000FF>int</color> keyLength = 0; <color=#434343>// 0 - 64 bytes for keyed hashing for MAC</color>
    <color=#7e101a>private</color> <color=#8000FF>byte</color>[] salt = null;<color=#434343>//new byte[16];</color>
    <color=#7e101a>private</color> <color=#8000FF>byte</color>[] personalization = null;<color=#434343>//new byte[16];</color>
    <color=#7e101a>public</color> <color=#8000FF>int</color> _vIndex;
    
    <color=#434343>// Tree hashing parameters: </color>
    <color=#434343>// Because this class does not implement the Tree Hashing Mode,</color>
    <color=#434343>// these parameters can be treated as constants (see init() function)</color>
<color=#434343>/*  private int fanout = 1; // 0-255</color>
<color=#434343>    private int depth = 1; // 1 - 255</color>
<color=#434343>    private int leafLength= 0; </color>
<color=#434343>    private long nodeOffset = 0L;</color>
<color=#434343>    private int nodeDepth = 0; </color>
<color=#434343>    private int innerHashLength = 0; </color>
<color=#434343>*/</color>  
    
    <color=#434343>// whenever this buffer overflows, it will be processed </color>
    <color=#434343>// in the compress() function. </color>
    <color=#434343>// For performance issues, long messages will not use this buffer. </color>
    <color=#7e101a>private</color> <color=#8000FF>byte</color>[] buffer = null;<color=#434343>//new byte[BLOCK_LENGTH_BYTES];</color>
    <color=#434343>// Position of last inserted byte:</color>
    <color=#7e101a>private</color> <color=#8000FF>int</color> bufferPos = 0;<color=#434343>// a value from 0 up to 128</color>

    <color=#7e101a>private</color> <color=#8000FF>long</color>[] internalState = <color=#7e101a>new</color> <color=#8000FF>long</color>[16]; <color=#434343>// In the Blake2b paper it is called: v</color>
    <color=#7e101a>private</color> <color=#8000FF>long</color>[] chainValue = null; <color=#434343>// state vector, in the Blake2b paper it is called: h</color>
    
    <color=#7e101a>private</color> <color=#8000FF>long</color> t0 = 0L; <color=#434343>// holds last significant bits, counter (counts bytes)</color>
    <color=#7e101a>private</color> <color=#8000FF>long</color> t1 = 0L; <color=#434343>// counter: Length up to 2^128 are supported</color>
    <color=#7e101a>private</color> <color=#8000FF>long</color> f0 = 0L; <color=#434343>// finalization flag, for last block: ~0L</color>


    <color=#434343>// For Tree Hashing Mode, not used here:</color>
<color=#434343>//  private long f1 = 0L; // finalization flag, for last node: ~0L </color>
    
    <color=#7e101a>public</color> Blake2b() {
        buffer = <color=#7e101a>new</color> <color=#8000FF>byte</color>[BLOCK_LENGTH_BYTES];
        keyLength = 0;
        digestLength = 64;
        init();
    }

    <color=#7e101a>public</color> Blake2b(<color=#8000FF>byte</color>[] key) {
        buffer = <color=#7e101a>new</color> <color=#8000FF>byte</color>[BLOCK_LENGTH_BYTES];
        <color=#7e101a>if</color> (key != null) {
            <color=#7e101a>if</color> (key.<color=#045FB4>length</color> > 64) {
                <color=#7e101a>throw</color> <color=#7e101a>new</color> IllegalArgumentException("Keys > 64 are not supported");
            }
            keyLength = key.<color=#045FB4>length</color>;
            System.<color=#045FB4>arraycopy</color>(key, 0, buffer, 0, key.<color=#045FB4>length</color>);
            bufferPos = BLOCK_LENGTH_BYTES; <color=#434343>// zero padding</color>
        } 
        digestLength = 64;
        init();
    }
    <color=#7e101a>public</color> Blake2b(
            <color=#8000FF>byte</color>[] key, 
            <color=#8000FF>int</color> _digestLength, 
            <color=#8000FF>byte</color>[] _salt, 
            <color=#8000FF>byte</color>[] _personalization) {

        buffer = <color=#7e101a>new</color> <color=#8000FF>byte</color>[BLOCK_LENGTH_BYTES];
        <color=#7e101a>if</color> (_digestLength < 1 || digestLength > 64) {
            <color=#7e101a>throw</color> <color=#7e101a>new</color> IllegalArgumentException("Invalid digest length (required: 1 - 64)");     
        }
        digestLength = _digestLength;       
        <color=#7e101a>if</color> (_salt != null) {
            <color=#7e101a>if</color> (_salt.<color=#045FB4>length</color> != 16) {
                <color=#7e101a>throw</color> <color=#7e101a>new</color> IllegalArgumentException("salt length must be exactly 16 bytes");
            }
            salt = <color=#7e101a>new</color> <color=#8000FF>byte</color>[16];
            System.<color=#045FB4>arraycopy</color>(_salt,  0,  salt,  0,  _salt.<color=#045FB4>length</color>);
        }
        <color=#7e101a>if</color> (_personalization != null) {
            <color=#7e101a>if</color> (_personalization.<color=#045FB4>length</color> != 16) {
                <color=#7e101a>throw</color> <color=#7e101a>new</color> IllegalArgumentException("personalization length must be exactly 16 bytes");
            }
            personalization = <color=#7e101a>new</color> <color=#8000FF>byte</color>[16];
            System.<color=#045FB4>arraycopy</color>(_personalization,  0,  personalization,  0,  _personalization.<color=#045FB4>length</color>);
        }       
        <color=#7e101a>if</color> (key != null) {
            <color=#7e101a>if</color> (key.<color=#045FB4>length</color> > 64) {
                <color=#7e101a>throw</color> <color=#7e101a>new</color> IllegalArgumentException("Keys > 64 are not supported");
            }
            keyLength = key.<color=#045FB4>length</color>;
            System.<color=#045FB4>arraycopy</color>(key, 0, buffer, 0, key.<color=#045FB4>length</color>);
            bufferPos = BLOCK_LENGTH_BYTES; <color=#434343>// zero padding</color>
        } 
        init();
    }
    
    <color=#434343>// initialize chainValue</color>
    <color=#7e101a>private</color> <color=#8000FF>void</color> init() {
        
        <color=#7e101a>if</color> (chainValue == null){
            chainValue = <color=#7e101a>new</color> <color=#8000FF>long</color>[8];

            chainValue[0] = blake2b_IV[0] ^ ( digestLength | (keyLength << 8) | 0x1010000);
                <color=#434343>// 0x1010000 = ((fanout << 16) | (depth << 24) | (leafLength << 32)); </color>
                <color=#434343>// with fanout = 1; depth = 0; leafLength = 0;</color>
            chainValue[1] = blake2b_IV[1];<color=#434343>// ^ nodeOffset; with nodeOffset = 0;</color>
            chainValue[2] = blake2b_IV[2];<color=#434343>// ^ ( nodeDepth | (innerHashLength << 8) );</color>
            <color=#434343>// with nodeDepth = 0; innerHashLength = 0;</color>
            
            chainValue[3] = blake2b_IV[3];
            
            chainValue[4] = blake2b_IV[4];
            chainValue[5] = blake2b_IV[5];
            <color=#7e101a>if</color> (salt != null) {
                chainValue[4] ^= (bytes2long(salt, 0));
                chainValue[5] ^= (bytes2long(salt, 8));
            }
            
            chainValue[6] = blake2b_IV[6];
            chainValue[7] = blake2b_IV[7];
            <color=#7e101a>if</color> (personalization != null) {
                chainValue[6] ^= (bytes2long(personalization, 0));
                chainValue[7] ^= (bytes2long(personalization, 8));              
            }
        }
    }
    
    <color=#7e101a>private</color> <color=#8000FF>void</color> initializeInternalState(){
        
        <color=#434343>// initialize v:</color>
        System.<color=#045FB4>arraycopy</color>(chainValue, 0, internalState, 0, chainValue.<color=#045FB4>length</color>);
        System.<color=#045FB4>arraycopy</color>(blake2b_IV, 0, internalState, chainValue.<color=#045FB4>length</color>, 4);
        internalState[12] = t0 ^ blake2b_IV[4];
        internalState[13] = t1 ^ blake2b_IV[5];
        internalState[14] = f0 ^ blake2b_IV[6];
        internalState[15] = blake2b_IV[7];<color=#434343>// ^ f1 with f1 = 0</color>
    }
    
    <color=#434343>/**</color>
<color=#434343>     * Processes the given message</color>
<color=#434343>     * </color>
<color=#434343>     * @param message</color>
<color=#434343>     *            byte array containing the message to be processed</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#8000FF>void</color> update(<color=#8000FF>byte</color>[] message) {
        <color=#7e101a>if</color> (message == null) {
            <color=#7e101a>return</color>;
        }
        update(message, 0, message.<color=#045FB4>length</color>);
    }
    
    <color=#434343>/**</color>
<color=#434343>     * Processes one single byte</color>
<color=#434343>     * </color>
<color=#434343>     * @param b</color>
<color=#434343>     *            single byte to be processed</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#8000FF>void</color> update(<color=#8000FF>byte</color> b) {
        
        <color=#8000FF>int</color> remainingLength = 0; <color=#434343>// left bytes of buffer</color>

        <color=#434343>// process the buffer if full else add to buffer:   </color>
        remainingLength = BLOCK_LENGTH_BYTES - bufferPos;
        <color=#7e101a>if</color> (remainingLength == 0) { <color=#434343>// full buffer </color>
            t0 += BLOCK_LENGTH_BYTES;
            <color=#7e101a>if</color> (t0 == 0) { <color=#434343>// if message > 2^64</color>
                t1++;   
            }
            compress(buffer, 0);

            Arrays.<color=#045FB4>fill</color>(buffer,  (<color=#8000FF>byte</color>) 0);<color=#434343>// clear buffer</color>
            buffer[0] = b;
            bufferPos = 1;
        } <color=#7e101a>else</color> {
            buffer[bufferPos] = b;
            bufferPos ++;
            <color=#7e101a>return</color>;
        }
    }
    
    <color=#434343>/**</color>
<color=#434343>     * Processes a number of bytes of the given message </color>
<color=#434343>     * from a start position up to offset+len</color>
<color=#434343>     * </color>
<color=#434343>     * @param message</color>
<color=#434343>     *            byte array containing the message to be processed</color>
<color=#434343>     * @param offset</color>
<color=#434343>     *            position of message to start from</color>
<color=#434343>     * @param len</color>
<color=#434343>     *            number of bytes to be processed.</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#8000FF>void</color> update(<color=#8000FF>byte</color>[] message, <color=#8000FF>int</color> offset, <color=#8000FF>int</color> len) {
        
        <color=#7e101a>if</color> (message == null || len == 0) <color=#7e101a>return</color>;
        
        <color=#8000FF>int</color> remainingLength = 0; <color=#434343>// left bytes of buffer</color>
        
        <color=#7e101a>if</color> (bufferPos != 0) { <color=#434343>// commenced, incomplete buffer</color>

            <color=#434343>// complete the buffer: </color>
            remainingLength = BLOCK_LENGTH_BYTES - bufferPos;
            <color=#7e101a>if</color> (remainingLength < len) { <color=#434343>// full buffer + at least 1 byte</color>
                System.<color=#045FB4>arraycopy</color>(message, offset, buffer, bufferPos, 
                        remainingLength);
                t0 += BLOCK_LENGTH_BYTES;
                <color=#7e101a>if</color> (t0 == 0) { <color=#434343>// if message > 2^64</color>
                    t1++;   
                }
                compress(buffer, 0);
                
                bufferPos = 0;
                Arrays.<color=#045FB4>fill</color>(buffer,  (<color=#8000FF>byte</color>) 0);<color=#434343>// clear buffer              </color>
                
            } <color=#7e101a>else</color> {
                System.<color=#045FB4>arraycopy</color>(message, offset, buffer, bufferPos, 
                        len);
                bufferPos += len;
                <color=#7e101a>return</color>;
            }
        }   
        <color=#434343>// process blocks except last block (also if last block is full)</color>
        <color=#8000FF>int</color> messagePos = 0;
        <color=#8000FF>int</color> blockWiseLastPos = offset + len - BLOCK_LENGTH_BYTES;

        <color=#7e101a>for</color> ( messagePos = offset + remainingLength; messagePos < blockWiseLastPos; messagePos += BLOCK_LENGTH_BYTES) { <color=#434343>// block wise 128 bytes</color>
            <color=#434343>// without buffer:</color>
            t0 += BLOCK_LENGTH_BYTES;
            <color=#7e101a>if</color> (t0 == 0) {
                t1++;   
            }
            compress(message, messagePos);
        }

        <color=#434343>//fill the buffer with left bytes, this might be a full block</color>
        System.<color=#045FB4>arraycopy</color>(message, messagePos, buffer,  0, offset + len - messagePos);   
        bufferPos += offset + len - messagePos;     
    }
    
    <color=#434343>/**</color>
<color=#434343>     * Calculates the final digest value</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#8000FF>byte</color>[] doFinal() {
        <color=#8000FF>byte</color>[] out = <color=#7e101a>new</color> <color=#8000FF>byte</color>[digestLength];
        f0 = 0xFFFFFFFFFFFFFFFFL;
        t0 += bufferPos;
        <color=#434343>// bufferPos may be < 128, so (t0 == 0) does not work </color>
        <color=#434343>// for  2^64 < message length > 2^64 - 127</color>
        <color=#7e101a>if</color> ( (t0 < 0) && (bufferPos > -t0) ) {
            t1++;
        }
        compress(buffer, 0);
        bufferPos = 0;

        <color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i < chainValue.<color=#045FB4>length</color>; i++) {
            System.<color=#045FB4>arraycopy</color>(long2bytes(chainValue[i]), 0, out, i * 8, 8);
        }
        <color=#7e101a>if</color> (keyLength == 0){
            reset();
        }
        <color=#7e101a>return</color> out;
    }
    
    
    <color=#434343>/**</color>
<color=#434343>     * Reset the hash function to use again after doFinal().</color>
<color=#434343>     * This will not work for keyed digests. </color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#8000FF>void</color> reset() {
        bufferPos = 0;
        f0 = 0L;
        t0 = 0L;
        t1 = 0L;
        Arrays.<color=#045FB4>fill</color>(buffer,  (<color=#8000FF>byte</color>) 0);<color=#434343>// Holds eventually the key if input is null</color>
        Arrays.<color=#045FB4>fill</color>(chainValue, 0L);    
        Arrays.<color=#045FB4>fill</color>(internalState, 0L);
        chainValue = null;
        <color=#7e101a>if</color> (keyLength > 0) {
            <color=#7e101a>throw</color> <color=#7e101a>new</color> IllegalStateException("Can not reset keyed Digest");
        }
        init();
    }
    
    <color=#7e101a>private</color> <color=#8000FF>void</color> compress(<color=#8000FF>byte</color>[] message, <color=#8000FF>int</color> messagePos) {

        initializeInternalState();
        
        <color=#8000FF>long</color>[] m = <color=#7e101a>new</color> <color=#8000FF>long</color>[16];
        <color=#7e101a>for</color> (<color=#8000FF>int</color> j = 0; j < 16; j++) {
            m[j] = bytes2long(message, messagePos + j*8);
        }

        <color=#7e101a>for</color> (<color=#8000FF>int</color> round = 0; round < rOUNDS; round++) {
            
            <color=#434343>// G apply to columns of internalState:m[blake2b_sigma[round][2 * blockPos]] /+1</color>
            G(m[blake2b_sigma[round][0]], m[blake2b_sigma[round][1]], 0,4,8,12); 
            G(m[blake2b_sigma[round][2]], m[blake2b_sigma[round][3]], 1,5,9,13); 
            G(m[blake2b_sigma[round][4]], m[blake2b_sigma[round][5]], 2,6,10,14); 
            G(m[blake2b_sigma[round][6]], m[blake2b_sigma[round][7]], 3,7,11,15); 
            <color=#434343>// G apply to diagonals of internalState:</color>
            G(m[blake2b_sigma[round][8]], m[blake2b_sigma[round][9]], 0,5,10,15); 
            G(m[blake2b_sigma[round][10]], m[blake2b_sigma[round][11]], 1,6,11,12);
            G(m[blake2b_sigma[round][12]], m[blake2b_sigma[round][13]], 2,7,8,13);
            G(m[blake2b_sigma[round][14]], m[blake2b_sigma[round][15]], 3,4,9,14);
        }
        
        <color=#434343>// update chain values: </color>
        <color=#7e101a>for</color>( <color=#8000FF>int</color> offset = 0; offset < 8; offset++ ) {
            chainValue[offset] = chainValue[offset] ^ internalState[offset] ^ internalState[offset + 8];    
        }
    }
    

    <color=#7e101a>private</color> <color=#8000FF>void</color> G(<color=#8000FF>long</color> m1, <color=#8000FF>long</color> m2, <color=#8000FF>int</color> posA, <color=#8000FF>int</color> posB, <color=#8000FF>int</color> posC, <color=#8000FF>int</color> posD) {

        internalState[posA] = internalState[posA] + internalState[posB] + m1; 
        internalState[posD] = rotr64(internalState[posD] ^ internalState[posA], 32); 
        internalState[posC] = internalState[posC] + internalState[posD]; 
        internalState[posB] = rotr64(internalState[posB] ^ internalState[posC], 24); <color=#434343>// replaces 25 of BLAKE</color>
        internalState[posA] = internalState[posA] + internalState[posB] + m2; 
        internalState[posD] = rotr64(internalState[posD] ^ internalState[posA], 16); 
        internalState[posC] = internalState[posC] + internalState[posD]; 
        internalState[posB] = rotr64(internalState[posB] ^ internalState[posC], 63); <color=#434343>// replaces 11 of BLAKE</color>
    }
    
    <color=#7e101a>private</color> <color=#8000FF>long</color> rotr64(<color=#8000FF>long</color> x, <color=#8000FF>int</color> rot) {
        <color=#7e101a>return</color> x >>> rot | (x << (64 - rot));
    }

    <color=#7e101a>public</color> String getName(){
        <color=#7e101a>return</color> "Blake2b";
    }

    <color=#434343>// convert one long value in byte array</color>
    <color=#434343>// little-endian byte order!</color>
    <color=#7e101a>public</color> <color=#7e101a>final</color> <color=#7e101a>static</color> <color=#8000FF>byte</color>[] long2bytes(<color=#8000FF>long</color> longValue) {
        <color=#7e101a>return</color> <color=#7e101a>new</color> <color=#8000FF>byte</color>[] {         
            (<color=#8000FF>byte</color>) longValue,
            (<color=#8000FF>byte</color>) (longValue >> 8),
            (<color=#8000FF>byte</color>) (longValue >> 16),
            (<color=#8000FF>byte</color>) (longValue >> 24),
            (<color=#8000FF>byte</color>) (longValue >> 32),
            (<color=#8000FF>byte</color>) (longValue >> 40),
            (<color=#8000FF>byte</color>) (longValue >> 48),
            (<color=#8000FF>byte</color>) (longValue >> 56)};
    }
    <color=#434343>// little-endian byte order!</color>
    <color=#7e101a>public</color> <color=#7e101a>final</color> <color=#7e101a>static</color> <color=#8000FF>long</color> bytes2long(<color=#8000FF>byte</color>[] byteArray, <color=#8000FF>int</color> offset) {
          
          <color=#7e101a>return</color> (                
                  ((<color=#8000FF>long</color>) byteArray[offset] & 0xFF ) |
                  (((<color=#8000FF>long</color>) byteArray[offset + 1] & 0xFF ) << 8) |
                  (((<color=#8000FF>long</color>) byteArray[offset + 2] & 0xFF ) << 16) |
                  (((<color=#8000FF>long</color>) byteArray[offset + 3] & 0xFF ) << 24) |
                  (((<color=#8000FF>long</color>) byteArray[offset + 4] & 0xFF ) << 32) |
                  (((<color=#8000FF>long</color>) byteArray[offset + 5] & 0xFF ) << 40) |
                  (((<color=#8000FF>long</color>) byteArray[offset + 6] & 0xFF ) << 48) |
                  (((<color=#8000FF>long</color>) byteArray[offset + 7] & 0xFF ) << 56) ) ;                                  
    }

    <color=#7e101a>public</color> <color=#8000FF>void</color> setVertexIndex(<color=#8000FF>int</color> vIndex) {
        _vIndex = vIndex;   
    }

    <color=#7e101a>public</color> <color=#8000FF>int</color> getOutputSize() {
        <color=#7e101a>return</color> digestLength;
    }   
}