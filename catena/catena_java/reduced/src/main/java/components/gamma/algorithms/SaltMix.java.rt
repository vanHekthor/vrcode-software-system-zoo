<color=#7401DF>package</color> <color=#045FB4>main.java.components.gamma.algorithms</color>;

<color=#7401DF>import</color> <color=#045FB4>main.java.Helper</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.gamma.GammaInterface</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.hash.HashInterface</color>;

<color=#434343>/**</color>
<color=#434343> * Salt dependent pudate using xorShif1024* RNG</color>
<color=#434343> * @author max</color>
<color=#434343> *</color>
<color=#434343> */</color>
<color=#7e101a>public</color> <color=#7e101a>class</color> <color=#355c08>SaltMix</color> <color=#7e101a>implements</color> GammaInterface {
    
    <color=#7e101a>private</color> HashInterface _h;
    <color=#7e101a>private</color> HashInterface _hPrime;
    <color=#7e101a>private</color> Helper helper = <color=#7e101a>new</color> Helper();
    
    <color=#7e101a>private</color> <color=#8000FF>long</color>[] r ;  <color=#434343>// state of the Xorshift RNG</color>
    <color=#7e101a>private</color> <color=#8000FF>int</color> p;      <color=#434343>// position in state vector s</color>
    
    <color=#434343>/**</color>
<color=#434343>     * implements SaltMix with xorShift1024*</color>
<color=#434343>     * </color>
<color=#434343>     * @param g         garlic</color>
<color=#434343>     * @param x         state</color>
<color=#434343>     * @param gamma     gamma</color>
<color=#434343>     * @return          updated state</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#8000FF>byte</color>[][] gamma (<color=#8000FF>int</color> g, <color=#8000FF>byte</color>[][] x, <color=#8000FF>byte</color>[] gamma){
        
        <color=#8000FF>byte</color>[] gammaByte = gamma;
        <color=#8000FF>byte</color>[] tmp1;
        <color=#8000FF>byte</color>[] tmp2;
        
        _h.<color=#045FB4>update</color>(gammaByte);
        tmp1 = _h.<color=#045FB4>doFinal</color>();
        _h.<color=#045FB4>reset</color>();
        _h.<color=#045FB4>update</color>(tmp1);
        tmp2 = _h.<color=#045FB4>doFinal</color>();
        _h.<color=#045FB4>reset</color>();
        
        transformBytesToLong(tmp1, tmp2);
        
        p=0;
        <color=#8000FF>long</color> j1 = 0;
        <color=#8000FF>long</color> j2 = 0;
        <color=#8000FF>int</color> loopLimit = (<color=#8000FF>int</color>)Math.<color=#045FB4>pow</color>(2, Math.<color=#045FB4>ceil</color>(3.0*g/4.0));
        
<color=#434343>//      System.out.println("Looplimit: " + loopLimit);</color>
        
        _hPrime.<color=#045FB4>reset</color>();
        
        <color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i < loopLimit; ++i){
            j1 = xorshift1024star() >>> (64 - g);
            j2 = xorshift1024star() >>> (64 - g);
            
            _hPrime.<color=#045FB4>update</color>(helper.<color=#045FB4>concateByteArrays</color>(x[(<color=#8000FF>int</color>)j1], x[(<color=#8000FF>int</color>)j2]));
            x[(<color=#8000FF>int</color>)j1] = _hPrime.<color=#045FB4>doFinal</color>();
            
        }
        <color=#7e101a>return</color> x;
    }
    
    <color=#7e101a>public</color> <color=#8000FF>long</color> xorshift1024star(){ 
        <color=#434343>// computes random g-bit value j1 / j2</color>
        <color=#434343>// in each iteration of the for-loop of saltMix </color>
        <color=#8000FF>long</color> s0 = r[p];
        p = (p+1) & 15;
        <color=#8000FF>long</color> s1 = r[ p];
        s1 ^= s1 << 31; <color=#434343>// a</color>
        s1 ^= s1 >>> 11; <color=#434343>// b</color>
        s0 ^= s0 >>> 30; <color=#434343>// c</color>
        r[p] = s0 ^ s1;
        <color=#7e101a>return</color> r[p] * 1181783497276652981L;
    }
    
    <color=#8000FF>void</color> transformBytesToLong(<color=#8000FF>byte</color>[] a, <color=#8000FF>byte</color>[] b){ <color=#434343>// seed the state with two hash values</color>
        r = <color=#7e101a>new</color> <color=#8000FF>long</color>[16];

        p = 0;
        <color=#8000FF>int</color> sIndex = 0;
        <color=#7e101a>for</color> ( <color=#8000FF>int</color> i = 0; i < a.<color=#045FB4>length</color>; i+=8) {
            r[sIndex++] = bytes2long(a, i);
        }
        <color=#7e101a>for</color> ( <color=#8000FF>int</color> i = 0; i < b.<color=#045FB4>length</color>; i+=8) {
            r[sIndex++] = bytes2long(b, i);
        }       
    }
    
    <color=#7e101a>public</color> <color=#7e101a>final</color> <color=#7e101a>static</color> <color=#8000FF>long</color> bytes2long(<color=#8000FF>byte</color>[] byteArray, <color=#8000FF>int</color> offset) {
          
          <color=#7e101a>return</color> (                
                  (((<color=#8000FF>long</color>) byteArray[offset + 0] & 0xFF )      ) |
                  (((<color=#8000FF>long</color>) byteArray[offset + 1] & 0xFF ) << 8 ) |
                  (((<color=#8000FF>long</color>) byteArray[offset + 2] & 0xFF ) << 16) |
                  (((<color=#8000FF>long</color>) byteArray[offset + 3] & 0xFF ) << 24) |
                  (((<color=#8000FF>long</color>) byteArray[offset + 4] & 0xFF ) << 32) |
                  (((<color=#8000FF>long</color>) byteArray[offset + 5] & 0xFF ) << 40) |
                  (((<color=#8000FF>long</color>) byteArray[offset + 6] & 0xFF ) << 48) |
                  (((<color=#8000FF>long</color>) byteArray[offset + 7] & 0xFF ) << 56) ) ;                                  
    }
    
    @Override
    <color=#7e101a>public</color> <color=#8000FF>void</color> setH(HashInterface h) {
        _h = h;
    }

    @Override
    <color=#7e101a>public</color> <color=#8000FF>void</color> setHPrime(HashInterface hPrime) {
        _hPrime = hPrime;
    }

}