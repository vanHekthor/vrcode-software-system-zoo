<color=#7401DF>package</color> <color=#045FB4>main.java</color>;

<color=#7401DF>import</color> <color=#045FB4>java.util.Arrays</color>;
<color=#7401DF>import</color> <color=#045FB4>java.util.Random</color>;

<color=#7401DF>import</color> <color=#045FB4>main.java.components.gamma.GammaInterface</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.graph.GraphInterface</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.graph.algorithms.IdxInterface</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.hash.HashInterface</color>;
<color=#7401DF>import</color> <color=#045FB4>main.java.components.phi.PhiInterface</color>;

<color=#7e101a>public</color> <color=#7e101a>class</color> <color=#355c08>Catena</color> {
    
    <color=#7e101a>private</color> Helper helper = <color=#7e101a>new</color> Helper();
    
    <color=#434343>/**</color>
<color=#434343>     * versionID decodes the version of catena</color>
<color=#434343>     * possible: "Dragonfly", "Dragonfly-Full", Butterfly", Butterfly-Full"</color>
<color=#434343>     */</color>
    <color=#7e101a>private</color> String _vId;
    
    <color=#7e101a>private</color> HashInterface   _h;
    <color=#7e101a>private</color> HashInterface   _hPrime;
    <color=#7e101a>private</color> GammaInterface  _gamma;
    <color=#7e101a>private</color> GraphInterface  _f;
    <color=#7e101a>private</color> PhiInterface    _phi;
    
    <color=#7e101a>private</color> <color=#8000FF>int</color> _d = 0;         <color=#434343>// 0 = Password Scrambling (Default)</color>
    <color=#7e101a>private</color> <color=#8000FF>int</color> _n;             <color=#434343>// H output size</color>
    <color=#7e101a>private</color> <color=#8000FF>int</color> _k;             <color=#434343>// H' output size</color>
    <color=#7e101a>private</color> <color=#8000FF>int</color> _gLow;          
    <color=#7e101a>private</color> <color=#8000FF>int</color> _gHigh;
    <color=#7e101a>private</color> <color=#8000FF>int</color> _lambda;
    
    <color=#434343>/**</color>
<color=#434343>     * Main function of catena to hash a password</color>
<color=#434343>     * </color>
<color=#434343>     * @param pwd           Password to be hashed</color>
<color=#434343>     * @param salt          Salt of arbitrary length</color>
<color=#434343>     * @param publicInput   User choosen public input</color>
<color=#434343>     * @param gamma         Input for graph size</color>
<color=#434343>     * @param m             User desired output length of hash</color>
<color=#434343>     * </color>
<color=#434343>     * @return xTrun        Hash of pwd</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#8000FF>byte</color>[] catena(<color=#8000FF>byte</color>[] pwd, <color=#8000FF>byte</color>[] salt, <color=#8000FF>byte</color>[] publicInput,
             <color=#8000FF>byte</color>[] gamma, <color=#8000FF>int</color> m){
        
        <color=#8000FF>byte</color>[] t = compTweak(_vId, _d, _lambda, m, salt.<color=#045FB4>length</color>, publicInput);
        
        _h.<color=#045FB4>update</color>(helper.<color=#045FB4>concateByteArrays</color>(t, pwd, salt));
        <color=#8000FF>byte</color>[] x = _h.<color=#045FB4>doFinal</color>();
        
        erasePwd(pwd);
        
        x = flap(((_gLow+1)/2), x, gamma);
        
        _h.<color=#045FB4>update</color>(x);
        x = _h.<color=#045FB4>doFinal</color>();
        
        <color=#8000FF>byte</color>[] gByte = <color=#7e101a>new</color> <color=#8000FF>byte</color>[1];
        
        <color=#7e101a>for</color> (<color=#8000FF>int</color> g = _gLow; g <= _gHigh; ++g){
<color=#434343>//          System.out.println("G: " + g);</color>
            <color=#7e101a>if</color> (x.<color=#045FB4>length</color> < _n){
                x = helper.<color=#045FB4>paddWithZero</color>(x, _n);
            }
            
            x = flap(g, x, gamma);
            
            gByte[0] = (<color=#8000FF>byte</color>)g;
            _h.<color=#045FB4>update</color>(helper.<color=#045FB4>concateByteArrays</color>(gByte, x));
            x = _h.<color=#045FB4>doFinal</color>();
            x = helper.<color=#045FB4>truncate</color>(x, m);
        }
        <color=#7e101a>return</color> x;
    }
    
    <color=#434343>/**</color>
<color=#434343>     * flap function from catena specification</color>
<color=#434343>     * </color>
<color=#434343>     * @param g</color>
<color=#434343>     * @param xIn</color>
<color=#434343>     * @param gamma</color>
<color=#434343>     * @return</color>
<color=#434343>     */</color>
    <color=#7e101a>private</color> <color=#8000FF>byte</color>[] flap(<color=#8000FF>int</color> g, <color=#8000FF>byte</color>[] xIn, <color=#8000FF>byte</color>[] gamma){
        
        _hPrime.<color=#045FB4>reset</color>();
        
        <color=#8000FF>byte</color>[] xHinit;
        <color=#8000FF>int</color> iterations = (<color=#8000FF>int</color>)Math.<color=#045FB4>pow</color>(2, g);
        
        <color=#8000FF>byte</color>[][] v = <color=#7e101a>new</color> <color=#8000FF>byte</color>[iterations+2][_k];
        
        xHinit = hInit(xIn);
        
        System.<color=#045FB4>arraycopy</color>(xHinit, 0, v[0], 0, _k);
        System.<color=#045FB4>arraycopy</color>(xHinit, _k, v[1], 0, _k);
        
        <color=#7e101a>for</color> (<color=#8000FF>int</color> i=2; i<iterations+2; ++i){
<color=#434343>//          if (i%10000 == 0) {</color>
<color=#434343>//              System.out.println("Flap iterations " + i + " / " + iterations);</color>
<color=#434343>//          }</color>
            _hPrime.<color=#045FB4>update</color>(helper.<color=#045FB4>concateByteArrays</color>(v[i-1], v[i-2]));
            v[i] = _hPrime.<color=#045FB4>doFinal</color>();
        }
<color=#434343>//      System.out.println("Now out.");</color>
        
        <color=#8000FF>byte</color>[][] v2 = <color=#7e101a>new</color> <color=#8000FF>byte</color>[iterations][_k];
        System.<color=#045FB4>arraycopy</color>( v, 2, v2, 0, v2.<color=#045FB4>length</color> );
        
        _hPrime.<color=#045FB4>reset</color>();
        
        v2 = gamma(g, v2, gamma);
        
<color=#434343>//      System.out.println("Now out gamma.");</color>
        
        _hPrime.<color=#045FB4>reset</color>();
        
        v2 = f(g, v2, _lambda);
        
<color=#434343>//      System.out.println("Now out f.");</color>
        
        _hPrime.<color=#045FB4>reset</color>();
        v2 = phi(g, v2, v2[v2.<color=#045FB4>length</color>-1]);
        
<color=#434343>//      System.out.println("Now out phi.");</color>
        <color=#7e101a>return</color> v2[v2.<color=#045FB4>length</color>-1];
    }
    
    <color=#7e101a>public</color> <color=#8000FF>byte</color>[] flapPub(<color=#8000FF>int</color> g, <color=#8000FF>byte</color>[] xIn, <color=#8000FF>byte</color>[] gamma){
        <color=#7e101a>return</color> flap(g, xIn, gamma);
    }
    
    
    <color=#434343>/**</color>
<color=#434343>     * Initialisation of the 2 values for flap rounds</color>
<color=#434343>     * </color>
<color=#434343>     * @param x     Input Array</color>
<color=#434343>     * @return      2 hashed values v_-1, V_-2 in one byte array</color>
<color=#434343>     *              (output is already splitted in the middle and swapped)</color>
<color=#434343>     */</color>
    <color=#7e101a>private</color> <color=#8000FF>byte</color>[] hInit(<color=#8000FF>byte</color>[] x){
        <color=#8000FF>int</color> l = 2*_k/_n;
        <color=#8000FF>byte</color>[][] xLoop = <color=#7e101a>new</color> <color=#8000FF>byte</color>[l][_n];
        <color=#8000FF>byte</color>[] iByte = <color=#7e101a>new</color> <color=#8000FF>byte</color>[1];
        
        <color=#7e101a>for</color> (<color=#8000FF>int</color> i=0; i<= l-1; ++i){
            iByte[0] = (<color=#8000FF>byte</color>) i;
            _h.<color=#045FB4>update</color>(helper.<color=#045FB4>concateByteArrays</color>(iByte, x));
            xLoop[i] = _h.<color=#045FB4>doFinal</color>();
            _h.<color=#045FB4>reset</color>();
        }
        <color=#7e101a>return</color> helper.<color=#045FB4>twoDimByteArrayToOne</color>(xLoop);
    }
    
    <color=#434343>/**</color>
<color=#434343>     * No clue how to test private functions so this wrapper exists</color>
<color=#434343>     * </color>
<color=#434343>     * @param x     Initial value to instantiate v-2 and v-1</color>
<color=#434343>     * @return      v-2 and v-1 combined in one array</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#8000FF>byte</color>[] testHInit(<color=#8000FF>byte</color>[] x){
        <color=#7e101a>return</color> hInit(x);
    }
    
    <color=#434343>/**</color>
<color=#434343>     * salt dependent update with random access</color>
<color=#434343>     * </color>
<color=#434343>     * @param g     garlic</color>
<color=#434343>     * @param x     hash array</color>
<color=#434343>     * @param gamma gamma</color>
<color=#434343>     * @return      hash array</color>
<color=#434343>     */</color>
    <color=#7e101a>private</color> <color=#8000FF>byte</color>[][] gamma(<color=#8000FF>int</color> g, <color=#8000FF>byte</color>[][] x, <color=#8000FF>byte</color>[] gamma){
        <color=#7e101a>return</color> _gamma.<color=#045FB4>gamma</color>(g, x, gamma);
    }
    
    <color=#434343>/**</color>
<color=#434343>     * Memory expensive graph Layer</color>
<color=#434343>     * </color>
<color=#434343>     * @param x     hash input</color>
<color=#434343>     * @return      hash output</color>
<color=#434343>     */</color>
    <color=#7e101a>private</color> <color=#8000FF>byte</color>[][] f(<color=#8000FF>int</color> g, <color=#8000FF>byte</color>[][] x, <color=#8000FF>int</color> lambda){
        <color=#7e101a>return</color> _f.<color=#045FB4>graph</color>(g, x, lambda);
    }
    
    <color=#434343>/**</color>
<color=#434343>     * phi function from catena specification</color>
<color=#434343>     * </color>
<color=#434343>     * @param x     hash input</color>
<color=#434343>     * @return      hash output</color>
<color=#434343>     */</color>
    <color=#7e101a>private</color> <color=#8000FF>byte</color>[][] phi(<color=#8000FF>int</color> garlic, <color=#8000FF>byte</color>[][] x, <color=#8000FF>byte</color>[] m){
        <color=#7e101a>return</color> _phi.<color=#045FB4>phi</color>(garlic, x, m);
    }
    
    <color=#434343>/**</color>
<color=#434343>     * Combine Tweak Array</color>
<color=#434343>     * </color>
<color=#434343>     * @param vId       Version ID</color>
<color=#434343>     * @param mode      Mode of catena</color>
<color=#434343>     * @param lambda    Lambda</color>
<color=#434343>     * @param outLen    Output Length</color>
<color=#434343>     * @param sLen      Salt Length</color>
<color=#434343>     * @param aData     Additional Data</color>
<color=#434343>     * @return          Combined Tweak</color>
<color=#434343>     */</color>
    <color=#7e101a>private</color> <color=#8000FF>byte</color>[] compTweak(String vId, <color=#8000FF>int</color> mode, 
            <color=#8000FF>int</color> lambda, <color=#8000FF>int</color> outLen, <color=#8000FF>int</color> sLen, <color=#8000FF>byte</color>[] aData) {
        
        <color=#8000FF>byte</color>[] modeByte = <color=#7e101a>new</color> <color=#8000FF>byte</color>[1];
        <color=#8000FF>byte</color>[] lambdaByte = <color=#7e101a>new</color> <color=#8000FF>byte</color>[1];
        <color=#8000FF>byte</color>[] outLenByte = helper.<color=#045FB4>intToByteArrayLittleEndian</color>(outLen, 2);
        <color=#8000FF>byte</color>[] sLenByte = helper.<color=#045FB4>intToByteArrayLittleEndian</color>(sLen, 2);
        
        _h.<color=#045FB4>update</color>((helper.<color=#045FB4>string2Bytes</color>(vId)));
        <color=#8000FF>byte</color>[] vIdH = _h.<color=#045FB4>doFinal</color>();
        _h.<color=#045FB4>reset</color>();

        _h.<color=#045FB4>update</color>(aData);
        <color=#8000FF>byte</color>[] aDataH = _h.<color=#045FB4>doFinal</color>();
        _h.<color=#045FB4>reset</color>();
        
        modeByte[0] = (<color=#8000FF>byte</color>) mode;
        lambdaByte[0] = (<color=#8000FF>byte</color>) lambda;

        <color=#7e101a>return</color> helper.<color=#045FB4>concateByteArrays</color>(vIdH, modeByte, 
                lambdaByte, outLenByte, sLenByte, aDataH);
    }
    
    <color=#434343>/**</color>
<color=#434343>     * public interface for testing tweak computation</color>
<color=#434343>     * </color>
<color=#434343>     * @param vId       String, VersionID</color>
<color=#434343>     * @param mode      Integer, Mode of Catena</color>
<color=#434343>     * @param lambda    Integer, The depth of the graph structure.</color>
<color=#434343>     * @param outLen    Integer, Output length.</color>
<color=#434343>     * @param sLen      Integer, Salt length.</color>
<color=#434343>     * @param aData     byte[], Associated data of the user and/or the host.</color>
<color=#434343>     * @return tweak    byte[], The calculatetd tweak.</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#8000FF>byte</color>[] testCompTweak (String vId, <color=#8000FF>int</color> mode, 
            <color=#8000FF>int</color> lambda, <color=#8000FF>int</color> outLen, <color=#8000FF>int</color> sLen, <color=#8000FF>byte</color>[] aData){
        <color=#7e101a>return</color> compTweak(vId, mode, lambda, outLen, sLen, aData);
    }
    
    <color=#434343>/**</color>
<color=#434343>     * Clear the password</color>
<color=#434343>     * </color>
<color=#434343>     * @param pwd   the password to be cleared</color>
<color=#434343>     */</color>
    <color=#7e101a>private</color> <color=#7e101a>final</color> <color=#8000FF>void</color> erasePwd(<color=#8000FF>byte</color>[] pwd) {
        Arrays.<color=#045FB4>fill</color>(pwd, (<color=#8000FF>byte</color>) 0);
    }

    <color=#434343>/**</color>
<color=#434343>     * Initializes Catena</color>
<color=#434343>     * </color>
<color=#434343>     * initializrs all needed variables and functions with default values</color>
<color=#434343>     * </color>
<color=#434343>     * @param h         main hash function</color>
<color=#434343>     * @param hPrime    reduced hash function</color>
<color=#434343>     * @param gamma     gamma function (e.g. SaltMix)</color>
<color=#434343>     * @param f         graph</color>
<color=#434343>     * @param idx       index function for graph</color>
<color=#434343>     * @param phi       phi function</color>
<color=#434343>     * @param gLow      minimum Garlic</color>
<color=#434343>     * @param gHigh     maximum Garlic</color>
<color=#434343>     * @param lambda    depth of graphs</color>
<color=#434343>     * @param vID       version ID</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#8000FF>void</color> init(HashInterface h, HashInterface hPrime, 
            GammaInterface gamma, GraphInterface f, 
            IdxInterface idx, PhiInterface phi, <color=#8000FF>int</color> gLow, <color=#8000FF>int</color> gHigh,
            <color=#8000FF>int</color> lambda, String vID){
        
        _h = h;
        _hPrime = hPrime;
        
        _gamma = gamma;
        _gamma.<color=#045FB4>setH</color>(_h);
        _gamma.<color=#045FB4>setHPrime</color>(_hPrime);
        
        _f = f;
        _f.<color=#045FB4>setH</color>(_h);
        _f.<color=#045FB4>setHPrime</color>(_hPrime);
        _f.<color=#045FB4>setIndexing</color>(idx);
        
        _phi = phi;
        _phi.<color=#045FB4>setH</color>(_h);
        _phi.<color=#045FB4>setHPrime</color>(_hPrime);
        
        _gLow = gLow;
        _gHigh = gHigh;
        
        _lambda = lambda;
        
        _n = _h.<color=#045FB4>getOutputSize</color>();
        _k = _hPrime.<color=#045FB4>getOutputSize</color>();
        
        _vId = vID;
    }
    
    <color=#7e101a>public</color> String getVID(){
        <color=#7e101a>return</color> _vId;
    }
    
    <color=#7e101a>public</color> <color=#8000FF>int</color> getLambda(){
        <color=#7e101a>return</color> _lambda;
    }
    
    <color=#7e101a>public</color> <color=#8000FF>void</color> setGHigh(<color=#8000FF>int</color> gHigh){
        _gHigh = gHigh;
    }
    
    <color=#7e101a>public</color> <color=#8000FF>void</color> setGLow(<color=#8000FF>int</color> gLow){
        _gLow = gLow;
    }
    
    <color=#7e101a>public</color> <color=#8000FF>void</color> setD(<color=#8000FF>int</color> d){
        _d = d;
    }
    
}