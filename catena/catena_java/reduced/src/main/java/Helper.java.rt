<color=#7401DF>package</color> <color=#045FB4>main.java</color>;

<color=#7401DF>import</color> <color=#045FB4>java.io.BufferedReader</color>;
<color=#7401DF>import</color> <color=#045FB4>java.io.ByteArrayOutputStream</color>;
<color=#7401DF>import</color> <color=#045FB4>java.io.File</color>;
<color=#7401DF>import</color> <color=#045FB4>java.io.FileReader</color>;
<color=#7401DF>import</color> <color=#045FB4>java.io.IOException</color>;
<color=#7401DF>import</color> <color=#045FB4>java.nio.ByteBuffer</color>;
<color=#7401DF>import</color> <color=#045FB4>java.util.Arrays</color>;

<color=#7401DF>import</color> <color=#045FB4>org.json.JSONArray</color>;
<color=#7401DF>import</color> <color=#045FB4>org.json.JSONObject</color>;

<color=#7e101a>public</color> <color=#7e101a>class</color> <color=#355c08>Helper</color> {
    
    <color=#7e101a>private</color> <color=#7e101a>final</color> <color=#7e101a>static</color> <color=#8000FF>char</color>[] hexArray = 
            "0123456789ABCDEF".<color=#045FB4>toCharArray</color>();

    <color=#434343>/**</color>
<color=#434343>     * Helper-function</color>
<color=#434343>     * from "github.com/Beloumi/Crypto-Eck"</color>
<color=#434343>     * transfers string to byte array</color>
<color=#434343>     * @param  hexString    input string</color>
<color=#434343>     * @return              byte array</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#7e101a>final</color> <color=#8000FF>byte</color>[] hex2bytes(String hexString) {

        <color=#434343>// 2 Character = 1 Byte</color>
        <color=#8000FF>byte</color>[] byteArray = <color=#7e101a>new</color> <color=#8000FF>byte</color>[hexString.<color=#045FB4>length</color>() / 2];
        <color=#8000FF>int</color> len = hexString.<color=#045FB4>length</color>();
        <color=#7e101a>if</color> ( (len & 1) == 1){ 
            System.<color=#045FB4>err</color>.<color=#045FB4>println</color>("Illegal Argument (Function "
                    + "hexStringToBytes): HexString is not even");
            System.<color=#045FB4>exit</color>(1);
        }
        <color=#7e101a>final</color> <color=#8000FF>char</color> [] hexCharArray = hexString.<color=#045FB4>toCharArray</color> ();
        <color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i < hexString.<color=#045FB4>length</color>(); i+=2) {
            <color=#434343>// 1. char in hex <<4, 2. char in hex</color>
            byteArray[i / 2] = 
                    (<color=#8000FF>byte</color>) ((Character.<color=#045FB4>digit</color> (hexCharArray[i], 16) << 4) 
                    + Character.<color=#045FB4>digit</color> (hexCharArray[i + 1], 16));
        }       
        <color=#7e101a>return</color> byteArray;
    }
    
    <color=#7e101a>public</color> <color=#7e101a>final</color> <color=#8000FF>byte</color>[] string2Bytes (String hexString){
        <color=#7e101a>return</color> hexString.<color=#045FB4>getBytes</color>();
    }

    <color=#434343>/**</color>
<color=#434343>     * Helper-function</color>
<color=#434343>     * from "github.com/Beloumi/Crypto-Eck"</color>
<color=#434343>     * transfers byte array to string</color>
<color=#434343>     * @param bytes     array of bytes</color>
<color=#434343>     * @return          hexString</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#7e101a>final</color> String bytes2hex(<color=#8000FF>byte</color>[] bytes) {
        <color=#8000FF>char</color>[] hexChars = <color=#7e101a>new</color> <color=#8000FF>char</color>[bytes.<color=#045FB4>length</color> * 2];
        <color=#7e101a>for</color> ( <color=#8000FF>int</color> j = 0; j < bytes.<color=#045FB4>length</color>; j++ ) {
            <color=#8000FF>int</color> v = bytes[j] & 0xFF;
            hexChars[j * 2] = hexArray[v >>> 4];
            hexChars[j * 2 + 1] = hexArray[v & 0x0F];
        }
        <color=#7e101a>return</color> <color=#7e101a>new</color> String(hexChars).<color=#045FB4>toLowerCase</color>();
    }
    
    <color=#434343>/**</color>
<color=#434343>     * Helper-function</color>
<color=#434343>     * Concatenation function to combine all elements of the</color>
<color=#434343>     * tweak in one array</color>
<color=#434343>     * </color>
<color=#434343>     * @param bytes1    vId </color>
<color=#434343>     * @param bytes2    mode</color>
<color=#434343>     * @param bytes3    lambda</color>
<color=#434343>     * @param bytes4    outLen</color>
<color=#434343>     * @param bytes5    sLen</color>
<color=#434343>     * @param bytes6    additionalData</color>
<color=#434343>     * </color>
<color=#434343>     * @return          all in one array</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#7e101a>final</color> <color=#8000FF>byte</color>[] concateByteArrays(<color=#8000FF>byte</color>[] bytes1, <color=#8000FF>byte</color>[] bytes2, 
            <color=#8000FF>byte</color>[] bytes3, <color=#8000FF>byte</color>[] bytes4, <color=#8000FF>byte</color>[] bytes5, <color=#8000FF>byte</color>[] bytes6){
        ByteArrayOutputStream out = <color=#7e101a>new</color> ByteArrayOutputStream();
        <color=#7e101a>try</color> {
            out.<color=#045FB4>write</color>(bytes1);
            out.<color=#045FB4>write</color>(bytes2);
            out.<color=#045FB4>write</color>(bytes3);
            out.<color=#045FB4>write</color>(bytes4);
            out.<color=#045FB4>write</color>(bytes5);
            out.<color=#045FB4>write</color>(bytes6);
        } <color=#7e101a>catch</color> (IOException e) {
            e.<color=#045FB4>printStackTrace</color>();
        }
        <color=#7e101a>return</color> out.<color=#045FB4>toByteArray</color>();
    }
    
    <color=#434343>/**</color>
<color=#434343>     * Helper-function</color>
<color=#434343>     * Concatenation function to combine tweak array</color>
<color=#434343>     * </color>
<color=#434343>     * @param bytes1    t</color>
<color=#434343>     * @param bytes2    pwd</color>
<color=#434343>     * @param bytes3    salt</color>
<color=#434343>     * @return          all in one array</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#7e101a>final</color> <color=#8000FF>byte</color>[] concateByteArrays(<color=#8000FF>byte</color>[] bytes1, <color=#8000FF>byte</color>[] bytes2, <color=#8000FF>byte</color>[] bytes3){
        ByteArrayOutputStream out = <color=#7e101a>new</color> ByteArrayOutputStream();
        <color=#7e101a>try</color> {
            out.<color=#045FB4>write</color>(bytes1);
            out.<color=#045FB4>write</color>(bytes2);
            out.<color=#045FB4>write</color>(bytes3);
        } <color=#7e101a>catch</color> (IOException e) {
            e.<color=#045FB4>printStackTrace</color>();
        }
        <color=#7e101a>return</color> out.<color=#045FB4>toByteArray</color>();
    }
    
    <color=#434343>/**</color>
<color=#434343>     * Helper-function</color>
<color=#434343>     * Concatenation function for byte arrays</color>
<color=#434343>     * </color>
<color=#434343>     * @param bytes1    byte[] 1</color>
<color=#434343>     * @param bytes2    byte[] 2</color>
<color=#434343>     * @param bytes3    byte[] 3</color>
<color=#434343>     * @param bytes4    byte[] 4</color>
<color=#434343>     * @return          all in one array</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#7e101a>final</color> <color=#8000FF>byte</color>[] concateByteArrays(<color=#8000FF>byte</color>[] bytes1, <color=#8000FF>byte</color>[] bytes2, <color=#8000FF>byte</color>[] bytes3, <color=#8000FF>byte</color>[] bytes4){
        ByteArrayOutputStream out = <color=#7e101a>new</color> ByteArrayOutputStream();
        <color=#7e101a>try</color> {
            out.<color=#045FB4>write</color>(bytes1);
            out.<color=#045FB4>write</color>(bytes2);
            out.<color=#045FB4>write</color>(bytes3);
            out.<color=#045FB4>write</color>(bytes4);
        } <color=#7e101a>catch</color> (IOException e) {
            e.<color=#045FB4>printStackTrace</color>();
        }
        <color=#7e101a>return</color> out.<color=#045FB4>toByteArray</color>();
    }
    
    <color=#434343>/**</color>
<color=#434343>     * Helper-function</color>
<color=#434343>     * Concatenation function to combine 2 byte arrays</color>
<color=#434343>     * </color>
<color=#434343>     * @param bytes1    first array</color>
<color=#434343>     * @param bytes2    second array</color>
<color=#434343>     * @return          all in one array</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#7e101a>final</color> <color=#8000FF>byte</color>[] concateByteArrays(<color=#8000FF>byte</color>[] bytes1, <color=#8000FF>byte</color>[] bytes2){
        ByteArrayOutputStream out = <color=#7e101a>new</color> ByteArrayOutputStream();
        <color=#7e101a>try</color> {
            out.<color=#045FB4>write</color>(bytes1);
            out.<color=#045FB4>write</color>(bytes2);
        } <color=#7e101a>catch</color> (IOException e) {
            e.<color=#045FB4>printStackTrace</color>();
        }
        <color=#7e101a>return</color> out.<color=#045FB4>toByteArray</color>();
    }
    
    <color=#434343>/**</color>
<color=#434343>     * Converts Integer to byte arrays of size 2 or 4</color>
<color=#434343>     * </color>
<color=#434343>     * @param data      input integer</color>
<color=#434343>     * @param bytes     ammount of bytes in array</color>
<color=#434343>     * @return          converted byte array</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#8000FF>byte</color>[] intToByteArray(<color=#8000FF>int</color> data, <color=#8000FF>int</color> bytes) {
    
        <color=#7e101a>if</color> (bytes == 4){
            <color=#8000FF>byte</color>[] result = <color=#7e101a>new</color> <color=#8000FF>byte</color>[4];
            
            result[0] = (<color=#8000FF>byte</color>) ((data & 0xFF000000) >> 24);
            result[1] = (<color=#8000FF>byte</color>) ((data & 0x00FF0000) >> 16);
            result[2] = (<color=#8000FF>byte</color>) ((data & 0x0000FF00) >>  8);
            result[3] = (<color=#8000FF>byte</color>) ((data & 0x000000FF)      );
            
            <color=#7e101a>return</color> result;
        } <color=#7e101a>else</color> <color=#7e101a>if</color> (bytes == 2){
            <color=#8000FF>byte</color>[] result = <color=#7e101a>new</color> <color=#8000FF>byte</color>[2];
            
            result[0] = (<color=#8000FF>byte</color>) ((data & 0xFF00) >> 8);
            result[1] = (<color=#8000FF>byte</color>) ((data & 0x00FF));
            
            <color=#7e101a>return</color> result;
        } <color=#7e101a>else</color> {
            <color=#7e101a>return</color> <color=#7e101a>new</color> <color=#8000FF>byte</color>[1];
        }
    }
    
    <color=#434343>/**</color>
<color=#434343>     * Converts Integer to byte arrays of size 2 or 4</color>
<color=#434343>     * </color>
<color=#434343>     * @param data      input integer</color>
<color=#434343>     * @param bytes     ammount of bytes in array</color>
<color=#434343>     * @return          converted byte array</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#8000FF>byte</color>[] intToByteArrayLittleEndian(<color=#8000FF>int</color> data, <color=#8000FF>int</color> bytes) {
    
        <color=#7e101a>if</color> (bytes == 4){
            <color=#8000FF>byte</color>[] result = <color=#7e101a>new</color> <color=#8000FF>byte</color>[4];
            
            result[0] = (<color=#8000FF>byte</color>) ((data & 0x000000FF)      );
            result[1] = (<color=#8000FF>byte</color>) ((data & 0x0000FF00) >>  8);
            result[2] = (<color=#8000FF>byte</color>) ((data & 0x00FF0000) >> 16);
            result[3] = (<color=#8000FF>byte</color>) ((data & 0xFF000000) >> 24);
            
            <color=#7e101a>return</color> result;
        } <color=#7e101a>else</color> <color=#7e101a>if</color> (bytes == 2){
            <color=#8000FF>byte</color>[] result = <color=#7e101a>new</color> <color=#8000FF>byte</color>[2];
            
            result[0] = (<color=#8000FF>byte</color>) ((data & 0x00FF)     );
            result[1] = (<color=#8000FF>byte</color>) ((data & 0xFF00) >> 8);
            
            <color=#7e101a>return</color> result;
        } <color=#7e101a>else</color> {
            <color=#7e101a>return</color> <color=#7e101a>new</color> <color=#8000FF>byte</color>[1];
        }
    }
    
    <color=#434343>/**</color>
<color=#434343>     * combines two dimensional byte array to one dimension </color>
<color=#434343>     * </color>
<color=#434343>     * @param bytes     two dim byte array</color>
<color=#434343>     * @return          one dimensional array</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#8000FF>byte</color>[] twoDimByteArrayToOne(<color=#8000FF>byte</color>[][] bytes){
        ByteArrayOutputStream out = <color=#7e101a>new</color> ByteArrayOutputStream();
        
        <color=#7e101a>for</color>(<color=#8000FF>int</color> row =0 ; row < bytes.<color=#045FB4>length</color>; ++row){
            <color=#7e101a>try</color> {
                out.<color=#045FB4>write</color>(bytes[row]);
            } <color=#7e101a>catch</color> (IOException e) {
                e.<color=#045FB4>printStackTrace</color>();
            }
        }
        <color=#7e101a>return</color> out.<color=#045FB4>toByteArray</color>();
    }
    
    <color=#7e101a>public</color> <color=#8000FF>byte</color>[][] oneDimByteArrToTwoDim (<color=#8000FF>byte</color>[] b, <color=#8000FF>int</color> len){
        <color=#8000FF>int</color> bLen = b.<color=#045FB4>length</color>;
        <color=#8000FF>int</color> dimension = bLen/len;
        
        <color=#8000FF>byte</color>[][] twoDim = <color=#7e101a>new</color> <color=#8000FF>byte</color>[dimension][len];
        <color=#7e101a>for</color> (<color=#8000FF>int</color> i = 0; i < bLen/len; ++i ){
            <color=#8000FF>byte</color>[] tmp = <color=#7e101a>new</color> <color=#8000FF>byte</color>[len];
            System.<color=#045FB4>arraycopy</color>(b, i*len, tmp, 0, len);
            twoDim[i] = tmp;
        }
        <color=#7e101a>return</color> twoDim;
    }
    
    <color=#434343>/**</color>
<color=#434343>     * Helper-function</color>
<color=#434343>     * Creates a new array of desired size and copies the old one in </color>
<color=#434343>     * </color>
<color=#434343>     * @param b     input array of size m</color>
<color=#434343>     * @param l     desired size</color>
<color=#434343>     * @return      array with padded 0's</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#7e101a>final</color> <color=#8000FF>byte</color>[] paddWithZero(<color=#8000FF>byte</color>[] b, <color=#8000FF>int</color> l){
        <color=#8000FF>byte</color>[] output = <color=#7e101a>new</color> <color=#8000FF>byte</color>[l];
        System.<color=#045FB4>arraycopy</color>(b, 0, output, 0, b.<color=#045FB4>length</color>);
        <color=#7e101a>return</color> output;
    }
    
    <color=#434343>/**</color>
<color=#434343>     * Helper-function</color>
<color=#434343>     * truncates at the end of flap</color>
<color=#434343>     * </color>
<color=#434343>     * @param x     the current array to be truncated</color>
<color=#434343>     * @param m     the desired output length</color>
<color=#434343>     * @return      the resulting array</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#7e101a>final</color> <color=#8000FF>byte</color>[] truncate(<color=#8000FF>byte</color>[] x, <color=#8000FF>int</color> m){
        <color=#7e101a>return</color> Arrays.<color=#045FB4>copyOfRange</color>(x, 0, m);
    }
    
    <color=#434343>/**</color>
<color=#434343>     * XORing two byte arrays of equal size</color>
<color=#434343>     * </color>
<color=#434343>     * @param arr1      first byte array</color>
<color=#434343>     * @param arr2      second byte array</color>
<color=#434343>     * @return          XORed byte array</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#8000FF>byte</color>[] xor (<color=#8000FF>byte</color>[] arr1, <color=#8000FF>byte</color>[] arr2){
        <color=#8000FF>byte</color>[] res = <color=#7e101a>new</color> <color=#8000FF>byte</color>[arr1.<color=#045FB4>length</color>];
        <color=#8000FF>int</color> i = 0;
        <color=#7e101a>for</color> (<color=#8000FF>byte</color> b : arr1)
            res[i] = (<color=#8000FF>byte</color>) (b ^ arr2[i++]);
        <color=#7e101a>return</color> res;
    }
    
    <color=#434343>/**</color>
<color=#434343>     * Container for byte to long and long to byte transformation</color>
<color=#434343>     */</color>
    <color=#7e101a>private</color> ByteBuffer bufferLong = ByteBuffer.<color=#045FB4>allocate</color>(Long.<color=#045FB4>BYTES</color>);    

    <color=#434343>/**</color>
<color=#434343>     * Transforms long to byte array</color>
<color=#434343>     * </color>
<color=#434343>     * @param x     long input</color>
<color=#434343>     * @return      byte array</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#8000FF>byte</color>[] longToBytes(<color=#8000FF>long</color> x) {
        bufferLong.<color=#045FB4>putLong</color>(0, x);
        <color=#7e101a>return</color> bufferLong.<color=#045FB4>array</color>();
    }

    <color=#434343>/**</color>
<color=#434343>     * Transforms byte arrsy to long</color>
<color=#434343>     * </color>
<color=#434343>     * @param bytes     bytes to transform to long</color>
<color=#434343>     * @return          long value</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#8000FF>long</color> bytesToLong(<color=#8000FF>byte</color>[] bytes) {
        bufferLong.<color=#045FB4>put</color>(bytes, 0, bytes.<color=#045FB4>length</color>);
        bufferLong.<color=#045FB4>flip</color>();<color=#434343>//need flip </color>
        <color=#7e101a>return</color> bufferLong.<color=#045FB4>getLong</color>();
    }
    

    <color=#434343>/**</color>
<color=#434343>     * Container for byte to int and int to byte transformation</color>
<color=#434343>     */</color>
    <color=#7e101a>private</color> ByteBuffer bufferInt = ByteBuffer.<color=#045FB4>allocate</color>(Integer.<color=#045FB4>BYTES</color>);

    <color=#434343>/**</color>
<color=#434343>     * Transforms Integer to byte array</color>
<color=#434343>     * </color>
<color=#434343>     * @param x         input integer</color>
<color=#434343>     * @return          byte array</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#8000FF>byte</color>[] intToBytes(<color=#8000FF>int</color> x) {
        bufferInt.<color=#045FB4>clear</color>();
        bufferInt.<color=#045FB4>putInt</color>(x);
        <color=#7e101a>return</color> bufferInt.<color=#045FB4>array</color>();
    }
    
    <color=#434343>/**</color>
<color=#434343>     * Transforms byte array to Integer</color>
<color=#434343>     * </color>
<color=#434343>     * @param bytes     bytes to be transformed to int</color>
<color=#434343>     * @return          int value</color>
<color=#434343>     */</color>
    <color=#7e101a>public</color> <color=#8000FF>int</color> bytesToInt (<color=#8000FF>byte</color>[] bytes) {
        bufferInt.<color=#045FB4>put</color>(bytes, 0, bytes.<color=#045FB4>length</color>);
        bufferInt.<color=#045FB4>flip</color>();
        <color=#7e101a>return</color> bufferInt.<color=#045FB4>getInt</color>();
    }
    
    <color=#7e101a>public</color> JSONArray jsonParserArr(File f){
        BufferedReader br;
        String all = "";
        <color=#7e101a>try</color> {
            br = <color=#7e101a>new</color> BufferedReader(<color=#7e101a>new</color> FileReader(f));
            String line;
            <color=#7e101a>while</color> ((line = br.<color=#045FB4>readLine</color>()) != null) {
                all+=line;
            }
        }<color=#7e101a>catch</color> (Exception e) {
        }
        <color=#7e101a>return</color> <color=#7e101a>new</color> JSONArray(all);
    }
    
    <color=#7e101a>public</color> JSONObject jsonParserObj(File f){
        BufferedReader br;
        String all = "";
        <color=#7e101a>try</color> {
            br = <color=#7e101a>new</color> BufferedReader(<color=#7e101a>new</color> FileReader(f));
            String line;
            <color=#7e101a>while</color> ((line = br.<color=#045FB4>readLine</color>()) != null) {
                all+=line;
            }
        }<color=#7e101a>catch</color> (Exception e) {
        }
        <color=#7e101a>return</color> <color=#7e101a>new</color> JSONObject(all);
    }
}